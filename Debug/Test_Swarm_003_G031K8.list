
Test_Swarm_003_G031K8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f58  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f4  08006014  08006014  00016014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006408  08006408  000200d4  2**0
                  CONTENTS
  4 .ARM          00000008  08006408  08006408  00016408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006410  08006410  000200d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006410  08006410  00016410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006414  08006414  00016414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  20000000  08006418  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d4  200000d4  080064ec  000200d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a8  080064ec  000203a8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000121ad  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000253b  00000000  00000000  000322a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f58  00000000  00000000  000347e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e70  00000000  00000000  00035740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017907  00000000  00000000  000365b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011cb2  00000000  00000000  0004deb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094ad6  00000000  00000000  0005fb69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f463f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043a0  00000000  00000000  000f4690  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200000d4 	.word	0x200000d4
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005ffc 	.word	0x08005ffc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200000d8 	.word	0x200000d8
 8000100:	08005ffc 	.word	0x08005ffc

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	0008      	movs	r0, r1
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	; (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	; (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8ba 	bl	80005ec <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8b5 	bl	80005ec <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	469b      	mov	fp, r3
 800048a:	d433      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048c:	465a      	mov	r2, fp
 800048e:	4653      	mov	r3, sl
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83a      	bhi.n	8000516 <__udivmoddi4+0xc2>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e078      	b.n	8000598 <__udivmoddi4+0x144>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e075      	b.n	800059e <__udivmoddi4+0x14a>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e028      	b.n	800051e <__udivmoddi4+0xca>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	2320      	movs	r3, #32
 80004f8:	1a9b      	subs	r3, r3, r2
 80004fa:	4652      	mov	r2, sl
 80004fc:	40da      	lsrs	r2, r3
 80004fe:	4641      	mov	r1, r8
 8000500:	0013      	movs	r3, r2
 8000502:	464a      	mov	r2, r9
 8000504:	408a      	lsls	r2, r1
 8000506:	0017      	movs	r7, r2
 8000508:	4642      	mov	r2, r8
 800050a:	431f      	orrs	r7, r3
 800050c:	4653      	mov	r3, sl
 800050e:	4093      	lsls	r3, r2
 8000510:	001e      	movs	r6, r3
 8000512:	42af      	cmp	r7, r5
 8000514:	d9c4      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000516:	2200      	movs	r2, #0
 8000518:	2300      	movs	r3, #0
 800051a:	9200      	str	r2, [sp, #0]
 800051c:	9301      	str	r3, [sp, #4]
 800051e:	4643      	mov	r3, r8
 8000520:	2b00      	cmp	r3, #0
 8000522:	d0d9      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000524:	07fb      	lsls	r3, r7, #31
 8000526:	0872      	lsrs	r2, r6, #1
 8000528:	431a      	orrs	r2, r3
 800052a:	4646      	mov	r6, r8
 800052c:	087b      	lsrs	r3, r7, #1
 800052e:	e00e      	b.n	800054e <__udivmoddi4+0xfa>
 8000530:	42ab      	cmp	r3, r5
 8000532:	d101      	bne.n	8000538 <__udivmoddi4+0xe4>
 8000534:	42a2      	cmp	r2, r4
 8000536:	d80c      	bhi.n	8000552 <__udivmoddi4+0xfe>
 8000538:	1aa4      	subs	r4, r4, r2
 800053a:	419d      	sbcs	r5, r3
 800053c:	2001      	movs	r0, #1
 800053e:	1924      	adds	r4, r4, r4
 8000540:	416d      	adcs	r5, r5
 8000542:	2100      	movs	r1, #0
 8000544:	3e01      	subs	r6, #1
 8000546:	1824      	adds	r4, r4, r0
 8000548:	414d      	adcs	r5, r1
 800054a:	2e00      	cmp	r6, #0
 800054c:	d006      	beq.n	800055c <__udivmoddi4+0x108>
 800054e:	42ab      	cmp	r3, r5
 8000550:	d9ee      	bls.n	8000530 <__udivmoddi4+0xdc>
 8000552:	3e01      	subs	r6, #1
 8000554:	1924      	adds	r4, r4, r4
 8000556:	416d      	adcs	r5, r5
 8000558:	2e00      	cmp	r6, #0
 800055a:	d1f8      	bne.n	800054e <__udivmoddi4+0xfa>
 800055c:	9800      	ldr	r0, [sp, #0]
 800055e:	9901      	ldr	r1, [sp, #4]
 8000560:	465b      	mov	r3, fp
 8000562:	1900      	adds	r0, r0, r4
 8000564:	4169      	adcs	r1, r5
 8000566:	2b00      	cmp	r3, #0
 8000568:	db24      	blt.n	80005b4 <__udivmoddi4+0x160>
 800056a:	002b      	movs	r3, r5
 800056c:	465a      	mov	r2, fp
 800056e:	4644      	mov	r4, r8
 8000570:	40d3      	lsrs	r3, r2
 8000572:	002a      	movs	r2, r5
 8000574:	40e2      	lsrs	r2, r4
 8000576:	001c      	movs	r4, r3
 8000578:	465b      	mov	r3, fp
 800057a:	0015      	movs	r5, r2
 800057c:	2b00      	cmp	r3, #0
 800057e:	db2a      	blt.n	80005d6 <__udivmoddi4+0x182>
 8000580:	0026      	movs	r6, r4
 8000582:	409e      	lsls	r6, r3
 8000584:	0033      	movs	r3, r6
 8000586:	0026      	movs	r6, r4
 8000588:	4647      	mov	r7, r8
 800058a:	40be      	lsls	r6, r7
 800058c:	0032      	movs	r2, r6
 800058e:	1a80      	subs	r0, r0, r2
 8000590:	4199      	sbcs	r1, r3
 8000592:	9000      	str	r0, [sp, #0]
 8000594:	9101      	str	r1, [sp, #4]
 8000596:	e79f      	b.n	80004d8 <__udivmoddi4+0x84>
 8000598:	42a3      	cmp	r3, r4
 800059a:	d8bc      	bhi.n	8000516 <__udivmoddi4+0xc2>
 800059c:	e783      	b.n	80004a6 <__udivmoddi4+0x52>
 800059e:	4642      	mov	r2, r8
 80005a0:	2320      	movs	r3, #32
 80005a2:	2100      	movs	r1, #0
 80005a4:	1a9b      	subs	r3, r3, r2
 80005a6:	2200      	movs	r2, #0
 80005a8:	9100      	str	r1, [sp, #0]
 80005aa:	9201      	str	r2, [sp, #4]
 80005ac:	2201      	movs	r2, #1
 80005ae:	40da      	lsrs	r2, r3
 80005b0:	9201      	str	r2, [sp, #4]
 80005b2:	e786      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	2320      	movs	r3, #32
 80005b8:	1a9b      	subs	r3, r3, r2
 80005ba:	002a      	movs	r2, r5
 80005bc:	4646      	mov	r6, r8
 80005be:	409a      	lsls	r2, r3
 80005c0:	0023      	movs	r3, r4
 80005c2:	40f3      	lsrs	r3, r6
 80005c4:	4644      	mov	r4, r8
 80005c6:	4313      	orrs	r3, r2
 80005c8:	002a      	movs	r2, r5
 80005ca:	40e2      	lsrs	r2, r4
 80005cc:	001c      	movs	r4, r3
 80005ce:	465b      	mov	r3, fp
 80005d0:	0015      	movs	r5, r2
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	dad4      	bge.n	8000580 <__udivmoddi4+0x12c>
 80005d6:	4642      	mov	r2, r8
 80005d8:	002f      	movs	r7, r5
 80005da:	2320      	movs	r3, #32
 80005dc:	0026      	movs	r6, r4
 80005de:	4097      	lsls	r7, r2
 80005e0:	1a9b      	subs	r3, r3, r2
 80005e2:	40de      	lsrs	r6, r3
 80005e4:	003b      	movs	r3, r7
 80005e6:	4333      	orrs	r3, r6
 80005e8:	e7cd      	b.n	8000586 <__udivmoddi4+0x132>
 80005ea:	46c0      	nop			; (mov r8, r8)

080005ec <__clzdi2>:
 80005ec:	b510      	push	{r4, lr}
 80005ee:	2900      	cmp	r1, #0
 80005f0:	d103      	bne.n	80005fa <__clzdi2+0xe>
 80005f2:	f000 f807 	bl	8000604 <__clzsi2>
 80005f6:	3020      	adds	r0, #32
 80005f8:	e002      	b.n	8000600 <__clzdi2+0x14>
 80005fa:	0008      	movs	r0, r1
 80005fc:	f000 f802 	bl	8000604 <__clzsi2>
 8000600:	bd10      	pop	{r4, pc}
 8000602:	46c0      	nop			; (mov r8, r8)

08000604 <__clzsi2>:
 8000604:	211c      	movs	r1, #28
 8000606:	2301      	movs	r3, #1
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0xe>
 800060e:	0c00      	lsrs	r0, r0, #16
 8000610:	3910      	subs	r1, #16
 8000612:	0a1b      	lsrs	r3, r3, #8
 8000614:	4298      	cmp	r0, r3
 8000616:	d301      	bcc.n	800061c <__clzsi2+0x18>
 8000618:	0a00      	lsrs	r0, r0, #8
 800061a:	3908      	subs	r1, #8
 800061c:	091b      	lsrs	r3, r3, #4
 800061e:	4298      	cmp	r0, r3
 8000620:	d301      	bcc.n	8000626 <__clzsi2+0x22>
 8000622:	0900      	lsrs	r0, r0, #4
 8000624:	3904      	subs	r1, #4
 8000626:	a202      	add	r2, pc, #8	; (adr r2, 8000630 <__clzsi2+0x2c>)
 8000628:	5c10      	ldrb	r0, [r2, r0]
 800062a:	1840      	adds	r0, r0, r1
 800062c:	4770      	bx	lr
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	02020304 	.word	0x02020304
 8000634:	01010101 	.word	0x01010101
	...

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000644:	f000 fd8a 	bl	800115c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000648:	f000 f826 	bl	8000698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064c:	f000 f900 	bl	8000850 <MX_GPIO_Init>
  MX_DMA_Init();
 8000650:	f000 f8e0 	bl	8000814 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000654:	f000 f890 	bl	8000778 <MX_USART1_UART_Init>
  MX_TIM14_Init();
 8000658:	f000 f866 	bl	8000728 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  __HAL_TIM_CLEAR_IT ( &htim14 , TIM_IT_UPDATE ) ;
 800065c:	4b0a      	ldr	r3, [pc, #40]	; (8000688 <main+0x48>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2202      	movs	r2, #2
 8000662:	4252      	negs	r2, r2
 8000664:	611a      	str	r2, [r3, #16]
  HAL_UARTEx_ReceiveToIdle_DMA ( SWARM_UART_HANDLER , (uint8_t*) swarm_uart_rx_buff , SWARM_UART_RX_MAX_BUFF_SIZE ) ;
 8000666:	4909      	ldr	r1, [pc, #36]	; (800068c <main+0x4c>)
 8000668:	4b09      	ldr	r3, [pc, #36]	; (8000690 <main+0x50>)
 800066a:	2264      	movs	r2, #100	; 0x64
 800066c:	0018      	movs	r0, r3
 800066e:	f004 f897 	bl	80047a0 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT ( &hdma_usart1_rx, DMA_IT_HT ) ; //Disable Half Transfer interrupt.
 8000672:	4b08      	ldr	r3, [pc, #32]	; (8000694 <main+0x54>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	681a      	ldr	r2, [r3, #0]
 8000678:	4b06      	ldr	r3, [pc, #24]	; (8000694 <main+0x54>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	2104      	movs	r1, #4
 800067e:	438a      	bics	r2, r1
 8000680:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //HAL_Delay ( 15000 ) ;
  m138_init () ;
 8000682:	f000 f947 	bl	8000914 <m138_init>
  while (1)
 8000686:	e7fe      	b.n	8000686 <main+0x46>
 8000688:	200000f0 	.word	0x200000f0
 800068c:	2000022c 	.word	0x2000022c
 8000690:	2000013c 	.word	0x2000013c
 8000694:	200001d0 	.word	0x200001d0

08000698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000698:	b590      	push	{r4, r7, lr}
 800069a:	b093      	sub	sp, #76	; 0x4c
 800069c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	2410      	movs	r4, #16
 80006a0:	193b      	adds	r3, r7, r4
 80006a2:	0018      	movs	r0, r3
 80006a4:	2338      	movs	r3, #56	; 0x38
 80006a6:	001a      	movs	r2, r3
 80006a8:	2100      	movs	r1, #0
 80006aa:	f004 f97d 	bl	80049a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ae:	003b      	movs	r3, r7
 80006b0:	0018      	movs	r0, r3
 80006b2:	2310      	movs	r3, #16
 80006b4:	001a      	movs	r2, r3
 80006b6:	2100      	movs	r1, #0
 80006b8:	f004 f976 	bl	80049a8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006bc:	2380      	movs	r3, #128	; 0x80
 80006be:	009b      	lsls	r3, r3, #2
 80006c0:	0018      	movs	r0, r3
 80006c2:	f001 fb4f 	bl	8001d64 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c6:	193b      	adds	r3, r7, r4
 80006c8:	2202      	movs	r2, #2
 80006ca:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006cc:	193b      	adds	r3, r7, r4
 80006ce:	2280      	movs	r2, #128	; 0x80
 80006d0:	0052      	lsls	r2, r2, #1
 80006d2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006d4:	193b      	adds	r3, r7, r4
 80006d6:	2200      	movs	r2, #0
 80006d8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006da:	193b      	adds	r3, r7, r4
 80006dc:	2240      	movs	r2, #64	; 0x40
 80006de:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006e0:	193b      	adds	r3, r7, r4
 80006e2:	2200      	movs	r2, #0
 80006e4:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e6:	193b      	adds	r3, r7, r4
 80006e8:	0018      	movs	r0, r3
 80006ea:	f001 fb87 	bl	8001dfc <HAL_RCC_OscConfig>
 80006ee:	1e03      	subs	r3, r0, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80006f2:	f000 fb1f 	bl	8000d34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f6:	003b      	movs	r3, r7
 80006f8:	2207      	movs	r2, #7
 80006fa:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006fc:	003b      	movs	r3, r7
 80006fe:	2200      	movs	r2, #0
 8000700:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000702:	003b      	movs	r3, r7
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000708:	003b      	movs	r3, r7
 800070a:	2200      	movs	r2, #0
 800070c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800070e:	003b      	movs	r3, r7
 8000710:	2100      	movs	r1, #0
 8000712:	0018      	movs	r0, r3
 8000714:	f001 fe8c 	bl	8002430 <HAL_RCC_ClockConfig>
 8000718:	1e03      	subs	r3, r0, #0
 800071a:	d001      	beq.n	8000720 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800071c:	f000 fb0a 	bl	8000d34 <Error_Handler>
  }
}
 8000720:	46c0      	nop			; (mov r8, r8)
 8000722:	46bd      	mov	sp, r7
 8000724:	b013      	add	sp, #76	; 0x4c
 8000726:	bd90      	pop	{r4, r7, pc}

08000728 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800072c:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <MX_TIM14_Init+0x40>)
 800072e:	4a0f      	ldr	r2, [pc, #60]	; (800076c <MX_TIM14_Init+0x44>)
 8000730:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 16000-1;
 8000732:	4b0d      	ldr	r3, [pc, #52]	; (8000768 <MX_TIM14_Init+0x40>)
 8000734:	4a0e      	ldr	r2, [pc, #56]	; (8000770 <MX_TIM14_Init+0x48>)
 8000736:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000738:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <MX_TIM14_Init+0x40>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 5000-1;
 800073e:	4b0a      	ldr	r3, [pc, #40]	; (8000768 <MX_TIM14_Init+0x40>)
 8000740:	4a0c      	ldr	r2, [pc, #48]	; (8000774 <MX_TIM14_Init+0x4c>)
 8000742:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000744:	4b08      	ldr	r3, [pc, #32]	; (8000768 <MX_TIM14_Init+0x40>)
 8000746:	2200      	movs	r2, #0
 8000748:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800074a:	4b07      	ldr	r3, [pc, #28]	; (8000768 <MX_TIM14_Init+0x40>)
 800074c:	2200      	movs	r2, #0
 800074e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000750:	4b05      	ldr	r3, [pc, #20]	; (8000768 <MX_TIM14_Init+0x40>)
 8000752:	0018      	movs	r0, r3
 8000754:	f002 f990 	bl	8002a78 <HAL_TIM_Base_Init>
 8000758:	1e03      	subs	r3, r0, #0
 800075a:	d001      	beq.n	8000760 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 800075c:	f000 faea 	bl	8000d34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000760:	46c0      	nop			; (mov r8, r8)
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	46c0      	nop			; (mov r8, r8)
 8000768:	200000f0 	.word	0x200000f0
 800076c:	40002000 	.word	0x40002000
 8000770:	00003e7f 	.word	0x00003e7f
 8000774:	00001387 	.word	0x00001387

08000778 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800077c:	4b23      	ldr	r3, [pc, #140]	; (800080c <MX_USART1_UART_Init+0x94>)
 800077e:	4a24      	ldr	r2, [pc, #144]	; (8000810 <MX_USART1_UART_Init+0x98>)
 8000780:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000782:	4b22      	ldr	r3, [pc, #136]	; (800080c <MX_USART1_UART_Init+0x94>)
 8000784:	22e1      	movs	r2, #225	; 0xe1
 8000786:	0252      	lsls	r2, r2, #9
 8000788:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800078a:	4b20      	ldr	r3, [pc, #128]	; (800080c <MX_USART1_UART_Init+0x94>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000790:	4b1e      	ldr	r3, [pc, #120]	; (800080c <MX_USART1_UART_Init+0x94>)
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000796:	4b1d      	ldr	r3, [pc, #116]	; (800080c <MX_USART1_UART_Init+0x94>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800079c:	4b1b      	ldr	r3, [pc, #108]	; (800080c <MX_USART1_UART_Init+0x94>)
 800079e:	220c      	movs	r2, #12
 80007a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a2:	4b1a      	ldr	r3, [pc, #104]	; (800080c <MX_USART1_UART_Init+0x94>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a8:	4b18      	ldr	r3, [pc, #96]	; (800080c <MX_USART1_UART_Init+0x94>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ae:	4b17      	ldr	r3, [pc, #92]	; (800080c <MX_USART1_UART_Init+0x94>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007b4:	4b15      	ldr	r3, [pc, #84]	; (800080c <MX_USART1_UART_Init+0x94>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007ba:	4b14      	ldr	r3, [pc, #80]	; (800080c <MX_USART1_UART_Init+0x94>)
 80007bc:	2200      	movs	r2, #0
 80007be:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007c0:	4b12      	ldr	r3, [pc, #72]	; (800080c <MX_USART1_UART_Init+0x94>)
 80007c2:	0018      	movs	r0, r3
 80007c4:	f002 fc12 	bl	8002fec <HAL_UART_Init>
 80007c8:	1e03      	subs	r3, r0, #0
 80007ca:	d001      	beq.n	80007d0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80007cc:	f000 fab2 	bl	8000d34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007d0:	4b0e      	ldr	r3, [pc, #56]	; (800080c <MX_USART1_UART_Init+0x94>)
 80007d2:	2100      	movs	r1, #0
 80007d4:	0018      	movs	r0, r3
 80007d6:	f003 ff61 	bl	800469c <HAL_UARTEx_SetTxFifoThreshold>
 80007da:	1e03      	subs	r3, r0, #0
 80007dc:	d001      	beq.n	80007e2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80007de:	f000 faa9 	bl	8000d34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007e2:	4b0a      	ldr	r3, [pc, #40]	; (800080c <MX_USART1_UART_Init+0x94>)
 80007e4:	2100      	movs	r1, #0
 80007e6:	0018      	movs	r0, r3
 80007e8:	f003 ff98 	bl	800471c <HAL_UARTEx_SetRxFifoThreshold>
 80007ec:	1e03      	subs	r3, r0, #0
 80007ee:	d001      	beq.n	80007f4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80007f0:	f000 faa0 	bl	8000d34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80007f4:	4b05      	ldr	r3, [pc, #20]	; (800080c <MX_USART1_UART_Init+0x94>)
 80007f6:	0018      	movs	r0, r3
 80007f8:	f003 ff16 	bl	8004628 <HAL_UARTEx_DisableFifoMode>
 80007fc:	1e03      	subs	r3, r0, #0
 80007fe:	d001      	beq.n	8000804 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000800:	f000 fa98 	bl	8000d34 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000804:	46c0      	nop			; (mov r8, r8)
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	46c0      	nop			; (mov r8, r8)
 800080c:	2000013c 	.word	0x2000013c
 8000810:	40013800 	.word	0x40013800

08000814 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800081a:	4b0c      	ldr	r3, [pc, #48]	; (800084c <MX_DMA_Init+0x38>)
 800081c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800081e:	4b0b      	ldr	r3, [pc, #44]	; (800084c <MX_DMA_Init+0x38>)
 8000820:	2101      	movs	r1, #1
 8000822:	430a      	orrs	r2, r1
 8000824:	639a      	str	r2, [r3, #56]	; 0x38
 8000826:	4b09      	ldr	r3, [pc, #36]	; (800084c <MX_DMA_Init+0x38>)
 8000828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800082a:	2201      	movs	r2, #1
 800082c:	4013      	ands	r3, r2
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000832:	2200      	movs	r2, #0
 8000834:	2100      	movs	r1, #0
 8000836:	2009      	movs	r0, #9
 8000838:	f000 fdc2 	bl	80013c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800083c:	2009      	movs	r0, #9
 800083e:	f000 fdd4 	bl	80013ea <HAL_NVIC_EnableIRQ>

}
 8000842:	46c0      	nop			; (mov r8, r8)
 8000844:	46bd      	mov	sp, r7
 8000846:	b002      	add	sp, #8
 8000848:	bd80      	pop	{r7, pc}
 800084a:	46c0      	nop			; (mov r8, r8)
 800084c:	40021000 	.word	0x40021000

08000850 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000850:	b590      	push	{r4, r7, lr}
 8000852:	b089      	sub	sp, #36	; 0x24
 8000854:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000856:	240c      	movs	r4, #12
 8000858:	193b      	adds	r3, r7, r4
 800085a:	0018      	movs	r0, r3
 800085c:	2314      	movs	r3, #20
 800085e:	001a      	movs	r2, r3
 8000860:	2100      	movs	r1, #0
 8000862:	f004 f8a1 	bl	80049a8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000866:	4b28      	ldr	r3, [pc, #160]	; (8000908 <MX_GPIO_Init+0xb8>)
 8000868:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800086a:	4b27      	ldr	r3, [pc, #156]	; (8000908 <MX_GPIO_Init+0xb8>)
 800086c:	2104      	movs	r1, #4
 800086e:	430a      	orrs	r2, r1
 8000870:	635a      	str	r2, [r3, #52]	; 0x34
 8000872:	4b25      	ldr	r3, [pc, #148]	; (8000908 <MX_GPIO_Init+0xb8>)
 8000874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000876:	2204      	movs	r2, #4
 8000878:	4013      	ands	r3, r2
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800087e:	4b22      	ldr	r3, [pc, #136]	; (8000908 <MX_GPIO_Init+0xb8>)
 8000880:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000882:	4b21      	ldr	r3, [pc, #132]	; (8000908 <MX_GPIO_Init+0xb8>)
 8000884:	2120      	movs	r1, #32
 8000886:	430a      	orrs	r2, r1
 8000888:	635a      	str	r2, [r3, #52]	; 0x34
 800088a:	4b1f      	ldr	r3, [pc, #124]	; (8000908 <MX_GPIO_Init+0xb8>)
 800088c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800088e:	2220      	movs	r2, #32
 8000890:	4013      	ands	r3, r2
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000896:	4b1c      	ldr	r3, [pc, #112]	; (8000908 <MX_GPIO_Init+0xb8>)
 8000898:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800089a:	4b1b      	ldr	r3, [pc, #108]	; (8000908 <MX_GPIO_Init+0xb8>)
 800089c:	2101      	movs	r1, #1
 800089e:	430a      	orrs	r2, r1
 80008a0:	635a      	str	r2, [r3, #52]	; 0x34
 80008a2:	4b19      	ldr	r3, [pc, #100]	; (8000908 <MX_GPIO_Init+0xb8>)
 80008a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008a6:	2201      	movs	r2, #1
 80008a8:	4013      	ands	r3, r2
 80008aa:	603b      	str	r3, [r7, #0]
 80008ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, GPIO_PIN_RESET);
 80008ae:	4b17      	ldr	r3, [pc, #92]	; (800090c <MX_GPIO_Init+0xbc>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	2140      	movs	r1, #64	; 0x40
 80008b4:	0018      	movs	r0, r3
 80008b6:	f001 fa37 	bl	8001d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : T_NRST_Pin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 80008ba:	193b      	adds	r3, r7, r4
 80008bc:	2204      	movs	r2, #4
 80008be:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008c0:	193b      	adds	r3, r7, r4
 80008c2:	2288      	movs	r2, #136	; 0x88
 80008c4:	0352      	lsls	r2, r2, #13
 80008c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	193b      	adds	r3, r7, r4
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 80008ce:	193b      	adds	r3, r7, r4
 80008d0:	4a0f      	ldr	r2, [pc, #60]	; (8000910 <MX_GPIO_Init+0xc0>)
 80008d2:	0019      	movs	r1, r3
 80008d4:	0010      	movs	r0, r2
 80008d6:	f001 f8c3 	bl	8001a60 <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_Pin */
  GPIO_InitStruct.Pin = GREEN_Pin;
 80008da:	0021      	movs	r1, r4
 80008dc:	187b      	adds	r3, r7, r1
 80008de:	2240      	movs	r2, #64	; 0x40
 80008e0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e2:	187b      	adds	r3, r7, r1
 80008e4:	2201      	movs	r2, #1
 80008e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	187b      	adds	r3, r7, r1
 80008ea:	2200      	movs	r2, #0
 80008ec:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ee:	187b      	adds	r3, r7, r1
 80008f0:	2200      	movs	r2, #0
 80008f2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GREEN_GPIO_Port, &GPIO_InitStruct);
 80008f4:	187b      	adds	r3, r7, r1
 80008f6:	4a05      	ldr	r2, [pc, #20]	; (800090c <MX_GPIO_Init+0xbc>)
 80008f8:	0019      	movs	r1, r3
 80008fa:	0010      	movs	r0, r2
 80008fc:	f001 f8b0 	bl	8001a60 <HAL_GPIO_Init>

}
 8000900:	46c0      	nop			; (mov r8, r8)
 8000902:	46bd      	mov	sp, r7
 8000904:	b009      	add	sp, #36	; 0x24
 8000906:	bd90      	pop	{r4, r7, pc}
 8000908:	40021000 	.word	0x40021000
 800090c:	50000800 	.word	0x50000800
 8000910:	50001400 	.word	0x50001400

08000914 <m138_init>:

/* USER CODE BEGIN 4 */
void m138_init ()
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
	char* chunk = malloc ( 20 * sizeof (char) ) ;
 800091a:	2014      	movs	r0, #20
 800091c:	f004 f830 	bl	8004980 <malloc>
 8000920:	0003      	movs	r3, r0
 8000922:	607b      	str	r3, [r7, #4]
	send_at_command_2_swarm ( cs_at , cs_answer , 1 ) ;
 8000924:	4b5e      	ldr	r3, [pc, #376]	; (8000aa0 <m138_init+0x18c>)
 8000926:	6818      	ldr	r0, [r3, #0]
 8000928:	4b5e      	ldr	r3, [pc, #376]	; (8000aa4 <m138_init+0x190>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	2201      	movs	r2, #1
 800092e:	0019      	movs	r1, r3
 8000930:	f000 f8f2 	bl	8000b18 <send_at_command_2_swarm>
	if ( swarm_checklist == 1 )
 8000934:	4b5c      	ldr	r3, [pc, #368]	; (8000aa8 <m138_init+0x194>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	2b01      	cmp	r3, #1
 800093a:	d125      	bne.n	8000988 <m138_init+0x74>
	{
		chunk = strtok ( (char*) swarm_uart_rx_buff , "=" ) ;
 800093c:	4a5b      	ldr	r2, [pc, #364]	; (8000aac <m138_init+0x198>)
 800093e:	4b5c      	ldr	r3, [pc, #368]	; (8000ab0 <m138_init+0x19c>)
 8000940:	0011      	movs	r1, r2
 8000942:	0018      	movs	r0, r3
 8000944:	f004 f95e 	bl	8004c04 <strtok>
 8000948:	0003      	movs	r3, r0
 800094a:	607b      	str	r3, [r7, #4]
		chunk = strtok ( NULL , "," ) ;
 800094c:	4b59      	ldr	r3, [pc, #356]	; (8000ab4 <m138_init+0x1a0>)
 800094e:	0019      	movs	r1, r3
 8000950:	2000      	movs	r0, #0
 8000952:	f004 f957 	bl	8004c04 <strtok>
 8000956:	0003      	movs	r3, r0
 8000958:	607b      	str	r3, [r7, #4]
		swarm_dev_id = (uint32_t) strtol ( chunk , NULL , 16 ) ;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2210      	movs	r2, #16
 800095e:	2100      	movs	r1, #0
 8000960:	0018      	movs	r0, r3
 8000962:	f004 fa41 	bl	8004de8 <strtol>
 8000966:	0003      	movs	r3, r0
 8000968:	001a      	movs	r2, r3
 800096a:	4b53      	ldr	r3, [pc, #332]	; (8000ab8 <m138_init+0x1a4>)
 800096c:	601a      	str	r2, [r3, #0]
		clean_array ( swarm_uart_rx_buff , SWARM_UART_RX_MAX_BUFF_SIZE ) ;
 800096e:	4b50      	ldr	r3, [pc, #320]	; (8000ab0 <m138_init+0x19c>)
 8000970:	2164      	movs	r1, #100	; 0x64
 8000972:	0018      	movs	r0, r3
 8000974:	f000 f948 	bl	8000c08 <clean_array>
		send_at_command_2_swarm ( rt_0_at , rt_ok_answer , 2 ) ;
 8000978:	4b50      	ldr	r3, [pc, #320]	; (8000abc <m138_init+0x1a8>)
 800097a:	6818      	ldr	r0, [r3, #0]
 800097c:	4b50      	ldr	r3, [pc, #320]	; (8000ac0 <m138_init+0x1ac>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	2202      	movs	r2, #2
 8000982:	0019      	movs	r1, r3
 8000984:	f000 f8c8 	bl	8000b18 <send_at_command_2_swarm>
	}
	if ( swarm_checklist == 2 )
 8000988:	4b47      	ldr	r3, [pc, #284]	; (8000aa8 <m138_init+0x194>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	2b02      	cmp	r3, #2
 800098e:	d107      	bne.n	80009a0 <m138_init+0x8c>
		send_at_command_2_swarm ( rt_q_rate_at , rt_0_answer , 3 ) ;
 8000990:	4b4c      	ldr	r3, [pc, #304]	; (8000ac4 <m138_init+0x1b0>)
 8000992:	6818      	ldr	r0, [r3, #0]
 8000994:	4b4c      	ldr	r3, [pc, #304]	; (8000ac8 <m138_init+0x1b4>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	2203      	movs	r2, #3
 800099a:	0019      	movs	r1, r3
 800099c:	f000 f8bc 	bl	8000b18 <send_at_command_2_swarm>
	if ( swarm_checklist == 3 )
 80009a0:	4b41      	ldr	r3, [pc, #260]	; (8000aa8 <m138_init+0x194>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	2b03      	cmp	r3, #3
 80009a6:	d107      	bne.n	80009b8 <m138_init+0xa4>
		send_at_command_2_swarm ( pw_0_at , pw_ok_answer , 4 ) ;
 80009a8:	4b48      	ldr	r3, [pc, #288]	; (8000acc <m138_init+0x1b8>)
 80009aa:	6818      	ldr	r0, [r3, #0]
 80009ac:	4b48      	ldr	r3, [pc, #288]	; (8000ad0 <m138_init+0x1bc>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	2204      	movs	r2, #4
 80009b2:	0019      	movs	r1, r3
 80009b4:	f000 f8b0 	bl	8000b18 <send_at_command_2_swarm>
	if ( swarm_checklist == 4 )
 80009b8:	4b3b      	ldr	r3, [pc, #236]	; (8000aa8 <m138_init+0x194>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	2b04      	cmp	r3, #4
 80009be:	d107      	bne.n	80009d0 <m138_init+0xbc>
		send_at_command_2_swarm ( pw_q_rate_at , pw_0_answer , 5 ) ;
 80009c0:	4b44      	ldr	r3, [pc, #272]	; (8000ad4 <m138_init+0x1c0>)
 80009c2:	6818      	ldr	r0, [r3, #0]
 80009c4:	4b44      	ldr	r3, [pc, #272]	; (8000ad8 <m138_init+0x1c4>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	2205      	movs	r2, #5
 80009ca:	0019      	movs	r1, r3
 80009cc:	f000 f8a4 	bl	8000b18 <send_at_command_2_swarm>
	if ( swarm_checklist == 5 )
 80009d0:	4b35      	ldr	r3, [pc, #212]	; (8000aa8 <m138_init+0x194>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	2b05      	cmp	r3, #5
 80009d6:	d107      	bne.n	80009e8 <m138_init+0xd4>
		send_at_command_2_swarm ( dt_0_at , dt_ok_answer , 6 ) ;
 80009d8:	4b40      	ldr	r3, [pc, #256]	; (8000adc <m138_init+0x1c8>)
 80009da:	6818      	ldr	r0, [r3, #0]
 80009dc:	4b40      	ldr	r3, [pc, #256]	; (8000ae0 <m138_init+0x1cc>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	2206      	movs	r2, #6
 80009e2:	0019      	movs	r1, r3
 80009e4:	f000 f898 	bl	8000b18 <send_at_command_2_swarm>
	if ( swarm_checklist == 6 )
 80009e8:	4b2f      	ldr	r3, [pc, #188]	; (8000aa8 <m138_init+0x194>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	2b06      	cmp	r3, #6
 80009ee:	d107      	bne.n	8000a00 <m138_init+0xec>
		send_at_command_2_swarm ( dt_q_rate_at , dt_ok_answer , 7 ) ;
 80009f0:	4b3c      	ldr	r3, [pc, #240]	; (8000ae4 <m138_init+0x1d0>)
 80009f2:	6818      	ldr	r0, [r3, #0]
 80009f4:	4b3a      	ldr	r3, [pc, #232]	; (8000ae0 <m138_init+0x1cc>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	2207      	movs	r2, #7
 80009fa:	0019      	movs	r1, r3
 80009fc:	f000 f88c 	bl	8000b18 <send_at_command_2_swarm>
	if ( swarm_checklist == 7 )
 8000a00:	4b29      	ldr	r3, [pc, #164]	; (8000aa8 <m138_init+0x194>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	2b07      	cmp	r3, #7
 8000a06:	d107      	bne.n	8000a18 <m138_init+0x104>
		send_at_command_2_swarm ( gs_0_at , gs_ok_answer  , 8 ) ;
 8000a08:	4b37      	ldr	r3, [pc, #220]	; (8000ae8 <m138_init+0x1d4>)
 8000a0a:	6818      	ldr	r0, [r3, #0]
 8000a0c:	4b37      	ldr	r3, [pc, #220]	; (8000aec <m138_init+0x1d8>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	2208      	movs	r2, #8
 8000a12:	0019      	movs	r1, r3
 8000a14:	f000 f880 	bl	8000b18 <send_at_command_2_swarm>
	if ( swarm_checklist == 8 )
 8000a18:	4b23      	ldr	r3, [pc, #140]	; (8000aa8 <m138_init+0x194>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	2b08      	cmp	r3, #8
 8000a1e:	d107      	bne.n	8000a30 <m138_init+0x11c>
		send_at_command_2_swarm ( gs_q_rate_at , gs_0_answer , 9 ) ;
 8000a20:	4b33      	ldr	r3, [pc, #204]	; (8000af0 <m138_init+0x1dc>)
 8000a22:	6818      	ldr	r0, [r3, #0]
 8000a24:	4b33      	ldr	r3, [pc, #204]	; (8000af4 <m138_init+0x1e0>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	2209      	movs	r2, #9
 8000a2a:	0019      	movs	r1, r3
 8000a2c:	f000 f874 	bl	8000b18 <send_at_command_2_swarm>
	if ( swarm_checklist == 9 )
 8000a30:	4b1d      	ldr	r3, [pc, #116]	; (8000aa8 <m138_init+0x194>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	2b09      	cmp	r3, #9
 8000a36:	d107      	bne.n	8000a48 <m138_init+0x134>
		send_at_command_2_swarm ( gj_0_at , gj_ok_answer  , 10 ) ;
 8000a38:	4b2f      	ldr	r3, [pc, #188]	; (8000af8 <m138_init+0x1e4>)
 8000a3a:	6818      	ldr	r0, [r3, #0]
 8000a3c:	4b2f      	ldr	r3, [pc, #188]	; (8000afc <m138_init+0x1e8>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	220a      	movs	r2, #10
 8000a42:	0019      	movs	r1, r3
 8000a44:	f000 f868 	bl	8000b18 <send_at_command_2_swarm>
	if ( swarm_checklist == 10 )
 8000a48:	4b17      	ldr	r3, [pc, #92]	; (8000aa8 <m138_init+0x194>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	2b0a      	cmp	r3, #10
 8000a4e:	d107      	bne.n	8000a60 <m138_init+0x14c>
		send_at_command_2_swarm ( gj_q_rate_at , gj_0_answer , 11 ) ;
 8000a50:	4b2b      	ldr	r3, [pc, #172]	; (8000b00 <m138_init+0x1ec>)
 8000a52:	6818      	ldr	r0, [r3, #0]
 8000a54:	4b2b      	ldr	r3, [pc, #172]	; (8000b04 <m138_init+0x1f0>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	220b      	movs	r2, #11
 8000a5a:	0019      	movs	r1, r3
 8000a5c:	f000 f85c 	bl	8000b18 <send_at_command_2_swarm>
	if ( swarm_checklist == 11 )
 8000a60:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <m138_init+0x194>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	2b0b      	cmp	r3, #11
 8000a66:	d107      	bne.n	8000a78 <m138_init+0x164>
		send_at_command_2_swarm ( gn_0_at , gn_ok_answer  , 12 ) ;
 8000a68:	4b27      	ldr	r3, [pc, #156]	; (8000b08 <m138_init+0x1f4>)
 8000a6a:	6818      	ldr	r0, [r3, #0]
 8000a6c:	4b27      	ldr	r3, [pc, #156]	; (8000b0c <m138_init+0x1f8>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	220c      	movs	r2, #12
 8000a72:	0019      	movs	r1, r3
 8000a74:	f000 f850 	bl	8000b18 <send_at_command_2_swarm>
	if ( swarm_checklist == 12 )
 8000a78:	4b0b      	ldr	r3, [pc, #44]	; (8000aa8 <m138_init+0x194>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	2b0c      	cmp	r3, #12
 8000a7e:	d107      	bne.n	8000a90 <m138_init+0x17c>
		send_at_command_2_swarm ( gn_q_rate_at , gn_0_answer , 13 ) ;
 8000a80:	4b23      	ldr	r3, [pc, #140]	; (8000b10 <m138_init+0x1fc>)
 8000a82:	6818      	ldr	r0, [r3, #0]
 8000a84:	4b23      	ldr	r3, [pc, #140]	; (8000b14 <m138_init+0x200>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	220d      	movs	r2, #13
 8000a8a:	0019      	movs	r1, r3
 8000a8c:	f000 f844 	bl	8000b18 <send_at_command_2_swarm>
	free ( chunk ) ;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	0018      	movs	r0, r3
 8000a94:	f003 ff7e 	bl	8004994 <free>
}
 8000a98:	46c0      	nop			; (mov r8, r8)
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	b002      	add	sp, #8
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	20000000 	.word	0x20000000
 8000aa4:	20000034 	.word	0x20000034
 8000aa8:	2000038b 	.word	0x2000038b
 8000aac:	08006124 	.word	0x08006124
 8000ab0:	2000022c 	.word	0x2000022c
 8000ab4:	08006128 	.word	0x08006128
 8000ab8:	2000038c 	.word	0x2000038c
 8000abc:	20000004 	.word	0x20000004
 8000ac0:	20000038 	.word	0x20000038
 8000ac4:	20000008 	.word	0x20000008
 8000ac8:	2000003c 	.word	0x2000003c
 8000acc:	2000000c 	.word	0x2000000c
 8000ad0:	20000040 	.word	0x20000040
 8000ad4:	20000010 	.word	0x20000010
 8000ad8:	20000044 	.word	0x20000044
 8000adc:	20000014 	.word	0x20000014
 8000ae0:	20000048 	.word	0x20000048
 8000ae4:	20000018 	.word	0x20000018
 8000ae8:	2000001c 	.word	0x2000001c
 8000aec:	2000004c 	.word	0x2000004c
 8000af0:	20000020 	.word	0x20000020
 8000af4:	20000050 	.word	0x20000050
 8000af8:	20000024 	.word	0x20000024
 8000afc:	20000054 	.word	0x20000054
 8000b00:	20000028 	.word	0x20000028
 8000b04:	20000058 	.word	0x20000058
 8000b08:	2000002c 	.word	0x2000002c
 8000b0c:	2000005c 	.word	0x2000005c
 8000b10:	20000030 	.word	0x20000030
 8000b14:	20000060 	.word	0x20000060

08000b18 <send_at_command_2_swarm>:

void send_at_command_2_swarm ( const char* at_command , const char* answer , uint16_t step )
{
 8000b18:	b5b0      	push	{r4, r5, r7, lr}
 8000b1a:	b086      	sub	sp, #24
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	60f8      	str	r0, [r7, #12]
 8000b20:	60b9      	str	r1, [r7, #8]
 8000b22:	1dbb      	adds	r3, r7, #6
 8000b24:	801a      	strh	r2, [r3, #0]
	uint8_t cs = nmea_checksum ( at_command , strlen ( at_command ) ) ;
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	0018      	movs	r0, r3
 8000b2a:	f7ff faeb 	bl	8000104 <strlen>
 8000b2e:	0002      	movs	r2, r0
 8000b30:	2517      	movs	r5, #23
 8000b32:	197c      	adds	r4, r7, r5
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	0011      	movs	r1, r2
 8000b38:	0018      	movs	r0, r3
 8000b3a:	f000 f889 	bl	8000c50 <nmea_checksum>
 8000b3e:	0003      	movs	r3, r0
 8000b40:	7023      	strb	r3, [r4, #0]

	sprintf ( swarm_uart_tx_buff , "%s*%02x\n" , at_command , cs ) ;
 8000b42:	197b      	adds	r3, r7, r5
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	68fa      	ldr	r2, [r7, #12]
 8000b48:	4928      	ldr	r1, [pc, #160]	; (8000bec <send_at_command_2_swarm+0xd4>)
 8000b4a:	4829      	ldr	r0, [pc, #164]	; (8000bf0 <send_at_command_2_swarm+0xd8>)
 8000b4c:	f004 f828 	bl	8004ba0 <siprintf>
	tim14_on = 1 ;
 8000b50:	4b28      	ldr	r3, [pc, #160]	; (8000bf4 <send_at_command_2_swarm+0xdc>)
 8000b52:	2201      	movs	r2, #1
 8000b54:	701a      	strb	r2, [r3, #0]
	//Usunąc poniższe bo nie dziala do końca przez to
	clean_array ( swarm_uart_rx_buff , SWARM_UART_RX_MAX_BUFF_SIZE ) ;
 8000b56:	4b28      	ldr	r3, [pc, #160]	; (8000bf8 <send_at_command_2_swarm+0xe0>)
 8000b58:	2164      	movs	r1, #100	; 0x64
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	f000 f854 	bl	8000c08 <clean_array>
	swarm_uart_rx_buff[0] = 0 ;
 8000b60:	4b25      	ldr	r3, [pc, #148]	; (8000bf8 <send_at_command_2_swarm+0xe0>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start_IT ( &htim14 ) ;
 8000b66:	4b25      	ldr	r3, [pc, #148]	; (8000bfc <send_at_command_2_swarm+0xe4>)
 8000b68:	0018      	movs	r0, r3
 8000b6a:	f001 ffdd 	bl	8002b28 <HAL_TIM_Base_Start_IT>
	HAL_UART_Transmit ( SWARM_UART_HANDLER , (uint8_t*) swarm_uart_tx_buff ,  strlen ( (char*) swarm_uart_tx_buff ) , SWARM_UART_UART_TX_TIMEOUT ) ;
 8000b6e:	4b20      	ldr	r3, [pc, #128]	; (8000bf0 <send_at_command_2_swarm+0xd8>)
 8000b70:	0018      	movs	r0, r3
 8000b72:	f7ff fac7 	bl	8000104 <strlen>
 8000b76:	0003      	movs	r3, r0
 8000b78:	b29a      	uxth	r2, r3
 8000b7a:	491d      	ldr	r1, [pc, #116]	; (8000bf0 <send_at_command_2_swarm+0xd8>)
 8000b7c:	4820      	ldr	r0, [pc, #128]	; (8000c00 <send_at_command_2_swarm+0xe8>)
 8000b7e:	2364      	movs	r3, #100	; 0x64
 8000b80:	f002 fa8a 	bl	8003098 <HAL_UART_Transmit>
	while ( tim14_on )
 8000b84:	e025      	b.n	8000bd2 <send_at_command_2_swarm+0xba>
	{
		if ( swarm_uart_rx_buff[0] != 0 )
 8000b86:	4b1c      	ldr	r3, [pc, #112]	; (8000bf8 <send_at_command_2_swarm+0xe0>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d021      	beq.n	8000bd2 <send_at_command_2_swarm+0xba>
		{
			if ( strncmp ( (char*) swarm_uart_rx_buff , answer , strlen ( answer ) ) == 0 )
 8000b8e:	68bb      	ldr	r3, [r7, #8]
 8000b90:	0018      	movs	r0, r3
 8000b92:	f7ff fab7 	bl	8000104 <strlen>
 8000b96:	0002      	movs	r2, r0
 8000b98:	68b9      	ldr	r1, [r7, #8]
 8000b9a:	4b17      	ldr	r3, [pc, #92]	; (8000bf8 <send_at_command_2_swarm+0xe0>)
 8000b9c:	0018      	movs	r0, r3
 8000b9e:	f004 f81f 	bl	8004be0 <strncmp>
 8000ba2:	1e03      	subs	r3, r0, #0
 8000ba4:	d105      	bne.n	8000bb2 <send_at_command_2_swarm+0x9a>
			{
				swarm_checklist = step ;
 8000ba6:	1dbb      	adds	r3, r7, #6
 8000ba8:	881b      	ldrh	r3, [r3, #0]
 8000baa:	b2da      	uxtb	r2, r3
 8000bac:	4b15      	ldr	r3, [pc, #84]	; (8000c04 <send_at_command_2_swarm+0xec>)
 8000bae:	701a      	strb	r2, [r3, #0]
				break ;
 8000bb0:	e013      	b.n	8000bda <send_at_command_2_swarm+0xc2>
			}
			else
			{
				clean_array ( swarm_uart_rx_buff , SWARM_UART_RX_MAX_BUFF_SIZE ) ;
 8000bb2:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <send_at_command_2_swarm+0xe0>)
 8000bb4:	2164      	movs	r1, #100	; 0x64
 8000bb6:	0018      	movs	r0, r3
 8000bb8:	f000 f826 	bl	8000c08 <clean_array>
				HAL_UART_Transmit ( SWARM_UART_HANDLER , (uint8_t*) swarm_uart_tx_buff ,  strlen ( (char*) swarm_uart_tx_buff ) , SWARM_UART_UART_TX_TIMEOUT ) ;
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <send_at_command_2_swarm+0xd8>)
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	f7ff faa0 	bl	8000104 <strlen>
 8000bc4:	0003      	movs	r3, r0
 8000bc6:	b29a      	uxth	r2, r3
 8000bc8:	4909      	ldr	r1, [pc, #36]	; (8000bf0 <send_at_command_2_swarm+0xd8>)
 8000bca:	480d      	ldr	r0, [pc, #52]	; (8000c00 <send_at_command_2_swarm+0xe8>)
 8000bcc:	2364      	movs	r3, #100	; 0x64
 8000bce:	f002 fa63 	bl	8003098 <HAL_UART_Transmit>
	while ( tim14_on )
 8000bd2:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <send_at_command_2_swarm+0xdc>)
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d1d5      	bne.n	8000b86 <send_at_command_2_swarm+0x6e>
			}
		}
	}
	clean_array ( swarm_uart_tx_buff , SWARM_UART_TX_MAX_BUFF_SIZE ) ;
 8000bda:	4b05      	ldr	r3, [pc, #20]	; (8000bf0 <send_at_command_2_swarm+0xd8>)
 8000bdc:	21fa      	movs	r1, #250	; 0xfa
 8000bde:	0018      	movs	r0, r3
 8000be0:	f000 f812 	bl	8000c08 <clean_array>
}
 8000be4:	46c0      	nop			; (mov r8, r8)
 8000be6:	46bd      	mov	sp, r7
 8000be8:	b006      	add	sp, #24
 8000bea:	bdb0      	pop	{r4, r5, r7, pc}
 8000bec:	0800612c 	.word	0x0800612c
 8000bf0:	20000290 	.word	0x20000290
 8000bf4:	2000038a 	.word	0x2000038a
 8000bf8:	2000022c 	.word	0x2000022c
 8000bfc:	200000f0 	.word	0x200000f0
 8000c00:	2000013c 	.word	0x2000013c
 8000c04:	2000038b 	.word	0x2000038b

08000c08 <clean_array>:

void clean_array ( char* array , uint16_t array_max_size )
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	000a      	movs	r2, r1
 8000c12:	1cbb      	adds	r3, r7, #2
 8000c14:	801a      	strh	r2, [r3, #0]
	uint16_t i ;
	for ( i = 0 ; i < array_max_size ; i++ )
 8000c16:	230e      	movs	r3, #14
 8000c18:	18fb      	adds	r3, r7, r3
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	801a      	strh	r2, [r3, #0]
 8000c1e:	e00b      	b.n	8000c38 <clean_array+0x30>
		array[i] = 0 ;
 8000c20:	210e      	movs	r1, #14
 8000c22:	187b      	adds	r3, r7, r1
 8000c24:	881b      	ldrh	r3, [r3, #0]
 8000c26:	687a      	ldr	r2, [r7, #4]
 8000c28:	18d3      	adds	r3, r2, r3
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	701a      	strb	r2, [r3, #0]
	for ( i = 0 ; i < array_max_size ; i++ )
 8000c2e:	187b      	adds	r3, r7, r1
 8000c30:	881a      	ldrh	r2, [r3, #0]
 8000c32:	187b      	adds	r3, r7, r1
 8000c34:	3201      	adds	r2, #1
 8000c36:	801a      	strh	r2, [r3, #0]
 8000c38:	230e      	movs	r3, #14
 8000c3a:	18fa      	adds	r2, r7, r3
 8000c3c:	1cbb      	adds	r3, r7, #2
 8000c3e:	8812      	ldrh	r2, [r2, #0]
 8000c40:	881b      	ldrh	r3, [r3, #0]
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d3ec      	bcc.n	8000c20 <clean_array+0x18>
}
 8000c46:	46c0      	nop			; (mov r8, r8)
 8000c48:	46c0      	nop			; (mov r8, r8)
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	b004      	add	sp, #16
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <nmea_checksum>:

uint8_t nmea_checksum ( const char *message , size_t len )
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	6039      	str	r1, [r7, #0]
	size_t i = 0 ;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60fb      	str	r3, [r7, #12]
	uint8_t cs ;
	if ( message [0] == '$' )
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	2b24      	cmp	r3, #36	; 0x24
 8000c64:	d102      	bne.n	8000c6c <nmea_checksum+0x1c>
		i++ ;
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	3301      	adds	r3, #1
 8000c6a:	60fb      	str	r3, [r7, #12]
	for ( cs = 0 ; ( i < len ) && message [i] ; i++ )
 8000c6c:	230b      	movs	r3, #11
 8000c6e:	18fb      	adds	r3, r7, r3
 8000c70:	2200      	movs	r2, #0
 8000c72:	701a      	strb	r2, [r3, #0]
 8000c74:	e00c      	b.n	8000c90 <nmea_checksum+0x40>
		cs ^= ( (uint8_t) message [i] ) ;
 8000c76:	687a      	ldr	r2, [r7, #4]
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	18d3      	adds	r3, r2, r3
 8000c7c:	7819      	ldrb	r1, [r3, #0]
 8000c7e:	220b      	movs	r2, #11
 8000c80:	18bb      	adds	r3, r7, r2
 8000c82:	18ba      	adds	r2, r7, r2
 8000c84:	7812      	ldrb	r2, [r2, #0]
 8000c86:	404a      	eors	r2, r1
 8000c88:	701a      	strb	r2, [r3, #0]
	for ( cs = 0 ; ( i < len ) && message [i] ; i++ )
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	68fa      	ldr	r2, [r7, #12]
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	429a      	cmp	r2, r3
 8000c96:	d205      	bcs.n	8000ca4 <nmea_checksum+0x54>
 8000c98:	687a      	ldr	r2, [r7, #4]
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	18d3      	adds	r3, r2, r3
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d1e8      	bne.n	8000c76 <nmea_checksum+0x26>
	return cs;
 8000ca4:	230b      	movs	r3, #11
 8000ca6:	18fb      	adds	r3, r7, r3
 8000ca8:	781b      	ldrb	r3, [r3, #0]
}
 8000caa:	0018      	movs	r0, r3
 8000cac:	46bd      	mov	sp, r7
 8000cae:	b004      	add	sp, #16
 8000cb0:	bd80      	pop	{r7, pc}
	...

08000cb4 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback ( UART_HandleTypeDef *huart , uint16_t Size )
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
 8000cbc:	000a      	movs	r2, r1
 8000cbe:	1cbb      	adds	r3, r7, #2
 8000cc0:	801a      	strh	r2, [r3, #0]
	//const char* z = 0 ;
    if ( huart->Instance == USART1 )
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a0a      	ldr	r2, [pc, #40]	; (8000cf0 <HAL_UARTEx_RxEventCallback+0x3c>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d10d      	bne.n	8000ce8 <HAL_UARTEx_RxEventCallback+0x34>
    {
    	//if ( swarm_uart_rx_buff[0] != 0 ) // to avoid doublet because of 2 INTs
    	//	strcat ( (char *) swarm_uart_rx_buff , z ) ; // to avoid debris after '\n' of original message
    	HAL_UARTEx_ReceiveToIdle_DMA ( SWARM_UART_HANDLER , (uint8_t *) swarm_uart_rx_buff , SWARM_UART_RX_MAX_BUFF_SIZE ) ;
 8000ccc:	4909      	ldr	r1, [pc, #36]	; (8000cf4 <HAL_UARTEx_RxEventCallback+0x40>)
 8000cce:	4b0a      	ldr	r3, [pc, #40]	; (8000cf8 <HAL_UARTEx_RxEventCallback+0x44>)
 8000cd0:	2264      	movs	r2, #100	; 0x64
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	f003 fd64 	bl	80047a0 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT ( &hdma_usart1_rx, DMA_IT_HT ) ; //Disable Half Transfer interrupt.
 8000cd8:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <HAL_UARTEx_RxEventCallback+0x48>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	4b07      	ldr	r3, [pc, #28]	; (8000cfc <HAL_UARTEx_RxEventCallback+0x48>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	2104      	movs	r1, #4
 8000ce4:	438a      	bics	r2, r1
 8000ce6:	601a      	str	r2, [r3, #0]
    }
}
 8000ce8:	46c0      	nop			; (mov r8, r8)
 8000cea:	46bd      	mov	sp, r7
 8000cec:	b002      	add	sp, #8
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	40013800 	.word	0x40013800
 8000cf4:	2000022c 	.word	0x2000022c
 8000cf8:	2000013c 	.word	0x2000013c
 8000cfc:	200001d0 	.word	0x200001d0

08000d00 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
	if ( htim->Instance == TIM14 )
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a06      	ldr	r2, [pc, #24]	; (8000d28 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d106      	bne.n	8000d20 <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		tim14_on = 0 ;
 8000d12:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT ( &htim14 ) ;
 8000d18:	4b05      	ldr	r3, [pc, #20]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000d1a:	0018      	movs	r0, r3
 8000d1c:	f001 ff58 	bl	8002bd0 <HAL_TIM_Base_Stop_IT>
	}
}
 8000d20:	46c0      	nop			; (mov r8, r8)
 8000d22:	46bd      	mov	sp, r7
 8000d24:	b002      	add	sp, #8
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	40002000 	.word	0x40002000
 8000d2c:	2000038a 	.word	0x2000038a
 8000d30:	200000f0 	.word	0x200000f0

08000d34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d38:	b672      	cpsid	i
}
 8000d3a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d3c:	e7fe      	b.n	8000d3c <Error_Handler+0x8>
	...

08000d40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d46:	4b0f      	ldr	r3, [pc, #60]	; (8000d84 <HAL_MspInit+0x44>)
 8000d48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <HAL_MspInit+0x44>)
 8000d4c:	2101      	movs	r1, #1
 8000d4e:	430a      	orrs	r2, r1
 8000d50:	641a      	str	r2, [r3, #64]	; 0x40
 8000d52:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <HAL_MspInit+0x44>)
 8000d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d56:	2201      	movs	r2, #1
 8000d58:	4013      	ands	r3, r2
 8000d5a:	607b      	str	r3, [r7, #4]
 8000d5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d5e:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <HAL_MspInit+0x44>)
 8000d60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d62:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <HAL_MspInit+0x44>)
 8000d64:	2180      	movs	r1, #128	; 0x80
 8000d66:	0549      	lsls	r1, r1, #21
 8000d68:	430a      	orrs	r2, r1
 8000d6a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d6c:	4b05      	ldr	r3, [pc, #20]	; (8000d84 <HAL_MspInit+0x44>)
 8000d6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d70:	2380      	movs	r3, #128	; 0x80
 8000d72:	055b      	lsls	r3, r3, #21
 8000d74:	4013      	ands	r3, r2
 8000d76:	603b      	str	r3, [r7, #0]
 8000d78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d7a:	46c0      	nop			; (mov r8, r8)
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	b002      	add	sp, #8
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	46c0      	nop			; (mov r8, r8)
 8000d84:	40021000 	.word	0x40021000

08000d88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a0e      	ldr	r2, [pc, #56]	; (8000dd0 <HAL_TIM_Base_MspInit+0x48>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d115      	bne.n	8000dc6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000d9a:	4b0e      	ldr	r3, [pc, #56]	; (8000dd4 <HAL_TIM_Base_MspInit+0x4c>)
 8000d9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d9e:	4b0d      	ldr	r3, [pc, #52]	; (8000dd4 <HAL_TIM_Base_MspInit+0x4c>)
 8000da0:	2180      	movs	r1, #128	; 0x80
 8000da2:	0209      	lsls	r1, r1, #8
 8000da4:	430a      	orrs	r2, r1
 8000da6:	641a      	str	r2, [r3, #64]	; 0x40
 8000da8:	4b0a      	ldr	r3, [pc, #40]	; (8000dd4 <HAL_TIM_Base_MspInit+0x4c>)
 8000daa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dac:	2380      	movs	r3, #128	; 0x80
 8000dae:	021b      	lsls	r3, r3, #8
 8000db0:	4013      	ands	r3, r2
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8000db6:	2200      	movs	r2, #0
 8000db8:	2100      	movs	r1, #0
 8000dba:	2013      	movs	r0, #19
 8000dbc:	f000 fb00 	bl	80013c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8000dc0:	2013      	movs	r0, #19
 8000dc2:	f000 fb12 	bl	80013ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000dc6:	46c0      	nop			; (mov r8, r8)
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	b004      	add	sp, #16
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	46c0      	nop			; (mov r8, r8)
 8000dd0:	40002000 	.word	0x40002000
 8000dd4:	40021000 	.word	0x40021000

08000dd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dd8:	b590      	push	{r4, r7, lr}
 8000dda:	b095      	sub	sp, #84	; 0x54
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de0:	233c      	movs	r3, #60	; 0x3c
 8000de2:	18fb      	adds	r3, r7, r3
 8000de4:	0018      	movs	r0, r3
 8000de6:	2314      	movs	r3, #20
 8000de8:	001a      	movs	r2, r3
 8000dea:	2100      	movs	r1, #0
 8000dec:	f003 fddc 	bl	80049a8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000df0:	2414      	movs	r4, #20
 8000df2:	193b      	adds	r3, r7, r4
 8000df4:	0018      	movs	r0, r3
 8000df6:	2328      	movs	r3, #40	; 0x28
 8000df8:	001a      	movs	r2, r3
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	f003 fdd4 	bl	80049a8 <memset>
  if(huart->Instance==USART1)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a3c      	ldr	r2, [pc, #240]	; (8000ef8 <HAL_UART_MspInit+0x120>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d171      	bne.n	8000eee <HAL_UART_MspInit+0x116>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e0a:	193b      	adds	r3, r7, r4
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000e10:	193b      	adds	r3, r7, r4
 8000e12:	2200      	movs	r2, #0
 8000e14:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e16:	193b      	adds	r3, r7, r4
 8000e18:	0018      	movs	r0, r3
 8000e1a:	f001 fcb3 	bl	8002784 <HAL_RCCEx_PeriphCLKConfig>
 8000e1e:	1e03      	subs	r3, r0, #0
 8000e20:	d001      	beq.n	8000e26 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e22:	f7ff ff87 	bl	8000d34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e26:	4b35      	ldr	r3, [pc, #212]	; (8000efc <HAL_UART_MspInit+0x124>)
 8000e28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e2a:	4b34      	ldr	r3, [pc, #208]	; (8000efc <HAL_UART_MspInit+0x124>)
 8000e2c:	2180      	movs	r1, #128	; 0x80
 8000e2e:	01c9      	lsls	r1, r1, #7
 8000e30:	430a      	orrs	r2, r1
 8000e32:	641a      	str	r2, [r3, #64]	; 0x40
 8000e34:	4b31      	ldr	r3, [pc, #196]	; (8000efc <HAL_UART_MspInit+0x124>)
 8000e36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e38:	2380      	movs	r3, #128	; 0x80
 8000e3a:	01db      	lsls	r3, r3, #7
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	613b      	str	r3, [r7, #16]
 8000e40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e42:	4b2e      	ldr	r3, [pc, #184]	; (8000efc <HAL_UART_MspInit+0x124>)
 8000e44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e46:	4b2d      	ldr	r3, [pc, #180]	; (8000efc <HAL_UART_MspInit+0x124>)
 8000e48:	2101      	movs	r1, #1
 8000e4a:	430a      	orrs	r2, r1
 8000e4c:	635a      	str	r2, [r3, #52]	; 0x34
 8000e4e:	4b2b      	ldr	r3, [pc, #172]	; (8000efc <HAL_UART_MspInit+0x124>)
 8000e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e52:	2201      	movs	r2, #1
 8000e54:	4013      	ands	r3, r2
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e5a:	213c      	movs	r1, #60	; 0x3c
 8000e5c:	187b      	adds	r3, r7, r1
 8000e5e:	22c0      	movs	r2, #192	; 0xc0
 8000e60:	00d2      	lsls	r2, r2, #3
 8000e62:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e64:	187b      	adds	r3, r7, r1
 8000e66:	2202      	movs	r2, #2
 8000e68:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	187b      	adds	r3, r7, r1
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e70:	187b      	adds	r3, r7, r1
 8000e72:	2200      	movs	r2, #0
 8000e74:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000e76:	187b      	adds	r3, r7, r1
 8000e78:	2201      	movs	r2, #1
 8000e7a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7c:	187a      	adds	r2, r7, r1
 8000e7e:	23a0      	movs	r3, #160	; 0xa0
 8000e80:	05db      	lsls	r3, r3, #23
 8000e82:	0011      	movs	r1, r2
 8000e84:	0018      	movs	r0, r3
 8000e86:	f000 fdeb 	bl	8001a60 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8000e8a:	4b1d      	ldr	r3, [pc, #116]	; (8000f00 <HAL_UART_MspInit+0x128>)
 8000e8c:	4a1d      	ldr	r2, [pc, #116]	; (8000f04 <HAL_UART_MspInit+0x12c>)
 8000e8e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8000e90:	4b1b      	ldr	r3, [pc, #108]	; (8000f00 <HAL_UART_MspInit+0x128>)
 8000e92:	2232      	movs	r2, #50	; 0x32
 8000e94:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e96:	4b1a      	ldr	r3, [pc, #104]	; (8000f00 <HAL_UART_MspInit+0x128>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e9c:	4b18      	ldr	r3, [pc, #96]	; (8000f00 <HAL_UART_MspInit+0x128>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ea2:	4b17      	ldr	r3, [pc, #92]	; (8000f00 <HAL_UART_MspInit+0x128>)
 8000ea4:	2280      	movs	r2, #128	; 0x80
 8000ea6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ea8:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <HAL_UART_MspInit+0x128>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000eae:	4b14      	ldr	r3, [pc, #80]	; (8000f00 <HAL_UART_MspInit+0x128>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000eb4:	4b12      	ldr	r3, [pc, #72]	; (8000f00 <HAL_UART_MspInit+0x128>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000eba:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <HAL_UART_MspInit+0x128>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000ec0:	4b0f      	ldr	r3, [pc, #60]	; (8000f00 <HAL_UART_MspInit+0x128>)
 8000ec2:	0018      	movs	r0, r3
 8000ec4:	f000 faae 	bl	8001424 <HAL_DMA_Init>
 8000ec8:	1e03      	subs	r3, r0, #0
 8000eca:	d001      	beq.n	8000ed0 <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 8000ecc:	f7ff ff32 	bl	8000d34 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2180      	movs	r1, #128	; 0x80
 8000ed4:	4a0a      	ldr	r2, [pc, #40]	; (8000f00 <HAL_UART_MspInit+0x128>)
 8000ed6:	505a      	str	r2, [r3, r1]
 8000ed8:	4b09      	ldr	r3, [pc, #36]	; (8000f00 <HAL_UART_MspInit+0x128>)
 8000eda:	687a      	ldr	r2, [r7, #4]
 8000edc:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	201b      	movs	r0, #27
 8000ee4:	f000 fa6c 	bl	80013c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ee8:	201b      	movs	r0, #27
 8000eea:	f000 fa7e 	bl	80013ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000eee:	46c0      	nop			; (mov r8, r8)
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	b015      	add	sp, #84	; 0x54
 8000ef4:	bd90      	pop	{r4, r7, pc}
 8000ef6:	46c0      	nop			; (mov r8, r8)
 8000ef8:	40013800 	.word	0x40013800
 8000efc:	40021000 	.word	0x40021000
 8000f00:	200001d0 	.word	0x200001d0
 8000f04:	40020008 	.word	0x40020008

08000f08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f0c:	e7fe      	b.n	8000f0c <NMI_Handler+0x4>

08000f0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f12:	e7fe      	b.n	8000f12 <HardFault_Handler+0x4>

08000f14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000f18:	46c0      	nop			; (mov r8, r8)
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f22:	46c0      	nop			; (mov r8, r8)
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f2c:	f000 f980 	bl	8001230 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f30:	46c0      	nop			; (mov r8, r8)
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
	...

08000f38 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000f3c:	4b03      	ldr	r3, [pc, #12]	; (8000f4c <DMA1_Channel1_IRQHandler+0x14>)
 8000f3e:	0018      	movs	r0, r3
 8000f40:	f000 fc4c 	bl	80017dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000f44:	46c0      	nop			; (mov r8, r8)
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	46c0      	nop			; (mov r8, r8)
 8000f4c:	200001d0 	.word	0x200001d0

08000f50 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000f54:	4b03      	ldr	r3, [pc, #12]	; (8000f64 <TIM14_IRQHandler+0x14>)
 8000f56:	0018      	movs	r0, r3
 8000f58:	f001 fe68 	bl	8002c2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8000f5c:	46c0      	nop			; (mov r8, r8)
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	46c0      	nop			; (mov r8, r8)
 8000f64:	200000f0 	.word	0x200000f0

08000f68 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f6c:	4b03      	ldr	r3, [pc, #12]	; (8000f7c <USART1_IRQHandler+0x14>)
 8000f6e:	0018      	movs	r0, r3
 8000f70:	f002 f92e 	bl	80031d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f74:	46c0      	nop			; (mov r8, r8)
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	46c0      	nop			; (mov r8, r8)
 8000f7c:	2000013c 	.word	0x2000013c

08000f80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
	return 1;
 8000f84:	2301      	movs	r3, #1
}
 8000f86:	0018      	movs	r0, r3
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <_kill>:

int _kill(int pid, int sig)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000f96:	f003 fcc9 	bl	800492c <__errno>
 8000f9a:	0003      	movs	r3, r0
 8000f9c:	2216      	movs	r2, #22
 8000f9e:	601a      	str	r2, [r3, #0]
	return -1;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	425b      	negs	r3, r3
}
 8000fa4:	0018      	movs	r0, r3
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	b002      	add	sp, #8
 8000faa:	bd80      	pop	{r7, pc}

08000fac <_exit>:

void _exit (int status)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	425a      	negs	r2, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	0011      	movs	r1, r2
 8000fbc:	0018      	movs	r0, r3
 8000fbe:	f7ff ffe5 	bl	8000f8c <_kill>
	while (1) {}		/* Make sure we hang here */
 8000fc2:	e7fe      	b.n	8000fc2 <_exit+0x16>

08000fc4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	617b      	str	r3, [r7, #20]
 8000fd4:	e00a      	b.n	8000fec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000fd6:	e000      	b.n	8000fda <_read+0x16>
 8000fd8:	bf00      	nop
 8000fda:	0001      	movs	r1, r0
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	1c5a      	adds	r2, r3, #1
 8000fe0:	60ba      	str	r2, [r7, #8]
 8000fe2:	b2ca      	uxtb	r2, r1
 8000fe4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	617b      	str	r3, [r7, #20]
 8000fec:	697a      	ldr	r2, [r7, #20]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	dbf0      	blt.n	8000fd6 <_read+0x12>
	}

return len;
 8000ff4:	687b      	ldr	r3, [r7, #4]
}
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	b006      	add	sp, #24
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b086      	sub	sp, #24
 8001002:	af00      	add	r7, sp, #0
 8001004:	60f8      	str	r0, [r7, #12]
 8001006:	60b9      	str	r1, [r7, #8]
 8001008:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800100a:	2300      	movs	r3, #0
 800100c:	617b      	str	r3, [r7, #20]
 800100e:	e009      	b.n	8001024 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	1c5a      	adds	r2, r3, #1
 8001014:	60ba      	str	r2, [r7, #8]
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	0018      	movs	r0, r3
 800101a:	e000      	b.n	800101e <_write+0x20>
 800101c:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	3301      	adds	r3, #1
 8001022:	617b      	str	r3, [r7, #20]
 8001024:	697a      	ldr	r2, [r7, #20]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	429a      	cmp	r2, r3
 800102a:	dbf1      	blt.n	8001010 <_write+0x12>
	}
	return len;
 800102c:	687b      	ldr	r3, [r7, #4]
}
 800102e:	0018      	movs	r0, r3
 8001030:	46bd      	mov	sp, r7
 8001032:	b006      	add	sp, #24
 8001034:	bd80      	pop	{r7, pc}

08001036 <_close>:

int _close(int file)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	b082      	sub	sp, #8
 800103a:	af00      	add	r7, sp, #0
 800103c:	6078      	str	r0, [r7, #4]
	return -1;
 800103e:	2301      	movs	r3, #1
 8001040:	425b      	negs	r3, r3
}
 8001042:	0018      	movs	r0, r3
 8001044:	46bd      	mov	sp, r7
 8001046:	b002      	add	sp, #8
 8001048:	bd80      	pop	{r7, pc}

0800104a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b082      	sub	sp, #8
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
 8001052:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	2280      	movs	r2, #128	; 0x80
 8001058:	0192      	lsls	r2, r2, #6
 800105a:	605a      	str	r2, [r3, #4]
	return 0;
 800105c:	2300      	movs	r3, #0
}
 800105e:	0018      	movs	r0, r3
 8001060:	46bd      	mov	sp, r7
 8001062:	b002      	add	sp, #8
 8001064:	bd80      	pop	{r7, pc}

08001066 <_isatty>:

int _isatty(int file)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	b082      	sub	sp, #8
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
	return 1;
 800106e:	2301      	movs	r3, #1
}
 8001070:	0018      	movs	r0, r3
 8001072:	46bd      	mov	sp, r7
 8001074:	b002      	add	sp, #8
 8001076:	bd80      	pop	{r7, pc}

08001078 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
	return 0;
 8001084:	2300      	movs	r3, #0
}
 8001086:	0018      	movs	r0, r3
 8001088:	46bd      	mov	sp, r7
 800108a:	b004      	add	sp, #16
 800108c:	bd80      	pop	{r7, pc}
	...

08001090 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001098:	4a14      	ldr	r2, [pc, #80]	; (80010ec <_sbrk+0x5c>)
 800109a:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <_sbrk+0x60>)
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010a4:	4b13      	ldr	r3, [pc, #76]	; (80010f4 <_sbrk+0x64>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d102      	bne.n	80010b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010ac:	4b11      	ldr	r3, [pc, #68]	; (80010f4 <_sbrk+0x64>)
 80010ae:	4a12      	ldr	r2, [pc, #72]	; (80010f8 <_sbrk+0x68>)
 80010b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010b2:	4b10      	ldr	r3, [pc, #64]	; (80010f4 <_sbrk+0x64>)
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	18d3      	adds	r3, r2, r3
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d207      	bcs.n	80010d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010c0:	f003 fc34 	bl	800492c <__errno>
 80010c4:	0003      	movs	r3, r0
 80010c6:	220c      	movs	r2, #12
 80010c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ca:	2301      	movs	r3, #1
 80010cc:	425b      	negs	r3, r3
 80010ce:	e009      	b.n	80010e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010d0:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <_sbrk+0x64>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010d6:	4b07      	ldr	r3, [pc, #28]	; (80010f4 <_sbrk+0x64>)
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	18d2      	adds	r2, r2, r3
 80010de:	4b05      	ldr	r3, [pc, #20]	; (80010f4 <_sbrk+0x64>)
 80010e0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80010e2:	68fb      	ldr	r3, [r7, #12]
}
 80010e4:	0018      	movs	r0, r3
 80010e6:	46bd      	mov	sp, r7
 80010e8:	b006      	add	sp, #24
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20002000 	.word	0x20002000
 80010f0:	00000400 	.word	0x00000400
 80010f4:	20000390 	.word	0x20000390
 80010f8:	200003a8 	.word	0x200003a8

080010fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001100:	46c0      	nop			; (mov r8, r8)
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
	...

08001108 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001108:	480d      	ldr	r0, [pc, #52]	; (8001140 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800110a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800110c:	f7ff fff6 	bl	80010fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001110:	480c      	ldr	r0, [pc, #48]	; (8001144 <LoopForever+0x6>)
  ldr r1, =_edata
 8001112:	490d      	ldr	r1, [pc, #52]	; (8001148 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001114:	4a0d      	ldr	r2, [pc, #52]	; (800114c <LoopForever+0xe>)
  movs r3, #0
 8001116:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001118:	e002      	b.n	8001120 <LoopCopyDataInit>

0800111a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800111a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800111c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800111e:	3304      	adds	r3, #4

08001120 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001120:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001122:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001124:	d3f9      	bcc.n	800111a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001126:	4a0a      	ldr	r2, [pc, #40]	; (8001150 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001128:	4c0a      	ldr	r4, [pc, #40]	; (8001154 <LoopForever+0x16>)
  movs r3, #0
 800112a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800112c:	e001      	b.n	8001132 <LoopFillZerobss>

0800112e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800112e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001130:	3204      	adds	r2, #4

08001132 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001132:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001134:	d3fb      	bcc.n	800112e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001136:	f003 fbff 	bl	8004938 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800113a:	f7ff fa81 	bl	8000640 <main>

0800113e <LoopForever>:

LoopForever:
  b LoopForever
 800113e:	e7fe      	b.n	800113e <LoopForever>
  ldr   r0, =_estack
 8001140:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001144:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001148:	200000d4 	.word	0x200000d4
  ldr r2, =_sidata
 800114c:	08006418 	.word	0x08006418
  ldr r2, =_sbss
 8001150:	200000d4 	.word	0x200000d4
  ldr r4, =_ebss
 8001154:	200003a8 	.word	0x200003a8

08001158 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001158:	e7fe      	b.n	8001158 <ADC1_IRQHandler>
	...

0800115c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001162:	1dfb      	adds	r3, r7, #7
 8001164:	2200      	movs	r2, #0
 8001166:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001168:	4b0b      	ldr	r3, [pc, #44]	; (8001198 <HAL_Init+0x3c>)
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <HAL_Init+0x3c>)
 800116e:	2180      	movs	r1, #128	; 0x80
 8001170:	0049      	lsls	r1, r1, #1
 8001172:	430a      	orrs	r2, r1
 8001174:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001176:	2000      	movs	r0, #0
 8001178:	f000 f810 	bl	800119c <HAL_InitTick>
 800117c:	1e03      	subs	r3, r0, #0
 800117e:	d003      	beq.n	8001188 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001180:	1dfb      	adds	r3, r7, #7
 8001182:	2201      	movs	r2, #1
 8001184:	701a      	strb	r2, [r3, #0]
 8001186:	e001      	b.n	800118c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001188:	f7ff fdda 	bl	8000d40 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800118c:	1dfb      	adds	r3, r7, #7
 800118e:	781b      	ldrb	r3, [r3, #0]
}
 8001190:	0018      	movs	r0, r3
 8001192:	46bd      	mov	sp, r7
 8001194:	b002      	add	sp, #8
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40022000 	.word	0x40022000

0800119c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800119c:	b590      	push	{r4, r7, lr}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011a4:	230f      	movs	r3, #15
 80011a6:	18fb      	adds	r3, r7, r3
 80011a8:	2200      	movs	r2, #0
 80011aa:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80011ac:	4b1d      	ldr	r3, [pc, #116]	; (8001224 <HAL_InitTick+0x88>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d02b      	beq.n	800120c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80011b4:	4b1c      	ldr	r3, [pc, #112]	; (8001228 <HAL_InitTick+0x8c>)
 80011b6:	681c      	ldr	r4, [r3, #0]
 80011b8:	4b1a      	ldr	r3, [pc, #104]	; (8001224 <HAL_InitTick+0x88>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	0019      	movs	r1, r3
 80011be:	23fa      	movs	r3, #250	; 0xfa
 80011c0:	0098      	lsls	r0, r3, #2
 80011c2:	f7fe ffb1 	bl	8000128 <__udivsi3>
 80011c6:	0003      	movs	r3, r0
 80011c8:	0019      	movs	r1, r3
 80011ca:	0020      	movs	r0, r4
 80011cc:	f7fe ffac 	bl	8000128 <__udivsi3>
 80011d0:	0003      	movs	r3, r0
 80011d2:	0018      	movs	r0, r3
 80011d4:	f000 f919 	bl	800140a <HAL_SYSTICK_Config>
 80011d8:	1e03      	subs	r3, r0, #0
 80011da:	d112      	bne.n	8001202 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2b03      	cmp	r3, #3
 80011e0:	d80a      	bhi.n	80011f8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011e2:	6879      	ldr	r1, [r7, #4]
 80011e4:	2301      	movs	r3, #1
 80011e6:	425b      	negs	r3, r3
 80011e8:	2200      	movs	r2, #0
 80011ea:	0018      	movs	r0, r3
 80011ec:	f000 f8e8 	bl	80013c0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011f0:	4b0e      	ldr	r3, [pc, #56]	; (800122c <HAL_InitTick+0x90>)
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	e00d      	b.n	8001214 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80011f8:	230f      	movs	r3, #15
 80011fa:	18fb      	adds	r3, r7, r3
 80011fc:	2201      	movs	r2, #1
 80011fe:	701a      	strb	r2, [r3, #0]
 8001200:	e008      	b.n	8001214 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001202:	230f      	movs	r3, #15
 8001204:	18fb      	adds	r3, r7, r3
 8001206:	2201      	movs	r2, #1
 8001208:	701a      	strb	r2, [r3, #0]
 800120a:	e003      	b.n	8001214 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800120c:	230f      	movs	r3, #15
 800120e:	18fb      	adds	r3, r7, r3
 8001210:	2201      	movs	r2, #1
 8001212:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001214:	230f      	movs	r3, #15
 8001216:	18fb      	adds	r3, r7, r3
 8001218:	781b      	ldrb	r3, [r3, #0]
}
 800121a:	0018      	movs	r0, r3
 800121c:	46bd      	mov	sp, r7
 800121e:	b005      	add	sp, #20
 8001220:	bd90      	pop	{r4, r7, pc}
 8001222:	46c0      	nop			; (mov r8, r8)
 8001224:	2000006c 	.word	0x2000006c
 8001228:	20000064 	.word	0x20000064
 800122c:	20000068 	.word	0x20000068

08001230 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001234:	4b05      	ldr	r3, [pc, #20]	; (800124c <HAL_IncTick+0x1c>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	001a      	movs	r2, r3
 800123a:	4b05      	ldr	r3, [pc, #20]	; (8001250 <HAL_IncTick+0x20>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	18d2      	adds	r2, r2, r3
 8001240:	4b03      	ldr	r3, [pc, #12]	; (8001250 <HAL_IncTick+0x20>)
 8001242:	601a      	str	r2, [r3, #0]
}
 8001244:	46c0      	nop			; (mov r8, r8)
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	46c0      	nop			; (mov r8, r8)
 800124c:	2000006c 	.word	0x2000006c
 8001250:	20000394 	.word	0x20000394

08001254 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  return uwTick;
 8001258:	4b02      	ldr	r3, [pc, #8]	; (8001264 <HAL_GetTick+0x10>)
 800125a:	681b      	ldr	r3, [r3, #0]
}
 800125c:	0018      	movs	r0, r3
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	46c0      	nop			; (mov r8, r8)
 8001264:	20000394 	.word	0x20000394

08001268 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	0002      	movs	r2, r0
 8001270:	1dfb      	adds	r3, r7, #7
 8001272:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001274:	1dfb      	adds	r3, r7, #7
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b7f      	cmp	r3, #127	; 0x7f
 800127a:	d809      	bhi.n	8001290 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800127c:	1dfb      	adds	r3, r7, #7
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	001a      	movs	r2, r3
 8001282:	231f      	movs	r3, #31
 8001284:	401a      	ands	r2, r3
 8001286:	4b04      	ldr	r3, [pc, #16]	; (8001298 <__NVIC_EnableIRQ+0x30>)
 8001288:	2101      	movs	r1, #1
 800128a:	4091      	lsls	r1, r2
 800128c:	000a      	movs	r2, r1
 800128e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001290:	46c0      	nop			; (mov r8, r8)
 8001292:	46bd      	mov	sp, r7
 8001294:	b002      	add	sp, #8
 8001296:	bd80      	pop	{r7, pc}
 8001298:	e000e100 	.word	0xe000e100

0800129c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800129c:	b590      	push	{r4, r7, lr}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	0002      	movs	r2, r0
 80012a4:	6039      	str	r1, [r7, #0]
 80012a6:	1dfb      	adds	r3, r7, #7
 80012a8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80012aa:	1dfb      	adds	r3, r7, #7
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	2b7f      	cmp	r3, #127	; 0x7f
 80012b0:	d828      	bhi.n	8001304 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012b2:	4a2f      	ldr	r2, [pc, #188]	; (8001370 <__NVIC_SetPriority+0xd4>)
 80012b4:	1dfb      	adds	r3, r7, #7
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	b25b      	sxtb	r3, r3
 80012ba:	089b      	lsrs	r3, r3, #2
 80012bc:	33c0      	adds	r3, #192	; 0xc0
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	589b      	ldr	r3, [r3, r2]
 80012c2:	1dfa      	adds	r2, r7, #7
 80012c4:	7812      	ldrb	r2, [r2, #0]
 80012c6:	0011      	movs	r1, r2
 80012c8:	2203      	movs	r2, #3
 80012ca:	400a      	ands	r2, r1
 80012cc:	00d2      	lsls	r2, r2, #3
 80012ce:	21ff      	movs	r1, #255	; 0xff
 80012d0:	4091      	lsls	r1, r2
 80012d2:	000a      	movs	r2, r1
 80012d4:	43d2      	mvns	r2, r2
 80012d6:	401a      	ands	r2, r3
 80012d8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	019b      	lsls	r3, r3, #6
 80012de:	22ff      	movs	r2, #255	; 0xff
 80012e0:	401a      	ands	r2, r3
 80012e2:	1dfb      	adds	r3, r7, #7
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	0018      	movs	r0, r3
 80012e8:	2303      	movs	r3, #3
 80012ea:	4003      	ands	r3, r0
 80012ec:	00db      	lsls	r3, r3, #3
 80012ee:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012f0:	481f      	ldr	r0, [pc, #124]	; (8001370 <__NVIC_SetPriority+0xd4>)
 80012f2:	1dfb      	adds	r3, r7, #7
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	b25b      	sxtb	r3, r3
 80012f8:	089b      	lsrs	r3, r3, #2
 80012fa:	430a      	orrs	r2, r1
 80012fc:	33c0      	adds	r3, #192	; 0xc0
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001302:	e031      	b.n	8001368 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001304:	4a1b      	ldr	r2, [pc, #108]	; (8001374 <__NVIC_SetPriority+0xd8>)
 8001306:	1dfb      	adds	r3, r7, #7
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	0019      	movs	r1, r3
 800130c:	230f      	movs	r3, #15
 800130e:	400b      	ands	r3, r1
 8001310:	3b08      	subs	r3, #8
 8001312:	089b      	lsrs	r3, r3, #2
 8001314:	3306      	adds	r3, #6
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	18d3      	adds	r3, r2, r3
 800131a:	3304      	adds	r3, #4
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	1dfa      	adds	r2, r7, #7
 8001320:	7812      	ldrb	r2, [r2, #0]
 8001322:	0011      	movs	r1, r2
 8001324:	2203      	movs	r2, #3
 8001326:	400a      	ands	r2, r1
 8001328:	00d2      	lsls	r2, r2, #3
 800132a:	21ff      	movs	r1, #255	; 0xff
 800132c:	4091      	lsls	r1, r2
 800132e:	000a      	movs	r2, r1
 8001330:	43d2      	mvns	r2, r2
 8001332:	401a      	ands	r2, r3
 8001334:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	019b      	lsls	r3, r3, #6
 800133a:	22ff      	movs	r2, #255	; 0xff
 800133c:	401a      	ands	r2, r3
 800133e:	1dfb      	adds	r3, r7, #7
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	0018      	movs	r0, r3
 8001344:	2303      	movs	r3, #3
 8001346:	4003      	ands	r3, r0
 8001348:	00db      	lsls	r3, r3, #3
 800134a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800134c:	4809      	ldr	r0, [pc, #36]	; (8001374 <__NVIC_SetPriority+0xd8>)
 800134e:	1dfb      	adds	r3, r7, #7
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	001c      	movs	r4, r3
 8001354:	230f      	movs	r3, #15
 8001356:	4023      	ands	r3, r4
 8001358:	3b08      	subs	r3, #8
 800135a:	089b      	lsrs	r3, r3, #2
 800135c:	430a      	orrs	r2, r1
 800135e:	3306      	adds	r3, #6
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	18c3      	adds	r3, r0, r3
 8001364:	3304      	adds	r3, #4
 8001366:	601a      	str	r2, [r3, #0]
}
 8001368:	46c0      	nop			; (mov r8, r8)
 800136a:	46bd      	mov	sp, r7
 800136c:	b003      	add	sp, #12
 800136e:	bd90      	pop	{r4, r7, pc}
 8001370:	e000e100 	.word	0xe000e100
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	1e5a      	subs	r2, r3, #1
 8001384:	2380      	movs	r3, #128	; 0x80
 8001386:	045b      	lsls	r3, r3, #17
 8001388:	429a      	cmp	r2, r3
 800138a:	d301      	bcc.n	8001390 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800138c:	2301      	movs	r3, #1
 800138e:	e010      	b.n	80013b2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001390:	4b0a      	ldr	r3, [pc, #40]	; (80013bc <SysTick_Config+0x44>)
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	3a01      	subs	r2, #1
 8001396:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001398:	2301      	movs	r3, #1
 800139a:	425b      	negs	r3, r3
 800139c:	2103      	movs	r1, #3
 800139e:	0018      	movs	r0, r3
 80013a0:	f7ff ff7c 	bl	800129c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013a4:	4b05      	ldr	r3, [pc, #20]	; (80013bc <SysTick_Config+0x44>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013aa:	4b04      	ldr	r3, [pc, #16]	; (80013bc <SysTick_Config+0x44>)
 80013ac:	2207      	movs	r2, #7
 80013ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	0018      	movs	r0, r3
 80013b4:	46bd      	mov	sp, r7
 80013b6:	b002      	add	sp, #8
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	46c0      	nop			; (mov r8, r8)
 80013bc:	e000e010 	.word	0xe000e010

080013c0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60b9      	str	r1, [r7, #8]
 80013c8:	607a      	str	r2, [r7, #4]
 80013ca:	210f      	movs	r1, #15
 80013cc:	187b      	adds	r3, r7, r1
 80013ce:	1c02      	adds	r2, r0, #0
 80013d0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80013d2:	68ba      	ldr	r2, [r7, #8]
 80013d4:	187b      	adds	r3, r7, r1
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	b25b      	sxtb	r3, r3
 80013da:	0011      	movs	r1, r2
 80013dc:	0018      	movs	r0, r3
 80013de:	f7ff ff5d 	bl	800129c <__NVIC_SetPriority>
}
 80013e2:	46c0      	nop			; (mov r8, r8)
 80013e4:	46bd      	mov	sp, r7
 80013e6:	b004      	add	sp, #16
 80013e8:	bd80      	pop	{r7, pc}

080013ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b082      	sub	sp, #8
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	0002      	movs	r2, r0
 80013f2:	1dfb      	adds	r3, r7, #7
 80013f4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013f6:	1dfb      	adds	r3, r7, #7
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	b25b      	sxtb	r3, r3
 80013fc:	0018      	movs	r0, r3
 80013fe:	f7ff ff33 	bl	8001268 <__NVIC_EnableIRQ>
}
 8001402:	46c0      	nop			; (mov r8, r8)
 8001404:	46bd      	mov	sp, r7
 8001406:	b002      	add	sp, #8
 8001408:	bd80      	pop	{r7, pc}

0800140a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	b082      	sub	sp, #8
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	0018      	movs	r0, r3
 8001416:	f7ff ffaf 	bl	8001378 <SysTick_Config>
 800141a:	0003      	movs	r3, r0
}
 800141c:	0018      	movs	r0, r3
 800141e:	46bd      	mov	sp, r7
 8001420:	b002      	add	sp, #8
 8001422:	bd80      	pop	{r7, pc}

08001424 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d101      	bne.n	8001436 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e077      	b.n	8001526 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a3d      	ldr	r2, [pc, #244]	; (8001530 <HAL_DMA_Init+0x10c>)
 800143c:	4694      	mov	ip, r2
 800143e:	4463      	add	r3, ip
 8001440:	2114      	movs	r1, #20
 8001442:	0018      	movs	r0, r3
 8001444:	f7fe fe70 	bl	8000128 <__udivsi3>
 8001448:	0003      	movs	r3, r0
 800144a:	009a      	lsls	r2, r3, #2
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2225      	movs	r2, #37	; 0x25
 8001454:	2102      	movs	r1, #2
 8001456:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4934      	ldr	r1, [pc, #208]	; (8001534 <HAL_DMA_Init+0x110>)
 8001464:	400a      	ands	r2, r1
 8001466:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	6819      	ldr	r1, [r3, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	689a      	ldr	r2, [r3, #8]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	68db      	ldr	r3, [r3, #12]
 8001476:	431a      	orrs	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	691b      	ldr	r3, [r3, #16]
 800147c:	431a      	orrs	r2, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	695b      	ldr	r3, [r3, #20]
 8001482:	431a      	orrs	r2, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	431a      	orrs	r2, r3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	69db      	ldr	r3, [r3, #28]
 800148e:	431a      	orrs	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6a1b      	ldr	r3, [r3, #32]
 8001494:	431a      	orrs	r2, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	430a      	orrs	r2, r1
 800149c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	0018      	movs	r0, r3
 80014a2:	f000 fa8d 	bl	80019c0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	689a      	ldr	r2, [r3, #8]
 80014aa:	2380      	movs	r3, #128	; 0x80
 80014ac:	01db      	lsls	r3, r3, #7
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d102      	bne.n	80014b8 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	685a      	ldr	r2, [r3, #4]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c0:	213f      	movs	r1, #63	; 0x3f
 80014c2:	400a      	ands	r2, r1
 80014c4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80014ce:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d011      	beq.n	80014fc <HAL_DMA_Init+0xd8>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	2b04      	cmp	r3, #4
 80014de:	d80d      	bhi.n	80014fc <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	0018      	movs	r0, r3
 80014e4:	f000 fa98 	bl	8001a18 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	e008      	b.n	800150e <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2200      	movs	r2, #0
 8001500:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2200      	movs	r2, #0
 8001506:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2225      	movs	r2, #37	; 0x25
 8001518:	2101      	movs	r1, #1
 800151a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2224      	movs	r2, #36	; 0x24
 8001520:	2100      	movs	r1, #0
 8001522:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001524:	2300      	movs	r3, #0
}
 8001526:	0018      	movs	r0, r3
 8001528:	46bd      	mov	sp, r7
 800152a:	b002      	add	sp, #8
 800152c:	bd80      	pop	{r7, pc}
 800152e:	46c0      	nop			; (mov r8, r8)
 8001530:	bffdfff8 	.word	0xbffdfff8
 8001534:	ffff800f 	.word	0xffff800f

08001538 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b086      	sub	sp, #24
 800153c:	af00      	add	r7, sp, #0
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	60b9      	str	r1, [r7, #8]
 8001542:	607a      	str	r2, [r7, #4]
 8001544:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001546:	2317      	movs	r3, #23
 8001548:	18fb      	adds	r3, r7, r3
 800154a:	2200      	movs	r2, #0
 800154c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	2224      	movs	r2, #36	; 0x24
 8001552:	5c9b      	ldrb	r3, [r3, r2]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d101      	bne.n	800155c <HAL_DMA_Start_IT+0x24>
 8001558:	2302      	movs	r3, #2
 800155a:	e06f      	b.n	800163c <HAL_DMA_Start_IT+0x104>
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	2224      	movs	r2, #36	; 0x24
 8001560:	2101      	movs	r1, #1
 8001562:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	2225      	movs	r2, #37	; 0x25
 8001568:	5c9b      	ldrb	r3, [r3, r2]
 800156a:	b2db      	uxtb	r3, r3
 800156c:	2b01      	cmp	r3, #1
 800156e:	d157      	bne.n	8001620 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2225      	movs	r2, #37	; 0x25
 8001574:	2102      	movs	r1, #2
 8001576:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	2200      	movs	r2, #0
 800157c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2101      	movs	r1, #1
 800158a:	438a      	bics	r2, r1
 800158c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	68b9      	ldr	r1, [r7, #8]
 8001594:	68f8      	ldr	r0, [r7, #12]
 8001596:	f000 f9d3 	bl	8001940 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d008      	beq.n	80015b4 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	210e      	movs	r1, #14
 80015ae:	430a      	orrs	r2, r1
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	e00f      	b.n	80015d4 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2104      	movs	r1, #4
 80015c0:	438a      	bics	r2, r1
 80015c2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	210a      	movs	r1, #10
 80015d0:	430a      	orrs	r2, r1
 80015d2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	2380      	movs	r3, #128	; 0x80
 80015dc:	025b      	lsls	r3, r3, #9
 80015de:	4013      	ands	r3, r2
 80015e0:	d008      	beq.n	80015f4 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ec:	2180      	movs	r1, #128	; 0x80
 80015ee:	0049      	lsls	r1, r1, #1
 80015f0:	430a      	orrs	r2, r1
 80015f2:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d008      	beq.n	800160e <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001606:	2180      	movs	r1, #128	; 0x80
 8001608:	0049      	lsls	r1, r1, #1
 800160a:	430a      	orrs	r2, r1
 800160c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2101      	movs	r1, #1
 800161a:	430a      	orrs	r2, r1
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	e00a      	b.n	8001636 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	2280      	movs	r2, #128	; 0x80
 8001624:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	2224      	movs	r2, #36	; 0x24
 800162a:	2100      	movs	r1, #0
 800162c:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 800162e:	2317      	movs	r3, #23
 8001630:	18fb      	adds	r3, r7, r3
 8001632:	2201      	movs	r2, #1
 8001634:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8001636:	2317      	movs	r3, #23
 8001638:	18fb      	adds	r3, r7, r3
 800163a:	781b      	ldrb	r3, [r3, #0]
}
 800163c:	0018      	movs	r0, r3
 800163e:	46bd      	mov	sp, r7
 8001640:	b006      	add	sp, #24
 8001642:	bd80      	pop	{r7, pc}

08001644 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d101      	bne.n	8001656 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e050      	b.n	80016f8 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2225      	movs	r2, #37	; 0x25
 800165a:	5c9b      	ldrb	r3, [r3, r2]
 800165c:	b2db      	uxtb	r3, r3
 800165e:	2b02      	cmp	r3, #2
 8001660:	d008      	beq.n	8001674 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2204      	movs	r2, #4
 8001666:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2224      	movs	r2, #36	; 0x24
 800166c:	2100      	movs	r1, #0
 800166e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e041      	b.n	80016f8 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	210e      	movs	r1, #14
 8001680:	438a      	bics	r2, r1
 8001682:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168e:	491c      	ldr	r1, [pc, #112]	; (8001700 <HAL_DMA_Abort+0xbc>)
 8001690:	400a      	ands	r2, r1
 8001692:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	2101      	movs	r1, #1
 80016a0:	438a      	bics	r2, r1
 80016a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80016a4:	4b17      	ldr	r3, [pc, #92]	; (8001704 <HAL_DMA_Abort+0xc0>)
 80016a6:	6859      	ldr	r1, [r3, #4]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ac:	221c      	movs	r2, #28
 80016ae:	4013      	ands	r3, r2
 80016b0:	2201      	movs	r2, #1
 80016b2:	409a      	lsls	r2, r3
 80016b4:	4b13      	ldr	r3, [pc, #76]	; (8001704 <HAL_DMA_Abort+0xc0>)
 80016b6:	430a      	orrs	r2, r1
 80016b8:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80016c2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d00c      	beq.n	80016e6 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016d6:	490a      	ldr	r1, [pc, #40]	; (8001700 <HAL_DMA_Abort+0xbc>)
 80016d8:	400a      	ands	r2, r1
 80016da:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80016e4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2225      	movs	r2, #37	; 0x25
 80016ea:	2101      	movs	r1, #1
 80016ec:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2224      	movs	r2, #36	; 0x24
 80016f2:	2100      	movs	r1, #0
 80016f4:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80016f6:	2300      	movs	r3, #0
}
 80016f8:	0018      	movs	r0, r3
 80016fa:	46bd      	mov	sp, r7
 80016fc:	b002      	add	sp, #8
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	fffffeff 	.word	0xfffffeff
 8001704:	40020000 	.word	0x40020000

08001708 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001710:	210f      	movs	r1, #15
 8001712:	187b      	adds	r3, r7, r1
 8001714:	2200      	movs	r2, #0
 8001716:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2225      	movs	r2, #37	; 0x25
 800171c:	5c9b      	ldrb	r3, [r3, r2]
 800171e:	b2db      	uxtb	r3, r3
 8001720:	2b02      	cmp	r3, #2
 8001722:	d006      	beq.n	8001732 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2204      	movs	r2, #4
 8001728:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800172a:	187b      	adds	r3, r7, r1
 800172c:	2201      	movs	r2, #1
 800172e:	701a      	strb	r2, [r3, #0]
 8001730:	e049      	b.n	80017c6 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	210e      	movs	r1, #14
 800173e:	438a      	bics	r2, r1
 8001740:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2101      	movs	r1, #1
 800174e:	438a      	bics	r2, r1
 8001750:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175c:	491d      	ldr	r1, [pc, #116]	; (80017d4 <HAL_DMA_Abort_IT+0xcc>)
 800175e:	400a      	ands	r2, r1
 8001760:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8001762:	4b1d      	ldr	r3, [pc, #116]	; (80017d8 <HAL_DMA_Abort_IT+0xd0>)
 8001764:	6859      	ldr	r1, [r3, #4]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176a:	221c      	movs	r2, #28
 800176c:	4013      	ands	r3, r2
 800176e:	2201      	movs	r2, #1
 8001770:	409a      	lsls	r2, r3
 8001772:	4b19      	ldr	r3, [pc, #100]	; (80017d8 <HAL_DMA_Abort_IT+0xd0>)
 8001774:	430a      	orrs	r2, r1
 8001776:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001780:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001786:	2b00      	cmp	r3, #0
 8001788:	d00c      	beq.n	80017a4 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001794:	490f      	ldr	r1, [pc, #60]	; (80017d4 <HAL_DMA_Abort_IT+0xcc>)
 8001796:	400a      	ands	r2, r1
 8001798:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80017a2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2225      	movs	r2, #37	; 0x25
 80017a8:	2101      	movs	r1, #1
 80017aa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2224      	movs	r2, #36	; 0x24
 80017b0:	2100      	movs	r1, #0
 80017b2:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d004      	beq.n	80017c6 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	0010      	movs	r0, r2
 80017c4:	4798      	blx	r3
    }
  }
  return status;
 80017c6:	230f      	movs	r3, #15
 80017c8:	18fb      	adds	r3, r7, r3
 80017ca:	781b      	ldrb	r3, [r3, #0]
}
 80017cc:	0018      	movs	r0, r3
 80017ce:	46bd      	mov	sp, r7
 80017d0:	b004      	add	sp, #16
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	fffffeff 	.word	0xfffffeff
 80017d8:	40020000 	.word	0x40020000

080017dc <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80017e4:	4b55      	ldr	r3, [pc, #340]	; (800193c <HAL_DMA_IRQHandler+0x160>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f6:	221c      	movs	r2, #28
 80017f8:	4013      	ands	r3, r2
 80017fa:	2204      	movs	r2, #4
 80017fc:	409a      	lsls	r2, r3
 80017fe:	0013      	movs	r3, r2
 8001800:	68fa      	ldr	r2, [r7, #12]
 8001802:	4013      	ands	r3, r2
 8001804:	d027      	beq.n	8001856 <HAL_DMA_IRQHandler+0x7a>
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	2204      	movs	r2, #4
 800180a:	4013      	ands	r3, r2
 800180c:	d023      	beq.n	8001856 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2220      	movs	r2, #32
 8001816:	4013      	ands	r3, r2
 8001818:	d107      	bne.n	800182a <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2104      	movs	r1, #4
 8001826:	438a      	bics	r2, r1
 8001828:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800182a:	4b44      	ldr	r3, [pc, #272]	; (800193c <HAL_DMA_IRQHandler+0x160>)
 800182c:	6859      	ldr	r1, [r3, #4]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001832:	221c      	movs	r2, #28
 8001834:	4013      	ands	r3, r2
 8001836:	2204      	movs	r2, #4
 8001838:	409a      	lsls	r2, r3
 800183a:	4b40      	ldr	r3, [pc, #256]	; (800193c <HAL_DMA_IRQHandler+0x160>)
 800183c:	430a      	orrs	r2, r1
 800183e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001844:	2b00      	cmp	r3, #0
 8001846:	d100      	bne.n	800184a <HAL_DMA_IRQHandler+0x6e>
 8001848:	e073      	b.n	8001932 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	0010      	movs	r0, r2
 8001852:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001854:	e06d      	b.n	8001932 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185a:	221c      	movs	r2, #28
 800185c:	4013      	ands	r3, r2
 800185e:	2202      	movs	r2, #2
 8001860:	409a      	lsls	r2, r3
 8001862:	0013      	movs	r3, r2
 8001864:	68fa      	ldr	r2, [r7, #12]
 8001866:	4013      	ands	r3, r2
 8001868:	d02e      	beq.n	80018c8 <HAL_DMA_IRQHandler+0xec>
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	2202      	movs	r2, #2
 800186e:	4013      	ands	r3, r2
 8001870:	d02a      	beq.n	80018c8 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2220      	movs	r2, #32
 800187a:	4013      	ands	r3, r2
 800187c:	d10b      	bne.n	8001896 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	210a      	movs	r1, #10
 800188a:	438a      	bics	r2, r1
 800188c:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2225      	movs	r2, #37	; 0x25
 8001892:	2101      	movs	r1, #1
 8001894:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001896:	4b29      	ldr	r3, [pc, #164]	; (800193c <HAL_DMA_IRQHandler+0x160>)
 8001898:	6859      	ldr	r1, [r3, #4]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189e:	221c      	movs	r2, #28
 80018a0:	4013      	ands	r3, r2
 80018a2:	2202      	movs	r2, #2
 80018a4:	409a      	lsls	r2, r3
 80018a6:	4b25      	ldr	r3, [pc, #148]	; (800193c <HAL_DMA_IRQHandler+0x160>)
 80018a8:	430a      	orrs	r2, r1
 80018aa:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2224      	movs	r2, #36	; 0x24
 80018b0:	2100      	movs	r1, #0
 80018b2:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d03a      	beq.n	8001932 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	0010      	movs	r0, r2
 80018c4:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80018c6:	e034      	b.n	8001932 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018cc:	221c      	movs	r2, #28
 80018ce:	4013      	ands	r3, r2
 80018d0:	2208      	movs	r2, #8
 80018d2:	409a      	lsls	r2, r3
 80018d4:	0013      	movs	r3, r2
 80018d6:	68fa      	ldr	r2, [r7, #12]
 80018d8:	4013      	ands	r3, r2
 80018da:	d02b      	beq.n	8001934 <HAL_DMA_IRQHandler+0x158>
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	2208      	movs	r2, #8
 80018e0:	4013      	ands	r3, r2
 80018e2:	d027      	beq.n	8001934 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	210e      	movs	r1, #14
 80018f0:	438a      	bics	r2, r1
 80018f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80018f4:	4b11      	ldr	r3, [pc, #68]	; (800193c <HAL_DMA_IRQHandler+0x160>)
 80018f6:	6859      	ldr	r1, [r3, #4]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fc:	221c      	movs	r2, #28
 80018fe:	4013      	ands	r3, r2
 8001900:	2201      	movs	r2, #1
 8001902:	409a      	lsls	r2, r3
 8001904:	4b0d      	ldr	r3, [pc, #52]	; (800193c <HAL_DMA_IRQHandler+0x160>)
 8001906:	430a      	orrs	r2, r1
 8001908:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2201      	movs	r2, #1
 800190e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2225      	movs	r2, #37	; 0x25
 8001914:	2101      	movs	r1, #1
 8001916:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2224      	movs	r2, #36	; 0x24
 800191c:	2100      	movs	r1, #0
 800191e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001924:	2b00      	cmp	r3, #0
 8001926:	d005      	beq.n	8001934 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	0010      	movs	r0, r2
 8001930:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001932:	46c0      	nop			; (mov r8, r8)
 8001934:	46c0      	nop			; (mov r8, r8)
}
 8001936:	46bd      	mov	sp, r7
 8001938:	b004      	add	sp, #16
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40020000 	.word	0x40020000

08001940 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	60b9      	str	r1, [r7, #8]
 800194a:	607a      	str	r2, [r7, #4]
 800194c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001952:	68fa      	ldr	r2, [r7, #12]
 8001954:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001956:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800195c:	2b00      	cmp	r3, #0
 800195e:	d004      	beq.n	800196a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001964:	68fa      	ldr	r2, [r7, #12]
 8001966:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001968:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800196a:	4b14      	ldr	r3, [pc, #80]	; (80019bc <DMA_SetConfig+0x7c>)
 800196c:	6859      	ldr	r1, [r3, #4]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	221c      	movs	r2, #28
 8001974:	4013      	ands	r3, r2
 8001976:	2201      	movs	r2, #1
 8001978:	409a      	lsls	r2, r3
 800197a:	4b10      	ldr	r3, [pc, #64]	; (80019bc <DMA_SetConfig+0x7c>)
 800197c:	430a      	orrs	r2, r1
 800197e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	683a      	ldr	r2, [r7, #0]
 8001986:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	2b10      	cmp	r3, #16
 800198e:	d108      	bne.n	80019a2 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	68ba      	ldr	r2, [r7, #8]
 800199e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80019a0:	e007      	b.n	80019b2 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	68ba      	ldr	r2, [r7, #8]
 80019a8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	60da      	str	r2, [r3, #12]
}
 80019b2:	46c0      	nop			; (mov r8, r8)
 80019b4:	46bd      	mov	sp, r7
 80019b6:	b004      	add	sp, #16
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	46c0      	nop			; (mov r8, r8)
 80019bc:	40020000 	.word	0x40020000

080019c0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019cc:	089b      	lsrs	r3, r3, #2
 80019ce:	4a10      	ldr	r2, [pc, #64]	; (8001a10 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80019d0:	4694      	mov	ip, r2
 80019d2:	4463      	add	r3, ip
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	001a      	movs	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	001a      	movs	r2, r3
 80019e2:	23ff      	movs	r3, #255	; 0xff
 80019e4:	4013      	ands	r3, r2
 80019e6:	3b08      	subs	r3, #8
 80019e8:	2114      	movs	r1, #20
 80019ea:	0018      	movs	r0, r3
 80019ec:	f7fe fb9c 	bl	8000128 <__udivsi3>
 80019f0:	0003      	movs	r3, r0
 80019f2:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4a07      	ldr	r2, [pc, #28]	; (8001a14 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80019f8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	221f      	movs	r2, #31
 80019fe:	4013      	ands	r3, r2
 8001a00:	2201      	movs	r2, #1
 8001a02:	409a      	lsls	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001a08:	46c0      	nop			; (mov r8, r8)
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	b004      	add	sp, #16
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	10008200 	.word	0x10008200
 8001a14:	40020880 	.word	0x40020880

08001a18 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	223f      	movs	r2, #63	; 0x3f
 8001a26:	4013      	ands	r3, r2
 8001a28:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	4a0a      	ldr	r2, [pc, #40]	; (8001a58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001a2e:	4694      	mov	ip, r2
 8001a30:	4463      	add	r3, ip
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	001a      	movs	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a07      	ldr	r2, [pc, #28]	; (8001a5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001a3e:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	3b01      	subs	r3, #1
 8001a44:	2203      	movs	r2, #3
 8001a46:	4013      	ands	r3, r2
 8001a48:	2201      	movs	r2, #1
 8001a4a:	409a      	lsls	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001a50:	46c0      	nop			; (mov r8, r8)
 8001a52:	46bd      	mov	sp, r7
 8001a54:	b004      	add	sp, #16
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	1000823f 	.word	0x1000823f
 8001a5c:	40020940 	.word	0x40020940

08001a60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a6e:	e147      	b.n	8001d00 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2101      	movs	r1, #1
 8001a76:	697a      	ldr	r2, [r7, #20]
 8001a78:	4091      	lsls	r1, r2
 8001a7a:	000a      	movs	r2, r1
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d100      	bne.n	8001a88 <HAL_GPIO_Init+0x28>
 8001a86:	e138      	b.n	8001cfa <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	2203      	movs	r2, #3
 8001a8e:	4013      	ands	r3, r2
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d005      	beq.n	8001aa0 <HAL_GPIO_Init+0x40>
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	2203      	movs	r2, #3
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d130      	bne.n	8001b02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	2203      	movs	r2, #3
 8001aac:	409a      	lsls	r2, r3
 8001aae:	0013      	movs	r3, r2
 8001ab0:	43da      	mvns	r2, r3
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	68da      	ldr	r2, [r3, #12]
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	409a      	lsls	r2, r3
 8001ac2:	0013      	movs	r3, r2
 8001ac4:	693a      	ldr	r2, [r7, #16]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	693a      	ldr	r2, [r7, #16]
 8001ace:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	409a      	lsls	r2, r3
 8001adc:	0013      	movs	r3, r2
 8001ade:	43da      	mvns	r2, r3
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	091b      	lsrs	r3, r3, #4
 8001aec:	2201      	movs	r2, #1
 8001aee:	401a      	ands	r2, r3
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	409a      	lsls	r2, r3
 8001af4:	0013      	movs	r3, r2
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2203      	movs	r2, #3
 8001b08:	4013      	ands	r3, r2
 8001b0a:	2b03      	cmp	r3, #3
 8001b0c:	d017      	beq.n	8001b3e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	2203      	movs	r2, #3
 8001b1a:	409a      	lsls	r2, r3
 8001b1c:	0013      	movs	r3, r2
 8001b1e:	43da      	mvns	r2, r3
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	4013      	ands	r3, r2
 8001b24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	689a      	ldr	r2, [r3, #8]
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	409a      	lsls	r2, r3
 8001b30:	0013      	movs	r3, r2
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	2203      	movs	r2, #3
 8001b44:	4013      	ands	r3, r2
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d123      	bne.n	8001b92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	08da      	lsrs	r2, r3, #3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	3208      	adds	r2, #8
 8001b52:	0092      	lsls	r2, r2, #2
 8001b54:	58d3      	ldr	r3, [r2, r3]
 8001b56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	2207      	movs	r2, #7
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	220f      	movs	r2, #15
 8001b62:	409a      	lsls	r2, r3
 8001b64:	0013      	movs	r3, r2
 8001b66:	43da      	mvns	r2, r3
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	691a      	ldr	r2, [r3, #16]
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	2107      	movs	r1, #7
 8001b76:	400b      	ands	r3, r1
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	409a      	lsls	r2, r3
 8001b7c:	0013      	movs	r3, r2
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	08da      	lsrs	r2, r3, #3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	3208      	adds	r2, #8
 8001b8c:	0092      	lsls	r2, r2, #2
 8001b8e:	6939      	ldr	r1, [r7, #16]
 8001b90:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	2203      	movs	r2, #3
 8001b9e:	409a      	lsls	r2, r3
 8001ba0:	0013      	movs	r3, r2
 8001ba2:	43da      	mvns	r2, r3
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	2203      	movs	r2, #3
 8001bb0:	401a      	ands	r2, r3
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	409a      	lsls	r2, r3
 8001bb8:	0013      	movs	r3, r2
 8001bba:	693a      	ldr	r2, [r7, #16]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	693a      	ldr	r2, [r7, #16]
 8001bc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685a      	ldr	r2, [r3, #4]
 8001bca:	23c0      	movs	r3, #192	; 0xc0
 8001bcc:	029b      	lsls	r3, r3, #10
 8001bce:	4013      	ands	r3, r2
 8001bd0:	d100      	bne.n	8001bd4 <HAL_GPIO_Init+0x174>
 8001bd2:	e092      	b.n	8001cfa <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001bd4:	4a50      	ldr	r2, [pc, #320]	; (8001d18 <HAL_GPIO_Init+0x2b8>)
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	089b      	lsrs	r3, r3, #2
 8001bda:	3318      	adds	r3, #24
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	589b      	ldr	r3, [r3, r2]
 8001be0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	2203      	movs	r2, #3
 8001be6:	4013      	ands	r3, r2
 8001be8:	00db      	lsls	r3, r3, #3
 8001bea:	220f      	movs	r2, #15
 8001bec:	409a      	lsls	r2, r3
 8001bee:	0013      	movs	r3, r2
 8001bf0:	43da      	mvns	r2, r3
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	23a0      	movs	r3, #160	; 0xa0
 8001bfc:	05db      	lsls	r3, r3, #23
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d013      	beq.n	8001c2a <HAL_GPIO_Init+0x1ca>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a45      	ldr	r2, [pc, #276]	; (8001d1c <HAL_GPIO_Init+0x2bc>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d00d      	beq.n	8001c26 <HAL_GPIO_Init+0x1c6>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a44      	ldr	r2, [pc, #272]	; (8001d20 <HAL_GPIO_Init+0x2c0>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d007      	beq.n	8001c22 <HAL_GPIO_Init+0x1c2>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a43      	ldr	r2, [pc, #268]	; (8001d24 <HAL_GPIO_Init+0x2c4>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d101      	bne.n	8001c1e <HAL_GPIO_Init+0x1be>
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e006      	b.n	8001c2c <HAL_GPIO_Init+0x1cc>
 8001c1e:	2305      	movs	r3, #5
 8001c20:	e004      	b.n	8001c2c <HAL_GPIO_Init+0x1cc>
 8001c22:	2302      	movs	r3, #2
 8001c24:	e002      	b.n	8001c2c <HAL_GPIO_Init+0x1cc>
 8001c26:	2301      	movs	r3, #1
 8001c28:	e000      	b.n	8001c2c <HAL_GPIO_Init+0x1cc>
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	697a      	ldr	r2, [r7, #20]
 8001c2e:	2103      	movs	r1, #3
 8001c30:	400a      	ands	r2, r1
 8001c32:	00d2      	lsls	r2, r2, #3
 8001c34:	4093      	lsls	r3, r2
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001c3c:	4936      	ldr	r1, [pc, #216]	; (8001d18 <HAL_GPIO_Init+0x2b8>)
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	089b      	lsrs	r3, r3, #2
 8001c42:	3318      	adds	r3, #24
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c4a:	4b33      	ldr	r3, [pc, #204]	; (8001d18 <HAL_GPIO_Init+0x2b8>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	43da      	mvns	r2, r3
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	4013      	ands	r3, r2
 8001c58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685a      	ldr	r2, [r3, #4]
 8001c5e:	2380      	movs	r3, #128	; 0x80
 8001c60:	035b      	lsls	r3, r3, #13
 8001c62:	4013      	ands	r3, r2
 8001c64:	d003      	beq.n	8001c6e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c6e:	4b2a      	ldr	r3, [pc, #168]	; (8001d18 <HAL_GPIO_Init+0x2b8>)
 8001c70:	693a      	ldr	r2, [r7, #16]
 8001c72:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001c74:	4b28      	ldr	r3, [pc, #160]	; (8001d18 <HAL_GPIO_Init+0x2b8>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	43da      	mvns	r2, r3
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	4013      	ands	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685a      	ldr	r2, [r3, #4]
 8001c88:	2380      	movs	r3, #128	; 0x80
 8001c8a:	039b      	lsls	r3, r3, #14
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	d003      	beq.n	8001c98 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c98:	4b1f      	ldr	r3, [pc, #124]	; (8001d18 <HAL_GPIO_Init+0x2b8>)
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001c9e:	4a1e      	ldr	r2, [pc, #120]	; (8001d18 <HAL_GPIO_Init+0x2b8>)
 8001ca0:	2384      	movs	r3, #132	; 0x84
 8001ca2:	58d3      	ldr	r3, [r2, r3]
 8001ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	43da      	mvns	r2, r3
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	4013      	ands	r3, r2
 8001cae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685a      	ldr	r2, [r3, #4]
 8001cb4:	2380      	movs	r3, #128	; 0x80
 8001cb6:	029b      	lsls	r3, r3, #10
 8001cb8:	4013      	ands	r3, r2
 8001cba:	d003      	beq.n	8001cc4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001cc4:	4914      	ldr	r1, [pc, #80]	; (8001d18 <HAL_GPIO_Init+0x2b8>)
 8001cc6:	2284      	movs	r2, #132	; 0x84
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001ccc:	4a12      	ldr	r2, [pc, #72]	; (8001d18 <HAL_GPIO_Init+0x2b8>)
 8001cce:	2380      	movs	r3, #128	; 0x80
 8001cd0:	58d3      	ldr	r3, [r2, r3]
 8001cd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	43da      	mvns	r2, r3
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685a      	ldr	r2, [r3, #4]
 8001ce2:	2380      	movs	r3, #128	; 0x80
 8001ce4:	025b      	lsls	r3, r3, #9
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	d003      	beq.n	8001cf2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001cea:	693a      	ldr	r2, [r7, #16]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001cf2:	4909      	ldr	r1, [pc, #36]	; (8001d18 <HAL_GPIO_Init+0x2b8>)
 8001cf4:	2280      	movs	r2, #128	; 0x80
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	40da      	lsrs	r2, r3
 8001d08:	1e13      	subs	r3, r2, #0
 8001d0a:	d000      	beq.n	8001d0e <HAL_GPIO_Init+0x2ae>
 8001d0c:	e6b0      	b.n	8001a70 <HAL_GPIO_Init+0x10>
  }
}
 8001d0e:	46c0      	nop			; (mov r8, r8)
 8001d10:	46c0      	nop			; (mov r8, r8)
 8001d12:	46bd      	mov	sp, r7
 8001d14:	b006      	add	sp, #24
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	40021800 	.word	0x40021800
 8001d1c:	50000400 	.word	0x50000400
 8001d20:	50000800 	.word	0x50000800
 8001d24:	50000c00 	.word	0x50000c00

08001d28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	0008      	movs	r0, r1
 8001d32:	0011      	movs	r1, r2
 8001d34:	1cbb      	adds	r3, r7, #2
 8001d36:	1c02      	adds	r2, r0, #0
 8001d38:	801a      	strh	r2, [r3, #0]
 8001d3a:	1c7b      	adds	r3, r7, #1
 8001d3c:	1c0a      	adds	r2, r1, #0
 8001d3e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d40:	1c7b      	adds	r3, r7, #1
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d004      	beq.n	8001d52 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d48:	1cbb      	adds	r3, r7, #2
 8001d4a:	881a      	ldrh	r2, [r3, #0]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d50:	e003      	b.n	8001d5a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d52:	1cbb      	adds	r3, r7, #2
 8001d54:	881a      	ldrh	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d5a:	46c0      	nop			; (mov r8, r8)
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	b002      	add	sp, #8
 8001d60:	bd80      	pop	{r7, pc}
	...

08001d64 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001d6c:	4b19      	ldr	r3, [pc, #100]	; (8001dd4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a19      	ldr	r2, [pc, #100]	; (8001dd8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001d72:	4013      	ands	r3, r2
 8001d74:	0019      	movs	r1, r3
 8001d76:	4b17      	ldr	r3, [pc, #92]	; (8001dd4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	2380      	movs	r3, #128	; 0x80
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d11f      	bne.n	8001dc8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001d88:	4b14      	ldr	r3, [pc, #80]	; (8001ddc <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	0013      	movs	r3, r2
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	189b      	adds	r3, r3, r2
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	4912      	ldr	r1, [pc, #72]	; (8001de0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001d96:	0018      	movs	r0, r3
 8001d98:	f7fe f9c6 	bl	8000128 <__udivsi3>
 8001d9c:	0003      	movs	r3, r0
 8001d9e:	3301      	adds	r3, #1
 8001da0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001da2:	e008      	b.n	8001db6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d003      	beq.n	8001db2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	3b01      	subs	r3, #1
 8001dae:	60fb      	str	r3, [r7, #12]
 8001db0:	e001      	b.n	8001db6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e009      	b.n	8001dca <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001db6:	4b07      	ldr	r3, [pc, #28]	; (8001dd4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001db8:	695a      	ldr	r2, [r3, #20]
 8001dba:	2380      	movs	r3, #128	; 0x80
 8001dbc:	00db      	lsls	r3, r3, #3
 8001dbe:	401a      	ands	r2, r3
 8001dc0:	2380      	movs	r3, #128	; 0x80
 8001dc2:	00db      	lsls	r3, r3, #3
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d0ed      	beq.n	8001da4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	0018      	movs	r0, r3
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	b004      	add	sp, #16
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	46c0      	nop			; (mov r8, r8)
 8001dd4:	40007000 	.word	0x40007000
 8001dd8:	fffff9ff 	.word	0xfffff9ff
 8001ddc:	20000064 	.word	0x20000064
 8001de0:	000f4240 	.word	0x000f4240

08001de4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001de8:	4b03      	ldr	r3, [pc, #12]	; (8001df8 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001dea:	689a      	ldr	r2, [r3, #8]
 8001dec:	23e0      	movs	r3, #224	; 0xe0
 8001dee:	01db      	lsls	r3, r3, #7
 8001df0:	4013      	ands	r3, r2
}
 8001df2:	0018      	movs	r0, r3
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	40021000 	.word	0x40021000

08001dfc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b088      	sub	sp, #32
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d101      	bne.n	8001e0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e2fe      	b.n	800240c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2201      	movs	r2, #1
 8001e14:	4013      	ands	r3, r2
 8001e16:	d100      	bne.n	8001e1a <HAL_RCC_OscConfig+0x1e>
 8001e18:	e07c      	b.n	8001f14 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e1a:	4bc3      	ldr	r3, [pc, #780]	; (8002128 <HAL_RCC_OscConfig+0x32c>)
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	2238      	movs	r2, #56	; 0x38
 8001e20:	4013      	ands	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e24:	4bc0      	ldr	r3, [pc, #768]	; (8002128 <HAL_RCC_OscConfig+0x32c>)
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	2203      	movs	r2, #3
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	2b10      	cmp	r3, #16
 8001e32:	d102      	bne.n	8001e3a <HAL_RCC_OscConfig+0x3e>
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	2b03      	cmp	r3, #3
 8001e38:	d002      	beq.n	8001e40 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	2b08      	cmp	r3, #8
 8001e3e:	d10b      	bne.n	8001e58 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e40:	4bb9      	ldr	r3, [pc, #740]	; (8002128 <HAL_RCC_OscConfig+0x32c>)
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	2380      	movs	r3, #128	; 0x80
 8001e46:	029b      	lsls	r3, r3, #10
 8001e48:	4013      	ands	r3, r2
 8001e4a:	d062      	beq.n	8001f12 <HAL_RCC_OscConfig+0x116>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d15e      	bne.n	8001f12 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e2d9      	b.n	800240c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685a      	ldr	r2, [r3, #4]
 8001e5c:	2380      	movs	r3, #128	; 0x80
 8001e5e:	025b      	lsls	r3, r3, #9
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d107      	bne.n	8001e74 <HAL_RCC_OscConfig+0x78>
 8001e64:	4bb0      	ldr	r3, [pc, #704]	; (8002128 <HAL_RCC_OscConfig+0x32c>)
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	4baf      	ldr	r3, [pc, #700]	; (8002128 <HAL_RCC_OscConfig+0x32c>)
 8001e6a:	2180      	movs	r1, #128	; 0x80
 8001e6c:	0249      	lsls	r1, r1, #9
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	601a      	str	r2, [r3, #0]
 8001e72:	e020      	b.n	8001eb6 <HAL_RCC_OscConfig+0xba>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685a      	ldr	r2, [r3, #4]
 8001e78:	23a0      	movs	r3, #160	; 0xa0
 8001e7a:	02db      	lsls	r3, r3, #11
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d10e      	bne.n	8001e9e <HAL_RCC_OscConfig+0xa2>
 8001e80:	4ba9      	ldr	r3, [pc, #676]	; (8002128 <HAL_RCC_OscConfig+0x32c>)
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	4ba8      	ldr	r3, [pc, #672]	; (8002128 <HAL_RCC_OscConfig+0x32c>)
 8001e86:	2180      	movs	r1, #128	; 0x80
 8001e88:	02c9      	lsls	r1, r1, #11
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	4ba6      	ldr	r3, [pc, #664]	; (8002128 <HAL_RCC_OscConfig+0x32c>)
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	4ba5      	ldr	r3, [pc, #660]	; (8002128 <HAL_RCC_OscConfig+0x32c>)
 8001e94:	2180      	movs	r1, #128	; 0x80
 8001e96:	0249      	lsls	r1, r1, #9
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	e00b      	b.n	8001eb6 <HAL_RCC_OscConfig+0xba>
 8001e9e:	4ba2      	ldr	r3, [pc, #648]	; (8002128 <HAL_RCC_OscConfig+0x32c>)
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	4ba1      	ldr	r3, [pc, #644]	; (8002128 <HAL_RCC_OscConfig+0x32c>)
 8001ea4:	49a1      	ldr	r1, [pc, #644]	; (800212c <HAL_RCC_OscConfig+0x330>)
 8001ea6:	400a      	ands	r2, r1
 8001ea8:	601a      	str	r2, [r3, #0]
 8001eaa:	4b9f      	ldr	r3, [pc, #636]	; (8002128 <HAL_RCC_OscConfig+0x32c>)
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	4b9e      	ldr	r3, [pc, #632]	; (8002128 <HAL_RCC_OscConfig+0x32c>)
 8001eb0:	499f      	ldr	r1, [pc, #636]	; (8002130 <HAL_RCC_OscConfig+0x334>)
 8001eb2:	400a      	ands	r2, r1
 8001eb4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d014      	beq.n	8001ee8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ebe:	f7ff f9c9 	bl	8001254 <HAL_GetTick>
 8001ec2:	0003      	movs	r3, r0
 8001ec4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ec6:	e008      	b.n	8001eda <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ec8:	f7ff f9c4 	bl	8001254 <HAL_GetTick>
 8001ecc:	0002      	movs	r2, r0
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b64      	cmp	r3, #100	; 0x64
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e298      	b.n	800240c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001eda:	4b93      	ldr	r3, [pc, #588]	; (8002128 <HAL_RCC_OscConfig+0x32c>)
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	2380      	movs	r3, #128	; 0x80
 8001ee0:	029b      	lsls	r3, r3, #10
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	d0f0      	beq.n	8001ec8 <HAL_RCC_OscConfig+0xcc>
 8001ee6:	e015      	b.n	8001f14 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee8:	f7ff f9b4 	bl	8001254 <HAL_GetTick>
 8001eec:	0003      	movs	r3, r0
 8001eee:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ef0:	e008      	b.n	8001f04 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ef2:	f7ff f9af 	bl	8001254 <HAL_GetTick>
 8001ef6:	0002      	movs	r2, r0
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b64      	cmp	r3, #100	; 0x64
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e283      	b.n	800240c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f04:	4b88      	ldr	r3, [pc, #544]	; (8002128 <HAL_RCC_OscConfig+0x32c>)
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	2380      	movs	r3, #128	; 0x80
 8001f0a:	029b      	lsls	r3, r3, #10
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	d1f0      	bne.n	8001ef2 <HAL_RCC_OscConfig+0xf6>
 8001f10:	e000      	b.n	8001f14 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f12:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2202      	movs	r2, #2
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	d100      	bne.n	8001f20 <HAL_RCC_OscConfig+0x124>
 8001f1e:	e099      	b.n	8002054 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f20:	4b81      	ldr	r3, [pc, #516]	; (8002128 <HAL_RCC_OscConfig+0x32c>)
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	2238      	movs	r2, #56	; 0x38
 8001f26:	4013      	ands	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f2a:	4b7f      	ldr	r3, [pc, #508]	; (8002128 <HAL_RCC_OscConfig+0x32c>)
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	2203      	movs	r2, #3
 8001f30:	4013      	ands	r3, r2
 8001f32:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	2b10      	cmp	r3, #16
 8001f38:	d102      	bne.n	8001f40 <HAL_RCC_OscConfig+0x144>
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d002      	beq.n	8001f46 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d135      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f46:	4b78      	ldr	r3, [pc, #480]	; (8002128 <HAL_RCC_OscConfig+0x32c>)
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	2380      	movs	r3, #128	; 0x80
 8001f4c:	00db      	lsls	r3, r3, #3
 8001f4e:	4013      	ands	r3, r2
 8001f50:	d005      	beq.n	8001f5e <HAL_RCC_OscConfig+0x162>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d101      	bne.n	8001f5e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e256      	b.n	800240c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f5e:	4b72      	ldr	r3, [pc, #456]	; (8002128 <HAL_RCC_OscConfig+0x32c>)
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	4a74      	ldr	r2, [pc, #464]	; (8002134 <HAL_RCC_OscConfig+0x338>)
 8001f64:	4013      	ands	r3, r2
 8001f66:	0019      	movs	r1, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	695b      	ldr	r3, [r3, #20]
 8001f6c:	021a      	lsls	r2, r3, #8
 8001f6e:	4b6e      	ldr	r3, [pc, #440]	; (8002128 <HAL_RCC_OscConfig+0x32c>)
 8001f70:	430a      	orrs	r2, r1
 8001f72:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d112      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001f7a:	4b6b      	ldr	r3, [pc, #428]	; (8002128 <HAL_RCC_OscConfig+0x32c>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a6e      	ldr	r2, [pc, #440]	; (8002138 <HAL_RCC_OscConfig+0x33c>)
 8001f80:	4013      	ands	r3, r2
 8001f82:	0019      	movs	r1, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	691a      	ldr	r2, [r3, #16]
 8001f88:	4b67      	ldr	r3, [pc, #412]	; (8002128 <HAL_RCC_OscConfig+0x32c>)
 8001f8a:	430a      	orrs	r2, r1
 8001f8c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001f8e:	4b66      	ldr	r3, [pc, #408]	; (8002128 <HAL_RCC_OscConfig+0x32c>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	0adb      	lsrs	r3, r3, #11
 8001f94:	2207      	movs	r2, #7
 8001f96:	4013      	ands	r3, r2
 8001f98:	4a68      	ldr	r2, [pc, #416]	; (800213c <HAL_RCC_OscConfig+0x340>)
 8001f9a:	40da      	lsrs	r2, r3
 8001f9c:	4b68      	ldr	r3, [pc, #416]	; (8002140 <HAL_RCC_OscConfig+0x344>)
 8001f9e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001fa0:	4b68      	ldr	r3, [pc, #416]	; (8002144 <HAL_RCC_OscConfig+0x348>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	0018      	movs	r0, r3
 8001fa6:	f7ff f8f9 	bl	800119c <HAL_InitTick>
 8001faa:	1e03      	subs	r3, r0, #0
 8001fac:	d051      	beq.n	8002052 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e22c      	b.n	800240c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d030      	beq.n	800201c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001fba:	4b5b      	ldr	r3, [pc, #364]	; (8002128 <HAL_RCC_OscConfig+0x32c>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a5e      	ldr	r2, [pc, #376]	; (8002138 <HAL_RCC_OscConfig+0x33c>)
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	0019      	movs	r1, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	691a      	ldr	r2, [r3, #16]
 8001fc8:	4b57      	ldr	r3, [pc, #348]	; (8002128 <HAL_RCC_OscConfig+0x32c>)
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001fce:	4b56      	ldr	r3, [pc, #344]	; (8002128 <HAL_RCC_OscConfig+0x32c>)
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	4b55      	ldr	r3, [pc, #340]	; (8002128 <HAL_RCC_OscConfig+0x32c>)
 8001fd4:	2180      	movs	r1, #128	; 0x80
 8001fd6:	0049      	lsls	r1, r1, #1
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fdc:	f7ff f93a 	bl	8001254 <HAL_GetTick>
 8001fe0:	0003      	movs	r3, r0
 8001fe2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fe4:	e008      	b.n	8001ff8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fe6:	f7ff f935 	bl	8001254 <HAL_GetTick>
 8001fea:	0002      	movs	r2, r0
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e209      	b.n	800240c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ff8:	4b4b      	ldr	r3, [pc, #300]	; (8002128 <HAL_RCC_OscConfig+0x32c>)
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	2380      	movs	r3, #128	; 0x80
 8001ffe:	00db      	lsls	r3, r3, #3
 8002000:	4013      	ands	r3, r2
 8002002:	d0f0      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002004:	4b48      	ldr	r3, [pc, #288]	; (8002128 <HAL_RCC_OscConfig+0x32c>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	4a4a      	ldr	r2, [pc, #296]	; (8002134 <HAL_RCC_OscConfig+0x338>)
 800200a:	4013      	ands	r3, r2
 800200c:	0019      	movs	r1, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	695b      	ldr	r3, [r3, #20]
 8002012:	021a      	lsls	r2, r3, #8
 8002014:	4b44      	ldr	r3, [pc, #272]	; (8002128 <HAL_RCC_OscConfig+0x32c>)
 8002016:	430a      	orrs	r2, r1
 8002018:	605a      	str	r2, [r3, #4]
 800201a:	e01b      	b.n	8002054 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800201c:	4b42      	ldr	r3, [pc, #264]	; (8002128 <HAL_RCC_OscConfig+0x32c>)
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	4b41      	ldr	r3, [pc, #260]	; (8002128 <HAL_RCC_OscConfig+0x32c>)
 8002022:	4949      	ldr	r1, [pc, #292]	; (8002148 <HAL_RCC_OscConfig+0x34c>)
 8002024:	400a      	ands	r2, r1
 8002026:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002028:	f7ff f914 	bl	8001254 <HAL_GetTick>
 800202c:	0003      	movs	r3, r0
 800202e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002030:	e008      	b.n	8002044 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002032:	f7ff f90f 	bl	8001254 <HAL_GetTick>
 8002036:	0002      	movs	r2, r0
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	2b02      	cmp	r3, #2
 800203e:	d901      	bls.n	8002044 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e1e3      	b.n	800240c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002044:	4b38      	ldr	r3, [pc, #224]	; (8002128 <HAL_RCC_OscConfig+0x32c>)
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	2380      	movs	r3, #128	; 0x80
 800204a:	00db      	lsls	r3, r3, #3
 800204c:	4013      	ands	r3, r2
 800204e:	d1f0      	bne.n	8002032 <HAL_RCC_OscConfig+0x236>
 8002050:	e000      	b.n	8002054 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002052:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2208      	movs	r2, #8
 800205a:	4013      	ands	r3, r2
 800205c:	d047      	beq.n	80020ee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800205e:	4b32      	ldr	r3, [pc, #200]	; (8002128 <HAL_RCC_OscConfig+0x32c>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	2238      	movs	r2, #56	; 0x38
 8002064:	4013      	ands	r3, r2
 8002066:	2b18      	cmp	r3, #24
 8002068:	d10a      	bne.n	8002080 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800206a:	4b2f      	ldr	r3, [pc, #188]	; (8002128 <HAL_RCC_OscConfig+0x32c>)
 800206c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800206e:	2202      	movs	r2, #2
 8002070:	4013      	ands	r3, r2
 8002072:	d03c      	beq.n	80020ee <HAL_RCC_OscConfig+0x2f2>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	699b      	ldr	r3, [r3, #24]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d138      	bne.n	80020ee <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e1c5      	b.n	800240c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d019      	beq.n	80020bc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002088:	4b27      	ldr	r3, [pc, #156]	; (8002128 <HAL_RCC_OscConfig+0x32c>)
 800208a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800208c:	4b26      	ldr	r3, [pc, #152]	; (8002128 <HAL_RCC_OscConfig+0x32c>)
 800208e:	2101      	movs	r1, #1
 8002090:	430a      	orrs	r2, r1
 8002092:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002094:	f7ff f8de 	bl	8001254 <HAL_GetTick>
 8002098:	0003      	movs	r3, r0
 800209a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800209c:	e008      	b.n	80020b0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800209e:	f7ff f8d9 	bl	8001254 <HAL_GetTick>
 80020a2:	0002      	movs	r2, r0
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d901      	bls.n	80020b0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e1ad      	b.n	800240c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020b0:	4b1d      	ldr	r3, [pc, #116]	; (8002128 <HAL_RCC_OscConfig+0x32c>)
 80020b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020b4:	2202      	movs	r2, #2
 80020b6:	4013      	ands	r3, r2
 80020b8:	d0f1      	beq.n	800209e <HAL_RCC_OscConfig+0x2a2>
 80020ba:	e018      	b.n	80020ee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80020bc:	4b1a      	ldr	r3, [pc, #104]	; (8002128 <HAL_RCC_OscConfig+0x32c>)
 80020be:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80020c0:	4b19      	ldr	r3, [pc, #100]	; (8002128 <HAL_RCC_OscConfig+0x32c>)
 80020c2:	2101      	movs	r1, #1
 80020c4:	438a      	bics	r2, r1
 80020c6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c8:	f7ff f8c4 	bl	8001254 <HAL_GetTick>
 80020cc:	0003      	movs	r3, r0
 80020ce:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020d0:	e008      	b.n	80020e4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020d2:	f7ff f8bf 	bl	8001254 <HAL_GetTick>
 80020d6:	0002      	movs	r2, r0
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d901      	bls.n	80020e4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e193      	b.n	800240c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020e4:	4b10      	ldr	r3, [pc, #64]	; (8002128 <HAL_RCC_OscConfig+0x32c>)
 80020e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020e8:	2202      	movs	r2, #2
 80020ea:	4013      	ands	r3, r2
 80020ec:	d1f1      	bne.n	80020d2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2204      	movs	r2, #4
 80020f4:	4013      	ands	r3, r2
 80020f6:	d100      	bne.n	80020fa <HAL_RCC_OscConfig+0x2fe>
 80020f8:	e0c6      	b.n	8002288 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020fa:	231f      	movs	r3, #31
 80020fc:	18fb      	adds	r3, r7, r3
 80020fe:	2200      	movs	r2, #0
 8002100:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002102:	4b09      	ldr	r3, [pc, #36]	; (8002128 <HAL_RCC_OscConfig+0x32c>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	2238      	movs	r2, #56	; 0x38
 8002108:	4013      	ands	r3, r2
 800210a:	2b20      	cmp	r3, #32
 800210c:	d11e      	bne.n	800214c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800210e:	4b06      	ldr	r3, [pc, #24]	; (8002128 <HAL_RCC_OscConfig+0x32c>)
 8002110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002112:	2202      	movs	r2, #2
 8002114:	4013      	ands	r3, r2
 8002116:	d100      	bne.n	800211a <HAL_RCC_OscConfig+0x31e>
 8002118:	e0b6      	b.n	8002288 <HAL_RCC_OscConfig+0x48c>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d000      	beq.n	8002124 <HAL_RCC_OscConfig+0x328>
 8002122:	e0b1      	b.n	8002288 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e171      	b.n	800240c <HAL_RCC_OscConfig+0x610>
 8002128:	40021000 	.word	0x40021000
 800212c:	fffeffff 	.word	0xfffeffff
 8002130:	fffbffff 	.word	0xfffbffff
 8002134:	ffff80ff 	.word	0xffff80ff
 8002138:	ffffc7ff 	.word	0xffffc7ff
 800213c:	00f42400 	.word	0x00f42400
 8002140:	20000064 	.word	0x20000064
 8002144:	20000068 	.word	0x20000068
 8002148:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800214c:	4bb1      	ldr	r3, [pc, #708]	; (8002414 <HAL_RCC_OscConfig+0x618>)
 800214e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002150:	2380      	movs	r3, #128	; 0x80
 8002152:	055b      	lsls	r3, r3, #21
 8002154:	4013      	ands	r3, r2
 8002156:	d101      	bne.n	800215c <HAL_RCC_OscConfig+0x360>
 8002158:	2301      	movs	r3, #1
 800215a:	e000      	b.n	800215e <HAL_RCC_OscConfig+0x362>
 800215c:	2300      	movs	r3, #0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d011      	beq.n	8002186 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002162:	4bac      	ldr	r3, [pc, #688]	; (8002414 <HAL_RCC_OscConfig+0x618>)
 8002164:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002166:	4bab      	ldr	r3, [pc, #684]	; (8002414 <HAL_RCC_OscConfig+0x618>)
 8002168:	2180      	movs	r1, #128	; 0x80
 800216a:	0549      	lsls	r1, r1, #21
 800216c:	430a      	orrs	r2, r1
 800216e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002170:	4ba8      	ldr	r3, [pc, #672]	; (8002414 <HAL_RCC_OscConfig+0x618>)
 8002172:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002174:	2380      	movs	r3, #128	; 0x80
 8002176:	055b      	lsls	r3, r3, #21
 8002178:	4013      	ands	r3, r2
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800217e:	231f      	movs	r3, #31
 8002180:	18fb      	adds	r3, r7, r3
 8002182:	2201      	movs	r2, #1
 8002184:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002186:	4ba4      	ldr	r3, [pc, #656]	; (8002418 <HAL_RCC_OscConfig+0x61c>)
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	2380      	movs	r3, #128	; 0x80
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	4013      	ands	r3, r2
 8002190:	d11a      	bne.n	80021c8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002192:	4ba1      	ldr	r3, [pc, #644]	; (8002418 <HAL_RCC_OscConfig+0x61c>)
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	4ba0      	ldr	r3, [pc, #640]	; (8002418 <HAL_RCC_OscConfig+0x61c>)
 8002198:	2180      	movs	r1, #128	; 0x80
 800219a:	0049      	lsls	r1, r1, #1
 800219c:	430a      	orrs	r2, r1
 800219e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80021a0:	f7ff f858 	bl	8001254 <HAL_GetTick>
 80021a4:	0003      	movs	r3, r0
 80021a6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021a8:	e008      	b.n	80021bc <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021aa:	f7ff f853 	bl	8001254 <HAL_GetTick>
 80021ae:	0002      	movs	r2, r0
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d901      	bls.n	80021bc <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e127      	b.n	800240c <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021bc:	4b96      	ldr	r3, [pc, #600]	; (8002418 <HAL_RCC_OscConfig+0x61c>)
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	2380      	movs	r3, #128	; 0x80
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	4013      	ands	r3, r2
 80021c6:	d0f0      	beq.n	80021aa <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d106      	bne.n	80021de <HAL_RCC_OscConfig+0x3e2>
 80021d0:	4b90      	ldr	r3, [pc, #576]	; (8002414 <HAL_RCC_OscConfig+0x618>)
 80021d2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80021d4:	4b8f      	ldr	r3, [pc, #572]	; (8002414 <HAL_RCC_OscConfig+0x618>)
 80021d6:	2101      	movs	r1, #1
 80021d8:	430a      	orrs	r2, r1
 80021da:	65da      	str	r2, [r3, #92]	; 0x5c
 80021dc:	e01c      	b.n	8002218 <HAL_RCC_OscConfig+0x41c>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	2b05      	cmp	r3, #5
 80021e4:	d10c      	bne.n	8002200 <HAL_RCC_OscConfig+0x404>
 80021e6:	4b8b      	ldr	r3, [pc, #556]	; (8002414 <HAL_RCC_OscConfig+0x618>)
 80021e8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80021ea:	4b8a      	ldr	r3, [pc, #552]	; (8002414 <HAL_RCC_OscConfig+0x618>)
 80021ec:	2104      	movs	r1, #4
 80021ee:	430a      	orrs	r2, r1
 80021f0:	65da      	str	r2, [r3, #92]	; 0x5c
 80021f2:	4b88      	ldr	r3, [pc, #544]	; (8002414 <HAL_RCC_OscConfig+0x618>)
 80021f4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80021f6:	4b87      	ldr	r3, [pc, #540]	; (8002414 <HAL_RCC_OscConfig+0x618>)
 80021f8:	2101      	movs	r1, #1
 80021fa:	430a      	orrs	r2, r1
 80021fc:	65da      	str	r2, [r3, #92]	; 0x5c
 80021fe:	e00b      	b.n	8002218 <HAL_RCC_OscConfig+0x41c>
 8002200:	4b84      	ldr	r3, [pc, #528]	; (8002414 <HAL_RCC_OscConfig+0x618>)
 8002202:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002204:	4b83      	ldr	r3, [pc, #524]	; (8002414 <HAL_RCC_OscConfig+0x618>)
 8002206:	2101      	movs	r1, #1
 8002208:	438a      	bics	r2, r1
 800220a:	65da      	str	r2, [r3, #92]	; 0x5c
 800220c:	4b81      	ldr	r3, [pc, #516]	; (8002414 <HAL_RCC_OscConfig+0x618>)
 800220e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002210:	4b80      	ldr	r3, [pc, #512]	; (8002414 <HAL_RCC_OscConfig+0x618>)
 8002212:	2104      	movs	r1, #4
 8002214:	438a      	bics	r2, r1
 8002216:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d014      	beq.n	800224a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002220:	f7ff f818 	bl	8001254 <HAL_GetTick>
 8002224:	0003      	movs	r3, r0
 8002226:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002228:	e009      	b.n	800223e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800222a:	f7ff f813 	bl	8001254 <HAL_GetTick>
 800222e:	0002      	movs	r2, r0
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	4a79      	ldr	r2, [pc, #484]	; (800241c <HAL_RCC_OscConfig+0x620>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e0e6      	b.n	800240c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800223e:	4b75      	ldr	r3, [pc, #468]	; (8002414 <HAL_RCC_OscConfig+0x618>)
 8002240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002242:	2202      	movs	r2, #2
 8002244:	4013      	ands	r3, r2
 8002246:	d0f0      	beq.n	800222a <HAL_RCC_OscConfig+0x42e>
 8002248:	e013      	b.n	8002272 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800224a:	f7ff f803 	bl	8001254 <HAL_GetTick>
 800224e:	0003      	movs	r3, r0
 8002250:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002252:	e009      	b.n	8002268 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002254:	f7fe fffe 	bl	8001254 <HAL_GetTick>
 8002258:	0002      	movs	r2, r0
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	4a6f      	ldr	r2, [pc, #444]	; (800241c <HAL_RCC_OscConfig+0x620>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d901      	bls.n	8002268 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e0d1      	b.n	800240c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002268:	4b6a      	ldr	r3, [pc, #424]	; (8002414 <HAL_RCC_OscConfig+0x618>)
 800226a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800226c:	2202      	movs	r2, #2
 800226e:	4013      	ands	r3, r2
 8002270:	d1f0      	bne.n	8002254 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002272:	231f      	movs	r3, #31
 8002274:	18fb      	adds	r3, r7, r3
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d105      	bne.n	8002288 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800227c:	4b65      	ldr	r3, [pc, #404]	; (8002414 <HAL_RCC_OscConfig+0x618>)
 800227e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002280:	4b64      	ldr	r3, [pc, #400]	; (8002414 <HAL_RCC_OscConfig+0x618>)
 8002282:	4967      	ldr	r1, [pc, #412]	; (8002420 <HAL_RCC_OscConfig+0x624>)
 8002284:	400a      	ands	r2, r1
 8002286:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	69db      	ldr	r3, [r3, #28]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d100      	bne.n	8002292 <HAL_RCC_OscConfig+0x496>
 8002290:	e0bb      	b.n	800240a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002292:	4b60      	ldr	r3, [pc, #384]	; (8002414 <HAL_RCC_OscConfig+0x618>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	2238      	movs	r2, #56	; 0x38
 8002298:	4013      	ands	r3, r2
 800229a:	2b10      	cmp	r3, #16
 800229c:	d100      	bne.n	80022a0 <HAL_RCC_OscConfig+0x4a4>
 800229e:	e07b      	b.n	8002398 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	69db      	ldr	r3, [r3, #28]
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d156      	bne.n	8002356 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022a8:	4b5a      	ldr	r3, [pc, #360]	; (8002414 <HAL_RCC_OscConfig+0x618>)
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	4b59      	ldr	r3, [pc, #356]	; (8002414 <HAL_RCC_OscConfig+0x618>)
 80022ae:	495d      	ldr	r1, [pc, #372]	; (8002424 <HAL_RCC_OscConfig+0x628>)
 80022b0:	400a      	ands	r2, r1
 80022b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b4:	f7fe ffce 	bl	8001254 <HAL_GetTick>
 80022b8:	0003      	movs	r3, r0
 80022ba:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022bc:	e008      	b.n	80022d0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022be:	f7fe ffc9 	bl	8001254 <HAL_GetTick>
 80022c2:	0002      	movs	r2, r0
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d901      	bls.n	80022d0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e09d      	b.n	800240c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022d0:	4b50      	ldr	r3, [pc, #320]	; (8002414 <HAL_RCC_OscConfig+0x618>)
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	2380      	movs	r3, #128	; 0x80
 80022d6:	049b      	lsls	r3, r3, #18
 80022d8:	4013      	ands	r3, r2
 80022da:	d1f0      	bne.n	80022be <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022dc:	4b4d      	ldr	r3, [pc, #308]	; (8002414 <HAL_RCC_OscConfig+0x618>)
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	4a51      	ldr	r2, [pc, #324]	; (8002428 <HAL_RCC_OscConfig+0x62c>)
 80022e2:	4013      	ands	r3, r2
 80022e4:	0019      	movs	r1, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a1a      	ldr	r2, [r3, #32]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ee:	431a      	orrs	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f4:	021b      	lsls	r3, r3, #8
 80022f6:	431a      	orrs	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fc:	431a      	orrs	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002302:	431a      	orrs	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002308:	431a      	orrs	r2, r3
 800230a:	4b42      	ldr	r3, [pc, #264]	; (8002414 <HAL_RCC_OscConfig+0x618>)
 800230c:	430a      	orrs	r2, r1
 800230e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002310:	4b40      	ldr	r3, [pc, #256]	; (8002414 <HAL_RCC_OscConfig+0x618>)
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	4b3f      	ldr	r3, [pc, #252]	; (8002414 <HAL_RCC_OscConfig+0x618>)
 8002316:	2180      	movs	r1, #128	; 0x80
 8002318:	0449      	lsls	r1, r1, #17
 800231a:	430a      	orrs	r2, r1
 800231c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800231e:	4b3d      	ldr	r3, [pc, #244]	; (8002414 <HAL_RCC_OscConfig+0x618>)
 8002320:	68da      	ldr	r2, [r3, #12]
 8002322:	4b3c      	ldr	r3, [pc, #240]	; (8002414 <HAL_RCC_OscConfig+0x618>)
 8002324:	2180      	movs	r1, #128	; 0x80
 8002326:	0549      	lsls	r1, r1, #21
 8002328:	430a      	orrs	r2, r1
 800232a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800232c:	f7fe ff92 	bl	8001254 <HAL_GetTick>
 8002330:	0003      	movs	r3, r0
 8002332:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002334:	e008      	b.n	8002348 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002336:	f7fe ff8d 	bl	8001254 <HAL_GetTick>
 800233a:	0002      	movs	r2, r0
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	2b02      	cmp	r3, #2
 8002342:	d901      	bls.n	8002348 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e061      	b.n	800240c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002348:	4b32      	ldr	r3, [pc, #200]	; (8002414 <HAL_RCC_OscConfig+0x618>)
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	2380      	movs	r3, #128	; 0x80
 800234e:	049b      	lsls	r3, r3, #18
 8002350:	4013      	ands	r3, r2
 8002352:	d0f0      	beq.n	8002336 <HAL_RCC_OscConfig+0x53a>
 8002354:	e059      	b.n	800240a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002356:	4b2f      	ldr	r3, [pc, #188]	; (8002414 <HAL_RCC_OscConfig+0x618>)
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	4b2e      	ldr	r3, [pc, #184]	; (8002414 <HAL_RCC_OscConfig+0x618>)
 800235c:	4931      	ldr	r1, [pc, #196]	; (8002424 <HAL_RCC_OscConfig+0x628>)
 800235e:	400a      	ands	r2, r1
 8002360:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002362:	f7fe ff77 	bl	8001254 <HAL_GetTick>
 8002366:	0003      	movs	r3, r0
 8002368:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800236a:	e008      	b.n	800237e <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800236c:	f7fe ff72 	bl	8001254 <HAL_GetTick>
 8002370:	0002      	movs	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b02      	cmp	r3, #2
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e046      	b.n	800240c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800237e:	4b25      	ldr	r3, [pc, #148]	; (8002414 <HAL_RCC_OscConfig+0x618>)
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	2380      	movs	r3, #128	; 0x80
 8002384:	049b      	lsls	r3, r3, #18
 8002386:	4013      	ands	r3, r2
 8002388:	d1f0      	bne.n	800236c <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800238a:	4b22      	ldr	r3, [pc, #136]	; (8002414 <HAL_RCC_OscConfig+0x618>)
 800238c:	68da      	ldr	r2, [r3, #12]
 800238e:	4b21      	ldr	r3, [pc, #132]	; (8002414 <HAL_RCC_OscConfig+0x618>)
 8002390:	4926      	ldr	r1, [pc, #152]	; (800242c <HAL_RCC_OscConfig+0x630>)
 8002392:	400a      	ands	r2, r1
 8002394:	60da      	str	r2, [r3, #12]
 8002396:	e038      	b.n	800240a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	69db      	ldr	r3, [r3, #28]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d101      	bne.n	80023a4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e033      	b.n	800240c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80023a4:	4b1b      	ldr	r3, [pc, #108]	; (8002414 <HAL_RCC_OscConfig+0x618>)
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	2203      	movs	r2, #3
 80023ae:	401a      	ands	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a1b      	ldr	r3, [r3, #32]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d126      	bne.n	8002406 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	2270      	movs	r2, #112	; 0x70
 80023bc:	401a      	ands	r2, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d11f      	bne.n	8002406 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023c6:	697a      	ldr	r2, [r7, #20]
 80023c8:	23fe      	movs	r3, #254	; 0xfe
 80023ca:	01db      	lsls	r3, r3, #7
 80023cc:	401a      	ands	r2, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d2:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d116      	bne.n	8002406 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80023d8:	697a      	ldr	r2, [r7, #20]
 80023da:	23f8      	movs	r3, #248	; 0xf8
 80023dc:	039b      	lsls	r3, r3, #14
 80023de:	401a      	ands	r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d10e      	bne.n	8002406 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80023e8:	697a      	ldr	r2, [r7, #20]
 80023ea:	23e0      	movs	r3, #224	; 0xe0
 80023ec:	051b      	lsls	r3, r3, #20
 80023ee:	401a      	ands	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d106      	bne.n	8002406 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	0f5b      	lsrs	r3, r3, #29
 80023fc:	075a      	lsls	r2, r3, #29
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002402:	429a      	cmp	r2, r3
 8002404:	d001      	beq.n	800240a <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e000      	b.n	800240c <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800240a:	2300      	movs	r3, #0
}
 800240c:	0018      	movs	r0, r3
 800240e:	46bd      	mov	sp, r7
 8002410:	b008      	add	sp, #32
 8002412:	bd80      	pop	{r7, pc}
 8002414:	40021000 	.word	0x40021000
 8002418:	40007000 	.word	0x40007000
 800241c:	00001388 	.word	0x00001388
 8002420:	efffffff 	.word	0xefffffff
 8002424:	feffffff 	.word	0xfeffffff
 8002428:	11c1808c 	.word	0x11c1808c
 800242c:	eefefffc 	.word	0xeefefffc

08002430 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d101      	bne.n	8002444 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e0e9      	b.n	8002618 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002444:	4b76      	ldr	r3, [pc, #472]	; (8002620 <HAL_RCC_ClockConfig+0x1f0>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2207      	movs	r2, #7
 800244a:	4013      	ands	r3, r2
 800244c:	683a      	ldr	r2, [r7, #0]
 800244e:	429a      	cmp	r2, r3
 8002450:	d91e      	bls.n	8002490 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002452:	4b73      	ldr	r3, [pc, #460]	; (8002620 <HAL_RCC_ClockConfig+0x1f0>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2207      	movs	r2, #7
 8002458:	4393      	bics	r3, r2
 800245a:	0019      	movs	r1, r3
 800245c:	4b70      	ldr	r3, [pc, #448]	; (8002620 <HAL_RCC_ClockConfig+0x1f0>)
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	430a      	orrs	r2, r1
 8002462:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002464:	f7fe fef6 	bl	8001254 <HAL_GetTick>
 8002468:	0003      	movs	r3, r0
 800246a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800246c:	e009      	b.n	8002482 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800246e:	f7fe fef1 	bl	8001254 <HAL_GetTick>
 8002472:	0002      	movs	r2, r0
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	4a6a      	ldr	r2, [pc, #424]	; (8002624 <HAL_RCC_ClockConfig+0x1f4>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d901      	bls.n	8002482 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e0ca      	b.n	8002618 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002482:	4b67      	ldr	r3, [pc, #412]	; (8002620 <HAL_RCC_ClockConfig+0x1f0>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2207      	movs	r2, #7
 8002488:	4013      	ands	r3, r2
 800248a:	683a      	ldr	r2, [r7, #0]
 800248c:	429a      	cmp	r2, r3
 800248e:	d1ee      	bne.n	800246e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2202      	movs	r2, #2
 8002496:	4013      	ands	r3, r2
 8002498:	d015      	beq.n	80024c6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2204      	movs	r2, #4
 80024a0:	4013      	ands	r3, r2
 80024a2:	d006      	beq.n	80024b2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80024a4:	4b60      	ldr	r3, [pc, #384]	; (8002628 <HAL_RCC_ClockConfig+0x1f8>)
 80024a6:	689a      	ldr	r2, [r3, #8]
 80024a8:	4b5f      	ldr	r3, [pc, #380]	; (8002628 <HAL_RCC_ClockConfig+0x1f8>)
 80024aa:	21e0      	movs	r1, #224	; 0xe0
 80024ac:	01c9      	lsls	r1, r1, #7
 80024ae:	430a      	orrs	r2, r1
 80024b0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024b2:	4b5d      	ldr	r3, [pc, #372]	; (8002628 <HAL_RCC_ClockConfig+0x1f8>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	4a5d      	ldr	r2, [pc, #372]	; (800262c <HAL_RCC_ClockConfig+0x1fc>)
 80024b8:	4013      	ands	r3, r2
 80024ba:	0019      	movs	r1, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689a      	ldr	r2, [r3, #8]
 80024c0:	4b59      	ldr	r3, [pc, #356]	; (8002628 <HAL_RCC_ClockConfig+0x1f8>)
 80024c2:	430a      	orrs	r2, r1
 80024c4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2201      	movs	r2, #1
 80024cc:	4013      	ands	r3, r2
 80024ce:	d057      	beq.n	8002580 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d107      	bne.n	80024e8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024d8:	4b53      	ldr	r3, [pc, #332]	; (8002628 <HAL_RCC_ClockConfig+0x1f8>)
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	2380      	movs	r3, #128	; 0x80
 80024de:	029b      	lsls	r3, r3, #10
 80024e0:	4013      	ands	r3, r2
 80024e2:	d12b      	bne.n	800253c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e097      	b.n	8002618 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d107      	bne.n	8002500 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024f0:	4b4d      	ldr	r3, [pc, #308]	; (8002628 <HAL_RCC_ClockConfig+0x1f8>)
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	2380      	movs	r3, #128	; 0x80
 80024f6:	049b      	lsls	r3, r3, #18
 80024f8:	4013      	ands	r3, r2
 80024fa:	d11f      	bne.n	800253c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e08b      	b.n	8002618 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d107      	bne.n	8002518 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002508:	4b47      	ldr	r3, [pc, #284]	; (8002628 <HAL_RCC_ClockConfig+0x1f8>)
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	2380      	movs	r3, #128	; 0x80
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	4013      	ands	r3, r2
 8002512:	d113      	bne.n	800253c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e07f      	b.n	8002618 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	2b03      	cmp	r3, #3
 800251e:	d106      	bne.n	800252e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002520:	4b41      	ldr	r3, [pc, #260]	; (8002628 <HAL_RCC_ClockConfig+0x1f8>)
 8002522:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002524:	2202      	movs	r2, #2
 8002526:	4013      	ands	r3, r2
 8002528:	d108      	bne.n	800253c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e074      	b.n	8002618 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800252e:	4b3e      	ldr	r3, [pc, #248]	; (8002628 <HAL_RCC_ClockConfig+0x1f8>)
 8002530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002532:	2202      	movs	r2, #2
 8002534:	4013      	ands	r3, r2
 8002536:	d101      	bne.n	800253c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e06d      	b.n	8002618 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800253c:	4b3a      	ldr	r3, [pc, #232]	; (8002628 <HAL_RCC_ClockConfig+0x1f8>)
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	2207      	movs	r2, #7
 8002542:	4393      	bics	r3, r2
 8002544:	0019      	movs	r1, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685a      	ldr	r2, [r3, #4]
 800254a:	4b37      	ldr	r3, [pc, #220]	; (8002628 <HAL_RCC_ClockConfig+0x1f8>)
 800254c:	430a      	orrs	r2, r1
 800254e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002550:	f7fe fe80 	bl	8001254 <HAL_GetTick>
 8002554:	0003      	movs	r3, r0
 8002556:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002558:	e009      	b.n	800256e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800255a:	f7fe fe7b 	bl	8001254 <HAL_GetTick>
 800255e:	0002      	movs	r2, r0
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	4a2f      	ldr	r2, [pc, #188]	; (8002624 <HAL_RCC_ClockConfig+0x1f4>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d901      	bls.n	800256e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e054      	b.n	8002618 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800256e:	4b2e      	ldr	r3, [pc, #184]	; (8002628 <HAL_RCC_ClockConfig+0x1f8>)
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	2238      	movs	r2, #56	; 0x38
 8002574:	401a      	ands	r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	429a      	cmp	r2, r3
 800257e:	d1ec      	bne.n	800255a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002580:	4b27      	ldr	r3, [pc, #156]	; (8002620 <HAL_RCC_ClockConfig+0x1f0>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2207      	movs	r2, #7
 8002586:	4013      	ands	r3, r2
 8002588:	683a      	ldr	r2, [r7, #0]
 800258a:	429a      	cmp	r2, r3
 800258c:	d21e      	bcs.n	80025cc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800258e:	4b24      	ldr	r3, [pc, #144]	; (8002620 <HAL_RCC_ClockConfig+0x1f0>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2207      	movs	r2, #7
 8002594:	4393      	bics	r3, r2
 8002596:	0019      	movs	r1, r3
 8002598:	4b21      	ldr	r3, [pc, #132]	; (8002620 <HAL_RCC_ClockConfig+0x1f0>)
 800259a:	683a      	ldr	r2, [r7, #0]
 800259c:	430a      	orrs	r2, r1
 800259e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80025a0:	f7fe fe58 	bl	8001254 <HAL_GetTick>
 80025a4:	0003      	movs	r3, r0
 80025a6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80025a8:	e009      	b.n	80025be <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025aa:	f7fe fe53 	bl	8001254 <HAL_GetTick>
 80025ae:	0002      	movs	r2, r0
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	4a1b      	ldr	r2, [pc, #108]	; (8002624 <HAL_RCC_ClockConfig+0x1f4>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d901      	bls.n	80025be <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e02c      	b.n	8002618 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80025be:	4b18      	ldr	r3, [pc, #96]	; (8002620 <HAL_RCC_ClockConfig+0x1f0>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2207      	movs	r2, #7
 80025c4:	4013      	ands	r3, r2
 80025c6:	683a      	ldr	r2, [r7, #0]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d1ee      	bne.n	80025aa <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2204      	movs	r2, #4
 80025d2:	4013      	ands	r3, r2
 80025d4:	d009      	beq.n	80025ea <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80025d6:	4b14      	ldr	r3, [pc, #80]	; (8002628 <HAL_RCC_ClockConfig+0x1f8>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	4a15      	ldr	r2, [pc, #84]	; (8002630 <HAL_RCC_ClockConfig+0x200>)
 80025dc:	4013      	ands	r3, r2
 80025de:	0019      	movs	r1, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	68da      	ldr	r2, [r3, #12]
 80025e4:	4b10      	ldr	r3, [pc, #64]	; (8002628 <HAL_RCC_ClockConfig+0x1f8>)
 80025e6:	430a      	orrs	r2, r1
 80025e8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80025ea:	f000 f829 	bl	8002640 <HAL_RCC_GetSysClockFreq>
 80025ee:	0001      	movs	r1, r0
 80025f0:	4b0d      	ldr	r3, [pc, #52]	; (8002628 <HAL_RCC_ClockConfig+0x1f8>)
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	0a1b      	lsrs	r3, r3, #8
 80025f6:	220f      	movs	r2, #15
 80025f8:	401a      	ands	r2, r3
 80025fa:	4b0e      	ldr	r3, [pc, #56]	; (8002634 <HAL_RCC_ClockConfig+0x204>)
 80025fc:	0092      	lsls	r2, r2, #2
 80025fe:	58d3      	ldr	r3, [r2, r3]
 8002600:	221f      	movs	r2, #31
 8002602:	4013      	ands	r3, r2
 8002604:	000a      	movs	r2, r1
 8002606:	40da      	lsrs	r2, r3
 8002608:	4b0b      	ldr	r3, [pc, #44]	; (8002638 <HAL_RCC_ClockConfig+0x208>)
 800260a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800260c:	4b0b      	ldr	r3, [pc, #44]	; (800263c <HAL_RCC_ClockConfig+0x20c>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	0018      	movs	r0, r3
 8002612:	f7fe fdc3 	bl	800119c <HAL_InitTick>
 8002616:	0003      	movs	r3, r0
}
 8002618:	0018      	movs	r0, r3
 800261a:	46bd      	mov	sp, r7
 800261c:	b004      	add	sp, #16
 800261e:	bd80      	pop	{r7, pc}
 8002620:	40022000 	.word	0x40022000
 8002624:	00001388 	.word	0x00001388
 8002628:	40021000 	.word	0x40021000
 800262c:	fffff0ff 	.word	0xfffff0ff
 8002630:	ffff8fff 	.word	0xffff8fff
 8002634:	08006138 	.word	0x08006138
 8002638:	20000064 	.word	0x20000064
 800263c:	20000068 	.word	0x20000068

08002640 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002646:	4b3c      	ldr	r3, [pc, #240]	; (8002738 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	2238      	movs	r2, #56	; 0x38
 800264c:	4013      	ands	r3, r2
 800264e:	d10f      	bne.n	8002670 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002650:	4b39      	ldr	r3, [pc, #228]	; (8002738 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	0adb      	lsrs	r3, r3, #11
 8002656:	2207      	movs	r2, #7
 8002658:	4013      	ands	r3, r2
 800265a:	2201      	movs	r2, #1
 800265c:	409a      	lsls	r2, r3
 800265e:	0013      	movs	r3, r2
 8002660:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002662:	6839      	ldr	r1, [r7, #0]
 8002664:	4835      	ldr	r0, [pc, #212]	; (800273c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002666:	f7fd fd5f 	bl	8000128 <__udivsi3>
 800266a:	0003      	movs	r3, r0
 800266c:	613b      	str	r3, [r7, #16]
 800266e:	e05d      	b.n	800272c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002670:	4b31      	ldr	r3, [pc, #196]	; (8002738 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	2238      	movs	r2, #56	; 0x38
 8002676:	4013      	ands	r3, r2
 8002678:	2b08      	cmp	r3, #8
 800267a:	d102      	bne.n	8002682 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800267c:	4b30      	ldr	r3, [pc, #192]	; (8002740 <HAL_RCC_GetSysClockFreq+0x100>)
 800267e:	613b      	str	r3, [r7, #16]
 8002680:	e054      	b.n	800272c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002682:	4b2d      	ldr	r3, [pc, #180]	; (8002738 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	2238      	movs	r2, #56	; 0x38
 8002688:	4013      	ands	r3, r2
 800268a:	2b10      	cmp	r3, #16
 800268c:	d138      	bne.n	8002700 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800268e:	4b2a      	ldr	r3, [pc, #168]	; (8002738 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	2203      	movs	r2, #3
 8002694:	4013      	ands	r3, r2
 8002696:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002698:	4b27      	ldr	r3, [pc, #156]	; (8002738 <HAL_RCC_GetSysClockFreq+0xf8>)
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	091b      	lsrs	r3, r3, #4
 800269e:	2207      	movs	r2, #7
 80026a0:	4013      	ands	r3, r2
 80026a2:	3301      	adds	r3, #1
 80026a4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2b03      	cmp	r3, #3
 80026aa:	d10d      	bne.n	80026c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026ac:	68b9      	ldr	r1, [r7, #8]
 80026ae:	4824      	ldr	r0, [pc, #144]	; (8002740 <HAL_RCC_GetSysClockFreq+0x100>)
 80026b0:	f7fd fd3a 	bl	8000128 <__udivsi3>
 80026b4:	0003      	movs	r3, r0
 80026b6:	0019      	movs	r1, r3
 80026b8:	4b1f      	ldr	r3, [pc, #124]	; (8002738 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	0a1b      	lsrs	r3, r3, #8
 80026be:	227f      	movs	r2, #127	; 0x7f
 80026c0:	4013      	ands	r3, r2
 80026c2:	434b      	muls	r3, r1
 80026c4:	617b      	str	r3, [r7, #20]
        break;
 80026c6:	e00d      	b.n	80026e4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80026c8:	68b9      	ldr	r1, [r7, #8]
 80026ca:	481c      	ldr	r0, [pc, #112]	; (800273c <HAL_RCC_GetSysClockFreq+0xfc>)
 80026cc:	f7fd fd2c 	bl	8000128 <__udivsi3>
 80026d0:	0003      	movs	r3, r0
 80026d2:	0019      	movs	r1, r3
 80026d4:	4b18      	ldr	r3, [pc, #96]	; (8002738 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	0a1b      	lsrs	r3, r3, #8
 80026da:	227f      	movs	r2, #127	; 0x7f
 80026dc:	4013      	ands	r3, r2
 80026de:	434b      	muls	r3, r1
 80026e0:	617b      	str	r3, [r7, #20]
        break;
 80026e2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80026e4:	4b14      	ldr	r3, [pc, #80]	; (8002738 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	0f5b      	lsrs	r3, r3, #29
 80026ea:	2207      	movs	r2, #7
 80026ec:	4013      	ands	r3, r2
 80026ee:	3301      	adds	r3, #1
 80026f0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80026f2:	6879      	ldr	r1, [r7, #4]
 80026f4:	6978      	ldr	r0, [r7, #20]
 80026f6:	f7fd fd17 	bl	8000128 <__udivsi3>
 80026fa:	0003      	movs	r3, r0
 80026fc:	613b      	str	r3, [r7, #16]
 80026fe:	e015      	b.n	800272c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002700:	4b0d      	ldr	r3, [pc, #52]	; (8002738 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	2238      	movs	r2, #56	; 0x38
 8002706:	4013      	ands	r3, r2
 8002708:	2b20      	cmp	r3, #32
 800270a:	d103      	bne.n	8002714 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800270c:	2380      	movs	r3, #128	; 0x80
 800270e:	021b      	lsls	r3, r3, #8
 8002710:	613b      	str	r3, [r7, #16]
 8002712:	e00b      	b.n	800272c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002714:	4b08      	ldr	r3, [pc, #32]	; (8002738 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	2238      	movs	r2, #56	; 0x38
 800271a:	4013      	ands	r3, r2
 800271c:	2b18      	cmp	r3, #24
 800271e:	d103      	bne.n	8002728 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002720:	23fa      	movs	r3, #250	; 0xfa
 8002722:	01db      	lsls	r3, r3, #7
 8002724:	613b      	str	r3, [r7, #16]
 8002726:	e001      	b.n	800272c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002728:	2300      	movs	r3, #0
 800272a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800272c:	693b      	ldr	r3, [r7, #16]
}
 800272e:	0018      	movs	r0, r3
 8002730:	46bd      	mov	sp, r7
 8002732:	b006      	add	sp, #24
 8002734:	bd80      	pop	{r7, pc}
 8002736:	46c0      	nop			; (mov r8, r8)
 8002738:	40021000 	.word	0x40021000
 800273c:	00f42400 	.word	0x00f42400
 8002740:	007a1200 	.word	0x007a1200

08002744 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002748:	4b02      	ldr	r3, [pc, #8]	; (8002754 <HAL_RCC_GetHCLKFreq+0x10>)
 800274a:	681b      	ldr	r3, [r3, #0]
}
 800274c:	0018      	movs	r0, r3
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	46c0      	nop			; (mov r8, r8)
 8002754:	20000064 	.word	0x20000064

08002758 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002758:	b5b0      	push	{r4, r5, r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800275c:	f7ff fff2 	bl	8002744 <HAL_RCC_GetHCLKFreq>
 8002760:	0004      	movs	r4, r0
 8002762:	f7ff fb3f 	bl	8001de4 <LL_RCC_GetAPB1Prescaler>
 8002766:	0003      	movs	r3, r0
 8002768:	0b1a      	lsrs	r2, r3, #12
 800276a:	4b05      	ldr	r3, [pc, #20]	; (8002780 <HAL_RCC_GetPCLK1Freq+0x28>)
 800276c:	0092      	lsls	r2, r2, #2
 800276e:	58d3      	ldr	r3, [r2, r3]
 8002770:	221f      	movs	r2, #31
 8002772:	4013      	ands	r3, r2
 8002774:	40dc      	lsrs	r4, r3
 8002776:	0023      	movs	r3, r4
}
 8002778:	0018      	movs	r0, r3
 800277a:	46bd      	mov	sp, r7
 800277c:	bdb0      	pop	{r4, r5, r7, pc}
 800277e:	46c0      	nop			; (mov r8, r8)
 8002780:	08006178 	.word	0x08006178

08002784 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800278c:	2313      	movs	r3, #19
 800278e:	18fb      	adds	r3, r7, r3
 8002790:	2200      	movs	r2, #0
 8002792:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002794:	2312      	movs	r3, #18
 8002796:	18fb      	adds	r3, r7, r3
 8002798:	2200      	movs	r2, #0
 800279a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	2380      	movs	r3, #128	; 0x80
 80027a2:	029b      	lsls	r3, r3, #10
 80027a4:	4013      	ands	r3, r2
 80027a6:	d100      	bne.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x26>
 80027a8:	e0a3      	b.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027aa:	2011      	movs	r0, #17
 80027ac:	183b      	adds	r3, r7, r0
 80027ae:	2200      	movs	r2, #0
 80027b0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027b2:	4ba5      	ldr	r3, [pc, #660]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80027b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027b6:	2380      	movs	r3, #128	; 0x80
 80027b8:	055b      	lsls	r3, r3, #21
 80027ba:	4013      	ands	r3, r2
 80027bc:	d110      	bne.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027be:	4ba2      	ldr	r3, [pc, #648]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80027c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027c2:	4ba1      	ldr	r3, [pc, #644]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80027c4:	2180      	movs	r1, #128	; 0x80
 80027c6:	0549      	lsls	r1, r1, #21
 80027c8:	430a      	orrs	r2, r1
 80027ca:	63da      	str	r2, [r3, #60]	; 0x3c
 80027cc:	4b9e      	ldr	r3, [pc, #632]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80027ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027d0:	2380      	movs	r3, #128	; 0x80
 80027d2:	055b      	lsls	r3, r3, #21
 80027d4:	4013      	ands	r3, r2
 80027d6:	60bb      	str	r3, [r7, #8]
 80027d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027da:	183b      	adds	r3, r7, r0
 80027dc:	2201      	movs	r2, #1
 80027de:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027e0:	4b9a      	ldr	r3, [pc, #616]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	4b99      	ldr	r3, [pc, #612]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80027e6:	2180      	movs	r1, #128	; 0x80
 80027e8:	0049      	lsls	r1, r1, #1
 80027ea:	430a      	orrs	r2, r1
 80027ec:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027ee:	f7fe fd31 	bl	8001254 <HAL_GetTick>
 80027f2:	0003      	movs	r3, r0
 80027f4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027f6:	e00b      	b.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027f8:	f7fe fd2c 	bl	8001254 <HAL_GetTick>
 80027fc:	0002      	movs	r2, r0
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b02      	cmp	r3, #2
 8002804:	d904      	bls.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002806:	2313      	movs	r3, #19
 8002808:	18fb      	adds	r3, r7, r3
 800280a:	2203      	movs	r2, #3
 800280c:	701a      	strb	r2, [r3, #0]
        break;
 800280e:	e005      	b.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002810:	4b8e      	ldr	r3, [pc, #568]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	2380      	movs	r3, #128	; 0x80
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	4013      	ands	r3, r2
 800281a:	d0ed      	beq.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800281c:	2313      	movs	r3, #19
 800281e:	18fb      	adds	r3, r7, r3
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d154      	bne.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002826:	4b88      	ldr	r3, [pc, #544]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002828:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800282a:	23c0      	movs	r3, #192	; 0xc0
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	4013      	ands	r3, r2
 8002830:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d019      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283c:	697a      	ldr	r2, [r7, #20]
 800283e:	429a      	cmp	r2, r3
 8002840:	d014      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002842:	4b81      	ldr	r3, [pc, #516]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002844:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002846:	4a82      	ldr	r2, [pc, #520]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002848:	4013      	ands	r3, r2
 800284a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800284c:	4b7e      	ldr	r3, [pc, #504]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800284e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002850:	4b7d      	ldr	r3, [pc, #500]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002852:	2180      	movs	r1, #128	; 0x80
 8002854:	0249      	lsls	r1, r1, #9
 8002856:	430a      	orrs	r2, r1
 8002858:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800285a:	4b7b      	ldr	r3, [pc, #492]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800285c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800285e:	4b7a      	ldr	r3, [pc, #488]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002860:	497c      	ldr	r1, [pc, #496]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8002862:	400a      	ands	r2, r1
 8002864:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002866:	4b78      	ldr	r3, [pc, #480]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002868:	697a      	ldr	r2, [r7, #20]
 800286a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	2201      	movs	r2, #1
 8002870:	4013      	ands	r3, r2
 8002872:	d016      	beq.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002874:	f7fe fcee 	bl	8001254 <HAL_GetTick>
 8002878:	0003      	movs	r3, r0
 800287a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800287c:	e00c      	b.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800287e:	f7fe fce9 	bl	8001254 <HAL_GetTick>
 8002882:	0002      	movs	r2, r0
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	4a73      	ldr	r2, [pc, #460]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d904      	bls.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800288e:	2313      	movs	r3, #19
 8002890:	18fb      	adds	r3, r7, r3
 8002892:	2203      	movs	r2, #3
 8002894:	701a      	strb	r2, [r3, #0]
            break;
 8002896:	e004      	b.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002898:	4b6b      	ldr	r3, [pc, #428]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800289a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800289c:	2202      	movs	r2, #2
 800289e:	4013      	ands	r3, r2
 80028a0:	d0ed      	beq.n	800287e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80028a2:	2313      	movs	r3, #19
 80028a4:	18fb      	adds	r3, r7, r3
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d10a      	bne.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028ac:	4b66      	ldr	r3, [pc, #408]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80028ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b0:	4a67      	ldr	r2, [pc, #412]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80028b2:	4013      	ands	r3, r2
 80028b4:	0019      	movs	r1, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028ba:	4b63      	ldr	r3, [pc, #396]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80028bc:	430a      	orrs	r2, r1
 80028be:	65da      	str	r2, [r3, #92]	; 0x5c
 80028c0:	e00c      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80028c2:	2312      	movs	r3, #18
 80028c4:	18fb      	adds	r3, r7, r3
 80028c6:	2213      	movs	r2, #19
 80028c8:	18ba      	adds	r2, r7, r2
 80028ca:	7812      	ldrb	r2, [r2, #0]
 80028cc:	701a      	strb	r2, [r3, #0]
 80028ce:	e005      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028d0:	2312      	movs	r3, #18
 80028d2:	18fb      	adds	r3, r7, r3
 80028d4:	2213      	movs	r2, #19
 80028d6:	18ba      	adds	r2, r7, r2
 80028d8:	7812      	ldrb	r2, [r2, #0]
 80028da:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80028dc:	2311      	movs	r3, #17
 80028de:	18fb      	adds	r3, r7, r3
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d105      	bne.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028e6:	4b58      	ldr	r3, [pc, #352]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80028e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028ea:	4b57      	ldr	r3, [pc, #348]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80028ec:	495b      	ldr	r1, [pc, #364]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80028ee:	400a      	ands	r2, r1
 80028f0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2201      	movs	r2, #1
 80028f8:	4013      	ands	r3, r2
 80028fa:	d009      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028fc:	4b52      	ldr	r3, [pc, #328]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80028fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002900:	2203      	movs	r2, #3
 8002902:	4393      	bics	r3, r2
 8002904:	0019      	movs	r1, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685a      	ldr	r2, [r3, #4]
 800290a:	4b4f      	ldr	r3, [pc, #316]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800290c:	430a      	orrs	r2, r1
 800290e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2210      	movs	r2, #16
 8002916:	4013      	ands	r3, r2
 8002918:	d009      	beq.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800291a:	4b4b      	ldr	r3, [pc, #300]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800291c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800291e:	4a50      	ldr	r2, [pc, #320]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8002920:	4013      	ands	r3, r2
 8002922:	0019      	movs	r1, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689a      	ldr	r2, [r3, #8]
 8002928:	4b47      	ldr	r3, [pc, #284]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800292a:	430a      	orrs	r2, r1
 800292c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	2380      	movs	r3, #128	; 0x80
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	4013      	ands	r3, r2
 8002938:	d009      	beq.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800293a:	4b43      	ldr	r3, [pc, #268]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800293c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800293e:	4a49      	ldr	r2, [pc, #292]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002940:	4013      	ands	r3, r2
 8002942:	0019      	movs	r1, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	695a      	ldr	r2, [r3, #20]
 8002948:	4b3f      	ldr	r3, [pc, #252]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800294a:	430a      	orrs	r2, r1
 800294c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	2380      	movs	r3, #128	; 0x80
 8002954:	00db      	lsls	r3, r3, #3
 8002956:	4013      	ands	r3, r2
 8002958:	d009      	beq.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800295a:	4b3b      	ldr	r3, [pc, #236]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800295c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800295e:	4a42      	ldr	r2, [pc, #264]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002960:	4013      	ands	r3, r2
 8002962:	0019      	movs	r1, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	699a      	ldr	r2, [r3, #24]
 8002968:	4b37      	ldr	r3, [pc, #220]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800296a:	430a      	orrs	r2, r1
 800296c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2220      	movs	r2, #32
 8002974:	4013      	ands	r3, r2
 8002976:	d009      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002978:	4b33      	ldr	r3, [pc, #204]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800297a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800297c:	4a3b      	ldr	r2, [pc, #236]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800297e:	4013      	ands	r3, r2
 8002980:	0019      	movs	r1, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	68da      	ldr	r2, [r3, #12]
 8002986:	4b30      	ldr	r3, [pc, #192]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002988:	430a      	orrs	r2, r1
 800298a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	2380      	movs	r3, #128	; 0x80
 8002992:	01db      	lsls	r3, r3, #7
 8002994:	4013      	ands	r3, r2
 8002996:	d015      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002998:	4b2b      	ldr	r3, [pc, #172]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800299a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	0899      	lsrs	r1, r3, #2
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	69da      	ldr	r2, [r3, #28]
 80029a4:	4b28      	ldr	r3, [pc, #160]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80029a6:	430a      	orrs	r2, r1
 80029a8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	69da      	ldr	r2, [r3, #28]
 80029ae:	2380      	movs	r3, #128	; 0x80
 80029b0:	05db      	lsls	r3, r3, #23
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d106      	bne.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80029b6:	4b24      	ldr	r3, [pc, #144]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80029b8:	68da      	ldr	r2, [r3, #12]
 80029ba:	4b23      	ldr	r3, [pc, #140]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80029bc:	2180      	movs	r1, #128	; 0x80
 80029be:	0249      	lsls	r1, r1, #9
 80029c0:	430a      	orrs	r2, r1
 80029c2:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	2380      	movs	r3, #128	; 0x80
 80029ca:	039b      	lsls	r3, r3, #14
 80029cc:	4013      	ands	r3, r2
 80029ce:	d016      	beq.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80029d0:	4b1d      	ldr	r3, [pc, #116]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80029d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029d4:	4a26      	ldr	r2, [pc, #152]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80029d6:	4013      	ands	r3, r2
 80029d8:	0019      	movs	r1, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a1a      	ldr	r2, [r3, #32]
 80029de:	4b1a      	ldr	r3, [pc, #104]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80029e0:	430a      	orrs	r2, r1
 80029e2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a1a      	ldr	r2, [r3, #32]
 80029e8:	2380      	movs	r3, #128	; 0x80
 80029ea:	03db      	lsls	r3, r3, #15
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d106      	bne.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80029f0:	4b15      	ldr	r3, [pc, #84]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80029f2:	68da      	ldr	r2, [r3, #12]
 80029f4:	4b14      	ldr	r3, [pc, #80]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80029f6:	2180      	movs	r1, #128	; 0x80
 80029f8:	0449      	lsls	r1, r1, #17
 80029fa:	430a      	orrs	r2, r1
 80029fc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	2380      	movs	r3, #128	; 0x80
 8002a04:	011b      	lsls	r3, r3, #4
 8002a06:	4013      	ands	r3, r2
 8002a08:	d016      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002a0a:	4b0f      	ldr	r3, [pc, #60]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a0e:	4a19      	ldr	r2, [pc, #100]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002a10:	4013      	ands	r3, r2
 8002a12:	0019      	movs	r1, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	691a      	ldr	r2, [r3, #16]
 8002a18:	4b0b      	ldr	r3, [pc, #44]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	691a      	ldr	r2, [r3, #16]
 8002a22:	2380      	movs	r3, #128	; 0x80
 8002a24:	01db      	lsls	r3, r3, #7
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d106      	bne.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002a2a:	4b07      	ldr	r3, [pc, #28]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a2c:	68da      	ldr	r2, [r3, #12]
 8002a2e:	4b06      	ldr	r3, [pc, #24]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a30:	2180      	movs	r1, #128	; 0x80
 8002a32:	0249      	lsls	r1, r1, #9
 8002a34:	430a      	orrs	r2, r1
 8002a36:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002a38:	2312      	movs	r3, #18
 8002a3a:	18fb      	adds	r3, r7, r3
 8002a3c:	781b      	ldrb	r3, [r3, #0]
}
 8002a3e:	0018      	movs	r0, r3
 8002a40:	46bd      	mov	sp, r7
 8002a42:	b006      	add	sp, #24
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	46c0      	nop			; (mov r8, r8)
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	40007000 	.word	0x40007000
 8002a50:	fffffcff 	.word	0xfffffcff
 8002a54:	fffeffff 	.word	0xfffeffff
 8002a58:	00001388 	.word	0x00001388
 8002a5c:	efffffff 	.word	0xefffffff
 8002a60:	fffff3ff 	.word	0xfffff3ff
 8002a64:	fff3ffff 	.word	0xfff3ffff
 8002a68:	ffcfffff 	.word	0xffcfffff
 8002a6c:	ffffcfff 	.word	0xffffcfff
 8002a70:	ffbfffff 	.word	0xffbfffff
 8002a74:	ffff3fff 	.word	0xffff3fff

08002a78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d101      	bne.n	8002a8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e04a      	b.n	8002b20 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	223d      	movs	r2, #61	; 0x3d
 8002a8e:	5c9b      	ldrb	r3, [r3, r2]
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d107      	bne.n	8002aa6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	223c      	movs	r2, #60	; 0x3c
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	f7fe f971 	bl	8000d88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	223d      	movs	r2, #61	; 0x3d
 8002aaa:	2102      	movs	r1, #2
 8002aac:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	3304      	adds	r3, #4
 8002ab6:	0019      	movs	r1, r3
 8002ab8:	0010      	movs	r0, r2
 8002aba:	f000 fa09 	bl	8002ed0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2248      	movs	r2, #72	; 0x48
 8002ac2:	2101      	movs	r1, #1
 8002ac4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	223e      	movs	r2, #62	; 0x3e
 8002aca:	2101      	movs	r1, #1
 8002acc:	5499      	strb	r1, [r3, r2]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	223f      	movs	r2, #63	; 0x3f
 8002ad2:	2101      	movs	r1, #1
 8002ad4:	5499      	strb	r1, [r3, r2]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2240      	movs	r2, #64	; 0x40
 8002ada:	2101      	movs	r1, #1
 8002adc:	5499      	strb	r1, [r3, r2]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2241      	movs	r2, #65	; 0x41
 8002ae2:	2101      	movs	r1, #1
 8002ae4:	5499      	strb	r1, [r3, r2]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2242      	movs	r2, #66	; 0x42
 8002aea:	2101      	movs	r1, #1
 8002aec:	5499      	strb	r1, [r3, r2]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2243      	movs	r2, #67	; 0x43
 8002af2:	2101      	movs	r1, #1
 8002af4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2244      	movs	r2, #68	; 0x44
 8002afa:	2101      	movs	r1, #1
 8002afc:	5499      	strb	r1, [r3, r2]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2245      	movs	r2, #69	; 0x45
 8002b02:	2101      	movs	r1, #1
 8002b04:	5499      	strb	r1, [r3, r2]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2246      	movs	r2, #70	; 0x46
 8002b0a:	2101      	movs	r1, #1
 8002b0c:	5499      	strb	r1, [r3, r2]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2247      	movs	r2, #71	; 0x47
 8002b12:	2101      	movs	r1, #1
 8002b14:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	223d      	movs	r2, #61	; 0x3d
 8002b1a:	2101      	movs	r1, #1
 8002b1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	0018      	movs	r0, r3
 8002b22:	46bd      	mov	sp, r7
 8002b24:	b002      	add	sp, #8
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	223d      	movs	r2, #61	; 0x3d
 8002b34:	5c9b      	ldrb	r3, [r3, r2]
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d001      	beq.n	8002b40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e03d      	b.n	8002bbc <HAL_TIM_Base_Start_IT+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	223d      	movs	r2, #61	; 0x3d
 8002b44:	2102      	movs	r1, #2
 8002b46:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68da      	ldr	r2, [r3, #12]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2101      	movs	r1, #1
 8002b54:	430a      	orrs	r2, r1
 8002b56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a19      	ldr	r2, [pc, #100]	; (8002bc4 <HAL_TIM_Base_Start_IT+0x9c>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d00a      	beq.n	8002b78 <HAL_TIM_Base_Start_IT+0x50>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	2380      	movs	r3, #128	; 0x80
 8002b68:	05db      	lsls	r3, r3, #23
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d004      	beq.n	8002b78 <HAL_TIM_Base_Start_IT+0x50>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a15      	ldr	r2, [pc, #84]	; (8002bc8 <HAL_TIM_Base_Start_IT+0xa0>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d116      	bne.n	8002ba6 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	4a13      	ldr	r2, [pc, #76]	; (8002bcc <HAL_TIM_Base_Start_IT+0xa4>)
 8002b80:	4013      	ands	r3, r2
 8002b82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2b06      	cmp	r3, #6
 8002b88:	d016      	beq.n	8002bb8 <HAL_TIM_Base_Start_IT+0x90>
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	2380      	movs	r3, #128	; 0x80
 8002b8e:	025b      	lsls	r3, r3, #9
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d011      	beq.n	8002bb8 <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2101      	movs	r1, #1
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ba4:	e008      	b.n	8002bb8 <HAL_TIM_Base_Start_IT+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2101      	movs	r1, #1
 8002bb2:	430a      	orrs	r2, r1
 8002bb4:	601a      	str	r2, [r3, #0]
 8002bb6:	e000      	b.n	8002bba <HAL_TIM_Base_Start_IT+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bb8:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	0018      	movs	r0, r3
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	b004      	add	sp, #16
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	40012c00 	.word	0x40012c00
 8002bc8:	40000400 	.word	0x40000400
 8002bcc:	00010007 	.word	0x00010007

08002bd0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68da      	ldr	r2, [r3, #12]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2101      	movs	r1, #1
 8002be4:	438a      	bics	r2, r1
 8002be6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	6a1b      	ldr	r3, [r3, #32]
 8002bee:	4a0d      	ldr	r2, [pc, #52]	; (8002c24 <HAL_TIM_Base_Stop_IT+0x54>)
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	d10d      	bne.n	8002c10 <HAL_TIM_Base_Stop_IT+0x40>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	6a1b      	ldr	r3, [r3, #32]
 8002bfa:	4a0b      	ldr	r2, [pc, #44]	; (8002c28 <HAL_TIM_Base_Stop_IT+0x58>)
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	d107      	bne.n	8002c10 <HAL_TIM_Base_Stop_IT+0x40>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2101      	movs	r1, #1
 8002c0c:	438a      	bics	r2, r1
 8002c0e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	223d      	movs	r2, #61	; 0x3d
 8002c14:	2101      	movs	r1, #1
 8002c16:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	0018      	movs	r0, r3
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	b002      	add	sp, #8
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	46c0      	nop			; (mov r8, r8)
 8002c24:	00001111 	.word	0x00001111
 8002c28:	00000444 	.word	0x00000444

08002c2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d124      	bne.n	8002c8c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	2202      	movs	r2, #2
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d11d      	bne.n	8002c8c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2203      	movs	r2, #3
 8002c56:	4252      	negs	r2, r2
 8002c58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	2203      	movs	r2, #3
 8002c68:	4013      	ands	r3, r2
 8002c6a:	d004      	beq.n	8002c76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	0018      	movs	r0, r3
 8002c70:	f000 f916 	bl	8002ea0 <HAL_TIM_IC_CaptureCallback>
 8002c74:	e007      	b.n	8002c86 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	0018      	movs	r0, r3
 8002c7a:	f000 f909 	bl	8002e90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	0018      	movs	r0, r3
 8002c82:	f000 f915 	bl	8002eb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	2204      	movs	r2, #4
 8002c94:	4013      	ands	r3, r2
 8002c96:	2b04      	cmp	r3, #4
 8002c98:	d125      	bne.n	8002ce6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	2204      	movs	r2, #4
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	2b04      	cmp	r3, #4
 8002ca6:	d11e      	bne.n	8002ce6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2205      	movs	r2, #5
 8002cae:	4252      	negs	r2, r2
 8002cb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2202      	movs	r2, #2
 8002cb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	699a      	ldr	r2, [r3, #24]
 8002cbe:	23c0      	movs	r3, #192	; 0xc0
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	d004      	beq.n	8002cd0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	0018      	movs	r0, r3
 8002cca:	f000 f8e9 	bl	8002ea0 <HAL_TIM_IC_CaptureCallback>
 8002cce:	e007      	b.n	8002ce0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	0018      	movs	r0, r3
 8002cd4:	f000 f8dc 	bl	8002e90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	0018      	movs	r0, r3
 8002cdc:	f000 f8e8 	bl	8002eb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	2208      	movs	r2, #8
 8002cee:	4013      	ands	r3, r2
 8002cf0:	2b08      	cmp	r3, #8
 8002cf2:	d124      	bne.n	8002d3e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	2208      	movs	r2, #8
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	2b08      	cmp	r3, #8
 8002d00:	d11d      	bne.n	8002d3e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2209      	movs	r2, #9
 8002d08:	4252      	negs	r2, r2
 8002d0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2204      	movs	r2, #4
 8002d10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	69db      	ldr	r3, [r3, #28]
 8002d18:	2203      	movs	r2, #3
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	d004      	beq.n	8002d28 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	0018      	movs	r0, r3
 8002d22:	f000 f8bd 	bl	8002ea0 <HAL_TIM_IC_CaptureCallback>
 8002d26:	e007      	b.n	8002d38 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	0018      	movs	r0, r3
 8002d2c:	f000 f8b0 	bl	8002e90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	0018      	movs	r0, r3
 8002d34:	f000 f8bc 	bl	8002eb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	2210      	movs	r2, #16
 8002d46:	4013      	ands	r3, r2
 8002d48:	2b10      	cmp	r3, #16
 8002d4a:	d125      	bne.n	8002d98 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	2210      	movs	r2, #16
 8002d54:	4013      	ands	r3, r2
 8002d56:	2b10      	cmp	r3, #16
 8002d58:	d11e      	bne.n	8002d98 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2211      	movs	r2, #17
 8002d60:	4252      	negs	r2, r2
 8002d62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2208      	movs	r2, #8
 8002d68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	69da      	ldr	r2, [r3, #28]
 8002d70:	23c0      	movs	r3, #192	; 0xc0
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	4013      	ands	r3, r2
 8002d76:	d004      	beq.n	8002d82 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	0018      	movs	r0, r3
 8002d7c:	f000 f890 	bl	8002ea0 <HAL_TIM_IC_CaptureCallback>
 8002d80:	e007      	b.n	8002d92 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	0018      	movs	r0, r3
 8002d86:	f000 f883 	bl	8002e90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	0018      	movs	r0, r3
 8002d8e:	f000 f88f 	bl	8002eb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	4013      	ands	r3, r2
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d10f      	bne.n	8002dc6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	2201      	movs	r2, #1
 8002dae:	4013      	ands	r3, r2
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d108      	bne.n	8002dc6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2202      	movs	r2, #2
 8002dba:	4252      	negs	r2, r2
 8002dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	0018      	movs	r0, r3
 8002dc2:	f7fd ff9d 	bl	8000d00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	691b      	ldr	r3, [r3, #16]
 8002dcc:	2280      	movs	r2, #128	; 0x80
 8002dce:	4013      	ands	r3, r2
 8002dd0:	2b80      	cmp	r3, #128	; 0x80
 8002dd2:	d10f      	bne.n	8002df4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	2280      	movs	r2, #128	; 0x80
 8002ddc:	4013      	ands	r3, r2
 8002dde:	2b80      	cmp	r3, #128	; 0x80
 8002de0:	d108      	bne.n	8002df4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2281      	movs	r2, #129	; 0x81
 8002de8:	4252      	negs	r2, r2
 8002dea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	0018      	movs	r0, r3
 8002df0:	f000 f8ec 	bl	8002fcc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	691a      	ldr	r2, [r3, #16]
 8002dfa:	2380      	movs	r3, #128	; 0x80
 8002dfc:	005b      	lsls	r3, r3, #1
 8002dfe:	401a      	ands	r2, r3
 8002e00:	2380      	movs	r3, #128	; 0x80
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d10e      	bne.n	8002e26 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	2280      	movs	r2, #128	; 0x80
 8002e10:	4013      	ands	r3, r2
 8002e12:	2b80      	cmp	r3, #128	; 0x80
 8002e14:	d107      	bne.n	8002e26 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a1c      	ldr	r2, [pc, #112]	; (8002e8c <HAL_TIM_IRQHandler+0x260>)
 8002e1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	0018      	movs	r0, r3
 8002e22:	f000 f8db 	bl	8002fdc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	691b      	ldr	r3, [r3, #16]
 8002e2c:	2240      	movs	r2, #64	; 0x40
 8002e2e:	4013      	ands	r3, r2
 8002e30:	2b40      	cmp	r3, #64	; 0x40
 8002e32:	d10f      	bne.n	8002e54 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	2240      	movs	r2, #64	; 0x40
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	2b40      	cmp	r3, #64	; 0x40
 8002e40:	d108      	bne.n	8002e54 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2241      	movs	r2, #65	; 0x41
 8002e48:	4252      	negs	r2, r2
 8002e4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	0018      	movs	r0, r3
 8002e50:	f000 f836 	bl	8002ec0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	2220      	movs	r2, #32
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	2b20      	cmp	r3, #32
 8002e60:	d10f      	bne.n	8002e82 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	2220      	movs	r2, #32
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	2b20      	cmp	r3, #32
 8002e6e:	d108      	bne.n	8002e82 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2221      	movs	r2, #33	; 0x21
 8002e76:	4252      	negs	r2, r2
 8002e78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	0018      	movs	r0, r3
 8002e7e:	f000 f89d 	bl	8002fbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e82:	46c0      	nop			; (mov r8, r8)
 8002e84:	46bd      	mov	sp, r7
 8002e86:	b002      	add	sp, #8
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	46c0      	nop			; (mov r8, r8)
 8002e8c:	fffffeff 	.word	0xfffffeff

08002e90 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e98:	46c0      	nop			; (mov r8, r8)
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	b002      	add	sp, #8
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ea8:	46c0      	nop			; (mov r8, r8)
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	b002      	add	sp, #8
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002eb8:	46c0      	nop			; (mov r8, r8)
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	b002      	add	sp, #8
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ec8:	46c0      	nop			; (mov r8, r8)
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	b002      	add	sp, #8
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4a30      	ldr	r2, [pc, #192]	; (8002fa4 <TIM_Base_SetConfig+0xd4>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d008      	beq.n	8002efa <TIM_Base_SetConfig+0x2a>
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	2380      	movs	r3, #128	; 0x80
 8002eec:	05db      	lsls	r3, r3, #23
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d003      	beq.n	8002efa <TIM_Base_SetConfig+0x2a>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a2c      	ldr	r2, [pc, #176]	; (8002fa8 <TIM_Base_SetConfig+0xd8>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d108      	bne.n	8002f0c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2270      	movs	r2, #112	; 0x70
 8002efe:	4393      	bics	r3, r2
 8002f00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4a25      	ldr	r2, [pc, #148]	; (8002fa4 <TIM_Base_SetConfig+0xd4>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d014      	beq.n	8002f3e <TIM_Base_SetConfig+0x6e>
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	2380      	movs	r3, #128	; 0x80
 8002f18:	05db      	lsls	r3, r3, #23
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d00f      	beq.n	8002f3e <TIM_Base_SetConfig+0x6e>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a21      	ldr	r2, [pc, #132]	; (8002fa8 <TIM_Base_SetConfig+0xd8>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d00b      	beq.n	8002f3e <TIM_Base_SetConfig+0x6e>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a20      	ldr	r2, [pc, #128]	; (8002fac <TIM_Base_SetConfig+0xdc>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d007      	beq.n	8002f3e <TIM_Base_SetConfig+0x6e>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a1f      	ldr	r2, [pc, #124]	; (8002fb0 <TIM_Base_SetConfig+0xe0>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d003      	beq.n	8002f3e <TIM_Base_SetConfig+0x6e>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a1e      	ldr	r2, [pc, #120]	; (8002fb4 <TIM_Base_SetConfig+0xe4>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d108      	bne.n	8002f50 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	4a1d      	ldr	r2, [pc, #116]	; (8002fb8 <TIM_Base_SetConfig+0xe8>)
 8002f42:	4013      	ands	r3, r2
 8002f44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2280      	movs	r2, #128	; 0x80
 8002f54:	4393      	bics	r3, r2
 8002f56:	001a      	movs	r2, r3
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	695b      	ldr	r3, [r3, #20]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	68fa      	ldr	r2, [r7, #12]
 8002f64:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	689a      	ldr	r2, [r3, #8]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a0a      	ldr	r2, [pc, #40]	; (8002fa4 <TIM_Base_SetConfig+0xd4>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d007      	beq.n	8002f8e <TIM_Base_SetConfig+0xbe>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a0b      	ldr	r2, [pc, #44]	; (8002fb0 <TIM_Base_SetConfig+0xe0>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d003      	beq.n	8002f8e <TIM_Base_SetConfig+0xbe>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a0a      	ldr	r2, [pc, #40]	; (8002fb4 <TIM_Base_SetConfig+0xe4>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d103      	bne.n	8002f96 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	691a      	ldr	r2, [r3, #16]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	615a      	str	r2, [r3, #20]
}
 8002f9c:	46c0      	nop			; (mov r8, r8)
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	b004      	add	sp, #16
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	40012c00 	.word	0x40012c00
 8002fa8:	40000400 	.word	0x40000400
 8002fac:	40002000 	.word	0x40002000
 8002fb0:	40014400 	.word	0x40014400
 8002fb4:	40014800 	.word	0x40014800
 8002fb8:	fffffcff 	.word	0xfffffcff

08002fbc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002fc4:	46c0      	nop			; (mov r8, r8)
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	b002      	add	sp, #8
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002fd4:	46c0      	nop			; (mov r8, r8)
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	b002      	add	sp, #8
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002fe4:	46c0      	nop			; (mov r8, r8)
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	b002      	add	sp, #8
 8002fea:	bd80      	pop	{r7, pc}

08002fec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d101      	bne.n	8002ffe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e046      	b.n	800308c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2288      	movs	r2, #136	; 0x88
 8003002:	589b      	ldr	r3, [r3, r2]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d107      	bne.n	8003018 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2284      	movs	r2, #132	; 0x84
 800300c:	2100      	movs	r1, #0
 800300e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	0018      	movs	r0, r3
 8003014:	f7fd fee0 	bl	8000dd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2288      	movs	r2, #136	; 0x88
 800301c:	2124      	movs	r1, #36	; 0x24
 800301e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2101      	movs	r1, #1
 800302c:	438a      	bics	r2, r1
 800302e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	0018      	movs	r0, r3
 8003034:	f000 fc12 	bl	800385c <UART_SetConfig>
 8003038:	0003      	movs	r3, r0
 800303a:	2b01      	cmp	r3, #1
 800303c:	d101      	bne.n	8003042 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e024      	b.n	800308c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003046:	2b00      	cmp	r3, #0
 8003048:	d003      	beq.n	8003052 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	0018      	movs	r0, r3
 800304e:	f000 fe7d 	bl	8003d4c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	685a      	ldr	r2, [r3, #4]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	490d      	ldr	r1, [pc, #52]	; (8003094 <HAL_UART_Init+0xa8>)
 800305e:	400a      	ands	r2, r1
 8003060:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	689a      	ldr	r2, [r3, #8]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	212a      	movs	r1, #42	; 0x2a
 800306e:	438a      	bics	r2, r1
 8003070:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2101      	movs	r1, #1
 800307e:	430a      	orrs	r2, r1
 8003080:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	0018      	movs	r0, r3
 8003086:	f000 ff15 	bl	8003eb4 <UART_CheckIdleState>
 800308a:	0003      	movs	r3, r0
}
 800308c:	0018      	movs	r0, r3
 800308e:	46bd      	mov	sp, r7
 8003090:	b002      	add	sp, #8
 8003092:	bd80      	pop	{r7, pc}
 8003094:	ffffb7ff 	.word	0xffffb7ff

08003098 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b08a      	sub	sp, #40	; 0x28
 800309c:	af02      	add	r7, sp, #8
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	603b      	str	r3, [r7, #0]
 80030a4:	1dbb      	adds	r3, r7, #6
 80030a6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2288      	movs	r2, #136	; 0x88
 80030ac:	589b      	ldr	r3, [r3, r2]
 80030ae:	2b20      	cmp	r3, #32
 80030b0:	d000      	beq.n	80030b4 <HAL_UART_Transmit+0x1c>
 80030b2:	e088      	b.n	80031c6 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d003      	beq.n	80030c2 <HAL_UART_Transmit+0x2a>
 80030ba:	1dbb      	adds	r3, r7, #6
 80030bc:	881b      	ldrh	r3, [r3, #0]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e080      	b.n	80031c8 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	689a      	ldr	r2, [r3, #8]
 80030ca:	2380      	movs	r3, #128	; 0x80
 80030cc:	015b      	lsls	r3, r3, #5
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d109      	bne.n	80030e6 <HAL_UART_Transmit+0x4e>
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d105      	bne.n	80030e6 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	2201      	movs	r2, #1
 80030de:	4013      	ands	r3, r2
 80030e0:	d001      	beq.n	80030e6 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e070      	b.n	80031c8 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2290      	movs	r2, #144	; 0x90
 80030ea:	2100      	movs	r1, #0
 80030ec:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2288      	movs	r2, #136	; 0x88
 80030f2:	2121      	movs	r1, #33	; 0x21
 80030f4:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030f6:	f7fe f8ad 	bl	8001254 <HAL_GetTick>
 80030fa:	0003      	movs	r3, r0
 80030fc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	1dba      	adds	r2, r7, #6
 8003102:	2154      	movs	r1, #84	; 0x54
 8003104:	8812      	ldrh	r2, [r2, #0]
 8003106:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	1dba      	adds	r2, r7, #6
 800310c:	2156      	movs	r1, #86	; 0x56
 800310e:	8812      	ldrh	r2, [r2, #0]
 8003110:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	689a      	ldr	r2, [r3, #8]
 8003116:	2380      	movs	r3, #128	; 0x80
 8003118:	015b      	lsls	r3, r3, #5
 800311a:	429a      	cmp	r2, r3
 800311c:	d108      	bne.n	8003130 <HAL_UART_Transmit+0x98>
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d104      	bne.n	8003130 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8003126:	2300      	movs	r3, #0
 8003128:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	61bb      	str	r3, [r7, #24]
 800312e:	e003      	b.n	8003138 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003134:	2300      	movs	r3, #0
 8003136:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003138:	e02c      	b.n	8003194 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800313a:	697a      	ldr	r2, [r7, #20]
 800313c:	68f8      	ldr	r0, [r7, #12]
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	9300      	str	r3, [sp, #0]
 8003142:	0013      	movs	r3, r2
 8003144:	2200      	movs	r2, #0
 8003146:	2180      	movs	r1, #128	; 0x80
 8003148:	f000 ff02 	bl	8003f50 <UART_WaitOnFlagUntilTimeout>
 800314c:	1e03      	subs	r3, r0, #0
 800314e:	d001      	beq.n	8003154 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e039      	b.n	80031c8 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d10b      	bne.n	8003172 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	881b      	ldrh	r3, [r3, #0]
 800315e:	001a      	movs	r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	05d2      	lsls	r2, r2, #23
 8003166:	0dd2      	lsrs	r2, r2, #23
 8003168:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	3302      	adds	r3, #2
 800316e:	61bb      	str	r3, [r7, #24]
 8003170:	e007      	b.n	8003182 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	781a      	ldrb	r2, [r3, #0]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	3301      	adds	r3, #1
 8003180:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2256      	movs	r2, #86	; 0x56
 8003186:	5a9b      	ldrh	r3, [r3, r2]
 8003188:	b29b      	uxth	r3, r3
 800318a:	3b01      	subs	r3, #1
 800318c:	b299      	uxth	r1, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2256      	movs	r2, #86	; 0x56
 8003192:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2256      	movs	r2, #86	; 0x56
 8003198:	5a9b      	ldrh	r3, [r3, r2]
 800319a:	b29b      	uxth	r3, r3
 800319c:	2b00      	cmp	r3, #0
 800319e:	d1cc      	bne.n	800313a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031a0:	697a      	ldr	r2, [r7, #20]
 80031a2:	68f8      	ldr	r0, [r7, #12]
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	9300      	str	r3, [sp, #0]
 80031a8:	0013      	movs	r3, r2
 80031aa:	2200      	movs	r2, #0
 80031ac:	2140      	movs	r1, #64	; 0x40
 80031ae:	f000 fecf 	bl	8003f50 <UART_WaitOnFlagUntilTimeout>
 80031b2:	1e03      	subs	r3, r0, #0
 80031b4:	d001      	beq.n	80031ba <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e006      	b.n	80031c8 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2288      	movs	r2, #136	; 0x88
 80031be:	2120      	movs	r1, #32
 80031c0:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80031c2:	2300      	movs	r3, #0
 80031c4:	e000      	b.n	80031c8 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 80031c6:	2302      	movs	r3, #2
  }
}
 80031c8:	0018      	movs	r0, r3
 80031ca:	46bd      	mov	sp, r7
 80031cc:	b008      	add	sp, #32
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80031d0:	b5b0      	push	{r4, r5, r7, lr}
 80031d2:	b0aa      	sub	sp, #168	; 0xa8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	69db      	ldr	r3, [r3, #28]
 80031de:	22a4      	movs	r2, #164	; 0xa4
 80031e0:	18b9      	adds	r1, r7, r2
 80031e2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	20a0      	movs	r0, #160	; 0xa0
 80031ec:	1839      	adds	r1, r7, r0
 80031ee:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	249c      	movs	r4, #156	; 0x9c
 80031f8:	1939      	adds	r1, r7, r4
 80031fa:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80031fc:	0011      	movs	r1, r2
 80031fe:	18bb      	adds	r3, r7, r2
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4aa2      	ldr	r2, [pc, #648]	; (800348c <HAL_UART_IRQHandler+0x2bc>)
 8003204:	4013      	ands	r3, r2
 8003206:	2298      	movs	r2, #152	; 0x98
 8003208:	18bd      	adds	r5, r7, r2
 800320a:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 800320c:	18bb      	adds	r3, r7, r2
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d11a      	bne.n	800324a <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003214:	187b      	adds	r3, r7, r1
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2220      	movs	r2, #32
 800321a:	4013      	ands	r3, r2
 800321c:	d015      	beq.n	800324a <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800321e:	183b      	adds	r3, r7, r0
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2220      	movs	r2, #32
 8003224:	4013      	ands	r3, r2
 8003226:	d105      	bne.n	8003234 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003228:	193b      	adds	r3, r7, r4
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	2380      	movs	r3, #128	; 0x80
 800322e:	055b      	lsls	r3, r3, #21
 8003230:	4013      	ands	r3, r2
 8003232:	d00a      	beq.n	800324a <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003238:	2b00      	cmp	r3, #0
 800323a:	d100      	bne.n	800323e <HAL_UART_IRQHandler+0x6e>
 800323c:	e2dc      	b.n	80037f8 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	0010      	movs	r0, r2
 8003246:	4798      	blx	r3
      }
      return;
 8003248:	e2d6      	b.n	80037f8 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800324a:	2398      	movs	r3, #152	; 0x98
 800324c:	18fb      	adds	r3, r7, r3
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d100      	bne.n	8003256 <HAL_UART_IRQHandler+0x86>
 8003254:	e122      	b.n	800349c <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003256:	239c      	movs	r3, #156	; 0x9c
 8003258:	18fb      	adds	r3, r7, r3
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a8c      	ldr	r2, [pc, #560]	; (8003490 <HAL_UART_IRQHandler+0x2c0>)
 800325e:	4013      	ands	r3, r2
 8003260:	d106      	bne.n	8003270 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003262:	23a0      	movs	r3, #160	; 0xa0
 8003264:	18fb      	adds	r3, r7, r3
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a8a      	ldr	r2, [pc, #552]	; (8003494 <HAL_UART_IRQHandler+0x2c4>)
 800326a:	4013      	ands	r3, r2
 800326c:	d100      	bne.n	8003270 <HAL_UART_IRQHandler+0xa0>
 800326e:	e115      	b.n	800349c <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003270:	23a4      	movs	r3, #164	; 0xa4
 8003272:	18fb      	adds	r3, r7, r3
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2201      	movs	r2, #1
 8003278:	4013      	ands	r3, r2
 800327a:	d012      	beq.n	80032a2 <HAL_UART_IRQHandler+0xd2>
 800327c:	23a0      	movs	r3, #160	; 0xa0
 800327e:	18fb      	adds	r3, r7, r3
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	2380      	movs	r3, #128	; 0x80
 8003284:	005b      	lsls	r3, r3, #1
 8003286:	4013      	ands	r3, r2
 8003288:	d00b      	beq.n	80032a2 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2201      	movs	r2, #1
 8003290:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2290      	movs	r2, #144	; 0x90
 8003296:	589b      	ldr	r3, [r3, r2]
 8003298:	2201      	movs	r2, #1
 800329a:	431a      	orrs	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2190      	movs	r1, #144	; 0x90
 80032a0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80032a2:	23a4      	movs	r3, #164	; 0xa4
 80032a4:	18fb      	adds	r3, r7, r3
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2202      	movs	r2, #2
 80032aa:	4013      	ands	r3, r2
 80032ac:	d011      	beq.n	80032d2 <HAL_UART_IRQHandler+0x102>
 80032ae:	239c      	movs	r3, #156	; 0x9c
 80032b0:	18fb      	adds	r3, r7, r3
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2201      	movs	r2, #1
 80032b6:	4013      	ands	r3, r2
 80032b8:	d00b      	beq.n	80032d2 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2202      	movs	r2, #2
 80032c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2290      	movs	r2, #144	; 0x90
 80032c6:	589b      	ldr	r3, [r3, r2]
 80032c8:	2204      	movs	r2, #4
 80032ca:	431a      	orrs	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2190      	movs	r1, #144	; 0x90
 80032d0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80032d2:	23a4      	movs	r3, #164	; 0xa4
 80032d4:	18fb      	adds	r3, r7, r3
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2204      	movs	r2, #4
 80032da:	4013      	ands	r3, r2
 80032dc:	d011      	beq.n	8003302 <HAL_UART_IRQHandler+0x132>
 80032de:	239c      	movs	r3, #156	; 0x9c
 80032e0:	18fb      	adds	r3, r7, r3
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2201      	movs	r2, #1
 80032e6:	4013      	ands	r3, r2
 80032e8:	d00b      	beq.n	8003302 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2204      	movs	r2, #4
 80032f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2290      	movs	r2, #144	; 0x90
 80032f6:	589b      	ldr	r3, [r3, r2]
 80032f8:	2202      	movs	r2, #2
 80032fa:	431a      	orrs	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2190      	movs	r1, #144	; 0x90
 8003300:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003302:	23a4      	movs	r3, #164	; 0xa4
 8003304:	18fb      	adds	r3, r7, r3
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2208      	movs	r2, #8
 800330a:	4013      	ands	r3, r2
 800330c:	d017      	beq.n	800333e <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800330e:	23a0      	movs	r3, #160	; 0xa0
 8003310:	18fb      	adds	r3, r7, r3
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2220      	movs	r2, #32
 8003316:	4013      	ands	r3, r2
 8003318:	d105      	bne.n	8003326 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800331a:	239c      	movs	r3, #156	; 0x9c
 800331c:	18fb      	adds	r3, r7, r3
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a5b      	ldr	r2, [pc, #364]	; (8003490 <HAL_UART_IRQHandler+0x2c0>)
 8003322:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003324:	d00b      	beq.n	800333e <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2208      	movs	r2, #8
 800332c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2290      	movs	r2, #144	; 0x90
 8003332:	589b      	ldr	r3, [r3, r2]
 8003334:	2208      	movs	r2, #8
 8003336:	431a      	orrs	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2190      	movs	r1, #144	; 0x90
 800333c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800333e:	23a4      	movs	r3, #164	; 0xa4
 8003340:	18fb      	adds	r3, r7, r3
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	2380      	movs	r3, #128	; 0x80
 8003346:	011b      	lsls	r3, r3, #4
 8003348:	4013      	ands	r3, r2
 800334a:	d013      	beq.n	8003374 <HAL_UART_IRQHandler+0x1a4>
 800334c:	23a0      	movs	r3, #160	; 0xa0
 800334e:	18fb      	adds	r3, r7, r3
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	2380      	movs	r3, #128	; 0x80
 8003354:	04db      	lsls	r3, r3, #19
 8003356:	4013      	ands	r3, r2
 8003358:	d00c      	beq.n	8003374 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2280      	movs	r2, #128	; 0x80
 8003360:	0112      	lsls	r2, r2, #4
 8003362:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2290      	movs	r2, #144	; 0x90
 8003368:	589b      	ldr	r3, [r3, r2]
 800336a:	2220      	movs	r2, #32
 800336c:	431a      	orrs	r2, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2190      	movs	r1, #144	; 0x90
 8003372:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2290      	movs	r2, #144	; 0x90
 8003378:	589b      	ldr	r3, [r3, r2]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d100      	bne.n	8003380 <HAL_UART_IRQHandler+0x1b0>
 800337e:	e23d      	b.n	80037fc <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003380:	23a4      	movs	r3, #164	; 0xa4
 8003382:	18fb      	adds	r3, r7, r3
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2220      	movs	r2, #32
 8003388:	4013      	ands	r3, r2
 800338a:	d015      	beq.n	80033b8 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800338c:	23a0      	movs	r3, #160	; 0xa0
 800338e:	18fb      	adds	r3, r7, r3
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2220      	movs	r2, #32
 8003394:	4013      	ands	r3, r2
 8003396:	d106      	bne.n	80033a6 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003398:	239c      	movs	r3, #156	; 0x9c
 800339a:	18fb      	adds	r3, r7, r3
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	2380      	movs	r3, #128	; 0x80
 80033a0:	055b      	lsls	r3, r3, #21
 80033a2:	4013      	ands	r3, r2
 80033a4:	d008      	beq.n	80033b8 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d004      	beq.n	80033b8 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	0010      	movs	r0, r2
 80033b6:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2290      	movs	r2, #144	; 0x90
 80033bc:	589b      	ldr	r3, [r3, r2]
 80033be:	2194      	movs	r1, #148	; 0x94
 80033c0:	187a      	adds	r2, r7, r1
 80033c2:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	2240      	movs	r2, #64	; 0x40
 80033cc:	4013      	ands	r3, r2
 80033ce:	2b40      	cmp	r3, #64	; 0x40
 80033d0:	d004      	beq.n	80033dc <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80033d2:	187b      	adds	r3, r7, r1
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2228      	movs	r2, #40	; 0x28
 80033d8:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80033da:	d04c      	beq.n	8003476 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	0018      	movs	r0, r3
 80033e0:	f000 ff64 	bl	80042ac <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	2240      	movs	r2, #64	; 0x40
 80033ec:	4013      	ands	r3, r2
 80033ee:	2b40      	cmp	r3, #64	; 0x40
 80033f0:	d13c      	bne.n	800346c <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033f2:	f3ef 8310 	mrs	r3, PRIMASK
 80033f6:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80033f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033fa:	2090      	movs	r0, #144	; 0x90
 80033fc:	183a      	adds	r2, r7, r0
 80033fe:	6013      	str	r3, [r2, #0]
 8003400:	2301      	movs	r3, #1
 8003402:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003404:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003406:	f383 8810 	msr	PRIMASK, r3
}
 800340a:	46c0      	nop			; (mov r8, r8)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	689a      	ldr	r2, [r3, #8]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2140      	movs	r1, #64	; 0x40
 8003418:	438a      	bics	r2, r1
 800341a:	609a      	str	r2, [r3, #8]
 800341c:	183b      	adds	r3, r7, r0
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003422:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003424:	f383 8810 	msr	PRIMASK, r3
}
 8003428:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2280      	movs	r2, #128	; 0x80
 800342e:	589b      	ldr	r3, [r3, r2]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d016      	beq.n	8003462 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2280      	movs	r2, #128	; 0x80
 8003438:	589b      	ldr	r3, [r3, r2]
 800343a:	4a17      	ldr	r2, [pc, #92]	; (8003498 <HAL_UART_IRQHandler+0x2c8>)
 800343c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2280      	movs	r2, #128	; 0x80
 8003442:	589b      	ldr	r3, [r3, r2]
 8003444:	0018      	movs	r0, r3
 8003446:	f7fe f95f 	bl	8001708 <HAL_DMA_Abort_IT>
 800344a:	1e03      	subs	r3, r0, #0
 800344c:	d01c      	beq.n	8003488 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2280      	movs	r2, #128	; 0x80
 8003452:	589b      	ldr	r3, [r3, r2]
 8003454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	2180      	movs	r1, #128	; 0x80
 800345a:	5852      	ldr	r2, [r2, r1]
 800345c:	0010      	movs	r0, r2
 800345e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003460:	e012      	b.n	8003488 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	0018      	movs	r0, r3
 8003466:	f000 f9f1 	bl	800384c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800346a:	e00d      	b.n	8003488 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	0018      	movs	r0, r3
 8003470:	f000 f9ec 	bl	800384c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003474:	e008      	b.n	8003488 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	0018      	movs	r0, r3
 800347a:	f000 f9e7 	bl	800384c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2290      	movs	r2, #144	; 0x90
 8003482:	2100      	movs	r1, #0
 8003484:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003486:	e1b9      	b.n	80037fc <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003488:	46c0      	nop			; (mov r8, r8)
    return;
 800348a:	e1b7      	b.n	80037fc <HAL_UART_IRQHandler+0x62c>
 800348c:	0000080f 	.word	0x0000080f
 8003490:	10000001 	.word	0x10000001
 8003494:	04000120 	.word	0x04000120
 8003498:	08004571 	.word	0x08004571

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d000      	beq.n	80034a6 <HAL_UART_IRQHandler+0x2d6>
 80034a4:	e13e      	b.n	8003724 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80034a6:	23a4      	movs	r3, #164	; 0xa4
 80034a8:	18fb      	adds	r3, r7, r3
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2210      	movs	r2, #16
 80034ae:	4013      	ands	r3, r2
 80034b0:	d100      	bne.n	80034b4 <HAL_UART_IRQHandler+0x2e4>
 80034b2:	e137      	b.n	8003724 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80034b4:	23a0      	movs	r3, #160	; 0xa0
 80034b6:	18fb      	adds	r3, r7, r3
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2210      	movs	r2, #16
 80034bc:	4013      	ands	r3, r2
 80034be:	d100      	bne.n	80034c2 <HAL_UART_IRQHandler+0x2f2>
 80034c0:	e130      	b.n	8003724 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2210      	movs	r2, #16
 80034c8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	2240      	movs	r2, #64	; 0x40
 80034d2:	4013      	ands	r3, r2
 80034d4:	2b40      	cmp	r3, #64	; 0x40
 80034d6:	d000      	beq.n	80034da <HAL_UART_IRQHandler+0x30a>
 80034d8:	e0a4      	b.n	8003624 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2280      	movs	r2, #128	; 0x80
 80034de:	589b      	ldr	r3, [r3, r2]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	685a      	ldr	r2, [r3, #4]
 80034e4:	217e      	movs	r1, #126	; 0x7e
 80034e6:	187b      	adds	r3, r7, r1
 80034e8:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80034ea:	187b      	adds	r3, r7, r1
 80034ec:	881b      	ldrh	r3, [r3, #0]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d100      	bne.n	80034f4 <HAL_UART_IRQHandler+0x324>
 80034f2:	e185      	b.n	8003800 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	225c      	movs	r2, #92	; 0x5c
 80034f8:	5a9b      	ldrh	r3, [r3, r2]
 80034fa:	187a      	adds	r2, r7, r1
 80034fc:	8812      	ldrh	r2, [r2, #0]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d300      	bcc.n	8003504 <HAL_UART_IRQHandler+0x334>
 8003502:	e17d      	b.n	8003800 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	187a      	adds	r2, r7, r1
 8003508:	215e      	movs	r1, #94	; 0x5e
 800350a:	8812      	ldrh	r2, [r2, #0]
 800350c:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2280      	movs	r2, #128	; 0x80
 8003512:	589b      	ldr	r3, [r3, r2]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2220      	movs	r2, #32
 800351a:	4013      	ands	r3, r2
 800351c:	d170      	bne.n	8003600 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800351e:	f3ef 8310 	mrs	r3, PRIMASK
 8003522:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003526:	67bb      	str	r3, [r7, #120]	; 0x78
 8003528:	2301      	movs	r3, #1
 800352a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800352c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800352e:	f383 8810 	msr	PRIMASK, r3
}
 8003532:	46c0      	nop			; (mov r8, r8)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	49b4      	ldr	r1, [pc, #720]	; (8003810 <HAL_UART_IRQHandler+0x640>)
 8003540:	400a      	ands	r2, r1
 8003542:	601a      	str	r2, [r3, #0]
 8003544:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003546:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800354a:	f383 8810 	msr	PRIMASK, r3
}
 800354e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003550:	f3ef 8310 	mrs	r3, PRIMASK
 8003554:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003556:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003558:	677b      	str	r3, [r7, #116]	; 0x74
 800355a:	2301      	movs	r3, #1
 800355c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800355e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003560:	f383 8810 	msr	PRIMASK, r3
}
 8003564:	46c0      	nop			; (mov r8, r8)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	689a      	ldr	r2, [r3, #8]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2101      	movs	r1, #1
 8003572:	438a      	bics	r2, r1
 8003574:	609a      	str	r2, [r3, #8]
 8003576:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003578:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800357a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800357c:	f383 8810 	msr	PRIMASK, r3
}
 8003580:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003582:	f3ef 8310 	mrs	r3, PRIMASK
 8003586:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003588:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800358a:	673b      	str	r3, [r7, #112]	; 0x70
 800358c:	2301      	movs	r3, #1
 800358e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003590:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003592:	f383 8810 	msr	PRIMASK, r3
}
 8003596:	46c0      	nop			; (mov r8, r8)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689a      	ldr	r2, [r3, #8]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2140      	movs	r1, #64	; 0x40
 80035a4:	438a      	bics	r2, r1
 80035a6:	609a      	str	r2, [r3, #8]
 80035a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035aa:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035ae:	f383 8810 	msr	PRIMASK, r3
}
 80035b2:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	228c      	movs	r2, #140	; 0x8c
 80035b8:	2120      	movs	r1, #32
 80035ba:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035c2:	f3ef 8310 	mrs	r3, PRIMASK
 80035c6:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80035c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80035cc:	2301      	movs	r3, #1
 80035ce:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035d2:	f383 8810 	msr	PRIMASK, r3
}
 80035d6:	46c0      	nop			; (mov r8, r8)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2110      	movs	r1, #16
 80035e4:	438a      	bics	r2, r1
 80035e6:	601a      	str	r2, [r3, #0]
 80035e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035ea:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035ee:	f383 8810 	msr	PRIMASK, r3
}
 80035f2:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2280      	movs	r2, #128	; 0x80
 80035f8:	589b      	ldr	r3, [r3, r2]
 80035fa:	0018      	movs	r0, r3
 80035fc:	f7fe f822 	bl	8001644 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2202      	movs	r2, #2
 8003604:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	225c      	movs	r2, #92	; 0x5c
 800360a:	5a9a      	ldrh	r2, [r3, r2]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	215e      	movs	r1, #94	; 0x5e
 8003610:	5a5b      	ldrh	r3, [r3, r1]
 8003612:	b29b      	uxth	r3, r3
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	b29a      	uxth	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	0011      	movs	r1, r2
 800361c:	0018      	movs	r0, r3
 800361e:	f7fd fb49 	bl	8000cb4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003622:	e0ed      	b.n	8003800 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	225c      	movs	r2, #92	; 0x5c
 8003628:	5a99      	ldrh	r1, [r3, r2]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	225e      	movs	r2, #94	; 0x5e
 800362e:	5a9b      	ldrh	r3, [r3, r2]
 8003630:	b29a      	uxth	r2, r3
 8003632:	208e      	movs	r0, #142	; 0x8e
 8003634:	183b      	adds	r3, r7, r0
 8003636:	1a8a      	subs	r2, r1, r2
 8003638:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	225e      	movs	r2, #94	; 0x5e
 800363e:	5a9b      	ldrh	r3, [r3, r2]
 8003640:	b29b      	uxth	r3, r3
 8003642:	2b00      	cmp	r3, #0
 8003644:	d100      	bne.n	8003648 <HAL_UART_IRQHandler+0x478>
 8003646:	e0dd      	b.n	8003804 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8003648:	183b      	adds	r3, r7, r0
 800364a:	881b      	ldrh	r3, [r3, #0]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d100      	bne.n	8003652 <HAL_UART_IRQHandler+0x482>
 8003650:	e0d8      	b.n	8003804 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003652:	f3ef 8310 	mrs	r3, PRIMASK
 8003656:	60fb      	str	r3, [r7, #12]
  return(result);
 8003658:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800365a:	2488      	movs	r4, #136	; 0x88
 800365c:	193a      	adds	r2, r7, r4
 800365e:	6013      	str	r3, [r2, #0]
 8003660:	2301      	movs	r3, #1
 8003662:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	f383 8810 	msr	PRIMASK, r3
}
 800366a:	46c0      	nop			; (mov r8, r8)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4967      	ldr	r1, [pc, #412]	; (8003814 <HAL_UART_IRQHandler+0x644>)
 8003678:	400a      	ands	r2, r1
 800367a:	601a      	str	r2, [r3, #0]
 800367c:	193b      	adds	r3, r7, r4
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	f383 8810 	msr	PRIMASK, r3
}
 8003688:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800368a:	f3ef 8310 	mrs	r3, PRIMASK
 800368e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003690:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003692:	2484      	movs	r4, #132	; 0x84
 8003694:	193a      	adds	r2, r7, r4
 8003696:	6013      	str	r3, [r2, #0]
 8003698:	2301      	movs	r3, #1
 800369a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	f383 8810 	msr	PRIMASK, r3
}
 80036a2:	46c0      	nop			; (mov r8, r8)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	689a      	ldr	r2, [r3, #8]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	495a      	ldr	r1, [pc, #360]	; (8003818 <HAL_UART_IRQHandler+0x648>)
 80036b0:	400a      	ands	r2, r1
 80036b2:	609a      	str	r2, [r3, #8]
 80036b4:	193b      	adds	r3, r7, r4
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036ba:	6a3b      	ldr	r3, [r7, #32]
 80036bc:	f383 8810 	msr	PRIMASK, r3
}
 80036c0:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	228c      	movs	r2, #140	; 0x8c
 80036c6:	2120      	movs	r1, #32
 80036c8:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036d6:	f3ef 8310 	mrs	r3, PRIMASK
 80036da:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80036dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036de:	2480      	movs	r4, #128	; 0x80
 80036e0:	193a      	adds	r2, r7, r4
 80036e2:	6013      	str	r3, [r2, #0]
 80036e4:	2301      	movs	r3, #1
 80036e6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ea:	f383 8810 	msr	PRIMASK, r3
}
 80036ee:	46c0      	nop			; (mov r8, r8)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2110      	movs	r1, #16
 80036fc:	438a      	bics	r2, r1
 80036fe:	601a      	str	r2, [r3, #0]
 8003700:	193b      	adds	r3, r7, r4
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003708:	f383 8810 	msr	PRIMASK, r3
}
 800370c:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2202      	movs	r2, #2
 8003712:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003714:	183b      	adds	r3, r7, r0
 8003716:	881a      	ldrh	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	0011      	movs	r1, r2
 800371c:	0018      	movs	r0, r3
 800371e:	f7fd fac9 	bl	8000cb4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003722:	e06f      	b.n	8003804 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003724:	23a4      	movs	r3, #164	; 0xa4
 8003726:	18fb      	adds	r3, r7, r3
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	2380      	movs	r3, #128	; 0x80
 800372c:	035b      	lsls	r3, r3, #13
 800372e:	4013      	ands	r3, r2
 8003730:	d010      	beq.n	8003754 <HAL_UART_IRQHandler+0x584>
 8003732:	239c      	movs	r3, #156	; 0x9c
 8003734:	18fb      	adds	r3, r7, r3
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	2380      	movs	r3, #128	; 0x80
 800373a:	03db      	lsls	r3, r3, #15
 800373c:	4013      	ands	r3, r2
 800373e:	d009      	beq.n	8003754 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2280      	movs	r2, #128	; 0x80
 8003746:	0352      	lsls	r2, r2, #13
 8003748:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	0018      	movs	r0, r3
 800374e:	f000 ff52 	bl	80045f6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003752:	e05a      	b.n	800380a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003754:	23a4      	movs	r3, #164	; 0xa4
 8003756:	18fb      	adds	r3, r7, r3
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2280      	movs	r2, #128	; 0x80
 800375c:	4013      	ands	r3, r2
 800375e:	d016      	beq.n	800378e <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003760:	23a0      	movs	r3, #160	; 0xa0
 8003762:	18fb      	adds	r3, r7, r3
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2280      	movs	r2, #128	; 0x80
 8003768:	4013      	ands	r3, r2
 800376a:	d106      	bne.n	800377a <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800376c:	239c      	movs	r3, #156	; 0x9c
 800376e:	18fb      	adds	r3, r7, r3
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	2380      	movs	r3, #128	; 0x80
 8003774:	041b      	lsls	r3, r3, #16
 8003776:	4013      	ands	r3, r2
 8003778:	d009      	beq.n	800378e <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800377e:	2b00      	cmp	r3, #0
 8003780:	d042      	beq.n	8003808 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	0010      	movs	r0, r2
 800378a:	4798      	blx	r3
    }
    return;
 800378c:	e03c      	b.n	8003808 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800378e:	23a4      	movs	r3, #164	; 0xa4
 8003790:	18fb      	adds	r3, r7, r3
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2240      	movs	r2, #64	; 0x40
 8003796:	4013      	ands	r3, r2
 8003798:	d00a      	beq.n	80037b0 <HAL_UART_IRQHandler+0x5e0>
 800379a:	23a0      	movs	r3, #160	; 0xa0
 800379c:	18fb      	adds	r3, r7, r3
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2240      	movs	r2, #64	; 0x40
 80037a2:	4013      	ands	r3, r2
 80037a4:	d004      	beq.n	80037b0 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	0018      	movs	r0, r3
 80037aa:	f000 fef8 	bl	800459e <UART_EndTransmit_IT>
    return;
 80037ae:	e02c      	b.n	800380a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80037b0:	23a4      	movs	r3, #164	; 0xa4
 80037b2:	18fb      	adds	r3, r7, r3
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	2380      	movs	r3, #128	; 0x80
 80037b8:	041b      	lsls	r3, r3, #16
 80037ba:	4013      	ands	r3, r2
 80037bc:	d00b      	beq.n	80037d6 <HAL_UART_IRQHandler+0x606>
 80037be:	23a0      	movs	r3, #160	; 0xa0
 80037c0:	18fb      	adds	r3, r7, r3
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	2380      	movs	r3, #128	; 0x80
 80037c6:	05db      	lsls	r3, r3, #23
 80037c8:	4013      	ands	r3, r2
 80037ca:	d004      	beq.n	80037d6 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	0018      	movs	r0, r3
 80037d0:	f000 ff21 	bl	8004616 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80037d4:	e019      	b.n	800380a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80037d6:	23a4      	movs	r3, #164	; 0xa4
 80037d8:	18fb      	adds	r3, r7, r3
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	2380      	movs	r3, #128	; 0x80
 80037de:	045b      	lsls	r3, r3, #17
 80037e0:	4013      	ands	r3, r2
 80037e2:	d012      	beq.n	800380a <HAL_UART_IRQHandler+0x63a>
 80037e4:	23a0      	movs	r3, #160	; 0xa0
 80037e6:	18fb      	adds	r3, r7, r3
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	da0d      	bge.n	800380a <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	0018      	movs	r0, r3
 80037f2:	f000 ff08 	bl	8004606 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80037f6:	e008      	b.n	800380a <HAL_UART_IRQHandler+0x63a>
      return;
 80037f8:	46c0      	nop			; (mov r8, r8)
 80037fa:	e006      	b.n	800380a <HAL_UART_IRQHandler+0x63a>
    return;
 80037fc:	46c0      	nop			; (mov r8, r8)
 80037fe:	e004      	b.n	800380a <HAL_UART_IRQHandler+0x63a>
      return;
 8003800:	46c0      	nop			; (mov r8, r8)
 8003802:	e002      	b.n	800380a <HAL_UART_IRQHandler+0x63a>
      return;
 8003804:	46c0      	nop			; (mov r8, r8)
 8003806:	e000      	b.n	800380a <HAL_UART_IRQHandler+0x63a>
    return;
 8003808:	46c0      	nop			; (mov r8, r8)
  }
}
 800380a:	46bd      	mov	sp, r7
 800380c:	b02a      	add	sp, #168	; 0xa8
 800380e:	bdb0      	pop	{r4, r5, r7, pc}
 8003810:	fffffeff 	.word	0xfffffeff
 8003814:	fffffedf 	.word	0xfffffedf
 8003818:	effffffe 	.word	0xeffffffe

0800381c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003824:	46c0      	nop			; (mov r8, r8)
 8003826:	46bd      	mov	sp, r7
 8003828:	b002      	add	sp, #8
 800382a:	bd80      	pop	{r7, pc}

0800382c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003834:	46c0      	nop			; (mov r8, r8)
 8003836:	46bd      	mov	sp, r7
 8003838:	b002      	add	sp, #8
 800383a:	bd80      	pop	{r7, pc}

0800383c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003844:	46c0      	nop			; (mov r8, r8)
 8003846:	46bd      	mov	sp, r7
 8003848:	b002      	add	sp, #8
 800384a:	bd80      	pop	{r7, pc}

0800384c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003854:	46c0      	nop			; (mov r8, r8)
 8003856:	46bd      	mov	sp, r7
 8003858:	b002      	add	sp, #8
 800385a:	bd80      	pop	{r7, pc}

0800385c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800385c:	b5b0      	push	{r4, r5, r7, lr}
 800385e:	b090      	sub	sp, #64	; 0x40
 8003860:	af00      	add	r7, sp, #0
 8003862:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003864:	231a      	movs	r3, #26
 8003866:	2220      	movs	r2, #32
 8003868:	189b      	adds	r3, r3, r2
 800386a:	19db      	adds	r3, r3, r7
 800386c:	2200      	movs	r2, #0
 800386e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003872:	689a      	ldr	r2, [r3, #8]
 8003874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	431a      	orrs	r2, r3
 800387a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	431a      	orrs	r2, r3
 8003880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003882:	69db      	ldr	r3, [r3, #28]
 8003884:	4313      	orrs	r3, r2
 8003886:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4ac4      	ldr	r2, [pc, #784]	; (8003ba0 <UART_SetConfig+0x344>)
 8003890:	4013      	ands	r3, r2
 8003892:	0019      	movs	r1, r3
 8003894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800389a:	430b      	orrs	r3, r1
 800389c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800389e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	4abf      	ldr	r2, [pc, #764]	; (8003ba4 <UART_SetConfig+0x348>)
 80038a6:	4013      	ands	r3, r2
 80038a8:	0018      	movs	r0, r3
 80038aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ac:	68d9      	ldr	r1, [r3, #12]
 80038ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	0003      	movs	r3, r0
 80038b4:	430b      	orrs	r3, r1
 80038b6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80038b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ba:	699b      	ldr	r3, [r3, #24]
 80038bc:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80038be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4ab9      	ldr	r2, [pc, #740]	; (8003ba8 <UART_SetConfig+0x34c>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d004      	beq.n	80038d2 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80038c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ca:	6a1b      	ldr	r3, [r3, #32]
 80038cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038ce:	4313      	orrs	r3, r2
 80038d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80038d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	4ab4      	ldr	r2, [pc, #720]	; (8003bac <UART_SetConfig+0x350>)
 80038da:	4013      	ands	r3, r2
 80038dc:	0019      	movs	r1, r3
 80038de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038e4:	430b      	orrs	r3, r1
 80038e6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80038e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ee:	220f      	movs	r2, #15
 80038f0:	4393      	bics	r3, r2
 80038f2:	0018      	movs	r0, r3
 80038f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80038f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	0003      	movs	r3, r0
 80038fe:	430b      	orrs	r3, r1
 8003900:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4aaa      	ldr	r2, [pc, #680]	; (8003bb0 <UART_SetConfig+0x354>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d131      	bne.n	8003970 <UART_SetConfig+0x114>
 800390c:	4ba9      	ldr	r3, [pc, #676]	; (8003bb4 <UART_SetConfig+0x358>)
 800390e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003910:	2203      	movs	r2, #3
 8003912:	4013      	ands	r3, r2
 8003914:	2b03      	cmp	r3, #3
 8003916:	d01d      	beq.n	8003954 <UART_SetConfig+0xf8>
 8003918:	d823      	bhi.n	8003962 <UART_SetConfig+0x106>
 800391a:	2b02      	cmp	r3, #2
 800391c:	d00c      	beq.n	8003938 <UART_SetConfig+0xdc>
 800391e:	d820      	bhi.n	8003962 <UART_SetConfig+0x106>
 8003920:	2b00      	cmp	r3, #0
 8003922:	d002      	beq.n	800392a <UART_SetConfig+0xce>
 8003924:	2b01      	cmp	r3, #1
 8003926:	d00e      	beq.n	8003946 <UART_SetConfig+0xea>
 8003928:	e01b      	b.n	8003962 <UART_SetConfig+0x106>
 800392a:	231b      	movs	r3, #27
 800392c:	2220      	movs	r2, #32
 800392e:	189b      	adds	r3, r3, r2
 8003930:	19db      	adds	r3, r3, r7
 8003932:	2200      	movs	r2, #0
 8003934:	701a      	strb	r2, [r3, #0]
 8003936:	e071      	b.n	8003a1c <UART_SetConfig+0x1c0>
 8003938:	231b      	movs	r3, #27
 800393a:	2220      	movs	r2, #32
 800393c:	189b      	adds	r3, r3, r2
 800393e:	19db      	adds	r3, r3, r7
 8003940:	2202      	movs	r2, #2
 8003942:	701a      	strb	r2, [r3, #0]
 8003944:	e06a      	b.n	8003a1c <UART_SetConfig+0x1c0>
 8003946:	231b      	movs	r3, #27
 8003948:	2220      	movs	r2, #32
 800394a:	189b      	adds	r3, r3, r2
 800394c:	19db      	adds	r3, r3, r7
 800394e:	2204      	movs	r2, #4
 8003950:	701a      	strb	r2, [r3, #0]
 8003952:	e063      	b.n	8003a1c <UART_SetConfig+0x1c0>
 8003954:	231b      	movs	r3, #27
 8003956:	2220      	movs	r2, #32
 8003958:	189b      	adds	r3, r3, r2
 800395a:	19db      	adds	r3, r3, r7
 800395c:	2208      	movs	r2, #8
 800395e:	701a      	strb	r2, [r3, #0]
 8003960:	e05c      	b.n	8003a1c <UART_SetConfig+0x1c0>
 8003962:	231b      	movs	r3, #27
 8003964:	2220      	movs	r2, #32
 8003966:	189b      	adds	r3, r3, r2
 8003968:	19db      	adds	r3, r3, r7
 800396a:	2210      	movs	r2, #16
 800396c:	701a      	strb	r2, [r3, #0]
 800396e:	e055      	b.n	8003a1c <UART_SetConfig+0x1c0>
 8003970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a90      	ldr	r2, [pc, #576]	; (8003bb8 <UART_SetConfig+0x35c>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d106      	bne.n	8003988 <UART_SetConfig+0x12c>
 800397a:	231b      	movs	r3, #27
 800397c:	2220      	movs	r2, #32
 800397e:	189b      	adds	r3, r3, r2
 8003980:	19db      	adds	r3, r3, r7
 8003982:	2200      	movs	r2, #0
 8003984:	701a      	strb	r2, [r3, #0]
 8003986:	e049      	b.n	8003a1c <UART_SetConfig+0x1c0>
 8003988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a86      	ldr	r2, [pc, #536]	; (8003ba8 <UART_SetConfig+0x34c>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d13e      	bne.n	8003a10 <UART_SetConfig+0x1b4>
 8003992:	4b88      	ldr	r3, [pc, #544]	; (8003bb4 <UART_SetConfig+0x358>)
 8003994:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003996:	23c0      	movs	r3, #192	; 0xc0
 8003998:	011b      	lsls	r3, r3, #4
 800399a:	4013      	ands	r3, r2
 800399c:	22c0      	movs	r2, #192	; 0xc0
 800399e:	0112      	lsls	r2, r2, #4
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d027      	beq.n	80039f4 <UART_SetConfig+0x198>
 80039a4:	22c0      	movs	r2, #192	; 0xc0
 80039a6:	0112      	lsls	r2, r2, #4
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d82a      	bhi.n	8003a02 <UART_SetConfig+0x1a6>
 80039ac:	2280      	movs	r2, #128	; 0x80
 80039ae:	0112      	lsls	r2, r2, #4
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d011      	beq.n	80039d8 <UART_SetConfig+0x17c>
 80039b4:	2280      	movs	r2, #128	; 0x80
 80039b6:	0112      	lsls	r2, r2, #4
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d822      	bhi.n	8003a02 <UART_SetConfig+0x1a6>
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d004      	beq.n	80039ca <UART_SetConfig+0x16e>
 80039c0:	2280      	movs	r2, #128	; 0x80
 80039c2:	00d2      	lsls	r2, r2, #3
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d00e      	beq.n	80039e6 <UART_SetConfig+0x18a>
 80039c8:	e01b      	b.n	8003a02 <UART_SetConfig+0x1a6>
 80039ca:	231b      	movs	r3, #27
 80039cc:	2220      	movs	r2, #32
 80039ce:	189b      	adds	r3, r3, r2
 80039d0:	19db      	adds	r3, r3, r7
 80039d2:	2200      	movs	r2, #0
 80039d4:	701a      	strb	r2, [r3, #0]
 80039d6:	e021      	b.n	8003a1c <UART_SetConfig+0x1c0>
 80039d8:	231b      	movs	r3, #27
 80039da:	2220      	movs	r2, #32
 80039dc:	189b      	adds	r3, r3, r2
 80039de:	19db      	adds	r3, r3, r7
 80039e0:	2202      	movs	r2, #2
 80039e2:	701a      	strb	r2, [r3, #0]
 80039e4:	e01a      	b.n	8003a1c <UART_SetConfig+0x1c0>
 80039e6:	231b      	movs	r3, #27
 80039e8:	2220      	movs	r2, #32
 80039ea:	189b      	adds	r3, r3, r2
 80039ec:	19db      	adds	r3, r3, r7
 80039ee:	2204      	movs	r2, #4
 80039f0:	701a      	strb	r2, [r3, #0]
 80039f2:	e013      	b.n	8003a1c <UART_SetConfig+0x1c0>
 80039f4:	231b      	movs	r3, #27
 80039f6:	2220      	movs	r2, #32
 80039f8:	189b      	adds	r3, r3, r2
 80039fa:	19db      	adds	r3, r3, r7
 80039fc:	2208      	movs	r2, #8
 80039fe:	701a      	strb	r2, [r3, #0]
 8003a00:	e00c      	b.n	8003a1c <UART_SetConfig+0x1c0>
 8003a02:	231b      	movs	r3, #27
 8003a04:	2220      	movs	r2, #32
 8003a06:	189b      	adds	r3, r3, r2
 8003a08:	19db      	adds	r3, r3, r7
 8003a0a:	2210      	movs	r2, #16
 8003a0c:	701a      	strb	r2, [r3, #0]
 8003a0e:	e005      	b.n	8003a1c <UART_SetConfig+0x1c0>
 8003a10:	231b      	movs	r3, #27
 8003a12:	2220      	movs	r2, #32
 8003a14:	189b      	adds	r3, r3, r2
 8003a16:	19db      	adds	r3, r3, r7
 8003a18:	2210      	movs	r2, #16
 8003a1a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a61      	ldr	r2, [pc, #388]	; (8003ba8 <UART_SetConfig+0x34c>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d000      	beq.n	8003a28 <UART_SetConfig+0x1cc>
 8003a26:	e092      	b.n	8003b4e <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003a28:	231b      	movs	r3, #27
 8003a2a:	2220      	movs	r2, #32
 8003a2c:	189b      	adds	r3, r3, r2
 8003a2e:	19db      	adds	r3, r3, r7
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	2b08      	cmp	r3, #8
 8003a34:	d015      	beq.n	8003a62 <UART_SetConfig+0x206>
 8003a36:	dc18      	bgt.n	8003a6a <UART_SetConfig+0x20e>
 8003a38:	2b04      	cmp	r3, #4
 8003a3a:	d00d      	beq.n	8003a58 <UART_SetConfig+0x1fc>
 8003a3c:	dc15      	bgt.n	8003a6a <UART_SetConfig+0x20e>
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d002      	beq.n	8003a48 <UART_SetConfig+0x1ec>
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d005      	beq.n	8003a52 <UART_SetConfig+0x1f6>
 8003a46:	e010      	b.n	8003a6a <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a48:	f7fe fe86 	bl	8002758 <HAL_RCC_GetPCLK1Freq>
 8003a4c:	0003      	movs	r3, r0
 8003a4e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003a50:	e014      	b.n	8003a7c <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a52:	4b5a      	ldr	r3, [pc, #360]	; (8003bbc <UART_SetConfig+0x360>)
 8003a54:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003a56:	e011      	b.n	8003a7c <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a58:	f7fe fdf2 	bl	8002640 <HAL_RCC_GetSysClockFreq>
 8003a5c:	0003      	movs	r3, r0
 8003a5e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003a60:	e00c      	b.n	8003a7c <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a62:	2380      	movs	r3, #128	; 0x80
 8003a64:	021b      	lsls	r3, r3, #8
 8003a66:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003a68:	e008      	b.n	8003a7c <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003a6e:	231a      	movs	r3, #26
 8003a70:	2220      	movs	r2, #32
 8003a72:	189b      	adds	r3, r3, r2
 8003a74:	19db      	adds	r3, r3, r7
 8003a76:	2201      	movs	r2, #1
 8003a78:	701a      	strb	r2, [r3, #0]
        break;
 8003a7a:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d100      	bne.n	8003a84 <UART_SetConfig+0x228>
 8003a82:	e147      	b.n	8003d14 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a88:	4b4d      	ldr	r3, [pc, #308]	; (8003bc0 <UART_SetConfig+0x364>)
 8003a8a:	0052      	lsls	r2, r2, #1
 8003a8c:	5ad3      	ldrh	r3, [r2, r3]
 8003a8e:	0019      	movs	r1, r3
 8003a90:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003a92:	f7fc fb49 	bl	8000128 <__udivsi3>
 8003a96:	0003      	movs	r3, r0
 8003a98:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9c:	685a      	ldr	r2, [r3, #4]
 8003a9e:	0013      	movs	r3, r2
 8003aa0:	005b      	lsls	r3, r3, #1
 8003aa2:	189b      	adds	r3, r3, r2
 8003aa4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d305      	bcc.n	8003ab6 <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003ab0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d906      	bls.n	8003ac4 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 8003ab6:	231a      	movs	r3, #26
 8003ab8:	2220      	movs	r2, #32
 8003aba:	189b      	adds	r3, r3, r2
 8003abc:	19db      	adds	r3, r3, r7
 8003abe:	2201      	movs	r2, #1
 8003ac0:	701a      	strb	r2, [r3, #0]
 8003ac2:	e127      	b.n	8003d14 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ac6:	61bb      	str	r3, [r7, #24]
 8003ac8:	2300      	movs	r3, #0
 8003aca:	61fb      	str	r3, [r7, #28]
 8003acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ace:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ad0:	4b3b      	ldr	r3, [pc, #236]	; (8003bc0 <UART_SetConfig+0x364>)
 8003ad2:	0052      	lsls	r2, r2, #1
 8003ad4:	5ad3      	ldrh	r3, [r2, r3]
 8003ad6:	613b      	str	r3, [r7, #16]
 8003ad8:	2300      	movs	r3, #0
 8003ada:	617b      	str	r3, [r7, #20]
 8003adc:	693a      	ldr	r2, [r7, #16]
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	69b8      	ldr	r0, [r7, #24]
 8003ae2:	69f9      	ldr	r1, [r7, #28]
 8003ae4:	f7fc fc96 	bl	8000414 <__aeabi_uldivmod>
 8003ae8:	0002      	movs	r2, r0
 8003aea:	000b      	movs	r3, r1
 8003aec:	0e11      	lsrs	r1, r2, #24
 8003aee:	021d      	lsls	r5, r3, #8
 8003af0:	430d      	orrs	r5, r1
 8003af2:	0214      	lsls	r4, r2, #8
 8003af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	085b      	lsrs	r3, r3, #1
 8003afa:	60bb      	str	r3, [r7, #8]
 8003afc:	2300      	movs	r3, #0
 8003afe:	60fb      	str	r3, [r7, #12]
 8003b00:	68b8      	ldr	r0, [r7, #8]
 8003b02:	68f9      	ldr	r1, [r7, #12]
 8003b04:	1900      	adds	r0, r0, r4
 8003b06:	4169      	adcs	r1, r5
 8003b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	603b      	str	r3, [r7, #0]
 8003b0e:	2300      	movs	r3, #0
 8003b10:	607b      	str	r3, [r7, #4]
 8003b12:	683a      	ldr	r2, [r7, #0]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f7fc fc7d 	bl	8000414 <__aeabi_uldivmod>
 8003b1a:	0002      	movs	r2, r0
 8003b1c:	000b      	movs	r3, r1
 8003b1e:	0013      	movs	r3, r2
 8003b20:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003b22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b24:	23c0      	movs	r3, #192	; 0xc0
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d309      	bcc.n	8003b40 <UART_SetConfig+0x2e4>
 8003b2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b2e:	2380      	movs	r3, #128	; 0x80
 8003b30:	035b      	lsls	r3, r3, #13
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d204      	bcs.n	8003b40 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8003b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b3c:	60da      	str	r2, [r3, #12]
 8003b3e:	e0e9      	b.n	8003d14 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8003b40:	231a      	movs	r3, #26
 8003b42:	2220      	movs	r2, #32
 8003b44:	189b      	adds	r3, r3, r2
 8003b46:	19db      	adds	r3, r3, r7
 8003b48:	2201      	movs	r2, #1
 8003b4a:	701a      	strb	r2, [r3, #0]
 8003b4c:	e0e2      	b.n	8003d14 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b50:	69da      	ldr	r2, [r3, #28]
 8003b52:	2380      	movs	r3, #128	; 0x80
 8003b54:	021b      	lsls	r3, r3, #8
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d000      	beq.n	8003b5c <UART_SetConfig+0x300>
 8003b5a:	e083      	b.n	8003c64 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8003b5c:	231b      	movs	r3, #27
 8003b5e:	2220      	movs	r2, #32
 8003b60:	189b      	adds	r3, r3, r2
 8003b62:	19db      	adds	r3, r3, r7
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	2b08      	cmp	r3, #8
 8003b68:	d015      	beq.n	8003b96 <UART_SetConfig+0x33a>
 8003b6a:	dc2b      	bgt.n	8003bc4 <UART_SetConfig+0x368>
 8003b6c:	2b04      	cmp	r3, #4
 8003b6e:	d00d      	beq.n	8003b8c <UART_SetConfig+0x330>
 8003b70:	dc28      	bgt.n	8003bc4 <UART_SetConfig+0x368>
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d002      	beq.n	8003b7c <UART_SetConfig+0x320>
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d005      	beq.n	8003b86 <UART_SetConfig+0x32a>
 8003b7a:	e023      	b.n	8003bc4 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b7c:	f7fe fdec 	bl	8002758 <HAL_RCC_GetPCLK1Freq>
 8003b80:	0003      	movs	r3, r0
 8003b82:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003b84:	e027      	b.n	8003bd6 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b86:	4b0d      	ldr	r3, [pc, #52]	; (8003bbc <UART_SetConfig+0x360>)
 8003b88:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003b8a:	e024      	b.n	8003bd6 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b8c:	f7fe fd58 	bl	8002640 <HAL_RCC_GetSysClockFreq>
 8003b90:	0003      	movs	r3, r0
 8003b92:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003b94:	e01f      	b.n	8003bd6 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b96:	2380      	movs	r3, #128	; 0x80
 8003b98:	021b      	lsls	r3, r3, #8
 8003b9a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003b9c:	e01b      	b.n	8003bd6 <UART_SetConfig+0x37a>
 8003b9e:	46c0      	nop			; (mov r8, r8)
 8003ba0:	cfff69f3 	.word	0xcfff69f3
 8003ba4:	ffffcfff 	.word	0xffffcfff
 8003ba8:	40008000 	.word	0x40008000
 8003bac:	11fff4ff 	.word	0x11fff4ff
 8003bb0:	40013800 	.word	0x40013800
 8003bb4:	40021000 	.word	0x40021000
 8003bb8:	40004400 	.word	0x40004400
 8003bbc:	00f42400 	.word	0x00f42400
 8003bc0:	08006198 	.word	0x08006198
      default:
        pclk = 0U;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003bc8:	231a      	movs	r3, #26
 8003bca:	2220      	movs	r2, #32
 8003bcc:	189b      	adds	r3, r3, r2
 8003bce:	19db      	adds	r3, r3, r7
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	701a      	strb	r2, [r3, #0]
        break;
 8003bd4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d100      	bne.n	8003bde <UART_SetConfig+0x382>
 8003bdc:	e09a      	b.n	8003d14 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003be2:	4b58      	ldr	r3, [pc, #352]	; (8003d44 <UART_SetConfig+0x4e8>)
 8003be4:	0052      	lsls	r2, r2, #1
 8003be6:	5ad3      	ldrh	r3, [r2, r3]
 8003be8:	0019      	movs	r1, r3
 8003bea:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003bec:	f7fc fa9c 	bl	8000128 <__udivsi3>
 8003bf0:	0003      	movs	r3, r0
 8003bf2:	005a      	lsls	r2, r3, #1
 8003bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	085b      	lsrs	r3, r3, #1
 8003bfa:	18d2      	adds	r2, r2, r3
 8003bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	0019      	movs	r1, r3
 8003c02:	0010      	movs	r0, r2
 8003c04:	f7fc fa90 	bl	8000128 <__udivsi3>
 8003c08:	0003      	movs	r3, r0
 8003c0a:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c0e:	2b0f      	cmp	r3, #15
 8003c10:	d921      	bls.n	8003c56 <UART_SetConfig+0x3fa>
 8003c12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c14:	2380      	movs	r3, #128	; 0x80
 8003c16:	025b      	lsls	r3, r3, #9
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d21c      	bcs.n	8003c56 <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c1e:	b29a      	uxth	r2, r3
 8003c20:	200e      	movs	r0, #14
 8003c22:	2420      	movs	r4, #32
 8003c24:	1903      	adds	r3, r0, r4
 8003c26:	19db      	adds	r3, r3, r7
 8003c28:	210f      	movs	r1, #15
 8003c2a:	438a      	bics	r2, r1
 8003c2c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c30:	085b      	lsrs	r3, r3, #1
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	2207      	movs	r2, #7
 8003c36:	4013      	ands	r3, r2
 8003c38:	b299      	uxth	r1, r3
 8003c3a:	1903      	adds	r3, r0, r4
 8003c3c:	19db      	adds	r3, r3, r7
 8003c3e:	1902      	adds	r2, r0, r4
 8003c40:	19d2      	adds	r2, r2, r7
 8003c42:	8812      	ldrh	r2, [r2, #0]
 8003c44:	430a      	orrs	r2, r1
 8003c46:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	1902      	adds	r2, r0, r4
 8003c4e:	19d2      	adds	r2, r2, r7
 8003c50:	8812      	ldrh	r2, [r2, #0]
 8003c52:	60da      	str	r2, [r3, #12]
 8003c54:	e05e      	b.n	8003d14 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8003c56:	231a      	movs	r3, #26
 8003c58:	2220      	movs	r2, #32
 8003c5a:	189b      	adds	r3, r3, r2
 8003c5c:	19db      	adds	r3, r3, r7
 8003c5e:	2201      	movs	r2, #1
 8003c60:	701a      	strb	r2, [r3, #0]
 8003c62:	e057      	b.n	8003d14 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c64:	231b      	movs	r3, #27
 8003c66:	2220      	movs	r2, #32
 8003c68:	189b      	adds	r3, r3, r2
 8003c6a:	19db      	adds	r3, r3, r7
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	2b08      	cmp	r3, #8
 8003c70:	d015      	beq.n	8003c9e <UART_SetConfig+0x442>
 8003c72:	dc18      	bgt.n	8003ca6 <UART_SetConfig+0x44a>
 8003c74:	2b04      	cmp	r3, #4
 8003c76:	d00d      	beq.n	8003c94 <UART_SetConfig+0x438>
 8003c78:	dc15      	bgt.n	8003ca6 <UART_SetConfig+0x44a>
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d002      	beq.n	8003c84 <UART_SetConfig+0x428>
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d005      	beq.n	8003c8e <UART_SetConfig+0x432>
 8003c82:	e010      	b.n	8003ca6 <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c84:	f7fe fd68 	bl	8002758 <HAL_RCC_GetPCLK1Freq>
 8003c88:	0003      	movs	r3, r0
 8003c8a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003c8c:	e014      	b.n	8003cb8 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c8e:	4b2e      	ldr	r3, [pc, #184]	; (8003d48 <UART_SetConfig+0x4ec>)
 8003c90:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003c92:	e011      	b.n	8003cb8 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c94:	f7fe fcd4 	bl	8002640 <HAL_RCC_GetSysClockFreq>
 8003c98:	0003      	movs	r3, r0
 8003c9a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003c9c:	e00c      	b.n	8003cb8 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c9e:	2380      	movs	r3, #128	; 0x80
 8003ca0:	021b      	lsls	r3, r3, #8
 8003ca2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003ca4:	e008      	b.n	8003cb8 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003caa:	231a      	movs	r3, #26
 8003cac:	2220      	movs	r2, #32
 8003cae:	189b      	adds	r3, r3, r2
 8003cb0:	19db      	adds	r3, r3, r7
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	701a      	strb	r2, [r3, #0]
        break;
 8003cb6:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003cb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d02a      	beq.n	8003d14 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cc2:	4b20      	ldr	r3, [pc, #128]	; (8003d44 <UART_SetConfig+0x4e8>)
 8003cc4:	0052      	lsls	r2, r2, #1
 8003cc6:	5ad3      	ldrh	r3, [r2, r3]
 8003cc8:	0019      	movs	r1, r3
 8003cca:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003ccc:	f7fc fa2c 	bl	8000128 <__udivsi3>
 8003cd0:	0003      	movs	r3, r0
 8003cd2:	001a      	movs	r2, r3
 8003cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	085b      	lsrs	r3, r3, #1
 8003cda:	18d2      	adds	r2, r2, r3
 8003cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	0019      	movs	r1, r3
 8003ce2:	0010      	movs	r0, r2
 8003ce4:	f7fc fa20 	bl	8000128 <__udivsi3>
 8003ce8:	0003      	movs	r3, r0
 8003cea:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cee:	2b0f      	cmp	r3, #15
 8003cf0:	d90a      	bls.n	8003d08 <UART_SetConfig+0x4ac>
 8003cf2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cf4:	2380      	movs	r3, #128	; 0x80
 8003cf6:	025b      	lsls	r3, r3, #9
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d205      	bcs.n	8003d08 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cfe:	b29a      	uxth	r2, r3
 8003d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	60da      	str	r2, [r3, #12]
 8003d06:	e005      	b.n	8003d14 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8003d08:	231a      	movs	r3, #26
 8003d0a:	2220      	movs	r2, #32
 8003d0c:	189b      	adds	r3, r3, r2
 8003d0e:	19db      	adds	r3, r3, r7
 8003d10:	2201      	movs	r2, #1
 8003d12:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d16:	226a      	movs	r2, #106	; 0x6a
 8003d18:	2101      	movs	r1, #1
 8003d1a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1e:	2268      	movs	r2, #104	; 0x68
 8003d20:	2101      	movs	r1, #1
 8003d22:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d26:	2200      	movs	r2, #0
 8003d28:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003d30:	231a      	movs	r3, #26
 8003d32:	2220      	movs	r2, #32
 8003d34:	189b      	adds	r3, r3, r2
 8003d36:	19db      	adds	r3, r3, r7
 8003d38:	781b      	ldrb	r3, [r3, #0]
}
 8003d3a:	0018      	movs	r0, r3
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	b010      	add	sp, #64	; 0x40
 8003d40:	bdb0      	pop	{r4, r5, r7, pc}
 8003d42:	46c0      	nop			; (mov r8, r8)
 8003d44:	08006198 	.word	0x08006198
 8003d48:	00f42400 	.word	0x00f42400

08003d4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d58:	2201      	movs	r2, #1
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	d00b      	beq.n	8003d76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	4a4a      	ldr	r2, [pc, #296]	; (8003e90 <UART_AdvFeatureConfig+0x144>)
 8003d66:	4013      	ands	r3, r2
 8003d68:	0019      	movs	r1, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	430a      	orrs	r2, r1
 8003d74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d7a:	2202      	movs	r2, #2
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	d00b      	beq.n	8003d98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	4a43      	ldr	r2, [pc, #268]	; (8003e94 <UART_AdvFeatureConfig+0x148>)
 8003d88:	4013      	ands	r3, r2
 8003d8a:	0019      	movs	r1, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	430a      	orrs	r2, r1
 8003d96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d9c:	2204      	movs	r2, #4
 8003d9e:	4013      	ands	r3, r2
 8003da0:	d00b      	beq.n	8003dba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	4a3b      	ldr	r2, [pc, #236]	; (8003e98 <UART_AdvFeatureConfig+0x14c>)
 8003daa:	4013      	ands	r3, r2
 8003dac:	0019      	movs	r1, r3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	430a      	orrs	r2, r1
 8003db8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dbe:	2208      	movs	r2, #8
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	d00b      	beq.n	8003ddc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	4a34      	ldr	r2, [pc, #208]	; (8003e9c <UART_AdvFeatureConfig+0x150>)
 8003dcc:	4013      	ands	r3, r2
 8003dce:	0019      	movs	r1, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	430a      	orrs	r2, r1
 8003dda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de0:	2210      	movs	r2, #16
 8003de2:	4013      	ands	r3, r2
 8003de4:	d00b      	beq.n	8003dfe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	4a2c      	ldr	r2, [pc, #176]	; (8003ea0 <UART_AdvFeatureConfig+0x154>)
 8003dee:	4013      	ands	r3, r2
 8003df0:	0019      	movs	r1, r3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	430a      	orrs	r2, r1
 8003dfc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e02:	2220      	movs	r2, #32
 8003e04:	4013      	ands	r3, r2
 8003e06:	d00b      	beq.n	8003e20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	4a25      	ldr	r2, [pc, #148]	; (8003ea4 <UART_AdvFeatureConfig+0x158>)
 8003e10:	4013      	ands	r3, r2
 8003e12:	0019      	movs	r1, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	430a      	orrs	r2, r1
 8003e1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e24:	2240      	movs	r2, #64	; 0x40
 8003e26:	4013      	ands	r3, r2
 8003e28:	d01d      	beq.n	8003e66 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	4a1d      	ldr	r2, [pc, #116]	; (8003ea8 <UART_AdvFeatureConfig+0x15c>)
 8003e32:	4013      	ands	r3, r2
 8003e34:	0019      	movs	r1, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	430a      	orrs	r2, r1
 8003e40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e46:	2380      	movs	r3, #128	; 0x80
 8003e48:	035b      	lsls	r3, r3, #13
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d10b      	bne.n	8003e66 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	4a15      	ldr	r2, [pc, #84]	; (8003eac <UART_AdvFeatureConfig+0x160>)
 8003e56:	4013      	ands	r3, r2
 8003e58:	0019      	movs	r1, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	430a      	orrs	r2, r1
 8003e64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e6a:	2280      	movs	r2, #128	; 0x80
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	d00b      	beq.n	8003e88 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	4a0e      	ldr	r2, [pc, #56]	; (8003eb0 <UART_AdvFeatureConfig+0x164>)
 8003e78:	4013      	ands	r3, r2
 8003e7a:	0019      	movs	r1, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	430a      	orrs	r2, r1
 8003e86:	605a      	str	r2, [r3, #4]
  }
}
 8003e88:	46c0      	nop			; (mov r8, r8)
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	b002      	add	sp, #8
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	fffdffff 	.word	0xfffdffff
 8003e94:	fffeffff 	.word	0xfffeffff
 8003e98:	fffbffff 	.word	0xfffbffff
 8003e9c:	ffff7fff 	.word	0xffff7fff
 8003ea0:	ffffefff 	.word	0xffffefff
 8003ea4:	ffffdfff 	.word	0xffffdfff
 8003ea8:	ffefffff 	.word	0xffefffff
 8003eac:	ff9fffff 	.word	0xff9fffff
 8003eb0:	fff7ffff 	.word	0xfff7ffff

08003eb4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b086      	sub	sp, #24
 8003eb8:	af02      	add	r7, sp, #8
 8003eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2290      	movs	r2, #144	; 0x90
 8003ec0:	2100      	movs	r1, #0
 8003ec2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ec4:	f7fd f9c6 	bl	8001254 <HAL_GetTick>
 8003ec8:	0003      	movs	r3, r0
 8003eca:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2208      	movs	r2, #8
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	2b08      	cmp	r3, #8
 8003ed8:	d10c      	bne.n	8003ef4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2280      	movs	r2, #128	; 0x80
 8003ede:	0391      	lsls	r1, r2, #14
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	4a1a      	ldr	r2, [pc, #104]	; (8003f4c <UART_CheckIdleState+0x98>)
 8003ee4:	9200      	str	r2, [sp, #0]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f000 f832 	bl	8003f50 <UART_WaitOnFlagUntilTimeout>
 8003eec:	1e03      	subs	r3, r0, #0
 8003eee:	d001      	beq.n	8003ef4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e026      	b.n	8003f42 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2204      	movs	r2, #4
 8003efc:	4013      	ands	r3, r2
 8003efe:	2b04      	cmp	r3, #4
 8003f00:	d10c      	bne.n	8003f1c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2280      	movs	r2, #128	; 0x80
 8003f06:	03d1      	lsls	r1, r2, #15
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	4a10      	ldr	r2, [pc, #64]	; (8003f4c <UART_CheckIdleState+0x98>)
 8003f0c:	9200      	str	r2, [sp, #0]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f000 f81e 	bl	8003f50 <UART_WaitOnFlagUntilTimeout>
 8003f14:	1e03      	subs	r3, r0, #0
 8003f16:	d001      	beq.n	8003f1c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	e012      	b.n	8003f42 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2288      	movs	r2, #136	; 0x88
 8003f20:	2120      	movs	r1, #32
 8003f22:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	228c      	movs	r2, #140	; 0x8c
 8003f28:	2120      	movs	r1, #32
 8003f2a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2284      	movs	r2, #132	; 0x84
 8003f3c:	2100      	movs	r1, #0
 8003f3e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	0018      	movs	r0, r3
 8003f44:	46bd      	mov	sp, r7
 8003f46:	b004      	add	sp, #16
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	46c0      	nop			; (mov r8, r8)
 8003f4c:	01ffffff 	.word	0x01ffffff

08003f50 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b094      	sub	sp, #80	; 0x50
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	603b      	str	r3, [r7, #0]
 8003f5c:	1dfb      	adds	r3, r7, #7
 8003f5e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f60:	e0a7      	b.n	80040b2 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f64:	3301      	adds	r3, #1
 8003f66:	d100      	bne.n	8003f6a <UART_WaitOnFlagUntilTimeout+0x1a>
 8003f68:	e0a3      	b.n	80040b2 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f6a:	f7fd f973 	bl	8001254 <HAL_GetTick>
 8003f6e:	0002      	movs	r2, r0
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d302      	bcc.n	8003f80 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d13f      	bne.n	8004000 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f80:	f3ef 8310 	mrs	r3, PRIMASK
 8003f84:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003f88:	647b      	str	r3, [r7, #68]	; 0x44
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f90:	f383 8810 	msr	PRIMASK, r3
}
 8003f94:	46c0      	nop			; (mov r8, r8)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	494e      	ldr	r1, [pc, #312]	; (80040dc <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003fa2:	400a      	ands	r2, r1
 8003fa4:	601a      	str	r2, [r3, #0]
 8003fa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fa8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fac:	f383 8810 	msr	PRIMASK, r3
}
 8003fb0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fb2:	f3ef 8310 	mrs	r3, PRIMASK
 8003fb6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fba:	643b      	str	r3, [r7, #64]	; 0x40
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fc2:	f383 8810 	msr	PRIMASK, r3
}
 8003fc6:	46c0      	nop			; (mov r8, r8)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	689a      	ldr	r2, [r3, #8]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2101      	movs	r1, #1
 8003fd4:	438a      	bics	r2, r1
 8003fd6:	609a      	str	r2, [r3, #8]
 8003fd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fda:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fde:	f383 8810 	msr	PRIMASK, r3
}
 8003fe2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2288      	movs	r2, #136	; 0x88
 8003fe8:	2120      	movs	r1, #32
 8003fea:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	228c      	movs	r2, #140	; 0x8c
 8003ff0:	2120      	movs	r1, #32
 8003ff2:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2284      	movs	r2, #132	; 0x84
 8003ff8:	2100      	movs	r1, #0
 8003ffa:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e069      	b.n	80040d4 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2204      	movs	r2, #4
 8004008:	4013      	ands	r3, r2
 800400a:	d052      	beq.n	80040b2 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	69da      	ldr	r2, [r3, #28]
 8004012:	2380      	movs	r3, #128	; 0x80
 8004014:	011b      	lsls	r3, r3, #4
 8004016:	401a      	ands	r2, r3
 8004018:	2380      	movs	r3, #128	; 0x80
 800401a:	011b      	lsls	r3, r3, #4
 800401c:	429a      	cmp	r2, r3
 800401e:	d148      	bne.n	80040b2 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2280      	movs	r2, #128	; 0x80
 8004026:	0112      	lsls	r2, r2, #4
 8004028:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800402a:	f3ef 8310 	mrs	r3, PRIMASK
 800402e:	613b      	str	r3, [r7, #16]
  return(result);
 8004030:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004032:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004034:	2301      	movs	r3, #1
 8004036:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	f383 8810 	msr	PRIMASK, r3
}
 800403e:	46c0      	nop			; (mov r8, r8)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4924      	ldr	r1, [pc, #144]	; (80040dc <UART_WaitOnFlagUntilTimeout+0x18c>)
 800404c:	400a      	ands	r2, r1
 800404e:	601a      	str	r2, [r3, #0]
 8004050:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004052:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	f383 8810 	msr	PRIMASK, r3
}
 800405a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800405c:	f3ef 8310 	mrs	r3, PRIMASK
 8004060:	61fb      	str	r3, [r7, #28]
  return(result);
 8004062:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004064:	64bb      	str	r3, [r7, #72]	; 0x48
 8004066:	2301      	movs	r3, #1
 8004068:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800406a:	6a3b      	ldr	r3, [r7, #32]
 800406c:	f383 8810 	msr	PRIMASK, r3
}
 8004070:	46c0      	nop			; (mov r8, r8)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	689a      	ldr	r2, [r3, #8]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2101      	movs	r1, #1
 800407e:	438a      	bics	r2, r1
 8004080:	609a      	str	r2, [r3, #8]
 8004082:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004084:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004088:	f383 8810 	msr	PRIMASK, r3
}
 800408c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2288      	movs	r2, #136	; 0x88
 8004092:	2120      	movs	r1, #32
 8004094:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	228c      	movs	r2, #140	; 0x8c
 800409a:	2120      	movs	r1, #32
 800409c:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2290      	movs	r2, #144	; 0x90
 80040a2:	2120      	movs	r1, #32
 80040a4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2284      	movs	r2, #132	; 0x84
 80040aa:	2100      	movs	r1, #0
 80040ac:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e010      	b.n	80040d4 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	69db      	ldr	r3, [r3, #28]
 80040b8:	68ba      	ldr	r2, [r7, #8]
 80040ba:	4013      	ands	r3, r2
 80040bc:	68ba      	ldr	r2, [r7, #8]
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	425a      	negs	r2, r3
 80040c2:	4153      	adcs	r3, r2
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	001a      	movs	r2, r3
 80040c8:	1dfb      	adds	r3, r7, #7
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d100      	bne.n	80040d2 <UART_WaitOnFlagUntilTimeout+0x182>
 80040d0:	e747      	b.n	8003f62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	0018      	movs	r0, r3
 80040d6:	46bd      	mov	sp, r7
 80040d8:	b014      	add	sp, #80	; 0x50
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	fffffe5f 	.word	0xfffffe5f

080040e0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b090      	sub	sp, #64	; 0x40
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	1dbb      	adds	r3, r7, #6
 80040ec:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	68ba      	ldr	r2, [r7, #8]
 80040f2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	1dba      	adds	r2, r7, #6
 80040f8:	215c      	movs	r1, #92	; 0x5c
 80040fa:	8812      	ldrh	r2, [r2, #0]
 80040fc:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2290      	movs	r2, #144	; 0x90
 8004102:	2100      	movs	r1, #0
 8004104:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	228c      	movs	r2, #140	; 0x8c
 800410a:	2122      	movs	r1, #34	; 0x22
 800410c:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2280      	movs	r2, #128	; 0x80
 8004112:	589b      	ldr	r3, [r3, r2]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d02d      	beq.n	8004174 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2280      	movs	r2, #128	; 0x80
 800411c:	589b      	ldr	r3, [r3, r2]
 800411e:	4a40      	ldr	r2, [pc, #256]	; (8004220 <UART_Start_Receive_DMA+0x140>)
 8004120:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2280      	movs	r2, #128	; 0x80
 8004126:	589b      	ldr	r3, [r3, r2]
 8004128:	4a3e      	ldr	r2, [pc, #248]	; (8004224 <UART_Start_Receive_DMA+0x144>)
 800412a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2280      	movs	r2, #128	; 0x80
 8004130:	589b      	ldr	r3, [r3, r2]
 8004132:	4a3d      	ldr	r2, [pc, #244]	; (8004228 <UART_Start_Receive_DMA+0x148>)
 8004134:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2280      	movs	r2, #128	; 0x80
 800413a:	589b      	ldr	r3, [r3, r2]
 800413c:	2200      	movs	r2, #0
 800413e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2280      	movs	r2, #128	; 0x80
 8004144:	5898      	ldr	r0, [r3, r2]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	3324      	adds	r3, #36	; 0x24
 800414c:	0019      	movs	r1, r3
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004152:	001a      	movs	r2, r3
 8004154:	1dbb      	adds	r3, r7, #6
 8004156:	881b      	ldrh	r3, [r3, #0]
 8004158:	f7fd f9ee 	bl	8001538 <HAL_DMA_Start_IT>
 800415c:	1e03      	subs	r3, r0, #0
 800415e:	d009      	beq.n	8004174 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2290      	movs	r2, #144	; 0x90
 8004164:	2110      	movs	r1, #16
 8004166:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	228c      	movs	r2, #140	; 0x8c
 800416c:	2120      	movs	r1, #32
 800416e:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e050      	b.n	8004216 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d019      	beq.n	80041b0 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800417c:	f3ef 8310 	mrs	r3, PRIMASK
 8004180:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004182:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004184:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004186:	2301      	movs	r3, #1
 8004188:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800418a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800418c:	f383 8810 	msr	PRIMASK, r3
}
 8004190:	46c0      	nop			; (mov r8, r8)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2180      	movs	r1, #128	; 0x80
 800419e:	0049      	lsls	r1, r1, #1
 80041a0:	430a      	orrs	r2, r1
 80041a2:	601a      	str	r2, [r3, #0]
 80041a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041a6:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041aa:	f383 8810 	msr	PRIMASK, r3
}
 80041ae:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041b0:	f3ef 8310 	mrs	r3, PRIMASK
 80041b4:	613b      	str	r3, [r7, #16]
  return(result);
 80041b6:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80041ba:	2301      	movs	r3, #1
 80041bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	f383 8810 	msr	PRIMASK, r3
}
 80041c4:	46c0      	nop			; (mov r8, r8)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	689a      	ldr	r2, [r3, #8]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2101      	movs	r1, #1
 80041d2:	430a      	orrs	r2, r1
 80041d4:	609a      	str	r2, [r3, #8]
 80041d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041d8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	f383 8810 	msr	PRIMASK, r3
}
 80041e0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041e2:	f3ef 8310 	mrs	r3, PRIMASK
 80041e6:	61fb      	str	r3, [r7, #28]
  return(result);
 80041e8:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041ea:	637b      	str	r3, [r7, #52]	; 0x34
 80041ec:	2301      	movs	r3, #1
 80041ee:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041f0:	6a3b      	ldr	r3, [r7, #32]
 80041f2:	f383 8810 	msr	PRIMASK, r3
}
 80041f6:	46c0      	nop			; (mov r8, r8)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	689a      	ldr	r2, [r3, #8]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	2140      	movs	r1, #64	; 0x40
 8004204:	430a      	orrs	r2, r1
 8004206:	609a      	str	r2, [r3, #8]
 8004208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800420a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800420c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420e:	f383 8810 	msr	PRIMASK, r3
}
 8004212:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8004214:	2300      	movs	r3, #0
}
 8004216:	0018      	movs	r0, r3
 8004218:	46bd      	mov	sp, r7
 800421a:	b010      	add	sp, #64	; 0x40
 800421c:	bd80      	pop	{r7, pc}
 800421e:	46c0      	nop			; (mov r8, r8)
 8004220:	08004379 	.word	0x08004379
 8004224:	080044a9 	.word	0x080044a9
 8004228:	080044eb 	.word	0x080044eb

0800422c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b08a      	sub	sp, #40	; 0x28
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004234:	f3ef 8310 	mrs	r3, PRIMASK
 8004238:	60bb      	str	r3, [r7, #8]
  return(result);
 800423a:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800423c:	627b      	str	r3, [r7, #36]	; 0x24
 800423e:	2301      	movs	r3, #1
 8004240:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f383 8810 	msr	PRIMASK, r3
}
 8004248:	46c0      	nop			; (mov r8, r8)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	21c0      	movs	r1, #192	; 0xc0
 8004256:	438a      	bics	r2, r1
 8004258:	601a      	str	r2, [r3, #0]
 800425a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	f383 8810 	msr	PRIMASK, r3
}
 8004264:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004266:	f3ef 8310 	mrs	r3, PRIMASK
 800426a:	617b      	str	r3, [r7, #20]
  return(result);
 800426c:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800426e:	623b      	str	r3, [r7, #32]
 8004270:	2301      	movs	r3, #1
 8004272:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	f383 8810 	msr	PRIMASK, r3
}
 800427a:	46c0      	nop			; (mov r8, r8)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	689a      	ldr	r2, [r3, #8]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4908      	ldr	r1, [pc, #32]	; (80042a8 <UART_EndTxTransfer+0x7c>)
 8004288:	400a      	ands	r2, r1
 800428a:	609a      	str	r2, [r3, #8]
 800428c:	6a3b      	ldr	r3, [r7, #32]
 800428e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	f383 8810 	msr	PRIMASK, r3
}
 8004296:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2288      	movs	r2, #136	; 0x88
 800429c:	2120      	movs	r1, #32
 800429e:	5099      	str	r1, [r3, r2]
}
 80042a0:	46c0      	nop			; (mov r8, r8)
 80042a2:	46bd      	mov	sp, r7
 80042a4:	b00a      	add	sp, #40	; 0x28
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	ff7fffff 	.word	0xff7fffff

080042ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b08e      	sub	sp, #56	; 0x38
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042b4:	f3ef 8310 	mrs	r3, PRIMASK
 80042b8:	617b      	str	r3, [r7, #20]
  return(result);
 80042ba:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80042bc:	637b      	str	r3, [r7, #52]	; 0x34
 80042be:	2301      	movs	r3, #1
 80042c0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	f383 8810 	msr	PRIMASK, r3
}
 80042c8:	46c0      	nop			; (mov r8, r8)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4926      	ldr	r1, [pc, #152]	; (8004370 <UART_EndRxTransfer+0xc4>)
 80042d6:	400a      	ands	r2, r1
 80042d8:	601a      	str	r2, [r3, #0]
 80042da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	f383 8810 	msr	PRIMASK, r3
}
 80042e4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042e6:	f3ef 8310 	mrs	r3, PRIMASK
 80042ea:	623b      	str	r3, [r7, #32]
  return(result);
 80042ec:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80042ee:	633b      	str	r3, [r7, #48]	; 0x30
 80042f0:	2301      	movs	r3, #1
 80042f2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f6:	f383 8810 	msr	PRIMASK, r3
}
 80042fa:	46c0      	nop			; (mov r8, r8)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	689a      	ldr	r2, [r3, #8]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	491b      	ldr	r1, [pc, #108]	; (8004374 <UART_EndRxTransfer+0xc8>)
 8004308:	400a      	ands	r2, r1
 800430a:	609a      	str	r2, [r3, #8]
 800430c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800430e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004312:	f383 8810 	msr	PRIMASK, r3
}
 8004316:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800431c:	2b01      	cmp	r3, #1
 800431e:	d118      	bne.n	8004352 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004320:	f3ef 8310 	mrs	r3, PRIMASK
 8004324:	60bb      	str	r3, [r7, #8]
  return(result);
 8004326:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004328:	62fb      	str	r3, [r7, #44]	; 0x2c
 800432a:	2301      	movs	r3, #1
 800432c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f383 8810 	msr	PRIMASK, r3
}
 8004334:	46c0      	nop			; (mov r8, r8)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2110      	movs	r1, #16
 8004342:	438a      	bics	r2, r1
 8004344:	601a      	str	r2, [r3, #0]
 8004346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004348:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	f383 8810 	msr	PRIMASK, r3
}
 8004350:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	228c      	movs	r2, #140	; 0x8c
 8004356:	2120      	movs	r1, #32
 8004358:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004366:	46c0      	nop			; (mov r8, r8)
 8004368:	46bd      	mov	sp, r7
 800436a:	b00e      	add	sp, #56	; 0x38
 800436c:	bd80      	pop	{r7, pc}
 800436e:	46c0      	nop			; (mov r8, r8)
 8004370:	fffffedf 	.word	0xfffffedf
 8004374:	effffffe 	.word	0xeffffffe

08004378 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b094      	sub	sp, #80	; 0x50
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004384:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2220      	movs	r2, #32
 800438e:	4013      	ands	r3, r2
 8004390:	d16f      	bne.n	8004472 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8004392:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004394:	225e      	movs	r2, #94	; 0x5e
 8004396:	2100      	movs	r1, #0
 8004398:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800439a:	f3ef 8310 	mrs	r3, PRIMASK
 800439e:	61bb      	str	r3, [r7, #24]
  return(result);
 80043a0:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80043a4:	2301      	movs	r3, #1
 80043a6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	f383 8810 	msr	PRIMASK, r3
}
 80043ae:	46c0      	nop			; (mov r8, r8)
 80043b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	493a      	ldr	r1, [pc, #232]	; (80044a4 <UART_DMAReceiveCplt+0x12c>)
 80043bc:	400a      	ands	r2, r1
 80043be:	601a      	str	r2, [r3, #0]
 80043c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043c2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043c4:	6a3b      	ldr	r3, [r7, #32]
 80043c6:	f383 8810 	msr	PRIMASK, r3
}
 80043ca:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043cc:	f3ef 8310 	mrs	r3, PRIMASK
 80043d0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80043d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043d4:	647b      	str	r3, [r7, #68]	; 0x44
 80043d6:	2301      	movs	r3, #1
 80043d8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043dc:	f383 8810 	msr	PRIMASK, r3
}
 80043e0:	46c0      	nop			; (mov r8, r8)
 80043e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	689a      	ldr	r2, [r3, #8]
 80043e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2101      	movs	r1, #1
 80043ee:	438a      	bics	r2, r1
 80043f0:	609a      	str	r2, [r3, #8]
 80043f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043f8:	f383 8810 	msr	PRIMASK, r3
}
 80043fc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043fe:	f3ef 8310 	mrs	r3, PRIMASK
 8004402:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004404:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004406:	643b      	str	r3, [r7, #64]	; 0x40
 8004408:	2301      	movs	r3, #1
 800440a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800440c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800440e:	f383 8810 	msr	PRIMASK, r3
}
 8004412:	46c0      	nop			; (mov r8, r8)
 8004414:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	689a      	ldr	r2, [r3, #8]
 800441a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2140      	movs	r1, #64	; 0x40
 8004420:	438a      	bics	r2, r1
 8004422:	609a      	str	r2, [r3, #8]
 8004424:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004426:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800442a:	f383 8810 	msr	PRIMASK, r3
}
 800442e:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004430:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004432:	228c      	movs	r2, #140	; 0x8c
 8004434:	2120      	movs	r1, #32
 8004436:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004438:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800443a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800443c:	2b01      	cmp	r3, #1
 800443e:	d118      	bne.n	8004472 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004440:	f3ef 8310 	mrs	r3, PRIMASK
 8004444:	60fb      	str	r3, [r7, #12]
  return(result);
 8004446:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004448:	63fb      	str	r3, [r7, #60]	; 0x3c
 800444a:	2301      	movs	r3, #1
 800444c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	f383 8810 	msr	PRIMASK, r3
}
 8004454:	46c0      	nop			; (mov r8, r8)
 8004456:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2110      	movs	r1, #16
 8004462:	438a      	bics	r2, r1
 8004464:	601a      	str	r2, [r3, #0]
 8004466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004468:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	f383 8810 	msr	PRIMASK, r3
}
 8004470:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004472:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004474:	2200      	movs	r2, #0
 8004476:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004478:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800447a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800447c:	2b01      	cmp	r3, #1
 800447e:	d108      	bne.n	8004492 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004480:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004482:	225c      	movs	r2, #92	; 0x5c
 8004484:	5a9a      	ldrh	r2, [r3, r2]
 8004486:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004488:	0011      	movs	r1, r2
 800448a:	0018      	movs	r0, r3
 800448c:	f7fc fc12 	bl	8000cb4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004490:	e003      	b.n	800449a <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8004492:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004494:	0018      	movs	r0, r3
 8004496:	f7ff f9c9 	bl	800382c <HAL_UART_RxCpltCallback>
}
 800449a:	46c0      	nop			; (mov r8, r8)
 800449c:	46bd      	mov	sp, r7
 800449e:	b014      	add	sp, #80	; 0x50
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	46c0      	nop			; (mov r8, r8)
 80044a4:	fffffeff 	.word	0xfffffeff

080044a8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2201      	movs	r2, #1
 80044ba:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d10a      	bne.n	80044da <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	225c      	movs	r2, #92	; 0x5c
 80044c8:	5a9b      	ldrh	r3, [r3, r2]
 80044ca:	085b      	lsrs	r3, r3, #1
 80044cc:	b29a      	uxth	r2, r3
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	0011      	movs	r1, r2
 80044d2:	0018      	movs	r0, r3
 80044d4:	f7fc fbee 	bl	8000cb4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80044d8:	e003      	b.n	80044e2 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	0018      	movs	r0, r3
 80044de:	f7ff f9ad 	bl	800383c <HAL_UART_RxHalfCpltCallback>
}
 80044e2:	46c0      	nop			; (mov r8, r8)
 80044e4:	46bd      	mov	sp, r7
 80044e6:	b004      	add	sp, #16
 80044e8:	bd80      	pop	{r7, pc}

080044ea <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80044ea:	b580      	push	{r7, lr}
 80044ec:	b086      	sub	sp, #24
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	2288      	movs	r2, #136	; 0x88
 80044fc:	589b      	ldr	r3, [r3, r2]
 80044fe:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	228c      	movs	r2, #140	; 0x8c
 8004504:	589b      	ldr	r3, [r3, r2]
 8004506:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	2280      	movs	r2, #128	; 0x80
 8004510:	4013      	ands	r3, r2
 8004512:	2b80      	cmp	r3, #128	; 0x80
 8004514:	d10a      	bne.n	800452c <UART_DMAError+0x42>
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	2b21      	cmp	r3, #33	; 0x21
 800451a:	d107      	bne.n	800452c <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	2256      	movs	r2, #86	; 0x56
 8004520:	2100      	movs	r1, #0
 8004522:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	0018      	movs	r0, r3
 8004528:	f7ff fe80 	bl	800422c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	2240      	movs	r2, #64	; 0x40
 8004534:	4013      	ands	r3, r2
 8004536:	2b40      	cmp	r3, #64	; 0x40
 8004538:	d10a      	bne.n	8004550 <UART_DMAError+0x66>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2b22      	cmp	r3, #34	; 0x22
 800453e:	d107      	bne.n	8004550 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	225e      	movs	r2, #94	; 0x5e
 8004544:	2100      	movs	r1, #0
 8004546:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	0018      	movs	r0, r3
 800454c:	f7ff feae 	bl	80042ac <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	2290      	movs	r2, #144	; 0x90
 8004554:	589b      	ldr	r3, [r3, r2]
 8004556:	2210      	movs	r2, #16
 8004558:	431a      	orrs	r2, r3
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	2190      	movs	r1, #144	; 0x90
 800455e:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	0018      	movs	r0, r3
 8004564:	f7ff f972 	bl	800384c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004568:	46c0      	nop			; (mov r8, r8)
 800456a:	46bd      	mov	sp, r7
 800456c:	b006      	add	sp, #24
 800456e:	bd80      	pop	{r7, pc}

08004570 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800457c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	225e      	movs	r2, #94	; 0x5e
 8004582:	2100      	movs	r1, #0
 8004584:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2256      	movs	r2, #86	; 0x56
 800458a:	2100      	movs	r1, #0
 800458c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	0018      	movs	r0, r3
 8004592:	f7ff f95b 	bl	800384c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004596:	46c0      	nop			; (mov r8, r8)
 8004598:	46bd      	mov	sp, r7
 800459a:	b004      	add	sp, #16
 800459c:	bd80      	pop	{r7, pc}

0800459e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800459e:	b580      	push	{r7, lr}
 80045a0:	b086      	sub	sp, #24
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045a6:	f3ef 8310 	mrs	r3, PRIMASK
 80045aa:	60bb      	str	r3, [r7, #8]
  return(result);
 80045ac:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80045ae:	617b      	str	r3, [r7, #20]
 80045b0:	2301      	movs	r3, #1
 80045b2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f383 8810 	msr	PRIMASK, r3
}
 80045ba:	46c0      	nop			; (mov r8, r8)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2140      	movs	r1, #64	; 0x40
 80045c8:	438a      	bics	r2, r1
 80045ca:	601a      	str	r2, [r3, #0]
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	f383 8810 	msr	PRIMASK, r3
}
 80045d6:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2288      	movs	r2, #136	; 0x88
 80045dc:	2120      	movs	r1, #32
 80045de:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	0018      	movs	r0, r3
 80045ea:	f7ff f917 	bl	800381c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045ee:	46c0      	nop			; (mov r8, r8)
 80045f0:	46bd      	mov	sp, r7
 80045f2:	b006      	add	sp, #24
 80045f4:	bd80      	pop	{r7, pc}

080045f6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80045f6:	b580      	push	{r7, lr}
 80045f8:	b082      	sub	sp, #8
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80045fe:	46c0      	nop			; (mov r8, r8)
 8004600:	46bd      	mov	sp, r7
 8004602:	b002      	add	sp, #8
 8004604:	bd80      	pop	{r7, pc}

08004606 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004606:	b580      	push	{r7, lr}
 8004608:	b082      	sub	sp, #8
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800460e:	46c0      	nop			; (mov r8, r8)
 8004610:	46bd      	mov	sp, r7
 8004612:	b002      	add	sp, #8
 8004614:	bd80      	pop	{r7, pc}

08004616 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004616:	b580      	push	{r7, lr}
 8004618:	b082      	sub	sp, #8
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800461e:	46c0      	nop			; (mov r8, r8)
 8004620:	46bd      	mov	sp, r7
 8004622:	b002      	add	sp, #8
 8004624:	bd80      	pop	{r7, pc}
	...

08004628 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2284      	movs	r2, #132	; 0x84
 8004634:	5c9b      	ldrb	r3, [r3, r2]
 8004636:	2b01      	cmp	r3, #1
 8004638:	d101      	bne.n	800463e <HAL_UARTEx_DisableFifoMode+0x16>
 800463a:	2302      	movs	r3, #2
 800463c:	e027      	b.n	800468e <HAL_UARTEx_DisableFifoMode+0x66>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2284      	movs	r2, #132	; 0x84
 8004642:	2101      	movs	r1, #1
 8004644:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2288      	movs	r2, #136	; 0x88
 800464a:	2124      	movs	r1, #36	; 0x24
 800464c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2101      	movs	r1, #1
 8004662:	438a      	bics	r2, r1
 8004664:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	4a0b      	ldr	r2, [pc, #44]	; (8004698 <HAL_UARTEx_DisableFifoMode+0x70>)
 800466a:	4013      	ands	r3, r2
 800466c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68fa      	ldr	r2, [r7, #12]
 800467a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2288      	movs	r2, #136	; 0x88
 8004680:	2120      	movs	r1, #32
 8004682:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2284      	movs	r2, #132	; 0x84
 8004688:	2100      	movs	r1, #0
 800468a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800468c:	2300      	movs	r3, #0
}
 800468e:	0018      	movs	r0, r3
 8004690:	46bd      	mov	sp, r7
 8004692:	b004      	add	sp, #16
 8004694:	bd80      	pop	{r7, pc}
 8004696:	46c0      	nop			; (mov r8, r8)
 8004698:	dfffffff 	.word	0xdfffffff

0800469c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2284      	movs	r2, #132	; 0x84
 80046aa:	5c9b      	ldrb	r3, [r3, r2]
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d101      	bne.n	80046b4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80046b0:	2302      	movs	r3, #2
 80046b2:	e02e      	b.n	8004712 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2284      	movs	r2, #132	; 0x84
 80046b8:	2101      	movs	r1, #1
 80046ba:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2288      	movs	r2, #136	; 0x88
 80046c0:	2124      	movs	r1, #36	; 0x24
 80046c2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2101      	movs	r1, #1
 80046d8:	438a      	bics	r2, r1
 80046da:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	00db      	lsls	r3, r3, #3
 80046e4:	08d9      	lsrs	r1, r3, #3
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	683a      	ldr	r2, [r7, #0]
 80046ec:	430a      	orrs	r2, r1
 80046ee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	0018      	movs	r0, r3
 80046f4:	f000 f8bc 	bl	8004870 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68fa      	ldr	r2, [r7, #12]
 80046fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2288      	movs	r2, #136	; 0x88
 8004704:	2120      	movs	r1, #32
 8004706:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2284      	movs	r2, #132	; 0x84
 800470c:	2100      	movs	r1, #0
 800470e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004710:	2300      	movs	r3, #0
}
 8004712:	0018      	movs	r0, r3
 8004714:	46bd      	mov	sp, r7
 8004716:	b004      	add	sp, #16
 8004718:	bd80      	pop	{r7, pc}
	...

0800471c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2284      	movs	r2, #132	; 0x84
 800472a:	5c9b      	ldrb	r3, [r3, r2]
 800472c:	2b01      	cmp	r3, #1
 800472e:	d101      	bne.n	8004734 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004730:	2302      	movs	r3, #2
 8004732:	e02f      	b.n	8004794 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2284      	movs	r2, #132	; 0x84
 8004738:	2101      	movs	r1, #1
 800473a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2288      	movs	r2, #136	; 0x88
 8004740:	2124      	movs	r1, #36	; 0x24
 8004742:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	2101      	movs	r1, #1
 8004758:	438a      	bics	r2, r1
 800475a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	4a0e      	ldr	r2, [pc, #56]	; (800479c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004764:	4013      	ands	r3, r2
 8004766:	0019      	movs	r1, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	683a      	ldr	r2, [r7, #0]
 800476e:	430a      	orrs	r2, r1
 8004770:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	0018      	movs	r0, r3
 8004776:	f000 f87b 	bl	8004870 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2288      	movs	r2, #136	; 0x88
 8004786:	2120      	movs	r1, #32
 8004788:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2284      	movs	r2, #132	; 0x84
 800478e:	2100      	movs	r1, #0
 8004790:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	0018      	movs	r0, r3
 8004796:	46bd      	mov	sp, r7
 8004798:	b004      	add	sp, #16
 800479a:	bd80      	pop	{r7, pc}
 800479c:	f1ffffff 	.word	0xf1ffffff

080047a0 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047a0:	b5b0      	push	{r4, r5, r7, lr}
 80047a2:	b08a      	sub	sp, #40	; 0x28
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	1dbb      	adds	r3, r7, #6
 80047ac:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	228c      	movs	r2, #140	; 0x8c
 80047b2:	589b      	ldr	r3, [r3, r2]
 80047b4:	2b20      	cmp	r3, #32
 80047b6:	d156      	bne.n	8004866 <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d003      	beq.n	80047c6 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80047be:	1dbb      	adds	r3, r7, #6
 80047c0:	881b      	ldrh	r3, [r3, #0]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d101      	bne.n	80047ca <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e04e      	b.n	8004868 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	689a      	ldr	r2, [r3, #8]
 80047ce:	2380      	movs	r3, #128	; 0x80
 80047d0:	015b      	lsls	r3, r3, #5
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d109      	bne.n	80047ea <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d105      	bne.n	80047ea <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	2201      	movs	r2, #1
 80047e2:	4013      	ands	r3, r2
 80047e4:	d001      	beq.n	80047ea <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e03e      	b.n	8004868 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2201      	movs	r2, #1
 80047ee:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2200      	movs	r2, #0
 80047f4:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80047f6:	2527      	movs	r5, #39	; 0x27
 80047f8:	197c      	adds	r4, r7, r5
 80047fa:	1dbb      	adds	r3, r7, #6
 80047fc:	881a      	ldrh	r2, [r3, #0]
 80047fe:	68b9      	ldr	r1, [r7, #8]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	0018      	movs	r0, r3
 8004804:	f7ff fc6c 	bl	80040e0 <UART_Start_Receive_DMA>
 8004808:	0003      	movs	r3, r0
 800480a:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800480c:	197b      	adds	r3, r7, r5
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d124      	bne.n	800485e <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004818:	2b01      	cmp	r3, #1
 800481a:	d11c      	bne.n	8004856 <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2210      	movs	r2, #16
 8004822:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004824:	f3ef 8310 	mrs	r3, PRIMASK
 8004828:	617b      	str	r3, [r7, #20]
  return(result);
 800482a:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800482c:	623b      	str	r3, [r7, #32]
 800482e:	2301      	movs	r3, #1
 8004830:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	f383 8810 	msr	PRIMASK, r3
}
 8004838:	46c0      	nop			; (mov r8, r8)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2110      	movs	r1, #16
 8004846:	430a      	orrs	r2, r1
 8004848:	601a      	str	r2, [r3, #0]
 800484a:	6a3b      	ldr	r3, [r7, #32]
 800484c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	f383 8810 	msr	PRIMASK, r3
}
 8004854:	e003      	b.n	800485e <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004856:	2327      	movs	r3, #39	; 0x27
 8004858:	18fb      	adds	r3, r7, r3
 800485a:	2201      	movs	r2, #1
 800485c:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 800485e:	2327      	movs	r3, #39	; 0x27
 8004860:	18fb      	adds	r3, r7, r3
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	e000      	b.n	8004868 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 8004866:	2302      	movs	r3, #2
  }
}
 8004868:	0018      	movs	r0, r3
 800486a:	46bd      	mov	sp, r7
 800486c:	b00a      	add	sp, #40	; 0x28
 800486e:	bdb0      	pop	{r4, r5, r7, pc}

08004870 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004870:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004872:	b085      	sub	sp, #20
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800487c:	2b00      	cmp	r3, #0
 800487e:	d108      	bne.n	8004892 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	226a      	movs	r2, #106	; 0x6a
 8004884:	2101      	movs	r1, #1
 8004886:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2268      	movs	r2, #104	; 0x68
 800488c:	2101      	movs	r1, #1
 800488e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004890:	e043      	b.n	800491a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004892:	260f      	movs	r6, #15
 8004894:	19bb      	adds	r3, r7, r6
 8004896:	2208      	movs	r2, #8
 8004898:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800489a:	200e      	movs	r0, #14
 800489c:	183b      	adds	r3, r7, r0
 800489e:	2208      	movs	r2, #8
 80048a0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	0e5b      	lsrs	r3, r3, #25
 80048aa:	b2da      	uxtb	r2, r3
 80048ac:	240d      	movs	r4, #13
 80048ae:	193b      	adds	r3, r7, r4
 80048b0:	2107      	movs	r1, #7
 80048b2:	400a      	ands	r2, r1
 80048b4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	0f5b      	lsrs	r3, r3, #29
 80048be:	b2da      	uxtb	r2, r3
 80048c0:	250c      	movs	r5, #12
 80048c2:	197b      	adds	r3, r7, r5
 80048c4:	2107      	movs	r1, #7
 80048c6:	400a      	ands	r2, r1
 80048c8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80048ca:	183b      	adds	r3, r7, r0
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	197a      	adds	r2, r7, r5
 80048d0:	7812      	ldrb	r2, [r2, #0]
 80048d2:	4914      	ldr	r1, [pc, #80]	; (8004924 <UARTEx_SetNbDataToProcess+0xb4>)
 80048d4:	5c8a      	ldrb	r2, [r1, r2]
 80048d6:	435a      	muls	r2, r3
 80048d8:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80048da:	197b      	adds	r3, r7, r5
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	4a12      	ldr	r2, [pc, #72]	; (8004928 <UARTEx_SetNbDataToProcess+0xb8>)
 80048e0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80048e2:	0019      	movs	r1, r3
 80048e4:	f7fb fcaa 	bl	800023c <__divsi3>
 80048e8:	0003      	movs	r3, r0
 80048ea:	b299      	uxth	r1, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	226a      	movs	r2, #106	; 0x6a
 80048f0:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80048f2:	19bb      	adds	r3, r7, r6
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	193a      	adds	r2, r7, r4
 80048f8:	7812      	ldrb	r2, [r2, #0]
 80048fa:	490a      	ldr	r1, [pc, #40]	; (8004924 <UARTEx_SetNbDataToProcess+0xb4>)
 80048fc:	5c8a      	ldrb	r2, [r1, r2]
 80048fe:	435a      	muls	r2, r3
 8004900:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004902:	193b      	adds	r3, r7, r4
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	4a08      	ldr	r2, [pc, #32]	; (8004928 <UARTEx_SetNbDataToProcess+0xb8>)
 8004908:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800490a:	0019      	movs	r1, r3
 800490c:	f7fb fc96 	bl	800023c <__divsi3>
 8004910:	0003      	movs	r3, r0
 8004912:	b299      	uxth	r1, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2268      	movs	r2, #104	; 0x68
 8004918:	5299      	strh	r1, [r3, r2]
}
 800491a:	46c0      	nop			; (mov r8, r8)
 800491c:	46bd      	mov	sp, r7
 800491e:	b005      	add	sp, #20
 8004920:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004922:	46c0      	nop			; (mov r8, r8)
 8004924:	080061b0 	.word	0x080061b0
 8004928:	080061b8 	.word	0x080061b8

0800492c <__errno>:
 800492c:	4b01      	ldr	r3, [pc, #4]	; (8004934 <__errno+0x8>)
 800492e:	6818      	ldr	r0, [r3, #0]
 8004930:	4770      	bx	lr
 8004932:	46c0      	nop			; (mov r8, r8)
 8004934:	20000070 	.word	0x20000070

08004938 <__libc_init_array>:
 8004938:	b570      	push	{r4, r5, r6, lr}
 800493a:	2600      	movs	r6, #0
 800493c:	4d0c      	ldr	r5, [pc, #48]	; (8004970 <__libc_init_array+0x38>)
 800493e:	4c0d      	ldr	r4, [pc, #52]	; (8004974 <__libc_init_array+0x3c>)
 8004940:	1b64      	subs	r4, r4, r5
 8004942:	10a4      	asrs	r4, r4, #2
 8004944:	42a6      	cmp	r6, r4
 8004946:	d109      	bne.n	800495c <__libc_init_array+0x24>
 8004948:	2600      	movs	r6, #0
 800494a:	f001 fb57 	bl	8005ffc <_init>
 800494e:	4d0a      	ldr	r5, [pc, #40]	; (8004978 <__libc_init_array+0x40>)
 8004950:	4c0a      	ldr	r4, [pc, #40]	; (800497c <__libc_init_array+0x44>)
 8004952:	1b64      	subs	r4, r4, r5
 8004954:	10a4      	asrs	r4, r4, #2
 8004956:	42a6      	cmp	r6, r4
 8004958:	d105      	bne.n	8004966 <__libc_init_array+0x2e>
 800495a:	bd70      	pop	{r4, r5, r6, pc}
 800495c:	00b3      	lsls	r3, r6, #2
 800495e:	58eb      	ldr	r3, [r5, r3]
 8004960:	4798      	blx	r3
 8004962:	3601      	adds	r6, #1
 8004964:	e7ee      	b.n	8004944 <__libc_init_array+0xc>
 8004966:	00b3      	lsls	r3, r6, #2
 8004968:	58eb      	ldr	r3, [r5, r3]
 800496a:	4798      	blx	r3
 800496c:	3601      	adds	r6, #1
 800496e:	e7f2      	b.n	8004956 <__libc_init_array+0x1e>
 8004970:	08006410 	.word	0x08006410
 8004974:	08006410 	.word	0x08006410
 8004978:	08006410 	.word	0x08006410
 800497c:	08006414 	.word	0x08006414

08004980 <malloc>:
 8004980:	b510      	push	{r4, lr}
 8004982:	4b03      	ldr	r3, [pc, #12]	; (8004990 <malloc+0x10>)
 8004984:	0001      	movs	r1, r0
 8004986:	6818      	ldr	r0, [r3, #0]
 8004988:	f000 f882 	bl	8004a90 <_malloc_r>
 800498c:	bd10      	pop	{r4, pc}
 800498e:	46c0      	nop			; (mov r8, r8)
 8004990:	20000070 	.word	0x20000070

08004994 <free>:
 8004994:	b510      	push	{r4, lr}
 8004996:	4b03      	ldr	r3, [pc, #12]	; (80049a4 <free+0x10>)
 8004998:	0001      	movs	r1, r0
 800499a:	6818      	ldr	r0, [r3, #0]
 800499c:	f000 f80c 	bl	80049b8 <_free_r>
 80049a0:	bd10      	pop	{r4, pc}
 80049a2:	46c0      	nop			; (mov r8, r8)
 80049a4:	20000070 	.word	0x20000070

080049a8 <memset>:
 80049a8:	0003      	movs	r3, r0
 80049aa:	1882      	adds	r2, r0, r2
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d100      	bne.n	80049b2 <memset+0xa>
 80049b0:	4770      	bx	lr
 80049b2:	7019      	strb	r1, [r3, #0]
 80049b4:	3301      	adds	r3, #1
 80049b6:	e7f9      	b.n	80049ac <memset+0x4>

080049b8 <_free_r>:
 80049b8:	b570      	push	{r4, r5, r6, lr}
 80049ba:	0005      	movs	r5, r0
 80049bc:	2900      	cmp	r1, #0
 80049be:	d010      	beq.n	80049e2 <_free_r+0x2a>
 80049c0:	1f0c      	subs	r4, r1, #4
 80049c2:	6823      	ldr	r3, [r4, #0]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	da00      	bge.n	80049ca <_free_r+0x12>
 80049c8:	18e4      	adds	r4, r4, r3
 80049ca:	0028      	movs	r0, r5
 80049cc:	f000 fa46 	bl	8004e5c <__malloc_lock>
 80049d0:	4a1d      	ldr	r2, [pc, #116]	; (8004a48 <_free_r+0x90>)
 80049d2:	6813      	ldr	r3, [r2, #0]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d105      	bne.n	80049e4 <_free_r+0x2c>
 80049d8:	6063      	str	r3, [r4, #4]
 80049da:	6014      	str	r4, [r2, #0]
 80049dc:	0028      	movs	r0, r5
 80049de:	f000 fa45 	bl	8004e6c <__malloc_unlock>
 80049e2:	bd70      	pop	{r4, r5, r6, pc}
 80049e4:	42a3      	cmp	r3, r4
 80049e6:	d908      	bls.n	80049fa <_free_r+0x42>
 80049e8:	6821      	ldr	r1, [r4, #0]
 80049ea:	1860      	adds	r0, r4, r1
 80049ec:	4283      	cmp	r3, r0
 80049ee:	d1f3      	bne.n	80049d8 <_free_r+0x20>
 80049f0:	6818      	ldr	r0, [r3, #0]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	1841      	adds	r1, r0, r1
 80049f6:	6021      	str	r1, [r4, #0]
 80049f8:	e7ee      	b.n	80049d8 <_free_r+0x20>
 80049fa:	001a      	movs	r2, r3
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d001      	beq.n	8004a06 <_free_r+0x4e>
 8004a02:	42a3      	cmp	r3, r4
 8004a04:	d9f9      	bls.n	80049fa <_free_r+0x42>
 8004a06:	6811      	ldr	r1, [r2, #0]
 8004a08:	1850      	adds	r0, r2, r1
 8004a0a:	42a0      	cmp	r0, r4
 8004a0c:	d10b      	bne.n	8004a26 <_free_r+0x6e>
 8004a0e:	6820      	ldr	r0, [r4, #0]
 8004a10:	1809      	adds	r1, r1, r0
 8004a12:	1850      	adds	r0, r2, r1
 8004a14:	6011      	str	r1, [r2, #0]
 8004a16:	4283      	cmp	r3, r0
 8004a18:	d1e0      	bne.n	80049dc <_free_r+0x24>
 8004a1a:	6818      	ldr	r0, [r3, #0]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	1841      	adds	r1, r0, r1
 8004a20:	6011      	str	r1, [r2, #0]
 8004a22:	6053      	str	r3, [r2, #4]
 8004a24:	e7da      	b.n	80049dc <_free_r+0x24>
 8004a26:	42a0      	cmp	r0, r4
 8004a28:	d902      	bls.n	8004a30 <_free_r+0x78>
 8004a2a:	230c      	movs	r3, #12
 8004a2c:	602b      	str	r3, [r5, #0]
 8004a2e:	e7d5      	b.n	80049dc <_free_r+0x24>
 8004a30:	6821      	ldr	r1, [r4, #0]
 8004a32:	1860      	adds	r0, r4, r1
 8004a34:	4283      	cmp	r3, r0
 8004a36:	d103      	bne.n	8004a40 <_free_r+0x88>
 8004a38:	6818      	ldr	r0, [r3, #0]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	1841      	adds	r1, r0, r1
 8004a3e:	6021      	str	r1, [r4, #0]
 8004a40:	6063      	str	r3, [r4, #4]
 8004a42:	6054      	str	r4, [r2, #4]
 8004a44:	e7ca      	b.n	80049dc <_free_r+0x24>
 8004a46:	46c0      	nop			; (mov r8, r8)
 8004a48:	20000398 	.word	0x20000398

08004a4c <sbrk_aligned>:
 8004a4c:	b570      	push	{r4, r5, r6, lr}
 8004a4e:	4e0f      	ldr	r6, [pc, #60]	; (8004a8c <sbrk_aligned+0x40>)
 8004a50:	000d      	movs	r5, r1
 8004a52:	6831      	ldr	r1, [r6, #0]
 8004a54:	0004      	movs	r4, r0
 8004a56:	2900      	cmp	r1, #0
 8004a58:	d102      	bne.n	8004a60 <sbrk_aligned+0x14>
 8004a5a:	f000 f88f 	bl	8004b7c <_sbrk_r>
 8004a5e:	6030      	str	r0, [r6, #0]
 8004a60:	0029      	movs	r1, r5
 8004a62:	0020      	movs	r0, r4
 8004a64:	f000 f88a 	bl	8004b7c <_sbrk_r>
 8004a68:	1c43      	adds	r3, r0, #1
 8004a6a:	d00a      	beq.n	8004a82 <sbrk_aligned+0x36>
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	1cc5      	adds	r5, r0, #3
 8004a70:	439d      	bics	r5, r3
 8004a72:	42a8      	cmp	r0, r5
 8004a74:	d007      	beq.n	8004a86 <sbrk_aligned+0x3a>
 8004a76:	1a29      	subs	r1, r5, r0
 8004a78:	0020      	movs	r0, r4
 8004a7a:	f000 f87f 	bl	8004b7c <_sbrk_r>
 8004a7e:	1c43      	adds	r3, r0, #1
 8004a80:	d101      	bne.n	8004a86 <sbrk_aligned+0x3a>
 8004a82:	2501      	movs	r5, #1
 8004a84:	426d      	negs	r5, r5
 8004a86:	0028      	movs	r0, r5
 8004a88:	bd70      	pop	{r4, r5, r6, pc}
 8004a8a:	46c0      	nop			; (mov r8, r8)
 8004a8c:	2000039c 	.word	0x2000039c

08004a90 <_malloc_r>:
 8004a90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a92:	2203      	movs	r2, #3
 8004a94:	1ccb      	adds	r3, r1, #3
 8004a96:	4393      	bics	r3, r2
 8004a98:	3308      	adds	r3, #8
 8004a9a:	0006      	movs	r6, r0
 8004a9c:	001f      	movs	r7, r3
 8004a9e:	2b0c      	cmp	r3, #12
 8004aa0:	d232      	bcs.n	8004b08 <_malloc_r+0x78>
 8004aa2:	270c      	movs	r7, #12
 8004aa4:	42b9      	cmp	r1, r7
 8004aa6:	d831      	bhi.n	8004b0c <_malloc_r+0x7c>
 8004aa8:	0030      	movs	r0, r6
 8004aaa:	f000 f9d7 	bl	8004e5c <__malloc_lock>
 8004aae:	4d32      	ldr	r5, [pc, #200]	; (8004b78 <_malloc_r+0xe8>)
 8004ab0:	682b      	ldr	r3, [r5, #0]
 8004ab2:	001c      	movs	r4, r3
 8004ab4:	2c00      	cmp	r4, #0
 8004ab6:	d12e      	bne.n	8004b16 <_malloc_r+0x86>
 8004ab8:	0039      	movs	r1, r7
 8004aba:	0030      	movs	r0, r6
 8004abc:	f7ff ffc6 	bl	8004a4c <sbrk_aligned>
 8004ac0:	0004      	movs	r4, r0
 8004ac2:	1c43      	adds	r3, r0, #1
 8004ac4:	d11e      	bne.n	8004b04 <_malloc_r+0x74>
 8004ac6:	682c      	ldr	r4, [r5, #0]
 8004ac8:	0025      	movs	r5, r4
 8004aca:	2d00      	cmp	r5, #0
 8004acc:	d14a      	bne.n	8004b64 <_malloc_r+0xd4>
 8004ace:	6823      	ldr	r3, [r4, #0]
 8004ad0:	0029      	movs	r1, r5
 8004ad2:	18e3      	adds	r3, r4, r3
 8004ad4:	0030      	movs	r0, r6
 8004ad6:	9301      	str	r3, [sp, #4]
 8004ad8:	f000 f850 	bl	8004b7c <_sbrk_r>
 8004adc:	9b01      	ldr	r3, [sp, #4]
 8004ade:	4283      	cmp	r3, r0
 8004ae0:	d143      	bne.n	8004b6a <_malloc_r+0xda>
 8004ae2:	6823      	ldr	r3, [r4, #0]
 8004ae4:	3703      	adds	r7, #3
 8004ae6:	1aff      	subs	r7, r7, r3
 8004ae8:	2303      	movs	r3, #3
 8004aea:	439f      	bics	r7, r3
 8004aec:	3708      	adds	r7, #8
 8004aee:	2f0c      	cmp	r7, #12
 8004af0:	d200      	bcs.n	8004af4 <_malloc_r+0x64>
 8004af2:	270c      	movs	r7, #12
 8004af4:	0039      	movs	r1, r7
 8004af6:	0030      	movs	r0, r6
 8004af8:	f7ff ffa8 	bl	8004a4c <sbrk_aligned>
 8004afc:	1c43      	adds	r3, r0, #1
 8004afe:	d034      	beq.n	8004b6a <_malloc_r+0xda>
 8004b00:	6823      	ldr	r3, [r4, #0]
 8004b02:	19df      	adds	r7, r3, r7
 8004b04:	6027      	str	r7, [r4, #0]
 8004b06:	e013      	b.n	8004b30 <_malloc_r+0xa0>
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	dacb      	bge.n	8004aa4 <_malloc_r+0x14>
 8004b0c:	230c      	movs	r3, #12
 8004b0e:	2500      	movs	r5, #0
 8004b10:	6033      	str	r3, [r6, #0]
 8004b12:	0028      	movs	r0, r5
 8004b14:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004b16:	6822      	ldr	r2, [r4, #0]
 8004b18:	1bd1      	subs	r1, r2, r7
 8004b1a:	d420      	bmi.n	8004b5e <_malloc_r+0xce>
 8004b1c:	290b      	cmp	r1, #11
 8004b1e:	d917      	bls.n	8004b50 <_malloc_r+0xc0>
 8004b20:	19e2      	adds	r2, r4, r7
 8004b22:	6027      	str	r7, [r4, #0]
 8004b24:	42a3      	cmp	r3, r4
 8004b26:	d111      	bne.n	8004b4c <_malloc_r+0xbc>
 8004b28:	602a      	str	r2, [r5, #0]
 8004b2a:	6863      	ldr	r3, [r4, #4]
 8004b2c:	6011      	str	r1, [r2, #0]
 8004b2e:	6053      	str	r3, [r2, #4]
 8004b30:	0030      	movs	r0, r6
 8004b32:	0025      	movs	r5, r4
 8004b34:	f000 f99a 	bl	8004e6c <__malloc_unlock>
 8004b38:	2207      	movs	r2, #7
 8004b3a:	350b      	adds	r5, #11
 8004b3c:	1d23      	adds	r3, r4, #4
 8004b3e:	4395      	bics	r5, r2
 8004b40:	1aea      	subs	r2, r5, r3
 8004b42:	429d      	cmp	r5, r3
 8004b44:	d0e5      	beq.n	8004b12 <_malloc_r+0x82>
 8004b46:	1b5b      	subs	r3, r3, r5
 8004b48:	50a3      	str	r3, [r4, r2]
 8004b4a:	e7e2      	b.n	8004b12 <_malloc_r+0x82>
 8004b4c:	605a      	str	r2, [r3, #4]
 8004b4e:	e7ec      	b.n	8004b2a <_malloc_r+0x9a>
 8004b50:	6862      	ldr	r2, [r4, #4]
 8004b52:	42a3      	cmp	r3, r4
 8004b54:	d101      	bne.n	8004b5a <_malloc_r+0xca>
 8004b56:	602a      	str	r2, [r5, #0]
 8004b58:	e7ea      	b.n	8004b30 <_malloc_r+0xa0>
 8004b5a:	605a      	str	r2, [r3, #4]
 8004b5c:	e7e8      	b.n	8004b30 <_malloc_r+0xa0>
 8004b5e:	0023      	movs	r3, r4
 8004b60:	6864      	ldr	r4, [r4, #4]
 8004b62:	e7a7      	b.n	8004ab4 <_malloc_r+0x24>
 8004b64:	002c      	movs	r4, r5
 8004b66:	686d      	ldr	r5, [r5, #4]
 8004b68:	e7af      	b.n	8004aca <_malloc_r+0x3a>
 8004b6a:	230c      	movs	r3, #12
 8004b6c:	0030      	movs	r0, r6
 8004b6e:	6033      	str	r3, [r6, #0]
 8004b70:	f000 f97c 	bl	8004e6c <__malloc_unlock>
 8004b74:	e7cd      	b.n	8004b12 <_malloc_r+0x82>
 8004b76:	46c0      	nop			; (mov r8, r8)
 8004b78:	20000398 	.word	0x20000398

08004b7c <_sbrk_r>:
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	b570      	push	{r4, r5, r6, lr}
 8004b80:	4d06      	ldr	r5, [pc, #24]	; (8004b9c <_sbrk_r+0x20>)
 8004b82:	0004      	movs	r4, r0
 8004b84:	0008      	movs	r0, r1
 8004b86:	602b      	str	r3, [r5, #0]
 8004b88:	f7fc fa82 	bl	8001090 <_sbrk>
 8004b8c:	1c43      	adds	r3, r0, #1
 8004b8e:	d103      	bne.n	8004b98 <_sbrk_r+0x1c>
 8004b90:	682b      	ldr	r3, [r5, #0]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d000      	beq.n	8004b98 <_sbrk_r+0x1c>
 8004b96:	6023      	str	r3, [r4, #0]
 8004b98:	bd70      	pop	{r4, r5, r6, pc}
 8004b9a:	46c0      	nop			; (mov r8, r8)
 8004b9c:	200003a0 	.word	0x200003a0

08004ba0 <siprintf>:
 8004ba0:	b40e      	push	{r1, r2, r3}
 8004ba2:	b500      	push	{lr}
 8004ba4:	490b      	ldr	r1, [pc, #44]	; (8004bd4 <siprintf+0x34>)
 8004ba6:	b09c      	sub	sp, #112	; 0x70
 8004ba8:	ab1d      	add	r3, sp, #116	; 0x74
 8004baa:	9002      	str	r0, [sp, #8]
 8004bac:	9006      	str	r0, [sp, #24]
 8004bae:	9107      	str	r1, [sp, #28]
 8004bb0:	9104      	str	r1, [sp, #16]
 8004bb2:	4809      	ldr	r0, [pc, #36]	; (8004bd8 <siprintf+0x38>)
 8004bb4:	4909      	ldr	r1, [pc, #36]	; (8004bdc <siprintf+0x3c>)
 8004bb6:	cb04      	ldmia	r3!, {r2}
 8004bb8:	9105      	str	r1, [sp, #20]
 8004bba:	6800      	ldr	r0, [r0, #0]
 8004bbc:	a902      	add	r1, sp, #8
 8004bbe:	9301      	str	r3, [sp, #4]
 8004bc0:	f000 f9be 	bl	8004f40 <_svfiprintf_r>
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	9a02      	ldr	r2, [sp, #8]
 8004bc8:	7013      	strb	r3, [r2, #0]
 8004bca:	b01c      	add	sp, #112	; 0x70
 8004bcc:	bc08      	pop	{r3}
 8004bce:	b003      	add	sp, #12
 8004bd0:	4718      	bx	r3
 8004bd2:	46c0      	nop			; (mov r8, r8)
 8004bd4:	7fffffff 	.word	0x7fffffff
 8004bd8:	20000070 	.word	0x20000070
 8004bdc:	ffff0208 	.word	0xffff0208

08004be0 <strncmp>:
 8004be0:	b530      	push	{r4, r5, lr}
 8004be2:	0005      	movs	r5, r0
 8004be4:	1e10      	subs	r0, r2, #0
 8004be6:	d008      	beq.n	8004bfa <strncmp+0x1a>
 8004be8:	2400      	movs	r4, #0
 8004bea:	3a01      	subs	r2, #1
 8004bec:	5d2b      	ldrb	r3, [r5, r4]
 8004bee:	5d08      	ldrb	r0, [r1, r4]
 8004bf0:	4283      	cmp	r3, r0
 8004bf2:	d101      	bne.n	8004bf8 <strncmp+0x18>
 8004bf4:	4294      	cmp	r4, r2
 8004bf6:	d101      	bne.n	8004bfc <strncmp+0x1c>
 8004bf8:	1a18      	subs	r0, r3, r0
 8004bfa:	bd30      	pop	{r4, r5, pc}
 8004bfc:	3401      	adds	r4, #1
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d1f4      	bne.n	8004bec <strncmp+0xc>
 8004c02:	e7f9      	b.n	8004bf8 <strncmp+0x18>

08004c04 <strtok>:
 8004c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c06:	4b16      	ldr	r3, [pc, #88]	; (8004c60 <strtok+0x5c>)
 8004c08:	0005      	movs	r5, r0
 8004c0a:	681f      	ldr	r7, [r3, #0]
 8004c0c:	000e      	movs	r6, r1
 8004c0e:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8004c10:	2c00      	cmp	r4, #0
 8004c12:	d11d      	bne.n	8004c50 <strtok+0x4c>
 8004c14:	2050      	movs	r0, #80	; 0x50
 8004c16:	f7ff feb3 	bl	8004980 <malloc>
 8004c1a:	1e02      	subs	r2, r0, #0
 8004c1c:	65b8      	str	r0, [r7, #88]	; 0x58
 8004c1e:	d104      	bne.n	8004c2a <strtok+0x26>
 8004c20:	2157      	movs	r1, #87	; 0x57
 8004c22:	4b10      	ldr	r3, [pc, #64]	; (8004c64 <strtok+0x60>)
 8004c24:	4810      	ldr	r0, [pc, #64]	; (8004c68 <strtok+0x64>)
 8004c26:	f000 f8eb 	bl	8004e00 <__assert_func>
 8004c2a:	6004      	str	r4, [r0, #0]
 8004c2c:	6044      	str	r4, [r0, #4]
 8004c2e:	6084      	str	r4, [r0, #8]
 8004c30:	60c4      	str	r4, [r0, #12]
 8004c32:	6104      	str	r4, [r0, #16]
 8004c34:	6144      	str	r4, [r0, #20]
 8004c36:	6184      	str	r4, [r0, #24]
 8004c38:	6284      	str	r4, [r0, #40]	; 0x28
 8004c3a:	62c4      	str	r4, [r0, #44]	; 0x2c
 8004c3c:	6304      	str	r4, [r0, #48]	; 0x30
 8004c3e:	6344      	str	r4, [r0, #52]	; 0x34
 8004c40:	6384      	str	r4, [r0, #56]	; 0x38
 8004c42:	63c4      	str	r4, [r0, #60]	; 0x3c
 8004c44:	6404      	str	r4, [r0, #64]	; 0x40
 8004c46:	6444      	str	r4, [r0, #68]	; 0x44
 8004c48:	6484      	str	r4, [r0, #72]	; 0x48
 8004c4a:	64c4      	str	r4, [r0, #76]	; 0x4c
 8004c4c:	7704      	strb	r4, [r0, #28]
 8004c4e:	6244      	str	r4, [r0, #36]	; 0x24
 8004c50:	0031      	movs	r1, r6
 8004c52:	0028      	movs	r0, r5
 8004c54:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c56:	2301      	movs	r3, #1
 8004c58:	f000 f808 	bl	8004c6c <__strtok_r>
 8004c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c5e:	46c0      	nop			; (mov r8, r8)
 8004c60:	20000070 	.word	0x20000070
 8004c64:	080061c4 	.word	0x080061c4
 8004c68:	080061db 	.word	0x080061db

08004c6c <__strtok_r>:
 8004c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c6e:	2800      	cmp	r0, #0
 8004c70:	d102      	bne.n	8004c78 <__strtok_r+0xc>
 8004c72:	6810      	ldr	r0, [r2, #0]
 8004c74:	2800      	cmp	r0, #0
 8004c76:	d013      	beq.n	8004ca0 <__strtok_r+0x34>
 8004c78:	0004      	movs	r4, r0
 8004c7a:	0020      	movs	r0, r4
 8004c7c:	000e      	movs	r6, r1
 8004c7e:	7805      	ldrb	r5, [r0, #0]
 8004c80:	3401      	adds	r4, #1
 8004c82:	7837      	ldrb	r7, [r6, #0]
 8004c84:	2f00      	cmp	r7, #0
 8004c86:	d104      	bne.n	8004c92 <__strtok_r+0x26>
 8004c88:	2d00      	cmp	r5, #0
 8004c8a:	d10f      	bne.n	8004cac <__strtok_r+0x40>
 8004c8c:	0028      	movs	r0, r5
 8004c8e:	6015      	str	r5, [r2, #0]
 8004c90:	e006      	b.n	8004ca0 <__strtok_r+0x34>
 8004c92:	3601      	adds	r6, #1
 8004c94:	42bd      	cmp	r5, r7
 8004c96:	d1f4      	bne.n	8004c82 <__strtok_r+0x16>
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d1ee      	bne.n	8004c7a <__strtok_r+0xe>
 8004c9c:	6014      	str	r4, [r2, #0]
 8004c9e:	7003      	strb	r3, [r0, #0]
 8004ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ca2:	002f      	movs	r7, r5
 8004ca4:	e00f      	b.n	8004cc6 <__strtok_r+0x5a>
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	2e00      	cmp	r6, #0
 8004caa:	d104      	bne.n	8004cb6 <__strtok_r+0x4a>
 8004cac:	0023      	movs	r3, r4
 8004cae:	3401      	adds	r4, #1
 8004cb0:	781d      	ldrb	r5, [r3, #0]
 8004cb2:	0027      	movs	r7, r4
 8004cb4:	000b      	movs	r3, r1
 8004cb6:	781e      	ldrb	r6, [r3, #0]
 8004cb8:	42b5      	cmp	r5, r6
 8004cba:	d1f4      	bne.n	8004ca6 <__strtok_r+0x3a>
 8004cbc:	2d00      	cmp	r5, #0
 8004cbe:	d0f0      	beq.n	8004ca2 <__strtok_r+0x36>
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	3c01      	subs	r4, #1
 8004cc4:	7023      	strb	r3, [r4, #0]
 8004cc6:	6017      	str	r7, [r2, #0]
 8004cc8:	e7ea      	b.n	8004ca0 <__strtok_r+0x34>
	...

08004ccc <_strtol_l.constprop.0>:
 8004ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cce:	b087      	sub	sp, #28
 8004cd0:	001e      	movs	r6, r3
 8004cd2:	9005      	str	r0, [sp, #20]
 8004cd4:	9101      	str	r1, [sp, #4]
 8004cd6:	9202      	str	r2, [sp, #8]
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d045      	beq.n	8004d68 <_strtol_l.constprop.0+0x9c>
 8004cdc:	000b      	movs	r3, r1
 8004cde:	2e24      	cmp	r6, #36	; 0x24
 8004ce0:	d842      	bhi.n	8004d68 <_strtol_l.constprop.0+0x9c>
 8004ce2:	4a3f      	ldr	r2, [pc, #252]	; (8004de0 <_strtol_l.constprop.0+0x114>)
 8004ce4:	2108      	movs	r1, #8
 8004ce6:	4694      	mov	ip, r2
 8004ce8:	001a      	movs	r2, r3
 8004cea:	4660      	mov	r0, ip
 8004cec:	7814      	ldrb	r4, [r2, #0]
 8004cee:	3301      	adds	r3, #1
 8004cf0:	5d00      	ldrb	r0, [r0, r4]
 8004cf2:	001d      	movs	r5, r3
 8004cf4:	0007      	movs	r7, r0
 8004cf6:	400f      	ands	r7, r1
 8004cf8:	4208      	tst	r0, r1
 8004cfa:	d1f5      	bne.n	8004ce8 <_strtol_l.constprop.0+0x1c>
 8004cfc:	2c2d      	cmp	r4, #45	; 0x2d
 8004cfe:	d13a      	bne.n	8004d76 <_strtol_l.constprop.0+0xaa>
 8004d00:	2701      	movs	r7, #1
 8004d02:	781c      	ldrb	r4, [r3, #0]
 8004d04:	1c95      	adds	r5, r2, #2
 8004d06:	2e00      	cmp	r6, #0
 8004d08:	d065      	beq.n	8004dd6 <_strtol_l.constprop.0+0x10a>
 8004d0a:	2e10      	cmp	r6, #16
 8004d0c:	d109      	bne.n	8004d22 <_strtol_l.constprop.0+0x56>
 8004d0e:	2c30      	cmp	r4, #48	; 0x30
 8004d10:	d107      	bne.n	8004d22 <_strtol_l.constprop.0+0x56>
 8004d12:	2220      	movs	r2, #32
 8004d14:	782b      	ldrb	r3, [r5, #0]
 8004d16:	4393      	bics	r3, r2
 8004d18:	2b58      	cmp	r3, #88	; 0x58
 8004d1a:	d157      	bne.n	8004dcc <_strtol_l.constprop.0+0x100>
 8004d1c:	2610      	movs	r6, #16
 8004d1e:	786c      	ldrb	r4, [r5, #1]
 8004d20:	3502      	adds	r5, #2
 8004d22:	4b30      	ldr	r3, [pc, #192]	; (8004de4 <_strtol_l.constprop.0+0x118>)
 8004d24:	0031      	movs	r1, r6
 8004d26:	18fb      	adds	r3, r7, r3
 8004d28:	0018      	movs	r0, r3
 8004d2a:	9303      	str	r3, [sp, #12]
 8004d2c:	f7fb fa82 	bl	8000234 <__aeabi_uidivmod>
 8004d30:	2300      	movs	r3, #0
 8004d32:	2201      	movs	r2, #1
 8004d34:	4684      	mov	ip, r0
 8004d36:	0018      	movs	r0, r3
 8004d38:	9104      	str	r1, [sp, #16]
 8004d3a:	4252      	negs	r2, r2
 8004d3c:	0021      	movs	r1, r4
 8004d3e:	3930      	subs	r1, #48	; 0x30
 8004d40:	2909      	cmp	r1, #9
 8004d42:	d81d      	bhi.n	8004d80 <_strtol_l.constprop.0+0xb4>
 8004d44:	000c      	movs	r4, r1
 8004d46:	42a6      	cmp	r6, r4
 8004d48:	dd28      	ble.n	8004d9c <_strtol_l.constprop.0+0xd0>
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	db24      	blt.n	8004d98 <_strtol_l.constprop.0+0xcc>
 8004d4e:	0013      	movs	r3, r2
 8004d50:	4584      	cmp	ip, r0
 8004d52:	d306      	bcc.n	8004d62 <_strtol_l.constprop.0+0x96>
 8004d54:	d102      	bne.n	8004d5c <_strtol_l.constprop.0+0x90>
 8004d56:	9904      	ldr	r1, [sp, #16]
 8004d58:	42a1      	cmp	r1, r4
 8004d5a:	db02      	blt.n	8004d62 <_strtol_l.constprop.0+0x96>
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	4370      	muls	r0, r6
 8004d60:	1820      	adds	r0, r4, r0
 8004d62:	782c      	ldrb	r4, [r5, #0]
 8004d64:	3501      	adds	r5, #1
 8004d66:	e7e9      	b.n	8004d3c <_strtol_l.constprop.0+0x70>
 8004d68:	f7ff fde0 	bl	800492c <__errno>
 8004d6c:	2316      	movs	r3, #22
 8004d6e:	6003      	str	r3, [r0, #0]
 8004d70:	2000      	movs	r0, #0
 8004d72:	b007      	add	sp, #28
 8004d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d76:	2c2b      	cmp	r4, #43	; 0x2b
 8004d78:	d1c5      	bne.n	8004d06 <_strtol_l.constprop.0+0x3a>
 8004d7a:	781c      	ldrb	r4, [r3, #0]
 8004d7c:	1c95      	adds	r5, r2, #2
 8004d7e:	e7c2      	b.n	8004d06 <_strtol_l.constprop.0+0x3a>
 8004d80:	0021      	movs	r1, r4
 8004d82:	3941      	subs	r1, #65	; 0x41
 8004d84:	2919      	cmp	r1, #25
 8004d86:	d801      	bhi.n	8004d8c <_strtol_l.constprop.0+0xc0>
 8004d88:	3c37      	subs	r4, #55	; 0x37
 8004d8a:	e7dc      	b.n	8004d46 <_strtol_l.constprop.0+0x7a>
 8004d8c:	0021      	movs	r1, r4
 8004d8e:	3961      	subs	r1, #97	; 0x61
 8004d90:	2919      	cmp	r1, #25
 8004d92:	d803      	bhi.n	8004d9c <_strtol_l.constprop.0+0xd0>
 8004d94:	3c57      	subs	r4, #87	; 0x57
 8004d96:	e7d6      	b.n	8004d46 <_strtol_l.constprop.0+0x7a>
 8004d98:	0013      	movs	r3, r2
 8004d9a:	e7e2      	b.n	8004d62 <_strtol_l.constprop.0+0x96>
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	da09      	bge.n	8004db4 <_strtol_l.constprop.0+0xe8>
 8004da0:	2322      	movs	r3, #34	; 0x22
 8004da2:	9a05      	ldr	r2, [sp, #20]
 8004da4:	9803      	ldr	r0, [sp, #12]
 8004da6:	6013      	str	r3, [r2, #0]
 8004da8:	9b02      	ldr	r3, [sp, #8]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d0e1      	beq.n	8004d72 <_strtol_l.constprop.0+0xa6>
 8004dae:	1e6b      	subs	r3, r5, #1
 8004db0:	9301      	str	r3, [sp, #4]
 8004db2:	e007      	b.n	8004dc4 <_strtol_l.constprop.0+0xf8>
 8004db4:	2f00      	cmp	r7, #0
 8004db6:	d000      	beq.n	8004dba <_strtol_l.constprop.0+0xee>
 8004db8:	4240      	negs	r0, r0
 8004dba:	9a02      	ldr	r2, [sp, #8]
 8004dbc:	2a00      	cmp	r2, #0
 8004dbe:	d0d8      	beq.n	8004d72 <_strtol_l.constprop.0+0xa6>
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d1f4      	bne.n	8004dae <_strtol_l.constprop.0+0xe2>
 8004dc4:	9b02      	ldr	r3, [sp, #8]
 8004dc6:	9a01      	ldr	r2, [sp, #4]
 8004dc8:	601a      	str	r2, [r3, #0]
 8004dca:	e7d2      	b.n	8004d72 <_strtol_l.constprop.0+0xa6>
 8004dcc:	2430      	movs	r4, #48	; 0x30
 8004dce:	2e00      	cmp	r6, #0
 8004dd0:	d1a7      	bne.n	8004d22 <_strtol_l.constprop.0+0x56>
 8004dd2:	3608      	adds	r6, #8
 8004dd4:	e7a5      	b.n	8004d22 <_strtol_l.constprop.0+0x56>
 8004dd6:	2c30      	cmp	r4, #48	; 0x30
 8004dd8:	d09b      	beq.n	8004d12 <_strtol_l.constprop.0+0x46>
 8004dda:	260a      	movs	r6, #10
 8004ddc:	e7a1      	b.n	8004d22 <_strtol_l.constprop.0+0x56>
 8004dde:	46c0      	nop			; (mov r8, r8)
 8004de0:	08006275 	.word	0x08006275
 8004de4:	7fffffff 	.word	0x7fffffff

08004de8 <strtol>:
 8004de8:	b510      	push	{r4, lr}
 8004dea:	0013      	movs	r3, r2
 8004dec:	000a      	movs	r2, r1
 8004dee:	0001      	movs	r1, r0
 8004df0:	4802      	ldr	r0, [pc, #8]	; (8004dfc <strtol+0x14>)
 8004df2:	6800      	ldr	r0, [r0, #0]
 8004df4:	f7ff ff6a 	bl	8004ccc <_strtol_l.constprop.0>
 8004df8:	bd10      	pop	{r4, pc}
 8004dfa:	46c0      	nop			; (mov r8, r8)
 8004dfc:	20000070 	.word	0x20000070

08004e00 <__assert_func>:
 8004e00:	b530      	push	{r4, r5, lr}
 8004e02:	0014      	movs	r4, r2
 8004e04:	001a      	movs	r2, r3
 8004e06:	4b09      	ldr	r3, [pc, #36]	; (8004e2c <__assert_func+0x2c>)
 8004e08:	0005      	movs	r5, r0
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	b085      	sub	sp, #20
 8004e0e:	68d8      	ldr	r0, [r3, #12]
 8004e10:	4b07      	ldr	r3, [pc, #28]	; (8004e30 <__assert_func+0x30>)
 8004e12:	2c00      	cmp	r4, #0
 8004e14:	d101      	bne.n	8004e1a <__assert_func+0x1a>
 8004e16:	4b07      	ldr	r3, [pc, #28]	; (8004e34 <__assert_func+0x34>)
 8004e18:	001c      	movs	r4, r3
 8004e1a:	9301      	str	r3, [sp, #4]
 8004e1c:	9100      	str	r1, [sp, #0]
 8004e1e:	002b      	movs	r3, r5
 8004e20:	4905      	ldr	r1, [pc, #20]	; (8004e38 <__assert_func+0x38>)
 8004e22:	9402      	str	r4, [sp, #8]
 8004e24:	f000 f80a 	bl	8004e3c <fiprintf>
 8004e28:	f000 fd3c 	bl	80058a4 <abort>
 8004e2c:	20000070 	.word	0x20000070
 8004e30:	08006238 	.word	0x08006238
 8004e34:	08006273 	.word	0x08006273
 8004e38:	08006245 	.word	0x08006245

08004e3c <fiprintf>:
 8004e3c:	b40e      	push	{r1, r2, r3}
 8004e3e:	b503      	push	{r0, r1, lr}
 8004e40:	0001      	movs	r1, r0
 8004e42:	ab03      	add	r3, sp, #12
 8004e44:	4804      	ldr	r0, [pc, #16]	; (8004e58 <fiprintf+0x1c>)
 8004e46:	cb04      	ldmia	r3!, {r2}
 8004e48:	6800      	ldr	r0, [r0, #0]
 8004e4a:	9301      	str	r3, [sp, #4]
 8004e4c:	f000 f9a0 	bl	8005190 <_vfiprintf_r>
 8004e50:	b002      	add	sp, #8
 8004e52:	bc08      	pop	{r3}
 8004e54:	b003      	add	sp, #12
 8004e56:	4718      	bx	r3
 8004e58:	20000070 	.word	0x20000070

08004e5c <__malloc_lock>:
 8004e5c:	b510      	push	{r4, lr}
 8004e5e:	4802      	ldr	r0, [pc, #8]	; (8004e68 <__malloc_lock+0xc>)
 8004e60:	f000 fef7 	bl	8005c52 <__retarget_lock_acquire_recursive>
 8004e64:	bd10      	pop	{r4, pc}
 8004e66:	46c0      	nop			; (mov r8, r8)
 8004e68:	200003a4 	.word	0x200003a4

08004e6c <__malloc_unlock>:
 8004e6c:	b510      	push	{r4, lr}
 8004e6e:	4802      	ldr	r0, [pc, #8]	; (8004e78 <__malloc_unlock+0xc>)
 8004e70:	f000 fef0 	bl	8005c54 <__retarget_lock_release_recursive>
 8004e74:	bd10      	pop	{r4, pc}
 8004e76:	46c0      	nop			; (mov r8, r8)
 8004e78:	200003a4 	.word	0x200003a4

08004e7c <__ssputs_r>:
 8004e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e7e:	688e      	ldr	r6, [r1, #8]
 8004e80:	b085      	sub	sp, #20
 8004e82:	0007      	movs	r7, r0
 8004e84:	000c      	movs	r4, r1
 8004e86:	9203      	str	r2, [sp, #12]
 8004e88:	9301      	str	r3, [sp, #4]
 8004e8a:	429e      	cmp	r6, r3
 8004e8c:	d83c      	bhi.n	8004f08 <__ssputs_r+0x8c>
 8004e8e:	2390      	movs	r3, #144	; 0x90
 8004e90:	898a      	ldrh	r2, [r1, #12]
 8004e92:	00db      	lsls	r3, r3, #3
 8004e94:	421a      	tst	r2, r3
 8004e96:	d034      	beq.n	8004f02 <__ssputs_r+0x86>
 8004e98:	6909      	ldr	r1, [r1, #16]
 8004e9a:	6823      	ldr	r3, [r4, #0]
 8004e9c:	6960      	ldr	r0, [r4, #20]
 8004e9e:	1a5b      	subs	r3, r3, r1
 8004ea0:	9302      	str	r3, [sp, #8]
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	4343      	muls	r3, r0
 8004ea6:	0fdd      	lsrs	r5, r3, #31
 8004ea8:	18ed      	adds	r5, r5, r3
 8004eaa:	9b01      	ldr	r3, [sp, #4]
 8004eac:	9802      	ldr	r0, [sp, #8]
 8004eae:	3301      	adds	r3, #1
 8004eb0:	181b      	adds	r3, r3, r0
 8004eb2:	106d      	asrs	r5, r5, #1
 8004eb4:	42ab      	cmp	r3, r5
 8004eb6:	d900      	bls.n	8004eba <__ssputs_r+0x3e>
 8004eb8:	001d      	movs	r5, r3
 8004eba:	0553      	lsls	r3, r2, #21
 8004ebc:	d532      	bpl.n	8004f24 <__ssputs_r+0xa8>
 8004ebe:	0029      	movs	r1, r5
 8004ec0:	0038      	movs	r0, r7
 8004ec2:	f7ff fde5 	bl	8004a90 <_malloc_r>
 8004ec6:	1e06      	subs	r6, r0, #0
 8004ec8:	d109      	bne.n	8004ede <__ssputs_r+0x62>
 8004eca:	230c      	movs	r3, #12
 8004ecc:	603b      	str	r3, [r7, #0]
 8004ece:	2340      	movs	r3, #64	; 0x40
 8004ed0:	2001      	movs	r0, #1
 8004ed2:	89a2      	ldrh	r2, [r4, #12]
 8004ed4:	4240      	negs	r0, r0
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	81a3      	strh	r3, [r4, #12]
 8004eda:	b005      	add	sp, #20
 8004edc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ede:	9a02      	ldr	r2, [sp, #8]
 8004ee0:	6921      	ldr	r1, [r4, #16]
 8004ee2:	f000 ff30 	bl	8005d46 <memcpy>
 8004ee6:	89a3      	ldrh	r3, [r4, #12]
 8004ee8:	4a14      	ldr	r2, [pc, #80]	; (8004f3c <__ssputs_r+0xc0>)
 8004eea:	401a      	ands	r2, r3
 8004eec:	2380      	movs	r3, #128	; 0x80
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	81a3      	strh	r3, [r4, #12]
 8004ef2:	9b02      	ldr	r3, [sp, #8]
 8004ef4:	6126      	str	r6, [r4, #16]
 8004ef6:	18f6      	adds	r6, r6, r3
 8004ef8:	6026      	str	r6, [r4, #0]
 8004efa:	6165      	str	r5, [r4, #20]
 8004efc:	9e01      	ldr	r6, [sp, #4]
 8004efe:	1aed      	subs	r5, r5, r3
 8004f00:	60a5      	str	r5, [r4, #8]
 8004f02:	9b01      	ldr	r3, [sp, #4]
 8004f04:	429e      	cmp	r6, r3
 8004f06:	d900      	bls.n	8004f0a <__ssputs_r+0x8e>
 8004f08:	9e01      	ldr	r6, [sp, #4]
 8004f0a:	0032      	movs	r2, r6
 8004f0c:	9903      	ldr	r1, [sp, #12]
 8004f0e:	6820      	ldr	r0, [r4, #0]
 8004f10:	f000 ff22 	bl	8005d58 <memmove>
 8004f14:	68a3      	ldr	r3, [r4, #8]
 8004f16:	2000      	movs	r0, #0
 8004f18:	1b9b      	subs	r3, r3, r6
 8004f1a:	60a3      	str	r3, [r4, #8]
 8004f1c:	6823      	ldr	r3, [r4, #0]
 8004f1e:	199e      	adds	r6, r3, r6
 8004f20:	6026      	str	r6, [r4, #0]
 8004f22:	e7da      	b.n	8004eda <__ssputs_r+0x5e>
 8004f24:	002a      	movs	r2, r5
 8004f26:	0038      	movs	r0, r7
 8004f28:	f000 ff29 	bl	8005d7e <_realloc_r>
 8004f2c:	1e06      	subs	r6, r0, #0
 8004f2e:	d1e0      	bne.n	8004ef2 <__ssputs_r+0x76>
 8004f30:	0038      	movs	r0, r7
 8004f32:	6921      	ldr	r1, [r4, #16]
 8004f34:	f7ff fd40 	bl	80049b8 <_free_r>
 8004f38:	e7c7      	b.n	8004eca <__ssputs_r+0x4e>
 8004f3a:	46c0      	nop			; (mov r8, r8)
 8004f3c:	fffffb7f 	.word	0xfffffb7f

08004f40 <_svfiprintf_r>:
 8004f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f42:	b0a1      	sub	sp, #132	; 0x84
 8004f44:	9003      	str	r0, [sp, #12]
 8004f46:	001d      	movs	r5, r3
 8004f48:	898b      	ldrh	r3, [r1, #12]
 8004f4a:	000f      	movs	r7, r1
 8004f4c:	0016      	movs	r6, r2
 8004f4e:	061b      	lsls	r3, r3, #24
 8004f50:	d511      	bpl.n	8004f76 <_svfiprintf_r+0x36>
 8004f52:	690b      	ldr	r3, [r1, #16]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d10e      	bne.n	8004f76 <_svfiprintf_r+0x36>
 8004f58:	2140      	movs	r1, #64	; 0x40
 8004f5a:	f7ff fd99 	bl	8004a90 <_malloc_r>
 8004f5e:	6038      	str	r0, [r7, #0]
 8004f60:	6138      	str	r0, [r7, #16]
 8004f62:	2800      	cmp	r0, #0
 8004f64:	d105      	bne.n	8004f72 <_svfiprintf_r+0x32>
 8004f66:	230c      	movs	r3, #12
 8004f68:	9a03      	ldr	r2, [sp, #12]
 8004f6a:	3801      	subs	r0, #1
 8004f6c:	6013      	str	r3, [r2, #0]
 8004f6e:	b021      	add	sp, #132	; 0x84
 8004f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f72:	2340      	movs	r3, #64	; 0x40
 8004f74:	617b      	str	r3, [r7, #20]
 8004f76:	2300      	movs	r3, #0
 8004f78:	ac08      	add	r4, sp, #32
 8004f7a:	6163      	str	r3, [r4, #20]
 8004f7c:	3320      	adds	r3, #32
 8004f7e:	7663      	strb	r3, [r4, #25]
 8004f80:	3310      	adds	r3, #16
 8004f82:	76a3      	strb	r3, [r4, #26]
 8004f84:	9507      	str	r5, [sp, #28]
 8004f86:	0035      	movs	r5, r6
 8004f88:	782b      	ldrb	r3, [r5, #0]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d001      	beq.n	8004f92 <_svfiprintf_r+0x52>
 8004f8e:	2b25      	cmp	r3, #37	; 0x25
 8004f90:	d147      	bne.n	8005022 <_svfiprintf_r+0xe2>
 8004f92:	1bab      	subs	r3, r5, r6
 8004f94:	9305      	str	r3, [sp, #20]
 8004f96:	42b5      	cmp	r5, r6
 8004f98:	d00c      	beq.n	8004fb4 <_svfiprintf_r+0x74>
 8004f9a:	0032      	movs	r2, r6
 8004f9c:	0039      	movs	r1, r7
 8004f9e:	9803      	ldr	r0, [sp, #12]
 8004fa0:	f7ff ff6c 	bl	8004e7c <__ssputs_r>
 8004fa4:	1c43      	adds	r3, r0, #1
 8004fa6:	d100      	bne.n	8004faa <_svfiprintf_r+0x6a>
 8004fa8:	e0ae      	b.n	8005108 <_svfiprintf_r+0x1c8>
 8004faa:	6962      	ldr	r2, [r4, #20]
 8004fac:	9b05      	ldr	r3, [sp, #20]
 8004fae:	4694      	mov	ip, r2
 8004fb0:	4463      	add	r3, ip
 8004fb2:	6163      	str	r3, [r4, #20]
 8004fb4:	782b      	ldrb	r3, [r5, #0]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d100      	bne.n	8004fbc <_svfiprintf_r+0x7c>
 8004fba:	e0a5      	b.n	8005108 <_svfiprintf_r+0x1c8>
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	4252      	negs	r2, r2
 8004fc2:	6062      	str	r2, [r4, #4]
 8004fc4:	a904      	add	r1, sp, #16
 8004fc6:	3254      	adds	r2, #84	; 0x54
 8004fc8:	1852      	adds	r2, r2, r1
 8004fca:	1c6e      	adds	r6, r5, #1
 8004fcc:	6023      	str	r3, [r4, #0]
 8004fce:	60e3      	str	r3, [r4, #12]
 8004fd0:	60a3      	str	r3, [r4, #8]
 8004fd2:	7013      	strb	r3, [r2, #0]
 8004fd4:	65a3      	str	r3, [r4, #88]	; 0x58
 8004fd6:	2205      	movs	r2, #5
 8004fd8:	7831      	ldrb	r1, [r6, #0]
 8004fda:	4854      	ldr	r0, [pc, #336]	; (800512c <_svfiprintf_r+0x1ec>)
 8004fdc:	f000 fea8 	bl	8005d30 <memchr>
 8004fe0:	1c75      	adds	r5, r6, #1
 8004fe2:	2800      	cmp	r0, #0
 8004fe4:	d11f      	bne.n	8005026 <_svfiprintf_r+0xe6>
 8004fe6:	6822      	ldr	r2, [r4, #0]
 8004fe8:	06d3      	lsls	r3, r2, #27
 8004fea:	d504      	bpl.n	8004ff6 <_svfiprintf_r+0xb6>
 8004fec:	2353      	movs	r3, #83	; 0x53
 8004fee:	a904      	add	r1, sp, #16
 8004ff0:	185b      	adds	r3, r3, r1
 8004ff2:	2120      	movs	r1, #32
 8004ff4:	7019      	strb	r1, [r3, #0]
 8004ff6:	0713      	lsls	r3, r2, #28
 8004ff8:	d504      	bpl.n	8005004 <_svfiprintf_r+0xc4>
 8004ffa:	2353      	movs	r3, #83	; 0x53
 8004ffc:	a904      	add	r1, sp, #16
 8004ffe:	185b      	adds	r3, r3, r1
 8005000:	212b      	movs	r1, #43	; 0x2b
 8005002:	7019      	strb	r1, [r3, #0]
 8005004:	7833      	ldrb	r3, [r6, #0]
 8005006:	2b2a      	cmp	r3, #42	; 0x2a
 8005008:	d016      	beq.n	8005038 <_svfiprintf_r+0xf8>
 800500a:	0035      	movs	r5, r6
 800500c:	2100      	movs	r1, #0
 800500e:	200a      	movs	r0, #10
 8005010:	68e3      	ldr	r3, [r4, #12]
 8005012:	782a      	ldrb	r2, [r5, #0]
 8005014:	1c6e      	adds	r6, r5, #1
 8005016:	3a30      	subs	r2, #48	; 0x30
 8005018:	2a09      	cmp	r2, #9
 800501a:	d94e      	bls.n	80050ba <_svfiprintf_r+0x17a>
 800501c:	2900      	cmp	r1, #0
 800501e:	d111      	bne.n	8005044 <_svfiprintf_r+0x104>
 8005020:	e017      	b.n	8005052 <_svfiprintf_r+0x112>
 8005022:	3501      	adds	r5, #1
 8005024:	e7b0      	b.n	8004f88 <_svfiprintf_r+0x48>
 8005026:	4b41      	ldr	r3, [pc, #260]	; (800512c <_svfiprintf_r+0x1ec>)
 8005028:	6822      	ldr	r2, [r4, #0]
 800502a:	1ac0      	subs	r0, r0, r3
 800502c:	2301      	movs	r3, #1
 800502e:	4083      	lsls	r3, r0
 8005030:	4313      	orrs	r3, r2
 8005032:	002e      	movs	r6, r5
 8005034:	6023      	str	r3, [r4, #0]
 8005036:	e7ce      	b.n	8004fd6 <_svfiprintf_r+0x96>
 8005038:	9b07      	ldr	r3, [sp, #28]
 800503a:	1d19      	adds	r1, r3, #4
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	9107      	str	r1, [sp, #28]
 8005040:	2b00      	cmp	r3, #0
 8005042:	db01      	blt.n	8005048 <_svfiprintf_r+0x108>
 8005044:	930b      	str	r3, [sp, #44]	; 0x2c
 8005046:	e004      	b.n	8005052 <_svfiprintf_r+0x112>
 8005048:	425b      	negs	r3, r3
 800504a:	60e3      	str	r3, [r4, #12]
 800504c:	2302      	movs	r3, #2
 800504e:	4313      	orrs	r3, r2
 8005050:	6023      	str	r3, [r4, #0]
 8005052:	782b      	ldrb	r3, [r5, #0]
 8005054:	2b2e      	cmp	r3, #46	; 0x2e
 8005056:	d10a      	bne.n	800506e <_svfiprintf_r+0x12e>
 8005058:	786b      	ldrb	r3, [r5, #1]
 800505a:	2b2a      	cmp	r3, #42	; 0x2a
 800505c:	d135      	bne.n	80050ca <_svfiprintf_r+0x18a>
 800505e:	9b07      	ldr	r3, [sp, #28]
 8005060:	3502      	adds	r5, #2
 8005062:	1d1a      	adds	r2, r3, #4
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	9207      	str	r2, [sp, #28]
 8005068:	2b00      	cmp	r3, #0
 800506a:	db2b      	blt.n	80050c4 <_svfiprintf_r+0x184>
 800506c:	9309      	str	r3, [sp, #36]	; 0x24
 800506e:	4e30      	ldr	r6, [pc, #192]	; (8005130 <_svfiprintf_r+0x1f0>)
 8005070:	2203      	movs	r2, #3
 8005072:	0030      	movs	r0, r6
 8005074:	7829      	ldrb	r1, [r5, #0]
 8005076:	f000 fe5b 	bl	8005d30 <memchr>
 800507a:	2800      	cmp	r0, #0
 800507c:	d006      	beq.n	800508c <_svfiprintf_r+0x14c>
 800507e:	2340      	movs	r3, #64	; 0x40
 8005080:	1b80      	subs	r0, r0, r6
 8005082:	4083      	lsls	r3, r0
 8005084:	6822      	ldr	r2, [r4, #0]
 8005086:	3501      	adds	r5, #1
 8005088:	4313      	orrs	r3, r2
 800508a:	6023      	str	r3, [r4, #0]
 800508c:	7829      	ldrb	r1, [r5, #0]
 800508e:	2206      	movs	r2, #6
 8005090:	4828      	ldr	r0, [pc, #160]	; (8005134 <_svfiprintf_r+0x1f4>)
 8005092:	1c6e      	adds	r6, r5, #1
 8005094:	7621      	strb	r1, [r4, #24]
 8005096:	f000 fe4b 	bl	8005d30 <memchr>
 800509a:	2800      	cmp	r0, #0
 800509c:	d03c      	beq.n	8005118 <_svfiprintf_r+0x1d8>
 800509e:	4b26      	ldr	r3, [pc, #152]	; (8005138 <_svfiprintf_r+0x1f8>)
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d125      	bne.n	80050f0 <_svfiprintf_r+0x1b0>
 80050a4:	2207      	movs	r2, #7
 80050a6:	9b07      	ldr	r3, [sp, #28]
 80050a8:	3307      	adds	r3, #7
 80050aa:	4393      	bics	r3, r2
 80050ac:	3308      	adds	r3, #8
 80050ae:	9307      	str	r3, [sp, #28]
 80050b0:	6963      	ldr	r3, [r4, #20]
 80050b2:	9a04      	ldr	r2, [sp, #16]
 80050b4:	189b      	adds	r3, r3, r2
 80050b6:	6163      	str	r3, [r4, #20]
 80050b8:	e765      	b.n	8004f86 <_svfiprintf_r+0x46>
 80050ba:	4343      	muls	r3, r0
 80050bc:	0035      	movs	r5, r6
 80050be:	2101      	movs	r1, #1
 80050c0:	189b      	adds	r3, r3, r2
 80050c2:	e7a6      	b.n	8005012 <_svfiprintf_r+0xd2>
 80050c4:	2301      	movs	r3, #1
 80050c6:	425b      	negs	r3, r3
 80050c8:	e7d0      	b.n	800506c <_svfiprintf_r+0x12c>
 80050ca:	2300      	movs	r3, #0
 80050cc:	200a      	movs	r0, #10
 80050ce:	001a      	movs	r2, r3
 80050d0:	3501      	adds	r5, #1
 80050d2:	6063      	str	r3, [r4, #4]
 80050d4:	7829      	ldrb	r1, [r5, #0]
 80050d6:	1c6e      	adds	r6, r5, #1
 80050d8:	3930      	subs	r1, #48	; 0x30
 80050da:	2909      	cmp	r1, #9
 80050dc:	d903      	bls.n	80050e6 <_svfiprintf_r+0x1a6>
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d0c5      	beq.n	800506e <_svfiprintf_r+0x12e>
 80050e2:	9209      	str	r2, [sp, #36]	; 0x24
 80050e4:	e7c3      	b.n	800506e <_svfiprintf_r+0x12e>
 80050e6:	4342      	muls	r2, r0
 80050e8:	0035      	movs	r5, r6
 80050ea:	2301      	movs	r3, #1
 80050ec:	1852      	adds	r2, r2, r1
 80050ee:	e7f1      	b.n	80050d4 <_svfiprintf_r+0x194>
 80050f0:	ab07      	add	r3, sp, #28
 80050f2:	9300      	str	r3, [sp, #0]
 80050f4:	003a      	movs	r2, r7
 80050f6:	0021      	movs	r1, r4
 80050f8:	4b10      	ldr	r3, [pc, #64]	; (800513c <_svfiprintf_r+0x1fc>)
 80050fa:	9803      	ldr	r0, [sp, #12]
 80050fc:	e000      	b.n	8005100 <_svfiprintf_r+0x1c0>
 80050fe:	bf00      	nop
 8005100:	9004      	str	r0, [sp, #16]
 8005102:	9b04      	ldr	r3, [sp, #16]
 8005104:	3301      	adds	r3, #1
 8005106:	d1d3      	bne.n	80050b0 <_svfiprintf_r+0x170>
 8005108:	89bb      	ldrh	r3, [r7, #12]
 800510a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800510c:	065b      	lsls	r3, r3, #25
 800510e:	d400      	bmi.n	8005112 <_svfiprintf_r+0x1d2>
 8005110:	e72d      	b.n	8004f6e <_svfiprintf_r+0x2e>
 8005112:	2001      	movs	r0, #1
 8005114:	4240      	negs	r0, r0
 8005116:	e72a      	b.n	8004f6e <_svfiprintf_r+0x2e>
 8005118:	ab07      	add	r3, sp, #28
 800511a:	9300      	str	r3, [sp, #0]
 800511c:	003a      	movs	r2, r7
 800511e:	0021      	movs	r1, r4
 8005120:	4b06      	ldr	r3, [pc, #24]	; (800513c <_svfiprintf_r+0x1fc>)
 8005122:	9803      	ldr	r0, [sp, #12]
 8005124:	f000 f9de 	bl	80054e4 <_printf_i>
 8005128:	e7ea      	b.n	8005100 <_svfiprintf_r+0x1c0>
 800512a:	46c0      	nop			; (mov r8, r8)
 800512c:	08006375 	.word	0x08006375
 8005130:	0800637b 	.word	0x0800637b
 8005134:	0800637f 	.word	0x0800637f
 8005138:	00000000 	.word	0x00000000
 800513c:	08004e7d 	.word	0x08004e7d

08005140 <__sfputc_r>:
 8005140:	6893      	ldr	r3, [r2, #8]
 8005142:	b510      	push	{r4, lr}
 8005144:	3b01      	subs	r3, #1
 8005146:	6093      	str	r3, [r2, #8]
 8005148:	2b00      	cmp	r3, #0
 800514a:	da04      	bge.n	8005156 <__sfputc_r+0x16>
 800514c:	6994      	ldr	r4, [r2, #24]
 800514e:	42a3      	cmp	r3, r4
 8005150:	db07      	blt.n	8005162 <__sfputc_r+0x22>
 8005152:	290a      	cmp	r1, #10
 8005154:	d005      	beq.n	8005162 <__sfputc_r+0x22>
 8005156:	6813      	ldr	r3, [r2, #0]
 8005158:	1c58      	adds	r0, r3, #1
 800515a:	6010      	str	r0, [r2, #0]
 800515c:	7019      	strb	r1, [r3, #0]
 800515e:	0008      	movs	r0, r1
 8005160:	bd10      	pop	{r4, pc}
 8005162:	f000 fad1 	bl	8005708 <__swbuf_r>
 8005166:	0001      	movs	r1, r0
 8005168:	e7f9      	b.n	800515e <__sfputc_r+0x1e>

0800516a <__sfputs_r>:
 800516a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800516c:	0006      	movs	r6, r0
 800516e:	000f      	movs	r7, r1
 8005170:	0014      	movs	r4, r2
 8005172:	18d5      	adds	r5, r2, r3
 8005174:	42ac      	cmp	r4, r5
 8005176:	d101      	bne.n	800517c <__sfputs_r+0x12>
 8005178:	2000      	movs	r0, #0
 800517a:	e007      	b.n	800518c <__sfputs_r+0x22>
 800517c:	7821      	ldrb	r1, [r4, #0]
 800517e:	003a      	movs	r2, r7
 8005180:	0030      	movs	r0, r6
 8005182:	f7ff ffdd 	bl	8005140 <__sfputc_r>
 8005186:	3401      	adds	r4, #1
 8005188:	1c43      	adds	r3, r0, #1
 800518a:	d1f3      	bne.n	8005174 <__sfputs_r+0xa>
 800518c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005190 <_vfiprintf_r>:
 8005190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005192:	b0a1      	sub	sp, #132	; 0x84
 8005194:	0006      	movs	r6, r0
 8005196:	000c      	movs	r4, r1
 8005198:	001f      	movs	r7, r3
 800519a:	9203      	str	r2, [sp, #12]
 800519c:	2800      	cmp	r0, #0
 800519e:	d004      	beq.n	80051aa <_vfiprintf_r+0x1a>
 80051a0:	6983      	ldr	r3, [r0, #24]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d101      	bne.n	80051aa <_vfiprintf_r+0x1a>
 80051a6:	f000 fcb3 	bl	8005b10 <__sinit>
 80051aa:	4b8e      	ldr	r3, [pc, #568]	; (80053e4 <_vfiprintf_r+0x254>)
 80051ac:	429c      	cmp	r4, r3
 80051ae:	d11c      	bne.n	80051ea <_vfiprintf_r+0x5a>
 80051b0:	6874      	ldr	r4, [r6, #4]
 80051b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80051b4:	07db      	lsls	r3, r3, #31
 80051b6:	d405      	bmi.n	80051c4 <_vfiprintf_r+0x34>
 80051b8:	89a3      	ldrh	r3, [r4, #12]
 80051ba:	059b      	lsls	r3, r3, #22
 80051bc:	d402      	bmi.n	80051c4 <_vfiprintf_r+0x34>
 80051be:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80051c0:	f000 fd47 	bl	8005c52 <__retarget_lock_acquire_recursive>
 80051c4:	89a3      	ldrh	r3, [r4, #12]
 80051c6:	071b      	lsls	r3, r3, #28
 80051c8:	d502      	bpl.n	80051d0 <_vfiprintf_r+0x40>
 80051ca:	6923      	ldr	r3, [r4, #16]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d11d      	bne.n	800520c <_vfiprintf_r+0x7c>
 80051d0:	0021      	movs	r1, r4
 80051d2:	0030      	movs	r0, r6
 80051d4:	f000 faee 	bl	80057b4 <__swsetup_r>
 80051d8:	2800      	cmp	r0, #0
 80051da:	d017      	beq.n	800520c <_vfiprintf_r+0x7c>
 80051dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80051de:	07db      	lsls	r3, r3, #31
 80051e0:	d50d      	bpl.n	80051fe <_vfiprintf_r+0x6e>
 80051e2:	2001      	movs	r0, #1
 80051e4:	4240      	negs	r0, r0
 80051e6:	b021      	add	sp, #132	; 0x84
 80051e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051ea:	4b7f      	ldr	r3, [pc, #508]	; (80053e8 <_vfiprintf_r+0x258>)
 80051ec:	429c      	cmp	r4, r3
 80051ee:	d101      	bne.n	80051f4 <_vfiprintf_r+0x64>
 80051f0:	68b4      	ldr	r4, [r6, #8]
 80051f2:	e7de      	b.n	80051b2 <_vfiprintf_r+0x22>
 80051f4:	4b7d      	ldr	r3, [pc, #500]	; (80053ec <_vfiprintf_r+0x25c>)
 80051f6:	429c      	cmp	r4, r3
 80051f8:	d1db      	bne.n	80051b2 <_vfiprintf_r+0x22>
 80051fa:	68f4      	ldr	r4, [r6, #12]
 80051fc:	e7d9      	b.n	80051b2 <_vfiprintf_r+0x22>
 80051fe:	89a3      	ldrh	r3, [r4, #12]
 8005200:	059b      	lsls	r3, r3, #22
 8005202:	d4ee      	bmi.n	80051e2 <_vfiprintf_r+0x52>
 8005204:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005206:	f000 fd25 	bl	8005c54 <__retarget_lock_release_recursive>
 800520a:	e7ea      	b.n	80051e2 <_vfiprintf_r+0x52>
 800520c:	2300      	movs	r3, #0
 800520e:	ad08      	add	r5, sp, #32
 8005210:	616b      	str	r3, [r5, #20]
 8005212:	3320      	adds	r3, #32
 8005214:	766b      	strb	r3, [r5, #25]
 8005216:	3310      	adds	r3, #16
 8005218:	76ab      	strb	r3, [r5, #26]
 800521a:	9707      	str	r7, [sp, #28]
 800521c:	9f03      	ldr	r7, [sp, #12]
 800521e:	783b      	ldrb	r3, [r7, #0]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d001      	beq.n	8005228 <_vfiprintf_r+0x98>
 8005224:	2b25      	cmp	r3, #37	; 0x25
 8005226:	d14e      	bne.n	80052c6 <_vfiprintf_r+0x136>
 8005228:	9b03      	ldr	r3, [sp, #12]
 800522a:	1afb      	subs	r3, r7, r3
 800522c:	9305      	str	r3, [sp, #20]
 800522e:	9b03      	ldr	r3, [sp, #12]
 8005230:	429f      	cmp	r7, r3
 8005232:	d00d      	beq.n	8005250 <_vfiprintf_r+0xc0>
 8005234:	9b05      	ldr	r3, [sp, #20]
 8005236:	0021      	movs	r1, r4
 8005238:	0030      	movs	r0, r6
 800523a:	9a03      	ldr	r2, [sp, #12]
 800523c:	f7ff ff95 	bl	800516a <__sfputs_r>
 8005240:	1c43      	adds	r3, r0, #1
 8005242:	d100      	bne.n	8005246 <_vfiprintf_r+0xb6>
 8005244:	e0b5      	b.n	80053b2 <_vfiprintf_r+0x222>
 8005246:	696a      	ldr	r2, [r5, #20]
 8005248:	9b05      	ldr	r3, [sp, #20]
 800524a:	4694      	mov	ip, r2
 800524c:	4463      	add	r3, ip
 800524e:	616b      	str	r3, [r5, #20]
 8005250:	783b      	ldrb	r3, [r7, #0]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d100      	bne.n	8005258 <_vfiprintf_r+0xc8>
 8005256:	e0ac      	b.n	80053b2 <_vfiprintf_r+0x222>
 8005258:	2201      	movs	r2, #1
 800525a:	1c7b      	adds	r3, r7, #1
 800525c:	9303      	str	r3, [sp, #12]
 800525e:	2300      	movs	r3, #0
 8005260:	4252      	negs	r2, r2
 8005262:	606a      	str	r2, [r5, #4]
 8005264:	a904      	add	r1, sp, #16
 8005266:	3254      	adds	r2, #84	; 0x54
 8005268:	1852      	adds	r2, r2, r1
 800526a:	602b      	str	r3, [r5, #0]
 800526c:	60eb      	str	r3, [r5, #12]
 800526e:	60ab      	str	r3, [r5, #8]
 8005270:	7013      	strb	r3, [r2, #0]
 8005272:	65ab      	str	r3, [r5, #88]	; 0x58
 8005274:	9b03      	ldr	r3, [sp, #12]
 8005276:	2205      	movs	r2, #5
 8005278:	7819      	ldrb	r1, [r3, #0]
 800527a:	485d      	ldr	r0, [pc, #372]	; (80053f0 <_vfiprintf_r+0x260>)
 800527c:	f000 fd58 	bl	8005d30 <memchr>
 8005280:	9b03      	ldr	r3, [sp, #12]
 8005282:	1c5f      	adds	r7, r3, #1
 8005284:	2800      	cmp	r0, #0
 8005286:	d120      	bne.n	80052ca <_vfiprintf_r+0x13a>
 8005288:	682a      	ldr	r2, [r5, #0]
 800528a:	06d3      	lsls	r3, r2, #27
 800528c:	d504      	bpl.n	8005298 <_vfiprintf_r+0x108>
 800528e:	2353      	movs	r3, #83	; 0x53
 8005290:	a904      	add	r1, sp, #16
 8005292:	185b      	adds	r3, r3, r1
 8005294:	2120      	movs	r1, #32
 8005296:	7019      	strb	r1, [r3, #0]
 8005298:	0713      	lsls	r3, r2, #28
 800529a:	d504      	bpl.n	80052a6 <_vfiprintf_r+0x116>
 800529c:	2353      	movs	r3, #83	; 0x53
 800529e:	a904      	add	r1, sp, #16
 80052a0:	185b      	adds	r3, r3, r1
 80052a2:	212b      	movs	r1, #43	; 0x2b
 80052a4:	7019      	strb	r1, [r3, #0]
 80052a6:	9b03      	ldr	r3, [sp, #12]
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	2b2a      	cmp	r3, #42	; 0x2a
 80052ac:	d016      	beq.n	80052dc <_vfiprintf_r+0x14c>
 80052ae:	2100      	movs	r1, #0
 80052b0:	68eb      	ldr	r3, [r5, #12]
 80052b2:	9f03      	ldr	r7, [sp, #12]
 80052b4:	783a      	ldrb	r2, [r7, #0]
 80052b6:	1c78      	adds	r0, r7, #1
 80052b8:	3a30      	subs	r2, #48	; 0x30
 80052ba:	4684      	mov	ip, r0
 80052bc:	2a09      	cmp	r2, #9
 80052be:	d94f      	bls.n	8005360 <_vfiprintf_r+0x1d0>
 80052c0:	2900      	cmp	r1, #0
 80052c2:	d111      	bne.n	80052e8 <_vfiprintf_r+0x158>
 80052c4:	e017      	b.n	80052f6 <_vfiprintf_r+0x166>
 80052c6:	3701      	adds	r7, #1
 80052c8:	e7a9      	b.n	800521e <_vfiprintf_r+0x8e>
 80052ca:	4b49      	ldr	r3, [pc, #292]	; (80053f0 <_vfiprintf_r+0x260>)
 80052cc:	682a      	ldr	r2, [r5, #0]
 80052ce:	1ac0      	subs	r0, r0, r3
 80052d0:	2301      	movs	r3, #1
 80052d2:	4083      	lsls	r3, r0
 80052d4:	4313      	orrs	r3, r2
 80052d6:	602b      	str	r3, [r5, #0]
 80052d8:	9703      	str	r7, [sp, #12]
 80052da:	e7cb      	b.n	8005274 <_vfiprintf_r+0xe4>
 80052dc:	9b07      	ldr	r3, [sp, #28]
 80052de:	1d19      	adds	r1, r3, #4
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	9107      	str	r1, [sp, #28]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	db01      	blt.n	80052ec <_vfiprintf_r+0x15c>
 80052e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80052ea:	e004      	b.n	80052f6 <_vfiprintf_r+0x166>
 80052ec:	425b      	negs	r3, r3
 80052ee:	60eb      	str	r3, [r5, #12]
 80052f0:	2302      	movs	r3, #2
 80052f2:	4313      	orrs	r3, r2
 80052f4:	602b      	str	r3, [r5, #0]
 80052f6:	783b      	ldrb	r3, [r7, #0]
 80052f8:	2b2e      	cmp	r3, #46	; 0x2e
 80052fa:	d10a      	bne.n	8005312 <_vfiprintf_r+0x182>
 80052fc:	787b      	ldrb	r3, [r7, #1]
 80052fe:	2b2a      	cmp	r3, #42	; 0x2a
 8005300:	d137      	bne.n	8005372 <_vfiprintf_r+0x1e2>
 8005302:	9b07      	ldr	r3, [sp, #28]
 8005304:	3702      	adds	r7, #2
 8005306:	1d1a      	adds	r2, r3, #4
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	9207      	str	r2, [sp, #28]
 800530c:	2b00      	cmp	r3, #0
 800530e:	db2d      	blt.n	800536c <_vfiprintf_r+0x1dc>
 8005310:	9309      	str	r3, [sp, #36]	; 0x24
 8005312:	2203      	movs	r2, #3
 8005314:	7839      	ldrb	r1, [r7, #0]
 8005316:	4837      	ldr	r0, [pc, #220]	; (80053f4 <_vfiprintf_r+0x264>)
 8005318:	f000 fd0a 	bl	8005d30 <memchr>
 800531c:	2800      	cmp	r0, #0
 800531e:	d007      	beq.n	8005330 <_vfiprintf_r+0x1a0>
 8005320:	4b34      	ldr	r3, [pc, #208]	; (80053f4 <_vfiprintf_r+0x264>)
 8005322:	682a      	ldr	r2, [r5, #0]
 8005324:	1ac0      	subs	r0, r0, r3
 8005326:	2340      	movs	r3, #64	; 0x40
 8005328:	4083      	lsls	r3, r0
 800532a:	4313      	orrs	r3, r2
 800532c:	3701      	adds	r7, #1
 800532e:	602b      	str	r3, [r5, #0]
 8005330:	7839      	ldrb	r1, [r7, #0]
 8005332:	1c7b      	adds	r3, r7, #1
 8005334:	2206      	movs	r2, #6
 8005336:	4830      	ldr	r0, [pc, #192]	; (80053f8 <_vfiprintf_r+0x268>)
 8005338:	9303      	str	r3, [sp, #12]
 800533a:	7629      	strb	r1, [r5, #24]
 800533c:	f000 fcf8 	bl	8005d30 <memchr>
 8005340:	2800      	cmp	r0, #0
 8005342:	d045      	beq.n	80053d0 <_vfiprintf_r+0x240>
 8005344:	4b2d      	ldr	r3, [pc, #180]	; (80053fc <_vfiprintf_r+0x26c>)
 8005346:	2b00      	cmp	r3, #0
 8005348:	d127      	bne.n	800539a <_vfiprintf_r+0x20a>
 800534a:	2207      	movs	r2, #7
 800534c:	9b07      	ldr	r3, [sp, #28]
 800534e:	3307      	adds	r3, #7
 8005350:	4393      	bics	r3, r2
 8005352:	3308      	adds	r3, #8
 8005354:	9307      	str	r3, [sp, #28]
 8005356:	696b      	ldr	r3, [r5, #20]
 8005358:	9a04      	ldr	r2, [sp, #16]
 800535a:	189b      	adds	r3, r3, r2
 800535c:	616b      	str	r3, [r5, #20]
 800535e:	e75d      	b.n	800521c <_vfiprintf_r+0x8c>
 8005360:	210a      	movs	r1, #10
 8005362:	434b      	muls	r3, r1
 8005364:	4667      	mov	r7, ip
 8005366:	189b      	adds	r3, r3, r2
 8005368:	3909      	subs	r1, #9
 800536a:	e7a3      	b.n	80052b4 <_vfiprintf_r+0x124>
 800536c:	2301      	movs	r3, #1
 800536e:	425b      	negs	r3, r3
 8005370:	e7ce      	b.n	8005310 <_vfiprintf_r+0x180>
 8005372:	2300      	movs	r3, #0
 8005374:	001a      	movs	r2, r3
 8005376:	3701      	adds	r7, #1
 8005378:	606b      	str	r3, [r5, #4]
 800537a:	7839      	ldrb	r1, [r7, #0]
 800537c:	1c78      	adds	r0, r7, #1
 800537e:	3930      	subs	r1, #48	; 0x30
 8005380:	4684      	mov	ip, r0
 8005382:	2909      	cmp	r1, #9
 8005384:	d903      	bls.n	800538e <_vfiprintf_r+0x1fe>
 8005386:	2b00      	cmp	r3, #0
 8005388:	d0c3      	beq.n	8005312 <_vfiprintf_r+0x182>
 800538a:	9209      	str	r2, [sp, #36]	; 0x24
 800538c:	e7c1      	b.n	8005312 <_vfiprintf_r+0x182>
 800538e:	230a      	movs	r3, #10
 8005390:	435a      	muls	r2, r3
 8005392:	4667      	mov	r7, ip
 8005394:	1852      	adds	r2, r2, r1
 8005396:	3b09      	subs	r3, #9
 8005398:	e7ef      	b.n	800537a <_vfiprintf_r+0x1ea>
 800539a:	ab07      	add	r3, sp, #28
 800539c:	9300      	str	r3, [sp, #0]
 800539e:	0022      	movs	r2, r4
 80053a0:	0029      	movs	r1, r5
 80053a2:	0030      	movs	r0, r6
 80053a4:	4b16      	ldr	r3, [pc, #88]	; (8005400 <_vfiprintf_r+0x270>)
 80053a6:	e000      	b.n	80053aa <_vfiprintf_r+0x21a>
 80053a8:	bf00      	nop
 80053aa:	9004      	str	r0, [sp, #16]
 80053ac:	9b04      	ldr	r3, [sp, #16]
 80053ae:	3301      	adds	r3, #1
 80053b0:	d1d1      	bne.n	8005356 <_vfiprintf_r+0x1c6>
 80053b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80053b4:	07db      	lsls	r3, r3, #31
 80053b6:	d405      	bmi.n	80053c4 <_vfiprintf_r+0x234>
 80053b8:	89a3      	ldrh	r3, [r4, #12]
 80053ba:	059b      	lsls	r3, r3, #22
 80053bc:	d402      	bmi.n	80053c4 <_vfiprintf_r+0x234>
 80053be:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053c0:	f000 fc48 	bl	8005c54 <__retarget_lock_release_recursive>
 80053c4:	89a3      	ldrh	r3, [r4, #12]
 80053c6:	065b      	lsls	r3, r3, #25
 80053c8:	d500      	bpl.n	80053cc <_vfiprintf_r+0x23c>
 80053ca:	e70a      	b.n	80051e2 <_vfiprintf_r+0x52>
 80053cc:	980d      	ldr	r0, [sp, #52]	; 0x34
 80053ce:	e70a      	b.n	80051e6 <_vfiprintf_r+0x56>
 80053d0:	ab07      	add	r3, sp, #28
 80053d2:	9300      	str	r3, [sp, #0]
 80053d4:	0022      	movs	r2, r4
 80053d6:	0029      	movs	r1, r5
 80053d8:	0030      	movs	r0, r6
 80053da:	4b09      	ldr	r3, [pc, #36]	; (8005400 <_vfiprintf_r+0x270>)
 80053dc:	f000 f882 	bl	80054e4 <_printf_i>
 80053e0:	e7e3      	b.n	80053aa <_vfiprintf_r+0x21a>
 80053e2:	46c0      	nop			; (mov r8, r8)
 80053e4:	080063c8 	.word	0x080063c8
 80053e8:	080063e8 	.word	0x080063e8
 80053ec:	080063a8 	.word	0x080063a8
 80053f0:	08006375 	.word	0x08006375
 80053f4:	0800637b 	.word	0x0800637b
 80053f8:	0800637f 	.word	0x0800637f
 80053fc:	00000000 	.word	0x00000000
 8005400:	0800516b 	.word	0x0800516b

08005404 <_printf_common>:
 8005404:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005406:	0015      	movs	r5, r2
 8005408:	9301      	str	r3, [sp, #4]
 800540a:	688a      	ldr	r2, [r1, #8]
 800540c:	690b      	ldr	r3, [r1, #16]
 800540e:	000c      	movs	r4, r1
 8005410:	9000      	str	r0, [sp, #0]
 8005412:	4293      	cmp	r3, r2
 8005414:	da00      	bge.n	8005418 <_printf_common+0x14>
 8005416:	0013      	movs	r3, r2
 8005418:	0022      	movs	r2, r4
 800541a:	602b      	str	r3, [r5, #0]
 800541c:	3243      	adds	r2, #67	; 0x43
 800541e:	7812      	ldrb	r2, [r2, #0]
 8005420:	2a00      	cmp	r2, #0
 8005422:	d001      	beq.n	8005428 <_printf_common+0x24>
 8005424:	3301      	adds	r3, #1
 8005426:	602b      	str	r3, [r5, #0]
 8005428:	6823      	ldr	r3, [r4, #0]
 800542a:	069b      	lsls	r3, r3, #26
 800542c:	d502      	bpl.n	8005434 <_printf_common+0x30>
 800542e:	682b      	ldr	r3, [r5, #0]
 8005430:	3302      	adds	r3, #2
 8005432:	602b      	str	r3, [r5, #0]
 8005434:	6822      	ldr	r2, [r4, #0]
 8005436:	2306      	movs	r3, #6
 8005438:	0017      	movs	r7, r2
 800543a:	401f      	ands	r7, r3
 800543c:	421a      	tst	r2, r3
 800543e:	d027      	beq.n	8005490 <_printf_common+0x8c>
 8005440:	0023      	movs	r3, r4
 8005442:	3343      	adds	r3, #67	; 0x43
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	1e5a      	subs	r2, r3, #1
 8005448:	4193      	sbcs	r3, r2
 800544a:	6822      	ldr	r2, [r4, #0]
 800544c:	0692      	lsls	r2, r2, #26
 800544e:	d430      	bmi.n	80054b2 <_printf_common+0xae>
 8005450:	0022      	movs	r2, r4
 8005452:	9901      	ldr	r1, [sp, #4]
 8005454:	9800      	ldr	r0, [sp, #0]
 8005456:	9e08      	ldr	r6, [sp, #32]
 8005458:	3243      	adds	r2, #67	; 0x43
 800545a:	47b0      	blx	r6
 800545c:	1c43      	adds	r3, r0, #1
 800545e:	d025      	beq.n	80054ac <_printf_common+0xa8>
 8005460:	2306      	movs	r3, #6
 8005462:	6820      	ldr	r0, [r4, #0]
 8005464:	682a      	ldr	r2, [r5, #0]
 8005466:	68e1      	ldr	r1, [r4, #12]
 8005468:	2500      	movs	r5, #0
 800546a:	4003      	ands	r3, r0
 800546c:	2b04      	cmp	r3, #4
 800546e:	d103      	bne.n	8005478 <_printf_common+0x74>
 8005470:	1a8d      	subs	r5, r1, r2
 8005472:	43eb      	mvns	r3, r5
 8005474:	17db      	asrs	r3, r3, #31
 8005476:	401d      	ands	r5, r3
 8005478:	68a3      	ldr	r3, [r4, #8]
 800547a:	6922      	ldr	r2, [r4, #16]
 800547c:	4293      	cmp	r3, r2
 800547e:	dd01      	ble.n	8005484 <_printf_common+0x80>
 8005480:	1a9b      	subs	r3, r3, r2
 8005482:	18ed      	adds	r5, r5, r3
 8005484:	2700      	movs	r7, #0
 8005486:	42bd      	cmp	r5, r7
 8005488:	d120      	bne.n	80054cc <_printf_common+0xc8>
 800548a:	2000      	movs	r0, #0
 800548c:	e010      	b.n	80054b0 <_printf_common+0xac>
 800548e:	3701      	adds	r7, #1
 8005490:	68e3      	ldr	r3, [r4, #12]
 8005492:	682a      	ldr	r2, [r5, #0]
 8005494:	1a9b      	subs	r3, r3, r2
 8005496:	42bb      	cmp	r3, r7
 8005498:	ddd2      	ble.n	8005440 <_printf_common+0x3c>
 800549a:	0022      	movs	r2, r4
 800549c:	2301      	movs	r3, #1
 800549e:	9901      	ldr	r1, [sp, #4]
 80054a0:	9800      	ldr	r0, [sp, #0]
 80054a2:	9e08      	ldr	r6, [sp, #32]
 80054a4:	3219      	adds	r2, #25
 80054a6:	47b0      	blx	r6
 80054a8:	1c43      	adds	r3, r0, #1
 80054aa:	d1f0      	bne.n	800548e <_printf_common+0x8a>
 80054ac:	2001      	movs	r0, #1
 80054ae:	4240      	negs	r0, r0
 80054b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80054b2:	2030      	movs	r0, #48	; 0x30
 80054b4:	18e1      	adds	r1, r4, r3
 80054b6:	3143      	adds	r1, #67	; 0x43
 80054b8:	7008      	strb	r0, [r1, #0]
 80054ba:	0021      	movs	r1, r4
 80054bc:	1c5a      	adds	r2, r3, #1
 80054be:	3145      	adds	r1, #69	; 0x45
 80054c0:	7809      	ldrb	r1, [r1, #0]
 80054c2:	18a2      	adds	r2, r4, r2
 80054c4:	3243      	adds	r2, #67	; 0x43
 80054c6:	3302      	adds	r3, #2
 80054c8:	7011      	strb	r1, [r2, #0]
 80054ca:	e7c1      	b.n	8005450 <_printf_common+0x4c>
 80054cc:	0022      	movs	r2, r4
 80054ce:	2301      	movs	r3, #1
 80054d0:	9901      	ldr	r1, [sp, #4]
 80054d2:	9800      	ldr	r0, [sp, #0]
 80054d4:	9e08      	ldr	r6, [sp, #32]
 80054d6:	321a      	adds	r2, #26
 80054d8:	47b0      	blx	r6
 80054da:	1c43      	adds	r3, r0, #1
 80054dc:	d0e6      	beq.n	80054ac <_printf_common+0xa8>
 80054de:	3701      	adds	r7, #1
 80054e0:	e7d1      	b.n	8005486 <_printf_common+0x82>
	...

080054e4 <_printf_i>:
 80054e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054e6:	b08b      	sub	sp, #44	; 0x2c
 80054e8:	9206      	str	r2, [sp, #24]
 80054ea:	000a      	movs	r2, r1
 80054ec:	3243      	adds	r2, #67	; 0x43
 80054ee:	9307      	str	r3, [sp, #28]
 80054f0:	9005      	str	r0, [sp, #20]
 80054f2:	9204      	str	r2, [sp, #16]
 80054f4:	7e0a      	ldrb	r2, [r1, #24]
 80054f6:	000c      	movs	r4, r1
 80054f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80054fa:	2a78      	cmp	r2, #120	; 0x78
 80054fc:	d807      	bhi.n	800550e <_printf_i+0x2a>
 80054fe:	2a62      	cmp	r2, #98	; 0x62
 8005500:	d809      	bhi.n	8005516 <_printf_i+0x32>
 8005502:	2a00      	cmp	r2, #0
 8005504:	d100      	bne.n	8005508 <_printf_i+0x24>
 8005506:	e0c1      	b.n	800568c <_printf_i+0x1a8>
 8005508:	2a58      	cmp	r2, #88	; 0x58
 800550a:	d100      	bne.n	800550e <_printf_i+0x2a>
 800550c:	e08c      	b.n	8005628 <_printf_i+0x144>
 800550e:	0026      	movs	r6, r4
 8005510:	3642      	adds	r6, #66	; 0x42
 8005512:	7032      	strb	r2, [r6, #0]
 8005514:	e022      	b.n	800555c <_printf_i+0x78>
 8005516:	0010      	movs	r0, r2
 8005518:	3863      	subs	r0, #99	; 0x63
 800551a:	2815      	cmp	r0, #21
 800551c:	d8f7      	bhi.n	800550e <_printf_i+0x2a>
 800551e:	f7fa fdf9 	bl	8000114 <__gnu_thumb1_case_shi>
 8005522:	0016      	.short	0x0016
 8005524:	fff6001f 	.word	0xfff6001f
 8005528:	fff6fff6 	.word	0xfff6fff6
 800552c:	001ffff6 	.word	0x001ffff6
 8005530:	fff6fff6 	.word	0xfff6fff6
 8005534:	fff6fff6 	.word	0xfff6fff6
 8005538:	003600a8 	.word	0x003600a8
 800553c:	fff6009a 	.word	0xfff6009a
 8005540:	00b9fff6 	.word	0x00b9fff6
 8005544:	0036fff6 	.word	0x0036fff6
 8005548:	fff6fff6 	.word	0xfff6fff6
 800554c:	009e      	.short	0x009e
 800554e:	0026      	movs	r6, r4
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	3642      	adds	r6, #66	; 0x42
 8005554:	1d11      	adds	r1, r2, #4
 8005556:	6019      	str	r1, [r3, #0]
 8005558:	6813      	ldr	r3, [r2, #0]
 800555a:	7033      	strb	r3, [r6, #0]
 800555c:	2301      	movs	r3, #1
 800555e:	e0a7      	b.n	80056b0 <_printf_i+0x1cc>
 8005560:	6808      	ldr	r0, [r1, #0]
 8005562:	6819      	ldr	r1, [r3, #0]
 8005564:	1d0a      	adds	r2, r1, #4
 8005566:	0605      	lsls	r5, r0, #24
 8005568:	d50b      	bpl.n	8005582 <_printf_i+0x9e>
 800556a:	680d      	ldr	r5, [r1, #0]
 800556c:	601a      	str	r2, [r3, #0]
 800556e:	2d00      	cmp	r5, #0
 8005570:	da03      	bge.n	800557a <_printf_i+0x96>
 8005572:	232d      	movs	r3, #45	; 0x2d
 8005574:	9a04      	ldr	r2, [sp, #16]
 8005576:	426d      	negs	r5, r5
 8005578:	7013      	strb	r3, [r2, #0]
 800557a:	4b61      	ldr	r3, [pc, #388]	; (8005700 <_printf_i+0x21c>)
 800557c:	270a      	movs	r7, #10
 800557e:	9303      	str	r3, [sp, #12]
 8005580:	e01b      	b.n	80055ba <_printf_i+0xd6>
 8005582:	680d      	ldr	r5, [r1, #0]
 8005584:	601a      	str	r2, [r3, #0]
 8005586:	0641      	lsls	r1, r0, #25
 8005588:	d5f1      	bpl.n	800556e <_printf_i+0x8a>
 800558a:	b22d      	sxth	r5, r5
 800558c:	e7ef      	b.n	800556e <_printf_i+0x8a>
 800558e:	680d      	ldr	r5, [r1, #0]
 8005590:	6819      	ldr	r1, [r3, #0]
 8005592:	1d08      	adds	r0, r1, #4
 8005594:	6018      	str	r0, [r3, #0]
 8005596:	062e      	lsls	r6, r5, #24
 8005598:	d501      	bpl.n	800559e <_printf_i+0xba>
 800559a:	680d      	ldr	r5, [r1, #0]
 800559c:	e003      	b.n	80055a6 <_printf_i+0xc2>
 800559e:	066d      	lsls	r5, r5, #25
 80055a0:	d5fb      	bpl.n	800559a <_printf_i+0xb6>
 80055a2:	680d      	ldr	r5, [r1, #0]
 80055a4:	b2ad      	uxth	r5, r5
 80055a6:	4b56      	ldr	r3, [pc, #344]	; (8005700 <_printf_i+0x21c>)
 80055a8:	2708      	movs	r7, #8
 80055aa:	9303      	str	r3, [sp, #12]
 80055ac:	2a6f      	cmp	r2, #111	; 0x6f
 80055ae:	d000      	beq.n	80055b2 <_printf_i+0xce>
 80055b0:	3702      	adds	r7, #2
 80055b2:	0023      	movs	r3, r4
 80055b4:	2200      	movs	r2, #0
 80055b6:	3343      	adds	r3, #67	; 0x43
 80055b8:	701a      	strb	r2, [r3, #0]
 80055ba:	6863      	ldr	r3, [r4, #4]
 80055bc:	60a3      	str	r3, [r4, #8]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	db03      	blt.n	80055ca <_printf_i+0xe6>
 80055c2:	2204      	movs	r2, #4
 80055c4:	6821      	ldr	r1, [r4, #0]
 80055c6:	4391      	bics	r1, r2
 80055c8:	6021      	str	r1, [r4, #0]
 80055ca:	2d00      	cmp	r5, #0
 80055cc:	d102      	bne.n	80055d4 <_printf_i+0xf0>
 80055ce:	9e04      	ldr	r6, [sp, #16]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d00c      	beq.n	80055ee <_printf_i+0x10a>
 80055d4:	9e04      	ldr	r6, [sp, #16]
 80055d6:	0028      	movs	r0, r5
 80055d8:	0039      	movs	r1, r7
 80055da:	f7fa fe2b 	bl	8000234 <__aeabi_uidivmod>
 80055de:	9b03      	ldr	r3, [sp, #12]
 80055e0:	3e01      	subs	r6, #1
 80055e2:	5c5b      	ldrb	r3, [r3, r1]
 80055e4:	7033      	strb	r3, [r6, #0]
 80055e6:	002b      	movs	r3, r5
 80055e8:	0005      	movs	r5, r0
 80055ea:	429f      	cmp	r7, r3
 80055ec:	d9f3      	bls.n	80055d6 <_printf_i+0xf2>
 80055ee:	2f08      	cmp	r7, #8
 80055f0:	d109      	bne.n	8005606 <_printf_i+0x122>
 80055f2:	6823      	ldr	r3, [r4, #0]
 80055f4:	07db      	lsls	r3, r3, #31
 80055f6:	d506      	bpl.n	8005606 <_printf_i+0x122>
 80055f8:	6863      	ldr	r3, [r4, #4]
 80055fa:	6922      	ldr	r2, [r4, #16]
 80055fc:	4293      	cmp	r3, r2
 80055fe:	dc02      	bgt.n	8005606 <_printf_i+0x122>
 8005600:	2330      	movs	r3, #48	; 0x30
 8005602:	3e01      	subs	r6, #1
 8005604:	7033      	strb	r3, [r6, #0]
 8005606:	9b04      	ldr	r3, [sp, #16]
 8005608:	1b9b      	subs	r3, r3, r6
 800560a:	6123      	str	r3, [r4, #16]
 800560c:	9b07      	ldr	r3, [sp, #28]
 800560e:	0021      	movs	r1, r4
 8005610:	9300      	str	r3, [sp, #0]
 8005612:	9805      	ldr	r0, [sp, #20]
 8005614:	9b06      	ldr	r3, [sp, #24]
 8005616:	aa09      	add	r2, sp, #36	; 0x24
 8005618:	f7ff fef4 	bl	8005404 <_printf_common>
 800561c:	1c43      	adds	r3, r0, #1
 800561e:	d14c      	bne.n	80056ba <_printf_i+0x1d6>
 8005620:	2001      	movs	r0, #1
 8005622:	4240      	negs	r0, r0
 8005624:	b00b      	add	sp, #44	; 0x2c
 8005626:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005628:	3145      	adds	r1, #69	; 0x45
 800562a:	700a      	strb	r2, [r1, #0]
 800562c:	4a34      	ldr	r2, [pc, #208]	; (8005700 <_printf_i+0x21c>)
 800562e:	9203      	str	r2, [sp, #12]
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	6821      	ldr	r1, [r4, #0]
 8005634:	ca20      	ldmia	r2!, {r5}
 8005636:	601a      	str	r2, [r3, #0]
 8005638:	0608      	lsls	r0, r1, #24
 800563a:	d516      	bpl.n	800566a <_printf_i+0x186>
 800563c:	07cb      	lsls	r3, r1, #31
 800563e:	d502      	bpl.n	8005646 <_printf_i+0x162>
 8005640:	2320      	movs	r3, #32
 8005642:	4319      	orrs	r1, r3
 8005644:	6021      	str	r1, [r4, #0]
 8005646:	2710      	movs	r7, #16
 8005648:	2d00      	cmp	r5, #0
 800564a:	d1b2      	bne.n	80055b2 <_printf_i+0xce>
 800564c:	2320      	movs	r3, #32
 800564e:	6822      	ldr	r2, [r4, #0]
 8005650:	439a      	bics	r2, r3
 8005652:	6022      	str	r2, [r4, #0]
 8005654:	e7ad      	b.n	80055b2 <_printf_i+0xce>
 8005656:	2220      	movs	r2, #32
 8005658:	6809      	ldr	r1, [r1, #0]
 800565a:	430a      	orrs	r2, r1
 800565c:	6022      	str	r2, [r4, #0]
 800565e:	0022      	movs	r2, r4
 8005660:	2178      	movs	r1, #120	; 0x78
 8005662:	3245      	adds	r2, #69	; 0x45
 8005664:	7011      	strb	r1, [r2, #0]
 8005666:	4a27      	ldr	r2, [pc, #156]	; (8005704 <_printf_i+0x220>)
 8005668:	e7e1      	b.n	800562e <_printf_i+0x14a>
 800566a:	0648      	lsls	r0, r1, #25
 800566c:	d5e6      	bpl.n	800563c <_printf_i+0x158>
 800566e:	b2ad      	uxth	r5, r5
 8005670:	e7e4      	b.n	800563c <_printf_i+0x158>
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	680d      	ldr	r5, [r1, #0]
 8005676:	1d10      	adds	r0, r2, #4
 8005678:	6949      	ldr	r1, [r1, #20]
 800567a:	6018      	str	r0, [r3, #0]
 800567c:	6813      	ldr	r3, [r2, #0]
 800567e:	062e      	lsls	r6, r5, #24
 8005680:	d501      	bpl.n	8005686 <_printf_i+0x1a2>
 8005682:	6019      	str	r1, [r3, #0]
 8005684:	e002      	b.n	800568c <_printf_i+0x1a8>
 8005686:	066d      	lsls	r5, r5, #25
 8005688:	d5fb      	bpl.n	8005682 <_printf_i+0x19e>
 800568a:	8019      	strh	r1, [r3, #0]
 800568c:	2300      	movs	r3, #0
 800568e:	9e04      	ldr	r6, [sp, #16]
 8005690:	6123      	str	r3, [r4, #16]
 8005692:	e7bb      	b.n	800560c <_printf_i+0x128>
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	1d11      	adds	r1, r2, #4
 8005698:	6019      	str	r1, [r3, #0]
 800569a:	6816      	ldr	r6, [r2, #0]
 800569c:	2100      	movs	r1, #0
 800569e:	0030      	movs	r0, r6
 80056a0:	6862      	ldr	r2, [r4, #4]
 80056a2:	f000 fb45 	bl	8005d30 <memchr>
 80056a6:	2800      	cmp	r0, #0
 80056a8:	d001      	beq.n	80056ae <_printf_i+0x1ca>
 80056aa:	1b80      	subs	r0, r0, r6
 80056ac:	6060      	str	r0, [r4, #4]
 80056ae:	6863      	ldr	r3, [r4, #4]
 80056b0:	6123      	str	r3, [r4, #16]
 80056b2:	2300      	movs	r3, #0
 80056b4:	9a04      	ldr	r2, [sp, #16]
 80056b6:	7013      	strb	r3, [r2, #0]
 80056b8:	e7a8      	b.n	800560c <_printf_i+0x128>
 80056ba:	6923      	ldr	r3, [r4, #16]
 80056bc:	0032      	movs	r2, r6
 80056be:	9906      	ldr	r1, [sp, #24]
 80056c0:	9805      	ldr	r0, [sp, #20]
 80056c2:	9d07      	ldr	r5, [sp, #28]
 80056c4:	47a8      	blx	r5
 80056c6:	1c43      	adds	r3, r0, #1
 80056c8:	d0aa      	beq.n	8005620 <_printf_i+0x13c>
 80056ca:	6823      	ldr	r3, [r4, #0]
 80056cc:	079b      	lsls	r3, r3, #30
 80056ce:	d415      	bmi.n	80056fc <_printf_i+0x218>
 80056d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056d2:	68e0      	ldr	r0, [r4, #12]
 80056d4:	4298      	cmp	r0, r3
 80056d6:	daa5      	bge.n	8005624 <_printf_i+0x140>
 80056d8:	0018      	movs	r0, r3
 80056da:	e7a3      	b.n	8005624 <_printf_i+0x140>
 80056dc:	0022      	movs	r2, r4
 80056de:	2301      	movs	r3, #1
 80056e0:	9906      	ldr	r1, [sp, #24]
 80056e2:	9805      	ldr	r0, [sp, #20]
 80056e4:	9e07      	ldr	r6, [sp, #28]
 80056e6:	3219      	adds	r2, #25
 80056e8:	47b0      	blx	r6
 80056ea:	1c43      	adds	r3, r0, #1
 80056ec:	d098      	beq.n	8005620 <_printf_i+0x13c>
 80056ee:	3501      	adds	r5, #1
 80056f0:	68e3      	ldr	r3, [r4, #12]
 80056f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056f4:	1a9b      	subs	r3, r3, r2
 80056f6:	42ab      	cmp	r3, r5
 80056f8:	dcf0      	bgt.n	80056dc <_printf_i+0x1f8>
 80056fa:	e7e9      	b.n	80056d0 <_printf_i+0x1ec>
 80056fc:	2500      	movs	r5, #0
 80056fe:	e7f7      	b.n	80056f0 <_printf_i+0x20c>
 8005700:	08006386 	.word	0x08006386
 8005704:	08006397 	.word	0x08006397

08005708 <__swbuf_r>:
 8005708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800570a:	0005      	movs	r5, r0
 800570c:	000e      	movs	r6, r1
 800570e:	0014      	movs	r4, r2
 8005710:	2800      	cmp	r0, #0
 8005712:	d004      	beq.n	800571e <__swbuf_r+0x16>
 8005714:	6983      	ldr	r3, [r0, #24]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d101      	bne.n	800571e <__swbuf_r+0x16>
 800571a:	f000 f9f9 	bl	8005b10 <__sinit>
 800571e:	4b22      	ldr	r3, [pc, #136]	; (80057a8 <__swbuf_r+0xa0>)
 8005720:	429c      	cmp	r4, r3
 8005722:	d12e      	bne.n	8005782 <__swbuf_r+0x7a>
 8005724:	686c      	ldr	r4, [r5, #4]
 8005726:	69a3      	ldr	r3, [r4, #24]
 8005728:	60a3      	str	r3, [r4, #8]
 800572a:	89a3      	ldrh	r3, [r4, #12]
 800572c:	071b      	lsls	r3, r3, #28
 800572e:	d532      	bpl.n	8005796 <__swbuf_r+0x8e>
 8005730:	6923      	ldr	r3, [r4, #16]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d02f      	beq.n	8005796 <__swbuf_r+0x8e>
 8005736:	6823      	ldr	r3, [r4, #0]
 8005738:	6922      	ldr	r2, [r4, #16]
 800573a:	b2f7      	uxtb	r7, r6
 800573c:	1a98      	subs	r0, r3, r2
 800573e:	6963      	ldr	r3, [r4, #20]
 8005740:	b2f6      	uxtb	r6, r6
 8005742:	4283      	cmp	r3, r0
 8005744:	dc05      	bgt.n	8005752 <__swbuf_r+0x4a>
 8005746:	0021      	movs	r1, r4
 8005748:	0028      	movs	r0, r5
 800574a:	f000 f93f 	bl	80059cc <_fflush_r>
 800574e:	2800      	cmp	r0, #0
 8005750:	d127      	bne.n	80057a2 <__swbuf_r+0x9a>
 8005752:	68a3      	ldr	r3, [r4, #8]
 8005754:	3001      	adds	r0, #1
 8005756:	3b01      	subs	r3, #1
 8005758:	60a3      	str	r3, [r4, #8]
 800575a:	6823      	ldr	r3, [r4, #0]
 800575c:	1c5a      	adds	r2, r3, #1
 800575e:	6022      	str	r2, [r4, #0]
 8005760:	701f      	strb	r7, [r3, #0]
 8005762:	6963      	ldr	r3, [r4, #20]
 8005764:	4283      	cmp	r3, r0
 8005766:	d004      	beq.n	8005772 <__swbuf_r+0x6a>
 8005768:	89a3      	ldrh	r3, [r4, #12]
 800576a:	07db      	lsls	r3, r3, #31
 800576c:	d507      	bpl.n	800577e <__swbuf_r+0x76>
 800576e:	2e0a      	cmp	r6, #10
 8005770:	d105      	bne.n	800577e <__swbuf_r+0x76>
 8005772:	0021      	movs	r1, r4
 8005774:	0028      	movs	r0, r5
 8005776:	f000 f929 	bl	80059cc <_fflush_r>
 800577a:	2800      	cmp	r0, #0
 800577c:	d111      	bne.n	80057a2 <__swbuf_r+0x9a>
 800577e:	0030      	movs	r0, r6
 8005780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005782:	4b0a      	ldr	r3, [pc, #40]	; (80057ac <__swbuf_r+0xa4>)
 8005784:	429c      	cmp	r4, r3
 8005786:	d101      	bne.n	800578c <__swbuf_r+0x84>
 8005788:	68ac      	ldr	r4, [r5, #8]
 800578a:	e7cc      	b.n	8005726 <__swbuf_r+0x1e>
 800578c:	4b08      	ldr	r3, [pc, #32]	; (80057b0 <__swbuf_r+0xa8>)
 800578e:	429c      	cmp	r4, r3
 8005790:	d1c9      	bne.n	8005726 <__swbuf_r+0x1e>
 8005792:	68ec      	ldr	r4, [r5, #12]
 8005794:	e7c7      	b.n	8005726 <__swbuf_r+0x1e>
 8005796:	0021      	movs	r1, r4
 8005798:	0028      	movs	r0, r5
 800579a:	f000 f80b 	bl	80057b4 <__swsetup_r>
 800579e:	2800      	cmp	r0, #0
 80057a0:	d0c9      	beq.n	8005736 <__swbuf_r+0x2e>
 80057a2:	2601      	movs	r6, #1
 80057a4:	4276      	negs	r6, r6
 80057a6:	e7ea      	b.n	800577e <__swbuf_r+0x76>
 80057a8:	080063c8 	.word	0x080063c8
 80057ac:	080063e8 	.word	0x080063e8
 80057b0:	080063a8 	.word	0x080063a8

080057b4 <__swsetup_r>:
 80057b4:	4b37      	ldr	r3, [pc, #220]	; (8005894 <__swsetup_r+0xe0>)
 80057b6:	b570      	push	{r4, r5, r6, lr}
 80057b8:	681d      	ldr	r5, [r3, #0]
 80057ba:	0006      	movs	r6, r0
 80057bc:	000c      	movs	r4, r1
 80057be:	2d00      	cmp	r5, #0
 80057c0:	d005      	beq.n	80057ce <__swsetup_r+0x1a>
 80057c2:	69ab      	ldr	r3, [r5, #24]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d102      	bne.n	80057ce <__swsetup_r+0x1a>
 80057c8:	0028      	movs	r0, r5
 80057ca:	f000 f9a1 	bl	8005b10 <__sinit>
 80057ce:	4b32      	ldr	r3, [pc, #200]	; (8005898 <__swsetup_r+0xe4>)
 80057d0:	429c      	cmp	r4, r3
 80057d2:	d10f      	bne.n	80057f4 <__swsetup_r+0x40>
 80057d4:	686c      	ldr	r4, [r5, #4]
 80057d6:	230c      	movs	r3, #12
 80057d8:	5ee2      	ldrsh	r2, [r4, r3]
 80057da:	b293      	uxth	r3, r2
 80057dc:	0711      	lsls	r1, r2, #28
 80057de:	d42d      	bmi.n	800583c <__swsetup_r+0x88>
 80057e0:	06d9      	lsls	r1, r3, #27
 80057e2:	d411      	bmi.n	8005808 <__swsetup_r+0x54>
 80057e4:	2309      	movs	r3, #9
 80057e6:	2001      	movs	r0, #1
 80057e8:	6033      	str	r3, [r6, #0]
 80057ea:	3337      	adds	r3, #55	; 0x37
 80057ec:	4313      	orrs	r3, r2
 80057ee:	81a3      	strh	r3, [r4, #12]
 80057f0:	4240      	negs	r0, r0
 80057f2:	bd70      	pop	{r4, r5, r6, pc}
 80057f4:	4b29      	ldr	r3, [pc, #164]	; (800589c <__swsetup_r+0xe8>)
 80057f6:	429c      	cmp	r4, r3
 80057f8:	d101      	bne.n	80057fe <__swsetup_r+0x4a>
 80057fa:	68ac      	ldr	r4, [r5, #8]
 80057fc:	e7eb      	b.n	80057d6 <__swsetup_r+0x22>
 80057fe:	4b28      	ldr	r3, [pc, #160]	; (80058a0 <__swsetup_r+0xec>)
 8005800:	429c      	cmp	r4, r3
 8005802:	d1e8      	bne.n	80057d6 <__swsetup_r+0x22>
 8005804:	68ec      	ldr	r4, [r5, #12]
 8005806:	e7e6      	b.n	80057d6 <__swsetup_r+0x22>
 8005808:	075b      	lsls	r3, r3, #29
 800580a:	d513      	bpl.n	8005834 <__swsetup_r+0x80>
 800580c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800580e:	2900      	cmp	r1, #0
 8005810:	d008      	beq.n	8005824 <__swsetup_r+0x70>
 8005812:	0023      	movs	r3, r4
 8005814:	3344      	adds	r3, #68	; 0x44
 8005816:	4299      	cmp	r1, r3
 8005818:	d002      	beq.n	8005820 <__swsetup_r+0x6c>
 800581a:	0030      	movs	r0, r6
 800581c:	f7ff f8cc 	bl	80049b8 <_free_r>
 8005820:	2300      	movs	r3, #0
 8005822:	6363      	str	r3, [r4, #52]	; 0x34
 8005824:	2224      	movs	r2, #36	; 0x24
 8005826:	89a3      	ldrh	r3, [r4, #12]
 8005828:	4393      	bics	r3, r2
 800582a:	81a3      	strh	r3, [r4, #12]
 800582c:	2300      	movs	r3, #0
 800582e:	6063      	str	r3, [r4, #4]
 8005830:	6923      	ldr	r3, [r4, #16]
 8005832:	6023      	str	r3, [r4, #0]
 8005834:	2308      	movs	r3, #8
 8005836:	89a2      	ldrh	r2, [r4, #12]
 8005838:	4313      	orrs	r3, r2
 800583a:	81a3      	strh	r3, [r4, #12]
 800583c:	6923      	ldr	r3, [r4, #16]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d10b      	bne.n	800585a <__swsetup_r+0xa6>
 8005842:	21a0      	movs	r1, #160	; 0xa0
 8005844:	2280      	movs	r2, #128	; 0x80
 8005846:	89a3      	ldrh	r3, [r4, #12]
 8005848:	0089      	lsls	r1, r1, #2
 800584a:	0092      	lsls	r2, r2, #2
 800584c:	400b      	ands	r3, r1
 800584e:	4293      	cmp	r3, r2
 8005850:	d003      	beq.n	800585a <__swsetup_r+0xa6>
 8005852:	0021      	movs	r1, r4
 8005854:	0030      	movs	r0, r6
 8005856:	f000 fa27 	bl	8005ca8 <__smakebuf_r>
 800585a:	220c      	movs	r2, #12
 800585c:	5ea3      	ldrsh	r3, [r4, r2]
 800585e:	2001      	movs	r0, #1
 8005860:	001a      	movs	r2, r3
 8005862:	b299      	uxth	r1, r3
 8005864:	4002      	ands	r2, r0
 8005866:	4203      	tst	r3, r0
 8005868:	d00f      	beq.n	800588a <__swsetup_r+0xd6>
 800586a:	2200      	movs	r2, #0
 800586c:	60a2      	str	r2, [r4, #8]
 800586e:	6962      	ldr	r2, [r4, #20]
 8005870:	4252      	negs	r2, r2
 8005872:	61a2      	str	r2, [r4, #24]
 8005874:	2000      	movs	r0, #0
 8005876:	6922      	ldr	r2, [r4, #16]
 8005878:	4282      	cmp	r2, r0
 800587a:	d1ba      	bne.n	80057f2 <__swsetup_r+0x3e>
 800587c:	060a      	lsls	r2, r1, #24
 800587e:	d5b8      	bpl.n	80057f2 <__swsetup_r+0x3e>
 8005880:	2240      	movs	r2, #64	; 0x40
 8005882:	4313      	orrs	r3, r2
 8005884:	81a3      	strh	r3, [r4, #12]
 8005886:	3801      	subs	r0, #1
 8005888:	e7b3      	b.n	80057f2 <__swsetup_r+0x3e>
 800588a:	0788      	lsls	r0, r1, #30
 800588c:	d400      	bmi.n	8005890 <__swsetup_r+0xdc>
 800588e:	6962      	ldr	r2, [r4, #20]
 8005890:	60a2      	str	r2, [r4, #8]
 8005892:	e7ef      	b.n	8005874 <__swsetup_r+0xc0>
 8005894:	20000070 	.word	0x20000070
 8005898:	080063c8 	.word	0x080063c8
 800589c:	080063e8 	.word	0x080063e8
 80058a0:	080063a8 	.word	0x080063a8

080058a4 <abort>:
 80058a4:	2006      	movs	r0, #6
 80058a6:	b510      	push	{r4, lr}
 80058a8:	f000 fac2 	bl	8005e30 <raise>
 80058ac:	2001      	movs	r0, #1
 80058ae:	f7fb fb7d 	bl	8000fac <_exit>
	...

080058b4 <__sflush_r>:
 80058b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80058b6:	898b      	ldrh	r3, [r1, #12]
 80058b8:	0005      	movs	r5, r0
 80058ba:	000c      	movs	r4, r1
 80058bc:	071a      	lsls	r2, r3, #28
 80058be:	d45f      	bmi.n	8005980 <__sflush_r+0xcc>
 80058c0:	684a      	ldr	r2, [r1, #4]
 80058c2:	2a00      	cmp	r2, #0
 80058c4:	dc04      	bgt.n	80058d0 <__sflush_r+0x1c>
 80058c6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80058c8:	2a00      	cmp	r2, #0
 80058ca:	dc01      	bgt.n	80058d0 <__sflush_r+0x1c>
 80058cc:	2000      	movs	r0, #0
 80058ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80058d0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80058d2:	2f00      	cmp	r7, #0
 80058d4:	d0fa      	beq.n	80058cc <__sflush_r+0x18>
 80058d6:	2200      	movs	r2, #0
 80058d8:	2180      	movs	r1, #128	; 0x80
 80058da:	682e      	ldr	r6, [r5, #0]
 80058dc:	602a      	str	r2, [r5, #0]
 80058de:	001a      	movs	r2, r3
 80058e0:	0149      	lsls	r1, r1, #5
 80058e2:	400a      	ands	r2, r1
 80058e4:	420b      	tst	r3, r1
 80058e6:	d034      	beq.n	8005952 <__sflush_r+0x9e>
 80058e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80058ea:	89a3      	ldrh	r3, [r4, #12]
 80058ec:	075b      	lsls	r3, r3, #29
 80058ee:	d506      	bpl.n	80058fe <__sflush_r+0x4a>
 80058f0:	6863      	ldr	r3, [r4, #4]
 80058f2:	1ac0      	subs	r0, r0, r3
 80058f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d001      	beq.n	80058fe <__sflush_r+0x4a>
 80058fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80058fc:	1ac0      	subs	r0, r0, r3
 80058fe:	0002      	movs	r2, r0
 8005900:	6a21      	ldr	r1, [r4, #32]
 8005902:	2300      	movs	r3, #0
 8005904:	0028      	movs	r0, r5
 8005906:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005908:	47b8      	blx	r7
 800590a:	89a1      	ldrh	r1, [r4, #12]
 800590c:	1c43      	adds	r3, r0, #1
 800590e:	d106      	bne.n	800591e <__sflush_r+0x6a>
 8005910:	682b      	ldr	r3, [r5, #0]
 8005912:	2b1d      	cmp	r3, #29
 8005914:	d831      	bhi.n	800597a <__sflush_r+0xc6>
 8005916:	4a2c      	ldr	r2, [pc, #176]	; (80059c8 <__sflush_r+0x114>)
 8005918:	40da      	lsrs	r2, r3
 800591a:	07d3      	lsls	r3, r2, #31
 800591c:	d52d      	bpl.n	800597a <__sflush_r+0xc6>
 800591e:	2300      	movs	r3, #0
 8005920:	6063      	str	r3, [r4, #4]
 8005922:	6923      	ldr	r3, [r4, #16]
 8005924:	6023      	str	r3, [r4, #0]
 8005926:	04cb      	lsls	r3, r1, #19
 8005928:	d505      	bpl.n	8005936 <__sflush_r+0x82>
 800592a:	1c43      	adds	r3, r0, #1
 800592c:	d102      	bne.n	8005934 <__sflush_r+0x80>
 800592e:	682b      	ldr	r3, [r5, #0]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d100      	bne.n	8005936 <__sflush_r+0x82>
 8005934:	6560      	str	r0, [r4, #84]	; 0x54
 8005936:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005938:	602e      	str	r6, [r5, #0]
 800593a:	2900      	cmp	r1, #0
 800593c:	d0c6      	beq.n	80058cc <__sflush_r+0x18>
 800593e:	0023      	movs	r3, r4
 8005940:	3344      	adds	r3, #68	; 0x44
 8005942:	4299      	cmp	r1, r3
 8005944:	d002      	beq.n	800594c <__sflush_r+0x98>
 8005946:	0028      	movs	r0, r5
 8005948:	f7ff f836 	bl	80049b8 <_free_r>
 800594c:	2000      	movs	r0, #0
 800594e:	6360      	str	r0, [r4, #52]	; 0x34
 8005950:	e7bd      	b.n	80058ce <__sflush_r+0x1a>
 8005952:	2301      	movs	r3, #1
 8005954:	0028      	movs	r0, r5
 8005956:	6a21      	ldr	r1, [r4, #32]
 8005958:	47b8      	blx	r7
 800595a:	1c43      	adds	r3, r0, #1
 800595c:	d1c5      	bne.n	80058ea <__sflush_r+0x36>
 800595e:	682b      	ldr	r3, [r5, #0]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d0c2      	beq.n	80058ea <__sflush_r+0x36>
 8005964:	2b1d      	cmp	r3, #29
 8005966:	d001      	beq.n	800596c <__sflush_r+0xb8>
 8005968:	2b16      	cmp	r3, #22
 800596a:	d101      	bne.n	8005970 <__sflush_r+0xbc>
 800596c:	602e      	str	r6, [r5, #0]
 800596e:	e7ad      	b.n	80058cc <__sflush_r+0x18>
 8005970:	2340      	movs	r3, #64	; 0x40
 8005972:	89a2      	ldrh	r2, [r4, #12]
 8005974:	4313      	orrs	r3, r2
 8005976:	81a3      	strh	r3, [r4, #12]
 8005978:	e7a9      	b.n	80058ce <__sflush_r+0x1a>
 800597a:	2340      	movs	r3, #64	; 0x40
 800597c:	430b      	orrs	r3, r1
 800597e:	e7fa      	b.n	8005976 <__sflush_r+0xc2>
 8005980:	690f      	ldr	r7, [r1, #16]
 8005982:	2f00      	cmp	r7, #0
 8005984:	d0a2      	beq.n	80058cc <__sflush_r+0x18>
 8005986:	680a      	ldr	r2, [r1, #0]
 8005988:	600f      	str	r7, [r1, #0]
 800598a:	1bd2      	subs	r2, r2, r7
 800598c:	9201      	str	r2, [sp, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	079b      	lsls	r3, r3, #30
 8005992:	d100      	bne.n	8005996 <__sflush_r+0xe2>
 8005994:	694a      	ldr	r2, [r1, #20]
 8005996:	60a2      	str	r2, [r4, #8]
 8005998:	9b01      	ldr	r3, [sp, #4]
 800599a:	2b00      	cmp	r3, #0
 800599c:	dc00      	bgt.n	80059a0 <__sflush_r+0xec>
 800599e:	e795      	b.n	80058cc <__sflush_r+0x18>
 80059a0:	003a      	movs	r2, r7
 80059a2:	0028      	movs	r0, r5
 80059a4:	9b01      	ldr	r3, [sp, #4]
 80059a6:	6a21      	ldr	r1, [r4, #32]
 80059a8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80059aa:	47b0      	blx	r6
 80059ac:	2800      	cmp	r0, #0
 80059ae:	dc06      	bgt.n	80059be <__sflush_r+0x10a>
 80059b0:	2340      	movs	r3, #64	; 0x40
 80059b2:	2001      	movs	r0, #1
 80059b4:	89a2      	ldrh	r2, [r4, #12]
 80059b6:	4240      	negs	r0, r0
 80059b8:	4313      	orrs	r3, r2
 80059ba:	81a3      	strh	r3, [r4, #12]
 80059bc:	e787      	b.n	80058ce <__sflush_r+0x1a>
 80059be:	9b01      	ldr	r3, [sp, #4]
 80059c0:	183f      	adds	r7, r7, r0
 80059c2:	1a1b      	subs	r3, r3, r0
 80059c4:	9301      	str	r3, [sp, #4]
 80059c6:	e7e7      	b.n	8005998 <__sflush_r+0xe4>
 80059c8:	20400001 	.word	0x20400001

080059cc <_fflush_r>:
 80059cc:	690b      	ldr	r3, [r1, #16]
 80059ce:	b570      	push	{r4, r5, r6, lr}
 80059d0:	0005      	movs	r5, r0
 80059d2:	000c      	movs	r4, r1
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d102      	bne.n	80059de <_fflush_r+0x12>
 80059d8:	2500      	movs	r5, #0
 80059da:	0028      	movs	r0, r5
 80059dc:	bd70      	pop	{r4, r5, r6, pc}
 80059de:	2800      	cmp	r0, #0
 80059e0:	d004      	beq.n	80059ec <_fflush_r+0x20>
 80059e2:	6983      	ldr	r3, [r0, #24]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d101      	bne.n	80059ec <_fflush_r+0x20>
 80059e8:	f000 f892 	bl	8005b10 <__sinit>
 80059ec:	4b14      	ldr	r3, [pc, #80]	; (8005a40 <_fflush_r+0x74>)
 80059ee:	429c      	cmp	r4, r3
 80059f0:	d11b      	bne.n	8005a2a <_fflush_r+0x5e>
 80059f2:	686c      	ldr	r4, [r5, #4]
 80059f4:	220c      	movs	r2, #12
 80059f6:	5ea3      	ldrsh	r3, [r4, r2]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d0ed      	beq.n	80059d8 <_fflush_r+0xc>
 80059fc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80059fe:	07d2      	lsls	r2, r2, #31
 8005a00:	d404      	bmi.n	8005a0c <_fflush_r+0x40>
 8005a02:	059b      	lsls	r3, r3, #22
 8005a04:	d402      	bmi.n	8005a0c <_fflush_r+0x40>
 8005a06:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a08:	f000 f923 	bl	8005c52 <__retarget_lock_acquire_recursive>
 8005a0c:	0028      	movs	r0, r5
 8005a0e:	0021      	movs	r1, r4
 8005a10:	f7ff ff50 	bl	80058b4 <__sflush_r>
 8005a14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a16:	0005      	movs	r5, r0
 8005a18:	07db      	lsls	r3, r3, #31
 8005a1a:	d4de      	bmi.n	80059da <_fflush_r+0xe>
 8005a1c:	89a3      	ldrh	r3, [r4, #12]
 8005a1e:	059b      	lsls	r3, r3, #22
 8005a20:	d4db      	bmi.n	80059da <_fflush_r+0xe>
 8005a22:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a24:	f000 f916 	bl	8005c54 <__retarget_lock_release_recursive>
 8005a28:	e7d7      	b.n	80059da <_fflush_r+0xe>
 8005a2a:	4b06      	ldr	r3, [pc, #24]	; (8005a44 <_fflush_r+0x78>)
 8005a2c:	429c      	cmp	r4, r3
 8005a2e:	d101      	bne.n	8005a34 <_fflush_r+0x68>
 8005a30:	68ac      	ldr	r4, [r5, #8]
 8005a32:	e7df      	b.n	80059f4 <_fflush_r+0x28>
 8005a34:	4b04      	ldr	r3, [pc, #16]	; (8005a48 <_fflush_r+0x7c>)
 8005a36:	429c      	cmp	r4, r3
 8005a38:	d1dc      	bne.n	80059f4 <_fflush_r+0x28>
 8005a3a:	68ec      	ldr	r4, [r5, #12]
 8005a3c:	e7da      	b.n	80059f4 <_fflush_r+0x28>
 8005a3e:	46c0      	nop			; (mov r8, r8)
 8005a40:	080063c8 	.word	0x080063c8
 8005a44:	080063e8 	.word	0x080063e8
 8005a48:	080063a8 	.word	0x080063a8

08005a4c <std>:
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	b510      	push	{r4, lr}
 8005a50:	0004      	movs	r4, r0
 8005a52:	6003      	str	r3, [r0, #0]
 8005a54:	6043      	str	r3, [r0, #4]
 8005a56:	6083      	str	r3, [r0, #8]
 8005a58:	8181      	strh	r1, [r0, #12]
 8005a5a:	6643      	str	r3, [r0, #100]	; 0x64
 8005a5c:	0019      	movs	r1, r3
 8005a5e:	81c2      	strh	r2, [r0, #14]
 8005a60:	6103      	str	r3, [r0, #16]
 8005a62:	6143      	str	r3, [r0, #20]
 8005a64:	6183      	str	r3, [r0, #24]
 8005a66:	2208      	movs	r2, #8
 8005a68:	305c      	adds	r0, #92	; 0x5c
 8005a6a:	f7fe ff9d 	bl	80049a8 <memset>
 8005a6e:	4b05      	ldr	r3, [pc, #20]	; (8005a84 <std+0x38>)
 8005a70:	6224      	str	r4, [r4, #32]
 8005a72:	6263      	str	r3, [r4, #36]	; 0x24
 8005a74:	4b04      	ldr	r3, [pc, #16]	; (8005a88 <std+0x3c>)
 8005a76:	62a3      	str	r3, [r4, #40]	; 0x28
 8005a78:	4b04      	ldr	r3, [pc, #16]	; (8005a8c <std+0x40>)
 8005a7a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005a7c:	4b04      	ldr	r3, [pc, #16]	; (8005a90 <std+0x44>)
 8005a7e:	6323      	str	r3, [r4, #48]	; 0x30
 8005a80:	bd10      	pop	{r4, pc}
 8005a82:	46c0      	nop			; (mov r8, r8)
 8005a84:	08005e71 	.word	0x08005e71
 8005a88:	08005e99 	.word	0x08005e99
 8005a8c:	08005ed1 	.word	0x08005ed1
 8005a90:	08005efd 	.word	0x08005efd

08005a94 <_cleanup_r>:
 8005a94:	b510      	push	{r4, lr}
 8005a96:	4902      	ldr	r1, [pc, #8]	; (8005aa0 <_cleanup_r+0xc>)
 8005a98:	f000 f8ba 	bl	8005c10 <_fwalk_reent>
 8005a9c:	bd10      	pop	{r4, pc}
 8005a9e:	46c0      	nop			; (mov r8, r8)
 8005aa0:	080059cd 	.word	0x080059cd

08005aa4 <__sfmoreglue>:
 8005aa4:	b570      	push	{r4, r5, r6, lr}
 8005aa6:	2568      	movs	r5, #104	; 0x68
 8005aa8:	1e4a      	subs	r2, r1, #1
 8005aaa:	4355      	muls	r5, r2
 8005aac:	000e      	movs	r6, r1
 8005aae:	0029      	movs	r1, r5
 8005ab0:	3174      	adds	r1, #116	; 0x74
 8005ab2:	f7fe ffed 	bl	8004a90 <_malloc_r>
 8005ab6:	1e04      	subs	r4, r0, #0
 8005ab8:	d008      	beq.n	8005acc <__sfmoreglue+0x28>
 8005aba:	2100      	movs	r1, #0
 8005abc:	002a      	movs	r2, r5
 8005abe:	6001      	str	r1, [r0, #0]
 8005ac0:	6046      	str	r6, [r0, #4]
 8005ac2:	300c      	adds	r0, #12
 8005ac4:	60a0      	str	r0, [r4, #8]
 8005ac6:	3268      	adds	r2, #104	; 0x68
 8005ac8:	f7fe ff6e 	bl	80049a8 <memset>
 8005acc:	0020      	movs	r0, r4
 8005ace:	bd70      	pop	{r4, r5, r6, pc}

08005ad0 <__sfp_lock_acquire>:
 8005ad0:	b510      	push	{r4, lr}
 8005ad2:	4802      	ldr	r0, [pc, #8]	; (8005adc <__sfp_lock_acquire+0xc>)
 8005ad4:	f000 f8bd 	bl	8005c52 <__retarget_lock_acquire_recursive>
 8005ad8:	bd10      	pop	{r4, pc}
 8005ada:	46c0      	nop			; (mov r8, r8)
 8005adc:	200003a5 	.word	0x200003a5

08005ae0 <__sfp_lock_release>:
 8005ae0:	b510      	push	{r4, lr}
 8005ae2:	4802      	ldr	r0, [pc, #8]	; (8005aec <__sfp_lock_release+0xc>)
 8005ae4:	f000 f8b6 	bl	8005c54 <__retarget_lock_release_recursive>
 8005ae8:	bd10      	pop	{r4, pc}
 8005aea:	46c0      	nop			; (mov r8, r8)
 8005aec:	200003a5 	.word	0x200003a5

08005af0 <__sinit_lock_acquire>:
 8005af0:	b510      	push	{r4, lr}
 8005af2:	4802      	ldr	r0, [pc, #8]	; (8005afc <__sinit_lock_acquire+0xc>)
 8005af4:	f000 f8ad 	bl	8005c52 <__retarget_lock_acquire_recursive>
 8005af8:	bd10      	pop	{r4, pc}
 8005afa:	46c0      	nop			; (mov r8, r8)
 8005afc:	200003a6 	.word	0x200003a6

08005b00 <__sinit_lock_release>:
 8005b00:	b510      	push	{r4, lr}
 8005b02:	4802      	ldr	r0, [pc, #8]	; (8005b0c <__sinit_lock_release+0xc>)
 8005b04:	f000 f8a6 	bl	8005c54 <__retarget_lock_release_recursive>
 8005b08:	bd10      	pop	{r4, pc}
 8005b0a:	46c0      	nop			; (mov r8, r8)
 8005b0c:	200003a6 	.word	0x200003a6

08005b10 <__sinit>:
 8005b10:	b513      	push	{r0, r1, r4, lr}
 8005b12:	0004      	movs	r4, r0
 8005b14:	f7ff ffec 	bl	8005af0 <__sinit_lock_acquire>
 8005b18:	69a3      	ldr	r3, [r4, #24]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d002      	beq.n	8005b24 <__sinit+0x14>
 8005b1e:	f7ff ffef 	bl	8005b00 <__sinit_lock_release>
 8005b22:	bd13      	pop	{r0, r1, r4, pc}
 8005b24:	64a3      	str	r3, [r4, #72]	; 0x48
 8005b26:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005b28:	6523      	str	r3, [r4, #80]	; 0x50
 8005b2a:	4b13      	ldr	r3, [pc, #76]	; (8005b78 <__sinit+0x68>)
 8005b2c:	4a13      	ldr	r2, [pc, #76]	; (8005b7c <__sinit+0x6c>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	62a2      	str	r2, [r4, #40]	; 0x28
 8005b32:	9301      	str	r3, [sp, #4]
 8005b34:	42a3      	cmp	r3, r4
 8005b36:	d101      	bne.n	8005b3c <__sinit+0x2c>
 8005b38:	2301      	movs	r3, #1
 8005b3a:	61a3      	str	r3, [r4, #24]
 8005b3c:	0020      	movs	r0, r4
 8005b3e:	f000 f81f 	bl	8005b80 <__sfp>
 8005b42:	6060      	str	r0, [r4, #4]
 8005b44:	0020      	movs	r0, r4
 8005b46:	f000 f81b 	bl	8005b80 <__sfp>
 8005b4a:	60a0      	str	r0, [r4, #8]
 8005b4c:	0020      	movs	r0, r4
 8005b4e:	f000 f817 	bl	8005b80 <__sfp>
 8005b52:	2200      	movs	r2, #0
 8005b54:	2104      	movs	r1, #4
 8005b56:	60e0      	str	r0, [r4, #12]
 8005b58:	6860      	ldr	r0, [r4, #4]
 8005b5a:	f7ff ff77 	bl	8005a4c <std>
 8005b5e:	2201      	movs	r2, #1
 8005b60:	2109      	movs	r1, #9
 8005b62:	68a0      	ldr	r0, [r4, #8]
 8005b64:	f7ff ff72 	bl	8005a4c <std>
 8005b68:	2202      	movs	r2, #2
 8005b6a:	2112      	movs	r1, #18
 8005b6c:	68e0      	ldr	r0, [r4, #12]
 8005b6e:	f7ff ff6d 	bl	8005a4c <std>
 8005b72:	2301      	movs	r3, #1
 8005b74:	61a3      	str	r3, [r4, #24]
 8005b76:	e7d2      	b.n	8005b1e <__sinit+0xe>
 8005b78:	080061c0 	.word	0x080061c0
 8005b7c:	08005a95 	.word	0x08005a95

08005b80 <__sfp>:
 8005b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b82:	0007      	movs	r7, r0
 8005b84:	f7ff ffa4 	bl	8005ad0 <__sfp_lock_acquire>
 8005b88:	4b1f      	ldr	r3, [pc, #124]	; (8005c08 <__sfp+0x88>)
 8005b8a:	681e      	ldr	r6, [r3, #0]
 8005b8c:	69b3      	ldr	r3, [r6, #24]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d102      	bne.n	8005b98 <__sfp+0x18>
 8005b92:	0030      	movs	r0, r6
 8005b94:	f7ff ffbc 	bl	8005b10 <__sinit>
 8005b98:	3648      	adds	r6, #72	; 0x48
 8005b9a:	68b4      	ldr	r4, [r6, #8]
 8005b9c:	6873      	ldr	r3, [r6, #4]
 8005b9e:	3b01      	subs	r3, #1
 8005ba0:	d504      	bpl.n	8005bac <__sfp+0x2c>
 8005ba2:	6833      	ldr	r3, [r6, #0]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d022      	beq.n	8005bee <__sfp+0x6e>
 8005ba8:	6836      	ldr	r6, [r6, #0]
 8005baa:	e7f6      	b.n	8005b9a <__sfp+0x1a>
 8005bac:	220c      	movs	r2, #12
 8005bae:	5ea5      	ldrsh	r5, [r4, r2]
 8005bb0:	2d00      	cmp	r5, #0
 8005bb2:	d11a      	bne.n	8005bea <__sfp+0x6a>
 8005bb4:	0020      	movs	r0, r4
 8005bb6:	4b15      	ldr	r3, [pc, #84]	; (8005c0c <__sfp+0x8c>)
 8005bb8:	3058      	adds	r0, #88	; 0x58
 8005bba:	60e3      	str	r3, [r4, #12]
 8005bbc:	6665      	str	r5, [r4, #100]	; 0x64
 8005bbe:	f000 f847 	bl	8005c50 <__retarget_lock_init_recursive>
 8005bc2:	f7ff ff8d 	bl	8005ae0 <__sfp_lock_release>
 8005bc6:	0020      	movs	r0, r4
 8005bc8:	2208      	movs	r2, #8
 8005bca:	0029      	movs	r1, r5
 8005bcc:	6025      	str	r5, [r4, #0]
 8005bce:	60a5      	str	r5, [r4, #8]
 8005bd0:	6065      	str	r5, [r4, #4]
 8005bd2:	6125      	str	r5, [r4, #16]
 8005bd4:	6165      	str	r5, [r4, #20]
 8005bd6:	61a5      	str	r5, [r4, #24]
 8005bd8:	305c      	adds	r0, #92	; 0x5c
 8005bda:	f7fe fee5 	bl	80049a8 <memset>
 8005bde:	6365      	str	r5, [r4, #52]	; 0x34
 8005be0:	63a5      	str	r5, [r4, #56]	; 0x38
 8005be2:	64a5      	str	r5, [r4, #72]	; 0x48
 8005be4:	64e5      	str	r5, [r4, #76]	; 0x4c
 8005be6:	0020      	movs	r0, r4
 8005be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bea:	3468      	adds	r4, #104	; 0x68
 8005bec:	e7d7      	b.n	8005b9e <__sfp+0x1e>
 8005bee:	2104      	movs	r1, #4
 8005bf0:	0038      	movs	r0, r7
 8005bf2:	f7ff ff57 	bl	8005aa4 <__sfmoreglue>
 8005bf6:	1e04      	subs	r4, r0, #0
 8005bf8:	6030      	str	r0, [r6, #0]
 8005bfa:	d1d5      	bne.n	8005ba8 <__sfp+0x28>
 8005bfc:	f7ff ff70 	bl	8005ae0 <__sfp_lock_release>
 8005c00:	230c      	movs	r3, #12
 8005c02:	603b      	str	r3, [r7, #0]
 8005c04:	e7ef      	b.n	8005be6 <__sfp+0x66>
 8005c06:	46c0      	nop			; (mov r8, r8)
 8005c08:	080061c0 	.word	0x080061c0
 8005c0c:	ffff0001 	.word	0xffff0001

08005c10 <_fwalk_reent>:
 8005c10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c12:	0004      	movs	r4, r0
 8005c14:	0006      	movs	r6, r0
 8005c16:	2700      	movs	r7, #0
 8005c18:	9101      	str	r1, [sp, #4]
 8005c1a:	3448      	adds	r4, #72	; 0x48
 8005c1c:	6863      	ldr	r3, [r4, #4]
 8005c1e:	68a5      	ldr	r5, [r4, #8]
 8005c20:	9300      	str	r3, [sp, #0]
 8005c22:	9b00      	ldr	r3, [sp, #0]
 8005c24:	3b01      	subs	r3, #1
 8005c26:	9300      	str	r3, [sp, #0]
 8005c28:	d504      	bpl.n	8005c34 <_fwalk_reent+0x24>
 8005c2a:	6824      	ldr	r4, [r4, #0]
 8005c2c:	2c00      	cmp	r4, #0
 8005c2e:	d1f5      	bne.n	8005c1c <_fwalk_reent+0xc>
 8005c30:	0038      	movs	r0, r7
 8005c32:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005c34:	89ab      	ldrh	r3, [r5, #12]
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d908      	bls.n	8005c4c <_fwalk_reent+0x3c>
 8005c3a:	220e      	movs	r2, #14
 8005c3c:	5eab      	ldrsh	r3, [r5, r2]
 8005c3e:	3301      	adds	r3, #1
 8005c40:	d004      	beq.n	8005c4c <_fwalk_reent+0x3c>
 8005c42:	0029      	movs	r1, r5
 8005c44:	0030      	movs	r0, r6
 8005c46:	9b01      	ldr	r3, [sp, #4]
 8005c48:	4798      	blx	r3
 8005c4a:	4307      	orrs	r7, r0
 8005c4c:	3568      	adds	r5, #104	; 0x68
 8005c4e:	e7e8      	b.n	8005c22 <_fwalk_reent+0x12>

08005c50 <__retarget_lock_init_recursive>:
 8005c50:	4770      	bx	lr

08005c52 <__retarget_lock_acquire_recursive>:
 8005c52:	4770      	bx	lr

08005c54 <__retarget_lock_release_recursive>:
 8005c54:	4770      	bx	lr
	...

08005c58 <__swhatbuf_r>:
 8005c58:	b570      	push	{r4, r5, r6, lr}
 8005c5a:	000e      	movs	r6, r1
 8005c5c:	001d      	movs	r5, r3
 8005c5e:	230e      	movs	r3, #14
 8005c60:	5ec9      	ldrsh	r1, [r1, r3]
 8005c62:	0014      	movs	r4, r2
 8005c64:	b096      	sub	sp, #88	; 0x58
 8005c66:	2900      	cmp	r1, #0
 8005c68:	da08      	bge.n	8005c7c <__swhatbuf_r+0x24>
 8005c6a:	220c      	movs	r2, #12
 8005c6c:	5eb3      	ldrsh	r3, [r6, r2]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	602a      	str	r2, [r5, #0]
 8005c72:	061b      	lsls	r3, r3, #24
 8005c74:	d411      	bmi.n	8005c9a <__swhatbuf_r+0x42>
 8005c76:	2380      	movs	r3, #128	; 0x80
 8005c78:	00db      	lsls	r3, r3, #3
 8005c7a:	e00f      	b.n	8005c9c <__swhatbuf_r+0x44>
 8005c7c:	466a      	mov	r2, sp
 8005c7e:	f000 f969 	bl	8005f54 <_fstat_r>
 8005c82:	2800      	cmp	r0, #0
 8005c84:	dbf1      	blt.n	8005c6a <__swhatbuf_r+0x12>
 8005c86:	23f0      	movs	r3, #240	; 0xf0
 8005c88:	9901      	ldr	r1, [sp, #4]
 8005c8a:	021b      	lsls	r3, r3, #8
 8005c8c:	4019      	ands	r1, r3
 8005c8e:	4b05      	ldr	r3, [pc, #20]	; (8005ca4 <__swhatbuf_r+0x4c>)
 8005c90:	18c9      	adds	r1, r1, r3
 8005c92:	424b      	negs	r3, r1
 8005c94:	4159      	adcs	r1, r3
 8005c96:	6029      	str	r1, [r5, #0]
 8005c98:	e7ed      	b.n	8005c76 <__swhatbuf_r+0x1e>
 8005c9a:	2340      	movs	r3, #64	; 0x40
 8005c9c:	2000      	movs	r0, #0
 8005c9e:	6023      	str	r3, [r4, #0]
 8005ca0:	b016      	add	sp, #88	; 0x58
 8005ca2:	bd70      	pop	{r4, r5, r6, pc}
 8005ca4:	ffffe000 	.word	0xffffe000

08005ca8 <__smakebuf_r>:
 8005ca8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005caa:	2602      	movs	r6, #2
 8005cac:	898b      	ldrh	r3, [r1, #12]
 8005cae:	0005      	movs	r5, r0
 8005cb0:	000c      	movs	r4, r1
 8005cb2:	4233      	tst	r3, r6
 8005cb4:	d006      	beq.n	8005cc4 <__smakebuf_r+0x1c>
 8005cb6:	0023      	movs	r3, r4
 8005cb8:	3347      	adds	r3, #71	; 0x47
 8005cba:	6023      	str	r3, [r4, #0]
 8005cbc:	6123      	str	r3, [r4, #16]
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	6163      	str	r3, [r4, #20]
 8005cc2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8005cc4:	466a      	mov	r2, sp
 8005cc6:	ab01      	add	r3, sp, #4
 8005cc8:	f7ff ffc6 	bl	8005c58 <__swhatbuf_r>
 8005ccc:	9900      	ldr	r1, [sp, #0]
 8005cce:	0007      	movs	r7, r0
 8005cd0:	0028      	movs	r0, r5
 8005cd2:	f7fe fedd 	bl	8004a90 <_malloc_r>
 8005cd6:	2800      	cmp	r0, #0
 8005cd8:	d108      	bne.n	8005cec <__smakebuf_r+0x44>
 8005cda:	220c      	movs	r2, #12
 8005cdc:	5ea3      	ldrsh	r3, [r4, r2]
 8005cde:	059a      	lsls	r2, r3, #22
 8005ce0:	d4ef      	bmi.n	8005cc2 <__smakebuf_r+0x1a>
 8005ce2:	2203      	movs	r2, #3
 8005ce4:	4393      	bics	r3, r2
 8005ce6:	431e      	orrs	r6, r3
 8005ce8:	81a6      	strh	r6, [r4, #12]
 8005cea:	e7e4      	b.n	8005cb6 <__smakebuf_r+0xe>
 8005cec:	4b0f      	ldr	r3, [pc, #60]	; (8005d2c <__smakebuf_r+0x84>)
 8005cee:	62ab      	str	r3, [r5, #40]	; 0x28
 8005cf0:	2380      	movs	r3, #128	; 0x80
 8005cf2:	89a2      	ldrh	r2, [r4, #12]
 8005cf4:	6020      	str	r0, [r4, #0]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	81a3      	strh	r3, [r4, #12]
 8005cfa:	9b00      	ldr	r3, [sp, #0]
 8005cfc:	6120      	str	r0, [r4, #16]
 8005cfe:	6163      	str	r3, [r4, #20]
 8005d00:	9b01      	ldr	r3, [sp, #4]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d00d      	beq.n	8005d22 <__smakebuf_r+0x7a>
 8005d06:	0028      	movs	r0, r5
 8005d08:	230e      	movs	r3, #14
 8005d0a:	5ee1      	ldrsh	r1, [r4, r3]
 8005d0c:	f000 f934 	bl	8005f78 <_isatty_r>
 8005d10:	2800      	cmp	r0, #0
 8005d12:	d006      	beq.n	8005d22 <__smakebuf_r+0x7a>
 8005d14:	2203      	movs	r2, #3
 8005d16:	89a3      	ldrh	r3, [r4, #12]
 8005d18:	4393      	bics	r3, r2
 8005d1a:	001a      	movs	r2, r3
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	81a3      	strh	r3, [r4, #12]
 8005d22:	89a0      	ldrh	r0, [r4, #12]
 8005d24:	4307      	orrs	r7, r0
 8005d26:	81a7      	strh	r7, [r4, #12]
 8005d28:	e7cb      	b.n	8005cc2 <__smakebuf_r+0x1a>
 8005d2a:	46c0      	nop			; (mov r8, r8)
 8005d2c:	08005a95 	.word	0x08005a95

08005d30 <memchr>:
 8005d30:	b2c9      	uxtb	r1, r1
 8005d32:	1882      	adds	r2, r0, r2
 8005d34:	4290      	cmp	r0, r2
 8005d36:	d101      	bne.n	8005d3c <memchr+0xc>
 8005d38:	2000      	movs	r0, #0
 8005d3a:	4770      	bx	lr
 8005d3c:	7803      	ldrb	r3, [r0, #0]
 8005d3e:	428b      	cmp	r3, r1
 8005d40:	d0fb      	beq.n	8005d3a <memchr+0xa>
 8005d42:	3001      	adds	r0, #1
 8005d44:	e7f6      	b.n	8005d34 <memchr+0x4>

08005d46 <memcpy>:
 8005d46:	2300      	movs	r3, #0
 8005d48:	b510      	push	{r4, lr}
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	d100      	bne.n	8005d50 <memcpy+0xa>
 8005d4e:	bd10      	pop	{r4, pc}
 8005d50:	5ccc      	ldrb	r4, [r1, r3]
 8005d52:	54c4      	strb	r4, [r0, r3]
 8005d54:	3301      	adds	r3, #1
 8005d56:	e7f8      	b.n	8005d4a <memcpy+0x4>

08005d58 <memmove>:
 8005d58:	b510      	push	{r4, lr}
 8005d5a:	4288      	cmp	r0, r1
 8005d5c:	d902      	bls.n	8005d64 <memmove+0xc>
 8005d5e:	188b      	adds	r3, r1, r2
 8005d60:	4298      	cmp	r0, r3
 8005d62:	d303      	bcc.n	8005d6c <memmove+0x14>
 8005d64:	2300      	movs	r3, #0
 8005d66:	e007      	b.n	8005d78 <memmove+0x20>
 8005d68:	5c8b      	ldrb	r3, [r1, r2]
 8005d6a:	5483      	strb	r3, [r0, r2]
 8005d6c:	3a01      	subs	r2, #1
 8005d6e:	d2fb      	bcs.n	8005d68 <memmove+0x10>
 8005d70:	bd10      	pop	{r4, pc}
 8005d72:	5ccc      	ldrb	r4, [r1, r3]
 8005d74:	54c4      	strb	r4, [r0, r3]
 8005d76:	3301      	adds	r3, #1
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d1fa      	bne.n	8005d72 <memmove+0x1a>
 8005d7c:	e7f8      	b.n	8005d70 <memmove+0x18>

08005d7e <_realloc_r>:
 8005d7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d80:	0007      	movs	r7, r0
 8005d82:	000e      	movs	r6, r1
 8005d84:	0014      	movs	r4, r2
 8005d86:	2900      	cmp	r1, #0
 8005d88:	d105      	bne.n	8005d96 <_realloc_r+0x18>
 8005d8a:	0011      	movs	r1, r2
 8005d8c:	f7fe fe80 	bl	8004a90 <_malloc_r>
 8005d90:	0005      	movs	r5, r0
 8005d92:	0028      	movs	r0, r5
 8005d94:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005d96:	2a00      	cmp	r2, #0
 8005d98:	d103      	bne.n	8005da2 <_realloc_r+0x24>
 8005d9a:	f7fe fe0d 	bl	80049b8 <_free_r>
 8005d9e:	0025      	movs	r5, r4
 8005da0:	e7f7      	b.n	8005d92 <_realloc_r+0x14>
 8005da2:	f000 f90f 	bl	8005fc4 <_malloc_usable_size_r>
 8005da6:	9001      	str	r0, [sp, #4]
 8005da8:	4284      	cmp	r4, r0
 8005daa:	d803      	bhi.n	8005db4 <_realloc_r+0x36>
 8005dac:	0035      	movs	r5, r6
 8005dae:	0843      	lsrs	r3, r0, #1
 8005db0:	42a3      	cmp	r3, r4
 8005db2:	d3ee      	bcc.n	8005d92 <_realloc_r+0x14>
 8005db4:	0021      	movs	r1, r4
 8005db6:	0038      	movs	r0, r7
 8005db8:	f7fe fe6a 	bl	8004a90 <_malloc_r>
 8005dbc:	1e05      	subs	r5, r0, #0
 8005dbe:	d0e8      	beq.n	8005d92 <_realloc_r+0x14>
 8005dc0:	9b01      	ldr	r3, [sp, #4]
 8005dc2:	0022      	movs	r2, r4
 8005dc4:	429c      	cmp	r4, r3
 8005dc6:	d900      	bls.n	8005dca <_realloc_r+0x4c>
 8005dc8:	001a      	movs	r2, r3
 8005dca:	0031      	movs	r1, r6
 8005dcc:	0028      	movs	r0, r5
 8005dce:	f7ff ffba 	bl	8005d46 <memcpy>
 8005dd2:	0031      	movs	r1, r6
 8005dd4:	0038      	movs	r0, r7
 8005dd6:	f7fe fdef 	bl	80049b8 <_free_r>
 8005dda:	e7da      	b.n	8005d92 <_realloc_r+0x14>

08005ddc <_raise_r>:
 8005ddc:	b570      	push	{r4, r5, r6, lr}
 8005dde:	0004      	movs	r4, r0
 8005de0:	000d      	movs	r5, r1
 8005de2:	291f      	cmp	r1, #31
 8005de4:	d904      	bls.n	8005df0 <_raise_r+0x14>
 8005de6:	2316      	movs	r3, #22
 8005de8:	6003      	str	r3, [r0, #0]
 8005dea:	2001      	movs	r0, #1
 8005dec:	4240      	negs	r0, r0
 8005dee:	bd70      	pop	{r4, r5, r6, pc}
 8005df0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d004      	beq.n	8005e00 <_raise_r+0x24>
 8005df6:	008a      	lsls	r2, r1, #2
 8005df8:	189b      	adds	r3, r3, r2
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	2a00      	cmp	r2, #0
 8005dfe:	d108      	bne.n	8005e12 <_raise_r+0x36>
 8005e00:	0020      	movs	r0, r4
 8005e02:	f000 f831 	bl	8005e68 <_getpid_r>
 8005e06:	002a      	movs	r2, r5
 8005e08:	0001      	movs	r1, r0
 8005e0a:	0020      	movs	r0, r4
 8005e0c:	f000 f81a 	bl	8005e44 <_kill_r>
 8005e10:	e7ed      	b.n	8005dee <_raise_r+0x12>
 8005e12:	2000      	movs	r0, #0
 8005e14:	2a01      	cmp	r2, #1
 8005e16:	d0ea      	beq.n	8005dee <_raise_r+0x12>
 8005e18:	1c51      	adds	r1, r2, #1
 8005e1a:	d103      	bne.n	8005e24 <_raise_r+0x48>
 8005e1c:	2316      	movs	r3, #22
 8005e1e:	3001      	adds	r0, #1
 8005e20:	6023      	str	r3, [r4, #0]
 8005e22:	e7e4      	b.n	8005dee <_raise_r+0x12>
 8005e24:	2400      	movs	r4, #0
 8005e26:	0028      	movs	r0, r5
 8005e28:	601c      	str	r4, [r3, #0]
 8005e2a:	4790      	blx	r2
 8005e2c:	0020      	movs	r0, r4
 8005e2e:	e7de      	b.n	8005dee <_raise_r+0x12>

08005e30 <raise>:
 8005e30:	b510      	push	{r4, lr}
 8005e32:	4b03      	ldr	r3, [pc, #12]	; (8005e40 <raise+0x10>)
 8005e34:	0001      	movs	r1, r0
 8005e36:	6818      	ldr	r0, [r3, #0]
 8005e38:	f7ff ffd0 	bl	8005ddc <_raise_r>
 8005e3c:	bd10      	pop	{r4, pc}
 8005e3e:	46c0      	nop			; (mov r8, r8)
 8005e40:	20000070 	.word	0x20000070

08005e44 <_kill_r>:
 8005e44:	2300      	movs	r3, #0
 8005e46:	b570      	push	{r4, r5, r6, lr}
 8005e48:	4d06      	ldr	r5, [pc, #24]	; (8005e64 <_kill_r+0x20>)
 8005e4a:	0004      	movs	r4, r0
 8005e4c:	0008      	movs	r0, r1
 8005e4e:	0011      	movs	r1, r2
 8005e50:	602b      	str	r3, [r5, #0]
 8005e52:	f7fb f89b 	bl	8000f8c <_kill>
 8005e56:	1c43      	adds	r3, r0, #1
 8005e58:	d103      	bne.n	8005e62 <_kill_r+0x1e>
 8005e5a:	682b      	ldr	r3, [r5, #0]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d000      	beq.n	8005e62 <_kill_r+0x1e>
 8005e60:	6023      	str	r3, [r4, #0]
 8005e62:	bd70      	pop	{r4, r5, r6, pc}
 8005e64:	200003a0 	.word	0x200003a0

08005e68 <_getpid_r>:
 8005e68:	b510      	push	{r4, lr}
 8005e6a:	f7fb f889 	bl	8000f80 <_getpid>
 8005e6e:	bd10      	pop	{r4, pc}

08005e70 <__sread>:
 8005e70:	b570      	push	{r4, r5, r6, lr}
 8005e72:	000c      	movs	r4, r1
 8005e74:	250e      	movs	r5, #14
 8005e76:	5f49      	ldrsh	r1, [r1, r5]
 8005e78:	f000 f8ac 	bl	8005fd4 <_read_r>
 8005e7c:	2800      	cmp	r0, #0
 8005e7e:	db03      	blt.n	8005e88 <__sread+0x18>
 8005e80:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005e82:	181b      	adds	r3, r3, r0
 8005e84:	6563      	str	r3, [r4, #84]	; 0x54
 8005e86:	bd70      	pop	{r4, r5, r6, pc}
 8005e88:	89a3      	ldrh	r3, [r4, #12]
 8005e8a:	4a02      	ldr	r2, [pc, #8]	; (8005e94 <__sread+0x24>)
 8005e8c:	4013      	ands	r3, r2
 8005e8e:	81a3      	strh	r3, [r4, #12]
 8005e90:	e7f9      	b.n	8005e86 <__sread+0x16>
 8005e92:	46c0      	nop			; (mov r8, r8)
 8005e94:	ffffefff 	.word	0xffffefff

08005e98 <__swrite>:
 8005e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e9a:	001f      	movs	r7, r3
 8005e9c:	898b      	ldrh	r3, [r1, #12]
 8005e9e:	0005      	movs	r5, r0
 8005ea0:	000c      	movs	r4, r1
 8005ea2:	0016      	movs	r6, r2
 8005ea4:	05db      	lsls	r3, r3, #23
 8005ea6:	d505      	bpl.n	8005eb4 <__swrite+0x1c>
 8005ea8:	230e      	movs	r3, #14
 8005eaa:	5ec9      	ldrsh	r1, [r1, r3]
 8005eac:	2200      	movs	r2, #0
 8005eae:	2302      	movs	r3, #2
 8005eb0:	f000 f874 	bl	8005f9c <_lseek_r>
 8005eb4:	89a3      	ldrh	r3, [r4, #12]
 8005eb6:	4a05      	ldr	r2, [pc, #20]	; (8005ecc <__swrite+0x34>)
 8005eb8:	0028      	movs	r0, r5
 8005eba:	4013      	ands	r3, r2
 8005ebc:	81a3      	strh	r3, [r4, #12]
 8005ebe:	0032      	movs	r2, r6
 8005ec0:	230e      	movs	r3, #14
 8005ec2:	5ee1      	ldrsh	r1, [r4, r3]
 8005ec4:	003b      	movs	r3, r7
 8005ec6:	f000 f81f 	bl	8005f08 <_write_r>
 8005eca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ecc:	ffffefff 	.word	0xffffefff

08005ed0 <__sseek>:
 8005ed0:	b570      	push	{r4, r5, r6, lr}
 8005ed2:	000c      	movs	r4, r1
 8005ed4:	250e      	movs	r5, #14
 8005ed6:	5f49      	ldrsh	r1, [r1, r5]
 8005ed8:	f000 f860 	bl	8005f9c <_lseek_r>
 8005edc:	89a3      	ldrh	r3, [r4, #12]
 8005ede:	1c42      	adds	r2, r0, #1
 8005ee0:	d103      	bne.n	8005eea <__sseek+0x1a>
 8005ee2:	4a05      	ldr	r2, [pc, #20]	; (8005ef8 <__sseek+0x28>)
 8005ee4:	4013      	ands	r3, r2
 8005ee6:	81a3      	strh	r3, [r4, #12]
 8005ee8:	bd70      	pop	{r4, r5, r6, pc}
 8005eea:	2280      	movs	r2, #128	; 0x80
 8005eec:	0152      	lsls	r2, r2, #5
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	81a3      	strh	r3, [r4, #12]
 8005ef2:	6560      	str	r0, [r4, #84]	; 0x54
 8005ef4:	e7f8      	b.n	8005ee8 <__sseek+0x18>
 8005ef6:	46c0      	nop			; (mov r8, r8)
 8005ef8:	ffffefff 	.word	0xffffefff

08005efc <__sclose>:
 8005efc:	b510      	push	{r4, lr}
 8005efe:	230e      	movs	r3, #14
 8005f00:	5ec9      	ldrsh	r1, [r1, r3]
 8005f02:	f000 f815 	bl	8005f30 <_close_r>
 8005f06:	bd10      	pop	{r4, pc}

08005f08 <_write_r>:
 8005f08:	b570      	push	{r4, r5, r6, lr}
 8005f0a:	0004      	movs	r4, r0
 8005f0c:	0008      	movs	r0, r1
 8005f0e:	0011      	movs	r1, r2
 8005f10:	001a      	movs	r2, r3
 8005f12:	2300      	movs	r3, #0
 8005f14:	4d05      	ldr	r5, [pc, #20]	; (8005f2c <_write_r+0x24>)
 8005f16:	602b      	str	r3, [r5, #0]
 8005f18:	f7fb f871 	bl	8000ffe <_write>
 8005f1c:	1c43      	adds	r3, r0, #1
 8005f1e:	d103      	bne.n	8005f28 <_write_r+0x20>
 8005f20:	682b      	ldr	r3, [r5, #0]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d000      	beq.n	8005f28 <_write_r+0x20>
 8005f26:	6023      	str	r3, [r4, #0]
 8005f28:	bd70      	pop	{r4, r5, r6, pc}
 8005f2a:	46c0      	nop			; (mov r8, r8)
 8005f2c:	200003a0 	.word	0x200003a0

08005f30 <_close_r>:
 8005f30:	2300      	movs	r3, #0
 8005f32:	b570      	push	{r4, r5, r6, lr}
 8005f34:	4d06      	ldr	r5, [pc, #24]	; (8005f50 <_close_r+0x20>)
 8005f36:	0004      	movs	r4, r0
 8005f38:	0008      	movs	r0, r1
 8005f3a:	602b      	str	r3, [r5, #0]
 8005f3c:	f7fb f87b 	bl	8001036 <_close>
 8005f40:	1c43      	adds	r3, r0, #1
 8005f42:	d103      	bne.n	8005f4c <_close_r+0x1c>
 8005f44:	682b      	ldr	r3, [r5, #0]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d000      	beq.n	8005f4c <_close_r+0x1c>
 8005f4a:	6023      	str	r3, [r4, #0]
 8005f4c:	bd70      	pop	{r4, r5, r6, pc}
 8005f4e:	46c0      	nop			; (mov r8, r8)
 8005f50:	200003a0 	.word	0x200003a0

08005f54 <_fstat_r>:
 8005f54:	2300      	movs	r3, #0
 8005f56:	b570      	push	{r4, r5, r6, lr}
 8005f58:	4d06      	ldr	r5, [pc, #24]	; (8005f74 <_fstat_r+0x20>)
 8005f5a:	0004      	movs	r4, r0
 8005f5c:	0008      	movs	r0, r1
 8005f5e:	0011      	movs	r1, r2
 8005f60:	602b      	str	r3, [r5, #0]
 8005f62:	f7fb f872 	bl	800104a <_fstat>
 8005f66:	1c43      	adds	r3, r0, #1
 8005f68:	d103      	bne.n	8005f72 <_fstat_r+0x1e>
 8005f6a:	682b      	ldr	r3, [r5, #0]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d000      	beq.n	8005f72 <_fstat_r+0x1e>
 8005f70:	6023      	str	r3, [r4, #0]
 8005f72:	bd70      	pop	{r4, r5, r6, pc}
 8005f74:	200003a0 	.word	0x200003a0

08005f78 <_isatty_r>:
 8005f78:	2300      	movs	r3, #0
 8005f7a:	b570      	push	{r4, r5, r6, lr}
 8005f7c:	4d06      	ldr	r5, [pc, #24]	; (8005f98 <_isatty_r+0x20>)
 8005f7e:	0004      	movs	r4, r0
 8005f80:	0008      	movs	r0, r1
 8005f82:	602b      	str	r3, [r5, #0]
 8005f84:	f7fb f86f 	bl	8001066 <_isatty>
 8005f88:	1c43      	adds	r3, r0, #1
 8005f8a:	d103      	bne.n	8005f94 <_isatty_r+0x1c>
 8005f8c:	682b      	ldr	r3, [r5, #0]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d000      	beq.n	8005f94 <_isatty_r+0x1c>
 8005f92:	6023      	str	r3, [r4, #0]
 8005f94:	bd70      	pop	{r4, r5, r6, pc}
 8005f96:	46c0      	nop			; (mov r8, r8)
 8005f98:	200003a0 	.word	0x200003a0

08005f9c <_lseek_r>:
 8005f9c:	b570      	push	{r4, r5, r6, lr}
 8005f9e:	0004      	movs	r4, r0
 8005fa0:	0008      	movs	r0, r1
 8005fa2:	0011      	movs	r1, r2
 8005fa4:	001a      	movs	r2, r3
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	4d05      	ldr	r5, [pc, #20]	; (8005fc0 <_lseek_r+0x24>)
 8005faa:	602b      	str	r3, [r5, #0]
 8005fac:	f7fb f864 	bl	8001078 <_lseek>
 8005fb0:	1c43      	adds	r3, r0, #1
 8005fb2:	d103      	bne.n	8005fbc <_lseek_r+0x20>
 8005fb4:	682b      	ldr	r3, [r5, #0]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d000      	beq.n	8005fbc <_lseek_r+0x20>
 8005fba:	6023      	str	r3, [r4, #0]
 8005fbc:	bd70      	pop	{r4, r5, r6, pc}
 8005fbe:	46c0      	nop			; (mov r8, r8)
 8005fc0:	200003a0 	.word	0x200003a0

08005fc4 <_malloc_usable_size_r>:
 8005fc4:	1f0b      	subs	r3, r1, #4
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	1f18      	subs	r0, r3, #4
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	da01      	bge.n	8005fd2 <_malloc_usable_size_r+0xe>
 8005fce:	580b      	ldr	r3, [r1, r0]
 8005fd0:	18c0      	adds	r0, r0, r3
 8005fd2:	4770      	bx	lr

08005fd4 <_read_r>:
 8005fd4:	b570      	push	{r4, r5, r6, lr}
 8005fd6:	0004      	movs	r4, r0
 8005fd8:	0008      	movs	r0, r1
 8005fda:	0011      	movs	r1, r2
 8005fdc:	001a      	movs	r2, r3
 8005fde:	2300      	movs	r3, #0
 8005fe0:	4d05      	ldr	r5, [pc, #20]	; (8005ff8 <_read_r+0x24>)
 8005fe2:	602b      	str	r3, [r5, #0]
 8005fe4:	f7fa ffee 	bl	8000fc4 <_read>
 8005fe8:	1c43      	adds	r3, r0, #1
 8005fea:	d103      	bne.n	8005ff4 <_read_r+0x20>
 8005fec:	682b      	ldr	r3, [r5, #0]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d000      	beq.n	8005ff4 <_read_r+0x20>
 8005ff2:	6023      	str	r3, [r4, #0]
 8005ff4:	bd70      	pop	{r4, r5, r6, pc}
 8005ff6:	46c0      	nop			; (mov r8, r8)
 8005ff8:	200003a0 	.word	0x200003a0

08005ffc <_init>:
 8005ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ffe:	46c0      	nop			; (mov r8, r8)
 8006000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006002:	bc08      	pop	{r3}
 8006004:	469e      	mov	lr, r3
 8006006:	4770      	bx	lr

08006008 <_fini>:
 8006008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800600a:	46c0      	nop			; (mov r8, r8)
 800600c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800600e:	bc08      	pop	{r3}
 8006010:	469e      	mov	lr, r3
 8006012:	4770      	bx	lr
