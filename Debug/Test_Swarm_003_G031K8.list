
Test_Swarm_003_G031K8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e18  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b8  08009ed8  08009ed8  00019ed8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a590  0800a590  00020250  2**0
                  CONTENTS
  4 .ARM          00000008  0800a590  0800a590  0001a590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a598  0800a598  00020250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a598  0800a598  0001a598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a59c  0800a59c  0001a59c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000250  20000000  0800a5a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000033c  20000250  0800a7f0  00020250  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000058c  0800a7f0  0002058c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012280  00000000  00000000  00020278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000256f  00000000  00000000  000324f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f60  00000000  00000000  00034a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e78  00000000  00000000  000359c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001790d  00000000  00000000  00036840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011d01  00000000  00000000  0004e14d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094b44  00000000  00000000  0005fe4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f4992  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ca8  00000000  00000000  000f49e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000250 	.word	0x20000250
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08009ebc 	.word	0x08009ebc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000254 	.word	0x20000254
 8000100:	08009ebc 	.word	0x08009ebc

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 f969 	bl	8001710 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 f8b9 	bl	80015c0 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f95b 	bl	8001710 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 f951 	bl	8001710 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 f8e1 	bl	8001644 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 f8d7 	bl	8001644 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_cfrcmple>:
 80004a4:	4684      	mov	ip, r0
 80004a6:	0008      	movs	r0, r1
 80004a8:	4661      	mov	r1, ip
 80004aa:	e7ff      	b.n	80004ac <__aeabi_cfcmpeq>

080004ac <__aeabi_cfcmpeq>:
 80004ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004ae:	f000 f9fb 	bl	80008a8 <__lesf2>
 80004b2:	2800      	cmp	r0, #0
 80004b4:	d401      	bmi.n	80004ba <__aeabi_cfcmpeq+0xe>
 80004b6:	2100      	movs	r1, #0
 80004b8:	42c8      	cmn	r0, r1
 80004ba:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004bc <__aeabi_fcmpeq>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f000 f987 	bl	80007d0 <__eqsf2>
 80004c2:	4240      	negs	r0, r0
 80004c4:	3001      	adds	r0, #1
 80004c6:	bd10      	pop	{r4, pc}

080004c8 <__aeabi_fcmplt>:
 80004c8:	b510      	push	{r4, lr}
 80004ca:	f000 f9ed 	bl	80008a8 <__lesf2>
 80004ce:	2800      	cmp	r0, #0
 80004d0:	db01      	blt.n	80004d6 <__aeabi_fcmplt+0xe>
 80004d2:	2000      	movs	r0, #0
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	2001      	movs	r0, #1
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	46c0      	nop			; (mov r8, r8)

080004dc <__aeabi_fcmple>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 f9e3 	bl	80008a8 <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	dd01      	ble.n	80004ea <__aeabi_fcmple+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__aeabi_fcmpgt>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 f993 	bl	800081c <__gesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dc01      	bgt.n	80004fe <__aeabi_fcmpgt+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__aeabi_fcmpge>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 f989 	bl	800081c <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	da01      	bge.n	8000512 <__aeabi_fcmpge+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			; (mov r8, r8)

08000518 <__aeabi_uldivmod>:
 8000518:	2b00      	cmp	r3, #0
 800051a:	d111      	bne.n	8000540 <__aeabi_uldivmod+0x28>
 800051c:	2a00      	cmp	r2, #0
 800051e:	d10f      	bne.n	8000540 <__aeabi_uldivmod+0x28>
 8000520:	2900      	cmp	r1, #0
 8000522:	d100      	bne.n	8000526 <__aeabi_uldivmod+0xe>
 8000524:	2800      	cmp	r0, #0
 8000526:	d002      	beq.n	800052e <__aeabi_uldivmod+0x16>
 8000528:	2100      	movs	r1, #0
 800052a:	43c9      	mvns	r1, r1
 800052c:	0008      	movs	r0, r1
 800052e:	b407      	push	{r0, r1, r2}
 8000530:	4802      	ldr	r0, [pc, #8]	; (800053c <__aeabi_uldivmod+0x24>)
 8000532:	a102      	add	r1, pc, #8	; (adr r1, 800053c <__aeabi_uldivmod+0x24>)
 8000534:	1840      	adds	r0, r0, r1
 8000536:	9002      	str	r0, [sp, #8]
 8000538:	bd03      	pop	{r0, r1, pc}
 800053a:	46c0      	nop			; (mov r8, r8)
 800053c:	fffffee9 	.word	0xfffffee9
 8000540:	b403      	push	{r0, r1}
 8000542:	4668      	mov	r0, sp
 8000544:	b501      	push	{r0, lr}
 8000546:	9802      	ldr	r0, [sp, #8]
 8000548:	f000 f876 	bl	8000638 <__udivmoddi4>
 800054c:	9b01      	ldr	r3, [sp, #4]
 800054e:	469e      	mov	lr, r3
 8000550:	b002      	add	sp, #8
 8000552:	bc0c      	pop	{r2, r3}
 8000554:	4770      	bx	lr
 8000556:	46c0      	nop			; (mov r8, r8)

08000558 <__aeabi_d2uiz>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	2200      	movs	r2, #0
 800055c:	4b0c      	ldr	r3, [pc, #48]	; (8000590 <__aeabi_d2uiz+0x38>)
 800055e:	0004      	movs	r4, r0
 8000560:	000d      	movs	r5, r1
 8000562:	f7ff ff95 	bl	8000490 <__aeabi_dcmpge>
 8000566:	2800      	cmp	r0, #0
 8000568:	d104      	bne.n	8000574 <__aeabi_d2uiz+0x1c>
 800056a:	0020      	movs	r0, r4
 800056c:	0029      	movs	r1, r5
 800056e:	f001 ff4f 	bl	8002410 <__aeabi_d2iz>
 8000572:	bd70      	pop	{r4, r5, r6, pc}
 8000574:	4b06      	ldr	r3, [pc, #24]	; (8000590 <__aeabi_d2uiz+0x38>)
 8000576:	2200      	movs	r2, #0
 8000578:	0020      	movs	r0, r4
 800057a:	0029      	movs	r1, r5
 800057c:	f001 fb98 	bl	8001cb0 <__aeabi_dsub>
 8000580:	f001 ff46 	bl	8002410 <__aeabi_d2iz>
 8000584:	2380      	movs	r3, #128	; 0x80
 8000586:	061b      	lsls	r3, r3, #24
 8000588:	469c      	mov	ip, r3
 800058a:	4460      	add	r0, ip
 800058c:	e7f1      	b.n	8000572 <__aeabi_d2uiz+0x1a>
 800058e:	46c0      	nop			; (mov r8, r8)
 8000590:	41e00000 	.word	0x41e00000

08000594 <__aeabi_d2lz>:
 8000594:	b570      	push	{r4, r5, r6, lr}
 8000596:	0005      	movs	r5, r0
 8000598:	000c      	movs	r4, r1
 800059a:	2200      	movs	r2, #0
 800059c:	2300      	movs	r3, #0
 800059e:	0028      	movs	r0, r5
 80005a0:	0021      	movs	r1, r4
 80005a2:	f7ff ff57 	bl	8000454 <__aeabi_dcmplt>
 80005a6:	2800      	cmp	r0, #0
 80005a8:	d108      	bne.n	80005bc <__aeabi_d2lz+0x28>
 80005aa:	0028      	movs	r0, r5
 80005ac:	0021      	movs	r1, r4
 80005ae:	f000 f80f 	bl	80005d0 <__aeabi_d2ulz>
 80005b2:	0002      	movs	r2, r0
 80005b4:	000b      	movs	r3, r1
 80005b6:	0010      	movs	r0, r2
 80005b8:	0019      	movs	r1, r3
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	2380      	movs	r3, #128	; 0x80
 80005be:	061b      	lsls	r3, r3, #24
 80005c0:	18e1      	adds	r1, r4, r3
 80005c2:	0028      	movs	r0, r5
 80005c4:	f000 f804 	bl	80005d0 <__aeabi_d2ulz>
 80005c8:	2300      	movs	r3, #0
 80005ca:	4242      	negs	r2, r0
 80005cc:	418b      	sbcs	r3, r1
 80005ce:	e7f2      	b.n	80005b6 <__aeabi_d2lz+0x22>

080005d0 <__aeabi_d2ulz>:
 80005d0:	b570      	push	{r4, r5, r6, lr}
 80005d2:	2200      	movs	r2, #0
 80005d4:	4b0b      	ldr	r3, [pc, #44]	; (8000604 <__aeabi_d2ulz+0x34>)
 80005d6:	000d      	movs	r5, r1
 80005d8:	0004      	movs	r4, r0
 80005da:	f001 f8fd 	bl	80017d8 <__aeabi_dmul>
 80005de:	f7ff ffbb 	bl	8000558 <__aeabi_d2uiz>
 80005e2:	0006      	movs	r6, r0
 80005e4:	f001 ff7a 	bl	80024dc <__aeabi_ui2d>
 80005e8:	2200      	movs	r2, #0
 80005ea:	4b07      	ldr	r3, [pc, #28]	; (8000608 <__aeabi_d2ulz+0x38>)
 80005ec:	f001 f8f4 	bl	80017d8 <__aeabi_dmul>
 80005f0:	0002      	movs	r2, r0
 80005f2:	000b      	movs	r3, r1
 80005f4:	0020      	movs	r0, r4
 80005f6:	0029      	movs	r1, r5
 80005f8:	f001 fb5a 	bl	8001cb0 <__aeabi_dsub>
 80005fc:	f7ff ffac 	bl	8000558 <__aeabi_d2uiz>
 8000600:	0031      	movs	r1, r6
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	3df00000 	.word	0x3df00000
 8000608:	41f00000 	.word	0x41f00000

0800060c <__aeabi_l2d>:
 800060c:	b570      	push	{r4, r5, r6, lr}
 800060e:	0006      	movs	r6, r0
 8000610:	0008      	movs	r0, r1
 8000612:	f001 ff33 	bl	800247c <__aeabi_i2d>
 8000616:	2200      	movs	r2, #0
 8000618:	4b06      	ldr	r3, [pc, #24]	; (8000634 <__aeabi_l2d+0x28>)
 800061a:	f001 f8dd 	bl	80017d8 <__aeabi_dmul>
 800061e:	000d      	movs	r5, r1
 8000620:	0004      	movs	r4, r0
 8000622:	0030      	movs	r0, r6
 8000624:	f001 ff5a 	bl	80024dc <__aeabi_ui2d>
 8000628:	002b      	movs	r3, r5
 800062a:	0022      	movs	r2, r4
 800062c:	f000 f996 	bl	800095c <__aeabi_dadd>
 8000630:	bd70      	pop	{r4, r5, r6, pc}
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	41f00000 	.word	0x41f00000

08000638 <__udivmoddi4>:
 8000638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800063a:	4657      	mov	r7, sl
 800063c:	464e      	mov	r6, r9
 800063e:	4645      	mov	r5, r8
 8000640:	46de      	mov	lr, fp
 8000642:	b5e0      	push	{r5, r6, r7, lr}
 8000644:	0004      	movs	r4, r0
 8000646:	000d      	movs	r5, r1
 8000648:	4692      	mov	sl, r2
 800064a:	4699      	mov	r9, r3
 800064c:	b083      	sub	sp, #12
 800064e:	428b      	cmp	r3, r1
 8000650:	d830      	bhi.n	80006b4 <__udivmoddi4+0x7c>
 8000652:	d02d      	beq.n	80006b0 <__udivmoddi4+0x78>
 8000654:	4649      	mov	r1, r9
 8000656:	4650      	mov	r0, sl
 8000658:	f002 f80c 	bl	8002674 <__clzdi2>
 800065c:	0029      	movs	r1, r5
 800065e:	0006      	movs	r6, r0
 8000660:	0020      	movs	r0, r4
 8000662:	f002 f807 	bl	8002674 <__clzdi2>
 8000666:	1a33      	subs	r3, r6, r0
 8000668:	4698      	mov	r8, r3
 800066a:	3b20      	subs	r3, #32
 800066c:	469b      	mov	fp, r3
 800066e:	d433      	bmi.n	80006d8 <__udivmoddi4+0xa0>
 8000670:	465a      	mov	r2, fp
 8000672:	4653      	mov	r3, sl
 8000674:	4093      	lsls	r3, r2
 8000676:	4642      	mov	r2, r8
 8000678:	001f      	movs	r7, r3
 800067a:	4653      	mov	r3, sl
 800067c:	4093      	lsls	r3, r2
 800067e:	001e      	movs	r6, r3
 8000680:	42af      	cmp	r7, r5
 8000682:	d83a      	bhi.n	80006fa <__udivmoddi4+0xc2>
 8000684:	42af      	cmp	r7, r5
 8000686:	d100      	bne.n	800068a <__udivmoddi4+0x52>
 8000688:	e078      	b.n	800077c <__udivmoddi4+0x144>
 800068a:	465b      	mov	r3, fp
 800068c:	1ba4      	subs	r4, r4, r6
 800068e:	41bd      	sbcs	r5, r7
 8000690:	2b00      	cmp	r3, #0
 8000692:	da00      	bge.n	8000696 <__udivmoddi4+0x5e>
 8000694:	e075      	b.n	8000782 <__udivmoddi4+0x14a>
 8000696:	2200      	movs	r2, #0
 8000698:	2300      	movs	r3, #0
 800069a:	9200      	str	r2, [sp, #0]
 800069c:	9301      	str	r3, [sp, #4]
 800069e:	2301      	movs	r3, #1
 80006a0:	465a      	mov	r2, fp
 80006a2:	4093      	lsls	r3, r2
 80006a4:	9301      	str	r3, [sp, #4]
 80006a6:	2301      	movs	r3, #1
 80006a8:	4642      	mov	r2, r8
 80006aa:	4093      	lsls	r3, r2
 80006ac:	9300      	str	r3, [sp, #0]
 80006ae:	e028      	b.n	8000702 <__udivmoddi4+0xca>
 80006b0:	4282      	cmp	r2, r0
 80006b2:	d9cf      	bls.n	8000654 <__udivmoddi4+0x1c>
 80006b4:	2200      	movs	r2, #0
 80006b6:	2300      	movs	r3, #0
 80006b8:	9200      	str	r2, [sp, #0]
 80006ba:	9301      	str	r3, [sp, #4]
 80006bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <__udivmoddi4+0x8e>
 80006c2:	601c      	str	r4, [r3, #0]
 80006c4:	605d      	str	r5, [r3, #4]
 80006c6:	9800      	ldr	r0, [sp, #0]
 80006c8:	9901      	ldr	r1, [sp, #4]
 80006ca:	b003      	add	sp, #12
 80006cc:	bcf0      	pop	{r4, r5, r6, r7}
 80006ce:	46bb      	mov	fp, r7
 80006d0:	46b2      	mov	sl, r6
 80006d2:	46a9      	mov	r9, r5
 80006d4:	46a0      	mov	r8, r4
 80006d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006d8:	4642      	mov	r2, r8
 80006da:	2320      	movs	r3, #32
 80006dc:	1a9b      	subs	r3, r3, r2
 80006de:	4652      	mov	r2, sl
 80006e0:	40da      	lsrs	r2, r3
 80006e2:	4641      	mov	r1, r8
 80006e4:	0013      	movs	r3, r2
 80006e6:	464a      	mov	r2, r9
 80006e8:	408a      	lsls	r2, r1
 80006ea:	0017      	movs	r7, r2
 80006ec:	4642      	mov	r2, r8
 80006ee:	431f      	orrs	r7, r3
 80006f0:	4653      	mov	r3, sl
 80006f2:	4093      	lsls	r3, r2
 80006f4:	001e      	movs	r6, r3
 80006f6:	42af      	cmp	r7, r5
 80006f8:	d9c4      	bls.n	8000684 <__udivmoddi4+0x4c>
 80006fa:	2200      	movs	r2, #0
 80006fc:	2300      	movs	r3, #0
 80006fe:	9200      	str	r2, [sp, #0]
 8000700:	9301      	str	r3, [sp, #4]
 8000702:	4643      	mov	r3, r8
 8000704:	2b00      	cmp	r3, #0
 8000706:	d0d9      	beq.n	80006bc <__udivmoddi4+0x84>
 8000708:	07fb      	lsls	r3, r7, #31
 800070a:	0872      	lsrs	r2, r6, #1
 800070c:	431a      	orrs	r2, r3
 800070e:	4646      	mov	r6, r8
 8000710:	087b      	lsrs	r3, r7, #1
 8000712:	e00e      	b.n	8000732 <__udivmoddi4+0xfa>
 8000714:	42ab      	cmp	r3, r5
 8000716:	d101      	bne.n	800071c <__udivmoddi4+0xe4>
 8000718:	42a2      	cmp	r2, r4
 800071a:	d80c      	bhi.n	8000736 <__udivmoddi4+0xfe>
 800071c:	1aa4      	subs	r4, r4, r2
 800071e:	419d      	sbcs	r5, r3
 8000720:	2001      	movs	r0, #1
 8000722:	1924      	adds	r4, r4, r4
 8000724:	416d      	adcs	r5, r5
 8000726:	2100      	movs	r1, #0
 8000728:	3e01      	subs	r6, #1
 800072a:	1824      	adds	r4, r4, r0
 800072c:	414d      	adcs	r5, r1
 800072e:	2e00      	cmp	r6, #0
 8000730:	d006      	beq.n	8000740 <__udivmoddi4+0x108>
 8000732:	42ab      	cmp	r3, r5
 8000734:	d9ee      	bls.n	8000714 <__udivmoddi4+0xdc>
 8000736:	3e01      	subs	r6, #1
 8000738:	1924      	adds	r4, r4, r4
 800073a:	416d      	adcs	r5, r5
 800073c:	2e00      	cmp	r6, #0
 800073e:	d1f8      	bne.n	8000732 <__udivmoddi4+0xfa>
 8000740:	9800      	ldr	r0, [sp, #0]
 8000742:	9901      	ldr	r1, [sp, #4]
 8000744:	465b      	mov	r3, fp
 8000746:	1900      	adds	r0, r0, r4
 8000748:	4169      	adcs	r1, r5
 800074a:	2b00      	cmp	r3, #0
 800074c:	db24      	blt.n	8000798 <__udivmoddi4+0x160>
 800074e:	002b      	movs	r3, r5
 8000750:	465a      	mov	r2, fp
 8000752:	4644      	mov	r4, r8
 8000754:	40d3      	lsrs	r3, r2
 8000756:	002a      	movs	r2, r5
 8000758:	40e2      	lsrs	r2, r4
 800075a:	001c      	movs	r4, r3
 800075c:	465b      	mov	r3, fp
 800075e:	0015      	movs	r5, r2
 8000760:	2b00      	cmp	r3, #0
 8000762:	db2a      	blt.n	80007ba <__udivmoddi4+0x182>
 8000764:	0026      	movs	r6, r4
 8000766:	409e      	lsls	r6, r3
 8000768:	0033      	movs	r3, r6
 800076a:	0026      	movs	r6, r4
 800076c:	4647      	mov	r7, r8
 800076e:	40be      	lsls	r6, r7
 8000770:	0032      	movs	r2, r6
 8000772:	1a80      	subs	r0, r0, r2
 8000774:	4199      	sbcs	r1, r3
 8000776:	9000      	str	r0, [sp, #0]
 8000778:	9101      	str	r1, [sp, #4]
 800077a:	e79f      	b.n	80006bc <__udivmoddi4+0x84>
 800077c:	42a3      	cmp	r3, r4
 800077e:	d8bc      	bhi.n	80006fa <__udivmoddi4+0xc2>
 8000780:	e783      	b.n	800068a <__udivmoddi4+0x52>
 8000782:	4642      	mov	r2, r8
 8000784:	2320      	movs	r3, #32
 8000786:	2100      	movs	r1, #0
 8000788:	1a9b      	subs	r3, r3, r2
 800078a:	2200      	movs	r2, #0
 800078c:	9100      	str	r1, [sp, #0]
 800078e:	9201      	str	r2, [sp, #4]
 8000790:	2201      	movs	r2, #1
 8000792:	40da      	lsrs	r2, r3
 8000794:	9201      	str	r2, [sp, #4]
 8000796:	e786      	b.n	80006a6 <__udivmoddi4+0x6e>
 8000798:	4642      	mov	r2, r8
 800079a:	2320      	movs	r3, #32
 800079c:	1a9b      	subs	r3, r3, r2
 800079e:	002a      	movs	r2, r5
 80007a0:	4646      	mov	r6, r8
 80007a2:	409a      	lsls	r2, r3
 80007a4:	0023      	movs	r3, r4
 80007a6:	40f3      	lsrs	r3, r6
 80007a8:	4644      	mov	r4, r8
 80007aa:	4313      	orrs	r3, r2
 80007ac:	002a      	movs	r2, r5
 80007ae:	40e2      	lsrs	r2, r4
 80007b0:	001c      	movs	r4, r3
 80007b2:	465b      	mov	r3, fp
 80007b4:	0015      	movs	r5, r2
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	dad4      	bge.n	8000764 <__udivmoddi4+0x12c>
 80007ba:	4642      	mov	r2, r8
 80007bc:	002f      	movs	r7, r5
 80007be:	2320      	movs	r3, #32
 80007c0:	0026      	movs	r6, r4
 80007c2:	4097      	lsls	r7, r2
 80007c4:	1a9b      	subs	r3, r3, r2
 80007c6:	40de      	lsrs	r6, r3
 80007c8:	003b      	movs	r3, r7
 80007ca:	4333      	orrs	r3, r6
 80007cc:	e7cd      	b.n	800076a <__udivmoddi4+0x132>
 80007ce:	46c0      	nop			; (mov r8, r8)

080007d0 <__eqsf2>:
 80007d0:	b570      	push	{r4, r5, r6, lr}
 80007d2:	0042      	lsls	r2, r0, #1
 80007d4:	0245      	lsls	r5, r0, #9
 80007d6:	024e      	lsls	r6, r1, #9
 80007d8:	004c      	lsls	r4, r1, #1
 80007da:	0fc3      	lsrs	r3, r0, #31
 80007dc:	0a6d      	lsrs	r5, r5, #9
 80007de:	2001      	movs	r0, #1
 80007e0:	0e12      	lsrs	r2, r2, #24
 80007e2:	0a76      	lsrs	r6, r6, #9
 80007e4:	0e24      	lsrs	r4, r4, #24
 80007e6:	0fc9      	lsrs	r1, r1, #31
 80007e8:	2aff      	cmp	r2, #255	; 0xff
 80007ea:	d006      	beq.n	80007fa <__eqsf2+0x2a>
 80007ec:	2cff      	cmp	r4, #255	; 0xff
 80007ee:	d003      	beq.n	80007f8 <__eqsf2+0x28>
 80007f0:	42a2      	cmp	r2, r4
 80007f2:	d101      	bne.n	80007f8 <__eqsf2+0x28>
 80007f4:	42b5      	cmp	r5, r6
 80007f6:	d006      	beq.n	8000806 <__eqsf2+0x36>
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	2d00      	cmp	r5, #0
 80007fc:	d1fc      	bne.n	80007f8 <__eqsf2+0x28>
 80007fe:	2cff      	cmp	r4, #255	; 0xff
 8000800:	d1fa      	bne.n	80007f8 <__eqsf2+0x28>
 8000802:	2e00      	cmp	r6, #0
 8000804:	d1f8      	bne.n	80007f8 <__eqsf2+0x28>
 8000806:	428b      	cmp	r3, r1
 8000808:	d006      	beq.n	8000818 <__eqsf2+0x48>
 800080a:	2001      	movs	r0, #1
 800080c:	2a00      	cmp	r2, #0
 800080e:	d1f3      	bne.n	80007f8 <__eqsf2+0x28>
 8000810:	0028      	movs	r0, r5
 8000812:	1e43      	subs	r3, r0, #1
 8000814:	4198      	sbcs	r0, r3
 8000816:	e7ef      	b.n	80007f8 <__eqsf2+0x28>
 8000818:	2000      	movs	r0, #0
 800081a:	e7ed      	b.n	80007f8 <__eqsf2+0x28>

0800081c <__gesf2>:
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	0042      	lsls	r2, r0, #1
 8000820:	0245      	lsls	r5, r0, #9
 8000822:	024e      	lsls	r6, r1, #9
 8000824:	004c      	lsls	r4, r1, #1
 8000826:	0fc3      	lsrs	r3, r0, #31
 8000828:	0a6d      	lsrs	r5, r5, #9
 800082a:	0e12      	lsrs	r2, r2, #24
 800082c:	0a76      	lsrs	r6, r6, #9
 800082e:	0e24      	lsrs	r4, r4, #24
 8000830:	0fc8      	lsrs	r0, r1, #31
 8000832:	2aff      	cmp	r2, #255	; 0xff
 8000834:	d01b      	beq.n	800086e <__gesf2+0x52>
 8000836:	2cff      	cmp	r4, #255	; 0xff
 8000838:	d00e      	beq.n	8000858 <__gesf2+0x3c>
 800083a:	2a00      	cmp	r2, #0
 800083c:	d11b      	bne.n	8000876 <__gesf2+0x5a>
 800083e:	2c00      	cmp	r4, #0
 8000840:	d101      	bne.n	8000846 <__gesf2+0x2a>
 8000842:	2e00      	cmp	r6, #0
 8000844:	d01c      	beq.n	8000880 <__gesf2+0x64>
 8000846:	2d00      	cmp	r5, #0
 8000848:	d00c      	beq.n	8000864 <__gesf2+0x48>
 800084a:	4283      	cmp	r3, r0
 800084c:	d01c      	beq.n	8000888 <__gesf2+0x6c>
 800084e:	2102      	movs	r1, #2
 8000850:	1e58      	subs	r0, r3, #1
 8000852:	4008      	ands	r0, r1
 8000854:	3801      	subs	r0, #1
 8000856:	bd70      	pop	{r4, r5, r6, pc}
 8000858:	2e00      	cmp	r6, #0
 800085a:	d122      	bne.n	80008a2 <__gesf2+0x86>
 800085c:	2a00      	cmp	r2, #0
 800085e:	d1f4      	bne.n	800084a <__gesf2+0x2e>
 8000860:	2d00      	cmp	r5, #0
 8000862:	d1f2      	bne.n	800084a <__gesf2+0x2e>
 8000864:	2800      	cmp	r0, #0
 8000866:	d1f6      	bne.n	8000856 <__gesf2+0x3a>
 8000868:	2001      	movs	r0, #1
 800086a:	4240      	negs	r0, r0
 800086c:	e7f3      	b.n	8000856 <__gesf2+0x3a>
 800086e:	2d00      	cmp	r5, #0
 8000870:	d117      	bne.n	80008a2 <__gesf2+0x86>
 8000872:	2cff      	cmp	r4, #255	; 0xff
 8000874:	d0f0      	beq.n	8000858 <__gesf2+0x3c>
 8000876:	2c00      	cmp	r4, #0
 8000878:	d1e7      	bne.n	800084a <__gesf2+0x2e>
 800087a:	2e00      	cmp	r6, #0
 800087c:	d1e5      	bne.n	800084a <__gesf2+0x2e>
 800087e:	e7e6      	b.n	800084e <__gesf2+0x32>
 8000880:	2000      	movs	r0, #0
 8000882:	2d00      	cmp	r5, #0
 8000884:	d0e7      	beq.n	8000856 <__gesf2+0x3a>
 8000886:	e7e2      	b.n	800084e <__gesf2+0x32>
 8000888:	42a2      	cmp	r2, r4
 800088a:	dc05      	bgt.n	8000898 <__gesf2+0x7c>
 800088c:	dbea      	blt.n	8000864 <__gesf2+0x48>
 800088e:	42b5      	cmp	r5, r6
 8000890:	d802      	bhi.n	8000898 <__gesf2+0x7c>
 8000892:	d3e7      	bcc.n	8000864 <__gesf2+0x48>
 8000894:	2000      	movs	r0, #0
 8000896:	e7de      	b.n	8000856 <__gesf2+0x3a>
 8000898:	4243      	negs	r3, r0
 800089a:	4158      	adcs	r0, r3
 800089c:	0040      	lsls	r0, r0, #1
 800089e:	3801      	subs	r0, #1
 80008a0:	e7d9      	b.n	8000856 <__gesf2+0x3a>
 80008a2:	2002      	movs	r0, #2
 80008a4:	4240      	negs	r0, r0
 80008a6:	e7d6      	b.n	8000856 <__gesf2+0x3a>

080008a8 <__lesf2>:
 80008a8:	b570      	push	{r4, r5, r6, lr}
 80008aa:	0042      	lsls	r2, r0, #1
 80008ac:	0245      	lsls	r5, r0, #9
 80008ae:	024e      	lsls	r6, r1, #9
 80008b0:	004c      	lsls	r4, r1, #1
 80008b2:	0fc3      	lsrs	r3, r0, #31
 80008b4:	0a6d      	lsrs	r5, r5, #9
 80008b6:	0e12      	lsrs	r2, r2, #24
 80008b8:	0a76      	lsrs	r6, r6, #9
 80008ba:	0e24      	lsrs	r4, r4, #24
 80008bc:	0fc8      	lsrs	r0, r1, #31
 80008be:	2aff      	cmp	r2, #255	; 0xff
 80008c0:	d00b      	beq.n	80008da <__lesf2+0x32>
 80008c2:	2cff      	cmp	r4, #255	; 0xff
 80008c4:	d00d      	beq.n	80008e2 <__lesf2+0x3a>
 80008c6:	2a00      	cmp	r2, #0
 80008c8:	d11f      	bne.n	800090a <__lesf2+0x62>
 80008ca:	2c00      	cmp	r4, #0
 80008cc:	d116      	bne.n	80008fc <__lesf2+0x54>
 80008ce:	2e00      	cmp	r6, #0
 80008d0:	d114      	bne.n	80008fc <__lesf2+0x54>
 80008d2:	2000      	movs	r0, #0
 80008d4:	2d00      	cmp	r5, #0
 80008d6:	d010      	beq.n	80008fa <__lesf2+0x52>
 80008d8:	e009      	b.n	80008ee <__lesf2+0x46>
 80008da:	2d00      	cmp	r5, #0
 80008dc:	d10c      	bne.n	80008f8 <__lesf2+0x50>
 80008de:	2cff      	cmp	r4, #255	; 0xff
 80008e0:	d113      	bne.n	800090a <__lesf2+0x62>
 80008e2:	2e00      	cmp	r6, #0
 80008e4:	d108      	bne.n	80008f8 <__lesf2+0x50>
 80008e6:	2a00      	cmp	r2, #0
 80008e8:	d008      	beq.n	80008fc <__lesf2+0x54>
 80008ea:	4283      	cmp	r3, r0
 80008ec:	d012      	beq.n	8000914 <__lesf2+0x6c>
 80008ee:	2102      	movs	r1, #2
 80008f0:	1e58      	subs	r0, r3, #1
 80008f2:	4008      	ands	r0, r1
 80008f4:	3801      	subs	r0, #1
 80008f6:	e000      	b.n	80008fa <__lesf2+0x52>
 80008f8:	2002      	movs	r0, #2
 80008fa:	bd70      	pop	{r4, r5, r6, pc}
 80008fc:	2d00      	cmp	r5, #0
 80008fe:	d1f4      	bne.n	80008ea <__lesf2+0x42>
 8000900:	2800      	cmp	r0, #0
 8000902:	d1fa      	bne.n	80008fa <__lesf2+0x52>
 8000904:	2001      	movs	r0, #1
 8000906:	4240      	negs	r0, r0
 8000908:	e7f7      	b.n	80008fa <__lesf2+0x52>
 800090a:	2c00      	cmp	r4, #0
 800090c:	d1ed      	bne.n	80008ea <__lesf2+0x42>
 800090e:	2e00      	cmp	r6, #0
 8000910:	d1eb      	bne.n	80008ea <__lesf2+0x42>
 8000912:	e7ec      	b.n	80008ee <__lesf2+0x46>
 8000914:	42a2      	cmp	r2, r4
 8000916:	dc05      	bgt.n	8000924 <__lesf2+0x7c>
 8000918:	dbf2      	blt.n	8000900 <__lesf2+0x58>
 800091a:	42b5      	cmp	r5, r6
 800091c:	d802      	bhi.n	8000924 <__lesf2+0x7c>
 800091e:	d3ef      	bcc.n	8000900 <__lesf2+0x58>
 8000920:	2000      	movs	r0, #0
 8000922:	e7ea      	b.n	80008fa <__lesf2+0x52>
 8000924:	4243      	negs	r3, r0
 8000926:	4158      	adcs	r0, r3
 8000928:	0040      	lsls	r0, r0, #1
 800092a:	3801      	subs	r0, #1
 800092c:	e7e5      	b.n	80008fa <__lesf2+0x52>
 800092e:	46c0      	nop			; (mov r8, r8)

08000930 <__aeabi_fcmpun>:
 8000930:	0243      	lsls	r3, r0, #9
 8000932:	024a      	lsls	r2, r1, #9
 8000934:	0040      	lsls	r0, r0, #1
 8000936:	0049      	lsls	r1, r1, #1
 8000938:	0a5b      	lsrs	r3, r3, #9
 800093a:	0a52      	lsrs	r2, r2, #9
 800093c:	0e09      	lsrs	r1, r1, #24
 800093e:	0e00      	lsrs	r0, r0, #24
 8000940:	28ff      	cmp	r0, #255	; 0xff
 8000942:	d006      	beq.n	8000952 <__aeabi_fcmpun+0x22>
 8000944:	2000      	movs	r0, #0
 8000946:	29ff      	cmp	r1, #255	; 0xff
 8000948:	d102      	bne.n	8000950 <__aeabi_fcmpun+0x20>
 800094a:	1e53      	subs	r3, r2, #1
 800094c:	419a      	sbcs	r2, r3
 800094e:	0010      	movs	r0, r2
 8000950:	4770      	bx	lr
 8000952:	38fe      	subs	r0, #254	; 0xfe
 8000954:	2b00      	cmp	r3, #0
 8000956:	d1fb      	bne.n	8000950 <__aeabi_fcmpun+0x20>
 8000958:	e7f4      	b.n	8000944 <__aeabi_fcmpun+0x14>
 800095a:	46c0      	nop			; (mov r8, r8)

0800095c <__aeabi_dadd>:
 800095c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800095e:	464f      	mov	r7, r9
 8000960:	4646      	mov	r6, r8
 8000962:	46d6      	mov	lr, sl
 8000964:	000d      	movs	r5, r1
 8000966:	0004      	movs	r4, r0
 8000968:	b5c0      	push	{r6, r7, lr}
 800096a:	001f      	movs	r7, r3
 800096c:	0011      	movs	r1, r2
 800096e:	0328      	lsls	r0, r5, #12
 8000970:	0f62      	lsrs	r2, r4, #29
 8000972:	0a40      	lsrs	r0, r0, #9
 8000974:	4310      	orrs	r0, r2
 8000976:	007a      	lsls	r2, r7, #1
 8000978:	0d52      	lsrs	r2, r2, #21
 800097a:	00e3      	lsls	r3, r4, #3
 800097c:	033c      	lsls	r4, r7, #12
 800097e:	4691      	mov	r9, r2
 8000980:	0a64      	lsrs	r4, r4, #9
 8000982:	0ffa      	lsrs	r2, r7, #31
 8000984:	0f4f      	lsrs	r7, r1, #29
 8000986:	006e      	lsls	r6, r5, #1
 8000988:	4327      	orrs	r7, r4
 800098a:	4692      	mov	sl, r2
 800098c:	46b8      	mov	r8, r7
 800098e:	0d76      	lsrs	r6, r6, #21
 8000990:	0fed      	lsrs	r5, r5, #31
 8000992:	00c9      	lsls	r1, r1, #3
 8000994:	4295      	cmp	r5, r2
 8000996:	d100      	bne.n	800099a <__aeabi_dadd+0x3e>
 8000998:	e099      	b.n	8000ace <__aeabi_dadd+0x172>
 800099a:	464c      	mov	r4, r9
 800099c:	1b34      	subs	r4, r6, r4
 800099e:	46a4      	mov	ip, r4
 80009a0:	2c00      	cmp	r4, #0
 80009a2:	dc00      	bgt.n	80009a6 <__aeabi_dadd+0x4a>
 80009a4:	e07c      	b.n	8000aa0 <__aeabi_dadd+0x144>
 80009a6:	464a      	mov	r2, r9
 80009a8:	2a00      	cmp	r2, #0
 80009aa:	d100      	bne.n	80009ae <__aeabi_dadd+0x52>
 80009ac:	e0b8      	b.n	8000b20 <__aeabi_dadd+0x1c4>
 80009ae:	4ac5      	ldr	r2, [pc, #788]	; (8000cc4 <__aeabi_dadd+0x368>)
 80009b0:	4296      	cmp	r6, r2
 80009b2:	d100      	bne.n	80009b6 <__aeabi_dadd+0x5a>
 80009b4:	e11c      	b.n	8000bf0 <__aeabi_dadd+0x294>
 80009b6:	2280      	movs	r2, #128	; 0x80
 80009b8:	003c      	movs	r4, r7
 80009ba:	0412      	lsls	r2, r2, #16
 80009bc:	4314      	orrs	r4, r2
 80009be:	46a0      	mov	r8, r4
 80009c0:	4662      	mov	r2, ip
 80009c2:	2a38      	cmp	r2, #56	; 0x38
 80009c4:	dd00      	ble.n	80009c8 <__aeabi_dadd+0x6c>
 80009c6:	e161      	b.n	8000c8c <__aeabi_dadd+0x330>
 80009c8:	2a1f      	cmp	r2, #31
 80009ca:	dd00      	ble.n	80009ce <__aeabi_dadd+0x72>
 80009cc:	e1cc      	b.n	8000d68 <__aeabi_dadd+0x40c>
 80009ce:	4664      	mov	r4, ip
 80009d0:	2220      	movs	r2, #32
 80009d2:	1b12      	subs	r2, r2, r4
 80009d4:	4644      	mov	r4, r8
 80009d6:	4094      	lsls	r4, r2
 80009d8:	000f      	movs	r7, r1
 80009da:	46a1      	mov	r9, r4
 80009dc:	4664      	mov	r4, ip
 80009de:	4091      	lsls	r1, r2
 80009e0:	40e7      	lsrs	r7, r4
 80009e2:	464c      	mov	r4, r9
 80009e4:	1e4a      	subs	r2, r1, #1
 80009e6:	4191      	sbcs	r1, r2
 80009e8:	433c      	orrs	r4, r7
 80009ea:	4642      	mov	r2, r8
 80009ec:	4321      	orrs	r1, r4
 80009ee:	4664      	mov	r4, ip
 80009f0:	40e2      	lsrs	r2, r4
 80009f2:	1a80      	subs	r0, r0, r2
 80009f4:	1a5c      	subs	r4, r3, r1
 80009f6:	42a3      	cmp	r3, r4
 80009f8:	419b      	sbcs	r3, r3
 80009fa:	425f      	negs	r7, r3
 80009fc:	1bc7      	subs	r7, r0, r7
 80009fe:	023b      	lsls	r3, r7, #8
 8000a00:	d400      	bmi.n	8000a04 <__aeabi_dadd+0xa8>
 8000a02:	e0d0      	b.n	8000ba6 <__aeabi_dadd+0x24a>
 8000a04:	027f      	lsls	r7, r7, #9
 8000a06:	0a7f      	lsrs	r7, r7, #9
 8000a08:	2f00      	cmp	r7, #0
 8000a0a:	d100      	bne.n	8000a0e <__aeabi_dadd+0xb2>
 8000a0c:	e0ff      	b.n	8000c0e <__aeabi_dadd+0x2b2>
 8000a0e:	0038      	movs	r0, r7
 8000a10:	f001 fe12 	bl	8002638 <__clzsi2>
 8000a14:	0001      	movs	r1, r0
 8000a16:	3908      	subs	r1, #8
 8000a18:	2320      	movs	r3, #32
 8000a1a:	0022      	movs	r2, r4
 8000a1c:	1a5b      	subs	r3, r3, r1
 8000a1e:	408f      	lsls	r7, r1
 8000a20:	40da      	lsrs	r2, r3
 8000a22:	408c      	lsls	r4, r1
 8000a24:	4317      	orrs	r7, r2
 8000a26:	42b1      	cmp	r1, r6
 8000a28:	da00      	bge.n	8000a2c <__aeabi_dadd+0xd0>
 8000a2a:	e0ff      	b.n	8000c2c <__aeabi_dadd+0x2d0>
 8000a2c:	1b89      	subs	r1, r1, r6
 8000a2e:	1c4b      	adds	r3, r1, #1
 8000a30:	2b1f      	cmp	r3, #31
 8000a32:	dd00      	ble.n	8000a36 <__aeabi_dadd+0xda>
 8000a34:	e0a8      	b.n	8000b88 <__aeabi_dadd+0x22c>
 8000a36:	2220      	movs	r2, #32
 8000a38:	0039      	movs	r1, r7
 8000a3a:	1ad2      	subs	r2, r2, r3
 8000a3c:	0020      	movs	r0, r4
 8000a3e:	4094      	lsls	r4, r2
 8000a40:	4091      	lsls	r1, r2
 8000a42:	40d8      	lsrs	r0, r3
 8000a44:	1e62      	subs	r2, r4, #1
 8000a46:	4194      	sbcs	r4, r2
 8000a48:	40df      	lsrs	r7, r3
 8000a4a:	2600      	movs	r6, #0
 8000a4c:	4301      	orrs	r1, r0
 8000a4e:	430c      	orrs	r4, r1
 8000a50:	0763      	lsls	r3, r4, #29
 8000a52:	d009      	beq.n	8000a68 <__aeabi_dadd+0x10c>
 8000a54:	230f      	movs	r3, #15
 8000a56:	4023      	ands	r3, r4
 8000a58:	2b04      	cmp	r3, #4
 8000a5a:	d005      	beq.n	8000a68 <__aeabi_dadd+0x10c>
 8000a5c:	1d23      	adds	r3, r4, #4
 8000a5e:	42a3      	cmp	r3, r4
 8000a60:	41a4      	sbcs	r4, r4
 8000a62:	4264      	negs	r4, r4
 8000a64:	193f      	adds	r7, r7, r4
 8000a66:	001c      	movs	r4, r3
 8000a68:	023b      	lsls	r3, r7, #8
 8000a6a:	d400      	bmi.n	8000a6e <__aeabi_dadd+0x112>
 8000a6c:	e09e      	b.n	8000bac <__aeabi_dadd+0x250>
 8000a6e:	4b95      	ldr	r3, [pc, #596]	; (8000cc4 <__aeabi_dadd+0x368>)
 8000a70:	3601      	adds	r6, #1
 8000a72:	429e      	cmp	r6, r3
 8000a74:	d100      	bne.n	8000a78 <__aeabi_dadd+0x11c>
 8000a76:	e0b7      	b.n	8000be8 <__aeabi_dadd+0x28c>
 8000a78:	4a93      	ldr	r2, [pc, #588]	; (8000cc8 <__aeabi_dadd+0x36c>)
 8000a7a:	08e4      	lsrs	r4, r4, #3
 8000a7c:	4017      	ands	r7, r2
 8000a7e:	077b      	lsls	r3, r7, #29
 8000a80:	0571      	lsls	r1, r6, #21
 8000a82:	027f      	lsls	r7, r7, #9
 8000a84:	4323      	orrs	r3, r4
 8000a86:	0b3f      	lsrs	r7, r7, #12
 8000a88:	0d4a      	lsrs	r2, r1, #21
 8000a8a:	0512      	lsls	r2, r2, #20
 8000a8c:	433a      	orrs	r2, r7
 8000a8e:	07ed      	lsls	r5, r5, #31
 8000a90:	432a      	orrs	r2, r5
 8000a92:	0018      	movs	r0, r3
 8000a94:	0011      	movs	r1, r2
 8000a96:	bce0      	pop	{r5, r6, r7}
 8000a98:	46ba      	mov	sl, r7
 8000a9a:	46b1      	mov	r9, r6
 8000a9c:	46a8      	mov	r8, r5
 8000a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000aa0:	2c00      	cmp	r4, #0
 8000aa2:	d04b      	beq.n	8000b3c <__aeabi_dadd+0x1e0>
 8000aa4:	464c      	mov	r4, r9
 8000aa6:	1ba4      	subs	r4, r4, r6
 8000aa8:	46a4      	mov	ip, r4
 8000aaa:	2e00      	cmp	r6, #0
 8000aac:	d000      	beq.n	8000ab0 <__aeabi_dadd+0x154>
 8000aae:	e123      	b.n	8000cf8 <__aeabi_dadd+0x39c>
 8000ab0:	0004      	movs	r4, r0
 8000ab2:	431c      	orrs	r4, r3
 8000ab4:	d100      	bne.n	8000ab8 <__aeabi_dadd+0x15c>
 8000ab6:	e1af      	b.n	8000e18 <__aeabi_dadd+0x4bc>
 8000ab8:	4662      	mov	r2, ip
 8000aba:	1e54      	subs	r4, r2, #1
 8000abc:	2a01      	cmp	r2, #1
 8000abe:	d100      	bne.n	8000ac2 <__aeabi_dadd+0x166>
 8000ac0:	e215      	b.n	8000eee <__aeabi_dadd+0x592>
 8000ac2:	4d80      	ldr	r5, [pc, #512]	; (8000cc4 <__aeabi_dadd+0x368>)
 8000ac4:	45ac      	cmp	ip, r5
 8000ac6:	d100      	bne.n	8000aca <__aeabi_dadd+0x16e>
 8000ac8:	e1c8      	b.n	8000e5c <__aeabi_dadd+0x500>
 8000aca:	46a4      	mov	ip, r4
 8000acc:	e11b      	b.n	8000d06 <__aeabi_dadd+0x3aa>
 8000ace:	464a      	mov	r2, r9
 8000ad0:	1ab2      	subs	r2, r6, r2
 8000ad2:	4694      	mov	ip, r2
 8000ad4:	2a00      	cmp	r2, #0
 8000ad6:	dc00      	bgt.n	8000ada <__aeabi_dadd+0x17e>
 8000ad8:	e0ac      	b.n	8000c34 <__aeabi_dadd+0x2d8>
 8000ada:	464a      	mov	r2, r9
 8000adc:	2a00      	cmp	r2, #0
 8000ade:	d043      	beq.n	8000b68 <__aeabi_dadd+0x20c>
 8000ae0:	4a78      	ldr	r2, [pc, #480]	; (8000cc4 <__aeabi_dadd+0x368>)
 8000ae2:	4296      	cmp	r6, r2
 8000ae4:	d100      	bne.n	8000ae8 <__aeabi_dadd+0x18c>
 8000ae6:	e1af      	b.n	8000e48 <__aeabi_dadd+0x4ec>
 8000ae8:	2280      	movs	r2, #128	; 0x80
 8000aea:	003c      	movs	r4, r7
 8000aec:	0412      	lsls	r2, r2, #16
 8000aee:	4314      	orrs	r4, r2
 8000af0:	46a0      	mov	r8, r4
 8000af2:	4662      	mov	r2, ip
 8000af4:	2a38      	cmp	r2, #56	; 0x38
 8000af6:	dc67      	bgt.n	8000bc8 <__aeabi_dadd+0x26c>
 8000af8:	2a1f      	cmp	r2, #31
 8000afa:	dc00      	bgt.n	8000afe <__aeabi_dadd+0x1a2>
 8000afc:	e15f      	b.n	8000dbe <__aeabi_dadd+0x462>
 8000afe:	4647      	mov	r7, r8
 8000b00:	3a20      	subs	r2, #32
 8000b02:	40d7      	lsrs	r7, r2
 8000b04:	4662      	mov	r2, ip
 8000b06:	2a20      	cmp	r2, #32
 8000b08:	d005      	beq.n	8000b16 <__aeabi_dadd+0x1ba>
 8000b0a:	4664      	mov	r4, ip
 8000b0c:	2240      	movs	r2, #64	; 0x40
 8000b0e:	1b12      	subs	r2, r2, r4
 8000b10:	4644      	mov	r4, r8
 8000b12:	4094      	lsls	r4, r2
 8000b14:	4321      	orrs	r1, r4
 8000b16:	1e4a      	subs	r2, r1, #1
 8000b18:	4191      	sbcs	r1, r2
 8000b1a:	000c      	movs	r4, r1
 8000b1c:	433c      	orrs	r4, r7
 8000b1e:	e057      	b.n	8000bd0 <__aeabi_dadd+0x274>
 8000b20:	003a      	movs	r2, r7
 8000b22:	430a      	orrs	r2, r1
 8000b24:	d100      	bne.n	8000b28 <__aeabi_dadd+0x1cc>
 8000b26:	e105      	b.n	8000d34 <__aeabi_dadd+0x3d8>
 8000b28:	0022      	movs	r2, r4
 8000b2a:	3a01      	subs	r2, #1
 8000b2c:	2c01      	cmp	r4, #1
 8000b2e:	d100      	bne.n	8000b32 <__aeabi_dadd+0x1d6>
 8000b30:	e182      	b.n	8000e38 <__aeabi_dadd+0x4dc>
 8000b32:	4c64      	ldr	r4, [pc, #400]	; (8000cc4 <__aeabi_dadd+0x368>)
 8000b34:	45a4      	cmp	ip, r4
 8000b36:	d05b      	beq.n	8000bf0 <__aeabi_dadd+0x294>
 8000b38:	4694      	mov	ip, r2
 8000b3a:	e741      	b.n	80009c0 <__aeabi_dadd+0x64>
 8000b3c:	4c63      	ldr	r4, [pc, #396]	; (8000ccc <__aeabi_dadd+0x370>)
 8000b3e:	1c77      	adds	r7, r6, #1
 8000b40:	4227      	tst	r7, r4
 8000b42:	d000      	beq.n	8000b46 <__aeabi_dadd+0x1ea>
 8000b44:	e0c4      	b.n	8000cd0 <__aeabi_dadd+0x374>
 8000b46:	0004      	movs	r4, r0
 8000b48:	431c      	orrs	r4, r3
 8000b4a:	2e00      	cmp	r6, #0
 8000b4c:	d000      	beq.n	8000b50 <__aeabi_dadd+0x1f4>
 8000b4e:	e169      	b.n	8000e24 <__aeabi_dadd+0x4c8>
 8000b50:	2c00      	cmp	r4, #0
 8000b52:	d100      	bne.n	8000b56 <__aeabi_dadd+0x1fa>
 8000b54:	e1bf      	b.n	8000ed6 <__aeabi_dadd+0x57a>
 8000b56:	4644      	mov	r4, r8
 8000b58:	430c      	orrs	r4, r1
 8000b5a:	d000      	beq.n	8000b5e <__aeabi_dadd+0x202>
 8000b5c:	e1d0      	b.n	8000f00 <__aeabi_dadd+0x5a4>
 8000b5e:	0742      	lsls	r2, r0, #29
 8000b60:	08db      	lsrs	r3, r3, #3
 8000b62:	4313      	orrs	r3, r2
 8000b64:	08c0      	lsrs	r0, r0, #3
 8000b66:	e029      	b.n	8000bbc <__aeabi_dadd+0x260>
 8000b68:	003a      	movs	r2, r7
 8000b6a:	430a      	orrs	r2, r1
 8000b6c:	d100      	bne.n	8000b70 <__aeabi_dadd+0x214>
 8000b6e:	e170      	b.n	8000e52 <__aeabi_dadd+0x4f6>
 8000b70:	4662      	mov	r2, ip
 8000b72:	4664      	mov	r4, ip
 8000b74:	3a01      	subs	r2, #1
 8000b76:	2c01      	cmp	r4, #1
 8000b78:	d100      	bne.n	8000b7c <__aeabi_dadd+0x220>
 8000b7a:	e0e0      	b.n	8000d3e <__aeabi_dadd+0x3e2>
 8000b7c:	4c51      	ldr	r4, [pc, #324]	; (8000cc4 <__aeabi_dadd+0x368>)
 8000b7e:	45a4      	cmp	ip, r4
 8000b80:	d100      	bne.n	8000b84 <__aeabi_dadd+0x228>
 8000b82:	e161      	b.n	8000e48 <__aeabi_dadd+0x4ec>
 8000b84:	4694      	mov	ip, r2
 8000b86:	e7b4      	b.n	8000af2 <__aeabi_dadd+0x196>
 8000b88:	003a      	movs	r2, r7
 8000b8a:	391f      	subs	r1, #31
 8000b8c:	40ca      	lsrs	r2, r1
 8000b8e:	0011      	movs	r1, r2
 8000b90:	2b20      	cmp	r3, #32
 8000b92:	d003      	beq.n	8000b9c <__aeabi_dadd+0x240>
 8000b94:	2240      	movs	r2, #64	; 0x40
 8000b96:	1ad3      	subs	r3, r2, r3
 8000b98:	409f      	lsls	r7, r3
 8000b9a:	433c      	orrs	r4, r7
 8000b9c:	1e63      	subs	r3, r4, #1
 8000b9e:	419c      	sbcs	r4, r3
 8000ba0:	2700      	movs	r7, #0
 8000ba2:	2600      	movs	r6, #0
 8000ba4:	430c      	orrs	r4, r1
 8000ba6:	0763      	lsls	r3, r4, #29
 8000ba8:	d000      	beq.n	8000bac <__aeabi_dadd+0x250>
 8000baa:	e753      	b.n	8000a54 <__aeabi_dadd+0xf8>
 8000bac:	46b4      	mov	ip, r6
 8000bae:	08e4      	lsrs	r4, r4, #3
 8000bb0:	077b      	lsls	r3, r7, #29
 8000bb2:	4323      	orrs	r3, r4
 8000bb4:	08f8      	lsrs	r0, r7, #3
 8000bb6:	4a43      	ldr	r2, [pc, #268]	; (8000cc4 <__aeabi_dadd+0x368>)
 8000bb8:	4594      	cmp	ip, r2
 8000bba:	d01d      	beq.n	8000bf8 <__aeabi_dadd+0x29c>
 8000bbc:	4662      	mov	r2, ip
 8000bbe:	0307      	lsls	r7, r0, #12
 8000bc0:	0552      	lsls	r2, r2, #21
 8000bc2:	0b3f      	lsrs	r7, r7, #12
 8000bc4:	0d52      	lsrs	r2, r2, #21
 8000bc6:	e760      	b.n	8000a8a <__aeabi_dadd+0x12e>
 8000bc8:	4644      	mov	r4, r8
 8000bca:	430c      	orrs	r4, r1
 8000bcc:	1e62      	subs	r2, r4, #1
 8000bce:	4194      	sbcs	r4, r2
 8000bd0:	18e4      	adds	r4, r4, r3
 8000bd2:	429c      	cmp	r4, r3
 8000bd4:	419b      	sbcs	r3, r3
 8000bd6:	425f      	negs	r7, r3
 8000bd8:	183f      	adds	r7, r7, r0
 8000bda:	023b      	lsls	r3, r7, #8
 8000bdc:	d5e3      	bpl.n	8000ba6 <__aeabi_dadd+0x24a>
 8000bde:	4b39      	ldr	r3, [pc, #228]	; (8000cc4 <__aeabi_dadd+0x368>)
 8000be0:	3601      	adds	r6, #1
 8000be2:	429e      	cmp	r6, r3
 8000be4:	d000      	beq.n	8000be8 <__aeabi_dadd+0x28c>
 8000be6:	e0b5      	b.n	8000d54 <__aeabi_dadd+0x3f8>
 8000be8:	0032      	movs	r2, r6
 8000bea:	2700      	movs	r7, #0
 8000bec:	2300      	movs	r3, #0
 8000bee:	e74c      	b.n	8000a8a <__aeabi_dadd+0x12e>
 8000bf0:	0742      	lsls	r2, r0, #29
 8000bf2:	08db      	lsrs	r3, r3, #3
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	08c0      	lsrs	r0, r0, #3
 8000bf8:	001a      	movs	r2, r3
 8000bfa:	4302      	orrs	r2, r0
 8000bfc:	d100      	bne.n	8000c00 <__aeabi_dadd+0x2a4>
 8000bfe:	e1e1      	b.n	8000fc4 <__aeabi_dadd+0x668>
 8000c00:	2780      	movs	r7, #128	; 0x80
 8000c02:	033f      	lsls	r7, r7, #12
 8000c04:	4307      	orrs	r7, r0
 8000c06:	033f      	lsls	r7, r7, #12
 8000c08:	4a2e      	ldr	r2, [pc, #184]	; (8000cc4 <__aeabi_dadd+0x368>)
 8000c0a:	0b3f      	lsrs	r7, r7, #12
 8000c0c:	e73d      	b.n	8000a8a <__aeabi_dadd+0x12e>
 8000c0e:	0020      	movs	r0, r4
 8000c10:	f001 fd12 	bl	8002638 <__clzsi2>
 8000c14:	0001      	movs	r1, r0
 8000c16:	3118      	adds	r1, #24
 8000c18:	291f      	cmp	r1, #31
 8000c1a:	dc00      	bgt.n	8000c1e <__aeabi_dadd+0x2c2>
 8000c1c:	e6fc      	b.n	8000a18 <__aeabi_dadd+0xbc>
 8000c1e:	3808      	subs	r0, #8
 8000c20:	4084      	lsls	r4, r0
 8000c22:	0027      	movs	r7, r4
 8000c24:	2400      	movs	r4, #0
 8000c26:	42b1      	cmp	r1, r6
 8000c28:	db00      	blt.n	8000c2c <__aeabi_dadd+0x2d0>
 8000c2a:	e6ff      	b.n	8000a2c <__aeabi_dadd+0xd0>
 8000c2c:	4a26      	ldr	r2, [pc, #152]	; (8000cc8 <__aeabi_dadd+0x36c>)
 8000c2e:	1a76      	subs	r6, r6, r1
 8000c30:	4017      	ands	r7, r2
 8000c32:	e70d      	b.n	8000a50 <__aeabi_dadd+0xf4>
 8000c34:	2a00      	cmp	r2, #0
 8000c36:	d02f      	beq.n	8000c98 <__aeabi_dadd+0x33c>
 8000c38:	464a      	mov	r2, r9
 8000c3a:	1b92      	subs	r2, r2, r6
 8000c3c:	4694      	mov	ip, r2
 8000c3e:	2e00      	cmp	r6, #0
 8000c40:	d100      	bne.n	8000c44 <__aeabi_dadd+0x2e8>
 8000c42:	e0ad      	b.n	8000da0 <__aeabi_dadd+0x444>
 8000c44:	4a1f      	ldr	r2, [pc, #124]	; (8000cc4 <__aeabi_dadd+0x368>)
 8000c46:	4591      	cmp	r9, r2
 8000c48:	d100      	bne.n	8000c4c <__aeabi_dadd+0x2f0>
 8000c4a:	e10f      	b.n	8000e6c <__aeabi_dadd+0x510>
 8000c4c:	2280      	movs	r2, #128	; 0x80
 8000c4e:	0412      	lsls	r2, r2, #16
 8000c50:	4310      	orrs	r0, r2
 8000c52:	4662      	mov	r2, ip
 8000c54:	2a38      	cmp	r2, #56	; 0x38
 8000c56:	dd00      	ble.n	8000c5a <__aeabi_dadd+0x2fe>
 8000c58:	e10f      	b.n	8000e7a <__aeabi_dadd+0x51e>
 8000c5a:	2a1f      	cmp	r2, #31
 8000c5c:	dd00      	ble.n	8000c60 <__aeabi_dadd+0x304>
 8000c5e:	e180      	b.n	8000f62 <__aeabi_dadd+0x606>
 8000c60:	4664      	mov	r4, ip
 8000c62:	2220      	movs	r2, #32
 8000c64:	001e      	movs	r6, r3
 8000c66:	1b12      	subs	r2, r2, r4
 8000c68:	4667      	mov	r7, ip
 8000c6a:	0004      	movs	r4, r0
 8000c6c:	4093      	lsls	r3, r2
 8000c6e:	4094      	lsls	r4, r2
 8000c70:	40fe      	lsrs	r6, r7
 8000c72:	1e5a      	subs	r2, r3, #1
 8000c74:	4193      	sbcs	r3, r2
 8000c76:	40f8      	lsrs	r0, r7
 8000c78:	4334      	orrs	r4, r6
 8000c7a:	431c      	orrs	r4, r3
 8000c7c:	4480      	add	r8, r0
 8000c7e:	1864      	adds	r4, r4, r1
 8000c80:	428c      	cmp	r4, r1
 8000c82:	41bf      	sbcs	r7, r7
 8000c84:	427f      	negs	r7, r7
 8000c86:	464e      	mov	r6, r9
 8000c88:	4447      	add	r7, r8
 8000c8a:	e7a6      	b.n	8000bda <__aeabi_dadd+0x27e>
 8000c8c:	4642      	mov	r2, r8
 8000c8e:	430a      	orrs	r2, r1
 8000c90:	0011      	movs	r1, r2
 8000c92:	1e4a      	subs	r2, r1, #1
 8000c94:	4191      	sbcs	r1, r2
 8000c96:	e6ad      	b.n	80009f4 <__aeabi_dadd+0x98>
 8000c98:	4c0c      	ldr	r4, [pc, #48]	; (8000ccc <__aeabi_dadd+0x370>)
 8000c9a:	1c72      	adds	r2, r6, #1
 8000c9c:	4222      	tst	r2, r4
 8000c9e:	d000      	beq.n	8000ca2 <__aeabi_dadd+0x346>
 8000ca0:	e0a1      	b.n	8000de6 <__aeabi_dadd+0x48a>
 8000ca2:	0002      	movs	r2, r0
 8000ca4:	431a      	orrs	r2, r3
 8000ca6:	2e00      	cmp	r6, #0
 8000ca8:	d000      	beq.n	8000cac <__aeabi_dadd+0x350>
 8000caa:	e0fa      	b.n	8000ea2 <__aeabi_dadd+0x546>
 8000cac:	2a00      	cmp	r2, #0
 8000cae:	d100      	bne.n	8000cb2 <__aeabi_dadd+0x356>
 8000cb0:	e145      	b.n	8000f3e <__aeabi_dadd+0x5e2>
 8000cb2:	003a      	movs	r2, r7
 8000cb4:	430a      	orrs	r2, r1
 8000cb6:	d000      	beq.n	8000cba <__aeabi_dadd+0x35e>
 8000cb8:	e146      	b.n	8000f48 <__aeabi_dadd+0x5ec>
 8000cba:	0742      	lsls	r2, r0, #29
 8000cbc:	08db      	lsrs	r3, r3, #3
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	08c0      	lsrs	r0, r0, #3
 8000cc2:	e77b      	b.n	8000bbc <__aeabi_dadd+0x260>
 8000cc4:	000007ff 	.word	0x000007ff
 8000cc8:	ff7fffff 	.word	0xff7fffff
 8000ccc:	000007fe 	.word	0x000007fe
 8000cd0:	4647      	mov	r7, r8
 8000cd2:	1a5c      	subs	r4, r3, r1
 8000cd4:	1bc2      	subs	r2, r0, r7
 8000cd6:	42a3      	cmp	r3, r4
 8000cd8:	41bf      	sbcs	r7, r7
 8000cda:	427f      	negs	r7, r7
 8000cdc:	46b9      	mov	r9, r7
 8000cde:	0017      	movs	r7, r2
 8000ce0:	464a      	mov	r2, r9
 8000ce2:	1abf      	subs	r7, r7, r2
 8000ce4:	023a      	lsls	r2, r7, #8
 8000ce6:	d500      	bpl.n	8000cea <__aeabi_dadd+0x38e>
 8000ce8:	e08d      	b.n	8000e06 <__aeabi_dadd+0x4aa>
 8000cea:	0023      	movs	r3, r4
 8000cec:	433b      	orrs	r3, r7
 8000cee:	d000      	beq.n	8000cf2 <__aeabi_dadd+0x396>
 8000cf0:	e68a      	b.n	8000a08 <__aeabi_dadd+0xac>
 8000cf2:	2000      	movs	r0, #0
 8000cf4:	2500      	movs	r5, #0
 8000cf6:	e761      	b.n	8000bbc <__aeabi_dadd+0x260>
 8000cf8:	4cb4      	ldr	r4, [pc, #720]	; (8000fcc <__aeabi_dadd+0x670>)
 8000cfa:	45a1      	cmp	r9, r4
 8000cfc:	d100      	bne.n	8000d00 <__aeabi_dadd+0x3a4>
 8000cfe:	e0ad      	b.n	8000e5c <__aeabi_dadd+0x500>
 8000d00:	2480      	movs	r4, #128	; 0x80
 8000d02:	0424      	lsls	r4, r4, #16
 8000d04:	4320      	orrs	r0, r4
 8000d06:	4664      	mov	r4, ip
 8000d08:	2c38      	cmp	r4, #56	; 0x38
 8000d0a:	dc3d      	bgt.n	8000d88 <__aeabi_dadd+0x42c>
 8000d0c:	4662      	mov	r2, ip
 8000d0e:	2c1f      	cmp	r4, #31
 8000d10:	dd00      	ble.n	8000d14 <__aeabi_dadd+0x3b8>
 8000d12:	e0b7      	b.n	8000e84 <__aeabi_dadd+0x528>
 8000d14:	2520      	movs	r5, #32
 8000d16:	001e      	movs	r6, r3
 8000d18:	1b2d      	subs	r5, r5, r4
 8000d1a:	0004      	movs	r4, r0
 8000d1c:	40ab      	lsls	r3, r5
 8000d1e:	40ac      	lsls	r4, r5
 8000d20:	40d6      	lsrs	r6, r2
 8000d22:	40d0      	lsrs	r0, r2
 8000d24:	4642      	mov	r2, r8
 8000d26:	1e5d      	subs	r5, r3, #1
 8000d28:	41ab      	sbcs	r3, r5
 8000d2a:	4334      	orrs	r4, r6
 8000d2c:	1a12      	subs	r2, r2, r0
 8000d2e:	4690      	mov	r8, r2
 8000d30:	4323      	orrs	r3, r4
 8000d32:	e02c      	b.n	8000d8e <__aeabi_dadd+0x432>
 8000d34:	0742      	lsls	r2, r0, #29
 8000d36:	08db      	lsrs	r3, r3, #3
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	08c0      	lsrs	r0, r0, #3
 8000d3c:	e73b      	b.n	8000bb6 <__aeabi_dadd+0x25a>
 8000d3e:	185c      	adds	r4, r3, r1
 8000d40:	429c      	cmp	r4, r3
 8000d42:	419b      	sbcs	r3, r3
 8000d44:	4440      	add	r0, r8
 8000d46:	425b      	negs	r3, r3
 8000d48:	18c7      	adds	r7, r0, r3
 8000d4a:	2601      	movs	r6, #1
 8000d4c:	023b      	lsls	r3, r7, #8
 8000d4e:	d400      	bmi.n	8000d52 <__aeabi_dadd+0x3f6>
 8000d50:	e729      	b.n	8000ba6 <__aeabi_dadd+0x24a>
 8000d52:	2602      	movs	r6, #2
 8000d54:	4a9e      	ldr	r2, [pc, #632]	; (8000fd0 <__aeabi_dadd+0x674>)
 8000d56:	0863      	lsrs	r3, r4, #1
 8000d58:	4017      	ands	r7, r2
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	4014      	ands	r4, r2
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	07fb      	lsls	r3, r7, #31
 8000d62:	431c      	orrs	r4, r3
 8000d64:	087f      	lsrs	r7, r7, #1
 8000d66:	e673      	b.n	8000a50 <__aeabi_dadd+0xf4>
 8000d68:	4644      	mov	r4, r8
 8000d6a:	3a20      	subs	r2, #32
 8000d6c:	40d4      	lsrs	r4, r2
 8000d6e:	4662      	mov	r2, ip
 8000d70:	2a20      	cmp	r2, #32
 8000d72:	d005      	beq.n	8000d80 <__aeabi_dadd+0x424>
 8000d74:	4667      	mov	r7, ip
 8000d76:	2240      	movs	r2, #64	; 0x40
 8000d78:	1bd2      	subs	r2, r2, r7
 8000d7a:	4647      	mov	r7, r8
 8000d7c:	4097      	lsls	r7, r2
 8000d7e:	4339      	orrs	r1, r7
 8000d80:	1e4a      	subs	r2, r1, #1
 8000d82:	4191      	sbcs	r1, r2
 8000d84:	4321      	orrs	r1, r4
 8000d86:	e635      	b.n	80009f4 <__aeabi_dadd+0x98>
 8000d88:	4303      	orrs	r3, r0
 8000d8a:	1e58      	subs	r0, r3, #1
 8000d8c:	4183      	sbcs	r3, r0
 8000d8e:	1acc      	subs	r4, r1, r3
 8000d90:	42a1      	cmp	r1, r4
 8000d92:	41bf      	sbcs	r7, r7
 8000d94:	4643      	mov	r3, r8
 8000d96:	427f      	negs	r7, r7
 8000d98:	4655      	mov	r5, sl
 8000d9a:	464e      	mov	r6, r9
 8000d9c:	1bdf      	subs	r7, r3, r7
 8000d9e:	e62e      	b.n	80009fe <__aeabi_dadd+0xa2>
 8000da0:	0002      	movs	r2, r0
 8000da2:	431a      	orrs	r2, r3
 8000da4:	d100      	bne.n	8000da8 <__aeabi_dadd+0x44c>
 8000da6:	e0bd      	b.n	8000f24 <__aeabi_dadd+0x5c8>
 8000da8:	4662      	mov	r2, ip
 8000daa:	4664      	mov	r4, ip
 8000dac:	3a01      	subs	r2, #1
 8000dae:	2c01      	cmp	r4, #1
 8000db0:	d100      	bne.n	8000db4 <__aeabi_dadd+0x458>
 8000db2:	e0e5      	b.n	8000f80 <__aeabi_dadd+0x624>
 8000db4:	4c85      	ldr	r4, [pc, #532]	; (8000fcc <__aeabi_dadd+0x670>)
 8000db6:	45a4      	cmp	ip, r4
 8000db8:	d058      	beq.n	8000e6c <__aeabi_dadd+0x510>
 8000dba:	4694      	mov	ip, r2
 8000dbc:	e749      	b.n	8000c52 <__aeabi_dadd+0x2f6>
 8000dbe:	4664      	mov	r4, ip
 8000dc0:	2220      	movs	r2, #32
 8000dc2:	1b12      	subs	r2, r2, r4
 8000dc4:	4644      	mov	r4, r8
 8000dc6:	4094      	lsls	r4, r2
 8000dc8:	000f      	movs	r7, r1
 8000dca:	46a1      	mov	r9, r4
 8000dcc:	4664      	mov	r4, ip
 8000dce:	4091      	lsls	r1, r2
 8000dd0:	40e7      	lsrs	r7, r4
 8000dd2:	464c      	mov	r4, r9
 8000dd4:	1e4a      	subs	r2, r1, #1
 8000dd6:	4191      	sbcs	r1, r2
 8000dd8:	433c      	orrs	r4, r7
 8000dda:	4642      	mov	r2, r8
 8000ddc:	430c      	orrs	r4, r1
 8000dde:	4661      	mov	r1, ip
 8000de0:	40ca      	lsrs	r2, r1
 8000de2:	1880      	adds	r0, r0, r2
 8000de4:	e6f4      	b.n	8000bd0 <__aeabi_dadd+0x274>
 8000de6:	4c79      	ldr	r4, [pc, #484]	; (8000fcc <__aeabi_dadd+0x670>)
 8000de8:	42a2      	cmp	r2, r4
 8000dea:	d100      	bne.n	8000dee <__aeabi_dadd+0x492>
 8000dec:	e6fd      	b.n	8000bea <__aeabi_dadd+0x28e>
 8000dee:	1859      	adds	r1, r3, r1
 8000df0:	4299      	cmp	r1, r3
 8000df2:	419b      	sbcs	r3, r3
 8000df4:	4440      	add	r0, r8
 8000df6:	425f      	negs	r7, r3
 8000df8:	19c7      	adds	r7, r0, r7
 8000dfa:	07fc      	lsls	r4, r7, #31
 8000dfc:	0849      	lsrs	r1, r1, #1
 8000dfe:	0016      	movs	r6, r2
 8000e00:	430c      	orrs	r4, r1
 8000e02:	087f      	lsrs	r7, r7, #1
 8000e04:	e6cf      	b.n	8000ba6 <__aeabi_dadd+0x24a>
 8000e06:	1acc      	subs	r4, r1, r3
 8000e08:	42a1      	cmp	r1, r4
 8000e0a:	41bf      	sbcs	r7, r7
 8000e0c:	4643      	mov	r3, r8
 8000e0e:	427f      	negs	r7, r7
 8000e10:	1a18      	subs	r0, r3, r0
 8000e12:	4655      	mov	r5, sl
 8000e14:	1bc7      	subs	r7, r0, r7
 8000e16:	e5f7      	b.n	8000a08 <__aeabi_dadd+0xac>
 8000e18:	08c9      	lsrs	r1, r1, #3
 8000e1a:	077b      	lsls	r3, r7, #29
 8000e1c:	4655      	mov	r5, sl
 8000e1e:	430b      	orrs	r3, r1
 8000e20:	08f8      	lsrs	r0, r7, #3
 8000e22:	e6c8      	b.n	8000bb6 <__aeabi_dadd+0x25a>
 8000e24:	2c00      	cmp	r4, #0
 8000e26:	d000      	beq.n	8000e2a <__aeabi_dadd+0x4ce>
 8000e28:	e081      	b.n	8000f2e <__aeabi_dadd+0x5d2>
 8000e2a:	4643      	mov	r3, r8
 8000e2c:	430b      	orrs	r3, r1
 8000e2e:	d115      	bne.n	8000e5c <__aeabi_dadd+0x500>
 8000e30:	2080      	movs	r0, #128	; 0x80
 8000e32:	2500      	movs	r5, #0
 8000e34:	0300      	lsls	r0, r0, #12
 8000e36:	e6e3      	b.n	8000c00 <__aeabi_dadd+0x2a4>
 8000e38:	1a5c      	subs	r4, r3, r1
 8000e3a:	42a3      	cmp	r3, r4
 8000e3c:	419b      	sbcs	r3, r3
 8000e3e:	1bc7      	subs	r7, r0, r7
 8000e40:	425b      	negs	r3, r3
 8000e42:	2601      	movs	r6, #1
 8000e44:	1aff      	subs	r7, r7, r3
 8000e46:	e5da      	b.n	80009fe <__aeabi_dadd+0xa2>
 8000e48:	0742      	lsls	r2, r0, #29
 8000e4a:	08db      	lsrs	r3, r3, #3
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	08c0      	lsrs	r0, r0, #3
 8000e50:	e6d2      	b.n	8000bf8 <__aeabi_dadd+0x29c>
 8000e52:	0742      	lsls	r2, r0, #29
 8000e54:	08db      	lsrs	r3, r3, #3
 8000e56:	4313      	orrs	r3, r2
 8000e58:	08c0      	lsrs	r0, r0, #3
 8000e5a:	e6ac      	b.n	8000bb6 <__aeabi_dadd+0x25a>
 8000e5c:	4643      	mov	r3, r8
 8000e5e:	4642      	mov	r2, r8
 8000e60:	08c9      	lsrs	r1, r1, #3
 8000e62:	075b      	lsls	r3, r3, #29
 8000e64:	4655      	mov	r5, sl
 8000e66:	430b      	orrs	r3, r1
 8000e68:	08d0      	lsrs	r0, r2, #3
 8000e6a:	e6c5      	b.n	8000bf8 <__aeabi_dadd+0x29c>
 8000e6c:	4643      	mov	r3, r8
 8000e6e:	4642      	mov	r2, r8
 8000e70:	075b      	lsls	r3, r3, #29
 8000e72:	08c9      	lsrs	r1, r1, #3
 8000e74:	430b      	orrs	r3, r1
 8000e76:	08d0      	lsrs	r0, r2, #3
 8000e78:	e6be      	b.n	8000bf8 <__aeabi_dadd+0x29c>
 8000e7a:	4303      	orrs	r3, r0
 8000e7c:	001c      	movs	r4, r3
 8000e7e:	1e63      	subs	r3, r4, #1
 8000e80:	419c      	sbcs	r4, r3
 8000e82:	e6fc      	b.n	8000c7e <__aeabi_dadd+0x322>
 8000e84:	0002      	movs	r2, r0
 8000e86:	3c20      	subs	r4, #32
 8000e88:	40e2      	lsrs	r2, r4
 8000e8a:	0014      	movs	r4, r2
 8000e8c:	4662      	mov	r2, ip
 8000e8e:	2a20      	cmp	r2, #32
 8000e90:	d003      	beq.n	8000e9a <__aeabi_dadd+0x53e>
 8000e92:	2540      	movs	r5, #64	; 0x40
 8000e94:	1aad      	subs	r5, r5, r2
 8000e96:	40a8      	lsls	r0, r5
 8000e98:	4303      	orrs	r3, r0
 8000e9a:	1e58      	subs	r0, r3, #1
 8000e9c:	4183      	sbcs	r3, r0
 8000e9e:	4323      	orrs	r3, r4
 8000ea0:	e775      	b.n	8000d8e <__aeabi_dadd+0x432>
 8000ea2:	2a00      	cmp	r2, #0
 8000ea4:	d0e2      	beq.n	8000e6c <__aeabi_dadd+0x510>
 8000ea6:	003a      	movs	r2, r7
 8000ea8:	430a      	orrs	r2, r1
 8000eaa:	d0cd      	beq.n	8000e48 <__aeabi_dadd+0x4ec>
 8000eac:	0742      	lsls	r2, r0, #29
 8000eae:	08db      	lsrs	r3, r3, #3
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	2280      	movs	r2, #128	; 0x80
 8000eb4:	08c0      	lsrs	r0, r0, #3
 8000eb6:	0312      	lsls	r2, r2, #12
 8000eb8:	4210      	tst	r0, r2
 8000eba:	d006      	beq.n	8000eca <__aeabi_dadd+0x56e>
 8000ebc:	08fc      	lsrs	r4, r7, #3
 8000ebe:	4214      	tst	r4, r2
 8000ec0:	d103      	bne.n	8000eca <__aeabi_dadd+0x56e>
 8000ec2:	0020      	movs	r0, r4
 8000ec4:	08cb      	lsrs	r3, r1, #3
 8000ec6:	077a      	lsls	r2, r7, #29
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	0f5a      	lsrs	r2, r3, #29
 8000ecc:	00db      	lsls	r3, r3, #3
 8000ece:	0752      	lsls	r2, r2, #29
 8000ed0:	08db      	lsrs	r3, r3, #3
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	e690      	b.n	8000bf8 <__aeabi_dadd+0x29c>
 8000ed6:	4643      	mov	r3, r8
 8000ed8:	430b      	orrs	r3, r1
 8000eda:	d100      	bne.n	8000ede <__aeabi_dadd+0x582>
 8000edc:	e709      	b.n	8000cf2 <__aeabi_dadd+0x396>
 8000ede:	4643      	mov	r3, r8
 8000ee0:	4642      	mov	r2, r8
 8000ee2:	08c9      	lsrs	r1, r1, #3
 8000ee4:	075b      	lsls	r3, r3, #29
 8000ee6:	4655      	mov	r5, sl
 8000ee8:	430b      	orrs	r3, r1
 8000eea:	08d0      	lsrs	r0, r2, #3
 8000eec:	e666      	b.n	8000bbc <__aeabi_dadd+0x260>
 8000eee:	1acc      	subs	r4, r1, r3
 8000ef0:	42a1      	cmp	r1, r4
 8000ef2:	4189      	sbcs	r1, r1
 8000ef4:	1a3f      	subs	r7, r7, r0
 8000ef6:	4249      	negs	r1, r1
 8000ef8:	4655      	mov	r5, sl
 8000efa:	2601      	movs	r6, #1
 8000efc:	1a7f      	subs	r7, r7, r1
 8000efe:	e57e      	b.n	80009fe <__aeabi_dadd+0xa2>
 8000f00:	4642      	mov	r2, r8
 8000f02:	1a5c      	subs	r4, r3, r1
 8000f04:	1a87      	subs	r7, r0, r2
 8000f06:	42a3      	cmp	r3, r4
 8000f08:	4192      	sbcs	r2, r2
 8000f0a:	4252      	negs	r2, r2
 8000f0c:	1abf      	subs	r7, r7, r2
 8000f0e:	023a      	lsls	r2, r7, #8
 8000f10:	d53d      	bpl.n	8000f8e <__aeabi_dadd+0x632>
 8000f12:	1acc      	subs	r4, r1, r3
 8000f14:	42a1      	cmp	r1, r4
 8000f16:	4189      	sbcs	r1, r1
 8000f18:	4643      	mov	r3, r8
 8000f1a:	4249      	negs	r1, r1
 8000f1c:	1a1f      	subs	r7, r3, r0
 8000f1e:	4655      	mov	r5, sl
 8000f20:	1a7f      	subs	r7, r7, r1
 8000f22:	e595      	b.n	8000a50 <__aeabi_dadd+0xf4>
 8000f24:	077b      	lsls	r3, r7, #29
 8000f26:	08c9      	lsrs	r1, r1, #3
 8000f28:	430b      	orrs	r3, r1
 8000f2a:	08f8      	lsrs	r0, r7, #3
 8000f2c:	e643      	b.n	8000bb6 <__aeabi_dadd+0x25a>
 8000f2e:	4644      	mov	r4, r8
 8000f30:	08db      	lsrs	r3, r3, #3
 8000f32:	430c      	orrs	r4, r1
 8000f34:	d130      	bne.n	8000f98 <__aeabi_dadd+0x63c>
 8000f36:	0742      	lsls	r2, r0, #29
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	08c0      	lsrs	r0, r0, #3
 8000f3c:	e65c      	b.n	8000bf8 <__aeabi_dadd+0x29c>
 8000f3e:	077b      	lsls	r3, r7, #29
 8000f40:	08c9      	lsrs	r1, r1, #3
 8000f42:	430b      	orrs	r3, r1
 8000f44:	08f8      	lsrs	r0, r7, #3
 8000f46:	e639      	b.n	8000bbc <__aeabi_dadd+0x260>
 8000f48:	185c      	adds	r4, r3, r1
 8000f4a:	429c      	cmp	r4, r3
 8000f4c:	419b      	sbcs	r3, r3
 8000f4e:	4440      	add	r0, r8
 8000f50:	425b      	negs	r3, r3
 8000f52:	18c7      	adds	r7, r0, r3
 8000f54:	023b      	lsls	r3, r7, #8
 8000f56:	d400      	bmi.n	8000f5a <__aeabi_dadd+0x5fe>
 8000f58:	e625      	b.n	8000ba6 <__aeabi_dadd+0x24a>
 8000f5a:	4b1d      	ldr	r3, [pc, #116]	; (8000fd0 <__aeabi_dadd+0x674>)
 8000f5c:	2601      	movs	r6, #1
 8000f5e:	401f      	ands	r7, r3
 8000f60:	e621      	b.n	8000ba6 <__aeabi_dadd+0x24a>
 8000f62:	0004      	movs	r4, r0
 8000f64:	3a20      	subs	r2, #32
 8000f66:	40d4      	lsrs	r4, r2
 8000f68:	4662      	mov	r2, ip
 8000f6a:	2a20      	cmp	r2, #32
 8000f6c:	d004      	beq.n	8000f78 <__aeabi_dadd+0x61c>
 8000f6e:	2240      	movs	r2, #64	; 0x40
 8000f70:	4666      	mov	r6, ip
 8000f72:	1b92      	subs	r2, r2, r6
 8000f74:	4090      	lsls	r0, r2
 8000f76:	4303      	orrs	r3, r0
 8000f78:	1e5a      	subs	r2, r3, #1
 8000f7a:	4193      	sbcs	r3, r2
 8000f7c:	431c      	orrs	r4, r3
 8000f7e:	e67e      	b.n	8000c7e <__aeabi_dadd+0x322>
 8000f80:	185c      	adds	r4, r3, r1
 8000f82:	428c      	cmp	r4, r1
 8000f84:	4189      	sbcs	r1, r1
 8000f86:	4440      	add	r0, r8
 8000f88:	4249      	negs	r1, r1
 8000f8a:	1847      	adds	r7, r0, r1
 8000f8c:	e6dd      	b.n	8000d4a <__aeabi_dadd+0x3ee>
 8000f8e:	0023      	movs	r3, r4
 8000f90:	433b      	orrs	r3, r7
 8000f92:	d100      	bne.n	8000f96 <__aeabi_dadd+0x63a>
 8000f94:	e6ad      	b.n	8000cf2 <__aeabi_dadd+0x396>
 8000f96:	e606      	b.n	8000ba6 <__aeabi_dadd+0x24a>
 8000f98:	0744      	lsls	r4, r0, #29
 8000f9a:	4323      	orrs	r3, r4
 8000f9c:	2480      	movs	r4, #128	; 0x80
 8000f9e:	08c0      	lsrs	r0, r0, #3
 8000fa0:	0324      	lsls	r4, r4, #12
 8000fa2:	4220      	tst	r0, r4
 8000fa4:	d008      	beq.n	8000fb8 <__aeabi_dadd+0x65c>
 8000fa6:	4642      	mov	r2, r8
 8000fa8:	08d6      	lsrs	r6, r2, #3
 8000faa:	4226      	tst	r6, r4
 8000fac:	d104      	bne.n	8000fb8 <__aeabi_dadd+0x65c>
 8000fae:	4655      	mov	r5, sl
 8000fb0:	0030      	movs	r0, r6
 8000fb2:	08cb      	lsrs	r3, r1, #3
 8000fb4:	0751      	lsls	r1, r2, #29
 8000fb6:	430b      	orrs	r3, r1
 8000fb8:	0f5a      	lsrs	r2, r3, #29
 8000fba:	00db      	lsls	r3, r3, #3
 8000fbc:	08db      	lsrs	r3, r3, #3
 8000fbe:	0752      	lsls	r2, r2, #29
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	e619      	b.n	8000bf8 <__aeabi_dadd+0x29c>
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	4a01      	ldr	r2, [pc, #4]	; (8000fcc <__aeabi_dadd+0x670>)
 8000fc8:	001f      	movs	r7, r3
 8000fca:	e55e      	b.n	8000a8a <__aeabi_dadd+0x12e>
 8000fcc:	000007ff 	.word	0x000007ff
 8000fd0:	ff7fffff 	.word	0xff7fffff

08000fd4 <__aeabi_ddiv>:
 8000fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fd6:	4657      	mov	r7, sl
 8000fd8:	464e      	mov	r6, r9
 8000fda:	4645      	mov	r5, r8
 8000fdc:	46de      	mov	lr, fp
 8000fde:	b5e0      	push	{r5, r6, r7, lr}
 8000fe0:	4681      	mov	r9, r0
 8000fe2:	0005      	movs	r5, r0
 8000fe4:	030c      	lsls	r4, r1, #12
 8000fe6:	0048      	lsls	r0, r1, #1
 8000fe8:	4692      	mov	sl, r2
 8000fea:	001f      	movs	r7, r3
 8000fec:	b085      	sub	sp, #20
 8000fee:	0b24      	lsrs	r4, r4, #12
 8000ff0:	0d40      	lsrs	r0, r0, #21
 8000ff2:	0fce      	lsrs	r6, r1, #31
 8000ff4:	2800      	cmp	r0, #0
 8000ff6:	d100      	bne.n	8000ffa <__aeabi_ddiv+0x26>
 8000ff8:	e156      	b.n	80012a8 <__aeabi_ddiv+0x2d4>
 8000ffa:	4bd4      	ldr	r3, [pc, #848]	; (800134c <__aeabi_ddiv+0x378>)
 8000ffc:	4298      	cmp	r0, r3
 8000ffe:	d100      	bne.n	8001002 <__aeabi_ddiv+0x2e>
 8001000:	e172      	b.n	80012e8 <__aeabi_ddiv+0x314>
 8001002:	0f6b      	lsrs	r3, r5, #29
 8001004:	00e4      	lsls	r4, r4, #3
 8001006:	431c      	orrs	r4, r3
 8001008:	2380      	movs	r3, #128	; 0x80
 800100a:	041b      	lsls	r3, r3, #16
 800100c:	4323      	orrs	r3, r4
 800100e:	4698      	mov	r8, r3
 8001010:	4bcf      	ldr	r3, [pc, #828]	; (8001350 <__aeabi_ddiv+0x37c>)
 8001012:	00ed      	lsls	r5, r5, #3
 8001014:	469b      	mov	fp, r3
 8001016:	2300      	movs	r3, #0
 8001018:	4699      	mov	r9, r3
 800101a:	4483      	add	fp, r0
 800101c:	9300      	str	r3, [sp, #0]
 800101e:	033c      	lsls	r4, r7, #12
 8001020:	007b      	lsls	r3, r7, #1
 8001022:	4650      	mov	r0, sl
 8001024:	0b24      	lsrs	r4, r4, #12
 8001026:	0d5b      	lsrs	r3, r3, #21
 8001028:	0fff      	lsrs	r7, r7, #31
 800102a:	2b00      	cmp	r3, #0
 800102c:	d100      	bne.n	8001030 <__aeabi_ddiv+0x5c>
 800102e:	e11f      	b.n	8001270 <__aeabi_ddiv+0x29c>
 8001030:	4ac6      	ldr	r2, [pc, #792]	; (800134c <__aeabi_ddiv+0x378>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d100      	bne.n	8001038 <__aeabi_ddiv+0x64>
 8001036:	e162      	b.n	80012fe <__aeabi_ddiv+0x32a>
 8001038:	49c5      	ldr	r1, [pc, #788]	; (8001350 <__aeabi_ddiv+0x37c>)
 800103a:	0f42      	lsrs	r2, r0, #29
 800103c:	468c      	mov	ip, r1
 800103e:	00e4      	lsls	r4, r4, #3
 8001040:	4659      	mov	r1, fp
 8001042:	4314      	orrs	r4, r2
 8001044:	2280      	movs	r2, #128	; 0x80
 8001046:	4463      	add	r3, ip
 8001048:	0412      	lsls	r2, r2, #16
 800104a:	1acb      	subs	r3, r1, r3
 800104c:	4314      	orrs	r4, r2
 800104e:	469b      	mov	fp, r3
 8001050:	00c2      	lsls	r2, r0, #3
 8001052:	2000      	movs	r0, #0
 8001054:	0033      	movs	r3, r6
 8001056:	407b      	eors	r3, r7
 8001058:	469a      	mov	sl, r3
 800105a:	464b      	mov	r3, r9
 800105c:	2b0f      	cmp	r3, #15
 800105e:	d827      	bhi.n	80010b0 <__aeabi_ddiv+0xdc>
 8001060:	49bc      	ldr	r1, [pc, #752]	; (8001354 <__aeabi_ddiv+0x380>)
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	58cb      	ldr	r3, [r1, r3]
 8001066:	469f      	mov	pc, r3
 8001068:	46b2      	mov	sl, r6
 800106a:	9b00      	ldr	r3, [sp, #0]
 800106c:	2b02      	cmp	r3, #2
 800106e:	d016      	beq.n	800109e <__aeabi_ddiv+0xca>
 8001070:	2b03      	cmp	r3, #3
 8001072:	d100      	bne.n	8001076 <__aeabi_ddiv+0xa2>
 8001074:	e28e      	b.n	8001594 <__aeabi_ddiv+0x5c0>
 8001076:	2b01      	cmp	r3, #1
 8001078:	d000      	beq.n	800107c <__aeabi_ddiv+0xa8>
 800107a:	e0d9      	b.n	8001230 <__aeabi_ddiv+0x25c>
 800107c:	2300      	movs	r3, #0
 800107e:	2400      	movs	r4, #0
 8001080:	2500      	movs	r5, #0
 8001082:	4652      	mov	r2, sl
 8001084:	051b      	lsls	r3, r3, #20
 8001086:	4323      	orrs	r3, r4
 8001088:	07d2      	lsls	r2, r2, #31
 800108a:	4313      	orrs	r3, r2
 800108c:	0028      	movs	r0, r5
 800108e:	0019      	movs	r1, r3
 8001090:	b005      	add	sp, #20
 8001092:	bcf0      	pop	{r4, r5, r6, r7}
 8001094:	46bb      	mov	fp, r7
 8001096:	46b2      	mov	sl, r6
 8001098:	46a9      	mov	r9, r5
 800109a:	46a0      	mov	r8, r4
 800109c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800109e:	2400      	movs	r4, #0
 80010a0:	2500      	movs	r5, #0
 80010a2:	4baa      	ldr	r3, [pc, #680]	; (800134c <__aeabi_ddiv+0x378>)
 80010a4:	e7ed      	b.n	8001082 <__aeabi_ddiv+0xae>
 80010a6:	46ba      	mov	sl, r7
 80010a8:	46a0      	mov	r8, r4
 80010aa:	0015      	movs	r5, r2
 80010ac:	9000      	str	r0, [sp, #0]
 80010ae:	e7dc      	b.n	800106a <__aeabi_ddiv+0x96>
 80010b0:	4544      	cmp	r4, r8
 80010b2:	d200      	bcs.n	80010b6 <__aeabi_ddiv+0xe2>
 80010b4:	e1c7      	b.n	8001446 <__aeabi_ddiv+0x472>
 80010b6:	d100      	bne.n	80010ba <__aeabi_ddiv+0xe6>
 80010b8:	e1c2      	b.n	8001440 <__aeabi_ddiv+0x46c>
 80010ba:	2301      	movs	r3, #1
 80010bc:	425b      	negs	r3, r3
 80010be:	469c      	mov	ip, r3
 80010c0:	002e      	movs	r6, r5
 80010c2:	4640      	mov	r0, r8
 80010c4:	2500      	movs	r5, #0
 80010c6:	44e3      	add	fp, ip
 80010c8:	0223      	lsls	r3, r4, #8
 80010ca:	0e14      	lsrs	r4, r2, #24
 80010cc:	431c      	orrs	r4, r3
 80010ce:	0c1b      	lsrs	r3, r3, #16
 80010d0:	4699      	mov	r9, r3
 80010d2:	0423      	lsls	r3, r4, #16
 80010d4:	0c1f      	lsrs	r7, r3, #16
 80010d6:	0212      	lsls	r2, r2, #8
 80010d8:	4649      	mov	r1, r9
 80010da:	9200      	str	r2, [sp, #0]
 80010dc:	9701      	str	r7, [sp, #4]
 80010de:	f7ff f8b3 	bl	8000248 <__aeabi_uidivmod>
 80010e2:	0002      	movs	r2, r0
 80010e4:	437a      	muls	r2, r7
 80010e6:	040b      	lsls	r3, r1, #16
 80010e8:	0c31      	lsrs	r1, r6, #16
 80010ea:	4680      	mov	r8, r0
 80010ec:	4319      	orrs	r1, r3
 80010ee:	428a      	cmp	r2, r1
 80010f0:	d907      	bls.n	8001102 <__aeabi_ddiv+0x12e>
 80010f2:	2301      	movs	r3, #1
 80010f4:	425b      	negs	r3, r3
 80010f6:	469c      	mov	ip, r3
 80010f8:	1909      	adds	r1, r1, r4
 80010fa:	44e0      	add	r8, ip
 80010fc:	428c      	cmp	r4, r1
 80010fe:	d800      	bhi.n	8001102 <__aeabi_ddiv+0x12e>
 8001100:	e207      	b.n	8001512 <__aeabi_ddiv+0x53e>
 8001102:	1a88      	subs	r0, r1, r2
 8001104:	4649      	mov	r1, r9
 8001106:	f7ff f89f 	bl	8000248 <__aeabi_uidivmod>
 800110a:	0409      	lsls	r1, r1, #16
 800110c:	468c      	mov	ip, r1
 800110e:	0431      	lsls	r1, r6, #16
 8001110:	4666      	mov	r6, ip
 8001112:	9a01      	ldr	r2, [sp, #4]
 8001114:	0c09      	lsrs	r1, r1, #16
 8001116:	4342      	muls	r2, r0
 8001118:	0003      	movs	r3, r0
 800111a:	4331      	orrs	r1, r6
 800111c:	428a      	cmp	r2, r1
 800111e:	d904      	bls.n	800112a <__aeabi_ddiv+0x156>
 8001120:	1909      	adds	r1, r1, r4
 8001122:	3b01      	subs	r3, #1
 8001124:	428c      	cmp	r4, r1
 8001126:	d800      	bhi.n	800112a <__aeabi_ddiv+0x156>
 8001128:	e1ed      	b.n	8001506 <__aeabi_ddiv+0x532>
 800112a:	1a88      	subs	r0, r1, r2
 800112c:	4642      	mov	r2, r8
 800112e:	0412      	lsls	r2, r2, #16
 8001130:	431a      	orrs	r2, r3
 8001132:	4690      	mov	r8, r2
 8001134:	4641      	mov	r1, r8
 8001136:	9b00      	ldr	r3, [sp, #0]
 8001138:	040e      	lsls	r6, r1, #16
 800113a:	0c1b      	lsrs	r3, r3, #16
 800113c:	001f      	movs	r7, r3
 800113e:	9302      	str	r3, [sp, #8]
 8001140:	9b00      	ldr	r3, [sp, #0]
 8001142:	0c36      	lsrs	r6, r6, #16
 8001144:	041b      	lsls	r3, r3, #16
 8001146:	0c19      	lsrs	r1, r3, #16
 8001148:	000b      	movs	r3, r1
 800114a:	4373      	muls	r3, r6
 800114c:	0c12      	lsrs	r2, r2, #16
 800114e:	437e      	muls	r6, r7
 8001150:	9103      	str	r1, [sp, #12]
 8001152:	4351      	muls	r1, r2
 8001154:	437a      	muls	r2, r7
 8001156:	0c1f      	lsrs	r7, r3, #16
 8001158:	46bc      	mov	ip, r7
 800115a:	1876      	adds	r6, r6, r1
 800115c:	4466      	add	r6, ip
 800115e:	42b1      	cmp	r1, r6
 8001160:	d903      	bls.n	800116a <__aeabi_ddiv+0x196>
 8001162:	2180      	movs	r1, #128	; 0x80
 8001164:	0249      	lsls	r1, r1, #9
 8001166:	468c      	mov	ip, r1
 8001168:	4462      	add	r2, ip
 800116a:	0c31      	lsrs	r1, r6, #16
 800116c:	188a      	adds	r2, r1, r2
 800116e:	0431      	lsls	r1, r6, #16
 8001170:	041e      	lsls	r6, r3, #16
 8001172:	0c36      	lsrs	r6, r6, #16
 8001174:	198e      	adds	r6, r1, r6
 8001176:	4290      	cmp	r0, r2
 8001178:	d302      	bcc.n	8001180 <__aeabi_ddiv+0x1ac>
 800117a:	d112      	bne.n	80011a2 <__aeabi_ddiv+0x1ce>
 800117c:	42b5      	cmp	r5, r6
 800117e:	d210      	bcs.n	80011a2 <__aeabi_ddiv+0x1ce>
 8001180:	4643      	mov	r3, r8
 8001182:	1e59      	subs	r1, r3, #1
 8001184:	9b00      	ldr	r3, [sp, #0]
 8001186:	469c      	mov	ip, r3
 8001188:	4465      	add	r5, ip
 800118a:	001f      	movs	r7, r3
 800118c:	429d      	cmp	r5, r3
 800118e:	419b      	sbcs	r3, r3
 8001190:	425b      	negs	r3, r3
 8001192:	191b      	adds	r3, r3, r4
 8001194:	18c0      	adds	r0, r0, r3
 8001196:	4284      	cmp	r4, r0
 8001198:	d200      	bcs.n	800119c <__aeabi_ddiv+0x1c8>
 800119a:	e1a0      	b.n	80014de <__aeabi_ddiv+0x50a>
 800119c:	d100      	bne.n	80011a0 <__aeabi_ddiv+0x1cc>
 800119e:	e19b      	b.n	80014d8 <__aeabi_ddiv+0x504>
 80011a0:	4688      	mov	r8, r1
 80011a2:	1bae      	subs	r6, r5, r6
 80011a4:	42b5      	cmp	r5, r6
 80011a6:	41ad      	sbcs	r5, r5
 80011a8:	1a80      	subs	r0, r0, r2
 80011aa:	426d      	negs	r5, r5
 80011ac:	1b40      	subs	r0, r0, r5
 80011ae:	4284      	cmp	r4, r0
 80011b0:	d100      	bne.n	80011b4 <__aeabi_ddiv+0x1e0>
 80011b2:	e1d5      	b.n	8001560 <__aeabi_ddiv+0x58c>
 80011b4:	4649      	mov	r1, r9
 80011b6:	f7ff f847 	bl	8000248 <__aeabi_uidivmod>
 80011ba:	9a01      	ldr	r2, [sp, #4]
 80011bc:	040b      	lsls	r3, r1, #16
 80011be:	4342      	muls	r2, r0
 80011c0:	0c31      	lsrs	r1, r6, #16
 80011c2:	0005      	movs	r5, r0
 80011c4:	4319      	orrs	r1, r3
 80011c6:	428a      	cmp	r2, r1
 80011c8:	d900      	bls.n	80011cc <__aeabi_ddiv+0x1f8>
 80011ca:	e16c      	b.n	80014a6 <__aeabi_ddiv+0x4d2>
 80011cc:	1a88      	subs	r0, r1, r2
 80011ce:	4649      	mov	r1, r9
 80011d0:	f7ff f83a 	bl	8000248 <__aeabi_uidivmod>
 80011d4:	9a01      	ldr	r2, [sp, #4]
 80011d6:	0436      	lsls	r6, r6, #16
 80011d8:	4342      	muls	r2, r0
 80011da:	0409      	lsls	r1, r1, #16
 80011dc:	0c36      	lsrs	r6, r6, #16
 80011de:	0003      	movs	r3, r0
 80011e0:	430e      	orrs	r6, r1
 80011e2:	42b2      	cmp	r2, r6
 80011e4:	d900      	bls.n	80011e8 <__aeabi_ddiv+0x214>
 80011e6:	e153      	b.n	8001490 <__aeabi_ddiv+0x4bc>
 80011e8:	9803      	ldr	r0, [sp, #12]
 80011ea:	1ab6      	subs	r6, r6, r2
 80011ec:	0002      	movs	r2, r0
 80011ee:	042d      	lsls	r5, r5, #16
 80011f0:	431d      	orrs	r5, r3
 80011f2:	9f02      	ldr	r7, [sp, #8]
 80011f4:	042b      	lsls	r3, r5, #16
 80011f6:	0c1b      	lsrs	r3, r3, #16
 80011f8:	435a      	muls	r2, r3
 80011fa:	437b      	muls	r3, r7
 80011fc:	469c      	mov	ip, r3
 80011fe:	0c29      	lsrs	r1, r5, #16
 8001200:	4348      	muls	r0, r1
 8001202:	0c13      	lsrs	r3, r2, #16
 8001204:	4484      	add	ip, r0
 8001206:	4463      	add	r3, ip
 8001208:	4379      	muls	r1, r7
 800120a:	4298      	cmp	r0, r3
 800120c:	d903      	bls.n	8001216 <__aeabi_ddiv+0x242>
 800120e:	2080      	movs	r0, #128	; 0x80
 8001210:	0240      	lsls	r0, r0, #9
 8001212:	4684      	mov	ip, r0
 8001214:	4461      	add	r1, ip
 8001216:	0c18      	lsrs	r0, r3, #16
 8001218:	0412      	lsls	r2, r2, #16
 800121a:	041b      	lsls	r3, r3, #16
 800121c:	0c12      	lsrs	r2, r2, #16
 800121e:	1841      	adds	r1, r0, r1
 8001220:	189b      	adds	r3, r3, r2
 8001222:	428e      	cmp	r6, r1
 8001224:	d200      	bcs.n	8001228 <__aeabi_ddiv+0x254>
 8001226:	e0ff      	b.n	8001428 <__aeabi_ddiv+0x454>
 8001228:	d100      	bne.n	800122c <__aeabi_ddiv+0x258>
 800122a:	e0fa      	b.n	8001422 <__aeabi_ddiv+0x44e>
 800122c:	2301      	movs	r3, #1
 800122e:	431d      	orrs	r5, r3
 8001230:	4a49      	ldr	r2, [pc, #292]	; (8001358 <__aeabi_ddiv+0x384>)
 8001232:	445a      	add	r2, fp
 8001234:	2a00      	cmp	r2, #0
 8001236:	dc00      	bgt.n	800123a <__aeabi_ddiv+0x266>
 8001238:	e0aa      	b.n	8001390 <__aeabi_ddiv+0x3bc>
 800123a:	076b      	lsls	r3, r5, #29
 800123c:	d000      	beq.n	8001240 <__aeabi_ddiv+0x26c>
 800123e:	e13d      	b.n	80014bc <__aeabi_ddiv+0x4e8>
 8001240:	08ed      	lsrs	r5, r5, #3
 8001242:	4643      	mov	r3, r8
 8001244:	01db      	lsls	r3, r3, #7
 8001246:	d506      	bpl.n	8001256 <__aeabi_ddiv+0x282>
 8001248:	4642      	mov	r2, r8
 800124a:	4b44      	ldr	r3, [pc, #272]	; (800135c <__aeabi_ddiv+0x388>)
 800124c:	401a      	ands	r2, r3
 800124e:	4690      	mov	r8, r2
 8001250:	2280      	movs	r2, #128	; 0x80
 8001252:	00d2      	lsls	r2, r2, #3
 8001254:	445a      	add	r2, fp
 8001256:	4b42      	ldr	r3, [pc, #264]	; (8001360 <__aeabi_ddiv+0x38c>)
 8001258:	429a      	cmp	r2, r3
 800125a:	dd00      	ble.n	800125e <__aeabi_ddiv+0x28a>
 800125c:	e71f      	b.n	800109e <__aeabi_ddiv+0xca>
 800125e:	4643      	mov	r3, r8
 8001260:	075b      	lsls	r3, r3, #29
 8001262:	431d      	orrs	r5, r3
 8001264:	4643      	mov	r3, r8
 8001266:	0552      	lsls	r2, r2, #21
 8001268:	025c      	lsls	r4, r3, #9
 800126a:	0b24      	lsrs	r4, r4, #12
 800126c:	0d53      	lsrs	r3, r2, #21
 800126e:	e708      	b.n	8001082 <__aeabi_ddiv+0xae>
 8001270:	4652      	mov	r2, sl
 8001272:	4322      	orrs	r2, r4
 8001274:	d100      	bne.n	8001278 <__aeabi_ddiv+0x2a4>
 8001276:	e07b      	b.n	8001370 <__aeabi_ddiv+0x39c>
 8001278:	2c00      	cmp	r4, #0
 800127a:	d100      	bne.n	800127e <__aeabi_ddiv+0x2aa>
 800127c:	e0fa      	b.n	8001474 <__aeabi_ddiv+0x4a0>
 800127e:	0020      	movs	r0, r4
 8001280:	f001 f9da 	bl	8002638 <__clzsi2>
 8001284:	0002      	movs	r2, r0
 8001286:	3a0b      	subs	r2, #11
 8001288:	231d      	movs	r3, #29
 800128a:	0001      	movs	r1, r0
 800128c:	1a9b      	subs	r3, r3, r2
 800128e:	4652      	mov	r2, sl
 8001290:	3908      	subs	r1, #8
 8001292:	40da      	lsrs	r2, r3
 8001294:	408c      	lsls	r4, r1
 8001296:	4314      	orrs	r4, r2
 8001298:	4652      	mov	r2, sl
 800129a:	408a      	lsls	r2, r1
 800129c:	4b31      	ldr	r3, [pc, #196]	; (8001364 <__aeabi_ddiv+0x390>)
 800129e:	4458      	add	r0, fp
 80012a0:	469b      	mov	fp, r3
 80012a2:	4483      	add	fp, r0
 80012a4:	2000      	movs	r0, #0
 80012a6:	e6d5      	b.n	8001054 <__aeabi_ddiv+0x80>
 80012a8:	464b      	mov	r3, r9
 80012aa:	4323      	orrs	r3, r4
 80012ac:	4698      	mov	r8, r3
 80012ae:	d044      	beq.n	800133a <__aeabi_ddiv+0x366>
 80012b0:	2c00      	cmp	r4, #0
 80012b2:	d100      	bne.n	80012b6 <__aeabi_ddiv+0x2e2>
 80012b4:	e0ce      	b.n	8001454 <__aeabi_ddiv+0x480>
 80012b6:	0020      	movs	r0, r4
 80012b8:	f001 f9be 	bl	8002638 <__clzsi2>
 80012bc:	0001      	movs	r1, r0
 80012be:	0002      	movs	r2, r0
 80012c0:	390b      	subs	r1, #11
 80012c2:	231d      	movs	r3, #29
 80012c4:	1a5b      	subs	r3, r3, r1
 80012c6:	4649      	mov	r1, r9
 80012c8:	0010      	movs	r0, r2
 80012ca:	40d9      	lsrs	r1, r3
 80012cc:	3808      	subs	r0, #8
 80012ce:	4084      	lsls	r4, r0
 80012d0:	000b      	movs	r3, r1
 80012d2:	464d      	mov	r5, r9
 80012d4:	4323      	orrs	r3, r4
 80012d6:	4698      	mov	r8, r3
 80012d8:	4085      	lsls	r5, r0
 80012da:	4823      	ldr	r0, [pc, #140]	; (8001368 <__aeabi_ddiv+0x394>)
 80012dc:	1a83      	subs	r3, r0, r2
 80012de:	469b      	mov	fp, r3
 80012e0:	2300      	movs	r3, #0
 80012e2:	4699      	mov	r9, r3
 80012e4:	9300      	str	r3, [sp, #0]
 80012e6:	e69a      	b.n	800101e <__aeabi_ddiv+0x4a>
 80012e8:	464b      	mov	r3, r9
 80012ea:	4323      	orrs	r3, r4
 80012ec:	4698      	mov	r8, r3
 80012ee:	d11d      	bne.n	800132c <__aeabi_ddiv+0x358>
 80012f0:	2308      	movs	r3, #8
 80012f2:	4699      	mov	r9, r3
 80012f4:	3b06      	subs	r3, #6
 80012f6:	2500      	movs	r5, #0
 80012f8:	4683      	mov	fp, r0
 80012fa:	9300      	str	r3, [sp, #0]
 80012fc:	e68f      	b.n	800101e <__aeabi_ddiv+0x4a>
 80012fe:	4652      	mov	r2, sl
 8001300:	4322      	orrs	r2, r4
 8001302:	d109      	bne.n	8001318 <__aeabi_ddiv+0x344>
 8001304:	2302      	movs	r3, #2
 8001306:	4649      	mov	r1, r9
 8001308:	4319      	orrs	r1, r3
 800130a:	4b18      	ldr	r3, [pc, #96]	; (800136c <__aeabi_ddiv+0x398>)
 800130c:	4689      	mov	r9, r1
 800130e:	469c      	mov	ip, r3
 8001310:	2400      	movs	r4, #0
 8001312:	2002      	movs	r0, #2
 8001314:	44e3      	add	fp, ip
 8001316:	e69d      	b.n	8001054 <__aeabi_ddiv+0x80>
 8001318:	2303      	movs	r3, #3
 800131a:	464a      	mov	r2, r9
 800131c:	431a      	orrs	r2, r3
 800131e:	4b13      	ldr	r3, [pc, #76]	; (800136c <__aeabi_ddiv+0x398>)
 8001320:	4691      	mov	r9, r2
 8001322:	469c      	mov	ip, r3
 8001324:	4652      	mov	r2, sl
 8001326:	2003      	movs	r0, #3
 8001328:	44e3      	add	fp, ip
 800132a:	e693      	b.n	8001054 <__aeabi_ddiv+0x80>
 800132c:	230c      	movs	r3, #12
 800132e:	4699      	mov	r9, r3
 8001330:	3b09      	subs	r3, #9
 8001332:	46a0      	mov	r8, r4
 8001334:	4683      	mov	fp, r0
 8001336:	9300      	str	r3, [sp, #0]
 8001338:	e671      	b.n	800101e <__aeabi_ddiv+0x4a>
 800133a:	2304      	movs	r3, #4
 800133c:	4699      	mov	r9, r3
 800133e:	2300      	movs	r3, #0
 8001340:	469b      	mov	fp, r3
 8001342:	3301      	adds	r3, #1
 8001344:	2500      	movs	r5, #0
 8001346:	9300      	str	r3, [sp, #0]
 8001348:	e669      	b.n	800101e <__aeabi_ddiv+0x4a>
 800134a:	46c0      	nop			; (mov r8, r8)
 800134c:	000007ff 	.word	0x000007ff
 8001350:	fffffc01 	.word	0xfffffc01
 8001354:	0800a000 	.word	0x0800a000
 8001358:	000003ff 	.word	0x000003ff
 800135c:	feffffff 	.word	0xfeffffff
 8001360:	000007fe 	.word	0x000007fe
 8001364:	000003f3 	.word	0x000003f3
 8001368:	fffffc0d 	.word	0xfffffc0d
 800136c:	fffff801 	.word	0xfffff801
 8001370:	4649      	mov	r1, r9
 8001372:	2301      	movs	r3, #1
 8001374:	4319      	orrs	r1, r3
 8001376:	4689      	mov	r9, r1
 8001378:	2400      	movs	r4, #0
 800137a:	2001      	movs	r0, #1
 800137c:	e66a      	b.n	8001054 <__aeabi_ddiv+0x80>
 800137e:	2300      	movs	r3, #0
 8001380:	2480      	movs	r4, #128	; 0x80
 8001382:	469a      	mov	sl, r3
 8001384:	2500      	movs	r5, #0
 8001386:	4b8a      	ldr	r3, [pc, #552]	; (80015b0 <__aeabi_ddiv+0x5dc>)
 8001388:	0324      	lsls	r4, r4, #12
 800138a:	e67a      	b.n	8001082 <__aeabi_ddiv+0xae>
 800138c:	2501      	movs	r5, #1
 800138e:	426d      	negs	r5, r5
 8001390:	2301      	movs	r3, #1
 8001392:	1a9b      	subs	r3, r3, r2
 8001394:	2b38      	cmp	r3, #56	; 0x38
 8001396:	dd00      	ble.n	800139a <__aeabi_ddiv+0x3c6>
 8001398:	e670      	b.n	800107c <__aeabi_ddiv+0xa8>
 800139a:	2b1f      	cmp	r3, #31
 800139c:	dc00      	bgt.n	80013a0 <__aeabi_ddiv+0x3cc>
 800139e:	e0bf      	b.n	8001520 <__aeabi_ddiv+0x54c>
 80013a0:	211f      	movs	r1, #31
 80013a2:	4249      	negs	r1, r1
 80013a4:	1a8a      	subs	r2, r1, r2
 80013a6:	4641      	mov	r1, r8
 80013a8:	40d1      	lsrs	r1, r2
 80013aa:	000a      	movs	r2, r1
 80013ac:	2b20      	cmp	r3, #32
 80013ae:	d004      	beq.n	80013ba <__aeabi_ddiv+0x3e6>
 80013b0:	4641      	mov	r1, r8
 80013b2:	4b80      	ldr	r3, [pc, #512]	; (80015b4 <__aeabi_ddiv+0x5e0>)
 80013b4:	445b      	add	r3, fp
 80013b6:	4099      	lsls	r1, r3
 80013b8:	430d      	orrs	r5, r1
 80013ba:	1e6b      	subs	r3, r5, #1
 80013bc:	419d      	sbcs	r5, r3
 80013be:	2307      	movs	r3, #7
 80013c0:	432a      	orrs	r2, r5
 80013c2:	001d      	movs	r5, r3
 80013c4:	2400      	movs	r4, #0
 80013c6:	4015      	ands	r5, r2
 80013c8:	4213      	tst	r3, r2
 80013ca:	d100      	bne.n	80013ce <__aeabi_ddiv+0x3fa>
 80013cc:	e0d4      	b.n	8001578 <__aeabi_ddiv+0x5a4>
 80013ce:	210f      	movs	r1, #15
 80013d0:	2300      	movs	r3, #0
 80013d2:	4011      	ands	r1, r2
 80013d4:	2904      	cmp	r1, #4
 80013d6:	d100      	bne.n	80013da <__aeabi_ddiv+0x406>
 80013d8:	e0cb      	b.n	8001572 <__aeabi_ddiv+0x59e>
 80013da:	1d11      	adds	r1, r2, #4
 80013dc:	4291      	cmp	r1, r2
 80013de:	4192      	sbcs	r2, r2
 80013e0:	4252      	negs	r2, r2
 80013e2:	189b      	adds	r3, r3, r2
 80013e4:	000a      	movs	r2, r1
 80013e6:	0219      	lsls	r1, r3, #8
 80013e8:	d400      	bmi.n	80013ec <__aeabi_ddiv+0x418>
 80013ea:	e0c2      	b.n	8001572 <__aeabi_ddiv+0x59e>
 80013ec:	2301      	movs	r3, #1
 80013ee:	2400      	movs	r4, #0
 80013f0:	2500      	movs	r5, #0
 80013f2:	e646      	b.n	8001082 <__aeabi_ddiv+0xae>
 80013f4:	2380      	movs	r3, #128	; 0x80
 80013f6:	4641      	mov	r1, r8
 80013f8:	031b      	lsls	r3, r3, #12
 80013fa:	4219      	tst	r1, r3
 80013fc:	d008      	beq.n	8001410 <__aeabi_ddiv+0x43c>
 80013fe:	421c      	tst	r4, r3
 8001400:	d106      	bne.n	8001410 <__aeabi_ddiv+0x43c>
 8001402:	431c      	orrs	r4, r3
 8001404:	0324      	lsls	r4, r4, #12
 8001406:	46ba      	mov	sl, r7
 8001408:	0015      	movs	r5, r2
 800140a:	4b69      	ldr	r3, [pc, #420]	; (80015b0 <__aeabi_ddiv+0x5dc>)
 800140c:	0b24      	lsrs	r4, r4, #12
 800140e:	e638      	b.n	8001082 <__aeabi_ddiv+0xae>
 8001410:	2480      	movs	r4, #128	; 0x80
 8001412:	4643      	mov	r3, r8
 8001414:	0324      	lsls	r4, r4, #12
 8001416:	431c      	orrs	r4, r3
 8001418:	0324      	lsls	r4, r4, #12
 800141a:	46b2      	mov	sl, r6
 800141c:	4b64      	ldr	r3, [pc, #400]	; (80015b0 <__aeabi_ddiv+0x5dc>)
 800141e:	0b24      	lsrs	r4, r4, #12
 8001420:	e62f      	b.n	8001082 <__aeabi_ddiv+0xae>
 8001422:	2b00      	cmp	r3, #0
 8001424:	d100      	bne.n	8001428 <__aeabi_ddiv+0x454>
 8001426:	e703      	b.n	8001230 <__aeabi_ddiv+0x25c>
 8001428:	19a6      	adds	r6, r4, r6
 800142a:	1e68      	subs	r0, r5, #1
 800142c:	42a6      	cmp	r6, r4
 800142e:	d200      	bcs.n	8001432 <__aeabi_ddiv+0x45e>
 8001430:	e08d      	b.n	800154e <__aeabi_ddiv+0x57a>
 8001432:	428e      	cmp	r6, r1
 8001434:	d200      	bcs.n	8001438 <__aeabi_ddiv+0x464>
 8001436:	e0a3      	b.n	8001580 <__aeabi_ddiv+0x5ac>
 8001438:	d100      	bne.n	800143c <__aeabi_ddiv+0x468>
 800143a:	e0b3      	b.n	80015a4 <__aeabi_ddiv+0x5d0>
 800143c:	0005      	movs	r5, r0
 800143e:	e6f5      	b.n	800122c <__aeabi_ddiv+0x258>
 8001440:	42aa      	cmp	r2, r5
 8001442:	d900      	bls.n	8001446 <__aeabi_ddiv+0x472>
 8001444:	e639      	b.n	80010ba <__aeabi_ddiv+0xe6>
 8001446:	4643      	mov	r3, r8
 8001448:	07de      	lsls	r6, r3, #31
 800144a:	0858      	lsrs	r0, r3, #1
 800144c:	086b      	lsrs	r3, r5, #1
 800144e:	431e      	orrs	r6, r3
 8001450:	07ed      	lsls	r5, r5, #31
 8001452:	e639      	b.n	80010c8 <__aeabi_ddiv+0xf4>
 8001454:	4648      	mov	r0, r9
 8001456:	f001 f8ef 	bl	8002638 <__clzsi2>
 800145a:	0001      	movs	r1, r0
 800145c:	0002      	movs	r2, r0
 800145e:	3115      	adds	r1, #21
 8001460:	3220      	adds	r2, #32
 8001462:	291c      	cmp	r1, #28
 8001464:	dc00      	bgt.n	8001468 <__aeabi_ddiv+0x494>
 8001466:	e72c      	b.n	80012c2 <__aeabi_ddiv+0x2ee>
 8001468:	464b      	mov	r3, r9
 800146a:	3808      	subs	r0, #8
 800146c:	4083      	lsls	r3, r0
 800146e:	2500      	movs	r5, #0
 8001470:	4698      	mov	r8, r3
 8001472:	e732      	b.n	80012da <__aeabi_ddiv+0x306>
 8001474:	f001 f8e0 	bl	8002638 <__clzsi2>
 8001478:	0003      	movs	r3, r0
 800147a:	001a      	movs	r2, r3
 800147c:	3215      	adds	r2, #21
 800147e:	3020      	adds	r0, #32
 8001480:	2a1c      	cmp	r2, #28
 8001482:	dc00      	bgt.n	8001486 <__aeabi_ddiv+0x4b2>
 8001484:	e700      	b.n	8001288 <__aeabi_ddiv+0x2b4>
 8001486:	4654      	mov	r4, sl
 8001488:	3b08      	subs	r3, #8
 800148a:	2200      	movs	r2, #0
 800148c:	409c      	lsls	r4, r3
 800148e:	e705      	b.n	800129c <__aeabi_ddiv+0x2c8>
 8001490:	1936      	adds	r6, r6, r4
 8001492:	3b01      	subs	r3, #1
 8001494:	42b4      	cmp	r4, r6
 8001496:	d900      	bls.n	800149a <__aeabi_ddiv+0x4c6>
 8001498:	e6a6      	b.n	80011e8 <__aeabi_ddiv+0x214>
 800149a:	42b2      	cmp	r2, r6
 800149c:	d800      	bhi.n	80014a0 <__aeabi_ddiv+0x4cc>
 800149e:	e6a3      	b.n	80011e8 <__aeabi_ddiv+0x214>
 80014a0:	1e83      	subs	r3, r0, #2
 80014a2:	1936      	adds	r6, r6, r4
 80014a4:	e6a0      	b.n	80011e8 <__aeabi_ddiv+0x214>
 80014a6:	1909      	adds	r1, r1, r4
 80014a8:	3d01      	subs	r5, #1
 80014aa:	428c      	cmp	r4, r1
 80014ac:	d900      	bls.n	80014b0 <__aeabi_ddiv+0x4dc>
 80014ae:	e68d      	b.n	80011cc <__aeabi_ddiv+0x1f8>
 80014b0:	428a      	cmp	r2, r1
 80014b2:	d800      	bhi.n	80014b6 <__aeabi_ddiv+0x4e2>
 80014b4:	e68a      	b.n	80011cc <__aeabi_ddiv+0x1f8>
 80014b6:	1e85      	subs	r5, r0, #2
 80014b8:	1909      	adds	r1, r1, r4
 80014ba:	e687      	b.n	80011cc <__aeabi_ddiv+0x1f8>
 80014bc:	230f      	movs	r3, #15
 80014be:	402b      	ands	r3, r5
 80014c0:	2b04      	cmp	r3, #4
 80014c2:	d100      	bne.n	80014c6 <__aeabi_ddiv+0x4f2>
 80014c4:	e6bc      	b.n	8001240 <__aeabi_ddiv+0x26c>
 80014c6:	2305      	movs	r3, #5
 80014c8:	425b      	negs	r3, r3
 80014ca:	42ab      	cmp	r3, r5
 80014cc:	419b      	sbcs	r3, r3
 80014ce:	3504      	adds	r5, #4
 80014d0:	425b      	negs	r3, r3
 80014d2:	08ed      	lsrs	r5, r5, #3
 80014d4:	4498      	add	r8, r3
 80014d6:	e6b4      	b.n	8001242 <__aeabi_ddiv+0x26e>
 80014d8:	42af      	cmp	r7, r5
 80014da:	d900      	bls.n	80014de <__aeabi_ddiv+0x50a>
 80014dc:	e660      	b.n	80011a0 <__aeabi_ddiv+0x1cc>
 80014de:	4282      	cmp	r2, r0
 80014e0:	d804      	bhi.n	80014ec <__aeabi_ddiv+0x518>
 80014e2:	d000      	beq.n	80014e6 <__aeabi_ddiv+0x512>
 80014e4:	e65c      	b.n	80011a0 <__aeabi_ddiv+0x1cc>
 80014e6:	42ae      	cmp	r6, r5
 80014e8:	d800      	bhi.n	80014ec <__aeabi_ddiv+0x518>
 80014ea:	e659      	b.n	80011a0 <__aeabi_ddiv+0x1cc>
 80014ec:	2302      	movs	r3, #2
 80014ee:	425b      	negs	r3, r3
 80014f0:	469c      	mov	ip, r3
 80014f2:	9b00      	ldr	r3, [sp, #0]
 80014f4:	44e0      	add	r8, ip
 80014f6:	469c      	mov	ip, r3
 80014f8:	4465      	add	r5, ip
 80014fa:	429d      	cmp	r5, r3
 80014fc:	419b      	sbcs	r3, r3
 80014fe:	425b      	negs	r3, r3
 8001500:	191b      	adds	r3, r3, r4
 8001502:	18c0      	adds	r0, r0, r3
 8001504:	e64d      	b.n	80011a2 <__aeabi_ddiv+0x1ce>
 8001506:	428a      	cmp	r2, r1
 8001508:	d800      	bhi.n	800150c <__aeabi_ddiv+0x538>
 800150a:	e60e      	b.n	800112a <__aeabi_ddiv+0x156>
 800150c:	1e83      	subs	r3, r0, #2
 800150e:	1909      	adds	r1, r1, r4
 8001510:	e60b      	b.n	800112a <__aeabi_ddiv+0x156>
 8001512:	428a      	cmp	r2, r1
 8001514:	d800      	bhi.n	8001518 <__aeabi_ddiv+0x544>
 8001516:	e5f4      	b.n	8001102 <__aeabi_ddiv+0x12e>
 8001518:	1e83      	subs	r3, r0, #2
 800151a:	4698      	mov	r8, r3
 800151c:	1909      	adds	r1, r1, r4
 800151e:	e5f0      	b.n	8001102 <__aeabi_ddiv+0x12e>
 8001520:	4925      	ldr	r1, [pc, #148]	; (80015b8 <__aeabi_ddiv+0x5e4>)
 8001522:	0028      	movs	r0, r5
 8001524:	4459      	add	r1, fp
 8001526:	408d      	lsls	r5, r1
 8001528:	4642      	mov	r2, r8
 800152a:	408a      	lsls	r2, r1
 800152c:	1e69      	subs	r1, r5, #1
 800152e:	418d      	sbcs	r5, r1
 8001530:	4641      	mov	r1, r8
 8001532:	40d8      	lsrs	r0, r3
 8001534:	40d9      	lsrs	r1, r3
 8001536:	4302      	orrs	r2, r0
 8001538:	432a      	orrs	r2, r5
 800153a:	000b      	movs	r3, r1
 800153c:	0751      	lsls	r1, r2, #29
 800153e:	d100      	bne.n	8001542 <__aeabi_ddiv+0x56e>
 8001540:	e751      	b.n	80013e6 <__aeabi_ddiv+0x412>
 8001542:	210f      	movs	r1, #15
 8001544:	4011      	ands	r1, r2
 8001546:	2904      	cmp	r1, #4
 8001548:	d000      	beq.n	800154c <__aeabi_ddiv+0x578>
 800154a:	e746      	b.n	80013da <__aeabi_ddiv+0x406>
 800154c:	e74b      	b.n	80013e6 <__aeabi_ddiv+0x412>
 800154e:	0005      	movs	r5, r0
 8001550:	428e      	cmp	r6, r1
 8001552:	d000      	beq.n	8001556 <__aeabi_ddiv+0x582>
 8001554:	e66a      	b.n	800122c <__aeabi_ddiv+0x258>
 8001556:	9a00      	ldr	r2, [sp, #0]
 8001558:	4293      	cmp	r3, r2
 800155a:	d000      	beq.n	800155e <__aeabi_ddiv+0x58a>
 800155c:	e666      	b.n	800122c <__aeabi_ddiv+0x258>
 800155e:	e667      	b.n	8001230 <__aeabi_ddiv+0x25c>
 8001560:	4a16      	ldr	r2, [pc, #88]	; (80015bc <__aeabi_ddiv+0x5e8>)
 8001562:	445a      	add	r2, fp
 8001564:	2a00      	cmp	r2, #0
 8001566:	dc00      	bgt.n	800156a <__aeabi_ddiv+0x596>
 8001568:	e710      	b.n	800138c <__aeabi_ddiv+0x3b8>
 800156a:	2301      	movs	r3, #1
 800156c:	2500      	movs	r5, #0
 800156e:	4498      	add	r8, r3
 8001570:	e667      	b.n	8001242 <__aeabi_ddiv+0x26e>
 8001572:	075d      	lsls	r5, r3, #29
 8001574:	025b      	lsls	r3, r3, #9
 8001576:	0b1c      	lsrs	r4, r3, #12
 8001578:	08d2      	lsrs	r2, r2, #3
 800157a:	2300      	movs	r3, #0
 800157c:	4315      	orrs	r5, r2
 800157e:	e580      	b.n	8001082 <__aeabi_ddiv+0xae>
 8001580:	9800      	ldr	r0, [sp, #0]
 8001582:	3d02      	subs	r5, #2
 8001584:	0042      	lsls	r2, r0, #1
 8001586:	4282      	cmp	r2, r0
 8001588:	41bf      	sbcs	r7, r7
 800158a:	427f      	negs	r7, r7
 800158c:	193c      	adds	r4, r7, r4
 800158e:	1936      	adds	r6, r6, r4
 8001590:	9200      	str	r2, [sp, #0]
 8001592:	e7dd      	b.n	8001550 <__aeabi_ddiv+0x57c>
 8001594:	2480      	movs	r4, #128	; 0x80
 8001596:	4643      	mov	r3, r8
 8001598:	0324      	lsls	r4, r4, #12
 800159a:	431c      	orrs	r4, r3
 800159c:	0324      	lsls	r4, r4, #12
 800159e:	4b04      	ldr	r3, [pc, #16]	; (80015b0 <__aeabi_ddiv+0x5dc>)
 80015a0:	0b24      	lsrs	r4, r4, #12
 80015a2:	e56e      	b.n	8001082 <__aeabi_ddiv+0xae>
 80015a4:	9a00      	ldr	r2, [sp, #0]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d3ea      	bcc.n	8001580 <__aeabi_ddiv+0x5ac>
 80015aa:	0005      	movs	r5, r0
 80015ac:	e7d3      	b.n	8001556 <__aeabi_ddiv+0x582>
 80015ae:	46c0      	nop			; (mov r8, r8)
 80015b0:	000007ff 	.word	0x000007ff
 80015b4:	0000043e 	.word	0x0000043e
 80015b8:	0000041e 	.word	0x0000041e
 80015bc:	000003ff 	.word	0x000003ff

080015c0 <__eqdf2>:
 80015c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015c2:	464e      	mov	r6, r9
 80015c4:	4645      	mov	r5, r8
 80015c6:	46de      	mov	lr, fp
 80015c8:	4657      	mov	r7, sl
 80015ca:	4690      	mov	r8, r2
 80015cc:	b5e0      	push	{r5, r6, r7, lr}
 80015ce:	0017      	movs	r7, r2
 80015d0:	031a      	lsls	r2, r3, #12
 80015d2:	0b12      	lsrs	r2, r2, #12
 80015d4:	0005      	movs	r5, r0
 80015d6:	4684      	mov	ip, r0
 80015d8:	4819      	ldr	r0, [pc, #100]	; (8001640 <__eqdf2+0x80>)
 80015da:	030e      	lsls	r6, r1, #12
 80015dc:	004c      	lsls	r4, r1, #1
 80015de:	4691      	mov	r9, r2
 80015e0:	005a      	lsls	r2, r3, #1
 80015e2:	0fdb      	lsrs	r3, r3, #31
 80015e4:	469b      	mov	fp, r3
 80015e6:	0b36      	lsrs	r6, r6, #12
 80015e8:	0d64      	lsrs	r4, r4, #21
 80015ea:	0fc9      	lsrs	r1, r1, #31
 80015ec:	0d52      	lsrs	r2, r2, #21
 80015ee:	4284      	cmp	r4, r0
 80015f0:	d019      	beq.n	8001626 <__eqdf2+0x66>
 80015f2:	4282      	cmp	r2, r0
 80015f4:	d010      	beq.n	8001618 <__eqdf2+0x58>
 80015f6:	2001      	movs	r0, #1
 80015f8:	4294      	cmp	r4, r2
 80015fa:	d10e      	bne.n	800161a <__eqdf2+0x5a>
 80015fc:	454e      	cmp	r6, r9
 80015fe:	d10c      	bne.n	800161a <__eqdf2+0x5a>
 8001600:	2001      	movs	r0, #1
 8001602:	45c4      	cmp	ip, r8
 8001604:	d109      	bne.n	800161a <__eqdf2+0x5a>
 8001606:	4559      	cmp	r1, fp
 8001608:	d017      	beq.n	800163a <__eqdf2+0x7a>
 800160a:	2c00      	cmp	r4, #0
 800160c:	d105      	bne.n	800161a <__eqdf2+0x5a>
 800160e:	0030      	movs	r0, r6
 8001610:	4328      	orrs	r0, r5
 8001612:	1e43      	subs	r3, r0, #1
 8001614:	4198      	sbcs	r0, r3
 8001616:	e000      	b.n	800161a <__eqdf2+0x5a>
 8001618:	2001      	movs	r0, #1
 800161a:	bcf0      	pop	{r4, r5, r6, r7}
 800161c:	46bb      	mov	fp, r7
 800161e:	46b2      	mov	sl, r6
 8001620:	46a9      	mov	r9, r5
 8001622:	46a0      	mov	r8, r4
 8001624:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001626:	0033      	movs	r3, r6
 8001628:	2001      	movs	r0, #1
 800162a:	432b      	orrs	r3, r5
 800162c:	d1f5      	bne.n	800161a <__eqdf2+0x5a>
 800162e:	42a2      	cmp	r2, r4
 8001630:	d1f3      	bne.n	800161a <__eqdf2+0x5a>
 8001632:	464b      	mov	r3, r9
 8001634:	433b      	orrs	r3, r7
 8001636:	d1f0      	bne.n	800161a <__eqdf2+0x5a>
 8001638:	e7e2      	b.n	8001600 <__eqdf2+0x40>
 800163a:	2000      	movs	r0, #0
 800163c:	e7ed      	b.n	800161a <__eqdf2+0x5a>
 800163e:	46c0      	nop			; (mov r8, r8)
 8001640:	000007ff 	.word	0x000007ff

08001644 <__gedf2>:
 8001644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001646:	4647      	mov	r7, r8
 8001648:	46ce      	mov	lr, r9
 800164a:	0004      	movs	r4, r0
 800164c:	0018      	movs	r0, r3
 800164e:	0016      	movs	r6, r2
 8001650:	031b      	lsls	r3, r3, #12
 8001652:	0b1b      	lsrs	r3, r3, #12
 8001654:	4d2d      	ldr	r5, [pc, #180]	; (800170c <__gedf2+0xc8>)
 8001656:	004a      	lsls	r2, r1, #1
 8001658:	4699      	mov	r9, r3
 800165a:	b580      	push	{r7, lr}
 800165c:	0043      	lsls	r3, r0, #1
 800165e:	030f      	lsls	r7, r1, #12
 8001660:	46a4      	mov	ip, r4
 8001662:	46b0      	mov	r8, r6
 8001664:	0b3f      	lsrs	r7, r7, #12
 8001666:	0d52      	lsrs	r2, r2, #21
 8001668:	0fc9      	lsrs	r1, r1, #31
 800166a:	0d5b      	lsrs	r3, r3, #21
 800166c:	0fc0      	lsrs	r0, r0, #31
 800166e:	42aa      	cmp	r2, r5
 8001670:	d021      	beq.n	80016b6 <__gedf2+0x72>
 8001672:	42ab      	cmp	r3, r5
 8001674:	d013      	beq.n	800169e <__gedf2+0x5a>
 8001676:	2a00      	cmp	r2, #0
 8001678:	d122      	bne.n	80016c0 <__gedf2+0x7c>
 800167a:	433c      	orrs	r4, r7
 800167c:	2b00      	cmp	r3, #0
 800167e:	d102      	bne.n	8001686 <__gedf2+0x42>
 8001680:	464d      	mov	r5, r9
 8001682:	432e      	orrs	r6, r5
 8001684:	d022      	beq.n	80016cc <__gedf2+0x88>
 8001686:	2c00      	cmp	r4, #0
 8001688:	d010      	beq.n	80016ac <__gedf2+0x68>
 800168a:	4281      	cmp	r1, r0
 800168c:	d022      	beq.n	80016d4 <__gedf2+0x90>
 800168e:	2002      	movs	r0, #2
 8001690:	3901      	subs	r1, #1
 8001692:	4008      	ands	r0, r1
 8001694:	3801      	subs	r0, #1
 8001696:	bcc0      	pop	{r6, r7}
 8001698:	46b9      	mov	r9, r7
 800169a:	46b0      	mov	r8, r6
 800169c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800169e:	464d      	mov	r5, r9
 80016a0:	432e      	orrs	r6, r5
 80016a2:	d129      	bne.n	80016f8 <__gedf2+0xb4>
 80016a4:	2a00      	cmp	r2, #0
 80016a6:	d1f0      	bne.n	800168a <__gedf2+0x46>
 80016a8:	433c      	orrs	r4, r7
 80016aa:	d1ee      	bne.n	800168a <__gedf2+0x46>
 80016ac:	2800      	cmp	r0, #0
 80016ae:	d1f2      	bne.n	8001696 <__gedf2+0x52>
 80016b0:	2001      	movs	r0, #1
 80016b2:	4240      	negs	r0, r0
 80016b4:	e7ef      	b.n	8001696 <__gedf2+0x52>
 80016b6:	003d      	movs	r5, r7
 80016b8:	4325      	orrs	r5, r4
 80016ba:	d11d      	bne.n	80016f8 <__gedf2+0xb4>
 80016bc:	4293      	cmp	r3, r2
 80016be:	d0ee      	beq.n	800169e <__gedf2+0x5a>
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d1e2      	bne.n	800168a <__gedf2+0x46>
 80016c4:	464c      	mov	r4, r9
 80016c6:	4326      	orrs	r6, r4
 80016c8:	d1df      	bne.n	800168a <__gedf2+0x46>
 80016ca:	e7e0      	b.n	800168e <__gedf2+0x4a>
 80016cc:	2000      	movs	r0, #0
 80016ce:	2c00      	cmp	r4, #0
 80016d0:	d0e1      	beq.n	8001696 <__gedf2+0x52>
 80016d2:	e7dc      	b.n	800168e <__gedf2+0x4a>
 80016d4:	429a      	cmp	r2, r3
 80016d6:	dc0a      	bgt.n	80016ee <__gedf2+0xaa>
 80016d8:	dbe8      	blt.n	80016ac <__gedf2+0x68>
 80016da:	454f      	cmp	r7, r9
 80016dc:	d8d7      	bhi.n	800168e <__gedf2+0x4a>
 80016de:	d00e      	beq.n	80016fe <__gedf2+0xba>
 80016e0:	2000      	movs	r0, #0
 80016e2:	454f      	cmp	r7, r9
 80016e4:	d2d7      	bcs.n	8001696 <__gedf2+0x52>
 80016e6:	2900      	cmp	r1, #0
 80016e8:	d0e2      	beq.n	80016b0 <__gedf2+0x6c>
 80016ea:	0008      	movs	r0, r1
 80016ec:	e7d3      	b.n	8001696 <__gedf2+0x52>
 80016ee:	4243      	negs	r3, r0
 80016f0:	4158      	adcs	r0, r3
 80016f2:	0040      	lsls	r0, r0, #1
 80016f4:	3801      	subs	r0, #1
 80016f6:	e7ce      	b.n	8001696 <__gedf2+0x52>
 80016f8:	2002      	movs	r0, #2
 80016fa:	4240      	negs	r0, r0
 80016fc:	e7cb      	b.n	8001696 <__gedf2+0x52>
 80016fe:	45c4      	cmp	ip, r8
 8001700:	d8c5      	bhi.n	800168e <__gedf2+0x4a>
 8001702:	2000      	movs	r0, #0
 8001704:	45c4      	cmp	ip, r8
 8001706:	d2c6      	bcs.n	8001696 <__gedf2+0x52>
 8001708:	e7ed      	b.n	80016e6 <__gedf2+0xa2>
 800170a:	46c0      	nop			; (mov r8, r8)
 800170c:	000007ff 	.word	0x000007ff

08001710 <__ledf2>:
 8001710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001712:	4647      	mov	r7, r8
 8001714:	46ce      	mov	lr, r9
 8001716:	0004      	movs	r4, r0
 8001718:	0018      	movs	r0, r3
 800171a:	0016      	movs	r6, r2
 800171c:	031b      	lsls	r3, r3, #12
 800171e:	0b1b      	lsrs	r3, r3, #12
 8001720:	4d2c      	ldr	r5, [pc, #176]	; (80017d4 <__ledf2+0xc4>)
 8001722:	004a      	lsls	r2, r1, #1
 8001724:	4699      	mov	r9, r3
 8001726:	b580      	push	{r7, lr}
 8001728:	0043      	lsls	r3, r0, #1
 800172a:	030f      	lsls	r7, r1, #12
 800172c:	46a4      	mov	ip, r4
 800172e:	46b0      	mov	r8, r6
 8001730:	0b3f      	lsrs	r7, r7, #12
 8001732:	0d52      	lsrs	r2, r2, #21
 8001734:	0fc9      	lsrs	r1, r1, #31
 8001736:	0d5b      	lsrs	r3, r3, #21
 8001738:	0fc0      	lsrs	r0, r0, #31
 800173a:	42aa      	cmp	r2, r5
 800173c:	d00d      	beq.n	800175a <__ledf2+0x4a>
 800173e:	42ab      	cmp	r3, r5
 8001740:	d010      	beq.n	8001764 <__ledf2+0x54>
 8001742:	2a00      	cmp	r2, #0
 8001744:	d127      	bne.n	8001796 <__ledf2+0x86>
 8001746:	433c      	orrs	r4, r7
 8001748:	2b00      	cmp	r3, #0
 800174a:	d111      	bne.n	8001770 <__ledf2+0x60>
 800174c:	464d      	mov	r5, r9
 800174e:	432e      	orrs	r6, r5
 8001750:	d10e      	bne.n	8001770 <__ledf2+0x60>
 8001752:	2000      	movs	r0, #0
 8001754:	2c00      	cmp	r4, #0
 8001756:	d015      	beq.n	8001784 <__ledf2+0x74>
 8001758:	e00e      	b.n	8001778 <__ledf2+0x68>
 800175a:	003d      	movs	r5, r7
 800175c:	4325      	orrs	r5, r4
 800175e:	d110      	bne.n	8001782 <__ledf2+0x72>
 8001760:	4293      	cmp	r3, r2
 8001762:	d118      	bne.n	8001796 <__ledf2+0x86>
 8001764:	464d      	mov	r5, r9
 8001766:	432e      	orrs	r6, r5
 8001768:	d10b      	bne.n	8001782 <__ledf2+0x72>
 800176a:	2a00      	cmp	r2, #0
 800176c:	d102      	bne.n	8001774 <__ledf2+0x64>
 800176e:	433c      	orrs	r4, r7
 8001770:	2c00      	cmp	r4, #0
 8001772:	d00b      	beq.n	800178c <__ledf2+0x7c>
 8001774:	4281      	cmp	r1, r0
 8001776:	d014      	beq.n	80017a2 <__ledf2+0x92>
 8001778:	2002      	movs	r0, #2
 800177a:	3901      	subs	r1, #1
 800177c:	4008      	ands	r0, r1
 800177e:	3801      	subs	r0, #1
 8001780:	e000      	b.n	8001784 <__ledf2+0x74>
 8001782:	2002      	movs	r0, #2
 8001784:	bcc0      	pop	{r6, r7}
 8001786:	46b9      	mov	r9, r7
 8001788:	46b0      	mov	r8, r6
 800178a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800178c:	2800      	cmp	r0, #0
 800178e:	d1f9      	bne.n	8001784 <__ledf2+0x74>
 8001790:	2001      	movs	r0, #1
 8001792:	4240      	negs	r0, r0
 8001794:	e7f6      	b.n	8001784 <__ledf2+0x74>
 8001796:	2b00      	cmp	r3, #0
 8001798:	d1ec      	bne.n	8001774 <__ledf2+0x64>
 800179a:	464c      	mov	r4, r9
 800179c:	4326      	orrs	r6, r4
 800179e:	d1e9      	bne.n	8001774 <__ledf2+0x64>
 80017a0:	e7ea      	b.n	8001778 <__ledf2+0x68>
 80017a2:	429a      	cmp	r2, r3
 80017a4:	dd04      	ble.n	80017b0 <__ledf2+0xa0>
 80017a6:	4243      	negs	r3, r0
 80017a8:	4158      	adcs	r0, r3
 80017aa:	0040      	lsls	r0, r0, #1
 80017ac:	3801      	subs	r0, #1
 80017ae:	e7e9      	b.n	8001784 <__ledf2+0x74>
 80017b0:	429a      	cmp	r2, r3
 80017b2:	dbeb      	blt.n	800178c <__ledf2+0x7c>
 80017b4:	454f      	cmp	r7, r9
 80017b6:	d8df      	bhi.n	8001778 <__ledf2+0x68>
 80017b8:	d006      	beq.n	80017c8 <__ledf2+0xb8>
 80017ba:	2000      	movs	r0, #0
 80017bc:	454f      	cmp	r7, r9
 80017be:	d2e1      	bcs.n	8001784 <__ledf2+0x74>
 80017c0:	2900      	cmp	r1, #0
 80017c2:	d0e5      	beq.n	8001790 <__ledf2+0x80>
 80017c4:	0008      	movs	r0, r1
 80017c6:	e7dd      	b.n	8001784 <__ledf2+0x74>
 80017c8:	45c4      	cmp	ip, r8
 80017ca:	d8d5      	bhi.n	8001778 <__ledf2+0x68>
 80017cc:	2000      	movs	r0, #0
 80017ce:	45c4      	cmp	ip, r8
 80017d0:	d2d8      	bcs.n	8001784 <__ledf2+0x74>
 80017d2:	e7f5      	b.n	80017c0 <__ledf2+0xb0>
 80017d4:	000007ff 	.word	0x000007ff

080017d8 <__aeabi_dmul>:
 80017d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017da:	4657      	mov	r7, sl
 80017dc:	464e      	mov	r6, r9
 80017de:	4645      	mov	r5, r8
 80017e0:	46de      	mov	lr, fp
 80017e2:	b5e0      	push	{r5, r6, r7, lr}
 80017e4:	4698      	mov	r8, r3
 80017e6:	030c      	lsls	r4, r1, #12
 80017e8:	004b      	lsls	r3, r1, #1
 80017ea:	0006      	movs	r6, r0
 80017ec:	4692      	mov	sl, r2
 80017ee:	b087      	sub	sp, #28
 80017f0:	0b24      	lsrs	r4, r4, #12
 80017f2:	0d5b      	lsrs	r3, r3, #21
 80017f4:	0fcf      	lsrs	r7, r1, #31
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d100      	bne.n	80017fc <__aeabi_dmul+0x24>
 80017fa:	e15c      	b.n	8001ab6 <__aeabi_dmul+0x2de>
 80017fc:	4ad9      	ldr	r2, [pc, #868]	; (8001b64 <__aeabi_dmul+0x38c>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d100      	bne.n	8001804 <__aeabi_dmul+0x2c>
 8001802:	e175      	b.n	8001af0 <__aeabi_dmul+0x318>
 8001804:	0f42      	lsrs	r2, r0, #29
 8001806:	00e4      	lsls	r4, r4, #3
 8001808:	4314      	orrs	r4, r2
 800180a:	2280      	movs	r2, #128	; 0x80
 800180c:	0412      	lsls	r2, r2, #16
 800180e:	4314      	orrs	r4, r2
 8001810:	4ad5      	ldr	r2, [pc, #852]	; (8001b68 <__aeabi_dmul+0x390>)
 8001812:	00c5      	lsls	r5, r0, #3
 8001814:	4694      	mov	ip, r2
 8001816:	4463      	add	r3, ip
 8001818:	9300      	str	r3, [sp, #0]
 800181a:	2300      	movs	r3, #0
 800181c:	4699      	mov	r9, r3
 800181e:	469b      	mov	fp, r3
 8001820:	4643      	mov	r3, r8
 8001822:	4642      	mov	r2, r8
 8001824:	031e      	lsls	r6, r3, #12
 8001826:	0fd2      	lsrs	r2, r2, #31
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	4650      	mov	r0, sl
 800182c:	4690      	mov	r8, r2
 800182e:	0b36      	lsrs	r6, r6, #12
 8001830:	0d5b      	lsrs	r3, r3, #21
 8001832:	d100      	bne.n	8001836 <__aeabi_dmul+0x5e>
 8001834:	e120      	b.n	8001a78 <__aeabi_dmul+0x2a0>
 8001836:	4acb      	ldr	r2, [pc, #812]	; (8001b64 <__aeabi_dmul+0x38c>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d100      	bne.n	800183e <__aeabi_dmul+0x66>
 800183c:	e162      	b.n	8001b04 <__aeabi_dmul+0x32c>
 800183e:	49ca      	ldr	r1, [pc, #808]	; (8001b68 <__aeabi_dmul+0x390>)
 8001840:	0f42      	lsrs	r2, r0, #29
 8001842:	468c      	mov	ip, r1
 8001844:	9900      	ldr	r1, [sp, #0]
 8001846:	4463      	add	r3, ip
 8001848:	00f6      	lsls	r6, r6, #3
 800184a:	468c      	mov	ip, r1
 800184c:	4316      	orrs	r6, r2
 800184e:	2280      	movs	r2, #128	; 0x80
 8001850:	449c      	add	ip, r3
 8001852:	0412      	lsls	r2, r2, #16
 8001854:	4663      	mov	r3, ip
 8001856:	4316      	orrs	r6, r2
 8001858:	00c2      	lsls	r2, r0, #3
 800185a:	2000      	movs	r0, #0
 800185c:	9300      	str	r3, [sp, #0]
 800185e:	9900      	ldr	r1, [sp, #0]
 8001860:	4643      	mov	r3, r8
 8001862:	3101      	adds	r1, #1
 8001864:	468c      	mov	ip, r1
 8001866:	4649      	mov	r1, r9
 8001868:	407b      	eors	r3, r7
 800186a:	9301      	str	r3, [sp, #4]
 800186c:	290f      	cmp	r1, #15
 800186e:	d826      	bhi.n	80018be <__aeabi_dmul+0xe6>
 8001870:	4bbe      	ldr	r3, [pc, #760]	; (8001b6c <__aeabi_dmul+0x394>)
 8001872:	0089      	lsls	r1, r1, #2
 8001874:	5859      	ldr	r1, [r3, r1]
 8001876:	468f      	mov	pc, r1
 8001878:	4643      	mov	r3, r8
 800187a:	9301      	str	r3, [sp, #4]
 800187c:	0034      	movs	r4, r6
 800187e:	0015      	movs	r5, r2
 8001880:	4683      	mov	fp, r0
 8001882:	465b      	mov	r3, fp
 8001884:	2b02      	cmp	r3, #2
 8001886:	d016      	beq.n	80018b6 <__aeabi_dmul+0xde>
 8001888:	2b03      	cmp	r3, #3
 800188a:	d100      	bne.n	800188e <__aeabi_dmul+0xb6>
 800188c:	e203      	b.n	8001c96 <__aeabi_dmul+0x4be>
 800188e:	2b01      	cmp	r3, #1
 8001890:	d000      	beq.n	8001894 <__aeabi_dmul+0xbc>
 8001892:	e0cd      	b.n	8001a30 <__aeabi_dmul+0x258>
 8001894:	2200      	movs	r2, #0
 8001896:	2400      	movs	r4, #0
 8001898:	2500      	movs	r5, #0
 800189a:	9b01      	ldr	r3, [sp, #4]
 800189c:	0512      	lsls	r2, r2, #20
 800189e:	4322      	orrs	r2, r4
 80018a0:	07db      	lsls	r3, r3, #31
 80018a2:	431a      	orrs	r2, r3
 80018a4:	0028      	movs	r0, r5
 80018a6:	0011      	movs	r1, r2
 80018a8:	b007      	add	sp, #28
 80018aa:	bcf0      	pop	{r4, r5, r6, r7}
 80018ac:	46bb      	mov	fp, r7
 80018ae:	46b2      	mov	sl, r6
 80018b0:	46a9      	mov	r9, r5
 80018b2:	46a0      	mov	r8, r4
 80018b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018b6:	2400      	movs	r4, #0
 80018b8:	2500      	movs	r5, #0
 80018ba:	4aaa      	ldr	r2, [pc, #680]	; (8001b64 <__aeabi_dmul+0x38c>)
 80018bc:	e7ed      	b.n	800189a <__aeabi_dmul+0xc2>
 80018be:	0c28      	lsrs	r0, r5, #16
 80018c0:	042d      	lsls	r5, r5, #16
 80018c2:	0c2d      	lsrs	r5, r5, #16
 80018c4:	002b      	movs	r3, r5
 80018c6:	0c11      	lsrs	r1, r2, #16
 80018c8:	0412      	lsls	r2, r2, #16
 80018ca:	0c12      	lsrs	r2, r2, #16
 80018cc:	4353      	muls	r3, r2
 80018ce:	4698      	mov	r8, r3
 80018d0:	0013      	movs	r3, r2
 80018d2:	002f      	movs	r7, r5
 80018d4:	4343      	muls	r3, r0
 80018d6:	4699      	mov	r9, r3
 80018d8:	434f      	muls	r7, r1
 80018da:	444f      	add	r7, r9
 80018dc:	46bb      	mov	fp, r7
 80018de:	4647      	mov	r7, r8
 80018e0:	000b      	movs	r3, r1
 80018e2:	0c3f      	lsrs	r7, r7, #16
 80018e4:	46ba      	mov	sl, r7
 80018e6:	4343      	muls	r3, r0
 80018e8:	44da      	add	sl, fp
 80018ea:	9302      	str	r3, [sp, #8]
 80018ec:	45d1      	cmp	r9, sl
 80018ee:	d904      	bls.n	80018fa <__aeabi_dmul+0x122>
 80018f0:	2780      	movs	r7, #128	; 0x80
 80018f2:	027f      	lsls	r7, r7, #9
 80018f4:	46b9      	mov	r9, r7
 80018f6:	444b      	add	r3, r9
 80018f8:	9302      	str	r3, [sp, #8]
 80018fa:	4653      	mov	r3, sl
 80018fc:	0c1b      	lsrs	r3, r3, #16
 80018fe:	469b      	mov	fp, r3
 8001900:	4653      	mov	r3, sl
 8001902:	041f      	lsls	r7, r3, #16
 8001904:	4643      	mov	r3, r8
 8001906:	041b      	lsls	r3, r3, #16
 8001908:	0c1b      	lsrs	r3, r3, #16
 800190a:	4698      	mov	r8, r3
 800190c:	003b      	movs	r3, r7
 800190e:	4443      	add	r3, r8
 8001910:	9304      	str	r3, [sp, #16]
 8001912:	0c33      	lsrs	r3, r6, #16
 8001914:	0436      	lsls	r6, r6, #16
 8001916:	0c36      	lsrs	r6, r6, #16
 8001918:	4698      	mov	r8, r3
 800191a:	0033      	movs	r3, r6
 800191c:	4343      	muls	r3, r0
 800191e:	4699      	mov	r9, r3
 8001920:	4643      	mov	r3, r8
 8001922:	4343      	muls	r3, r0
 8001924:	002f      	movs	r7, r5
 8001926:	469a      	mov	sl, r3
 8001928:	4643      	mov	r3, r8
 800192a:	4377      	muls	r7, r6
 800192c:	435d      	muls	r5, r3
 800192e:	0c38      	lsrs	r0, r7, #16
 8001930:	444d      	add	r5, r9
 8001932:	1945      	adds	r5, r0, r5
 8001934:	45a9      	cmp	r9, r5
 8001936:	d903      	bls.n	8001940 <__aeabi_dmul+0x168>
 8001938:	2380      	movs	r3, #128	; 0x80
 800193a:	025b      	lsls	r3, r3, #9
 800193c:	4699      	mov	r9, r3
 800193e:	44ca      	add	sl, r9
 8001940:	043f      	lsls	r7, r7, #16
 8001942:	0c28      	lsrs	r0, r5, #16
 8001944:	0c3f      	lsrs	r7, r7, #16
 8001946:	042d      	lsls	r5, r5, #16
 8001948:	19ed      	adds	r5, r5, r7
 800194a:	0c27      	lsrs	r7, r4, #16
 800194c:	0424      	lsls	r4, r4, #16
 800194e:	0c24      	lsrs	r4, r4, #16
 8001950:	0003      	movs	r3, r0
 8001952:	0020      	movs	r0, r4
 8001954:	4350      	muls	r0, r2
 8001956:	437a      	muls	r2, r7
 8001958:	4691      	mov	r9, r2
 800195a:	003a      	movs	r2, r7
 800195c:	4453      	add	r3, sl
 800195e:	9305      	str	r3, [sp, #20]
 8001960:	0c03      	lsrs	r3, r0, #16
 8001962:	469a      	mov	sl, r3
 8001964:	434a      	muls	r2, r1
 8001966:	4361      	muls	r1, r4
 8001968:	4449      	add	r1, r9
 800196a:	4451      	add	r1, sl
 800196c:	44ab      	add	fp, r5
 800196e:	4589      	cmp	r9, r1
 8001970:	d903      	bls.n	800197a <__aeabi_dmul+0x1a2>
 8001972:	2380      	movs	r3, #128	; 0x80
 8001974:	025b      	lsls	r3, r3, #9
 8001976:	4699      	mov	r9, r3
 8001978:	444a      	add	r2, r9
 800197a:	0400      	lsls	r0, r0, #16
 800197c:	0c0b      	lsrs	r3, r1, #16
 800197e:	0c00      	lsrs	r0, r0, #16
 8001980:	0409      	lsls	r1, r1, #16
 8001982:	1809      	adds	r1, r1, r0
 8001984:	0020      	movs	r0, r4
 8001986:	4699      	mov	r9, r3
 8001988:	4643      	mov	r3, r8
 800198a:	4370      	muls	r0, r6
 800198c:	435c      	muls	r4, r3
 800198e:	437e      	muls	r6, r7
 8001990:	435f      	muls	r7, r3
 8001992:	0c03      	lsrs	r3, r0, #16
 8001994:	4698      	mov	r8, r3
 8001996:	19a4      	adds	r4, r4, r6
 8001998:	4444      	add	r4, r8
 800199a:	444a      	add	r2, r9
 800199c:	9703      	str	r7, [sp, #12]
 800199e:	42a6      	cmp	r6, r4
 80019a0:	d904      	bls.n	80019ac <__aeabi_dmul+0x1d4>
 80019a2:	2380      	movs	r3, #128	; 0x80
 80019a4:	025b      	lsls	r3, r3, #9
 80019a6:	4698      	mov	r8, r3
 80019a8:	4447      	add	r7, r8
 80019aa:	9703      	str	r7, [sp, #12]
 80019ac:	0423      	lsls	r3, r4, #16
 80019ae:	9e02      	ldr	r6, [sp, #8]
 80019b0:	469a      	mov	sl, r3
 80019b2:	9b05      	ldr	r3, [sp, #20]
 80019b4:	445e      	add	r6, fp
 80019b6:	4698      	mov	r8, r3
 80019b8:	42ae      	cmp	r6, r5
 80019ba:	41ad      	sbcs	r5, r5
 80019bc:	1876      	adds	r6, r6, r1
 80019be:	428e      	cmp	r6, r1
 80019c0:	4189      	sbcs	r1, r1
 80019c2:	0400      	lsls	r0, r0, #16
 80019c4:	0c00      	lsrs	r0, r0, #16
 80019c6:	4450      	add	r0, sl
 80019c8:	4440      	add	r0, r8
 80019ca:	426d      	negs	r5, r5
 80019cc:	1947      	adds	r7, r0, r5
 80019ce:	46b8      	mov	r8, r7
 80019d0:	4693      	mov	fp, r2
 80019d2:	4249      	negs	r1, r1
 80019d4:	4689      	mov	r9, r1
 80019d6:	44c3      	add	fp, r8
 80019d8:	44d9      	add	r9, fp
 80019da:	4298      	cmp	r0, r3
 80019dc:	4180      	sbcs	r0, r0
 80019de:	45a8      	cmp	r8, r5
 80019e0:	41ad      	sbcs	r5, r5
 80019e2:	4593      	cmp	fp, r2
 80019e4:	4192      	sbcs	r2, r2
 80019e6:	4589      	cmp	r9, r1
 80019e8:	4189      	sbcs	r1, r1
 80019ea:	426d      	negs	r5, r5
 80019ec:	4240      	negs	r0, r0
 80019ee:	4328      	orrs	r0, r5
 80019f0:	0c24      	lsrs	r4, r4, #16
 80019f2:	4252      	negs	r2, r2
 80019f4:	4249      	negs	r1, r1
 80019f6:	430a      	orrs	r2, r1
 80019f8:	9b03      	ldr	r3, [sp, #12]
 80019fa:	1900      	adds	r0, r0, r4
 80019fc:	1880      	adds	r0, r0, r2
 80019fe:	18c7      	adds	r7, r0, r3
 8001a00:	464b      	mov	r3, r9
 8001a02:	0ddc      	lsrs	r4, r3, #23
 8001a04:	9b04      	ldr	r3, [sp, #16]
 8001a06:	0275      	lsls	r5, r6, #9
 8001a08:	431d      	orrs	r5, r3
 8001a0a:	1e6a      	subs	r2, r5, #1
 8001a0c:	4195      	sbcs	r5, r2
 8001a0e:	464b      	mov	r3, r9
 8001a10:	0df6      	lsrs	r6, r6, #23
 8001a12:	027f      	lsls	r7, r7, #9
 8001a14:	4335      	orrs	r5, r6
 8001a16:	025a      	lsls	r2, r3, #9
 8001a18:	433c      	orrs	r4, r7
 8001a1a:	4315      	orrs	r5, r2
 8001a1c:	01fb      	lsls	r3, r7, #7
 8001a1e:	d400      	bmi.n	8001a22 <__aeabi_dmul+0x24a>
 8001a20:	e11c      	b.n	8001c5c <__aeabi_dmul+0x484>
 8001a22:	2101      	movs	r1, #1
 8001a24:	086a      	lsrs	r2, r5, #1
 8001a26:	400d      	ands	r5, r1
 8001a28:	4315      	orrs	r5, r2
 8001a2a:	07e2      	lsls	r2, r4, #31
 8001a2c:	4315      	orrs	r5, r2
 8001a2e:	0864      	lsrs	r4, r4, #1
 8001a30:	494f      	ldr	r1, [pc, #316]	; (8001b70 <__aeabi_dmul+0x398>)
 8001a32:	4461      	add	r1, ip
 8001a34:	2900      	cmp	r1, #0
 8001a36:	dc00      	bgt.n	8001a3a <__aeabi_dmul+0x262>
 8001a38:	e0b0      	b.n	8001b9c <__aeabi_dmul+0x3c4>
 8001a3a:	076b      	lsls	r3, r5, #29
 8001a3c:	d009      	beq.n	8001a52 <__aeabi_dmul+0x27a>
 8001a3e:	220f      	movs	r2, #15
 8001a40:	402a      	ands	r2, r5
 8001a42:	2a04      	cmp	r2, #4
 8001a44:	d005      	beq.n	8001a52 <__aeabi_dmul+0x27a>
 8001a46:	1d2a      	adds	r2, r5, #4
 8001a48:	42aa      	cmp	r2, r5
 8001a4a:	41ad      	sbcs	r5, r5
 8001a4c:	426d      	negs	r5, r5
 8001a4e:	1964      	adds	r4, r4, r5
 8001a50:	0015      	movs	r5, r2
 8001a52:	01e3      	lsls	r3, r4, #7
 8001a54:	d504      	bpl.n	8001a60 <__aeabi_dmul+0x288>
 8001a56:	2180      	movs	r1, #128	; 0x80
 8001a58:	4a46      	ldr	r2, [pc, #280]	; (8001b74 <__aeabi_dmul+0x39c>)
 8001a5a:	00c9      	lsls	r1, r1, #3
 8001a5c:	4014      	ands	r4, r2
 8001a5e:	4461      	add	r1, ip
 8001a60:	4a45      	ldr	r2, [pc, #276]	; (8001b78 <__aeabi_dmul+0x3a0>)
 8001a62:	4291      	cmp	r1, r2
 8001a64:	dd00      	ble.n	8001a68 <__aeabi_dmul+0x290>
 8001a66:	e726      	b.n	80018b6 <__aeabi_dmul+0xde>
 8001a68:	0762      	lsls	r2, r4, #29
 8001a6a:	08ed      	lsrs	r5, r5, #3
 8001a6c:	0264      	lsls	r4, r4, #9
 8001a6e:	0549      	lsls	r1, r1, #21
 8001a70:	4315      	orrs	r5, r2
 8001a72:	0b24      	lsrs	r4, r4, #12
 8001a74:	0d4a      	lsrs	r2, r1, #21
 8001a76:	e710      	b.n	800189a <__aeabi_dmul+0xc2>
 8001a78:	4652      	mov	r2, sl
 8001a7a:	4332      	orrs	r2, r6
 8001a7c:	d100      	bne.n	8001a80 <__aeabi_dmul+0x2a8>
 8001a7e:	e07f      	b.n	8001b80 <__aeabi_dmul+0x3a8>
 8001a80:	2e00      	cmp	r6, #0
 8001a82:	d100      	bne.n	8001a86 <__aeabi_dmul+0x2ae>
 8001a84:	e0dc      	b.n	8001c40 <__aeabi_dmul+0x468>
 8001a86:	0030      	movs	r0, r6
 8001a88:	f000 fdd6 	bl	8002638 <__clzsi2>
 8001a8c:	0002      	movs	r2, r0
 8001a8e:	3a0b      	subs	r2, #11
 8001a90:	231d      	movs	r3, #29
 8001a92:	0001      	movs	r1, r0
 8001a94:	1a9b      	subs	r3, r3, r2
 8001a96:	4652      	mov	r2, sl
 8001a98:	3908      	subs	r1, #8
 8001a9a:	40da      	lsrs	r2, r3
 8001a9c:	408e      	lsls	r6, r1
 8001a9e:	4316      	orrs	r6, r2
 8001aa0:	4652      	mov	r2, sl
 8001aa2:	408a      	lsls	r2, r1
 8001aa4:	9b00      	ldr	r3, [sp, #0]
 8001aa6:	4935      	ldr	r1, [pc, #212]	; (8001b7c <__aeabi_dmul+0x3a4>)
 8001aa8:	1a18      	subs	r0, r3, r0
 8001aaa:	0003      	movs	r3, r0
 8001aac:	468c      	mov	ip, r1
 8001aae:	4463      	add	r3, ip
 8001ab0:	2000      	movs	r0, #0
 8001ab2:	9300      	str	r3, [sp, #0]
 8001ab4:	e6d3      	b.n	800185e <__aeabi_dmul+0x86>
 8001ab6:	0025      	movs	r5, r4
 8001ab8:	4305      	orrs	r5, r0
 8001aba:	d04a      	beq.n	8001b52 <__aeabi_dmul+0x37a>
 8001abc:	2c00      	cmp	r4, #0
 8001abe:	d100      	bne.n	8001ac2 <__aeabi_dmul+0x2ea>
 8001ac0:	e0b0      	b.n	8001c24 <__aeabi_dmul+0x44c>
 8001ac2:	0020      	movs	r0, r4
 8001ac4:	f000 fdb8 	bl	8002638 <__clzsi2>
 8001ac8:	0001      	movs	r1, r0
 8001aca:	0002      	movs	r2, r0
 8001acc:	390b      	subs	r1, #11
 8001ace:	231d      	movs	r3, #29
 8001ad0:	0010      	movs	r0, r2
 8001ad2:	1a5b      	subs	r3, r3, r1
 8001ad4:	0031      	movs	r1, r6
 8001ad6:	0035      	movs	r5, r6
 8001ad8:	3808      	subs	r0, #8
 8001ada:	4084      	lsls	r4, r0
 8001adc:	40d9      	lsrs	r1, r3
 8001ade:	4085      	lsls	r5, r0
 8001ae0:	430c      	orrs	r4, r1
 8001ae2:	4826      	ldr	r0, [pc, #152]	; (8001b7c <__aeabi_dmul+0x3a4>)
 8001ae4:	1a83      	subs	r3, r0, r2
 8001ae6:	9300      	str	r3, [sp, #0]
 8001ae8:	2300      	movs	r3, #0
 8001aea:	4699      	mov	r9, r3
 8001aec:	469b      	mov	fp, r3
 8001aee:	e697      	b.n	8001820 <__aeabi_dmul+0x48>
 8001af0:	0005      	movs	r5, r0
 8001af2:	4325      	orrs	r5, r4
 8001af4:	d126      	bne.n	8001b44 <__aeabi_dmul+0x36c>
 8001af6:	2208      	movs	r2, #8
 8001af8:	9300      	str	r3, [sp, #0]
 8001afa:	2302      	movs	r3, #2
 8001afc:	2400      	movs	r4, #0
 8001afe:	4691      	mov	r9, r2
 8001b00:	469b      	mov	fp, r3
 8001b02:	e68d      	b.n	8001820 <__aeabi_dmul+0x48>
 8001b04:	4652      	mov	r2, sl
 8001b06:	9b00      	ldr	r3, [sp, #0]
 8001b08:	4332      	orrs	r2, r6
 8001b0a:	d110      	bne.n	8001b2e <__aeabi_dmul+0x356>
 8001b0c:	4915      	ldr	r1, [pc, #84]	; (8001b64 <__aeabi_dmul+0x38c>)
 8001b0e:	2600      	movs	r6, #0
 8001b10:	468c      	mov	ip, r1
 8001b12:	4463      	add	r3, ip
 8001b14:	4649      	mov	r1, r9
 8001b16:	9300      	str	r3, [sp, #0]
 8001b18:	2302      	movs	r3, #2
 8001b1a:	4319      	orrs	r1, r3
 8001b1c:	4689      	mov	r9, r1
 8001b1e:	2002      	movs	r0, #2
 8001b20:	e69d      	b.n	800185e <__aeabi_dmul+0x86>
 8001b22:	465b      	mov	r3, fp
 8001b24:	9701      	str	r7, [sp, #4]
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d000      	beq.n	8001b2c <__aeabi_dmul+0x354>
 8001b2a:	e6ad      	b.n	8001888 <__aeabi_dmul+0xb0>
 8001b2c:	e6c3      	b.n	80018b6 <__aeabi_dmul+0xde>
 8001b2e:	4a0d      	ldr	r2, [pc, #52]	; (8001b64 <__aeabi_dmul+0x38c>)
 8001b30:	2003      	movs	r0, #3
 8001b32:	4694      	mov	ip, r2
 8001b34:	4463      	add	r3, ip
 8001b36:	464a      	mov	r2, r9
 8001b38:	9300      	str	r3, [sp, #0]
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	431a      	orrs	r2, r3
 8001b3e:	4691      	mov	r9, r2
 8001b40:	4652      	mov	r2, sl
 8001b42:	e68c      	b.n	800185e <__aeabi_dmul+0x86>
 8001b44:	220c      	movs	r2, #12
 8001b46:	9300      	str	r3, [sp, #0]
 8001b48:	2303      	movs	r3, #3
 8001b4a:	0005      	movs	r5, r0
 8001b4c:	4691      	mov	r9, r2
 8001b4e:	469b      	mov	fp, r3
 8001b50:	e666      	b.n	8001820 <__aeabi_dmul+0x48>
 8001b52:	2304      	movs	r3, #4
 8001b54:	4699      	mov	r9, r3
 8001b56:	2300      	movs	r3, #0
 8001b58:	9300      	str	r3, [sp, #0]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	2400      	movs	r4, #0
 8001b5e:	469b      	mov	fp, r3
 8001b60:	e65e      	b.n	8001820 <__aeabi_dmul+0x48>
 8001b62:	46c0      	nop			; (mov r8, r8)
 8001b64:	000007ff 	.word	0x000007ff
 8001b68:	fffffc01 	.word	0xfffffc01
 8001b6c:	0800a040 	.word	0x0800a040
 8001b70:	000003ff 	.word	0x000003ff
 8001b74:	feffffff 	.word	0xfeffffff
 8001b78:	000007fe 	.word	0x000007fe
 8001b7c:	fffffc0d 	.word	0xfffffc0d
 8001b80:	4649      	mov	r1, r9
 8001b82:	2301      	movs	r3, #1
 8001b84:	4319      	orrs	r1, r3
 8001b86:	4689      	mov	r9, r1
 8001b88:	2600      	movs	r6, #0
 8001b8a:	2001      	movs	r0, #1
 8001b8c:	e667      	b.n	800185e <__aeabi_dmul+0x86>
 8001b8e:	2300      	movs	r3, #0
 8001b90:	2480      	movs	r4, #128	; 0x80
 8001b92:	2500      	movs	r5, #0
 8001b94:	4a43      	ldr	r2, [pc, #268]	; (8001ca4 <__aeabi_dmul+0x4cc>)
 8001b96:	9301      	str	r3, [sp, #4]
 8001b98:	0324      	lsls	r4, r4, #12
 8001b9a:	e67e      	b.n	800189a <__aeabi_dmul+0xc2>
 8001b9c:	2001      	movs	r0, #1
 8001b9e:	1a40      	subs	r0, r0, r1
 8001ba0:	2838      	cmp	r0, #56	; 0x38
 8001ba2:	dd00      	ble.n	8001ba6 <__aeabi_dmul+0x3ce>
 8001ba4:	e676      	b.n	8001894 <__aeabi_dmul+0xbc>
 8001ba6:	281f      	cmp	r0, #31
 8001ba8:	dd5b      	ble.n	8001c62 <__aeabi_dmul+0x48a>
 8001baa:	221f      	movs	r2, #31
 8001bac:	0023      	movs	r3, r4
 8001bae:	4252      	negs	r2, r2
 8001bb0:	1a51      	subs	r1, r2, r1
 8001bb2:	40cb      	lsrs	r3, r1
 8001bb4:	0019      	movs	r1, r3
 8001bb6:	2820      	cmp	r0, #32
 8001bb8:	d003      	beq.n	8001bc2 <__aeabi_dmul+0x3ea>
 8001bba:	4a3b      	ldr	r2, [pc, #236]	; (8001ca8 <__aeabi_dmul+0x4d0>)
 8001bbc:	4462      	add	r2, ip
 8001bbe:	4094      	lsls	r4, r2
 8001bc0:	4325      	orrs	r5, r4
 8001bc2:	1e6a      	subs	r2, r5, #1
 8001bc4:	4195      	sbcs	r5, r2
 8001bc6:	002a      	movs	r2, r5
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	2107      	movs	r1, #7
 8001bcc:	000d      	movs	r5, r1
 8001bce:	2400      	movs	r4, #0
 8001bd0:	4015      	ands	r5, r2
 8001bd2:	4211      	tst	r1, r2
 8001bd4:	d05b      	beq.n	8001c8e <__aeabi_dmul+0x4b6>
 8001bd6:	210f      	movs	r1, #15
 8001bd8:	2400      	movs	r4, #0
 8001bda:	4011      	ands	r1, r2
 8001bdc:	2904      	cmp	r1, #4
 8001bde:	d053      	beq.n	8001c88 <__aeabi_dmul+0x4b0>
 8001be0:	1d11      	adds	r1, r2, #4
 8001be2:	4291      	cmp	r1, r2
 8001be4:	4192      	sbcs	r2, r2
 8001be6:	4252      	negs	r2, r2
 8001be8:	18a4      	adds	r4, r4, r2
 8001bea:	000a      	movs	r2, r1
 8001bec:	0223      	lsls	r3, r4, #8
 8001bee:	d54b      	bpl.n	8001c88 <__aeabi_dmul+0x4b0>
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	2400      	movs	r4, #0
 8001bf4:	2500      	movs	r5, #0
 8001bf6:	e650      	b.n	800189a <__aeabi_dmul+0xc2>
 8001bf8:	2380      	movs	r3, #128	; 0x80
 8001bfa:	031b      	lsls	r3, r3, #12
 8001bfc:	421c      	tst	r4, r3
 8001bfe:	d009      	beq.n	8001c14 <__aeabi_dmul+0x43c>
 8001c00:	421e      	tst	r6, r3
 8001c02:	d107      	bne.n	8001c14 <__aeabi_dmul+0x43c>
 8001c04:	4333      	orrs	r3, r6
 8001c06:	031c      	lsls	r4, r3, #12
 8001c08:	4643      	mov	r3, r8
 8001c0a:	0015      	movs	r5, r2
 8001c0c:	0b24      	lsrs	r4, r4, #12
 8001c0e:	4a25      	ldr	r2, [pc, #148]	; (8001ca4 <__aeabi_dmul+0x4cc>)
 8001c10:	9301      	str	r3, [sp, #4]
 8001c12:	e642      	b.n	800189a <__aeabi_dmul+0xc2>
 8001c14:	2280      	movs	r2, #128	; 0x80
 8001c16:	0312      	lsls	r2, r2, #12
 8001c18:	4314      	orrs	r4, r2
 8001c1a:	0324      	lsls	r4, r4, #12
 8001c1c:	4a21      	ldr	r2, [pc, #132]	; (8001ca4 <__aeabi_dmul+0x4cc>)
 8001c1e:	0b24      	lsrs	r4, r4, #12
 8001c20:	9701      	str	r7, [sp, #4]
 8001c22:	e63a      	b.n	800189a <__aeabi_dmul+0xc2>
 8001c24:	f000 fd08 	bl	8002638 <__clzsi2>
 8001c28:	0001      	movs	r1, r0
 8001c2a:	0002      	movs	r2, r0
 8001c2c:	3115      	adds	r1, #21
 8001c2e:	3220      	adds	r2, #32
 8001c30:	291c      	cmp	r1, #28
 8001c32:	dc00      	bgt.n	8001c36 <__aeabi_dmul+0x45e>
 8001c34:	e74b      	b.n	8001ace <__aeabi_dmul+0x2f6>
 8001c36:	0034      	movs	r4, r6
 8001c38:	3808      	subs	r0, #8
 8001c3a:	2500      	movs	r5, #0
 8001c3c:	4084      	lsls	r4, r0
 8001c3e:	e750      	b.n	8001ae2 <__aeabi_dmul+0x30a>
 8001c40:	f000 fcfa 	bl	8002638 <__clzsi2>
 8001c44:	0003      	movs	r3, r0
 8001c46:	001a      	movs	r2, r3
 8001c48:	3215      	adds	r2, #21
 8001c4a:	3020      	adds	r0, #32
 8001c4c:	2a1c      	cmp	r2, #28
 8001c4e:	dc00      	bgt.n	8001c52 <__aeabi_dmul+0x47a>
 8001c50:	e71e      	b.n	8001a90 <__aeabi_dmul+0x2b8>
 8001c52:	4656      	mov	r6, sl
 8001c54:	3b08      	subs	r3, #8
 8001c56:	2200      	movs	r2, #0
 8001c58:	409e      	lsls	r6, r3
 8001c5a:	e723      	b.n	8001aa4 <__aeabi_dmul+0x2cc>
 8001c5c:	9b00      	ldr	r3, [sp, #0]
 8001c5e:	469c      	mov	ip, r3
 8001c60:	e6e6      	b.n	8001a30 <__aeabi_dmul+0x258>
 8001c62:	4912      	ldr	r1, [pc, #72]	; (8001cac <__aeabi_dmul+0x4d4>)
 8001c64:	0022      	movs	r2, r4
 8001c66:	4461      	add	r1, ip
 8001c68:	002e      	movs	r6, r5
 8001c6a:	408d      	lsls	r5, r1
 8001c6c:	408a      	lsls	r2, r1
 8001c6e:	40c6      	lsrs	r6, r0
 8001c70:	1e69      	subs	r1, r5, #1
 8001c72:	418d      	sbcs	r5, r1
 8001c74:	4332      	orrs	r2, r6
 8001c76:	432a      	orrs	r2, r5
 8001c78:	40c4      	lsrs	r4, r0
 8001c7a:	0753      	lsls	r3, r2, #29
 8001c7c:	d0b6      	beq.n	8001bec <__aeabi_dmul+0x414>
 8001c7e:	210f      	movs	r1, #15
 8001c80:	4011      	ands	r1, r2
 8001c82:	2904      	cmp	r1, #4
 8001c84:	d1ac      	bne.n	8001be0 <__aeabi_dmul+0x408>
 8001c86:	e7b1      	b.n	8001bec <__aeabi_dmul+0x414>
 8001c88:	0765      	lsls	r5, r4, #29
 8001c8a:	0264      	lsls	r4, r4, #9
 8001c8c:	0b24      	lsrs	r4, r4, #12
 8001c8e:	08d2      	lsrs	r2, r2, #3
 8001c90:	4315      	orrs	r5, r2
 8001c92:	2200      	movs	r2, #0
 8001c94:	e601      	b.n	800189a <__aeabi_dmul+0xc2>
 8001c96:	2280      	movs	r2, #128	; 0x80
 8001c98:	0312      	lsls	r2, r2, #12
 8001c9a:	4314      	orrs	r4, r2
 8001c9c:	0324      	lsls	r4, r4, #12
 8001c9e:	4a01      	ldr	r2, [pc, #4]	; (8001ca4 <__aeabi_dmul+0x4cc>)
 8001ca0:	0b24      	lsrs	r4, r4, #12
 8001ca2:	e5fa      	b.n	800189a <__aeabi_dmul+0xc2>
 8001ca4:	000007ff 	.word	0x000007ff
 8001ca8:	0000043e 	.word	0x0000043e
 8001cac:	0000041e 	.word	0x0000041e

08001cb0 <__aeabi_dsub>:
 8001cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cb2:	4657      	mov	r7, sl
 8001cb4:	464e      	mov	r6, r9
 8001cb6:	4645      	mov	r5, r8
 8001cb8:	46de      	mov	lr, fp
 8001cba:	b5e0      	push	{r5, r6, r7, lr}
 8001cbc:	001e      	movs	r6, r3
 8001cbe:	0017      	movs	r7, r2
 8001cc0:	004a      	lsls	r2, r1, #1
 8001cc2:	030b      	lsls	r3, r1, #12
 8001cc4:	0d52      	lsrs	r2, r2, #21
 8001cc6:	0a5b      	lsrs	r3, r3, #9
 8001cc8:	4690      	mov	r8, r2
 8001cca:	0f42      	lsrs	r2, r0, #29
 8001ccc:	431a      	orrs	r2, r3
 8001cce:	0fcd      	lsrs	r5, r1, #31
 8001cd0:	4ccd      	ldr	r4, [pc, #820]	; (8002008 <__aeabi_dsub+0x358>)
 8001cd2:	0331      	lsls	r1, r6, #12
 8001cd4:	00c3      	lsls	r3, r0, #3
 8001cd6:	4694      	mov	ip, r2
 8001cd8:	0070      	lsls	r0, r6, #1
 8001cda:	0f7a      	lsrs	r2, r7, #29
 8001cdc:	0a49      	lsrs	r1, r1, #9
 8001cde:	00ff      	lsls	r7, r7, #3
 8001ce0:	469a      	mov	sl, r3
 8001ce2:	46b9      	mov	r9, r7
 8001ce4:	0d40      	lsrs	r0, r0, #21
 8001ce6:	0ff6      	lsrs	r6, r6, #31
 8001ce8:	4311      	orrs	r1, r2
 8001cea:	42a0      	cmp	r0, r4
 8001cec:	d100      	bne.n	8001cf0 <__aeabi_dsub+0x40>
 8001cee:	e0b1      	b.n	8001e54 <__aeabi_dsub+0x1a4>
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	4056      	eors	r6, r2
 8001cf4:	46b3      	mov	fp, r6
 8001cf6:	42b5      	cmp	r5, r6
 8001cf8:	d100      	bne.n	8001cfc <__aeabi_dsub+0x4c>
 8001cfa:	e088      	b.n	8001e0e <__aeabi_dsub+0x15e>
 8001cfc:	4642      	mov	r2, r8
 8001cfe:	1a12      	subs	r2, r2, r0
 8001d00:	2a00      	cmp	r2, #0
 8001d02:	dc00      	bgt.n	8001d06 <__aeabi_dsub+0x56>
 8001d04:	e0ae      	b.n	8001e64 <__aeabi_dsub+0x1b4>
 8001d06:	2800      	cmp	r0, #0
 8001d08:	d100      	bne.n	8001d0c <__aeabi_dsub+0x5c>
 8001d0a:	e0c1      	b.n	8001e90 <__aeabi_dsub+0x1e0>
 8001d0c:	48be      	ldr	r0, [pc, #760]	; (8002008 <__aeabi_dsub+0x358>)
 8001d0e:	4580      	cmp	r8, r0
 8001d10:	d100      	bne.n	8001d14 <__aeabi_dsub+0x64>
 8001d12:	e151      	b.n	8001fb8 <__aeabi_dsub+0x308>
 8001d14:	2080      	movs	r0, #128	; 0x80
 8001d16:	0400      	lsls	r0, r0, #16
 8001d18:	4301      	orrs	r1, r0
 8001d1a:	2a38      	cmp	r2, #56	; 0x38
 8001d1c:	dd00      	ble.n	8001d20 <__aeabi_dsub+0x70>
 8001d1e:	e17b      	b.n	8002018 <__aeabi_dsub+0x368>
 8001d20:	2a1f      	cmp	r2, #31
 8001d22:	dd00      	ble.n	8001d26 <__aeabi_dsub+0x76>
 8001d24:	e1ee      	b.n	8002104 <__aeabi_dsub+0x454>
 8001d26:	2020      	movs	r0, #32
 8001d28:	003e      	movs	r6, r7
 8001d2a:	1a80      	subs	r0, r0, r2
 8001d2c:	000c      	movs	r4, r1
 8001d2e:	40d6      	lsrs	r6, r2
 8001d30:	40d1      	lsrs	r1, r2
 8001d32:	4087      	lsls	r7, r0
 8001d34:	4662      	mov	r2, ip
 8001d36:	4084      	lsls	r4, r0
 8001d38:	1a52      	subs	r2, r2, r1
 8001d3a:	1e78      	subs	r0, r7, #1
 8001d3c:	4187      	sbcs	r7, r0
 8001d3e:	4694      	mov	ip, r2
 8001d40:	4334      	orrs	r4, r6
 8001d42:	4327      	orrs	r7, r4
 8001d44:	1bdc      	subs	r4, r3, r7
 8001d46:	42a3      	cmp	r3, r4
 8001d48:	419b      	sbcs	r3, r3
 8001d4a:	4662      	mov	r2, ip
 8001d4c:	425b      	negs	r3, r3
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	4699      	mov	r9, r3
 8001d52:	464b      	mov	r3, r9
 8001d54:	021b      	lsls	r3, r3, #8
 8001d56:	d400      	bmi.n	8001d5a <__aeabi_dsub+0xaa>
 8001d58:	e118      	b.n	8001f8c <__aeabi_dsub+0x2dc>
 8001d5a:	464b      	mov	r3, r9
 8001d5c:	0258      	lsls	r0, r3, #9
 8001d5e:	0a43      	lsrs	r3, r0, #9
 8001d60:	4699      	mov	r9, r3
 8001d62:	464b      	mov	r3, r9
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d100      	bne.n	8001d6a <__aeabi_dsub+0xba>
 8001d68:	e137      	b.n	8001fda <__aeabi_dsub+0x32a>
 8001d6a:	4648      	mov	r0, r9
 8001d6c:	f000 fc64 	bl	8002638 <__clzsi2>
 8001d70:	0001      	movs	r1, r0
 8001d72:	3908      	subs	r1, #8
 8001d74:	2320      	movs	r3, #32
 8001d76:	0022      	movs	r2, r4
 8001d78:	4648      	mov	r0, r9
 8001d7a:	1a5b      	subs	r3, r3, r1
 8001d7c:	40da      	lsrs	r2, r3
 8001d7e:	4088      	lsls	r0, r1
 8001d80:	408c      	lsls	r4, r1
 8001d82:	4643      	mov	r3, r8
 8001d84:	4310      	orrs	r0, r2
 8001d86:	4588      	cmp	r8, r1
 8001d88:	dd00      	ble.n	8001d8c <__aeabi_dsub+0xdc>
 8001d8a:	e136      	b.n	8001ffa <__aeabi_dsub+0x34a>
 8001d8c:	1ac9      	subs	r1, r1, r3
 8001d8e:	1c4b      	adds	r3, r1, #1
 8001d90:	2b1f      	cmp	r3, #31
 8001d92:	dd00      	ble.n	8001d96 <__aeabi_dsub+0xe6>
 8001d94:	e0ea      	b.n	8001f6c <__aeabi_dsub+0x2bc>
 8001d96:	2220      	movs	r2, #32
 8001d98:	0026      	movs	r6, r4
 8001d9a:	1ad2      	subs	r2, r2, r3
 8001d9c:	0001      	movs	r1, r0
 8001d9e:	4094      	lsls	r4, r2
 8001da0:	40de      	lsrs	r6, r3
 8001da2:	40d8      	lsrs	r0, r3
 8001da4:	2300      	movs	r3, #0
 8001da6:	4091      	lsls	r1, r2
 8001da8:	1e62      	subs	r2, r4, #1
 8001daa:	4194      	sbcs	r4, r2
 8001dac:	4681      	mov	r9, r0
 8001dae:	4698      	mov	r8, r3
 8001db0:	4331      	orrs	r1, r6
 8001db2:	430c      	orrs	r4, r1
 8001db4:	0763      	lsls	r3, r4, #29
 8001db6:	d009      	beq.n	8001dcc <__aeabi_dsub+0x11c>
 8001db8:	230f      	movs	r3, #15
 8001dba:	4023      	ands	r3, r4
 8001dbc:	2b04      	cmp	r3, #4
 8001dbe:	d005      	beq.n	8001dcc <__aeabi_dsub+0x11c>
 8001dc0:	1d23      	adds	r3, r4, #4
 8001dc2:	42a3      	cmp	r3, r4
 8001dc4:	41a4      	sbcs	r4, r4
 8001dc6:	4264      	negs	r4, r4
 8001dc8:	44a1      	add	r9, r4
 8001dca:	001c      	movs	r4, r3
 8001dcc:	464b      	mov	r3, r9
 8001dce:	021b      	lsls	r3, r3, #8
 8001dd0:	d400      	bmi.n	8001dd4 <__aeabi_dsub+0x124>
 8001dd2:	e0de      	b.n	8001f92 <__aeabi_dsub+0x2e2>
 8001dd4:	4641      	mov	r1, r8
 8001dd6:	4b8c      	ldr	r3, [pc, #560]	; (8002008 <__aeabi_dsub+0x358>)
 8001dd8:	3101      	adds	r1, #1
 8001dda:	4299      	cmp	r1, r3
 8001ddc:	d100      	bne.n	8001de0 <__aeabi_dsub+0x130>
 8001dde:	e0e7      	b.n	8001fb0 <__aeabi_dsub+0x300>
 8001de0:	464b      	mov	r3, r9
 8001de2:	488a      	ldr	r0, [pc, #552]	; (800200c <__aeabi_dsub+0x35c>)
 8001de4:	08e4      	lsrs	r4, r4, #3
 8001de6:	4003      	ands	r3, r0
 8001de8:	0018      	movs	r0, r3
 8001dea:	0549      	lsls	r1, r1, #21
 8001dec:	075b      	lsls	r3, r3, #29
 8001dee:	0240      	lsls	r0, r0, #9
 8001df0:	4323      	orrs	r3, r4
 8001df2:	0d4a      	lsrs	r2, r1, #21
 8001df4:	0b04      	lsrs	r4, r0, #12
 8001df6:	0512      	lsls	r2, r2, #20
 8001df8:	07ed      	lsls	r5, r5, #31
 8001dfa:	4322      	orrs	r2, r4
 8001dfc:	432a      	orrs	r2, r5
 8001dfe:	0018      	movs	r0, r3
 8001e00:	0011      	movs	r1, r2
 8001e02:	bcf0      	pop	{r4, r5, r6, r7}
 8001e04:	46bb      	mov	fp, r7
 8001e06:	46b2      	mov	sl, r6
 8001e08:	46a9      	mov	r9, r5
 8001e0a:	46a0      	mov	r8, r4
 8001e0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e0e:	4642      	mov	r2, r8
 8001e10:	1a12      	subs	r2, r2, r0
 8001e12:	2a00      	cmp	r2, #0
 8001e14:	dd52      	ble.n	8001ebc <__aeabi_dsub+0x20c>
 8001e16:	2800      	cmp	r0, #0
 8001e18:	d100      	bne.n	8001e1c <__aeabi_dsub+0x16c>
 8001e1a:	e09c      	b.n	8001f56 <__aeabi_dsub+0x2a6>
 8001e1c:	45a0      	cmp	r8, r4
 8001e1e:	d100      	bne.n	8001e22 <__aeabi_dsub+0x172>
 8001e20:	e0ca      	b.n	8001fb8 <__aeabi_dsub+0x308>
 8001e22:	2080      	movs	r0, #128	; 0x80
 8001e24:	0400      	lsls	r0, r0, #16
 8001e26:	4301      	orrs	r1, r0
 8001e28:	2a38      	cmp	r2, #56	; 0x38
 8001e2a:	dd00      	ble.n	8001e2e <__aeabi_dsub+0x17e>
 8001e2c:	e149      	b.n	80020c2 <__aeabi_dsub+0x412>
 8001e2e:	2a1f      	cmp	r2, #31
 8001e30:	dc00      	bgt.n	8001e34 <__aeabi_dsub+0x184>
 8001e32:	e197      	b.n	8002164 <__aeabi_dsub+0x4b4>
 8001e34:	0010      	movs	r0, r2
 8001e36:	000e      	movs	r6, r1
 8001e38:	3820      	subs	r0, #32
 8001e3a:	40c6      	lsrs	r6, r0
 8001e3c:	2a20      	cmp	r2, #32
 8001e3e:	d004      	beq.n	8001e4a <__aeabi_dsub+0x19a>
 8001e40:	2040      	movs	r0, #64	; 0x40
 8001e42:	1a82      	subs	r2, r0, r2
 8001e44:	4091      	lsls	r1, r2
 8001e46:	430f      	orrs	r7, r1
 8001e48:	46b9      	mov	r9, r7
 8001e4a:	464c      	mov	r4, r9
 8001e4c:	1e62      	subs	r2, r4, #1
 8001e4e:	4194      	sbcs	r4, r2
 8001e50:	4334      	orrs	r4, r6
 8001e52:	e13a      	b.n	80020ca <__aeabi_dsub+0x41a>
 8001e54:	000a      	movs	r2, r1
 8001e56:	433a      	orrs	r2, r7
 8001e58:	d028      	beq.n	8001eac <__aeabi_dsub+0x1fc>
 8001e5a:	46b3      	mov	fp, r6
 8001e5c:	42b5      	cmp	r5, r6
 8001e5e:	d02b      	beq.n	8001eb8 <__aeabi_dsub+0x208>
 8001e60:	4a6b      	ldr	r2, [pc, #428]	; (8002010 <__aeabi_dsub+0x360>)
 8001e62:	4442      	add	r2, r8
 8001e64:	2a00      	cmp	r2, #0
 8001e66:	d05d      	beq.n	8001f24 <__aeabi_dsub+0x274>
 8001e68:	4642      	mov	r2, r8
 8001e6a:	4644      	mov	r4, r8
 8001e6c:	1a82      	subs	r2, r0, r2
 8001e6e:	2c00      	cmp	r4, #0
 8001e70:	d000      	beq.n	8001e74 <__aeabi_dsub+0x1c4>
 8001e72:	e0f5      	b.n	8002060 <__aeabi_dsub+0x3b0>
 8001e74:	4665      	mov	r5, ip
 8001e76:	431d      	orrs	r5, r3
 8001e78:	d100      	bne.n	8001e7c <__aeabi_dsub+0x1cc>
 8001e7a:	e19c      	b.n	80021b6 <__aeabi_dsub+0x506>
 8001e7c:	1e55      	subs	r5, r2, #1
 8001e7e:	2a01      	cmp	r2, #1
 8001e80:	d100      	bne.n	8001e84 <__aeabi_dsub+0x1d4>
 8001e82:	e1fb      	b.n	800227c <__aeabi_dsub+0x5cc>
 8001e84:	4c60      	ldr	r4, [pc, #384]	; (8002008 <__aeabi_dsub+0x358>)
 8001e86:	42a2      	cmp	r2, r4
 8001e88:	d100      	bne.n	8001e8c <__aeabi_dsub+0x1dc>
 8001e8a:	e1bd      	b.n	8002208 <__aeabi_dsub+0x558>
 8001e8c:	002a      	movs	r2, r5
 8001e8e:	e0f0      	b.n	8002072 <__aeabi_dsub+0x3c2>
 8001e90:	0008      	movs	r0, r1
 8001e92:	4338      	orrs	r0, r7
 8001e94:	d100      	bne.n	8001e98 <__aeabi_dsub+0x1e8>
 8001e96:	e0c3      	b.n	8002020 <__aeabi_dsub+0x370>
 8001e98:	1e50      	subs	r0, r2, #1
 8001e9a:	2a01      	cmp	r2, #1
 8001e9c:	d100      	bne.n	8001ea0 <__aeabi_dsub+0x1f0>
 8001e9e:	e1a8      	b.n	80021f2 <__aeabi_dsub+0x542>
 8001ea0:	4c59      	ldr	r4, [pc, #356]	; (8002008 <__aeabi_dsub+0x358>)
 8001ea2:	42a2      	cmp	r2, r4
 8001ea4:	d100      	bne.n	8001ea8 <__aeabi_dsub+0x1f8>
 8001ea6:	e087      	b.n	8001fb8 <__aeabi_dsub+0x308>
 8001ea8:	0002      	movs	r2, r0
 8001eaa:	e736      	b.n	8001d1a <__aeabi_dsub+0x6a>
 8001eac:	2201      	movs	r2, #1
 8001eae:	4056      	eors	r6, r2
 8001eb0:	46b3      	mov	fp, r6
 8001eb2:	42b5      	cmp	r5, r6
 8001eb4:	d000      	beq.n	8001eb8 <__aeabi_dsub+0x208>
 8001eb6:	e721      	b.n	8001cfc <__aeabi_dsub+0x4c>
 8001eb8:	4a55      	ldr	r2, [pc, #340]	; (8002010 <__aeabi_dsub+0x360>)
 8001eba:	4442      	add	r2, r8
 8001ebc:	2a00      	cmp	r2, #0
 8001ebe:	d100      	bne.n	8001ec2 <__aeabi_dsub+0x212>
 8001ec0:	e0b5      	b.n	800202e <__aeabi_dsub+0x37e>
 8001ec2:	4642      	mov	r2, r8
 8001ec4:	4644      	mov	r4, r8
 8001ec6:	1a82      	subs	r2, r0, r2
 8001ec8:	2c00      	cmp	r4, #0
 8001eca:	d100      	bne.n	8001ece <__aeabi_dsub+0x21e>
 8001ecc:	e138      	b.n	8002140 <__aeabi_dsub+0x490>
 8001ece:	4e4e      	ldr	r6, [pc, #312]	; (8002008 <__aeabi_dsub+0x358>)
 8001ed0:	42b0      	cmp	r0, r6
 8001ed2:	d100      	bne.n	8001ed6 <__aeabi_dsub+0x226>
 8001ed4:	e1de      	b.n	8002294 <__aeabi_dsub+0x5e4>
 8001ed6:	2680      	movs	r6, #128	; 0x80
 8001ed8:	4664      	mov	r4, ip
 8001eda:	0436      	lsls	r6, r6, #16
 8001edc:	4334      	orrs	r4, r6
 8001ede:	46a4      	mov	ip, r4
 8001ee0:	2a38      	cmp	r2, #56	; 0x38
 8001ee2:	dd00      	ble.n	8001ee6 <__aeabi_dsub+0x236>
 8001ee4:	e196      	b.n	8002214 <__aeabi_dsub+0x564>
 8001ee6:	2a1f      	cmp	r2, #31
 8001ee8:	dd00      	ble.n	8001eec <__aeabi_dsub+0x23c>
 8001eea:	e224      	b.n	8002336 <__aeabi_dsub+0x686>
 8001eec:	2620      	movs	r6, #32
 8001eee:	1ab4      	subs	r4, r6, r2
 8001ef0:	46a2      	mov	sl, r4
 8001ef2:	4664      	mov	r4, ip
 8001ef4:	4656      	mov	r6, sl
 8001ef6:	40b4      	lsls	r4, r6
 8001ef8:	46a1      	mov	r9, r4
 8001efa:	001c      	movs	r4, r3
 8001efc:	464e      	mov	r6, r9
 8001efe:	40d4      	lsrs	r4, r2
 8001f00:	4326      	orrs	r6, r4
 8001f02:	0034      	movs	r4, r6
 8001f04:	4656      	mov	r6, sl
 8001f06:	40b3      	lsls	r3, r6
 8001f08:	1e5e      	subs	r6, r3, #1
 8001f0a:	41b3      	sbcs	r3, r6
 8001f0c:	431c      	orrs	r4, r3
 8001f0e:	4663      	mov	r3, ip
 8001f10:	40d3      	lsrs	r3, r2
 8001f12:	18c9      	adds	r1, r1, r3
 8001f14:	19e4      	adds	r4, r4, r7
 8001f16:	42bc      	cmp	r4, r7
 8001f18:	41bf      	sbcs	r7, r7
 8001f1a:	427f      	negs	r7, r7
 8001f1c:	46b9      	mov	r9, r7
 8001f1e:	4680      	mov	r8, r0
 8001f20:	4489      	add	r9, r1
 8001f22:	e0d8      	b.n	80020d6 <__aeabi_dsub+0x426>
 8001f24:	4640      	mov	r0, r8
 8001f26:	4c3b      	ldr	r4, [pc, #236]	; (8002014 <__aeabi_dsub+0x364>)
 8001f28:	3001      	adds	r0, #1
 8001f2a:	4220      	tst	r0, r4
 8001f2c:	d000      	beq.n	8001f30 <__aeabi_dsub+0x280>
 8001f2e:	e0b4      	b.n	800209a <__aeabi_dsub+0x3ea>
 8001f30:	4640      	mov	r0, r8
 8001f32:	2800      	cmp	r0, #0
 8001f34:	d000      	beq.n	8001f38 <__aeabi_dsub+0x288>
 8001f36:	e144      	b.n	80021c2 <__aeabi_dsub+0x512>
 8001f38:	4660      	mov	r0, ip
 8001f3a:	4318      	orrs	r0, r3
 8001f3c:	d100      	bne.n	8001f40 <__aeabi_dsub+0x290>
 8001f3e:	e190      	b.n	8002262 <__aeabi_dsub+0x5b2>
 8001f40:	0008      	movs	r0, r1
 8001f42:	4338      	orrs	r0, r7
 8001f44:	d000      	beq.n	8001f48 <__aeabi_dsub+0x298>
 8001f46:	e1aa      	b.n	800229e <__aeabi_dsub+0x5ee>
 8001f48:	4661      	mov	r1, ip
 8001f4a:	08db      	lsrs	r3, r3, #3
 8001f4c:	0749      	lsls	r1, r1, #29
 8001f4e:	430b      	orrs	r3, r1
 8001f50:	4661      	mov	r1, ip
 8001f52:	08cc      	lsrs	r4, r1, #3
 8001f54:	e027      	b.n	8001fa6 <__aeabi_dsub+0x2f6>
 8001f56:	0008      	movs	r0, r1
 8001f58:	4338      	orrs	r0, r7
 8001f5a:	d061      	beq.n	8002020 <__aeabi_dsub+0x370>
 8001f5c:	1e50      	subs	r0, r2, #1
 8001f5e:	2a01      	cmp	r2, #1
 8001f60:	d100      	bne.n	8001f64 <__aeabi_dsub+0x2b4>
 8001f62:	e139      	b.n	80021d8 <__aeabi_dsub+0x528>
 8001f64:	42a2      	cmp	r2, r4
 8001f66:	d027      	beq.n	8001fb8 <__aeabi_dsub+0x308>
 8001f68:	0002      	movs	r2, r0
 8001f6a:	e75d      	b.n	8001e28 <__aeabi_dsub+0x178>
 8001f6c:	0002      	movs	r2, r0
 8001f6e:	391f      	subs	r1, #31
 8001f70:	40ca      	lsrs	r2, r1
 8001f72:	0011      	movs	r1, r2
 8001f74:	2b20      	cmp	r3, #32
 8001f76:	d003      	beq.n	8001f80 <__aeabi_dsub+0x2d0>
 8001f78:	2240      	movs	r2, #64	; 0x40
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	4098      	lsls	r0, r3
 8001f7e:	4304      	orrs	r4, r0
 8001f80:	1e63      	subs	r3, r4, #1
 8001f82:	419c      	sbcs	r4, r3
 8001f84:	2300      	movs	r3, #0
 8001f86:	4699      	mov	r9, r3
 8001f88:	4698      	mov	r8, r3
 8001f8a:	430c      	orrs	r4, r1
 8001f8c:	0763      	lsls	r3, r4, #29
 8001f8e:	d000      	beq.n	8001f92 <__aeabi_dsub+0x2e2>
 8001f90:	e712      	b.n	8001db8 <__aeabi_dsub+0x108>
 8001f92:	464b      	mov	r3, r9
 8001f94:	464a      	mov	r2, r9
 8001f96:	08e4      	lsrs	r4, r4, #3
 8001f98:	075b      	lsls	r3, r3, #29
 8001f9a:	4323      	orrs	r3, r4
 8001f9c:	08d4      	lsrs	r4, r2, #3
 8001f9e:	4642      	mov	r2, r8
 8001fa0:	4919      	ldr	r1, [pc, #100]	; (8002008 <__aeabi_dsub+0x358>)
 8001fa2:	428a      	cmp	r2, r1
 8001fa4:	d00e      	beq.n	8001fc4 <__aeabi_dsub+0x314>
 8001fa6:	0324      	lsls	r4, r4, #12
 8001fa8:	0552      	lsls	r2, r2, #21
 8001faa:	0b24      	lsrs	r4, r4, #12
 8001fac:	0d52      	lsrs	r2, r2, #21
 8001fae:	e722      	b.n	8001df6 <__aeabi_dsub+0x146>
 8001fb0:	000a      	movs	r2, r1
 8001fb2:	2400      	movs	r4, #0
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	e71e      	b.n	8001df6 <__aeabi_dsub+0x146>
 8001fb8:	08db      	lsrs	r3, r3, #3
 8001fba:	4662      	mov	r2, ip
 8001fbc:	0752      	lsls	r2, r2, #29
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	4662      	mov	r2, ip
 8001fc2:	08d4      	lsrs	r4, r2, #3
 8001fc4:	001a      	movs	r2, r3
 8001fc6:	4322      	orrs	r2, r4
 8001fc8:	d100      	bne.n	8001fcc <__aeabi_dsub+0x31c>
 8001fca:	e1fc      	b.n	80023c6 <__aeabi_dsub+0x716>
 8001fcc:	2280      	movs	r2, #128	; 0x80
 8001fce:	0312      	lsls	r2, r2, #12
 8001fd0:	4314      	orrs	r4, r2
 8001fd2:	0324      	lsls	r4, r4, #12
 8001fd4:	4a0c      	ldr	r2, [pc, #48]	; (8002008 <__aeabi_dsub+0x358>)
 8001fd6:	0b24      	lsrs	r4, r4, #12
 8001fd8:	e70d      	b.n	8001df6 <__aeabi_dsub+0x146>
 8001fda:	0020      	movs	r0, r4
 8001fdc:	f000 fb2c 	bl	8002638 <__clzsi2>
 8001fe0:	0001      	movs	r1, r0
 8001fe2:	3118      	adds	r1, #24
 8001fe4:	291f      	cmp	r1, #31
 8001fe6:	dc00      	bgt.n	8001fea <__aeabi_dsub+0x33a>
 8001fe8:	e6c4      	b.n	8001d74 <__aeabi_dsub+0xc4>
 8001fea:	3808      	subs	r0, #8
 8001fec:	4084      	lsls	r4, r0
 8001fee:	4643      	mov	r3, r8
 8001ff0:	0020      	movs	r0, r4
 8001ff2:	2400      	movs	r4, #0
 8001ff4:	4588      	cmp	r8, r1
 8001ff6:	dc00      	bgt.n	8001ffa <__aeabi_dsub+0x34a>
 8001ff8:	e6c8      	b.n	8001d8c <__aeabi_dsub+0xdc>
 8001ffa:	4a04      	ldr	r2, [pc, #16]	; (800200c <__aeabi_dsub+0x35c>)
 8001ffc:	1a5b      	subs	r3, r3, r1
 8001ffe:	4010      	ands	r0, r2
 8002000:	4698      	mov	r8, r3
 8002002:	4681      	mov	r9, r0
 8002004:	e6d6      	b.n	8001db4 <__aeabi_dsub+0x104>
 8002006:	46c0      	nop			; (mov r8, r8)
 8002008:	000007ff 	.word	0x000007ff
 800200c:	ff7fffff 	.word	0xff7fffff
 8002010:	fffff801 	.word	0xfffff801
 8002014:	000007fe 	.word	0x000007fe
 8002018:	430f      	orrs	r7, r1
 800201a:	1e7a      	subs	r2, r7, #1
 800201c:	4197      	sbcs	r7, r2
 800201e:	e691      	b.n	8001d44 <__aeabi_dsub+0x94>
 8002020:	4661      	mov	r1, ip
 8002022:	08db      	lsrs	r3, r3, #3
 8002024:	0749      	lsls	r1, r1, #29
 8002026:	430b      	orrs	r3, r1
 8002028:	4661      	mov	r1, ip
 800202a:	08cc      	lsrs	r4, r1, #3
 800202c:	e7b8      	b.n	8001fa0 <__aeabi_dsub+0x2f0>
 800202e:	4640      	mov	r0, r8
 8002030:	4cd3      	ldr	r4, [pc, #844]	; (8002380 <__aeabi_dsub+0x6d0>)
 8002032:	3001      	adds	r0, #1
 8002034:	4220      	tst	r0, r4
 8002036:	d000      	beq.n	800203a <__aeabi_dsub+0x38a>
 8002038:	e0a2      	b.n	8002180 <__aeabi_dsub+0x4d0>
 800203a:	4640      	mov	r0, r8
 800203c:	2800      	cmp	r0, #0
 800203e:	d000      	beq.n	8002042 <__aeabi_dsub+0x392>
 8002040:	e101      	b.n	8002246 <__aeabi_dsub+0x596>
 8002042:	4660      	mov	r0, ip
 8002044:	4318      	orrs	r0, r3
 8002046:	d100      	bne.n	800204a <__aeabi_dsub+0x39a>
 8002048:	e15e      	b.n	8002308 <__aeabi_dsub+0x658>
 800204a:	0008      	movs	r0, r1
 800204c:	4338      	orrs	r0, r7
 800204e:	d000      	beq.n	8002052 <__aeabi_dsub+0x3a2>
 8002050:	e15f      	b.n	8002312 <__aeabi_dsub+0x662>
 8002052:	4661      	mov	r1, ip
 8002054:	08db      	lsrs	r3, r3, #3
 8002056:	0749      	lsls	r1, r1, #29
 8002058:	430b      	orrs	r3, r1
 800205a:	4661      	mov	r1, ip
 800205c:	08cc      	lsrs	r4, r1, #3
 800205e:	e7a2      	b.n	8001fa6 <__aeabi_dsub+0x2f6>
 8002060:	4dc8      	ldr	r5, [pc, #800]	; (8002384 <__aeabi_dsub+0x6d4>)
 8002062:	42a8      	cmp	r0, r5
 8002064:	d100      	bne.n	8002068 <__aeabi_dsub+0x3b8>
 8002066:	e0cf      	b.n	8002208 <__aeabi_dsub+0x558>
 8002068:	2580      	movs	r5, #128	; 0x80
 800206a:	4664      	mov	r4, ip
 800206c:	042d      	lsls	r5, r5, #16
 800206e:	432c      	orrs	r4, r5
 8002070:	46a4      	mov	ip, r4
 8002072:	2a38      	cmp	r2, #56	; 0x38
 8002074:	dc56      	bgt.n	8002124 <__aeabi_dsub+0x474>
 8002076:	2a1f      	cmp	r2, #31
 8002078:	dd00      	ble.n	800207c <__aeabi_dsub+0x3cc>
 800207a:	e0d1      	b.n	8002220 <__aeabi_dsub+0x570>
 800207c:	2520      	movs	r5, #32
 800207e:	001e      	movs	r6, r3
 8002080:	1aad      	subs	r5, r5, r2
 8002082:	4664      	mov	r4, ip
 8002084:	40ab      	lsls	r3, r5
 8002086:	40ac      	lsls	r4, r5
 8002088:	40d6      	lsrs	r6, r2
 800208a:	1e5d      	subs	r5, r3, #1
 800208c:	41ab      	sbcs	r3, r5
 800208e:	4334      	orrs	r4, r6
 8002090:	4323      	orrs	r3, r4
 8002092:	4664      	mov	r4, ip
 8002094:	40d4      	lsrs	r4, r2
 8002096:	1b09      	subs	r1, r1, r4
 8002098:	e049      	b.n	800212e <__aeabi_dsub+0x47e>
 800209a:	4660      	mov	r0, ip
 800209c:	1bdc      	subs	r4, r3, r7
 800209e:	1a46      	subs	r6, r0, r1
 80020a0:	42a3      	cmp	r3, r4
 80020a2:	4180      	sbcs	r0, r0
 80020a4:	4240      	negs	r0, r0
 80020a6:	4681      	mov	r9, r0
 80020a8:	0030      	movs	r0, r6
 80020aa:	464e      	mov	r6, r9
 80020ac:	1b80      	subs	r0, r0, r6
 80020ae:	4681      	mov	r9, r0
 80020b0:	0200      	lsls	r0, r0, #8
 80020b2:	d476      	bmi.n	80021a2 <__aeabi_dsub+0x4f2>
 80020b4:	464b      	mov	r3, r9
 80020b6:	4323      	orrs	r3, r4
 80020b8:	d000      	beq.n	80020bc <__aeabi_dsub+0x40c>
 80020ba:	e652      	b.n	8001d62 <__aeabi_dsub+0xb2>
 80020bc:	2400      	movs	r4, #0
 80020be:	2500      	movs	r5, #0
 80020c0:	e771      	b.n	8001fa6 <__aeabi_dsub+0x2f6>
 80020c2:	4339      	orrs	r1, r7
 80020c4:	000c      	movs	r4, r1
 80020c6:	1e62      	subs	r2, r4, #1
 80020c8:	4194      	sbcs	r4, r2
 80020ca:	18e4      	adds	r4, r4, r3
 80020cc:	429c      	cmp	r4, r3
 80020ce:	419b      	sbcs	r3, r3
 80020d0:	425b      	negs	r3, r3
 80020d2:	4463      	add	r3, ip
 80020d4:	4699      	mov	r9, r3
 80020d6:	464b      	mov	r3, r9
 80020d8:	021b      	lsls	r3, r3, #8
 80020da:	d400      	bmi.n	80020de <__aeabi_dsub+0x42e>
 80020dc:	e756      	b.n	8001f8c <__aeabi_dsub+0x2dc>
 80020de:	2301      	movs	r3, #1
 80020e0:	469c      	mov	ip, r3
 80020e2:	4ba8      	ldr	r3, [pc, #672]	; (8002384 <__aeabi_dsub+0x6d4>)
 80020e4:	44e0      	add	r8, ip
 80020e6:	4598      	cmp	r8, r3
 80020e8:	d038      	beq.n	800215c <__aeabi_dsub+0x4ac>
 80020ea:	464b      	mov	r3, r9
 80020ec:	48a6      	ldr	r0, [pc, #664]	; (8002388 <__aeabi_dsub+0x6d8>)
 80020ee:	2201      	movs	r2, #1
 80020f0:	4003      	ands	r3, r0
 80020f2:	0018      	movs	r0, r3
 80020f4:	0863      	lsrs	r3, r4, #1
 80020f6:	4014      	ands	r4, r2
 80020f8:	431c      	orrs	r4, r3
 80020fa:	07c3      	lsls	r3, r0, #31
 80020fc:	431c      	orrs	r4, r3
 80020fe:	0843      	lsrs	r3, r0, #1
 8002100:	4699      	mov	r9, r3
 8002102:	e657      	b.n	8001db4 <__aeabi_dsub+0x104>
 8002104:	0010      	movs	r0, r2
 8002106:	000e      	movs	r6, r1
 8002108:	3820      	subs	r0, #32
 800210a:	40c6      	lsrs	r6, r0
 800210c:	2a20      	cmp	r2, #32
 800210e:	d004      	beq.n	800211a <__aeabi_dsub+0x46a>
 8002110:	2040      	movs	r0, #64	; 0x40
 8002112:	1a82      	subs	r2, r0, r2
 8002114:	4091      	lsls	r1, r2
 8002116:	430f      	orrs	r7, r1
 8002118:	46b9      	mov	r9, r7
 800211a:	464f      	mov	r7, r9
 800211c:	1e7a      	subs	r2, r7, #1
 800211e:	4197      	sbcs	r7, r2
 8002120:	4337      	orrs	r7, r6
 8002122:	e60f      	b.n	8001d44 <__aeabi_dsub+0x94>
 8002124:	4662      	mov	r2, ip
 8002126:	431a      	orrs	r2, r3
 8002128:	0013      	movs	r3, r2
 800212a:	1e5a      	subs	r2, r3, #1
 800212c:	4193      	sbcs	r3, r2
 800212e:	1afc      	subs	r4, r7, r3
 8002130:	42a7      	cmp	r7, r4
 8002132:	41bf      	sbcs	r7, r7
 8002134:	427f      	negs	r7, r7
 8002136:	1bcb      	subs	r3, r1, r7
 8002138:	4699      	mov	r9, r3
 800213a:	465d      	mov	r5, fp
 800213c:	4680      	mov	r8, r0
 800213e:	e608      	b.n	8001d52 <__aeabi_dsub+0xa2>
 8002140:	4666      	mov	r6, ip
 8002142:	431e      	orrs	r6, r3
 8002144:	d100      	bne.n	8002148 <__aeabi_dsub+0x498>
 8002146:	e0be      	b.n	80022c6 <__aeabi_dsub+0x616>
 8002148:	1e56      	subs	r6, r2, #1
 800214a:	2a01      	cmp	r2, #1
 800214c:	d100      	bne.n	8002150 <__aeabi_dsub+0x4a0>
 800214e:	e109      	b.n	8002364 <__aeabi_dsub+0x6b4>
 8002150:	4c8c      	ldr	r4, [pc, #560]	; (8002384 <__aeabi_dsub+0x6d4>)
 8002152:	42a2      	cmp	r2, r4
 8002154:	d100      	bne.n	8002158 <__aeabi_dsub+0x4a8>
 8002156:	e119      	b.n	800238c <__aeabi_dsub+0x6dc>
 8002158:	0032      	movs	r2, r6
 800215a:	e6c1      	b.n	8001ee0 <__aeabi_dsub+0x230>
 800215c:	4642      	mov	r2, r8
 800215e:	2400      	movs	r4, #0
 8002160:	2300      	movs	r3, #0
 8002162:	e648      	b.n	8001df6 <__aeabi_dsub+0x146>
 8002164:	2020      	movs	r0, #32
 8002166:	000c      	movs	r4, r1
 8002168:	1a80      	subs	r0, r0, r2
 800216a:	003e      	movs	r6, r7
 800216c:	4087      	lsls	r7, r0
 800216e:	4084      	lsls	r4, r0
 8002170:	40d6      	lsrs	r6, r2
 8002172:	1e78      	subs	r0, r7, #1
 8002174:	4187      	sbcs	r7, r0
 8002176:	40d1      	lsrs	r1, r2
 8002178:	4334      	orrs	r4, r6
 800217a:	433c      	orrs	r4, r7
 800217c:	448c      	add	ip, r1
 800217e:	e7a4      	b.n	80020ca <__aeabi_dsub+0x41a>
 8002180:	4a80      	ldr	r2, [pc, #512]	; (8002384 <__aeabi_dsub+0x6d4>)
 8002182:	4290      	cmp	r0, r2
 8002184:	d100      	bne.n	8002188 <__aeabi_dsub+0x4d8>
 8002186:	e0e9      	b.n	800235c <__aeabi_dsub+0x6ac>
 8002188:	19df      	adds	r7, r3, r7
 800218a:	429f      	cmp	r7, r3
 800218c:	419b      	sbcs	r3, r3
 800218e:	4461      	add	r1, ip
 8002190:	425b      	negs	r3, r3
 8002192:	18c9      	adds	r1, r1, r3
 8002194:	07cc      	lsls	r4, r1, #31
 8002196:	087f      	lsrs	r7, r7, #1
 8002198:	084b      	lsrs	r3, r1, #1
 800219a:	4699      	mov	r9, r3
 800219c:	4680      	mov	r8, r0
 800219e:	433c      	orrs	r4, r7
 80021a0:	e6f4      	b.n	8001f8c <__aeabi_dsub+0x2dc>
 80021a2:	1afc      	subs	r4, r7, r3
 80021a4:	42a7      	cmp	r7, r4
 80021a6:	41bf      	sbcs	r7, r7
 80021a8:	4663      	mov	r3, ip
 80021aa:	427f      	negs	r7, r7
 80021ac:	1ac9      	subs	r1, r1, r3
 80021ae:	1bcb      	subs	r3, r1, r7
 80021b0:	4699      	mov	r9, r3
 80021b2:	465d      	mov	r5, fp
 80021b4:	e5d5      	b.n	8001d62 <__aeabi_dsub+0xb2>
 80021b6:	08ff      	lsrs	r7, r7, #3
 80021b8:	074b      	lsls	r3, r1, #29
 80021ba:	465d      	mov	r5, fp
 80021bc:	433b      	orrs	r3, r7
 80021be:	08cc      	lsrs	r4, r1, #3
 80021c0:	e6ee      	b.n	8001fa0 <__aeabi_dsub+0x2f0>
 80021c2:	4662      	mov	r2, ip
 80021c4:	431a      	orrs	r2, r3
 80021c6:	d000      	beq.n	80021ca <__aeabi_dsub+0x51a>
 80021c8:	e082      	b.n	80022d0 <__aeabi_dsub+0x620>
 80021ca:	000b      	movs	r3, r1
 80021cc:	433b      	orrs	r3, r7
 80021ce:	d11b      	bne.n	8002208 <__aeabi_dsub+0x558>
 80021d0:	2480      	movs	r4, #128	; 0x80
 80021d2:	2500      	movs	r5, #0
 80021d4:	0324      	lsls	r4, r4, #12
 80021d6:	e6f9      	b.n	8001fcc <__aeabi_dsub+0x31c>
 80021d8:	19dc      	adds	r4, r3, r7
 80021da:	429c      	cmp	r4, r3
 80021dc:	419b      	sbcs	r3, r3
 80021de:	4461      	add	r1, ip
 80021e0:	4689      	mov	r9, r1
 80021e2:	425b      	negs	r3, r3
 80021e4:	4499      	add	r9, r3
 80021e6:	464b      	mov	r3, r9
 80021e8:	021b      	lsls	r3, r3, #8
 80021ea:	d444      	bmi.n	8002276 <__aeabi_dsub+0x5c6>
 80021ec:	2301      	movs	r3, #1
 80021ee:	4698      	mov	r8, r3
 80021f0:	e6cc      	b.n	8001f8c <__aeabi_dsub+0x2dc>
 80021f2:	1bdc      	subs	r4, r3, r7
 80021f4:	4662      	mov	r2, ip
 80021f6:	42a3      	cmp	r3, r4
 80021f8:	419b      	sbcs	r3, r3
 80021fa:	1a51      	subs	r1, r2, r1
 80021fc:	425b      	negs	r3, r3
 80021fe:	1acb      	subs	r3, r1, r3
 8002200:	4699      	mov	r9, r3
 8002202:	2301      	movs	r3, #1
 8002204:	4698      	mov	r8, r3
 8002206:	e5a4      	b.n	8001d52 <__aeabi_dsub+0xa2>
 8002208:	08ff      	lsrs	r7, r7, #3
 800220a:	074b      	lsls	r3, r1, #29
 800220c:	465d      	mov	r5, fp
 800220e:	433b      	orrs	r3, r7
 8002210:	08cc      	lsrs	r4, r1, #3
 8002212:	e6d7      	b.n	8001fc4 <__aeabi_dsub+0x314>
 8002214:	4662      	mov	r2, ip
 8002216:	431a      	orrs	r2, r3
 8002218:	0014      	movs	r4, r2
 800221a:	1e63      	subs	r3, r4, #1
 800221c:	419c      	sbcs	r4, r3
 800221e:	e679      	b.n	8001f14 <__aeabi_dsub+0x264>
 8002220:	0015      	movs	r5, r2
 8002222:	4664      	mov	r4, ip
 8002224:	3d20      	subs	r5, #32
 8002226:	40ec      	lsrs	r4, r5
 8002228:	46a0      	mov	r8, r4
 800222a:	2a20      	cmp	r2, #32
 800222c:	d005      	beq.n	800223a <__aeabi_dsub+0x58a>
 800222e:	2540      	movs	r5, #64	; 0x40
 8002230:	4664      	mov	r4, ip
 8002232:	1aaa      	subs	r2, r5, r2
 8002234:	4094      	lsls	r4, r2
 8002236:	4323      	orrs	r3, r4
 8002238:	469a      	mov	sl, r3
 800223a:	4654      	mov	r4, sl
 800223c:	1e63      	subs	r3, r4, #1
 800223e:	419c      	sbcs	r4, r3
 8002240:	4643      	mov	r3, r8
 8002242:	4323      	orrs	r3, r4
 8002244:	e773      	b.n	800212e <__aeabi_dsub+0x47e>
 8002246:	4662      	mov	r2, ip
 8002248:	431a      	orrs	r2, r3
 800224a:	d023      	beq.n	8002294 <__aeabi_dsub+0x5e4>
 800224c:	000a      	movs	r2, r1
 800224e:	433a      	orrs	r2, r7
 8002250:	d000      	beq.n	8002254 <__aeabi_dsub+0x5a4>
 8002252:	e0a0      	b.n	8002396 <__aeabi_dsub+0x6e6>
 8002254:	4662      	mov	r2, ip
 8002256:	08db      	lsrs	r3, r3, #3
 8002258:	0752      	lsls	r2, r2, #29
 800225a:	4313      	orrs	r3, r2
 800225c:	4662      	mov	r2, ip
 800225e:	08d4      	lsrs	r4, r2, #3
 8002260:	e6b0      	b.n	8001fc4 <__aeabi_dsub+0x314>
 8002262:	000b      	movs	r3, r1
 8002264:	433b      	orrs	r3, r7
 8002266:	d100      	bne.n	800226a <__aeabi_dsub+0x5ba>
 8002268:	e728      	b.n	80020bc <__aeabi_dsub+0x40c>
 800226a:	08ff      	lsrs	r7, r7, #3
 800226c:	074b      	lsls	r3, r1, #29
 800226e:	465d      	mov	r5, fp
 8002270:	433b      	orrs	r3, r7
 8002272:	08cc      	lsrs	r4, r1, #3
 8002274:	e697      	b.n	8001fa6 <__aeabi_dsub+0x2f6>
 8002276:	2302      	movs	r3, #2
 8002278:	4698      	mov	r8, r3
 800227a:	e736      	b.n	80020ea <__aeabi_dsub+0x43a>
 800227c:	1afc      	subs	r4, r7, r3
 800227e:	42a7      	cmp	r7, r4
 8002280:	41bf      	sbcs	r7, r7
 8002282:	4663      	mov	r3, ip
 8002284:	427f      	negs	r7, r7
 8002286:	1ac9      	subs	r1, r1, r3
 8002288:	1bcb      	subs	r3, r1, r7
 800228a:	4699      	mov	r9, r3
 800228c:	2301      	movs	r3, #1
 800228e:	465d      	mov	r5, fp
 8002290:	4698      	mov	r8, r3
 8002292:	e55e      	b.n	8001d52 <__aeabi_dsub+0xa2>
 8002294:	074b      	lsls	r3, r1, #29
 8002296:	08ff      	lsrs	r7, r7, #3
 8002298:	433b      	orrs	r3, r7
 800229a:	08cc      	lsrs	r4, r1, #3
 800229c:	e692      	b.n	8001fc4 <__aeabi_dsub+0x314>
 800229e:	1bdc      	subs	r4, r3, r7
 80022a0:	4660      	mov	r0, ip
 80022a2:	42a3      	cmp	r3, r4
 80022a4:	41b6      	sbcs	r6, r6
 80022a6:	1a40      	subs	r0, r0, r1
 80022a8:	4276      	negs	r6, r6
 80022aa:	1b80      	subs	r0, r0, r6
 80022ac:	4681      	mov	r9, r0
 80022ae:	0200      	lsls	r0, r0, #8
 80022b0:	d560      	bpl.n	8002374 <__aeabi_dsub+0x6c4>
 80022b2:	1afc      	subs	r4, r7, r3
 80022b4:	42a7      	cmp	r7, r4
 80022b6:	41bf      	sbcs	r7, r7
 80022b8:	4663      	mov	r3, ip
 80022ba:	427f      	negs	r7, r7
 80022bc:	1ac9      	subs	r1, r1, r3
 80022be:	1bcb      	subs	r3, r1, r7
 80022c0:	4699      	mov	r9, r3
 80022c2:	465d      	mov	r5, fp
 80022c4:	e576      	b.n	8001db4 <__aeabi_dsub+0x104>
 80022c6:	08ff      	lsrs	r7, r7, #3
 80022c8:	074b      	lsls	r3, r1, #29
 80022ca:	433b      	orrs	r3, r7
 80022cc:	08cc      	lsrs	r4, r1, #3
 80022ce:	e667      	b.n	8001fa0 <__aeabi_dsub+0x2f0>
 80022d0:	000a      	movs	r2, r1
 80022d2:	08db      	lsrs	r3, r3, #3
 80022d4:	433a      	orrs	r2, r7
 80022d6:	d100      	bne.n	80022da <__aeabi_dsub+0x62a>
 80022d8:	e66f      	b.n	8001fba <__aeabi_dsub+0x30a>
 80022da:	4662      	mov	r2, ip
 80022dc:	0752      	lsls	r2, r2, #29
 80022de:	4313      	orrs	r3, r2
 80022e0:	4662      	mov	r2, ip
 80022e2:	08d4      	lsrs	r4, r2, #3
 80022e4:	2280      	movs	r2, #128	; 0x80
 80022e6:	0312      	lsls	r2, r2, #12
 80022e8:	4214      	tst	r4, r2
 80022ea:	d007      	beq.n	80022fc <__aeabi_dsub+0x64c>
 80022ec:	08c8      	lsrs	r0, r1, #3
 80022ee:	4210      	tst	r0, r2
 80022f0:	d104      	bne.n	80022fc <__aeabi_dsub+0x64c>
 80022f2:	465d      	mov	r5, fp
 80022f4:	0004      	movs	r4, r0
 80022f6:	08fb      	lsrs	r3, r7, #3
 80022f8:	0749      	lsls	r1, r1, #29
 80022fa:	430b      	orrs	r3, r1
 80022fc:	0f5a      	lsrs	r2, r3, #29
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	08db      	lsrs	r3, r3, #3
 8002302:	0752      	lsls	r2, r2, #29
 8002304:	4313      	orrs	r3, r2
 8002306:	e65d      	b.n	8001fc4 <__aeabi_dsub+0x314>
 8002308:	074b      	lsls	r3, r1, #29
 800230a:	08ff      	lsrs	r7, r7, #3
 800230c:	433b      	orrs	r3, r7
 800230e:	08cc      	lsrs	r4, r1, #3
 8002310:	e649      	b.n	8001fa6 <__aeabi_dsub+0x2f6>
 8002312:	19dc      	adds	r4, r3, r7
 8002314:	429c      	cmp	r4, r3
 8002316:	419b      	sbcs	r3, r3
 8002318:	4461      	add	r1, ip
 800231a:	4689      	mov	r9, r1
 800231c:	425b      	negs	r3, r3
 800231e:	4499      	add	r9, r3
 8002320:	464b      	mov	r3, r9
 8002322:	021b      	lsls	r3, r3, #8
 8002324:	d400      	bmi.n	8002328 <__aeabi_dsub+0x678>
 8002326:	e631      	b.n	8001f8c <__aeabi_dsub+0x2dc>
 8002328:	464a      	mov	r2, r9
 800232a:	4b17      	ldr	r3, [pc, #92]	; (8002388 <__aeabi_dsub+0x6d8>)
 800232c:	401a      	ands	r2, r3
 800232e:	2301      	movs	r3, #1
 8002330:	4691      	mov	r9, r2
 8002332:	4698      	mov	r8, r3
 8002334:	e62a      	b.n	8001f8c <__aeabi_dsub+0x2dc>
 8002336:	0016      	movs	r6, r2
 8002338:	4664      	mov	r4, ip
 800233a:	3e20      	subs	r6, #32
 800233c:	40f4      	lsrs	r4, r6
 800233e:	46a0      	mov	r8, r4
 8002340:	2a20      	cmp	r2, #32
 8002342:	d005      	beq.n	8002350 <__aeabi_dsub+0x6a0>
 8002344:	2640      	movs	r6, #64	; 0x40
 8002346:	4664      	mov	r4, ip
 8002348:	1ab2      	subs	r2, r6, r2
 800234a:	4094      	lsls	r4, r2
 800234c:	4323      	orrs	r3, r4
 800234e:	469a      	mov	sl, r3
 8002350:	4654      	mov	r4, sl
 8002352:	1e63      	subs	r3, r4, #1
 8002354:	419c      	sbcs	r4, r3
 8002356:	4643      	mov	r3, r8
 8002358:	431c      	orrs	r4, r3
 800235a:	e5db      	b.n	8001f14 <__aeabi_dsub+0x264>
 800235c:	0002      	movs	r2, r0
 800235e:	2400      	movs	r4, #0
 8002360:	2300      	movs	r3, #0
 8002362:	e548      	b.n	8001df6 <__aeabi_dsub+0x146>
 8002364:	19dc      	adds	r4, r3, r7
 8002366:	42bc      	cmp	r4, r7
 8002368:	41bf      	sbcs	r7, r7
 800236a:	4461      	add	r1, ip
 800236c:	4689      	mov	r9, r1
 800236e:	427f      	negs	r7, r7
 8002370:	44b9      	add	r9, r7
 8002372:	e738      	b.n	80021e6 <__aeabi_dsub+0x536>
 8002374:	464b      	mov	r3, r9
 8002376:	4323      	orrs	r3, r4
 8002378:	d100      	bne.n	800237c <__aeabi_dsub+0x6cc>
 800237a:	e69f      	b.n	80020bc <__aeabi_dsub+0x40c>
 800237c:	e606      	b.n	8001f8c <__aeabi_dsub+0x2dc>
 800237e:	46c0      	nop			; (mov r8, r8)
 8002380:	000007fe 	.word	0x000007fe
 8002384:	000007ff 	.word	0x000007ff
 8002388:	ff7fffff 	.word	0xff7fffff
 800238c:	08ff      	lsrs	r7, r7, #3
 800238e:	074b      	lsls	r3, r1, #29
 8002390:	433b      	orrs	r3, r7
 8002392:	08cc      	lsrs	r4, r1, #3
 8002394:	e616      	b.n	8001fc4 <__aeabi_dsub+0x314>
 8002396:	4662      	mov	r2, ip
 8002398:	08db      	lsrs	r3, r3, #3
 800239a:	0752      	lsls	r2, r2, #29
 800239c:	4313      	orrs	r3, r2
 800239e:	4662      	mov	r2, ip
 80023a0:	08d4      	lsrs	r4, r2, #3
 80023a2:	2280      	movs	r2, #128	; 0x80
 80023a4:	0312      	lsls	r2, r2, #12
 80023a6:	4214      	tst	r4, r2
 80023a8:	d007      	beq.n	80023ba <__aeabi_dsub+0x70a>
 80023aa:	08c8      	lsrs	r0, r1, #3
 80023ac:	4210      	tst	r0, r2
 80023ae:	d104      	bne.n	80023ba <__aeabi_dsub+0x70a>
 80023b0:	465d      	mov	r5, fp
 80023b2:	0004      	movs	r4, r0
 80023b4:	08fb      	lsrs	r3, r7, #3
 80023b6:	0749      	lsls	r1, r1, #29
 80023b8:	430b      	orrs	r3, r1
 80023ba:	0f5a      	lsrs	r2, r3, #29
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	0752      	lsls	r2, r2, #29
 80023c0:	08db      	lsrs	r3, r3, #3
 80023c2:	4313      	orrs	r3, r2
 80023c4:	e5fe      	b.n	8001fc4 <__aeabi_dsub+0x314>
 80023c6:	2300      	movs	r3, #0
 80023c8:	4a01      	ldr	r2, [pc, #4]	; (80023d0 <__aeabi_dsub+0x720>)
 80023ca:	001c      	movs	r4, r3
 80023cc:	e513      	b.n	8001df6 <__aeabi_dsub+0x146>
 80023ce:	46c0      	nop			; (mov r8, r8)
 80023d0:	000007ff 	.word	0x000007ff

080023d4 <__aeabi_dcmpun>:
 80023d4:	b570      	push	{r4, r5, r6, lr}
 80023d6:	0005      	movs	r5, r0
 80023d8:	480c      	ldr	r0, [pc, #48]	; (800240c <__aeabi_dcmpun+0x38>)
 80023da:	031c      	lsls	r4, r3, #12
 80023dc:	0016      	movs	r6, r2
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	030a      	lsls	r2, r1, #12
 80023e2:	0049      	lsls	r1, r1, #1
 80023e4:	0b12      	lsrs	r2, r2, #12
 80023e6:	0d49      	lsrs	r1, r1, #21
 80023e8:	0b24      	lsrs	r4, r4, #12
 80023ea:	0d5b      	lsrs	r3, r3, #21
 80023ec:	4281      	cmp	r1, r0
 80023ee:	d008      	beq.n	8002402 <__aeabi_dcmpun+0x2e>
 80023f0:	4a06      	ldr	r2, [pc, #24]	; (800240c <__aeabi_dcmpun+0x38>)
 80023f2:	2000      	movs	r0, #0
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d103      	bne.n	8002400 <__aeabi_dcmpun+0x2c>
 80023f8:	0020      	movs	r0, r4
 80023fa:	4330      	orrs	r0, r6
 80023fc:	1e43      	subs	r3, r0, #1
 80023fe:	4198      	sbcs	r0, r3
 8002400:	bd70      	pop	{r4, r5, r6, pc}
 8002402:	2001      	movs	r0, #1
 8002404:	432a      	orrs	r2, r5
 8002406:	d1fb      	bne.n	8002400 <__aeabi_dcmpun+0x2c>
 8002408:	e7f2      	b.n	80023f0 <__aeabi_dcmpun+0x1c>
 800240a:	46c0      	nop			; (mov r8, r8)
 800240c:	000007ff 	.word	0x000007ff

08002410 <__aeabi_d2iz>:
 8002410:	000a      	movs	r2, r1
 8002412:	b530      	push	{r4, r5, lr}
 8002414:	4c13      	ldr	r4, [pc, #76]	; (8002464 <__aeabi_d2iz+0x54>)
 8002416:	0053      	lsls	r3, r2, #1
 8002418:	0309      	lsls	r1, r1, #12
 800241a:	0005      	movs	r5, r0
 800241c:	0b09      	lsrs	r1, r1, #12
 800241e:	2000      	movs	r0, #0
 8002420:	0d5b      	lsrs	r3, r3, #21
 8002422:	0fd2      	lsrs	r2, r2, #31
 8002424:	42a3      	cmp	r3, r4
 8002426:	dd04      	ble.n	8002432 <__aeabi_d2iz+0x22>
 8002428:	480f      	ldr	r0, [pc, #60]	; (8002468 <__aeabi_d2iz+0x58>)
 800242a:	4283      	cmp	r3, r0
 800242c:	dd02      	ble.n	8002434 <__aeabi_d2iz+0x24>
 800242e:	4b0f      	ldr	r3, [pc, #60]	; (800246c <__aeabi_d2iz+0x5c>)
 8002430:	18d0      	adds	r0, r2, r3
 8002432:	bd30      	pop	{r4, r5, pc}
 8002434:	2080      	movs	r0, #128	; 0x80
 8002436:	0340      	lsls	r0, r0, #13
 8002438:	4301      	orrs	r1, r0
 800243a:	480d      	ldr	r0, [pc, #52]	; (8002470 <__aeabi_d2iz+0x60>)
 800243c:	1ac0      	subs	r0, r0, r3
 800243e:	281f      	cmp	r0, #31
 8002440:	dd08      	ble.n	8002454 <__aeabi_d2iz+0x44>
 8002442:	480c      	ldr	r0, [pc, #48]	; (8002474 <__aeabi_d2iz+0x64>)
 8002444:	1ac3      	subs	r3, r0, r3
 8002446:	40d9      	lsrs	r1, r3
 8002448:	000b      	movs	r3, r1
 800244a:	4258      	negs	r0, r3
 800244c:	2a00      	cmp	r2, #0
 800244e:	d1f0      	bne.n	8002432 <__aeabi_d2iz+0x22>
 8002450:	0018      	movs	r0, r3
 8002452:	e7ee      	b.n	8002432 <__aeabi_d2iz+0x22>
 8002454:	4c08      	ldr	r4, [pc, #32]	; (8002478 <__aeabi_d2iz+0x68>)
 8002456:	40c5      	lsrs	r5, r0
 8002458:	46a4      	mov	ip, r4
 800245a:	4463      	add	r3, ip
 800245c:	4099      	lsls	r1, r3
 800245e:	000b      	movs	r3, r1
 8002460:	432b      	orrs	r3, r5
 8002462:	e7f2      	b.n	800244a <__aeabi_d2iz+0x3a>
 8002464:	000003fe 	.word	0x000003fe
 8002468:	0000041d 	.word	0x0000041d
 800246c:	7fffffff 	.word	0x7fffffff
 8002470:	00000433 	.word	0x00000433
 8002474:	00000413 	.word	0x00000413
 8002478:	fffffbed 	.word	0xfffffbed

0800247c <__aeabi_i2d>:
 800247c:	b570      	push	{r4, r5, r6, lr}
 800247e:	2800      	cmp	r0, #0
 8002480:	d016      	beq.n	80024b0 <__aeabi_i2d+0x34>
 8002482:	17c3      	asrs	r3, r0, #31
 8002484:	18c5      	adds	r5, r0, r3
 8002486:	405d      	eors	r5, r3
 8002488:	0fc4      	lsrs	r4, r0, #31
 800248a:	0028      	movs	r0, r5
 800248c:	f000 f8d4 	bl	8002638 <__clzsi2>
 8002490:	4a11      	ldr	r2, [pc, #68]	; (80024d8 <__aeabi_i2d+0x5c>)
 8002492:	1a12      	subs	r2, r2, r0
 8002494:	280a      	cmp	r0, #10
 8002496:	dc16      	bgt.n	80024c6 <__aeabi_i2d+0x4a>
 8002498:	0003      	movs	r3, r0
 800249a:	002e      	movs	r6, r5
 800249c:	3315      	adds	r3, #21
 800249e:	409e      	lsls	r6, r3
 80024a0:	230b      	movs	r3, #11
 80024a2:	1a18      	subs	r0, r3, r0
 80024a4:	40c5      	lsrs	r5, r0
 80024a6:	0552      	lsls	r2, r2, #21
 80024a8:	032d      	lsls	r5, r5, #12
 80024aa:	0b2d      	lsrs	r5, r5, #12
 80024ac:	0d53      	lsrs	r3, r2, #21
 80024ae:	e003      	b.n	80024b8 <__aeabi_i2d+0x3c>
 80024b0:	2400      	movs	r4, #0
 80024b2:	2300      	movs	r3, #0
 80024b4:	2500      	movs	r5, #0
 80024b6:	2600      	movs	r6, #0
 80024b8:	051b      	lsls	r3, r3, #20
 80024ba:	432b      	orrs	r3, r5
 80024bc:	07e4      	lsls	r4, r4, #31
 80024be:	4323      	orrs	r3, r4
 80024c0:	0030      	movs	r0, r6
 80024c2:	0019      	movs	r1, r3
 80024c4:	bd70      	pop	{r4, r5, r6, pc}
 80024c6:	380b      	subs	r0, #11
 80024c8:	4085      	lsls	r5, r0
 80024ca:	0552      	lsls	r2, r2, #21
 80024cc:	032d      	lsls	r5, r5, #12
 80024ce:	2600      	movs	r6, #0
 80024d0:	0b2d      	lsrs	r5, r5, #12
 80024d2:	0d53      	lsrs	r3, r2, #21
 80024d4:	e7f0      	b.n	80024b8 <__aeabi_i2d+0x3c>
 80024d6:	46c0      	nop			; (mov r8, r8)
 80024d8:	0000041e 	.word	0x0000041e

080024dc <__aeabi_ui2d>:
 80024dc:	b510      	push	{r4, lr}
 80024de:	1e04      	subs	r4, r0, #0
 80024e0:	d010      	beq.n	8002504 <__aeabi_ui2d+0x28>
 80024e2:	f000 f8a9 	bl	8002638 <__clzsi2>
 80024e6:	4b0f      	ldr	r3, [pc, #60]	; (8002524 <__aeabi_ui2d+0x48>)
 80024e8:	1a1b      	subs	r3, r3, r0
 80024ea:	280a      	cmp	r0, #10
 80024ec:	dc11      	bgt.n	8002512 <__aeabi_ui2d+0x36>
 80024ee:	220b      	movs	r2, #11
 80024f0:	0021      	movs	r1, r4
 80024f2:	1a12      	subs	r2, r2, r0
 80024f4:	40d1      	lsrs	r1, r2
 80024f6:	3015      	adds	r0, #21
 80024f8:	030a      	lsls	r2, r1, #12
 80024fa:	055b      	lsls	r3, r3, #21
 80024fc:	4084      	lsls	r4, r0
 80024fe:	0b12      	lsrs	r2, r2, #12
 8002500:	0d5b      	lsrs	r3, r3, #21
 8002502:	e001      	b.n	8002508 <__aeabi_ui2d+0x2c>
 8002504:	2300      	movs	r3, #0
 8002506:	2200      	movs	r2, #0
 8002508:	051b      	lsls	r3, r3, #20
 800250a:	4313      	orrs	r3, r2
 800250c:	0020      	movs	r0, r4
 800250e:	0019      	movs	r1, r3
 8002510:	bd10      	pop	{r4, pc}
 8002512:	0022      	movs	r2, r4
 8002514:	380b      	subs	r0, #11
 8002516:	4082      	lsls	r2, r0
 8002518:	055b      	lsls	r3, r3, #21
 800251a:	0312      	lsls	r2, r2, #12
 800251c:	2400      	movs	r4, #0
 800251e:	0b12      	lsrs	r2, r2, #12
 8002520:	0d5b      	lsrs	r3, r3, #21
 8002522:	e7f1      	b.n	8002508 <__aeabi_ui2d+0x2c>
 8002524:	0000041e 	.word	0x0000041e

08002528 <__aeabi_d2f>:
 8002528:	0002      	movs	r2, r0
 800252a:	004b      	lsls	r3, r1, #1
 800252c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800252e:	0d5b      	lsrs	r3, r3, #21
 8002530:	030c      	lsls	r4, r1, #12
 8002532:	4e3d      	ldr	r6, [pc, #244]	; (8002628 <__aeabi_d2f+0x100>)
 8002534:	0a64      	lsrs	r4, r4, #9
 8002536:	0f40      	lsrs	r0, r0, #29
 8002538:	1c5f      	adds	r7, r3, #1
 800253a:	0fc9      	lsrs	r1, r1, #31
 800253c:	4304      	orrs	r4, r0
 800253e:	00d5      	lsls	r5, r2, #3
 8002540:	4237      	tst	r7, r6
 8002542:	d00a      	beq.n	800255a <__aeabi_d2f+0x32>
 8002544:	4839      	ldr	r0, [pc, #228]	; (800262c <__aeabi_d2f+0x104>)
 8002546:	181e      	adds	r6, r3, r0
 8002548:	2efe      	cmp	r6, #254	; 0xfe
 800254a:	dd16      	ble.n	800257a <__aeabi_d2f+0x52>
 800254c:	20ff      	movs	r0, #255	; 0xff
 800254e:	2400      	movs	r4, #0
 8002550:	05c0      	lsls	r0, r0, #23
 8002552:	4320      	orrs	r0, r4
 8002554:	07c9      	lsls	r1, r1, #31
 8002556:	4308      	orrs	r0, r1
 8002558:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800255a:	2b00      	cmp	r3, #0
 800255c:	d106      	bne.n	800256c <__aeabi_d2f+0x44>
 800255e:	432c      	orrs	r4, r5
 8002560:	d026      	beq.n	80025b0 <__aeabi_d2f+0x88>
 8002562:	2205      	movs	r2, #5
 8002564:	0192      	lsls	r2, r2, #6
 8002566:	0a54      	lsrs	r4, r2, #9
 8002568:	b2d8      	uxtb	r0, r3
 800256a:	e7f1      	b.n	8002550 <__aeabi_d2f+0x28>
 800256c:	4325      	orrs	r5, r4
 800256e:	d0ed      	beq.n	800254c <__aeabi_d2f+0x24>
 8002570:	2080      	movs	r0, #128	; 0x80
 8002572:	03c0      	lsls	r0, r0, #15
 8002574:	4304      	orrs	r4, r0
 8002576:	20ff      	movs	r0, #255	; 0xff
 8002578:	e7ea      	b.n	8002550 <__aeabi_d2f+0x28>
 800257a:	2e00      	cmp	r6, #0
 800257c:	dd1b      	ble.n	80025b6 <__aeabi_d2f+0x8e>
 800257e:	0192      	lsls	r2, r2, #6
 8002580:	1e53      	subs	r3, r2, #1
 8002582:	419a      	sbcs	r2, r3
 8002584:	00e4      	lsls	r4, r4, #3
 8002586:	0f6d      	lsrs	r5, r5, #29
 8002588:	4322      	orrs	r2, r4
 800258a:	432a      	orrs	r2, r5
 800258c:	0753      	lsls	r3, r2, #29
 800258e:	d048      	beq.n	8002622 <__aeabi_d2f+0xfa>
 8002590:	230f      	movs	r3, #15
 8002592:	4013      	ands	r3, r2
 8002594:	2b04      	cmp	r3, #4
 8002596:	d000      	beq.n	800259a <__aeabi_d2f+0x72>
 8002598:	3204      	adds	r2, #4
 800259a:	2380      	movs	r3, #128	; 0x80
 800259c:	04db      	lsls	r3, r3, #19
 800259e:	4013      	ands	r3, r2
 80025a0:	d03f      	beq.n	8002622 <__aeabi_d2f+0xfa>
 80025a2:	1c70      	adds	r0, r6, #1
 80025a4:	2efe      	cmp	r6, #254	; 0xfe
 80025a6:	d0d1      	beq.n	800254c <__aeabi_d2f+0x24>
 80025a8:	0192      	lsls	r2, r2, #6
 80025aa:	0a54      	lsrs	r4, r2, #9
 80025ac:	b2c0      	uxtb	r0, r0
 80025ae:	e7cf      	b.n	8002550 <__aeabi_d2f+0x28>
 80025b0:	2000      	movs	r0, #0
 80025b2:	2400      	movs	r4, #0
 80025b4:	e7cc      	b.n	8002550 <__aeabi_d2f+0x28>
 80025b6:	0032      	movs	r2, r6
 80025b8:	3217      	adds	r2, #23
 80025ba:	db22      	blt.n	8002602 <__aeabi_d2f+0xda>
 80025bc:	2080      	movs	r0, #128	; 0x80
 80025be:	0400      	lsls	r0, r0, #16
 80025c0:	4320      	orrs	r0, r4
 80025c2:	241e      	movs	r4, #30
 80025c4:	1ba4      	subs	r4, r4, r6
 80025c6:	2c1f      	cmp	r4, #31
 80025c8:	dd1d      	ble.n	8002606 <__aeabi_d2f+0xde>
 80025ca:	2202      	movs	r2, #2
 80025cc:	4252      	negs	r2, r2
 80025ce:	1b96      	subs	r6, r2, r6
 80025d0:	0002      	movs	r2, r0
 80025d2:	40f2      	lsrs	r2, r6
 80025d4:	0016      	movs	r6, r2
 80025d6:	2c20      	cmp	r4, #32
 80025d8:	d004      	beq.n	80025e4 <__aeabi_d2f+0xbc>
 80025da:	4a15      	ldr	r2, [pc, #84]	; (8002630 <__aeabi_d2f+0x108>)
 80025dc:	4694      	mov	ip, r2
 80025de:	4463      	add	r3, ip
 80025e0:	4098      	lsls	r0, r3
 80025e2:	4305      	orrs	r5, r0
 80025e4:	002a      	movs	r2, r5
 80025e6:	1e53      	subs	r3, r2, #1
 80025e8:	419a      	sbcs	r2, r3
 80025ea:	4332      	orrs	r2, r6
 80025ec:	2600      	movs	r6, #0
 80025ee:	0753      	lsls	r3, r2, #29
 80025f0:	d1ce      	bne.n	8002590 <__aeabi_d2f+0x68>
 80025f2:	2480      	movs	r4, #128	; 0x80
 80025f4:	0013      	movs	r3, r2
 80025f6:	04e4      	lsls	r4, r4, #19
 80025f8:	2001      	movs	r0, #1
 80025fa:	4023      	ands	r3, r4
 80025fc:	4222      	tst	r2, r4
 80025fe:	d1d3      	bne.n	80025a8 <__aeabi_d2f+0x80>
 8002600:	e7b0      	b.n	8002564 <__aeabi_d2f+0x3c>
 8002602:	2300      	movs	r3, #0
 8002604:	e7ad      	b.n	8002562 <__aeabi_d2f+0x3a>
 8002606:	4a0b      	ldr	r2, [pc, #44]	; (8002634 <__aeabi_d2f+0x10c>)
 8002608:	4694      	mov	ip, r2
 800260a:	002a      	movs	r2, r5
 800260c:	40e2      	lsrs	r2, r4
 800260e:	0014      	movs	r4, r2
 8002610:	002a      	movs	r2, r5
 8002612:	4463      	add	r3, ip
 8002614:	409a      	lsls	r2, r3
 8002616:	4098      	lsls	r0, r3
 8002618:	1e55      	subs	r5, r2, #1
 800261a:	41aa      	sbcs	r2, r5
 800261c:	4302      	orrs	r2, r0
 800261e:	4322      	orrs	r2, r4
 8002620:	e7e4      	b.n	80025ec <__aeabi_d2f+0xc4>
 8002622:	0033      	movs	r3, r6
 8002624:	e79e      	b.n	8002564 <__aeabi_d2f+0x3c>
 8002626:	46c0      	nop			; (mov r8, r8)
 8002628:	000007fe 	.word	0x000007fe
 800262c:	fffffc80 	.word	0xfffffc80
 8002630:	fffffca2 	.word	0xfffffca2
 8002634:	fffffc82 	.word	0xfffffc82

08002638 <__clzsi2>:
 8002638:	211c      	movs	r1, #28
 800263a:	2301      	movs	r3, #1
 800263c:	041b      	lsls	r3, r3, #16
 800263e:	4298      	cmp	r0, r3
 8002640:	d301      	bcc.n	8002646 <__clzsi2+0xe>
 8002642:	0c00      	lsrs	r0, r0, #16
 8002644:	3910      	subs	r1, #16
 8002646:	0a1b      	lsrs	r3, r3, #8
 8002648:	4298      	cmp	r0, r3
 800264a:	d301      	bcc.n	8002650 <__clzsi2+0x18>
 800264c:	0a00      	lsrs	r0, r0, #8
 800264e:	3908      	subs	r1, #8
 8002650:	091b      	lsrs	r3, r3, #4
 8002652:	4298      	cmp	r0, r3
 8002654:	d301      	bcc.n	800265a <__clzsi2+0x22>
 8002656:	0900      	lsrs	r0, r0, #4
 8002658:	3904      	subs	r1, #4
 800265a:	a202      	add	r2, pc, #8	; (adr r2, 8002664 <__clzsi2+0x2c>)
 800265c:	5c10      	ldrb	r0, [r2, r0]
 800265e:	1840      	adds	r0, r0, r1
 8002660:	4770      	bx	lr
 8002662:	46c0      	nop			; (mov r8, r8)
 8002664:	02020304 	.word	0x02020304
 8002668:	01010101 	.word	0x01010101
	...

08002674 <__clzdi2>:
 8002674:	b510      	push	{r4, lr}
 8002676:	2900      	cmp	r1, #0
 8002678:	d103      	bne.n	8002682 <__clzdi2+0xe>
 800267a:	f7ff ffdd 	bl	8002638 <__clzsi2>
 800267e:	3020      	adds	r0, #32
 8002680:	e002      	b.n	8002688 <__clzdi2+0x14>
 8002682:	0008      	movs	r0, r1
 8002684:	f7ff ffd8 	bl	8002638 <__clzsi2>
 8002688:	bd10      	pop	{r4, pc}
 800268a:	46c0      	nop			; (mov r8, r8)

0800268c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002692:	f000 fdab 	bl	80031ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002696:	f000 f817 	bl	80026c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800269a:	f000 f8f1 	bl	8002880 <MX_GPIO_Init>
  MX_DMA_Init();
 800269e:	f000 f8d1 	bl	8002844 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80026a2:	f000 f881 	bl	80027a8 <MX_USART1_UART_Init>
  MX_TIM14_Init();
 80026a6:	f000 f857 	bl	8002758 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  __HAL_TIM_CLEAR_IT ( &htim14 , TIM_IT_UPDATE ) ;
 80026aa:	4b06      	ldr	r3, [pc, #24]	; (80026c4 <main+0x38>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2202      	movs	r2, #2
 80026b0:	4252      	negs	r2, r2
 80026b2:	611a      	str	r2, [r3, #16]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //HAL_Delay ( 15000 ) ;
  m138_init () ;
 80026b4:	f000 f988 	bl	80029c8 <m138_init>
  float v = m138_get_voltage () ;
 80026b8:	f000 f944 	bl	8002944 <m138_get_voltage>
 80026bc:	1c03      	adds	r3, r0, #0
 80026be:	607b      	str	r3, [r7, #4]
  while (1)
 80026c0:	e7fe      	b.n	80026c0 <main+0x34>
 80026c2:	46c0      	nop			; (mov r8, r8)
 80026c4:	2000026c 	.word	0x2000026c

080026c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026c8:	b590      	push	{r4, r7, lr}
 80026ca:	b093      	sub	sp, #76	; 0x4c
 80026cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026ce:	2410      	movs	r4, #16
 80026d0:	193b      	adds	r3, r7, r4
 80026d2:	0018      	movs	r0, r3
 80026d4:	2338      	movs	r3, #56	; 0x38
 80026d6:	001a      	movs	r2, r3
 80026d8:	2100      	movs	r1, #0
 80026da:	f004 f9b6 	bl	8006a4a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026de:	003b      	movs	r3, r7
 80026e0:	0018      	movs	r0, r3
 80026e2:	2310      	movs	r3, #16
 80026e4:	001a      	movs	r2, r3
 80026e6:	2100      	movs	r1, #0
 80026e8:	f004 f9af 	bl	8006a4a <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80026ec:	2380      	movs	r3, #128	; 0x80
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	0018      	movs	r0, r3
 80026f2:	f001 fb7f 	bl	8003df4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80026f6:	193b      	adds	r3, r7, r4
 80026f8:	2202      	movs	r2, #2
 80026fa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80026fc:	193b      	adds	r3, r7, r4
 80026fe:	2280      	movs	r2, #128	; 0x80
 8002700:	0052      	lsls	r2, r2, #1
 8002702:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002704:	193b      	adds	r3, r7, r4
 8002706:	2200      	movs	r2, #0
 8002708:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800270a:	193b      	adds	r3, r7, r4
 800270c:	2240      	movs	r2, #64	; 0x40
 800270e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002710:	193b      	adds	r3, r7, r4
 8002712:	2200      	movs	r2, #0
 8002714:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002716:	193b      	adds	r3, r7, r4
 8002718:	0018      	movs	r0, r3
 800271a:	f001 fbb7 	bl	8003e8c <HAL_RCC_OscConfig>
 800271e:	1e03      	subs	r3, r0, #0
 8002720:	d001      	beq.n	8002726 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8002722:	f000 fb4f 	bl	8002dc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002726:	003b      	movs	r3, r7
 8002728:	2207      	movs	r2, #7
 800272a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800272c:	003b      	movs	r3, r7
 800272e:	2200      	movs	r2, #0
 8002730:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002732:	003b      	movs	r3, r7
 8002734:	2200      	movs	r2, #0
 8002736:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002738:	003b      	movs	r3, r7
 800273a:	2200      	movs	r2, #0
 800273c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800273e:	003b      	movs	r3, r7
 8002740:	2100      	movs	r1, #0
 8002742:	0018      	movs	r0, r3
 8002744:	f001 febc 	bl	80044c0 <HAL_RCC_ClockConfig>
 8002748:	1e03      	subs	r3, r0, #0
 800274a:	d001      	beq.n	8002750 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800274c:	f000 fb3a 	bl	8002dc4 <Error_Handler>
  }
}
 8002750:	46c0      	nop			; (mov r8, r8)
 8002752:	46bd      	mov	sp, r7
 8002754:	b013      	add	sp, #76	; 0x4c
 8002756:	bd90      	pop	{r4, r7, pc}

08002758 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800275c:	4b0e      	ldr	r3, [pc, #56]	; (8002798 <MX_TIM14_Init+0x40>)
 800275e:	4a0f      	ldr	r2, [pc, #60]	; (800279c <MX_TIM14_Init+0x44>)
 8002760:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 16000-1;
 8002762:	4b0d      	ldr	r3, [pc, #52]	; (8002798 <MX_TIM14_Init+0x40>)
 8002764:	4a0e      	ldr	r2, [pc, #56]	; (80027a0 <MX_TIM14_Init+0x48>)
 8002766:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002768:	4b0b      	ldr	r3, [pc, #44]	; (8002798 <MX_TIM14_Init+0x40>)
 800276a:	2200      	movs	r2, #0
 800276c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 5000-1;
 800276e:	4b0a      	ldr	r3, [pc, #40]	; (8002798 <MX_TIM14_Init+0x40>)
 8002770:	4a0c      	ldr	r2, [pc, #48]	; (80027a4 <MX_TIM14_Init+0x4c>)
 8002772:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002774:	4b08      	ldr	r3, [pc, #32]	; (8002798 <MX_TIM14_Init+0x40>)
 8002776:	2200      	movs	r2, #0
 8002778:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800277a:	4b07      	ldr	r3, [pc, #28]	; (8002798 <MX_TIM14_Init+0x40>)
 800277c:	2200      	movs	r2, #0
 800277e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002780:	4b05      	ldr	r3, [pc, #20]	; (8002798 <MX_TIM14_Init+0x40>)
 8002782:	0018      	movs	r0, r3
 8002784:	f002 f9c0 	bl	8004b08 <HAL_TIM_Base_Init>
 8002788:	1e03      	subs	r3, r0, #0
 800278a:	d001      	beq.n	8002790 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 800278c:	f000 fb1a 	bl	8002dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8002790:	46c0      	nop			; (mov r8, r8)
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	46c0      	nop			; (mov r8, r8)
 8002798:	2000026c 	.word	0x2000026c
 800279c:	40002000 	.word	0x40002000
 80027a0:	00003e7f 	.word	0x00003e7f
 80027a4:	00001387 	.word	0x00001387

080027a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80027ac:	4b23      	ldr	r3, [pc, #140]	; (800283c <MX_USART1_UART_Init+0x94>)
 80027ae:	4a24      	ldr	r2, [pc, #144]	; (8002840 <MX_USART1_UART_Init+0x98>)
 80027b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80027b2:	4b22      	ldr	r3, [pc, #136]	; (800283c <MX_USART1_UART_Init+0x94>)
 80027b4:	22e1      	movs	r2, #225	; 0xe1
 80027b6:	0252      	lsls	r2, r2, #9
 80027b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80027ba:	4b20      	ldr	r3, [pc, #128]	; (800283c <MX_USART1_UART_Init+0x94>)
 80027bc:	2200      	movs	r2, #0
 80027be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80027c0:	4b1e      	ldr	r3, [pc, #120]	; (800283c <MX_USART1_UART_Init+0x94>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80027c6:	4b1d      	ldr	r3, [pc, #116]	; (800283c <MX_USART1_UART_Init+0x94>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80027cc:	4b1b      	ldr	r3, [pc, #108]	; (800283c <MX_USART1_UART_Init+0x94>)
 80027ce:	220c      	movs	r2, #12
 80027d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027d2:	4b1a      	ldr	r3, [pc, #104]	; (800283c <MX_USART1_UART_Init+0x94>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80027d8:	4b18      	ldr	r3, [pc, #96]	; (800283c <MX_USART1_UART_Init+0x94>)
 80027da:	2200      	movs	r2, #0
 80027dc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027de:	4b17      	ldr	r3, [pc, #92]	; (800283c <MX_USART1_UART_Init+0x94>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80027e4:	4b15      	ldr	r3, [pc, #84]	; (800283c <MX_USART1_UART_Init+0x94>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027ea:	4b14      	ldr	r3, [pc, #80]	; (800283c <MX_USART1_UART_Init+0x94>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80027f0:	4b12      	ldr	r3, [pc, #72]	; (800283c <MX_USART1_UART_Init+0x94>)
 80027f2:	0018      	movs	r0, r3
 80027f4:	f002 fc42 	bl	800507c <HAL_UART_Init>
 80027f8:	1e03      	subs	r3, r0, #0
 80027fa:	d001      	beq.n	8002800 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80027fc:	f000 fae2 	bl	8002dc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002800:	4b0e      	ldr	r3, [pc, #56]	; (800283c <MX_USART1_UART_Init+0x94>)
 8002802:	2100      	movs	r1, #0
 8002804:	0018      	movs	r0, r3
 8002806:	f003 ff91 	bl	800672c <HAL_UARTEx_SetTxFifoThreshold>
 800280a:	1e03      	subs	r3, r0, #0
 800280c:	d001      	beq.n	8002812 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800280e:	f000 fad9 	bl	8002dc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002812:	4b0a      	ldr	r3, [pc, #40]	; (800283c <MX_USART1_UART_Init+0x94>)
 8002814:	2100      	movs	r1, #0
 8002816:	0018      	movs	r0, r3
 8002818:	f003 ffc8 	bl	80067ac <HAL_UARTEx_SetRxFifoThreshold>
 800281c:	1e03      	subs	r3, r0, #0
 800281e:	d001      	beq.n	8002824 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002820:	f000 fad0 	bl	8002dc4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002824:	4b05      	ldr	r3, [pc, #20]	; (800283c <MX_USART1_UART_Init+0x94>)
 8002826:	0018      	movs	r0, r3
 8002828:	f003 ff46 	bl	80066b8 <HAL_UARTEx_DisableFifoMode>
 800282c:	1e03      	subs	r3, r0, #0
 800282e:	d001      	beq.n	8002834 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002830:	f000 fac8 	bl	8002dc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002834:	46c0      	nop			; (mov r8, r8)
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	46c0      	nop			; (mov r8, r8)
 800283c:	200002b8 	.word	0x200002b8
 8002840:	40013800 	.word	0x40013800

08002844 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800284a:	4b0c      	ldr	r3, [pc, #48]	; (800287c <MX_DMA_Init+0x38>)
 800284c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800284e:	4b0b      	ldr	r3, [pc, #44]	; (800287c <MX_DMA_Init+0x38>)
 8002850:	2101      	movs	r1, #1
 8002852:	430a      	orrs	r2, r1
 8002854:	639a      	str	r2, [r3, #56]	; 0x38
 8002856:	4b09      	ldr	r3, [pc, #36]	; (800287c <MX_DMA_Init+0x38>)
 8002858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800285a:	2201      	movs	r2, #1
 800285c:	4013      	ands	r3, r2
 800285e:	607b      	str	r3, [r7, #4]
 8002860:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002862:	2200      	movs	r2, #0
 8002864:	2100      	movs	r1, #0
 8002866:	2009      	movs	r0, #9
 8002868:	f000 fdf2 	bl	8003450 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800286c:	2009      	movs	r0, #9
 800286e:	f000 fe04 	bl	800347a <HAL_NVIC_EnableIRQ>

}
 8002872:	46c0      	nop			; (mov r8, r8)
 8002874:	46bd      	mov	sp, r7
 8002876:	b002      	add	sp, #8
 8002878:	bd80      	pop	{r7, pc}
 800287a:	46c0      	nop			; (mov r8, r8)
 800287c:	40021000 	.word	0x40021000

08002880 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002880:	b590      	push	{r4, r7, lr}
 8002882:	b089      	sub	sp, #36	; 0x24
 8002884:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002886:	240c      	movs	r4, #12
 8002888:	193b      	adds	r3, r7, r4
 800288a:	0018      	movs	r0, r3
 800288c:	2314      	movs	r3, #20
 800288e:	001a      	movs	r2, r3
 8002890:	2100      	movs	r1, #0
 8002892:	f004 f8da 	bl	8006a4a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002896:	4b28      	ldr	r3, [pc, #160]	; (8002938 <MX_GPIO_Init+0xb8>)
 8002898:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800289a:	4b27      	ldr	r3, [pc, #156]	; (8002938 <MX_GPIO_Init+0xb8>)
 800289c:	2104      	movs	r1, #4
 800289e:	430a      	orrs	r2, r1
 80028a0:	635a      	str	r2, [r3, #52]	; 0x34
 80028a2:	4b25      	ldr	r3, [pc, #148]	; (8002938 <MX_GPIO_Init+0xb8>)
 80028a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028a6:	2204      	movs	r2, #4
 80028a8:	4013      	ands	r3, r2
 80028aa:	60bb      	str	r3, [r7, #8]
 80028ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80028ae:	4b22      	ldr	r3, [pc, #136]	; (8002938 <MX_GPIO_Init+0xb8>)
 80028b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028b2:	4b21      	ldr	r3, [pc, #132]	; (8002938 <MX_GPIO_Init+0xb8>)
 80028b4:	2120      	movs	r1, #32
 80028b6:	430a      	orrs	r2, r1
 80028b8:	635a      	str	r2, [r3, #52]	; 0x34
 80028ba:	4b1f      	ldr	r3, [pc, #124]	; (8002938 <MX_GPIO_Init+0xb8>)
 80028bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028be:	2220      	movs	r2, #32
 80028c0:	4013      	ands	r3, r2
 80028c2:	607b      	str	r3, [r7, #4]
 80028c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028c6:	4b1c      	ldr	r3, [pc, #112]	; (8002938 <MX_GPIO_Init+0xb8>)
 80028c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028ca:	4b1b      	ldr	r3, [pc, #108]	; (8002938 <MX_GPIO_Init+0xb8>)
 80028cc:	2101      	movs	r1, #1
 80028ce:	430a      	orrs	r2, r1
 80028d0:	635a      	str	r2, [r3, #52]	; 0x34
 80028d2:	4b19      	ldr	r3, [pc, #100]	; (8002938 <MX_GPIO_Init+0xb8>)
 80028d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028d6:	2201      	movs	r2, #1
 80028d8:	4013      	ands	r3, r2
 80028da:	603b      	str	r3, [r7, #0]
 80028dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, GPIO_PIN_RESET);
 80028de:	4b17      	ldr	r3, [pc, #92]	; (800293c <MX_GPIO_Init+0xbc>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	2140      	movs	r1, #64	; 0x40
 80028e4:	0018      	movs	r0, r3
 80028e6:	f001 fa67 	bl	8003db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : T_NRST_Pin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 80028ea:	193b      	adds	r3, r7, r4
 80028ec:	2204      	movs	r2, #4
 80028ee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80028f0:	193b      	adds	r3, r7, r4
 80028f2:	2288      	movs	r2, #136	; 0x88
 80028f4:	0352      	lsls	r2, r2, #13
 80028f6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f8:	193b      	adds	r3, r7, r4
 80028fa:	2200      	movs	r2, #0
 80028fc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 80028fe:	193b      	adds	r3, r7, r4
 8002900:	4a0f      	ldr	r2, [pc, #60]	; (8002940 <MX_GPIO_Init+0xc0>)
 8002902:	0019      	movs	r1, r3
 8002904:	0010      	movs	r0, r2
 8002906:	f001 f8f3 	bl	8003af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_Pin */
  GPIO_InitStruct.Pin = GREEN_Pin;
 800290a:	0021      	movs	r1, r4
 800290c:	187b      	adds	r3, r7, r1
 800290e:	2240      	movs	r2, #64	; 0x40
 8002910:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002912:	187b      	adds	r3, r7, r1
 8002914:	2201      	movs	r2, #1
 8002916:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002918:	187b      	adds	r3, r7, r1
 800291a:	2200      	movs	r2, #0
 800291c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800291e:	187b      	adds	r3, r7, r1
 8002920:	2200      	movs	r2, #0
 8002922:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GREEN_GPIO_Port, &GPIO_InitStruct);
 8002924:	187b      	adds	r3, r7, r1
 8002926:	4a05      	ldr	r2, [pc, #20]	; (800293c <MX_GPIO_Init+0xbc>)
 8002928:	0019      	movs	r1, r3
 800292a:	0010      	movs	r0, r2
 800292c:	f001 f8e0 	bl	8003af0 <HAL_GPIO_Init>

}
 8002930:	46c0      	nop			; (mov r8, r8)
 8002932:	46bd      	mov	sp, r7
 8002934:	b009      	add	sp, #36	; 0x24
 8002936:	bd90      	pop	{r4, r7, pc}
 8002938:	40021000 	.word	0x40021000
 800293c:	50000800 	.word	0x50000800
 8002940:	50001400 	.word	0x50001400

08002944 <m138_get_voltage>:

/* USER CODE BEGIN 4 */
float m138_get_voltage ()
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
	float m138_voltage = 0.0 ;
 800294a:	2300      	movs	r3, #0
 800294c:	607b      	str	r3, [r7, #4]
	char* chunk = malloc ( 30 * sizeof (char) ) ;
 800294e:	201e      	movs	r0, #30
 8002950:	f004 f85e 	bl	8006a10 <malloc>
 8002954:	0003      	movs	r3, r0
 8002956:	603b      	str	r3, [r7, #0]
	send_at_command_2_swarm ( pw_mostrecent_at , pw_mostrecent_answer , 14 ) ;
 8002958:	4b15      	ldr	r3, [pc, #84]	; (80029b0 <m138_get_voltage+0x6c>)
 800295a:	6818      	ldr	r0, [r3, #0]
 800295c:	4b15      	ldr	r3, [pc, #84]	; (80029b4 <m138_get_voltage+0x70>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	220e      	movs	r2, #14
 8002962:	0019      	movs	r1, r3
 8002964:	f000 f92c 	bl	8002bc0 <send_at_command_2_swarm>
	if ( swarm_checklist == 14 )
 8002968:	4b13      	ldr	r3, [pc, #76]	; (80029b8 <m138_get_voltage+0x74>)
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	2b0e      	cmp	r3, #14
 800296e:	d115      	bne.n	800299c <m138_get_voltage+0x58>
	{
		chunk = strtok ( (char*) swarm_uart_rx_buff , " " ) ;
 8002970:	4a12      	ldr	r2, [pc, #72]	; (80029bc <m138_get_voltage+0x78>)
 8002972:	4b13      	ldr	r3, [pc, #76]	; (80029c0 <m138_get_voltage+0x7c>)
 8002974:	0011      	movs	r1, r2
 8002976:	0018      	movs	r0, r3
 8002978:	f005 f818 	bl	80079ac <strtok>
 800297c:	0003      	movs	r3, r0
 800297e:	603b      	str	r3, [r7, #0]
		chunk = strtok ( NULL , "," ) ;
 8002980:	4b10      	ldr	r3, [pc, #64]	; (80029c4 <m138_get_voltage+0x80>)
 8002982:	0019      	movs	r1, r3
 8002984:	2000      	movs	r0, #0
 8002986:	f005 f811 	bl	80079ac <strtok>
 800298a:	0003      	movs	r3, r0
 800298c:	603b      	str	r3, [r7, #0]
		m138_voltage = (float) strtof ( chunk , NULL ) ;
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	2100      	movs	r1, #0
 8002992:	0018      	movs	r0, r3
 8002994:	f004 ffb4 	bl	8007900 <strtof>
 8002998:	1c03      	adds	r3, r0, #0
 800299a:	607b      	str	r3, [r7, #4]
	}
	free ( chunk ) ;
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	0018      	movs	r0, r3
 80029a0:	f004 f840 	bl	8006a24 <free>
	//clean_array ( swarm_uart_rx_buff , SWARM_UART_RX_MAX_BUFF_SIZE ) ;
	return m138_voltage ;
 80029a4:	687b      	ldr	r3, [r7, #4]
}
 80029a6:	1c18      	adds	r0, r3, #0
 80029a8:	46bd      	mov	sp, r7
 80029aa:	b002      	add	sp, #8
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	46c0      	nop			; (mov r8, r8)
 80029b0:	20000014 	.word	0x20000014
 80029b4:	2000004c 	.word	0x2000004c
 80029b8:	2000056b 	.word	0x2000056b
 80029bc:	08009fe8 	.word	0x08009fe8
 80029c0:	200003a8 	.word	0x200003a8
 80029c4:	08009fec 	.word	0x08009fec

080029c8 <m138_init>:

void m138_init ()
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
	send_at_command_2_swarm ( cs_at , cs_answer , 1 ) ;
 80029ce:	4b5d      	ldr	r3, [pc, #372]	; (8002b44 <m138_init+0x17c>)
 80029d0:	6818      	ldr	r0, [r3, #0]
 80029d2:	4b5d      	ldr	r3, [pc, #372]	; (8002b48 <m138_init+0x180>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2201      	movs	r2, #1
 80029d8:	0019      	movs	r1, r3
 80029da:	f000 f8f1 	bl	8002bc0 <send_at_command_2_swarm>
	if ( swarm_checklist == 1 )
 80029de:	4b5b      	ldr	r3, [pc, #364]	; (8002b4c <m138_init+0x184>)
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d125      	bne.n	8002a32 <m138_init+0x6a>
	{
		char* chunk = malloc ( 20 * sizeof (char) ) ;
 80029e6:	2014      	movs	r0, #20
 80029e8:	f004 f812 	bl	8006a10 <malloc>
 80029ec:	0003      	movs	r3, r0
 80029ee:	607b      	str	r3, [r7, #4]
		chunk = strtok ( (char*) swarm_answer_buff , "=" ) ;
 80029f0:	4a57      	ldr	r2, [pc, #348]	; (8002b50 <m138_init+0x188>)
 80029f2:	4b58      	ldr	r3, [pc, #352]	; (8002b54 <m138_init+0x18c>)
 80029f4:	0011      	movs	r1, r2
 80029f6:	0018      	movs	r0, r3
 80029f8:	f004 ffd8 	bl	80079ac <strtok>
 80029fc:	0003      	movs	r3, r0
 80029fe:	607b      	str	r3, [r7, #4]
		chunk = strtok ( NULL , "," ) ;
 8002a00:	4b55      	ldr	r3, [pc, #340]	; (8002b58 <m138_init+0x190>)
 8002a02:	0019      	movs	r1, r3
 8002a04:	2000      	movs	r0, #0
 8002a06:	f004 ffd1 	bl	80079ac <strtok>
 8002a0a:	0003      	movs	r3, r0
 8002a0c:	607b      	str	r3, [r7, #4]
		swarm_dev_id = (uint32_t) strtol ( chunk , NULL , 16 ) ;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2210      	movs	r2, #16
 8002a12:	2100      	movs	r1, #0
 8002a14:	0018      	movs	r0, r3
 8002a16:	f005 f8bb 	bl	8007b90 <strtol>
 8002a1a:	0003      	movs	r3, r0
 8002a1c:	001a      	movs	r2, r3
 8002a1e:	4b4f      	ldr	r3, [pc, #316]	; (8002b5c <m138_init+0x194>)
 8002a20:	601a      	str	r2, [r3, #0]
		//free ( chunk ) ;
		//clean_array ( swarm_uart_rx_buff , SWARM_UART_RX_MAX_BUFF_SIZE ) ;
		send_at_command_2_swarm ( rt_0_at , rt_ok_answer , 2 ) ;
 8002a22:	4b4f      	ldr	r3, [pc, #316]	; (8002b60 <m138_init+0x198>)
 8002a24:	6818      	ldr	r0, [r3, #0]
 8002a26:	4b4f      	ldr	r3, [pc, #316]	; (8002b64 <m138_init+0x19c>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	0019      	movs	r1, r3
 8002a2e:	f000 f8c7 	bl	8002bc0 <send_at_command_2_swarm>
	}
	if ( swarm_checklist == 2 )
 8002a32:	4b46      	ldr	r3, [pc, #280]	; (8002b4c <m138_init+0x184>)
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d107      	bne.n	8002a4a <m138_init+0x82>
		send_at_command_2_swarm ( rt_q_rate_at , rt_0_answer , 3 ) ;
 8002a3a:	4b4b      	ldr	r3, [pc, #300]	; (8002b68 <m138_init+0x1a0>)
 8002a3c:	6818      	ldr	r0, [r3, #0]
 8002a3e:	4b4b      	ldr	r3, [pc, #300]	; (8002b6c <m138_init+0x1a4>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	2203      	movs	r2, #3
 8002a44:	0019      	movs	r1, r3
 8002a46:	f000 f8bb 	bl	8002bc0 <send_at_command_2_swarm>
	if ( swarm_checklist == 3 )
 8002a4a:	4b40      	ldr	r3, [pc, #256]	; (8002b4c <m138_init+0x184>)
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	2b03      	cmp	r3, #3
 8002a50:	d107      	bne.n	8002a62 <m138_init+0x9a>
		send_at_command_2_swarm ( pw_0_at , pw_ok_answer , 4 ) ;
 8002a52:	4b47      	ldr	r3, [pc, #284]	; (8002b70 <m138_init+0x1a8>)
 8002a54:	6818      	ldr	r0, [r3, #0]
 8002a56:	4b47      	ldr	r3, [pc, #284]	; (8002b74 <m138_init+0x1ac>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2204      	movs	r2, #4
 8002a5c:	0019      	movs	r1, r3
 8002a5e:	f000 f8af 	bl	8002bc0 <send_at_command_2_swarm>
	if ( swarm_checklist == 4 )
 8002a62:	4b3a      	ldr	r3, [pc, #232]	; (8002b4c <m138_init+0x184>)
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	2b04      	cmp	r3, #4
 8002a68:	d107      	bne.n	8002a7a <m138_init+0xb2>
		send_at_command_2_swarm ( pw_q_rate_at , pw_0_answer , 5 ) ;
 8002a6a:	4b43      	ldr	r3, [pc, #268]	; (8002b78 <m138_init+0x1b0>)
 8002a6c:	6818      	ldr	r0, [r3, #0]
 8002a6e:	4b43      	ldr	r3, [pc, #268]	; (8002b7c <m138_init+0x1b4>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2205      	movs	r2, #5
 8002a74:	0019      	movs	r1, r3
 8002a76:	f000 f8a3 	bl	8002bc0 <send_at_command_2_swarm>
	if ( swarm_checklist == 5 )
 8002a7a:	4b34      	ldr	r3, [pc, #208]	; (8002b4c <m138_init+0x184>)
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	2b05      	cmp	r3, #5
 8002a80:	d107      	bne.n	8002a92 <m138_init+0xca>
		send_at_command_2_swarm ( dt_0_at , dt_ok_answer , 6 ) ;
 8002a82:	4b3f      	ldr	r3, [pc, #252]	; (8002b80 <m138_init+0x1b8>)
 8002a84:	6818      	ldr	r0, [r3, #0]
 8002a86:	4b3f      	ldr	r3, [pc, #252]	; (8002b84 <m138_init+0x1bc>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2206      	movs	r2, #6
 8002a8c:	0019      	movs	r1, r3
 8002a8e:	f000 f897 	bl	8002bc0 <send_at_command_2_swarm>
	if ( swarm_checklist == 6 )
 8002a92:	4b2e      	ldr	r3, [pc, #184]	; (8002b4c <m138_init+0x184>)
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	2b06      	cmp	r3, #6
 8002a98:	d107      	bne.n	8002aaa <m138_init+0xe2>
		send_at_command_2_swarm ( dt_q_rate_at , dt_0_answer , 7 ) ;
 8002a9a:	4b3b      	ldr	r3, [pc, #236]	; (8002b88 <m138_init+0x1c0>)
 8002a9c:	6818      	ldr	r0, [r3, #0]
 8002a9e:	4b3b      	ldr	r3, [pc, #236]	; (8002b8c <m138_init+0x1c4>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2207      	movs	r2, #7
 8002aa4:	0019      	movs	r1, r3
 8002aa6:	f000 f88b 	bl	8002bc0 <send_at_command_2_swarm>
	if ( swarm_checklist == 7 )
 8002aaa:	4b28      	ldr	r3, [pc, #160]	; (8002b4c <m138_init+0x184>)
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	2b07      	cmp	r3, #7
 8002ab0:	d107      	bne.n	8002ac2 <m138_init+0xfa>
		send_at_command_2_swarm ( gs_0_at , gs_ok_answer  , 8 ) ;
 8002ab2:	4b37      	ldr	r3, [pc, #220]	; (8002b90 <m138_init+0x1c8>)
 8002ab4:	6818      	ldr	r0, [r3, #0]
 8002ab6:	4b37      	ldr	r3, [pc, #220]	; (8002b94 <m138_init+0x1cc>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2208      	movs	r2, #8
 8002abc:	0019      	movs	r1, r3
 8002abe:	f000 f87f 	bl	8002bc0 <send_at_command_2_swarm>
	if ( swarm_checklist == 8 )
 8002ac2:	4b22      	ldr	r3, [pc, #136]	; (8002b4c <m138_init+0x184>)
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	2b08      	cmp	r3, #8
 8002ac8:	d107      	bne.n	8002ada <m138_init+0x112>
		send_at_command_2_swarm ( gs_q_rate_at , gs_0_answer , 9 ) ;
 8002aca:	4b33      	ldr	r3, [pc, #204]	; (8002b98 <m138_init+0x1d0>)
 8002acc:	6818      	ldr	r0, [r3, #0]
 8002ace:	4b33      	ldr	r3, [pc, #204]	; (8002b9c <m138_init+0x1d4>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2209      	movs	r2, #9
 8002ad4:	0019      	movs	r1, r3
 8002ad6:	f000 f873 	bl	8002bc0 <send_at_command_2_swarm>
	if ( swarm_checklist == 9 )
 8002ada:	4b1c      	ldr	r3, [pc, #112]	; (8002b4c <m138_init+0x184>)
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	2b09      	cmp	r3, #9
 8002ae0:	d107      	bne.n	8002af2 <m138_init+0x12a>
		send_at_command_2_swarm ( gj_0_at , gj_ok_answer  , 10 ) ;
 8002ae2:	4b2f      	ldr	r3, [pc, #188]	; (8002ba0 <m138_init+0x1d8>)
 8002ae4:	6818      	ldr	r0, [r3, #0]
 8002ae6:	4b2f      	ldr	r3, [pc, #188]	; (8002ba4 <m138_init+0x1dc>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	220a      	movs	r2, #10
 8002aec:	0019      	movs	r1, r3
 8002aee:	f000 f867 	bl	8002bc0 <send_at_command_2_swarm>
	if ( swarm_checklist == 10 )
 8002af2:	4b16      	ldr	r3, [pc, #88]	; (8002b4c <m138_init+0x184>)
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	2b0a      	cmp	r3, #10
 8002af8:	d107      	bne.n	8002b0a <m138_init+0x142>
		send_at_command_2_swarm ( gj_q_rate_at , gj_0_answer , 11 ) ;
 8002afa:	4b2b      	ldr	r3, [pc, #172]	; (8002ba8 <m138_init+0x1e0>)
 8002afc:	6818      	ldr	r0, [r3, #0]
 8002afe:	4b2b      	ldr	r3, [pc, #172]	; (8002bac <m138_init+0x1e4>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	220b      	movs	r2, #11
 8002b04:	0019      	movs	r1, r3
 8002b06:	f000 f85b 	bl	8002bc0 <send_at_command_2_swarm>
	if ( swarm_checklist == 11 )
 8002b0a:	4b10      	ldr	r3, [pc, #64]	; (8002b4c <m138_init+0x184>)
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	2b0b      	cmp	r3, #11
 8002b10:	d107      	bne.n	8002b22 <m138_init+0x15a>
		send_at_command_2_swarm ( gn_0_at , gn_ok_answer  , 12 ) ;
 8002b12:	4b27      	ldr	r3, [pc, #156]	; (8002bb0 <m138_init+0x1e8>)
 8002b14:	6818      	ldr	r0, [r3, #0]
 8002b16:	4b27      	ldr	r3, [pc, #156]	; (8002bb4 <m138_init+0x1ec>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	220c      	movs	r2, #12
 8002b1c:	0019      	movs	r1, r3
 8002b1e:	f000 f84f 	bl	8002bc0 <send_at_command_2_swarm>
	if ( swarm_checklist == 12 )
 8002b22:	4b0a      	ldr	r3, [pc, #40]	; (8002b4c <m138_init+0x184>)
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	2b0c      	cmp	r3, #12
 8002b28:	d107      	bne.n	8002b3a <m138_init+0x172>
		send_at_command_2_swarm ( gn_q_rate_at , gn_0_answer , 13 ) ;
 8002b2a:	4b23      	ldr	r3, [pc, #140]	; (8002bb8 <m138_init+0x1f0>)
 8002b2c:	6818      	ldr	r0, [r3, #0]
 8002b2e:	4b23      	ldr	r3, [pc, #140]	; (8002bbc <m138_init+0x1f4>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	220d      	movs	r2, #13
 8002b34:	0019      	movs	r1, r3
 8002b36:	f000 f843 	bl	8002bc0 <send_at_command_2_swarm>
	//clean_array ( swarm_uart_rx_buff , SWARM_UART_RX_MAX_BUFF_SIZE ) ;
}
 8002b3a:	46c0      	nop			; (mov r8, r8)
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	b002      	add	sp, #8
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	46c0      	nop			; (mov r8, r8)
 8002b44:	20000000 	.word	0x20000000
 8002b48:	20000038 	.word	0x20000038
 8002b4c:	2000056b 	.word	0x2000056b
 8002b50:	08009ff0 	.word	0x08009ff0
 8002b54:	2000040c 	.word	0x2000040c
 8002b58:	08009fec 	.word	0x08009fec
 8002b5c:	2000056c 	.word	0x2000056c
 8002b60:	20000004 	.word	0x20000004
 8002b64:	2000003c 	.word	0x2000003c
 8002b68:	20000008 	.word	0x20000008
 8002b6c:	20000040 	.word	0x20000040
 8002b70:	2000000c 	.word	0x2000000c
 8002b74:	20000044 	.word	0x20000044
 8002b78:	20000010 	.word	0x20000010
 8002b7c:	20000048 	.word	0x20000048
 8002b80:	20000018 	.word	0x20000018
 8002b84:	20000050 	.word	0x20000050
 8002b88:	2000001c 	.word	0x2000001c
 8002b8c:	20000054 	.word	0x20000054
 8002b90:	20000020 	.word	0x20000020
 8002b94:	20000058 	.word	0x20000058
 8002b98:	20000024 	.word	0x20000024
 8002b9c:	2000005c 	.word	0x2000005c
 8002ba0:	20000028 	.word	0x20000028
 8002ba4:	20000060 	.word	0x20000060
 8002ba8:	2000002c 	.word	0x2000002c
 8002bac:	20000064 	.word	0x20000064
 8002bb0:	20000030 	.word	0x20000030
 8002bb4:	20000068 	.word	0x20000068
 8002bb8:	20000034 	.word	0x20000034
 8002bbc:	2000006c 	.word	0x2000006c

08002bc0 <send_at_command_2_swarm>:

void send_at_command_2_swarm ( const char* at_command , const char* answer , uint16_t step )
{
 8002bc0:	b5b0      	push	{r4, r5, r7, lr}
 8002bc2:	b086      	sub	sp, #24
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	1dbb      	adds	r3, r7, #6
 8002bcc:	801a      	strh	r2, [r3, #0]
	uint8_t t ;
	uint8_t cs = nmea_checksum ( at_command , strlen ( at_command ) ) ;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	0018      	movs	r0, r3
 8002bd2:	f7fd fa97 	bl	8000104 <strlen>
 8002bd6:	0002      	movs	r2, r0
 8002bd8:	2516      	movs	r5, #22
 8002bda:	197c      	adds	r4, r7, r5
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	0011      	movs	r1, r2
 8002be0:	0018      	movs	r0, r3
 8002be2:	f000 f87b 	bl	8002cdc <nmea_checksum>
 8002be6:	0003      	movs	r3, r0
 8002be8:	7023      	strb	r3, [r4, #0]
	sprintf ( swarm_uart_tx_buff , "%s*%02x\n" , at_command , cs ) ;
 8002bea:	197b      	adds	r3, r7, r5
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	4930      	ldr	r1, [pc, #192]	; (8002cb4 <send_at_command_2_swarm+0xf4>)
 8002bf2:	4831      	ldr	r0, [pc, #196]	; (8002cb8 <send_at_command_2_swarm+0xf8>)
 8002bf4:	f004 f826 	bl	8006c44 <siprintf>

	for ( t = 0 ; t < 5 ; t++ )
 8002bf8:	2317      	movs	r3, #23
 8002bfa:	18fb      	adds	r3, r7, r3
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	701a      	strb	r2, [r3, #0]
 8002c00:	e04c      	b.n	8002c9c <send_at_command_2_swarm+0xdc>
	{
		tim14_on = 1 ;
 8002c02:	4b2e      	ldr	r3, [pc, #184]	; (8002cbc <send_at_command_2_swarm+0xfc>)
 8002c04:	2201      	movs	r2, #1
 8002c06:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Start_IT ( &htim14 ) ;
 8002c08:	4b2d      	ldr	r3, [pc, #180]	; (8002cc0 <send_at_command_2_swarm+0x100>)
 8002c0a:	0018      	movs	r0, r3
 8002c0c:	f001 ffd4 	bl	8004bb8 <HAL_TIM_Base_Start_IT>
		//Usunąc poniższe bo nie dziala do końca przez to
		answer_from_swarm = 0 ;
 8002c10:	4b2c      	ldr	r3, [pc, #176]	; (8002cc4 <send_at_command_2_swarm+0x104>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	701a      	strb	r2, [r3, #0]
		//clean_array ( swarm_uart_rx_buff , SWARM_UART_RX_MAX_BUFF_SIZE ) ;
		//clean_array ( swarm_answer_buff , SWARM_ANSWER_MAX_BUFF_SIZE ) ;
		HAL_UARTEx_ReceiveToIdle_DMA ( SWARM_UART_HANDLER , (uint8_t*) swarm_uart_rx_buff , SWARM_UART_RX_MAX_BUFF_SIZE ) ;
 8002c16:	492c      	ldr	r1, [pc, #176]	; (8002cc8 <send_at_command_2_swarm+0x108>)
 8002c18:	4b2c      	ldr	r3, [pc, #176]	; (8002ccc <send_at_command_2_swarm+0x10c>)
 8002c1a:	2264      	movs	r2, #100	; 0x64
 8002c1c:	0018      	movs	r0, r3
 8002c1e:	f003 fe07 	bl	8006830 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT ( &hdma_usart1_rx, DMA_IT_HT ) ; //Disable Half Transfer interrupt.
 8002c22:	4b2b      	ldr	r3, [pc, #172]	; (8002cd0 <send_at_command_2_swarm+0x110>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	4b29      	ldr	r3, [pc, #164]	; (8002cd0 <send_at_command_2_swarm+0x110>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2104      	movs	r1, #4
 8002c2e:	438a      	bics	r2, r1
 8002c30:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit ( SWARM_UART_HANDLER , (uint8_t*) swarm_uart_tx_buff ,  strlen ( swarm_uart_tx_buff ) , SWARM_UART_UART_TX_TIMEOUT ) ;
 8002c32:	4b21      	ldr	r3, [pc, #132]	; (8002cb8 <send_at_command_2_swarm+0xf8>)
 8002c34:	0018      	movs	r0, r3
 8002c36:	f7fd fa65 	bl	8000104 <strlen>
 8002c3a:	0003      	movs	r3, r0
 8002c3c:	b29a      	uxth	r2, r3
 8002c3e:	491e      	ldr	r1, [pc, #120]	; (8002cb8 <send_at_command_2_swarm+0xf8>)
 8002c40:	4822      	ldr	r0, [pc, #136]	; (8002ccc <send_at_command_2_swarm+0x10c>)
 8002c42:	2364      	movs	r3, #100	; 0x64
 8002c44:	f002 fa70 	bl	8005128 <HAL_UART_Transmit>
		while ( tim14_on )
 8002c48:	e015      	b.n	8002c76 <send_at_command_2_swarm+0xb6>
		{
			if ( answer_from_swarm == 1 )
 8002c4a:	4b1e      	ldr	r3, [pc, #120]	; (8002cc4 <send_at_command_2_swarm+0x104>)
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d111      	bne.n	8002c76 <send_at_command_2_swarm+0xb6>
			{
				if ( strncmp ( swarm_answer_buff , answer , strlen ( answer ) ) == 0 )
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	0018      	movs	r0, r3
 8002c56:	f7fd fa55 	bl	8000104 <strlen>
 8002c5a:	0002      	movs	r2, r0
 8002c5c:	68b9      	ldr	r1, [r7, #8]
 8002c5e:	4b1d      	ldr	r3, [pc, #116]	; (8002cd4 <send_at_command_2_swarm+0x114>)
 8002c60:	0018      	movs	r0, r3
 8002c62:	f004 f80f 	bl	8006c84 <strncmp>
 8002c66:	1e03      	subs	r3, r0, #0
 8002c68:	d10a      	bne.n	8002c80 <send_at_command_2_swarm+0xc0>
					swarm_checklist = step ;
 8002c6a:	1dbb      	adds	r3, r7, #6
 8002c6c:	881b      	ldrh	r3, [r3, #0]
 8002c6e:	b2da      	uxtb	r2, r3
 8002c70:	4b19      	ldr	r3, [pc, #100]	; (8002cd8 <send_at_command_2_swarm+0x118>)
 8002c72:	701a      	strb	r2, [r3, #0]
				break ;
 8002c74:	e004      	b.n	8002c80 <send_at_command_2_swarm+0xc0>
		while ( tim14_on )
 8002c76:	4b11      	ldr	r3, [pc, #68]	; (8002cbc <send_at_command_2_swarm+0xfc>)
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d1e5      	bne.n	8002c4a <send_at_command_2_swarm+0x8a>
 8002c7e:	e000      	b.n	8002c82 <send_at_command_2_swarm+0xc2>
				break ;
 8002c80:	46c0      	nop			; (mov r8, r8)
			}
		}
		if ( swarm_checklist == step )
 8002c82:	4b15      	ldr	r3, [pc, #84]	; (8002cd8 <send_at_command_2_swarm+0x118>)
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	1dba      	adds	r2, r7, #6
 8002c8a:	8812      	ldrh	r2, [r2, #0]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d00b      	beq.n	8002ca8 <send_at_command_2_swarm+0xe8>
	for ( t = 0 ; t < 5 ; t++ )
 8002c90:	2117      	movs	r1, #23
 8002c92:	187b      	adds	r3, r7, r1
 8002c94:	781a      	ldrb	r2, [r3, #0]
 8002c96:	187b      	adds	r3, r7, r1
 8002c98:	3201      	adds	r2, #1
 8002c9a:	701a      	strb	r2, [r3, #0]
 8002c9c:	2317      	movs	r3, #23
 8002c9e:	18fb      	adds	r3, r7, r3
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	2b04      	cmp	r3, #4
 8002ca4:	d9ad      	bls.n	8002c02 <send_at_command_2_swarm+0x42>
			break ;
	}
	//clean_array ( swarm_answer_buff , SWARM_ANSWER_MAX_BUFF_SIZE ) ;
}
 8002ca6:	e000      	b.n	8002caa <send_at_command_2_swarm+0xea>
			break ;
 8002ca8:	46c0      	nop			; (mov r8, r8)
}
 8002caa:	46c0      	nop			; (mov r8, r8)
 8002cac:	46bd      	mov	sp, r7
 8002cae:	b006      	add	sp, #24
 8002cb0:	bdb0      	pop	{r4, r5, r7, pc}
 8002cb2:	46c0      	nop			; (mov r8, r8)
 8002cb4:	08009ff4 	.word	0x08009ff4
 8002cb8:	20000470 	.word	0x20000470
 8002cbc:	2000056a 	.word	0x2000056a
 8002cc0:	2000026c 	.word	0x2000026c
 8002cc4:	20000570 	.word	0x20000570
 8002cc8:	200003a8 	.word	0x200003a8
 8002ccc:	200002b8 	.word	0x200002b8
 8002cd0:	2000034c 	.word	0x2000034c
 8002cd4:	2000040c 	.word	0x2000040c
 8002cd8:	2000056b 	.word	0x2000056b

08002cdc <nmea_checksum>:
	for ( i = 0 ; i < array_max_size ; i++ )
		array[i] = 0 ;
}

uint8_t nmea_checksum ( const char *message , size_t len )
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
	size_t i = 0 ;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	60fb      	str	r3, [r7, #12]
	uint8_t cs ;
	if ( message [0] == '$' )
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	2b24      	cmp	r3, #36	; 0x24
 8002cf0:	d102      	bne.n	8002cf8 <nmea_checksum+0x1c>
		i++ ;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	60fb      	str	r3, [r7, #12]
	for ( cs = 0 ; ( i < len ) && message [i] ; i++ )
 8002cf8:	230b      	movs	r3, #11
 8002cfa:	18fb      	adds	r3, r7, r3
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	701a      	strb	r2, [r3, #0]
 8002d00:	e00c      	b.n	8002d1c <nmea_checksum+0x40>
		cs ^= ( (uint8_t) message [i] ) ;
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	18d3      	adds	r3, r2, r3
 8002d08:	7819      	ldrb	r1, [r3, #0]
 8002d0a:	220b      	movs	r2, #11
 8002d0c:	18bb      	adds	r3, r7, r2
 8002d0e:	18ba      	adds	r2, r7, r2
 8002d10:	7812      	ldrb	r2, [r2, #0]
 8002d12:	404a      	eors	r2, r1
 8002d14:	701a      	strb	r2, [r3, #0]
	for ( cs = 0 ; ( i < len ) && message [i] ; i++ )
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	3301      	adds	r3, #1
 8002d1a:	60fb      	str	r3, [r7, #12]
 8002d1c:	68fa      	ldr	r2, [r7, #12]
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d205      	bcs.n	8002d30 <nmea_checksum+0x54>
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	18d3      	adds	r3, r2, r3
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1e8      	bne.n	8002d02 <nmea_checksum+0x26>
	return cs;
 8002d30:	230b      	movs	r3, #11
 8002d32:	18fb      	adds	r3, r7, r3
 8002d34:	781b      	ldrb	r3, [r3, #0]
}
 8002d36:	0018      	movs	r0, r3
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	b004      	add	sp, #16
 8002d3c:	bd80      	pop	{r7, pc}
	...

08002d40 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback ( UART_HandleTypeDef *huart , uint16_t Size )
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	000a      	movs	r2, r1
 8002d4a:	1cbb      	adds	r3, r7, #2
 8002d4c:	801a      	strh	r2, [r3, #0]
    if ( huart->Instance == USART1 )
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a0b      	ldr	r2, [pc, #44]	; (8002d80 <HAL_UARTEx_RxEventCallback+0x40>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d10e      	bne.n	8002d76 <HAL_UARTEx_RxEventCallback+0x36>
    {
    	memcpy ( swarm_answer_buff , swarm_uart_rx_buff , Size ) ;
 8002d58:	1cbb      	adds	r3, r7, #2
 8002d5a:	881a      	ldrh	r2, [r3, #0]
 8002d5c:	4909      	ldr	r1, [pc, #36]	; (8002d84 <HAL_UARTEx_RxEventCallback+0x44>)
 8002d5e:	4b0a      	ldr	r3, [pc, #40]	; (8002d88 <HAL_UARTEx_RxEventCallback+0x48>)
 8002d60:	0018      	movs	r0, r3
 8002d62:	f003 fe69 	bl	8006a38 <memcpy>
    	swarm_uart_rx_buff[Size] = '\0' ;
 8002d66:	1cbb      	adds	r3, r7, #2
 8002d68:	881b      	ldrh	r3, [r3, #0]
 8002d6a:	4a06      	ldr	r2, [pc, #24]	; (8002d84 <HAL_UARTEx_RxEventCallback+0x44>)
 8002d6c:	2100      	movs	r1, #0
 8002d6e:	54d1      	strb	r1, [r2, r3]
    	answer_from_swarm = 1 ;
 8002d70:	4b06      	ldr	r3, [pc, #24]	; (8002d8c <HAL_UARTEx_RxEventCallback+0x4c>)
 8002d72:	2201      	movs	r2, #1
 8002d74:	701a      	strb	r2, [r3, #0]
    }
}
 8002d76:	46c0      	nop			; (mov r8, r8)
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	b002      	add	sp, #8
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	46c0      	nop			; (mov r8, r8)
 8002d80:	40013800 	.word	0x40013800
 8002d84:	200003a8 	.word	0x200003a8
 8002d88:	2000040c 	.word	0x2000040c
 8002d8c:	20000570 	.word	0x20000570

08002d90 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
	if ( htim->Instance == TIM14 )
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a06      	ldr	r2, [pc, #24]	; (8002db8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d106      	bne.n	8002db0 <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		tim14_on = 0 ;
 8002da2:	4b06      	ldr	r3, [pc, #24]	; (8002dbc <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT ( &htim14 ) ;
 8002da8:	4b05      	ldr	r3, [pc, #20]	; (8002dc0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002daa:	0018      	movs	r0, r3
 8002dac:	f001 ff58 	bl	8004c60 <HAL_TIM_Base_Stop_IT>
	}
}
 8002db0:	46c0      	nop			; (mov r8, r8)
 8002db2:	46bd      	mov	sp, r7
 8002db4:	b002      	add	sp, #8
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	40002000 	.word	0x40002000
 8002dbc:	2000056a 	.word	0x2000056a
 8002dc0:	2000026c 	.word	0x2000026c

08002dc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002dc8:	b672      	cpsid	i
}
 8002dca:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002dcc:	e7fe      	b.n	8002dcc <Error_Handler+0x8>
	...

08002dd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dd6:	4b0f      	ldr	r3, [pc, #60]	; (8002e14 <HAL_MspInit+0x44>)
 8002dd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dda:	4b0e      	ldr	r3, [pc, #56]	; (8002e14 <HAL_MspInit+0x44>)
 8002ddc:	2101      	movs	r1, #1
 8002dde:	430a      	orrs	r2, r1
 8002de0:	641a      	str	r2, [r3, #64]	; 0x40
 8002de2:	4b0c      	ldr	r3, [pc, #48]	; (8002e14 <HAL_MspInit+0x44>)
 8002de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de6:	2201      	movs	r2, #1
 8002de8:	4013      	ands	r3, r2
 8002dea:	607b      	str	r3, [r7, #4]
 8002dec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002dee:	4b09      	ldr	r3, [pc, #36]	; (8002e14 <HAL_MspInit+0x44>)
 8002df0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002df2:	4b08      	ldr	r3, [pc, #32]	; (8002e14 <HAL_MspInit+0x44>)
 8002df4:	2180      	movs	r1, #128	; 0x80
 8002df6:	0549      	lsls	r1, r1, #21
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	63da      	str	r2, [r3, #60]	; 0x3c
 8002dfc:	4b05      	ldr	r3, [pc, #20]	; (8002e14 <HAL_MspInit+0x44>)
 8002dfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e00:	2380      	movs	r3, #128	; 0x80
 8002e02:	055b      	lsls	r3, r3, #21
 8002e04:	4013      	ands	r3, r2
 8002e06:	603b      	str	r3, [r7, #0]
 8002e08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e0a:	46c0      	nop			; (mov r8, r8)
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	b002      	add	sp, #8
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	46c0      	nop			; (mov r8, r8)
 8002e14:	40021000 	.word	0x40021000

08002e18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a0e      	ldr	r2, [pc, #56]	; (8002e60 <HAL_TIM_Base_MspInit+0x48>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d115      	bne.n	8002e56 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002e2a:	4b0e      	ldr	r3, [pc, #56]	; (8002e64 <HAL_TIM_Base_MspInit+0x4c>)
 8002e2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e2e:	4b0d      	ldr	r3, [pc, #52]	; (8002e64 <HAL_TIM_Base_MspInit+0x4c>)
 8002e30:	2180      	movs	r1, #128	; 0x80
 8002e32:	0209      	lsls	r1, r1, #8
 8002e34:	430a      	orrs	r2, r1
 8002e36:	641a      	str	r2, [r3, #64]	; 0x40
 8002e38:	4b0a      	ldr	r3, [pc, #40]	; (8002e64 <HAL_TIM_Base_MspInit+0x4c>)
 8002e3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e3c:	2380      	movs	r3, #128	; 0x80
 8002e3e:	021b      	lsls	r3, r3, #8
 8002e40:	4013      	ands	r3, r2
 8002e42:	60fb      	str	r3, [r7, #12]
 8002e44:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8002e46:	2200      	movs	r2, #0
 8002e48:	2100      	movs	r1, #0
 8002e4a:	2013      	movs	r0, #19
 8002e4c:	f000 fb00 	bl	8003450 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8002e50:	2013      	movs	r0, #19
 8002e52:	f000 fb12 	bl	800347a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8002e56:	46c0      	nop			; (mov r8, r8)
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	b004      	add	sp, #16
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	46c0      	nop			; (mov r8, r8)
 8002e60:	40002000 	.word	0x40002000
 8002e64:	40021000 	.word	0x40021000

08002e68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e68:	b590      	push	{r4, r7, lr}
 8002e6a:	b095      	sub	sp, #84	; 0x54
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e70:	233c      	movs	r3, #60	; 0x3c
 8002e72:	18fb      	adds	r3, r7, r3
 8002e74:	0018      	movs	r0, r3
 8002e76:	2314      	movs	r3, #20
 8002e78:	001a      	movs	r2, r3
 8002e7a:	2100      	movs	r1, #0
 8002e7c:	f003 fde5 	bl	8006a4a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e80:	2414      	movs	r4, #20
 8002e82:	193b      	adds	r3, r7, r4
 8002e84:	0018      	movs	r0, r3
 8002e86:	2328      	movs	r3, #40	; 0x28
 8002e88:	001a      	movs	r2, r3
 8002e8a:	2100      	movs	r1, #0
 8002e8c:	f003 fddd 	bl	8006a4a <memset>
  if(huart->Instance==USART1)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a3c      	ldr	r2, [pc, #240]	; (8002f88 <HAL_UART_MspInit+0x120>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d171      	bne.n	8002f7e <HAL_UART_MspInit+0x116>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002e9a:	193b      	adds	r3, r7, r4
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002ea0:	193b      	adds	r3, r7, r4
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ea6:	193b      	adds	r3, r7, r4
 8002ea8:	0018      	movs	r0, r3
 8002eaa:	f001 fcb3 	bl	8004814 <HAL_RCCEx_PeriphCLKConfig>
 8002eae:	1e03      	subs	r3, r0, #0
 8002eb0:	d001      	beq.n	8002eb6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002eb2:	f7ff ff87 	bl	8002dc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002eb6:	4b35      	ldr	r3, [pc, #212]	; (8002f8c <HAL_UART_MspInit+0x124>)
 8002eb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002eba:	4b34      	ldr	r3, [pc, #208]	; (8002f8c <HAL_UART_MspInit+0x124>)
 8002ebc:	2180      	movs	r1, #128	; 0x80
 8002ebe:	01c9      	lsls	r1, r1, #7
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	641a      	str	r2, [r3, #64]	; 0x40
 8002ec4:	4b31      	ldr	r3, [pc, #196]	; (8002f8c <HAL_UART_MspInit+0x124>)
 8002ec6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ec8:	2380      	movs	r3, #128	; 0x80
 8002eca:	01db      	lsls	r3, r3, #7
 8002ecc:	4013      	ands	r3, r2
 8002ece:	613b      	str	r3, [r7, #16]
 8002ed0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ed2:	4b2e      	ldr	r3, [pc, #184]	; (8002f8c <HAL_UART_MspInit+0x124>)
 8002ed4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ed6:	4b2d      	ldr	r3, [pc, #180]	; (8002f8c <HAL_UART_MspInit+0x124>)
 8002ed8:	2101      	movs	r1, #1
 8002eda:	430a      	orrs	r2, r1
 8002edc:	635a      	str	r2, [r3, #52]	; 0x34
 8002ede:	4b2b      	ldr	r3, [pc, #172]	; (8002f8c <HAL_UART_MspInit+0x124>)
 8002ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	60fb      	str	r3, [r7, #12]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002eea:	213c      	movs	r1, #60	; 0x3c
 8002eec:	187b      	adds	r3, r7, r1
 8002eee:	22c0      	movs	r2, #192	; 0xc0
 8002ef0:	00d2      	lsls	r2, r2, #3
 8002ef2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef4:	187b      	adds	r3, r7, r1
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efa:	187b      	adds	r3, r7, r1
 8002efc:	2200      	movs	r2, #0
 8002efe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f00:	187b      	adds	r3, r7, r1
 8002f02:	2200      	movs	r2, #0
 8002f04:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002f06:	187b      	adds	r3, r7, r1
 8002f08:	2201      	movs	r2, #1
 8002f0a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f0c:	187a      	adds	r2, r7, r1
 8002f0e:	23a0      	movs	r3, #160	; 0xa0
 8002f10:	05db      	lsls	r3, r3, #23
 8002f12:	0011      	movs	r1, r2
 8002f14:	0018      	movs	r0, r3
 8002f16:	f000 fdeb 	bl	8003af0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8002f1a:	4b1d      	ldr	r3, [pc, #116]	; (8002f90 <HAL_UART_MspInit+0x128>)
 8002f1c:	4a1d      	ldr	r2, [pc, #116]	; (8002f94 <HAL_UART_MspInit+0x12c>)
 8002f1e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002f20:	4b1b      	ldr	r3, [pc, #108]	; (8002f90 <HAL_UART_MspInit+0x128>)
 8002f22:	2232      	movs	r2, #50	; 0x32
 8002f24:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f26:	4b1a      	ldr	r3, [pc, #104]	; (8002f90 <HAL_UART_MspInit+0x128>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f2c:	4b18      	ldr	r3, [pc, #96]	; (8002f90 <HAL_UART_MspInit+0x128>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002f32:	4b17      	ldr	r3, [pc, #92]	; (8002f90 <HAL_UART_MspInit+0x128>)
 8002f34:	2280      	movs	r2, #128	; 0x80
 8002f36:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f38:	4b15      	ldr	r3, [pc, #84]	; (8002f90 <HAL_UART_MspInit+0x128>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f3e:	4b14      	ldr	r3, [pc, #80]	; (8002f90 <HAL_UART_MspInit+0x128>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002f44:	4b12      	ldr	r3, [pc, #72]	; (8002f90 <HAL_UART_MspInit+0x128>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002f4a:	4b11      	ldr	r3, [pc, #68]	; (8002f90 <HAL_UART_MspInit+0x128>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002f50:	4b0f      	ldr	r3, [pc, #60]	; (8002f90 <HAL_UART_MspInit+0x128>)
 8002f52:	0018      	movs	r0, r3
 8002f54:	f000 faae 	bl	80034b4 <HAL_DMA_Init>
 8002f58:	1e03      	subs	r3, r0, #0
 8002f5a:	d001      	beq.n	8002f60 <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 8002f5c:	f7ff ff32 	bl	8002dc4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2180      	movs	r1, #128	; 0x80
 8002f64:	4a0a      	ldr	r2, [pc, #40]	; (8002f90 <HAL_UART_MspInit+0x128>)
 8002f66:	505a      	str	r2, [r3, r1]
 8002f68:	4b09      	ldr	r3, [pc, #36]	; (8002f90 <HAL_UART_MspInit+0x128>)
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002f6e:	2200      	movs	r2, #0
 8002f70:	2100      	movs	r1, #0
 8002f72:	201b      	movs	r0, #27
 8002f74:	f000 fa6c 	bl	8003450 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002f78:	201b      	movs	r0, #27
 8002f7a:	f000 fa7e 	bl	800347a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002f7e:	46c0      	nop			; (mov r8, r8)
 8002f80:	46bd      	mov	sp, r7
 8002f82:	b015      	add	sp, #84	; 0x54
 8002f84:	bd90      	pop	{r4, r7, pc}
 8002f86:	46c0      	nop			; (mov r8, r8)
 8002f88:	40013800 	.word	0x40013800
 8002f8c:	40021000 	.word	0x40021000
 8002f90:	2000034c 	.word	0x2000034c
 8002f94:	40020008 	.word	0x40020008

08002f98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f9c:	e7fe      	b.n	8002f9c <NMI_Handler+0x4>

08002f9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fa2:	e7fe      	b.n	8002fa2 <HardFault_Handler+0x4>

08002fa4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002fa8:	46c0      	nop			; (mov r8, r8)
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002fb2:	46c0      	nop			; (mov r8, r8)
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fbc:	f000 f980 	bl	80032c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fc0:	46c0      	nop			; (mov r8, r8)
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
	...

08002fc8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002fcc:	4b03      	ldr	r3, [pc, #12]	; (8002fdc <DMA1_Channel1_IRQHandler+0x14>)
 8002fce:	0018      	movs	r0, r3
 8002fd0:	f000 fc4c 	bl	800386c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002fd4:	46c0      	nop			; (mov r8, r8)
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	46c0      	nop			; (mov r8, r8)
 8002fdc:	2000034c 	.word	0x2000034c

08002fe0 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002fe4:	4b03      	ldr	r3, [pc, #12]	; (8002ff4 <TIM14_IRQHandler+0x14>)
 8002fe6:	0018      	movs	r0, r3
 8002fe8:	f001 fe68 	bl	8004cbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8002fec:	46c0      	nop			; (mov r8, r8)
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	46c0      	nop			; (mov r8, r8)
 8002ff4:	2000026c 	.word	0x2000026c

08002ff8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002ffc:	4b03      	ldr	r3, [pc, #12]	; (800300c <USART1_IRQHandler+0x14>)
 8002ffe:	0018      	movs	r0, r3
 8003000:	f002 f92e 	bl	8005260 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003004:	46c0      	nop			; (mov r8, r8)
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	46c0      	nop			; (mov r8, r8)
 800300c:	200002b8 	.word	0x200002b8

08003010 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	af00      	add	r7, sp, #0
	return 1;
 8003014:	2301      	movs	r3, #1
}
 8003016:	0018      	movs	r0, r3
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <_kill>:

int _kill(int pid, int sig)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003026:	f003 fcc9 	bl	80069bc <__errno>
 800302a:	0003      	movs	r3, r0
 800302c:	2216      	movs	r2, #22
 800302e:	601a      	str	r2, [r3, #0]
	return -1;
 8003030:	2301      	movs	r3, #1
 8003032:	425b      	negs	r3, r3
}
 8003034:	0018      	movs	r0, r3
 8003036:	46bd      	mov	sp, r7
 8003038:	b002      	add	sp, #8
 800303a:	bd80      	pop	{r7, pc}

0800303c <_exit>:

void _exit (int status)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003044:	2301      	movs	r3, #1
 8003046:	425a      	negs	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	0011      	movs	r1, r2
 800304c:	0018      	movs	r0, r3
 800304e:	f7ff ffe5 	bl	800301c <_kill>
	while (1) {}		/* Make sure we hang here */
 8003052:	e7fe      	b.n	8003052 <_exit+0x16>

08003054 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b086      	sub	sp, #24
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003060:	2300      	movs	r3, #0
 8003062:	617b      	str	r3, [r7, #20]
 8003064:	e00a      	b.n	800307c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003066:	e000      	b.n	800306a <_read+0x16>
 8003068:	bf00      	nop
 800306a:	0001      	movs	r1, r0
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	1c5a      	adds	r2, r3, #1
 8003070:	60ba      	str	r2, [r7, #8]
 8003072:	b2ca      	uxtb	r2, r1
 8003074:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	3301      	adds	r3, #1
 800307a:	617b      	str	r3, [r7, #20]
 800307c:	697a      	ldr	r2, [r7, #20]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	429a      	cmp	r2, r3
 8003082:	dbf0      	blt.n	8003066 <_read+0x12>
	}

return len;
 8003084:	687b      	ldr	r3, [r7, #4]
}
 8003086:	0018      	movs	r0, r3
 8003088:	46bd      	mov	sp, r7
 800308a:	b006      	add	sp, #24
 800308c:	bd80      	pop	{r7, pc}

0800308e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b086      	sub	sp, #24
 8003092:	af00      	add	r7, sp, #0
 8003094:	60f8      	str	r0, [r7, #12]
 8003096:	60b9      	str	r1, [r7, #8]
 8003098:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800309a:	2300      	movs	r3, #0
 800309c:	617b      	str	r3, [r7, #20]
 800309e:	e009      	b.n	80030b4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	1c5a      	adds	r2, r3, #1
 80030a4:	60ba      	str	r2, [r7, #8]
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	0018      	movs	r0, r3
 80030aa:	e000      	b.n	80030ae <_write+0x20>
 80030ac:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	3301      	adds	r3, #1
 80030b2:	617b      	str	r3, [r7, #20]
 80030b4:	697a      	ldr	r2, [r7, #20]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	dbf1      	blt.n	80030a0 <_write+0x12>
	}
	return len;
 80030bc:	687b      	ldr	r3, [r7, #4]
}
 80030be:	0018      	movs	r0, r3
 80030c0:	46bd      	mov	sp, r7
 80030c2:	b006      	add	sp, #24
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <_close>:

int _close(int file)
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b082      	sub	sp, #8
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
	return -1;
 80030ce:	2301      	movs	r3, #1
 80030d0:	425b      	negs	r3, r3
}
 80030d2:	0018      	movs	r0, r3
 80030d4:	46bd      	mov	sp, r7
 80030d6:	b002      	add	sp, #8
 80030d8:	bd80      	pop	{r7, pc}

080030da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80030da:	b580      	push	{r7, lr}
 80030dc:	b082      	sub	sp, #8
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
 80030e2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	2280      	movs	r2, #128	; 0x80
 80030e8:	0192      	lsls	r2, r2, #6
 80030ea:	605a      	str	r2, [r3, #4]
	return 0;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	0018      	movs	r0, r3
 80030f0:	46bd      	mov	sp, r7
 80030f2:	b002      	add	sp, #8
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <_isatty>:

int _isatty(int file)
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b082      	sub	sp, #8
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
	return 1;
 80030fe:	2301      	movs	r3, #1
}
 8003100:	0018      	movs	r0, r3
 8003102:	46bd      	mov	sp, r7
 8003104:	b002      	add	sp, #8
 8003106:	bd80      	pop	{r7, pc}

08003108 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	607a      	str	r2, [r7, #4]
	return 0;
 8003114:	2300      	movs	r3, #0
}
 8003116:	0018      	movs	r0, r3
 8003118:	46bd      	mov	sp, r7
 800311a:	b004      	add	sp, #16
 800311c:	bd80      	pop	{r7, pc}
	...

08003120 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b086      	sub	sp, #24
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003128:	4a14      	ldr	r2, [pc, #80]	; (800317c <_sbrk+0x5c>)
 800312a:	4b15      	ldr	r3, [pc, #84]	; (8003180 <_sbrk+0x60>)
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003134:	4b13      	ldr	r3, [pc, #76]	; (8003184 <_sbrk+0x64>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d102      	bne.n	8003142 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800313c:	4b11      	ldr	r3, [pc, #68]	; (8003184 <_sbrk+0x64>)
 800313e:	4a12      	ldr	r2, [pc, #72]	; (8003188 <_sbrk+0x68>)
 8003140:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003142:	4b10      	ldr	r3, [pc, #64]	; (8003184 <_sbrk+0x64>)
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	18d3      	adds	r3, r2, r3
 800314a:	693a      	ldr	r2, [r7, #16]
 800314c:	429a      	cmp	r2, r3
 800314e:	d207      	bcs.n	8003160 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003150:	f003 fc34 	bl	80069bc <__errno>
 8003154:	0003      	movs	r3, r0
 8003156:	220c      	movs	r2, #12
 8003158:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800315a:	2301      	movs	r3, #1
 800315c:	425b      	negs	r3, r3
 800315e:	e009      	b.n	8003174 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003160:	4b08      	ldr	r3, [pc, #32]	; (8003184 <_sbrk+0x64>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003166:	4b07      	ldr	r3, [pc, #28]	; (8003184 <_sbrk+0x64>)
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	18d2      	adds	r2, r2, r3
 800316e:	4b05      	ldr	r3, [pc, #20]	; (8003184 <_sbrk+0x64>)
 8003170:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003172:	68fb      	ldr	r3, [r7, #12]
}
 8003174:	0018      	movs	r0, r3
 8003176:	46bd      	mov	sp, r7
 8003178:	b006      	add	sp, #24
 800317a:	bd80      	pop	{r7, pc}
 800317c:	20002000 	.word	0x20002000
 8003180:	00000400 	.word	0x00000400
 8003184:	20000574 	.word	0x20000574
 8003188:	20000590 	.word	0x20000590

0800318c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003190:	46c0      	nop			; (mov r8, r8)
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
	...

08003198 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003198:	480d      	ldr	r0, [pc, #52]	; (80031d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800319a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800319c:	f7ff fff6 	bl	800318c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80031a0:	480c      	ldr	r0, [pc, #48]	; (80031d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80031a2:	490d      	ldr	r1, [pc, #52]	; (80031d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80031a4:	4a0d      	ldr	r2, [pc, #52]	; (80031dc <LoopForever+0xe>)
  movs r3, #0
 80031a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031a8:	e002      	b.n	80031b0 <LoopCopyDataInit>

080031aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031ae:	3304      	adds	r3, #4

080031b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031b4:	d3f9      	bcc.n	80031aa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031b6:	4a0a      	ldr	r2, [pc, #40]	; (80031e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80031b8:	4c0a      	ldr	r4, [pc, #40]	; (80031e4 <LoopForever+0x16>)
  movs r3, #0
 80031ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031bc:	e001      	b.n	80031c2 <LoopFillZerobss>

080031be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031c0:	3204      	adds	r2, #4

080031c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031c4:	d3fb      	bcc.n	80031be <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80031c6:	f003 fbff 	bl	80069c8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80031ca:	f7ff fa5f 	bl	800268c <main>

080031ce <LoopForever>:

LoopForever:
  b LoopForever
 80031ce:	e7fe      	b.n	80031ce <LoopForever>
  ldr   r0, =_estack
 80031d0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80031d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031d8:	20000250 	.word	0x20000250
  ldr r2, =_sidata
 80031dc:	0800a5a0 	.word	0x0800a5a0
  ldr r2, =_sbss
 80031e0:	20000250 	.word	0x20000250
  ldr r4, =_ebss
 80031e4:	2000058c 	.word	0x2000058c

080031e8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80031e8:	e7fe      	b.n	80031e8 <ADC1_IRQHandler>
	...

080031ec <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80031f2:	1dfb      	adds	r3, r7, #7
 80031f4:	2200      	movs	r2, #0
 80031f6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031f8:	4b0b      	ldr	r3, [pc, #44]	; (8003228 <HAL_Init+0x3c>)
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	4b0a      	ldr	r3, [pc, #40]	; (8003228 <HAL_Init+0x3c>)
 80031fe:	2180      	movs	r1, #128	; 0x80
 8003200:	0049      	lsls	r1, r1, #1
 8003202:	430a      	orrs	r2, r1
 8003204:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003206:	2000      	movs	r0, #0
 8003208:	f000 f810 	bl	800322c <HAL_InitTick>
 800320c:	1e03      	subs	r3, r0, #0
 800320e:	d003      	beq.n	8003218 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003210:	1dfb      	adds	r3, r7, #7
 8003212:	2201      	movs	r2, #1
 8003214:	701a      	strb	r2, [r3, #0]
 8003216:	e001      	b.n	800321c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003218:	f7ff fdda 	bl	8002dd0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800321c:	1dfb      	adds	r3, r7, #7
 800321e:	781b      	ldrb	r3, [r3, #0]
}
 8003220:	0018      	movs	r0, r3
 8003222:	46bd      	mov	sp, r7
 8003224:	b002      	add	sp, #8
 8003226:	bd80      	pop	{r7, pc}
 8003228:	40022000 	.word	0x40022000

0800322c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800322c:	b590      	push	{r4, r7, lr}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003234:	230f      	movs	r3, #15
 8003236:	18fb      	adds	r3, r7, r3
 8003238:	2200      	movs	r2, #0
 800323a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800323c:	4b1d      	ldr	r3, [pc, #116]	; (80032b4 <HAL_InitTick+0x88>)
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d02b      	beq.n	800329c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003244:	4b1c      	ldr	r3, [pc, #112]	; (80032b8 <HAL_InitTick+0x8c>)
 8003246:	681c      	ldr	r4, [r3, #0]
 8003248:	4b1a      	ldr	r3, [pc, #104]	; (80032b4 <HAL_InitTick+0x88>)
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	0019      	movs	r1, r3
 800324e:	23fa      	movs	r3, #250	; 0xfa
 8003250:	0098      	lsls	r0, r3, #2
 8003252:	f7fc ff73 	bl	800013c <__udivsi3>
 8003256:	0003      	movs	r3, r0
 8003258:	0019      	movs	r1, r3
 800325a:	0020      	movs	r0, r4
 800325c:	f7fc ff6e 	bl	800013c <__udivsi3>
 8003260:	0003      	movs	r3, r0
 8003262:	0018      	movs	r0, r3
 8003264:	f000 f919 	bl	800349a <HAL_SYSTICK_Config>
 8003268:	1e03      	subs	r3, r0, #0
 800326a:	d112      	bne.n	8003292 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2b03      	cmp	r3, #3
 8003270:	d80a      	bhi.n	8003288 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003272:	6879      	ldr	r1, [r7, #4]
 8003274:	2301      	movs	r3, #1
 8003276:	425b      	negs	r3, r3
 8003278:	2200      	movs	r2, #0
 800327a:	0018      	movs	r0, r3
 800327c:	f000 f8e8 	bl	8003450 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003280:	4b0e      	ldr	r3, [pc, #56]	; (80032bc <HAL_InitTick+0x90>)
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	601a      	str	r2, [r3, #0]
 8003286:	e00d      	b.n	80032a4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003288:	230f      	movs	r3, #15
 800328a:	18fb      	adds	r3, r7, r3
 800328c:	2201      	movs	r2, #1
 800328e:	701a      	strb	r2, [r3, #0]
 8003290:	e008      	b.n	80032a4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003292:	230f      	movs	r3, #15
 8003294:	18fb      	adds	r3, r7, r3
 8003296:	2201      	movs	r2, #1
 8003298:	701a      	strb	r2, [r3, #0]
 800329a:	e003      	b.n	80032a4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800329c:	230f      	movs	r3, #15
 800329e:	18fb      	adds	r3, r7, r3
 80032a0:	2201      	movs	r2, #1
 80032a2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80032a4:	230f      	movs	r3, #15
 80032a6:	18fb      	adds	r3, r7, r3
 80032a8:	781b      	ldrb	r3, [r3, #0]
}
 80032aa:	0018      	movs	r0, r3
 80032ac:	46bd      	mov	sp, r7
 80032ae:	b005      	add	sp, #20
 80032b0:	bd90      	pop	{r4, r7, pc}
 80032b2:	46c0      	nop			; (mov r8, r8)
 80032b4:	20000078 	.word	0x20000078
 80032b8:	20000070 	.word	0x20000070
 80032bc:	20000074 	.word	0x20000074

080032c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80032c4:	4b05      	ldr	r3, [pc, #20]	; (80032dc <HAL_IncTick+0x1c>)
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	001a      	movs	r2, r3
 80032ca:	4b05      	ldr	r3, [pc, #20]	; (80032e0 <HAL_IncTick+0x20>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	18d2      	adds	r2, r2, r3
 80032d0:	4b03      	ldr	r3, [pc, #12]	; (80032e0 <HAL_IncTick+0x20>)
 80032d2:	601a      	str	r2, [r3, #0]
}
 80032d4:	46c0      	nop			; (mov r8, r8)
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	46c0      	nop			; (mov r8, r8)
 80032dc:	20000078 	.word	0x20000078
 80032e0:	20000578 	.word	0x20000578

080032e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	af00      	add	r7, sp, #0
  return uwTick;
 80032e8:	4b02      	ldr	r3, [pc, #8]	; (80032f4 <HAL_GetTick+0x10>)
 80032ea:	681b      	ldr	r3, [r3, #0]
}
 80032ec:	0018      	movs	r0, r3
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	46c0      	nop			; (mov r8, r8)
 80032f4:	20000578 	.word	0x20000578

080032f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	0002      	movs	r2, r0
 8003300:	1dfb      	adds	r3, r7, #7
 8003302:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003304:	1dfb      	adds	r3, r7, #7
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	2b7f      	cmp	r3, #127	; 0x7f
 800330a:	d809      	bhi.n	8003320 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800330c:	1dfb      	adds	r3, r7, #7
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	001a      	movs	r2, r3
 8003312:	231f      	movs	r3, #31
 8003314:	401a      	ands	r2, r3
 8003316:	4b04      	ldr	r3, [pc, #16]	; (8003328 <__NVIC_EnableIRQ+0x30>)
 8003318:	2101      	movs	r1, #1
 800331a:	4091      	lsls	r1, r2
 800331c:	000a      	movs	r2, r1
 800331e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003320:	46c0      	nop			; (mov r8, r8)
 8003322:	46bd      	mov	sp, r7
 8003324:	b002      	add	sp, #8
 8003326:	bd80      	pop	{r7, pc}
 8003328:	e000e100 	.word	0xe000e100

0800332c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800332c:	b590      	push	{r4, r7, lr}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	0002      	movs	r2, r0
 8003334:	6039      	str	r1, [r7, #0]
 8003336:	1dfb      	adds	r3, r7, #7
 8003338:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800333a:	1dfb      	adds	r3, r7, #7
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	2b7f      	cmp	r3, #127	; 0x7f
 8003340:	d828      	bhi.n	8003394 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003342:	4a2f      	ldr	r2, [pc, #188]	; (8003400 <__NVIC_SetPriority+0xd4>)
 8003344:	1dfb      	adds	r3, r7, #7
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	b25b      	sxtb	r3, r3
 800334a:	089b      	lsrs	r3, r3, #2
 800334c:	33c0      	adds	r3, #192	; 0xc0
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	589b      	ldr	r3, [r3, r2]
 8003352:	1dfa      	adds	r2, r7, #7
 8003354:	7812      	ldrb	r2, [r2, #0]
 8003356:	0011      	movs	r1, r2
 8003358:	2203      	movs	r2, #3
 800335a:	400a      	ands	r2, r1
 800335c:	00d2      	lsls	r2, r2, #3
 800335e:	21ff      	movs	r1, #255	; 0xff
 8003360:	4091      	lsls	r1, r2
 8003362:	000a      	movs	r2, r1
 8003364:	43d2      	mvns	r2, r2
 8003366:	401a      	ands	r2, r3
 8003368:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	019b      	lsls	r3, r3, #6
 800336e:	22ff      	movs	r2, #255	; 0xff
 8003370:	401a      	ands	r2, r3
 8003372:	1dfb      	adds	r3, r7, #7
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	0018      	movs	r0, r3
 8003378:	2303      	movs	r3, #3
 800337a:	4003      	ands	r3, r0
 800337c:	00db      	lsls	r3, r3, #3
 800337e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003380:	481f      	ldr	r0, [pc, #124]	; (8003400 <__NVIC_SetPriority+0xd4>)
 8003382:	1dfb      	adds	r3, r7, #7
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	b25b      	sxtb	r3, r3
 8003388:	089b      	lsrs	r3, r3, #2
 800338a:	430a      	orrs	r2, r1
 800338c:	33c0      	adds	r3, #192	; 0xc0
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003392:	e031      	b.n	80033f8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003394:	4a1b      	ldr	r2, [pc, #108]	; (8003404 <__NVIC_SetPriority+0xd8>)
 8003396:	1dfb      	adds	r3, r7, #7
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	0019      	movs	r1, r3
 800339c:	230f      	movs	r3, #15
 800339e:	400b      	ands	r3, r1
 80033a0:	3b08      	subs	r3, #8
 80033a2:	089b      	lsrs	r3, r3, #2
 80033a4:	3306      	adds	r3, #6
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	18d3      	adds	r3, r2, r3
 80033aa:	3304      	adds	r3, #4
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	1dfa      	adds	r2, r7, #7
 80033b0:	7812      	ldrb	r2, [r2, #0]
 80033b2:	0011      	movs	r1, r2
 80033b4:	2203      	movs	r2, #3
 80033b6:	400a      	ands	r2, r1
 80033b8:	00d2      	lsls	r2, r2, #3
 80033ba:	21ff      	movs	r1, #255	; 0xff
 80033bc:	4091      	lsls	r1, r2
 80033be:	000a      	movs	r2, r1
 80033c0:	43d2      	mvns	r2, r2
 80033c2:	401a      	ands	r2, r3
 80033c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	019b      	lsls	r3, r3, #6
 80033ca:	22ff      	movs	r2, #255	; 0xff
 80033cc:	401a      	ands	r2, r3
 80033ce:	1dfb      	adds	r3, r7, #7
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	0018      	movs	r0, r3
 80033d4:	2303      	movs	r3, #3
 80033d6:	4003      	ands	r3, r0
 80033d8:	00db      	lsls	r3, r3, #3
 80033da:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033dc:	4809      	ldr	r0, [pc, #36]	; (8003404 <__NVIC_SetPriority+0xd8>)
 80033de:	1dfb      	adds	r3, r7, #7
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	001c      	movs	r4, r3
 80033e4:	230f      	movs	r3, #15
 80033e6:	4023      	ands	r3, r4
 80033e8:	3b08      	subs	r3, #8
 80033ea:	089b      	lsrs	r3, r3, #2
 80033ec:	430a      	orrs	r2, r1
 80033ee:	3306      	adds	r3, #6
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	18c3      	adds	r3, r0, r3
 80033f4:	3304      	adds	r3, #4
 80033f6:	601a      	str	r2, [r3, #0]
}
 80033f8:	46c0      	nop			; (mov r8, r8)
 80033fa:	46bd      	mov	sp, r7
 80033fc:	b003      	add	sp, #12
 80033fe:	bd90      	pop	{r4, r7, pc}
 8003400:	e000e100 	.word	0xe000e100
 8003404:	e000ed00 	.word	0xe000ed00

08003408 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	1e5a      	subs	r2, r3, #1
 8003414:	2380      	movs	r3, #128	; 0x80
 8003416:	045b      	lsls	r3, r3, #17
 8003418:	429a      	cmp	r2, r3
 800341a:	d301      	bcc.n	8003420 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800341c:	2301      	movs	r3, #1
 800341e:	e010      	b.n	8003442 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003420:	4b0a      	ldr	r3, [pc, #40]	; (800344c <SysTick_Config+0x44>)
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	3a01      	subs	r2, #1
 8003426:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003428:	2301      	movs	r3, #1
 800342a:	425b      	negs	r3, r3
 800342c:	2103      	movs	r1, #3
 800342e:	0018      	movs	r0, r3
 8003430:	f7ff ff7c 	bl	800332c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003434:	4b05      	ldr	r3, [pc, #20]	; (800344c <SysTick_Config+0x44>)
 8003436:	2200      	movs	r2, #0
 8003438:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800343a:	4b04      	ldr	r3, [pc, #16]	; (800344c <SysTick_Config+0x44>)
 800343c:	2207      	movs	r2, #7
 800343e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003440:	2300      	movs	r3, #0
}
 8003442:	0018      	movs	r0, r3
 8003444:	46bd      	mov	sp, r7
 8003446:	b002      	add	sp, #8
 8003448:	bd80      	pop	{r7, pc}
 800344a:	46c0      	nop			; (mov r8, r8)
 800344c:	e000e010 	.word	0xe000e010

08003450 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	60b9      	str	r1, [r7, #8]
 8003458:	607a      	str	r2, [r7, #4]
 800345a:	210f      	movs	r1, #15
 800345c:	187b      	adds	r3, r7, r1
 800345e:	1c02      	adds	r2, r0, #0
 8003460:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003462:	68ba      	ldr	r2, [r7, #8]
 8003464:	187b      	adds	r3, r7, r1
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	b25b      	sxtb	r3, r3
 800346a:	0011      	movs	r1, r2
 800346c:	0018      	movs	r0, r3
 800346e:	f7ff ff5d 	bl	800332c <__NVIC_SetPriority>
}
 8003472:	46c0      	nop			; (mov r8, r8)
 8003474:	46bd      	mov	sp, r7
 8003476:	b004      	add	sp, #16
 8003478:	bd80      	pop	{r7, pc}

0800347a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800347a:	b580      	push	{r7, lr}
 800347c:	b082      	sub	sp, #8
 800347e:	af00      	add	r7, sp, #0
 8003480:	0002      	movs	r2, r0
 8003482:	1dfb      	adds	r3, r7, #7
 8003484:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003486:	1dfb      	adds	r3, r7, #7
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	b25b      	sxtb	r3, r3
 800348c:	0018      	movs	r0, r3
 800348e:	f7ff ff33 	bl	80032f8 <__NVIC_EnableIRQ>
}
 8003492:	46c0      	nop			; (mov r8, r8)
 8003494:	46bd      	mov	sp, r7
 8003496:	b002      	add	sp, #8
 8003498:	bd80      	pop	{r7, pc}

0800349a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800349a:	b580      	push	{r7, lr}
 800349c:	b082      	sub	sp, #8
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	0018      	movs	r0, r3
 80034a6:	f7ff ffaf 	bl	8003408 <SysTick_Config>
 80034aa:	0003      	movs	r3, r0
}
 80034ac:	0018      	movs	r0, r3
 80034ae:	46bd      	mov	sp, r7
 80034b0:	b002      	add	sp, #8
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d101      	bne.n	80034c6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e077      	b.n	80035b6 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a3d      	ldr	r2, [pc, #244]	; (80035c0 <HAL_DMA_Init+0x10c>)
 80034cc:	4694      	mov	ip, r2
 80034ce:	4463      	add	r3, ip
 80034d0:	2114      	movs	r1, #20
 80034d2:	0018      	movs	r0, r3
 80034d4:	f7fc fe32 	bl	800013c <__udivsi3>
 80034d8:	0003      	movs	r3, r0
 80034da:	009a      	lsls	r2, r3, #2
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2225      	movs	r2, #37	; 0x25
 80034e4:	2102      	movs	r1, #2
 80034e6:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4934      	ldr	r1, [pc, #208]	; (80035c4 <HAL_DMA_Init+0x110>)
 80034f4:	400a      	ands	r2, r1
 80034f6:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	6819      	ldr	r1, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	689a      	ldr	r2, [r3, #8]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	431a      	orrs	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	431a      	orrs	r2, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	431a      	orrs	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	699b      	ldr	r3, [r3, #24]
 8003518:	431a      	orrs	r2, r3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	69db      	ldr	r3, [r3, #28]
 800351e:	431a      	orrs	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a1b      	ldr	r3, [r3, #32]
 8003524:	431a      	orrs	r2, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	430a      	orrs	r2, r1
 800352c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	0018      	movs	r0, r3
 8003532:	f000 fa8d 	bl	8003a50 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	689a      	ldr	r2, [r3, #8]
 800353a:	2380      	movs	r3, #128	; 0x80
 800353c:	01db      	lsls	r3, r3, #7
 800353e:	429a      	cmp	r2, r3
 8003540:	d102      	bne.n	8003548 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685a      	ldr	r2, [r3, #4]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003550:	213f      	movs	r1, #63	; 0x3f
 8003552:	400a      	ands	r2, r1
 8003554:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800355e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d011      	beq.n	800358c <HAL_DMA_Init+0xd8>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	2b04      	cmp	r3, #4
 800356e:	d80d      	bhi.n	800358c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	0018      	movs	r0, r3
 8003574:	f000 fa98 	bl	8003aa8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800357c:	2200      	movs	r2, #0
 800357e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003588:	605a      	str	r2, [r3, #4]
 800358a:	e008      	b.n	800359e <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2225      	movs	r2, #37	; 0x25
 80035a8:	2101      	movs	r1, #1
 80035aa:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2224      	movs	r2, #36	; 0x24
 80035b0:	2100      	movs	r1, #0
 80035b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	0018      	movs	r0, r3
 80035b8:	46bd      	mov	sp, r7
 80035ba:	b002      	add	sp, #8
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	46c0      	nop			; (mov r8, r8)
 80035c0:	bffdfff8 	.word	0xbffdfff8
 80035c4:	ffff800f 	.word	0xffff800f

080035c8 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b086      	sub	sp, #24
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
 80035d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035d6:	2317      	movs	r3, #23
 80035d8:	18fb      	adds	r3, r7, r3
 80035da:	2200      	movs	r2, #0
 80035dc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2224      	movs	r2, #36	; 0x24
 80035e2:	5c9b      	ldrb	r3, [r3, r2]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d101      	bne.n	80035ec <HAL_DMA_Start_IT+0x24>
 80035e8:	2302      	movs	r3, #2
 80035ea:	e06f      	b.n	80036cc <HAL_DMA_Start_IT+0x104>
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2224      	movs	r2, #36	; 0x24
 80035f0:	2101      	movs	r1, #1
 80035f2:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2225      	movs	r2, #37	; 0x25
 80035f8:	5c9b      	ldrb	r3, [r3, r2]
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d157      	bne.n	80036b0 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2225      	movs	r2, #37	; 0x25
 8003604:	2102      	movs	r1, #2
 8003606:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2200      	movs	r2, #0
 800360c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2101      	movs	r1, #1
 800361a:	438a      	bics	r2, r1
 800361c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	68b9      	ldr	r1, [r7, #8]
 8003624:	68f8      	ldr	r0, [r7, #12]
 8003626:	f000 f9d3 	bl	80039d0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362e:	2b00      	cmp	r3, #0
 8003630:	d008      	beq.n	8003644 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	210e      	movs	r1, #14
 800363e:	430a      	orrs	r2, r1
 8003640:	601a      	str	r2, [r3, #0]
 8003642:	e00f      	b.n	8003664 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2104      	movs	r1, #4
 8003650:	438a      	bics	r2, r1
 8003652:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	210a      	movs	r1, #10
 8003660:	430a      	orrs	r2, r1
 8003662:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	2380      	movs	r3, #128	; 0x80
 800366c:	025b      	lsls	r3, r3, #9
 800366e:	4013      	ands	r3, r2
 8003670:	d008      	beq.n	8003684 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800367c:	2180      	movs	r1, #128	; 0x80
 800367e:	0049      	lsls	r1, r1, #1
 8003680:	430a      	orrs	r2, r1
 8003682:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003688:	2b00      	cmp	r3, #0
 800368a:	d008      	beq.n	800369e <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003696:	2180      	movs	r1, #128	; 0x80
 8003698:	0049      	lsls	r1, r1, #1
 800369a:	430a      	orrs	r2, r1
 800369c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2101      	movs	r1, #1
 80036aa:	430a      	orrs	r2, r1
 80036ac:	601a      	str	r2, [r3, #0]
 80036ae:	e00a      	b.n	80036c6 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2280      	movs	r2, #128	; 0x80
 80036b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2224      	movs	r2, #36	; 0x24
 80036ba:	2100      	movs	r1, #0
 80036bc:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 80036be:	2317      	movs	r3, #23
 80036c0:	18fb      	adds	r3, r7, r3
 80036c2:	2201      	movs	r2, #1
 80036c4:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80036c6:	2317      	movs	r3, #23
 80036c8:	18fb      	adds	r3, r7, r3
 80036ca:	781b      	ldrb	r3, [r3, #0]
}
 80036cc:	0018      	movs	r0, r3
 80036ce:	46bd      	mov	sp, r7
 80036d0:	b006      	add	sp, #24
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d101      	bne.n	80036e6 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e050      	b.n	8003788 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2225      	movs	r2, #37	; 0x25
 80036ea:	5c9b      	ldrb	r3, [r3, r2]
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d008      	beq.n	8003704 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2204      	movs	r2, #4
 80036f6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2224      	movs	r2, #36	; 0x24
 80036fc:	2100      	movs	r1, #0
 80036fe:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e041      	b.n	8003788 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	210e      	movs	r1, #14
 8003710:	438a      	bics	r2, r1
 8003712:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800371e:	491c      	ldr	r1, [pc, #112]	; (8003790 <HAL_DMA_Abort+0xbc>)
 8003720:	400a      	ands	r2, r1
 8003722:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2101      	movs	r1, #1
 8003730:	438a      	bics	r2, r1
 8003732:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8003734:	4b17      	ldr	r3, [pc, #92]	; (8003794 <HAL_DMA_Abort+0xc0>)
 8003736:	6859      	ldr	r1, [r3, #4]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373c:	221c      	movs	r2, #28
 800373e:	4013      	ands	r3, r2
 8003740:	2201      	movs	r2, #1
 8003742:	409a      	lsls	r2, r3
 8003744:	4b13      	ldr	r3, [pc, #76]	; (8003794 <HAL_DMA_Abort+0xc0>)
 8003746:	430a      	orrs	r2, r1
 8003748:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003752:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003758:	2b00      	cmp	r3, #0
 800375a:	d00c      	beq.n	8003776 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003766:	490a      	ldr	r1, [pc, #40]	; (8003790 <HAL_DMA_Abort+0xbc>)
 8003768:	400a      	ands	r2, r1
 800376a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003774:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2225      	movs	r2, #37	; 0x25
 800377a:	2101      	movs	r1, #1
 800377c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2224      	movs	r2, #36	; 0x24
 8003782:	2100      	movs	r1, #0
 8003784:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	0018      	movs	r0, r3
 800378a:	46bd      	mov	sp, r7
 800378c:	b002      	add	sp, #8
 800378e:	bd80      	pop	{r7, pc}
 8003790:	fffffeff 	.word	0xfffffeff
 8003794:	40020000 	.word	0x40020000

08003798 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037a0:	210f      	movs	r1, #15
 80037a2:	187b      	adds	r3, r7, r1
 80037a4:	2200      	movs	r2, #0
 80037a6:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2225      	movs	r2, #37	; 0x25
 80037ac:	5c9b      	ldrb	r3, [r3, r2]
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d006      	beq.n	80037c2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2204      	movs	r2, #4
 80037b8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80037ba:	187b      	adds	r3, r7, r1
 80037bc:	2201      	movs	r2, #1
 80037be:	701a      	strb	r2, [r3, #0]
 80037c0:	e049      	b.n	8003856 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	210e      	movs	r1, #14
 80037ce:	438a      	bics	r2, r1
 80037d0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2101      	movs	r1, #1
 80037de:	438a      	bics	r2, r1
 80037e0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ec:	491d      	ldr	r1, [pc, #116]	; (8003864 <HAL_DMA_Abort_IT+0xcc>)
 80037ee:	400a      	ands	r2, r1
 80037f0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80037f2:	4b1d      	ldr	r3, [pc, #116]	; (8003868 <HAL_DMA_Abort_IT+0xd0>)
 80037f4:	6859      	ldr	r1, [r3, #4]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fa:	221c      	movs	r2, #28
 80037fc:	4013      	ands	r3, r2
 80037fe:	2201      	movs	r2, #1
 8003800:	409a      	lsls	r2, r3
 8003802:	4b19      	ldr	r3, [pc, #100]	; (8003868 <HAL_DMA_Abort_IT+0xd0>)
 8003804:	430a      	orrs	r2, r1
 8003806:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003810:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00c      	beq.n	8003834 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003824:	490f      	ldr	r1, [pc, #60]	; (8003864 <HAL_DMA_Abort_IT+0xcc>)
 8003826:	400a      	ands	r2, r1
 8003828:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003832:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2225      	movs	r2, #37	; 0x25
 8003838:	2101      	movs	r1, #1
 800383a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2224      	movs	r2, #36	; 0x24
 8003840:	2100      	movs	r1, #0
 8003842:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003848:	2b00      	cmp	r3, #0
 800384a:	d004      	beq.n	8003856 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	0010      	movs	r0, r2
 8003854:	4798      	blx	r3
    }
  }
  return status;
 8003856:	230f      	movs	r3, #15
 8003858:	18fb      	adds	r3, r7, r3
 800385a:	781b      	ldrb	r3, [r3, #0]
}
 800385c:	0018      	movs	r0, r3
 800385e:	46bd      	mov	sp, r7
 8003860:	b004      	add	sp, #16
 8003862:	bd80      	pop	{r7, pc}
 8003864:	fffffeff 	.word	0xfffffeff
 8003868:	40020000 	.word	0x40020000

0800386c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8003874:	4b55      	ldr	r3, [pc, #340]	; (80039cc <HAL_DMA_IRQHandler+0x160>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003886:	221c      	movs	r2, #28
 8003888:	4013      	ands	r3, r2
 800388a:	2204      	movs	r2, #4
 800388c:	409a      	lsls	r2, r3
 800388e:	0013      	movs	r3, r2
 8003890:	68fa      	ldr	r2, [r7, #12]
 8003892:	4013      	ands	r3, r2
 8003894:	d027      	beq.n	80038e6 <HAL_DMA_IRQHandler+0x7a>
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	2204      	movs	r2, #4
 800389a:	4013      	ands	r3, r2
 800389c:	d023      	beq.n	80038e6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2220      	movs	r2, #32
 80038a6:	4013      	ands	r3, r2
 80038a8:	d107      	bne.n	80038ba <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2104      	movs	r1, #4
 80038b6:	438a      	bics	r2, r1
 80038b8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80038ba:	4b44      	ldr	r3, [pc, #272]	; (80039cc <HAL_DMA_IRQHandler+0x160>)
 80038bc:	6859      	ldr	r1, [r3, #4]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c2:	221c      	movs	r2, #28
 80038c4:	4013      	ands	r3, r2
 80038c6:	2204      	movs	r2, #4
 80038c8:	409a      	lsls	r2, r3
 80038ca:	4b40      	ldr	r3, [pc, #256]	; (80039cc <HAL_DMA_IRQHandler+0x160>)
 80038cc:	430a      	orrs	r2, r1
 80038ce:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d100      	bne.n	80038da <HAL_DMA_IRQHandler+0x6e>
 80038d8:	e073      	b.n	80039c2 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	0010      	movs	r0, r2
 80038e2:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80038e4:	e06d      	b.n	80039c2 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ea:	221c      	movs	r2, #28
 80038ec:	4013      	ands	r3, r2
 80038ee:	2202      	movs	r2, #2
 80038f0:	409a      	lsls	r2, r3
 80038f2:	0013      	movs	r3, r2
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	4013      	ands	r3, r2
 80038f8:	d02e      	beq.n	8003958 <HAL_DMA_IRQHandler+0xec>
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	2202      	movs	r2, #2
 80038fe:	4013      	ands	r3, r2
 8003900:	d02a      	beq.n	8003958 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2220      	movs	r2, #32
 800390a:	4013      	ands	r3, r2
 800390c:	d10b      	bne.n	8003926 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	210a      	movs	r1, #10
 800391a:	438a      	bics	r2, r1
 800391c:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2225      	movs	r2, #37	; 0x25
 8003922:	2101      	movs	r1, #1
 8003924:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003926:	4b29      	ldr	r3, [pc, #164]	; (80039cc <HAL_DMA_IRQHandler+0x160>)
 8003928:	6859      	ldr	r1, [r3, #4]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392e:	221c      	movs	r2, #28
 8003930:	4013      	ands	r3, r2
 8003932:	2202      	movs	r2, #2
 8003934:	409a      	lsls	r2, r3
 8003936:	4b25      	ldr	r3, [pc, #148]	; (80039cc <HAL_DMA_IRQHandler+0x160>)
 8003938:	430a      	orrs	r2, r1
 800393a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2224      	movs	r2, #36	; 0x24
 8003940:	2100      	movs	r1, #0
 8003942:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003948:	2b00      	cmp	r3, #0
 800394a:	d03a      	beq.n	80039c2 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	0010      	movs	r0, r2
 8003954:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8003956:	e034      	b.n	80039c2 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395c:	221c      	movs	r2, #28
 800395e:	4013      	ands	r3, r2
 8003960:	2208      	movs	r2, #8
 8003962:	409a      	lsls	r2, r3
 8003964:	0013      	movs	r3, r2
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	4013      	ands	r3, r2
 800396a:	d02b      	beq.n	80039c4 <HAL_DMA_IRQHandler+0x158>
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	2208      	movs	r2, #8
 8003970:	4013      	ands	r3, r2
 8003972:	d027      	beq.n	80039c4 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	210e      	movs	r1, #14
 8003980:	438a      	bics	r2, r1
 8003982:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003984:	4b11      	ldr	r3, [pc, #68]	; (80039cc <HAL_DMA_IRQHandler+0x160>)
 8003986:	6859      	ldr	r1, [r3, #4]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398c:	221c      	movs	r2, #28
 800398e:	4013      	ands	r3, r2
 8003990:	2201      	movs	r2, #1
 8003992:	409a      	lsls	r2, r3
 8003994:	4b0d      	ldr	r3, [pc, #52]	; (80039cc <HAL_DMA_IRQHandler+0x160>)
 8003996:	430a      	orrs	r2, r1
 8003998:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2201      	movs	r2, #1
 800399e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2225      	movs	r2, #37	; 0x25
 80039a4:	2101      	movs	r1, #1
 80039a6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2224      	movs	r2, #36	; 0x24
 80039ac:	2100      	movs	r1, #0
 80039ae:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d005      	beq.n	80039c4 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	0010      	movs	r0, r2
 80039c0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80039c2:	46c0      	nop			; (mov r8, r8)
 80039c4:	46c0      	nop			; (mov r8, r8)
}
 80039c6:	46bd      	mov	sp, r7
 80039c8:	b004      	add	sp, #16
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	40020000 	.word	0x40020000

080039d0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	607a      	str	r2, [r7, #4]
 80039dc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039e2:	68fa      	ldr	r2, [r7, #12]
 80039e4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80039e6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d004      	beq.n	80039fa <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80039f8:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80039fa:	4b14      	ldr	r3, [pc, #80]	; (8003a4c <DMA_SetConfig+0x7c>)
 80039fc:	6859      	ldr	r1, [r3, #4]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a02:	221c      	movs	r2, #28
 8003a04:	4013      	ands	r3, r2
 8003a06:	2201      	movs	r2, #1
 8003a08:	409a      	lsls	r2, r3
 8003a0a:	4b10      	ldr	r3, [pc, #64]	; (8003a4c <DMA_SetConfig+0x7c>)
 8003a0c:	430a      	orrs	r2, r1
 8003a0e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	683a      	ldr	r2, [r7, #0]
 8003a16:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	2b10      	cmp	r3, #16
 8003a1e:	d108      	bne.n	8003a32 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68ba      	ldr	r2, [r7, #8]
 8003a2e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003a30:	e007      	b.n	8003a42 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68ba      	ldr	r2, [r7, #8]
 8003a38:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	60da      	str	r2, [r3, #12]
}
 8003a42:	46c0      	nop			; (mov r8, r8)
 8003a44:	46bd      	mov	sp, r7
 8003a46:	b004      	add	sp, #16
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	46c0      	nop			; (mov r8, r8)
 8003a4c:	40020000 	.word	0x40020000

08003a50 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5c:	089b      	lsrs	r3, r3, #2
 8003a5e:	4a10      	ldr	r2, [pc, #64]	; (8003aa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8003a60:	4694      	mov	ip, r2
 8003a62:	4463      	add	r3, ip
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	001a      	movs	r2, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	001a      	movs	r2, r3
 8003a72:	23ff      	movs	r3, #255	; 0xff
 8003a74:	4013      	ands	r3, r2
 8003a76:	3b08      	subs	r3, #8
 8003a78:	2114      	movs	r1, #20
 8003a7a:	0018      	movs	r0, r3
 8003a7c:	f7fc fb5e 	bl	800013c <__udivsi3>
 8003a80:	0003      	movs	r3, r0
 8003a82:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a07      	ldr	r2, [pc, #28]	; (8003aa4 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003a88:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	221f      	movs	r2, #31
 8003a8e:	4013      	ands	r3, r2
 8003a90:	2201      	movs	r2, #1
 8003a92:	409a      	lsls	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8003a98:	46c0      	nop			; (mov r8, r8)
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	b004      	add	sp, #16
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	10008200 	.word	0x10008200
 8003aa4:	40020880 	.word	0x40020880

08003aa8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	223f      	movs	r2, #63	; 0x3f
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	4a0a      	ldr	r2, [pc, #40]	; (8003ae8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003abe:	4694      	mov	ip, r2
 8003ac0:	4463      	add	r3, ip
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	001a      	movs	r2, r3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a07      	ldr	r2, [pc, #28]	; (8003aec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003ace:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	2203      	movs	r2, #3
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	2201      	movs	r2, #1
 8003ada:	409a      	lsls	r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	659a      	str	r2, [r3, #88]	; 0x58
}
 8003ae0:	46c0      	nop			; (mov r8, r8)
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	b004      	add	sp, #16
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	1000823f 	.word	0x1000823f
 8003aec:	40020940 	.word	0x40020940

08003af0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b086      	sub	sp, #24
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003afa:	2300      	movs	r3, #0
 8003afc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003afe:	e147      	b.n	8003d90 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2101      	movs	r1, #1
 8003b06:	697a      	ldr	r2, [r7, #20]
 8003b08:	4091      	lsls	r1, r2
 8003b0a:	000a      	movs	r2, r1
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d100      	bne.n	8003b18 <HAL_GPIO_Init+0x28>
 8003b16:	e138      	b.n	8003d8a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	2203      	movs	r2, #3
 8003b1e:	4013      	ands	r3, r2
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d005      	beq.n	8003b30 <HAL_GPIO_Init+0x40>
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	2203      	movs	r2, #3
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d130      	bne.n	8003b92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	005b      	lsls	r3, r3, #1
 8003b3a:	2203      	movs	r2, #3
 8003b3c:	409a      	lsls	r2, r3
 8003b3e:	0013      	movs	r3, r2
 8003b40:	43da      	mvns	r2, r3
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	4013      	ands	r3, r2
 8003b46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	68da      	ldr	r2, [r3, #12]
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	005b      	lsls	r3, r3, #1
 8003b50:	409a      	lsls	r2, r3
 8003b52:	0013      	movs	r3, r2
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	693a      	ldr	r2, [r7, #16]
 8003b5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b66:	2201      	movs	r2, #1
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	409a      	lsls	r2, r3
 8003b6c:	0013      	movs	r3, r2
 8003b6e:	43da      	mvns	r2, r3
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	4013      	ands	r3, r2
 8003b74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	091b      	lsrs	r3, r3, #4
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	401a      	ands	r2, r3
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	409a      	lsls	r2, r3
 8003b84:	0013      	movs	r3, r2
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	693a      	ldr	r2, [r7, #16]
 8003b90:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	2203      	movs	r2, #3
 8003b98:	4013      	ands	r3, r2
 8003b9a:	2b03      	cmp	r3, #3
 8003b9c:	d017      	beq.n	8003bce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	005b      	lsls	r3, r3, #1
 8003ba8:	2203      	movs	r2, #3
 8003baa:	409a      	lsls	r2, r3
 8003bac:	0013      	movs	r3, r2
 8003bae:	43da      	mvns	r2, r3
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	689a      	ldr	r2, [r3, #8]
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	005b      	lsls	r3, r3, #1
 8003bbe:	409a      	lsls	r2, r3
 8003bc0:	0013      	movs	r3, r2
 8003bc2:	693a      	ldr	r2, [r7, #16]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	693a      	ldr	r2, [r7, #16]
 8003bcc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	2203      	movs	r2, #3
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d123      	bne.n	8003c22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	08da      	lsrs	r2, r3, #3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	3208      	adds	r2, #8
 8003be2:	0092      	lsls	r2, r2, #2
 8003be4:	58d3      	ldr	r3, [r2, r3]
 8003be6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	2207      	movs	r2, #7
 8003bec:	4013      	ands	r3, r2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	220f      	movs	r2, #15
 8003bf2:	409a      	lsls	r2, r3
 8003bf4:	0013      	movs	r3, r2
 8003bf6:	43da      	mvns	r2, r3
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	691a      	ldr	r2, [r3, #16]
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	2107      	movs	r1, #7
 8003c06:	400b      	ands	r3, r1
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	409a      	lsls	r2, r3
 8003c0c:	0013      	movs	r3, r2
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	08da      	lsrs	r2, r3, #3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	3208      	adds	r2, #8
 8003c1c:	0092      	lsls	r2, r2, #2
 8003c1e:	6939      	ldr	r1, [r7, #16]
 8003c20:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	005b      	lsls	r3, r3, #1
 8003c2c:	2203      	movs	r2, #3
 8003c2e:	409a      	lsls	r2, r3
 8003c30:	0013      	movs	r3, r2
 8003c32:	43da      	mvns	r2, r3
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	4013      	ands	r3, r2
 8003c38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	2203      	movs	r2, #3
 8003c40:	401a      	ands	r2, r3
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	005b      	lsls	r3, r3, #1
 8003c46:	409a      	lsls	r2, r3
 8003c48:	0013      	movs	r3, r2
 8003c4a:	693a      	ldr	r2, [r7, #16]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	685a      	ldr	r2, [r3, #4]
 8003c5a:	23c0      	movs	r3, #192	; 0xc0
 8003c5c:	029b      	lsls	r3, r3, #10
 8003c5e:	4013      	ands	r3, r2
 8003c60:	d100      	bne.n	8003c64 <HAL_GPIO_Init+0x174>
 8003c62:	e092      	b.n	8003d8a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003c64:	4a50      	ldr	r2, [pc, #320]	; (8003da8 <HAL_GPIO_Init+0x2b8>)
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	089b      	lsrs	r3, r3, #2
 8003c6a:	3318      	adds	r3, #24
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	589b      	ldr	r3, [r3, r2]
 8003c70:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	2203      	movs	r2, #3
 8003c76:	4013      	ands	r3, r2
 8003c78:	00db      	lsls	r3, r3, #3
 8003c7a:	220f      	movs	r2, #15
 8003c7c:	409a      	lsls	r2, r3
 8003c7e:	0013      	movs	r3, r2
 8003c80:	43da      	mvns	r2, r3
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	4013      	ands	r3, r2
 8003c86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	23a0      	movs	r3, #160	; 0xa0
 8003c8c:	05db      	lsls	r3, r3, #23
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d013      	beq.n	8003cba <HAL_GPIO_Init+0x1ca>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a45      	ldr	r2, [pc, #276]	; (8003dac <HAL_GPIO_Init+0x2bc>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d00d      	beq.n	8003cb6 <HAL_GPIO_Init+0x1c6>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a44      	ldr	r2, [pc, #272]	; (8003db0 <HAL_GPIO_Init+0x2c0>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d007      	beq.n	8003cb2 <HAL_GPIO_Init+0x1c2>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a43      	ldr	r2, [pc, #268]	; (8003db4 <HAL_GPIO_Init+0x2c4>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d101      	bne.n	8003cae <HAL_GPIO_Init+0x1be>
 8003caa:	2303      	movs	r3, #3
 8003cac:	e006      	b.n	8003cbc <HAL_GPIO_Init+0x1cc>
 8003cae:	2305      	movs	r3, #5
 8003cb0:	e004      	b.n	8003cbc <HAL_GPIO_Init+0x1cc>
 8003cb2:	2302      	movs	r3, #2
 8003cb4:	e002      	b.n	8003cbc <HAL_GPIO_Init+0x1cc>
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e000      	b.n	8003cbc <HAL_GPIO_Init+0x1cc>
 8003cba:	2300      	movs	r3, #0
 8003cbc:	697a      	ldr	r2, [r7, #20]
 8003cbe:	2103      	movs	r1, #3
 8003cc0:	400a      	ands	r2, r1
 8003cc2:	00d2      	lsls	r2, r2, #3
 8003cc4:	4093      	lsls	r3, r2
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003ccc:	4936      	ldr	r1, [pc, #216]	; (8003da8 <HAL_GPIO_Init+0x2b8>)
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	089b      	lsrs	r3, r3, #2
 8003cd2:	3318      	adds	r3, #24
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	693a      	ldr	r2, [r7, #16]
 8003cd8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003cda:	4b33      	ldr	r3, [pc, #204]	; (8003da8 <HAL_GPIO_Init+0x2b8>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	43da      	mvns	r2, r3
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	685a      	ldr	r2, [r3, #4]
 8003cee:	2380      	movs	r3, #128	; 0x80
 8003cf0:	035b      	lsls	r3, r3, #13
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	d003      	beq.n	8003cfe <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8003cf6:	693a      	ldr	r2, [r7, #16]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003cfe:	4b2a      	ldr	r3, [pc, #168]	; (8003da8 <HAL_GPIO_Init+0x2b8>)
 8003d00:	693a      	ldr	r2, [r7, #16]
 8003d02:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003d04:	4b28      	ldr	r3, [pc, #160]	; (8003da8 <HAL_GPIO_Init+0x2b8>)
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	43da      	mvns	r2, r3
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	4013      	ands	r3, r2
 8003d12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	685a      	ldr	r2, [r3, #4]
 8003d18:	2380      	movs	r3, #128	; 0x80
 8003d1a:	039b      	lsls	r3, r3, #14
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	d003      	beq.n	8003d28 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8003d20:	693a      	ldr	r2, [r7, #16]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003d28:	4b1f      	ldr	r3, [pc, #124]	; (8003da8 <HAL_GPIO_Init+0x2b8>)
 8003d2a:	693a      	ldr	r2, [r7, #16]
 8003d2c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003d2e:	4a1e      	ldr	r2, [pc, #120]	; (8003da8 <HAL_GPIO_Init+0x2b8>)
 8003d30:	2384      	movs	r3, #132	; 0x84
 8003d32:	58d3      	ldr	r3, [r2, r3]
 8003d34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	43da      	mvns	r2, r3
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	685a      	ldr	r2, [r3, #4]
 8003d44:	2380      	movs	r3, #128	; 0x80
 8003d46:	029b      	lsls	r3, r3, #10
 8003d48:	4013      	ands	r3, r2
 8003d4a:	d003      	beq.n	8003d54 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003d4c:	693a      	ldr	r2, [r7, #16]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003d54:	4914      	ldr	r1, [pc, #80]	; (8003da8 <HAL_GPIO_Init+0x2b8>)
 8003d56:	2284      	movs	r2, #132	; 0x84
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003d5c:	4a12      	ldr	r2, [pc, #72]	; (8003da8 <HAL_GPIO_Init+0x2b8>)
 8003d5e:	2380      	movs	r3, #128	; 0x80
 8003d60:	58d3      	ldr	r3, [r2, r3]
 8003d62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	43da      	mvns	r2, r3
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	685a      	ldr	r2, [r3, #4]
 8003d72:	2380      	movs	r3, #128	; 0x80
 8003d74:	025b      	lsls	r3, r3, #9
 8003d76:	4013      	ands	r3, r2
 8003d78:	d003      	beq.n	8003d82 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003d82:	4909      	ldr	r1, [pc, #36]	; (8003da8 <HAL_GPIO_Init+0x2b8>)
 8003d84:	2280      	movs	r2, #128	; 0x80
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	40da      	lsrs	r2, r3
 8003d98:	1e13      	subs	r3, r2, #0
 8003d9a:	d000      	beq.n	8003d9e <HAL_GPIO_Init+0x2ae>
 8003d9c:	e6b0      	b.n	8003b00 <HAL_GPIO_Init+0x10>
  }
}
 8003d9e:	46c0      	nop			; (mov r8, r8)
 8003da0:	46c0      	nop			; (mov r8, r8)
 8003da2:	46bd      	mov	sp, r7
 8003da4:	b006      	add	sp, #24
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	40021800 	.word	0x40021800
 8003dac:	50000400 	.word	0x50000400
 8003db0:	50000800 	.word	0x50000800
 8003db4:	50000c00 	.word	0x50000c00

08003db8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	0008      	movs	r0, r1
 8003dc2:	0011      	movs	r1, r2
 8003dc4:	1cbb      	adds	r3, r7, #2
 8003dc6:	1c02      	adds	r2, r0, #0
 8003dc8:	801a      	strh	r2, [r3, #0]
 8003dca:	1c7b      	adds	r3, r7, #1
 8003dcc:	1c0a      	adds	r2, r1, #0
 8003dce:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003dd0:	1c7b      	adds	r3, r7, #1
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d004      	beq.n	8003de2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003dd8:	1cbb      	adds	r3, r7, #2
 8003dda:	881a      	ldrh	r2, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003de0:	e003      	b.n	8003dea <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003de2:	1cbb      	adds	r3, r7, #2
 8003de4:	881a      	ldrh	r2, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003dea:	46c0      	nop			; (mov r8, r8)
 8003dec:	46bd      	mov	sp, r7
 8003dee:	b002      	add	sp, #8
 8003df0:	bd80      	pop	{r7, pc}
	...

08003df4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003dfc:	4b19      	ldr	r3, [pc, #100]	; (8003e64 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a19      	ldr	r2, [pc, #100]	; (8003e68 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003e02:	4013      	ands	r3, r2
 8003e04:	0019      	movs	r1, r3
 8003e06:	4b17      	ldr	r3, [pc, #92]	; (8003e64 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	2380      	movs	r3, #128	; 0x80
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d11f      	bne.n	8003e58 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003e18:	4b14      	ldr	r3, [pc, #80]	; (8003e6c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	0013      	movs	r3, r2
 8003e1e:	005b      	lsls	r3, r3, #1
 8003e20:	189b      	adds	r3, r3, r2
 8003e22:	005b      	lsls	r3, r3, #1
 8003e24:	4912      	ldr	r1, [pc, #72]	; (8003e70 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003e26:	0018      	movs	r0, r3
 8003e28:	f7fc f988 	bl	800013c <__udivsi3>
 8003e2c:	0003      	movs	r3, r0
 8003e2e:	3301      	adds	r3, #1
 8003e30:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e32:	e008      	b.n	8003e46 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d003      	beq.n	8003e42 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	3b01      	subs	r3, #1
 8003e3e:	60fb      	str	r3, [r7, #12]
 8003e40:	e001      	b.n	8003e46 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e009      	b.n	8003e5a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e46:	4b07      	ldr	r3, [pc, #28]	; (8003e64 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003e48:	695a      	ldr	r2, [r3, #20]
 8003e4a:	2380      	movs	r3, #128	; 0x80
 8003e4c:	00db      	lsls	r3, r3, #3
 8003e4e:	401a      	ands	r2, r3
 8003e50:	2380      	movs	r3, #128	; 0x80
 8003e52:	00db      	lsls	r3, r3, #3
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d0ed      	beq.n	8003e34 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	0018      	movs	r0, r3
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	b004      	add	sp, #16
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	46c0      	nop			; (mov r8, r8)
 8003e64:	40007000 	.word	0x40007000
 8003e68:	fffff9ff 	.word	0xfffff9ff
 8003e6c:	20000070 	.word	0x20000070
 8003e70:	000f4240 	.word	0x000f4240

08003e74 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003e78:	4b03      	ldr	r3, [pc, #12]	; (8003e88 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003e7a:	689a      	ldr	r2, [r3, #8]
 8003e7c:	23e0      	movs	r3, #224	; 0xe0
 8003e7e:	01db      	lsls	r3, r3, #7
 8003e80:	4013      	ands	r3, r2
}
 8003e82:	0018      	movs	r0, r3
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	40021000 	.word	0x40021000

08003e8c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b088      	sub	sp, #32
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d101      	bne.n	8003e9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e2fe      	b.n	800449c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	d100      	bne.n	8003eaa <HAL_RCC_OscConfig+0x1e>
 8003ea8:	e07c      	b.n	8003fa4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003eaa:	4bc3      	ldr	r3, [pc, #780]	; (80041b8 <HAL_RCC_OscConfig+0x32c>)
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	2238      	movs	r2, #56	; 0x38
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003eb4:	4bc0      	ldr	r3, [pc, #768]	; (80041b8 <HAL_RCC_OscConfig+0x32c>)
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	2203      	movs	r2, #3
 8003eba:	4013      	ands	r3, r2
 8003ebc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	2b10      	cmp	r3, #16
 8003ec2:	d102      	bne.n	8003eca <HAL_RCC_OscConfig+0x3e>
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	2b03      	cmp	r3, #3
 8003ec8:	d002      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	2b08      	cmp	r3, #8
 8003ece:	d10b      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ed0:	4bb9      	ldr	r3, [pc, #740]	; (80041b8 <HAL_RCC_OscConfig+0x32c>)
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	2380      	movs	r3, #128	; 0x80
 8003ed6:	029b      	lsls	r3, r3, #10
 8003ed8:	4013      	ands	r3, r2
 8003eda:	d062      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x116>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d15e      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e2d9      	b.n	800449c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	685a      	ldr	r2, [r3, #4]
 8003eec:	2380      	movs	r3, #128	; 0x80
 8003eee:	025b      	lsls	r3, r3, #9
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d107      	bne.n	8003f04 <HAL_RCC_OscConfig+0x78>
 8003ef4:	4bb0      	ldr	r3, [pc, #704]	; (80041b8 <HAL_RCC_OscConfig+0x32c>)
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	4baf      	ldr	r3, [pc, #700]	; (80041b8 <HAL_RCC_OscConfig+0x32c>)
 8003efa:	2180      	movs	r1, #128	; 0x80
 8003efc:	0249      	lsls	r1, r1, #9
 8003efe:	430a      	orrs	r2, r1
 8003f00:	601a      	str	r2, [r3, #0]
 8003f02:	e020      	b.n	8003f46 <HAL_RCC_OscConfig+0xba>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685a      	ldr	r2, [r3, #4]
 8003f08:	23a0      	movs	r3, #160	; 0xa0
 8003f0a:	02db      	lsls	r3, r3, #11
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d10e      	bne.n	8003f2e <HAL_RCC_OscConfig+0xa2>
 8003f10:	4ba9      	ldr	r3, [pc, #676]	; (80041b8 <HAL_RCC_OscConfig+0x32c>)
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	4ba8      	ldr	r3, [pc, #672]	; (80041b8 <HAL_RCC_OscConfig+0x32c>)
 8003f16:	2180      	movs	r1, #128	; 0x80
 8003f18:	02c9      	lsls	r1, r1, #11
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	601a      	str	r2, [r3, #0]
 8003f1e:	4ba6      	ldr	r3, [pc, #664]	; (80041b8 <HAL_RCC_OscConfig+0x32c>)
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	4ba5      	ldr	r3, [pc, #660]	; (80041b8 <HAL_RCC_OscConfig+0x32c>)
 8003f24:	2180      	movs	r1, #128	; 0x80
 8003f26:	0249      	lsls	r1, r1, #9
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	601a      	str	r2, [r3, #0]
 8003f2c:	e00b      	b.n	8003f46 <HAL_RCC_OscConfig+0xba>
 8003f2e:	4ba2      	ldr	r3, [pc, #648]	; (80041b8 <HAL_RCC_OscConfig+0x32c>)
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	4ba1      	ldr	r3, [pc, #644]	; (80041b8 <HAL_RCC_OscConfig+0x32c>)
 8003f34:	49a1      	ldr	r1, [pc, #644]	; (80041bc <HAL_RCC_OscConfig+0x330>)
 8003f36:	400a      	ands	r2, r1
 8003f38:	601a      	str	r2, [r3, #0]
 8003f3a:	4b9f      	ldr	r3, [pc, #636]	; (80041b8 <HAL_RCC_OscConfig+0x32c>)
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	4b9e      	ldr	r3, [pc, #632]	; (80041b8 <HAL_RCC_OscConfig+0x32c>)
 8003f40:	499f      	ldr	r1, [pc, #636]	; (80041c0 <HAL_RCC_OscConfig+0x334>)
 8003f42:	400a      	ands	r2, r1
 8003f44:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d014      	beq.n	8003f78 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f4e:	f7ff f9c9 	bl	80032e4 <HAL_GetTick>
 8003f52:	0003      	movs	r3, r0
 8003f54:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f56:	e008      	b.n	8003f6a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f58:	f7ff f9c4 	bl	80032e4 <HAL_GetTick>
 8003f5c:	0002      	movs	r2, r0
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	2b64      	cmp	r3, #100	; 0x64
 8003f64:	d901      	bls.n	8003f6a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e298      	b.n	800449c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f6a:	4b93      	ldr	r3, [pc, #588]	; (80041b8 <HAL_RCC_OscConfig+0x32c>)
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	2380      	movs	r3, #128	; 0x80
 8003f70:	029b      	lsls	r3, r3, #10
 8003f72:	4013      	ands	r3, r2
 8003f74:	d0f0      	beq.n	8003f58 <HAL_RCC_OscConfig+0xcc>
 8003f76:	e015      	b.n	8003fa4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f78:	f7ff f9b4 	bl	80032e4 <HAL_GetTick>
 8003f7c:	0003      	movs	r3, r0
 8003f7e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f80:	e008      	b.n	8003f94 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f82:	f7ff f9af 	bl	80032e4 <HAL_GetTick>
 8003f86:	0002      	movs	r2, r0
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	2b64      	cmp	r3, #100	; 0x64
 8003f8e:	d901      	bls.n	8003f94 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e283      	b.n	800449c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f94:	4b88      	ldr	r3, [pc, #544]	; (80041b8 <HAL_RCC_OscConfig+0x32c>)
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	2380      	movs	r3, #128	; 0x80
 8003f9a:	029b      	lsls	r3, r3, #10
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	d1f0      	bne.n	8003f82 <HAL_RCC_OscConfig+0xf6>
 8003fa0:	e000      	b.n	8003fa4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fa2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2202      	movs	r2, #2
 8003faa:	4013      	ands	r3, r2
 8003fac:	d100      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x124>
 8003fae:	e099      	b.n	80040e4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fb0:	4b81      	ldr	r3, [pc, #516]	; (80041b8 <HAL_RCC_OscConfig+0x32c>)
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	2238      	movs	r2, #56	; 0x38
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003fba:	4b7f      	ldr	r3, [pc, #508]	; (80041b8 <HAL_RCC_OscConfig+0x32c>)
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	2203      	movs	r2, #3
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	2b10      	cmp	r3, #16
 8003fc8:	d102      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x144>
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d002      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d135      	bne.n	8004042 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fd6:	4b78      	ldr	r3, [pc, #480]	; (80041b8 <HAL_RCC_OscConfig+0x32c>)
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	2380      	movs	r3, #128	; 0x80
 8003fdc:	00db      	lsls	r3, r3, #3
 8003fde:	4013      	ands	r3, r2
 8003fe0:	d005      	beq.n	8003fee <HAL_RCC_OscConfig+0x162>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d101      	bne.n	8003fee <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e256      	b.n	800449c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fee:	4b72      	ldr	r3, [pc, #456]	; (80041b8 <HAL_RCC_OscConfig+0x32c>)
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	4a74      	ldr	r2, [pc, #464]	; (80041c4 <HAL_RCC_OscConfig+0x338>)
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	0019      	movs	r1, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	695b      	ldr	r3, [r3, #20]
 8003ffc:	021a      	lsls	r2, r3, #8
 8003ffe:	4b6e      	ldr	r3, [pc, #440]	; (80041b8 <HAL_RCC_OscConfig+0x32c>)
 8004000:	430a      	orrs	r2, r1
 8004002:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d112      	bne.n	8004030 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800400a:	4b6b      	ldr	r3, [pc, #428]	; (80041b8 <HAL_RCC_OscConfig+0x32c>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a6e      	ldr	r2, [pc, #440]	; (80041c8 <HAL_RCC_OscConfig+0x33c>)
 8004010:	4013      	ands	r3, r2
 8004012:	0019      	movs	r1, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	691a      	ldr	r2, [r3, #16]
 8004018:	4b67      	ldr	r3, [pc, #412]	; (80041b8 <HAL_RCC_OscConfig+0x32c>)
 800401a:	430a      	orrs	r2, r1
 800401c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800401e:	4b66      	ldr	r3, [pc, #408]	; (80041b8 <HAL_RCC_OscConfig+0x32c>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	0adb      	lsrs	r3, r3, #11
 8004024:	2207      	movs	r2, #7
 8004026:	4013      	ands	r3, r2
 8004028:	4a68      	ldr	r2, [pc, #416]	; (80041cc <HAL_RCC_OscConfig+0x340>)
 800402a:	40da      	lsrs	r2, r3
 800402c:	4b68      	ldr	r3, [pc, #416]	; (80041d0 <HAL_RCC_OscConfig+0x344>)
 800402e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004030:	4b68      	ldr	r3, [pc, #416]	; (80041d4 <HAL_RCC_OscConfig+0x348>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	0018      	movs	r0, r3
 8004036:	f7ff f8f9 	bl	800322c <HAL_InitTick>
 800403a:	1e03      	subs	r3, r0, #0
 800403c:	d051      	beq.n	80040e2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e22c      	b.n	800449c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d030      	beq.n	80040ac <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800404a:	4b5b      	ldr	r3, [pc, #364]	; (80041b8 <HAL_RCC_OscConfig+0x32c>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a5e      	ldr	r2, [pc, #376]	; (80041c8 <HAL_RCC_OscConfig+0x33c>)
 8004050:	4013      	ands	r3, r2
 8004052:	0019      	movs	r1, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	691a      	ldr	r2, [r3, #16]
 8004058:	4b57      	ldr	r3, [pc, #348]	; (80041b8 <HAL_RCC_OscConfig+0x32c>)
 800405a:	430a      	orrs	r2, r1
 800405c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800405e:	4b56      	ldr	r3, [pc, #344]	; (80041b8 <HAL_RCC_OscConfig+0x32c>)
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	4b55      	ldr	r3, [pc, #340]	; (80041b8 <HAL_RCC_OscConfig+0x32c>)
 8004064:	2180      	movs	r1, #128	; 0x80
 8004066:	0049      	lsls	r1, r1, #1
 8004068:	430a      	orrs	r2, r1
 800406a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800406c:	f7ff f93a 	bl	80032e4 <HAL_GetTick>
 8004070:	0003      	movs	r3, r0
 8004072:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004074:	e008      	b.n	8004088 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004076:	f7ff f935 	bl	80032e4 <HAL_GetTick>
 800407a:	0002      	movs	r2, r0
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	2b02      	cmp	r3, #2
 8004082:	d901      	bls.n	8004088 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	e209      	b.n	800449c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004088:	4b4b      	ldr	r3, [pc, #300]	; (80041b8 <HAL_RCC_OscConfig+0x32c>)
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	2380      	movs	r3, #128	; 0x80
 800408e:	00db      	lsls	r3, r3, #3
 8004090:	4013      	ands	r3, r2
 8004092:	d0f0      	beq.n	8004076 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004094:	4b48      	ldr	r3, [pc, #288]	; (80041b8 <HAL_RCC_OscConfig+0x32c>)
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	4a4a      	ldr	r2, [pc, #296]	; (80041c4 <HAL_RCC_OscConfig+0x338>)
 800409a:	4013      	ands	r3, r2
 800409c:	0019      	movs	r1, r3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	021a      	lsls	r2, r3, #8
 80040a4:	4b44      	ldr	r3, [pc, #272]	; (80041b8 <HAL_RCC_OscConfig+0x32c>)
 80040a6:	430a      	orrs	r2, r1
 80040a8:	605a      	str	r2, [r3, #4]
 80040aa:	e01b      	b.n	80040e4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80040ac:	4b42      	ldr	r3, [pc, #264]	; (80041b8 <HAL_RCC_OscConfig+0x32c>)
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	4b41      	ldr	r3, [pc, #260]	; (80041b8 <HAL_RCC_OscConfig+0x32c>)
 80040b2:	4949      	ldr	r1, [pc, #292]	; (80041d8 <HAL_RCC_OscConfig+0x34c>)
 80040b4:	400a      	ands	r2, r1
 80040b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040b8:	f7ff f914 	bl	80032e4 <HAL_GetTick>
 80040bc:	0003      	movs	r3, r0
 80040be:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040c0:	e008      	b.n	80040d4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040c2:	f7ff f90f 	bl	80032e4 <HAL_GetTick>
 80040c6:	0002      	movs	r2, r0
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d901      	bls.n	80040d4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	e1e3      	b.n	800449c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040d4:	4b38      	ldr	r3, [pc, #224]	; (80041b8 <HAL_RCC_OscConfig+0x32c>)
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	2380      	movs	r3, #128	; 0x80
 80040da:	00db      	lsls	r3, r3, #3
 80040dc:	4013      	ands	r3, r2
 80040de:	d1f0      	bne.n	80040c2 <HAL_RCC_OscConfig+0x236>
 80040e0:	e000      	b.n	80040e4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040e2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2208      	movs	r2, #8
 80040ea:	4013      	ands	r3, r2
 80040ec:	d047      	beq.n	800417e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80040ee:	4b32      	ldr	r3, [pc, #200]	; (80041b8 <HAL_RCC_OscConfig+0x32c>)
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	2238      	movs	r2, #56	; 0x38
 80040f4:	4013      	ands	r3, r2
 80040f6:	2b18      	cmp	r3, #24
 80040f8:	d10a      	bne.n	8004110 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80040fa:	4b2f      	ldr	r3, [pc, #188]	; (80041b8 <HAL_RCC_OscConfig+0x32c>)
 80040fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040fe:	2202      	movs	r2, #2
 8004100:	4013      	ands	r3, r2
 8004102:	d03c      	beq.n	800417e <HAL_RCC_OscConfig+0x2f2>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	699b      	ldr	r3, [r3, #24]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d138      	bne.n	800417e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e1c5      	b.n	800449c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	699b      	ldr	r3, [r3, #24]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d019      	beq.n	800414c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004118:	4b27      	ldr	r3, [pc, #156]	; (80041b8 <HAL_RCC_OscConfig+0x32c>)
 800411a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800411c:	4b26      	ldr	r3, [pc, #152]	; (80041b8 <HAL_RCC_OscConfig+0x32c>)
 800411e:	2101      	movs	r1, #1
 8004120:	430a      	orrs	r2, r1
 8004122:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004124:	f7ff f8de 	bl	80032e4 <HAL_GetTick>
 8004128:	0003      	movs	r3, r0
 800412a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800412c:	e008      	b.n	8004140 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800412e:	f7ff f8d9 	bl	80032e4 <HAL_GetTick>
 8004132:	0002      	movs	r2, r0
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	2b02      	cmp	r3, #2
 800413a:	d901      	bls.n	8004140 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	e1ad      	b.n	800449c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004140:	4b1d      	ldr	r3, [pc, #116]	; (80041b8 <HAL_RCC_OscConfig+0x32c>)
 8004142:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004144:	2202      	movs	r2, #2
 8004146:	4013      	ands	r3, r2
 8004148:	d0f1      	beq.n	800412e <HAL_RCC_OscConfig+0x2a2>
 800414a:	e018      	b.n	800417e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800414c:	4b1a      	ldr	r3, [pc, #104]	; (80041b8 <HAL_RCC_OscConfig+0x32c>)
 800414e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004150:	4b19      	ldr	r3, [pc, #100]	; (80041b8 <HAL_RCC_OscConfig+0x32c>)
 8004152:	2101      	movs	r1, #1
 8004154:	438a      	bics	r2, r1
 8004156:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004158:	f7ff f8c4 	bl	80032e4 <HAL_GetTick>
 800415c:	0003      	movs	r3, r0
 800415e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004160:	e008      	b.n	8004174 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004162:	f7ff f8bf 	bl	80032e4 <HAL_GetTick>
 8004166:	0002      	movs	r2, r0
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	2b02      	cmp	r3, #2
 800416e:	d901      	bls.n	8004174 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e193      	b.n	800449c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004174:	4b10      	ldr	r3, [pc, #64]	; (80041b8 <HAL_RCC_OscConfig+0x32c>)
 8004176:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004178:	2202      	movs	r2, #2
 800417a:	4013      	ands	r3, r2
 800417c:	d1f1      	bne.n	8004162 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2204      	movs	r2, #4
 8004184:	4013      	ands	r3, r2
 8004186:	d100      	bne.n	800418a <HAL_RCC_OscConfig+0x2fe>
 8004188:	e0c6      	b.n	8004318 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800418a:	231f      	movs	r3, #31
 800418c:	18fb      	adds	r3, r7, r3
 800418e:	2200      	movs	r2, #0
 8004190:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004192:	4b09      	ldr	r3, [pc, #36]	; (80041b8 <HAL_RCC_OscConfig+0x32c>)
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	2238      	movs	r2, #56	; 0x38
 8004198:	4013      	ands	r3, r2
 800419a:	2b20      	cmp	r3, #32
 800419c:	d11e      	bne.n	80041dc <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800419e:	4b06      	ldr	r3, [pc, #24]	; (80041b8 <HAL_RCC_OscConfig+0x32c>)
 80041a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041a2:	2202      	movs	r2, #2
 80041a4:	4013      	ands	r3, r2
 80041a6:	d100      	bne.n	80041aa <HAL_RCC_OscConfig+0x31e>
 80041a8:	e0b6      	b.n	8004318 <HAL_RCC_OscConfig+0x48c>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d000      	beq.n	80041b4 <HAL_RCC_OscConfig+0x328>
 80041b2:	e0b1      	b.n	8004318 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e171      	b.n	800449c <HAL_RCC_OscConfig+0x610>
 80041b8:	40021000 	.word	0x40021000
 80041bc:	fffeffff 	.word	0xfffeffff
 80041c0:	fffbffff 	.word	0xfffbffff
 80041c4:	ffff80ff 	.word	0xffff80ff
 80041c8:	ffffc7ff 	.word	0xffffc7ff
 80041cc:	00f42400 	.word	0x00f42400
 80041d0:	20000070 	.word	0x20000070
 80041d4:	20000074 	.word	0x20000074
 80041d8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80041dc:	4bb1      	ldr	r3, [pc, #708]	; (80044a4 <HAL_RCC_OscConfig+0x618>)
 80041de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041e0:	2380      	movs	r3, #128	; 0x80
 80041e2:	055b      	lsls	r3, r3, #21
 80041e4:	4013      	ands	r3, r2
 80041e6:	d101      	bne.n	80041ec <HAL_RCC_OscConfig+0x360>
 80041e8:	2301      	movs	r3, #1
 80041ea:	e000      	b.n	80041ee <HAL_RCC_OscConfig+0x362>
 80041ec:	2300      	movs	r3, #0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d011      	beq.n	8004216 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80041f2:	4bac      	ldr	r3, [pc, #688]	; (80044a4 <HAL_RCC_OscConfig+0x618>)
 80041f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041f6:	4bab      	ldr	r3, [pc, #684]	; (80044a4 <HAL_RCC_OscConfig+0x618>)
 80041f8:	2180      	movs	r1, #128	; 0x80
 80041fa:	0549      	lsls	r1, r1, #21
 80041fc:	430a      	orrs	r2, r1
 80041fe:	63da      	str	r2, [r3, #60]	; 0x3c
 8004200:	4ba8      	ldr	r3, [pc, #672]	; (80044a4 <HAL_RCC_OscConfig+0x618>)
 8004202:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004204:	2380      	movs	r3, #128	; 0x80
 8004206:	055b      	lsls	r3, r3, #21
 8004208:	4013      	ands	r3, r2
 800420a:	60fb      	str	r3, [r7, #12]
 800420c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800420e:	231f      	movs	r3, #31
 8004210:	18fb      	adds	r3, r7, r3
 8004212:	2201      	movs	r2, #1
 8004214:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004216:	4ba4      	ldr	r3, [pc, #656]	; (80044a8 <HAL_RCC_OscConfig+0x61c>)
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	2380      	movs	r3, #128	; 0x80
 800421c:	005b      	lsls	r3, r3, #1
 800421e:	4013      	ands	r3, r2
 8004220:	d11a      	bne.n	8004258 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004222:	4ba1      	ldr	r3, [pc, #644]	; (80044a8 <HAL_RCC_OscConfig+0x61c>)
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	4ba0      	ldr	r3, [pc, #640]	; (80044a8 <HAL_RCC_OscConfig+0x61c>)
 8004228:	2180      	movs	r1, #128	; 0x80
 800422a:	0049      	lsls	r1, r1, #1
 800422c:	430a      	orrs	r2, r1
 800422e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004230:	f7ff f858 	bl	80032e4 <HAL_GetTick>
 8004234:	0003      	movs	r3, r0
 8004236:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004238:	e008      	b.n	800424c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800423a:	f7ff f853 	bl	80032e4 <HAL_GetTick>
 800423e:	0002      	movs	r2, r0
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	2b02      	cmp	r3, #2
 8004246:	d901      	bls.n	800424c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	e127      	b.n	800449c <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800424c:	4b96      	ldr	r3, [pc, #600]	; (80044a8 <HAL_RCC_OscConfig+0x61c>)
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	2380      	movs	r3, #128	; 0x80
 8004252:	005b      	lsls	r3, r3, #1
 8004254:	4013      	ands	r3, r2
 8004256:	d0f0      	beq.n	800423a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	2b01      	cmp	r3, #1
 800425e:	d106      	bne.n	800426e <HAL_RCC_OscConfig+0x3e2>
 8004260:	4b90      	ldr	r3, [pc, #576]	; (80044a4 <HAL_RCC_OscConfig+0x618>)
 8004262:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004264:	4b8f      	ldr	r3, [pc, #572]	; (80044a4 <HAL_RCC_OscConfig+0x618>)
 8004266:	2101      	movs	r1, #1
 8004268:	430a      	orrs	r2, r1
 800426a:	65da      	str	r2, [r3, #92]	; 0x5c
 800426c:	e01c      	b.n	80042a8 <HAL_RCC_OscConfig+0x41c>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	2b05      	cmp	r3, #5
 8004274:	d10c      	bne.n	8004290 <HAL_RCC_OscConfig+0x404>
 8004276:	4b8b      	ldr	r3, [pc, #556]	; (80044a4 <HAL_RCC_OscConfig+0x618>)
 8004278:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800427a:	4b8a      	ldr	r3, [pc, #552]	; (80044a4 <HAL_RCC_OscConfig+0x618>)
 800427c:	2104      	movs	r1, #4
 800427e:	430a      	orrs	r2, r1
 8004280:	65da      	str	r2, [r3, #92]	; 0x5c
 8004282:	4b88      	ldr	r3, [pc, #544]	; (80044a4 <HAL_RCC_OscConfig+0x618>)
 8004284:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004286:	4b87      	ldr	r3, [pc, #540]	; (80044a4 <HAL_RCC_OscConfig+0x618>)
 8004288:	2101      	movs	r1, #1
 800428a:	430a      	orrs	r2, r1
 800428c:	65da      	str	r2, [r3, #92]	; 0x5c
 800428e:	e00b      	b.n	80042a8 <HAL_RCC_OscConfig+0x41c>
 8004290:	4b84      	ldr	r3, [pc, #528]	; (80044a4 <HAL_RCC_OscConfig+0x618>)
 8004292:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004294:	4b83      	ldr	r3, [pc, #524]	; (80044a4 <HAL_RCC_OscConfig+0x618>)
 8004296:	2101      	movs	r1, #1
 8004298:	438a      	bics	r2, r1
 800429a:	65da      	str	r2, [r3, #92]	; 0x5c
 800429c:	4b81      	ldr	r3, [pc, #516]	; (80044a4 <HAL_RCC_OscConfig+0x618>)
 800429e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80042a0:	4b80      	ldr	r3, [pc, #512]	; (80044a4 <HAL_RCC_OscConfig+0x618>)
 80042a2:	2104      	movs	r1, #4
 80042a4:	438a      	bics	r2, r1
 80042a6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d014      	beq.n	80042da <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b0:	f7ff f818 	bl	80032e4 <HAL_GetTick>
 80042b4:	0003      	movs	r3, r0
 80042b6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042b8:	e009      	b.n	80042ce <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042ba:	f7ff f813 	bl	80032e4 <HAL_GetTick>
 80042be:	0002      	movs	r2, r0
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	4a79      	ldr	r2, [pc, #484]	; (80044ac <HAL_RCC_OscConfig+0x620>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d901      	bls.n	80042ce <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e0e6      	b.n	800449c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042ce:	4b75      	ldr	r3, [pc, #468]	; (80044a4 <HAL_RCC_OscConfig+0x618>)
 80042d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042d2:	2202      	movs	r2, #2
 80042d4:	4013      	ands	r3, r2
 80042d6:	d0f0      	beq.n	80042ba <HAL_RCC_OscConfig+0x42e>
 80042d8:	e013      	b.n	8004302 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042da:	f7ff f803 	bl	80032e4 <HAL_GetTick>
 80042de:	0003      	movs	r3, r0
 80042e0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042e2:	e009      	b.n	80042f8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042e4:	f7fe fffe 	bl	80032e4 <HAL_GetTick>
 80042e8:	0002      	movs	r2, r0
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	4a6f      	ldr	r2, [pc, #444]	; (80044ac <HAL_RCC_OscConfig+0x620>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d901      	bls.n	80042f8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	e0d1      	b.n	800449c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042f8:	4b6a      	ldr	r3, [pc, #424]	; (80044a4 <HAL_RCC_OscConfig+0x618>)
 80042fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042fc:	2202      	movs	r2, #2
 80042fe:	4013      	ands	r3, r2
 8004300:	d1f0      	bne.n	80042e4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004302:	231f      	movs	r3, #31
 8004304:	18fb      	adds	r3, r7, r3
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	2b01      	cmp	r3, #1
 800430a:	d105      	bne.n	8004318 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800430c:	4b65      	ldr	r3, [pc, #404]	; (80044a4 <HAL_RCC_OscConfig+0x618>)
 800430e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004310:	4b64      	ldr	r3, [pc, #400]	; (80044a4 <HAL_RCC_OscConfig+0x618>)
 8004312:	4967      	ldr	r1, [pc, #412]	; (80044b0 <HAL_RCC_OscConfig+0x624>)
 8004314:	400a      	ands	r2, r1
 8004316:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	69db      	ldr	r3, [r3, #28]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d100      	bne.n	8004322 <HAL_RCC_OscConfig+0x496>
 8004320:	e0bb      	b.n	800449a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004322:	4b60      	ldr	r3, [pc, #384]	; (80044a4 <HAL_RCC_OscConfig+0x618>)
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	2238      	movs	r2, #56	; 0x38
 8004328:	4013      	ands	r3, r2
 800432a:	2b10      	cmp	r3, #16
 800432c:	d100      	bne.n	8004330 <HAL_RCC_OscConfig+0x4a4>
 800432e:	e07b      	b.n	8004428 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	69db      	ldr	r3, [r3, #28]
 8004334:	2b02      	cmp	r3, #2
 8004336:	d156      	bne.n	80043e6 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004338:	4b5a      	ldr	r3, [pc, #360]	; (80044a4 <HAL_RCC_OscConfig+0x618>)
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	4b59      	ldr	r3, [pc, #356]	; (80044a4 <HAL_RCC_OscConfig+0x618>)
 800433e:	495d      	ldr	r1, [pc, #372]	; (80044b4 <HAL_RCC_OscConfig+0x628>)
 8004340:	400a      	ands	r2, r1
 8004342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004344:	f7fe ffce 	bl	80032e4 <HAL_GetTick>
 8004348:	0003      	movs	r3, r0
 800434a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800434c:	e008      	b.n	8004360 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800434e:	f7fe ffc9 	bl	80032e4 <HAL_GetTick>
 8004352:	0002      	movs	r2, r0
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	2b02      	cmp	r3, #2
 800435a:	d901      	bls.n	8004360 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e09d      	b.n	800449c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004360:	4b50      	ldr	r3, [pc, #320]	; (80044a4 <HAL_RCC_OscConfig+0x618>)
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	2380      	movs	r3, #128	; 0x80
 8004366:	049b      	lsls	r3, r3, #18
 8004368:	4013      	ands	r3, r2
 800436a:	d1f0      	bne.n	800434e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800436c:	4b4d      	ldr	r3, [pc, #308]	; (80044a4 <HAL_RCC_OscConfig+0x618>)
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	4a51      	ldr	r2, [pc, #324]	; (80044b8 <HAL_RCC_OscConfig+0x62c>)
 8004372:	4013      	ands	r3, r2
 8004374:	0019      	movs	r1, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a1a      	ldr	r2, [r3, #32]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437e:	431a      	orrs	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004384:	021b      	lsls	r3, r3, #8
 8004386:	431a      	orrs	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800438c:	431a      	orrs	r2, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004392:	431a      	orrs	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004398:	431a      	orrs	r2, r3
 800439a:	4b42      	ldr	r3, [pc, #264]	; (80044a4 <HAL_RCC_OscConfig+0x618>)
 800439c:	430a      	orrs	r2, r1
 800439e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043a0:	4b40      	ldr	r3, [pc, #256]	; (80044a4 <HAL_RCC_OscConfig+0x618>)
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	4b3f      	ldr	r3, [pc, #252]	; (80044a4 <HAL_RCC_OscConfig+0x618>)
 80043a6:	2180      	movs	r1, #128	; 0x80
 80043a8:	0449      	lsls	r1, r1, #17
 80043aa:	430a      	orrs	r2, r1
 80043ac:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80043ae:	4b3d      	ldr	r3, [pc, #244]	; (80044a4 <HAL_RCC_OscConfig+0x618>)
 80043b0:	68da      	ldr	r2, [r3, #12]
 80043b2:	4b3c      	ldr	r3, [pc, #240]	; (80044a4 <HAL_RCC_OscConfig+0x618>)
 80043b4:	2180      	movs	r1, #128	; 0x80
 80043b6:	0549      	lsls	r1, r1, #21
 80043b8:	430a      	orrs	r2, r1
 80043ba:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043bc:	f7fe ff92 	bl	80032e4 <HAL_GetTick>
 80043c0:	0003      	movs	r3, r0
 80043c2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043c4:	e008      	b.n	80043d8 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043c6:	f7fe ff8d 	bl	80032e4 <HAL_GetTick>
 80043ca:	0002      	movs	r2, r0
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	d901      	bls.n	80043d8 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e061      	b.n	800449c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043d8:	4b32      	ldr	r3, [pc, #200]	; (80044a4 <HAL_RCC_OscConfig+0x618>)
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	2380      	movs	r3, #128	; 0x80
 80043de:	049b      	lsls	r3, r3, #18
 80043e0:	4013      	ands	r3, r2
 80043e2:	d0f0      	beq.n	80043c6 <HAL_RCC_OscConfig+0x53a>
 80043e4:	e059      	b.n	800449a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043e6:	4b2f      	ldr	r3, [pc, #188]	; (80044a4 <HAL_RCC_OscConfig+0x618>)
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	4b2e      	ldr	r3, [pc, #184]	; (80044a4 <HAL_RCC_OscConfig+0x618>)
 80043ec:	4931      	ldr	r1, [pc, #196]	; (80044b4 <HAL_RCC_OscConfig+0x628>)
 80043ee:	400a      	ands	r2, r1
 80043f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f2:	f7fe ff77 	bl	80032e4 <HAL_GetTick>
 80043f6:	0003      	movs	r3, r0
 80043f8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043fa:	e008      	b.n	800440e <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043fc:	f7fe ff72 	bl	80032e4 <HAL_GetTick>
 8004400:	0002      	movs	r2, r0
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	2b02      	cmp	r3, #2
 8004408:	d901      	bls.n	800440e <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e046      	b.n	800449c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800440e:	4b25      	ldr	r3, [pc, #148]	; (80044a4 <HAL_RCC_OscConfig+0x618>)
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	2380      	movs	r3, #128	; 0x80
 8004414:	049b      	lsls	r3, r3, #18
 8004416:	4013      	ands	r3, r2
 8004418:	d1f0      	bne.n	80043fc <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800441a:	4b22      	ldr	r3, [pc, #136]	; (80044a4 <HAL_RCC_OscConfig+0x618>)
 800441c:	68da      	ldr	r2, [r3, #12]
 800441e:	4b21      	ldr	r3, [pc, #132]	; (80044a4 <HAL_RCC_OscConfig+0x618>)
 8004420:	4926      	ldr	r1, [pc, #152]	; (80044bc <HAL_RCC_OscConfig+0x630>)
 8004422:	400a      	ands	r2, r1
 8004424:	60da      	str	r2, [r3, #12]
 8004426:	e038      	b.n	800449a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	69db      	ldr	r3, [r3, #28]
 800442c:	2b01      	cmp	r3, #1
 800442e:	d101      	bne.n	8004434 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e033      	b.n	800449c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004434:	4b1b      	ldr	r3, [pc, #108]	; (80044a4 <HAL_RCC_OscConfig+0x618>)
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	2203      	movs	r2, #3
 800443e:	401a      	ands	r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6a1b      	ldr	r3, [r3, #32]
 8004444:	429a      	cmp	r2, r3
 8004446:	d126      	bne.n	8004496 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	2270      	movs	r2, #112	; 0x70
 800444c:	401a      	ands	r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004452:	429a      	cmp	r2, r3
 8004454:	d11f      	bne.n	8004496 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004456:	697a      	ldr	r2, [r7, #20]
 8004458:	23fe      	movs	r3, #254	; 0xfe
 800445a:	01db      	lsls	r3, r3, #7
 800445c:	401a      	ands	r2, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004462:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004464:	429a      	cmp	r2, r3
 8004466:	d116      	bne.n	8004496 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004468:	697a      	ldr	r2, [r7, #20]
 800446a:	23f8      	movs	r3, #248	; 0xf8
 800446c:	039b      	lsls	r3, r3, #14
 800446e:	401a      	ands	r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004474:	429a      	cmp	r2, r3
 8004476:	d10e      	bne.n	8004496 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004478:	697a      	ldr	r2, [r7, #20]
 800447a:	23e0      	movs	r3, #224	; 0xe0
 800447c:	051b      	lsls	r3, r3, #20
 800447e:	401a      	ands	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004484:	429a      	cmp	r2, r3
 8004486:	d106      	bne.n	8004496 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	0f5b      	lsrs	r3, r3, #29
 800448c:	075a      	lsls	r2, r3, #29
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004492:	429a      	cmp	r2, r3
 8004494:	d001      	beq.n	800449a <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e000      	b.n	800449c <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800449a:	2300      	movs	r3, #0
}
 800449c:	0018      	movs	r0, r3
 800449e:	46bd      	mov	sp, r7
 80044a0:	b008      	add	sp, #32
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	40021000 	.word	0x40021000
 80044a8:	40007000 	.word	0x40007000
 80044ac:	00001388 	.word	0x00001388
 80044b0:	efffffff 	.word	0xefffffff
 80044b4:	feffffff 	.word	0xfeffffff
 80044b8:	11c1808c 	.word	0x11c1808c
 80044bc:	eefefffc 	.word	0xeefefffc

080044c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d101      	bne.n	80044d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e0e9      	b.n	80046a8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044d4:	4b76      	ldr	r3, [pc, #472]	; (80046b0 <HAL_RCC_ClockConfig+0x1f0>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2207      	movs	r2, #7
 80044da:	4013      	ands	r3, r2
 80044dc:	683a      	ldr	r2, [r7, #0]
 80044de:	429a      	cmp	r2, r3
 80044e0:	d91e      	bls.n	8004520 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044e2:	4b73      	ldr	r3, [pc, #460]	; (80046b0 <HAL_RCC_ClockConfig+0x1f0>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2207      	movs	r2, #7
 80044e8:	4393      	bics	r3, r2
 80044ea:	0019      	movs	r1, r3
 80044ec:	4b70      	ldr	r3, [pc, #448]	; (80046b0 <HAL_RCC_ClockConfig+0x1f0>)
 80044ee:	683a      	ldr	r2, [r7, #0]
 80044f0:	430a      	orrs	r2, r1
 80044f2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80044f4:	f7fe fef6 	bl	80032e4 <HAL_GetTick>
 80044f8:	0003      	movs	r3, r0
 80044fa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80044fc:	e009      	b.n	8004512 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044fe:	f7fe fef1 	bl	80032e4 <HAL_GetTick>
 8004502:	0002      	movs	r2, r0
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	4a6a      	ldr	r2, [pc, #424]	; (80046b4 <HAL_RCC_ClockConfig+0x1f4>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d901      	bls.n	8004512 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e0ca      	b.n	80046a8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004512:	4b67      	ldr	r3, [pc, #412]	; (80046b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2207      	movs	r2, #7
 8004518:	4013      	ands	r3, r2
 800451a:	683a      	ldr	r2, [r7, #0]
 800451c:	429a      	cmp	r2, r3
 800451e:	d1ee      	bne.n	80044fe <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2202      	movs	r2, #2
 8004526:	4013      	ands	r3, r2
 8004528:	d015      	beq.n	8004556 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2204      	movs	r2, #4
 8004530:	4013      	ands	r3, r2
 8004532:	d006      	beq.n	8004542 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004534:	4b60      	ldr	r3, [pc, #384]	; (80046b8 <HAL_RCC_ClockConfig+0x1f8>)
 8004536:	689a      	ldr	r2, [r3, #8]
 8004538:	4b5f      	ldr	r3, [pc, #380]	; (80046b8 <HAL_RCC_ClockConfig+0x1f8>)
 800453a:	21e0      	movs	r1, #224	; 0xe0
 800453c:	01c9      	lsls	r1, r1, #7
 800453e:	430a      	orrs	r2, r1
 8004540:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004542:	4b5d      	ldr	r3, [pc, #372]	; (80046b8 <HAL_RCC_ClockConfig+0x1f8>)
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	4a5d      	ldr	r2, [pc, #372]	; (80046bc <HAL_RCC_ClockConfig+0x1fc>)
 8004548:	4013      	ands	r3, r2
 800454a:	0019      	movs	r1, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	689a      	ldr	r2, [r3, #8]
 8004550:	4b59      	ldr	r3, [pc, #356]	; (80046b8 <HAL_RCC_ClockConfig+0x1f8>)
 8004552:	430a      	orrs	r2, r1
 8004554:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2201      	movs	r2, #1
 800455c:	4013      	ands	r3, r2
 800455e:	d057      	beq.n	8004610 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d107      	bne.n	8004578 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004568:	4b53      	ldr	r3, [pc, #332]	; (80046b8 <HAL_RCC_ClockConfig+0x1f8>)
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	2380      	movs	r3, #128	; 0x80
 800456e:	029b      	lsls	r3, r3, #10
 8004570:	4013      	ands	r3, r2
 8004572:	d12b      	bne.n	80045cc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e097      	b.n	80046a8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	2b02      	cmp	r3, #2
 800457e:	d107      	bne.n	8004590 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004580:	4b4d      	ldr	r3, [pc, #308]	; (80046b8 <HAL_RCC_ClockConfig+0x1f8>)
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	2380      	movs	r3, #128	; 0x80
 8004586:	049b      	lsls	r3, r3, #18
 8004588:	4013      	ands	r3, r2
 800458a:	d11f      	bne.n	80045cc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e08b      	b.n	80046a8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d107      	bne.n	80045a8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004598:	4b47      	ldr	r3, [pc, #284]	; (80046b8 <HAL_RCC_ClockConfig+0x1f8>)
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	2380      	movs	r3, #128	; 0x80
 800459e:	00db      	lsls	r3, r3, #3
 80045a0:	4013      	ands	r3, r2
 80045a2:	d113      	bne.n	80045cc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e07f      	b.n	80046a8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	2b03      	cmp	r3, #3
 80045ae:	d106      	bne.n	80045be <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80045b0:	4b41      	ldr	r3, [pc, #260]	; (80046b8 <HAL_RCC_ClockConfig+0x1f8>)
 80045b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045b4:	2202      	movs	r2, #2
 80045b6:	4013      	ands	r3, r2
 80045b8:	d108      	bne.n	80045cc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e074      	b.n	80046a8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045be:	4b3e      	ldr	r3, [pc, #248]	; (80046b8 <HAL_RCC_ClockConfig+0x1f8>)
 80045c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045c2:	2202      	movs	r2, #2
 80045c4:	4013      	ands	r3, r2
 80045c6:	d101      	bne.n	80045cc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e06d      	b.n	80046a8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80045cc:	4b3a      	ldr	r3, [pc, #232]	; (80046b8 <HAL_RCC_ClockConfig+0x1f8>)
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	2207      	movs	r2, #7
 80045d2:	4393      	bics	r3, r2
 80045d4:	0019      	movs	r1, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685a      	ldr	r2, [r3, #4]
 80045da:	4b37      	ldr	r3, [pc, #220]	; (80046b8 <HAL_RCC_ClockConfig+0x1f8>)
 80045dc:	430a      	orrs	r2, r1
 80045de:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045e0:	f7fe fe80 	bl	80032e4 <HAL_GetTick>
 80045e4:	0003      	movs	r3, r0
 80045e6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045e8:	e009      	b.n	80045fe <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045ea:	f7fe fe7b 	bl	80032e4 <HAL_GetTick>
 80045ee:	0002      	movs	r2, r0
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	4a2f      	ldr	r2, [pc, #188]	; (80046b4 <HAL_RCC_ClockConfig+0x1f4>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d901      	bls.n	80045fe <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e054      	b.n	80046a8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045fe:	4b2e      	ldr	r3, [pc, #184]	; (80046b8 <HAL_RCC_ClockConfig+0x1f8>)
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	2238      	movs	r2, #56	; 0x38
 8004604:	401a      	ands	r2, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	00db      	lsls	r3, r3, #3
 800460c:	429a      	cmp	r2, r3
 800460e:	d1ec      	bne.n	80045ea <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004610:	4b27      	ldr	r3, [pc, #156]	; (80046b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2207      	movs	r2, #7
 8004616:	4013      	ands	r3, r2
 8004618:	683a      	ldr	r2, [r7, #0]
 800461a:	429a      	cmp	r2, r3
 800461c:	d21e      	bcs.n	800465c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800461e:	4b24      	ldr	r3, [pc, #144]	; (80046b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2207      	movs	r2, #7
 8004624:	4393      	bics	r3, r2
 8004626:	0019      	movs	r1, r3
 8004628:	4b21      	ldr	r3, [pc, #132]	; (80046b0 <HAL_RCC_ClockConfig+0x1f0>)
 800462a:	683a      	ldr	r2, [r7, #0]
 800462c:	430a      	orrs	r2, r1
 800462e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004630:	f7fe fe58 	bl	80032e4 <HAL_GetTick>
 8004634:	0003      	movs	r3, r0
 8004636:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004638:	e009      	b.n	800464e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800463a:	f7fe fe53 	bl	80032e4 <HAL_GetTick>
 800463e:	0002      	movs	r2, r0
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	4a1b      	ldr	r2, [pc, #108]	; (80046b4 <HAL_RCC_ClockConfig+0x1f4>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d901      	bls.n	800464e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e02c      	b.n	80046a8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800464e:	4b18      	ldr	r3, [pc, #96]	; (80046b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2207      	movs	r2, #7
 8004654:	4013      	ands	r3, r2
 8004656:	683a      	ldr	r2, [r7, #0]
 8004658:	429a      	cmp	r2, r3
 800465a:	d1ee      	bne.n	800463a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2204      	movs	r2, #4
 8004662:	4013      	ands	r3, r2
 8004664:	d009      	beq.n	800467a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004666:	4b14      	ldr	r3, [pc, #80]	; (80046b8 <HAL_RCC_ClockConfig+0x1f8>)
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	4a15      	ldr	r2, [pc, #84]	; (80046c0 <HAL_RCC_ClockConfig+0x200>)
 800466c:	4013      	ands	r3, r2
 800466e:	0019      	movs	r1, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	68da      	ldr	r2, [r3, #12]
 8004674:	4b10      	ldr	r3, [pc, #64]	; (80046b8 <HAL_RCC_ClockConfig+0x1f8>)
 8004676:	430a      	orrs	r2, r1
 8004678:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800467a:	f000 f829 	bl	80046d0 <HAL_RCC_GetSysClockFreq>
 800467e:	0001      	movs	r1, r0
 8004680:	4b0d      	ldr	r3, [pc, #52]	; (80046b8 <HAL_RCC_ClockConfig+0x1f8>)
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	0a1b      	lsrs	r3, r3, #8
 8004686:	220f      	movs	r2, #15
 8004688:	401a      	ands	r2, r3
 800468a:	4b0e      	ldr	r3, [pc, #56]	; (80046c4 <HAL_RCC_ClockConfig+0x204>)
 800468c:	0092      	lsls	r2, r2, #2
 800468e:	58d3      	ldr	r3, [r2, r3]
 8004690:	221f      	movs	r2, #31
 8004692:	4013      	ands	r3, r2
 8004694:	000a      	movs	r2, r1
 8004696:	40da      	lsrs	r2, r3
 8004698:	4b0b      	ldr	r3, [pc, #44]	; (80046c8 <HAL_RCC_ClockConfig+0x208>)
 800469a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800469c:	4b0b      	ldr	r3, [pc, #44]	; (80046cc <HAL_RCC_ClockConfig+0x20c>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	0018      	movs	r0, r3
 80046a2:	f7fe fdc3 	bl	800322c <HAL_InitTick>
 80046a6:	0003      	movs	r3, r0
}
 80046a8:	0018      	movs	r0, r3
 80046aa:	46bd      	mov	sp, r7
 80046ac:	b004      	add	sp, #16
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	40022000 	.word	0x40022000
 80046b4:	00001388 	.word	0x00001388
 80046b8:	40021000 	.word	0x40021000
 80046bc:	fffff0ff 	.word	0xfffff0ff
 80046c0:	ffff8fff 	.word	0xffff8fff
 80046c4:	0800a080 	.word	0x0800a080
 80046c8:	20000070 	.word	0x20000070
 80046cc:	20000074 	.word	0x20000074

080046d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b086      	sub	sp, #24
 80046d4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80046d6:	4b3c      	ldr	r3, [pc, #240]	; (80047c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	2238      	movs	r2, #56	; 0x38
 80046dc:	4013      	ands	r3, r2
 80046de:	d10f      	bne.n	8004700 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80046e0:	4b39      	ldr	r3, [pc, #228]	; (80047c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	0adb      	lsrs	r3, r3, #11
 80046e6:	2207      	movs	r2, #7
 80046e8:	4013      	ands	r3, r2
 80046ea:	2201      	movs	r2, #1
 80046ec:	409a      	lsls	r2, r3
 80046ee:	0013      	movs	r3, r2
 80046f0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80046f2:	6839      	ldr	r1, [r7, #0]
 80046f4:	4835      	ldr	r0, [pc, #212]	; (80047cc <HAL_RCC_GetSysClockFreq+0xfc>)
 80046f6:	f7fb fd21 	bl	800013c <__udivsi3>
 80046fa:	0003      	movs	r3, r0
 80046fc:	613b      	str	r3, [r7, #16]
 80046fe:	e05d      	b.n	80047bc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004700:	4b31      	ldr	r3, [pc, #196]	; (80047c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	2238      	movs	r2, #56	; 0x38
 8004706:	4013      	ands	r3, r2
 8004708:	2b08      	cmp	r3, #8
 800470a:	d102      	bne.n	8004712 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800470c:	4b30      	ldr	r3, [pc, #192]	; (80047d0 <HAL_RCC_GetSysClockFreq+0x100>)
 800470e:	613b      	str	r3, [r7, #16]
 8004710:	e054      	b.n	80047bc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004712:	4b2d      	ldr	r3, [pc, #180]	; (80047c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	2238      	movs	r2, #56	; 0x38
 8004718:	4013      	ands	r3, r2
 800471a:	2b10      	cmp	r3, #16
 800471c:	d138      	bne.n	8004790 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800471e:	4b2a      	ldr	r3, [pc, #168]	; (80047c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	2203      	movs	r2, #3
 8004724:	4013      	ands	r3, r2
 8004726:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004728:	4b27      	ldr	r3, [pc, #156]	; (80047c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	091b      	lsrs	r3, r3, #4
 800472e:	2207      	movs	r2, #7
 8004730:	4013      	ands	r3, r2
 8004732:	3301      	adds	r3, #1
 8004734:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2b03      	cmp	r3, #3
 800473a:	d10d      	bne.n	8004758 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800473c:	68b9      	ldr	r1, [r7, #8]
 800473e:	4824      	ldr	r0, [pc, #144]	; (80047d0 <HAL_RCC_GetSysClockFreq+0x100>)
 8004740:	f7fb fcfc 	bl	800013c <__udivsi3>
 8004744:	0003      	movs	r3, r0
 8004746:	0019      	movs	r1, r3
 8004748:	4b1f      	ldr	r3, [pc, #124]	; (80047c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	0a1b      	lsrs	r3, r3, #8
 800474e:	227f      	movs	r2, #127	; 0x7f
 8004750:	4013      	ands	r3, r2
 8004752:	434b      	muls	r3, r1
 8004754:	617b      	str	r3, [r7, #20]
        break;
 8004756:	e00d      	b.n	8004774 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004758:	68b9      	ldr	r1, [r7, #8]
 800475a:	481c      	ldr	r0, [pc, #112]	; (80047cc <HAL_RCC_GetSysClockFreq+0xfc>)
 800475c:	f7fb fcee 	bl	800013c <__udivsi3>
 8004760:	0003      	movs	r3, r0
 8004762:	0019      	movs	r1, r3
 8004764:	4b18      	ldr	r3, [pc, #96]	; (80047c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	0a1b      	lsrs	r3, r3, #8
 800476a:	227f      	movs	r2, #127	; 0x7f
 800476c:	4013      	ands	r3, r2
 800476e:	434b      	muls	r3, r1
 8004770:	617b      	str	r3, [r7, #20]
        break;
 8004772:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004774:	4b14      	ldr	r3, [pc, #80]	; (80047c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	0f5b      	lsrs	r3, r3, #29
 800477a:	2207      	movs	r2, #7
 800477c:	4013      	ands	r3, r2
 800477e:	3301      	adds	r3, #1
 8004780:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004782:	6879      	ldr	r1, [r7, #4]
 8004784:	6978      	ldr	r0, [r7, #20]
 8004786:	f7fb fcd9 	bl	800013c <__udivsi3>
 800478a:	0003      	movs	r3, r0
 800478c:	613b      	str	r3, [r7, #16]
 800478e:	e015      	b.n	80047bc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004790:	4b0d      	ldr	r3, [pc, #52]	; (80047c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	2238      	movs	r2, #56	; 0x38
 8004796:	4013      	ands	r3, r2
 8004798:	2b20      	cmp	r3, #32
 800479a:	d103      	bne.n	80047a4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800479c:	2380      	movs	r3, #128	; 0x80
 800479e:	021b      	lsls	r3, r3, #8
 80047a0:	613b      	str	r3, [r7, #16]
 80047a2:	e00b      	b.n	80047bc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80047a4:	4b08      	ldr	r3, [pc, #32]	; (80047c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	2238      	movs	r2, #56	; 0x38
 80047aa:	4013      	ands	r3, r2
 80047ac:	2b18      	cmp	r3, #24
 80047ae:	d103      	bne.n	80047b8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80047b0:	23fa      	movs	r3, #250	; 0xfa
 80047b2:	01db      	lsls	r3, r3, #7
 80047b4:	613b      	str	r3, [r7, #16]
 80047b6:	e001      	b.n	80047bc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80047b8:	2300      	movs	r3, #0
 80047ba:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80047bc:	693b      	ldr	r3, [r7, #16]
}
 80047be:	0018      	movs	r0, r3
 80047c0:	46bd      	mov	sp, r7
 80047c2:	b006      	add	sp, #24
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	46c0      	nop			; (mov r8, r8)
 80047c8:	40021000 	.word	0x40021000
 80047cc:	00f42400 	.word	0x00f42400
 80047d0:	007a1200 	.word	0x007a1200

080047d4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047d8:	4b02      	ldr	r3, [pc, #8]	; (80047e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80047da:	681b      	ldr	r3, [r3, #0]
}
 80047dc:	0018      	movs	r0, r3
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	46c0      	nop			; (mov r8, r8)
 80047e4:	20000070 	.word	0x20000070

080047e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047e8:	b5b0      	push	{r4, r5, r7, lr}
 80047ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80047ec:	f7ff fff2 	bl	80047d4 <HAL_RCC_GetHCLKFreq>
 80047f0:	0004      	movs	r4, r0
 80047f2:	f7ff fb3f 	bl	8003e74 <LL_RCC_GetAPB1Prescaler>
 80047f6:	0003      	movs	r3, r0
 80047f8:	0b1a      	lsrs	r2, r3, #12
 80047fa:	4b05      	ldr	r3, [pc, #20]	; (8004810 <HAL_RCC_GetPCLK1Freq+0x28>)
 80047fc:	0092      	lsls	r2, r2, #2
 80047fe:	58d3      	ldr	r3, [r2, r3]
 8004800:	221f      	movs	r2, #31
 8004802:	4013      	ands	r3, r2
 8004804:	40dc      	lsrs	r4, r3
 8004806:	0023      	movs	r3, r4
}
 8004808:	0018      	movs	r0, r3
 800480a:	46bd      	mov	sp, r7
 800480c:	bdb0      	pop	{r4, r5, r7, pc}
 800480e:	46c0      	nop			; (mov r8, r8)
 8004810:	0800a0c0 	.word	0x0800a0c0

08004814 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b086      	sub	sp, #24
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800481c:	2313      	movs	r3, #19
 800481e:	18fb      	adds	r3, r7, r3
 8004820:	2200      	movs	r2, #0
 8004822:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004824:	2312      	movs	r3, #18
 8004826:	18fb      	adds	r3, r7, r3
 8004828:	2200      	movs	r2, #0
 800482a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	2380      	movs	r3, #128	; 0x80
 8004832:	029b      	lsls	r3, r3, #10
 8004834:	4013      	ands	r3, r2
 8004836:	d100      	bne.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004838:	e0a3      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800483a:	2011      	movs	r0, #17
 800483c:	183b      	adds	r3, r7, r0
 800483e:	2200      	movs	r2, #0
 8004840:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004842:	4ba5      	ldr	r3, [pc, #660]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004844:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004846:	2380      	movs	r3, #128	; 0x80
 8004848:	055b      	lsls	r3, r3, #21
 800484a:	4013      	ands	r3, r2
 800484c:	d110      	bne.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800484e:	4ba2      	ldr	r3, [pc, #648]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004850:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004852:	4ba1      	ldr	r3, [pc, #644]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004854:	2180      	movs	r1, #128	; 0x80
 8004856:	0549      	lsls	r1, r1, #21
 8004858:	430a      	orrs	r2, r1
 800485a:	63da      	str	r2, [r3, #60]	; 0x3c
 800485c:	4b9e      	ldr	r3, [pc, #632]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800485e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004860:	2380      	movs	r3, #128	; 0x80
 8004862:	055b      	lsls	r3, r3, #21
 8004864:	4013      	ands	r3, r2
 8004866:	60bb      	str	r3, [r7, #8]
 8004868:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800486a:	183b      	adds	r3, r7, r0
 800486c:	2201      	movs	r2, #1
 800486e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004870:	4b9a      	ldr	r3, [pc, #616]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	4b99      	ldr	r3, [pc, #612]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004876:	2180      	movs	r1, #128	; 0x80
 8004878:	0049      	lsls	r1, r1, #1
 800487a:	430a      	orrs	r2, r1
 800487c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800487e:	f7fe fd31 	bl	80032e4 <HAL_GetTick>
 8004882:	0003      	movs	r3, r0
 8004884:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004886:	e00b      	b.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004888:	f7fe fd2c 	bl	80032e4 <HAL_GetTick>
 800488c:	0002      	movs	r2, r0
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	2b02      	cmp	r3, #2
 8004894:	d904      	bls.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004896:	2313      	movs	r3, #19
 8004898:	18fb      	adds	r3, r7, r3
 800489a:	2203      	movs	r2, #3
 800489c:	701a      	strb	r2, [r3, #0]
        break;
 800489e:	e005      	b.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80048a0:	4b8e      	ldr	r3, [pc, #568]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	2380      	movs	r3, #128	; 0x80
 80048a6:	005b      	lsls	r3, r3, #1
 80048a8:	4013      	ands	r3, r2
 80048aa:	d0ed      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80048ac:	2313      	movs	r3, #19
 80048ae:	18fb      	adds	r3, r7, r3
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d154      	bne.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80048b6:	4b88      	ldr	r3, [pc, #544]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80048b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80048ba:	23c0      	movs	r3, #192	; 0xc0
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	4013      	ands	r3, r2
 80048c0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d019      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048cc:	697a      	ldr	r2, [r7, #20]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d014      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80048d2:	4b81      	ldr	r3, [pc, #516]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80048d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048d6:	4a82      	ldr	r2, [pc, #520]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80048d8:	4013      	ands	r3, r2
 80048da:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80048dc:	4b7e      	ldr	r3, [pc, #504]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80048de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80048e0:	4b7d      	ldr	r3, [pc, #500]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80048e2:	2180      	movs	r1, #128	; 0x80
 80048e4:	0249      	lsls	r1, r1, #9
 80048e6:	430a      	orrs	r2, r1
 80048e8:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80048ea:	4b7b      	ldr	r3, [pc, #492]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80048ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80048ee:	4b7a      	ldr	r3, [pc, #488]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80048f0:	497c      	ldr	r1, [pc, #496]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80048f2:	400a      	ands	r2, r1
 80048f4:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80048f6:	4b78      	ldr	r3, [pc, #480]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80048f8:	697a      	ldr	r2, [r7, #20]
 80048fa:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	2201      	movs	r2, #1
 8004900:	4013      	ands	r3, r2
 8004902:	d016      	beq.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004904:	f7fe fcee 	bl	80032e4 <HAL_GetTick>
 8004908:	0003      	movs	r3, r0
 800490a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800490c:	e00c      	b.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800490e:	f7fe fce9 	bl	80032e4 <HAL_GetTick>
 8004912:	0002      	movs	r2, r0
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	4a73      	ldr	r2, [pc, #460]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d904      	bls.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800491e:	2313      	movs	r3, #19
 8004920:	18fb      	adds	r3, r7, r3
 8004922:	2203      	movs	r2, #3
 8004924:	701a      	strb	r2, [r3, #0]
            break;
 8004926:	e004      	b.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004928:	4b6b      	ldr	r3, [pc, #428]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800492a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800492c:	2202      	movs	r2, #2
 800492e:	4013      	ands	r3, r2
 8004930:	d0ed      	beq.n	800490e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004932:	2313      	movs	r3, #19
 8004934:	18fb      	adds	r3, r7, r3
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d10a      	bne.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800493c:	4b66      	ldr	r3, [pc, #408]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800493e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004940:	4a67      	ldr	r2, [pc, #412]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004942:	4013      	ands	r3, r2
 8004944:	0019      	movs	r1, r3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800494a:	4b63      	ldr	r3, [pc, #396]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800494c:	430a      	orrs	r2, r1
 800494e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004950:	e00c      	b.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004952:	2312      	movs	r3, #18
 8004954:	18fb      	adds	r3, r7, r3
 8004956:	2213      	movs	r2, #19
 8004958:	18ba      	adds	r2, r7, r2
 800495a:	7812      	ldrb	r2, [r2, #0]
 800495c:	701a      	strb	r2, [r3, #0]
 800495e:	e005      	b.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004960:	2312      	movs	r3, #18
 8004962:	18fb      	adds	r3, r7, r3
 8004964:	2213      	movs	r2, #19
 8004966:	18ba      	adds	r2, r7, r2
 8004968:	7812      	ldrb	r2, [r2, #0]
 800496a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800496c:	2311      	movs	r3, #17
 800496e:	18fb      	adds	r3, r7, r3
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	2b01      	cmp	r3, #1
 8004974:	d105      	bne.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004976:	4b58      	ldr	r3, [pc, #352]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004978:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800497a:	4b57      	ldr	r3, [pc, #348]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800497c:	495b      	ldr	r1, [pc, #364]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800497e:	400a      	ands	r2, r1
 8004980:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2201      	movs	r2, #1
 8004988:	4013      	ands	r3, r2
 800498a:	d009      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800498c:	4b52      	ldr	r3, [pc, #328]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800498e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004990:	2203      	movs	r2, #3
 8004992:	4393      	bics	r3, r2
 8004994:	0019      	movs	r1, r3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	685a      	ldr	r2, [r3, #4]
 800499a:	4b4f      	ldr	r3, [pc, #316]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800499c:	430a      	orrs	r2, r1
 800499e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2210      	movs	r2, #16
 80049a6:	4013      	ands	r3, r2
 80049a8:	d009      	beq.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80049aa:	4b4b      	ldr	r3, [pc, #300]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80049ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ae:	4a50      	ldr	r2, [pc, #320]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80049b0:	4013      	ands	r3, r2
 80049b2:	0019      	movs	r1, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	689a      	ldr	r2, [r3, #8]
 80049b8:	4b47      	ldr	r3, [pc, #284]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80049ba:	430a      	orrs	r2, r1
 80049bc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	2380      	movs	r3, #128	; 0x80
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	4013      	ands	r3, r2
 80049c8:	d009      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049ca:	4b43      	ldr	r3, [pc, #268]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80049cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ce:	4a49      	ldr	r2, [pc, #292]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80049d0:	4013      	ands	r3, r2
 80049d2:	0019      	movs	r1, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	695a      	ldr	r2, [r3, #20]
 80049d8:	4b3f      	ldr	r3, [pc, #252]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80049da:	430a      	orrs	r2, r1
 80049dc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	2380      	movs	r3, #128	; 0x80
 80049e4:	00db      	lsls	r3, r3, #3
 80049e6:	4013      	ands	r3, r2
 80049e8:	d009      	beq.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80049ea:	4b3b      	ldr	r3, [pc, #236]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80049ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ee:	4a42      	ldr	r2, [pc, #264]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80049f0:	4013      	ands	r3, r2
 80049f2:	0019      	movs	r1, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	699a      	ldr	r2, [r3, #24]
 80049f8:	4b37      	ldr	r3, [pc, #220]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80049fa:	430a      	orrs	r2, r1
 80049fc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2220      	movs	r2, #32
 8004a04:	4013      	ands	r3, r2
 8004a06:	d009      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a08:	4b33      	ldr	r3, [pc, #204]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a0c:	4a3b      	ldr	r2, [pc, #236]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004a0e:	4013      	ands	r3, r2
 8004a10:	0019      	movs	r1, r3
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	68da      	ldr	r2, [r3, #12]
 8004a16:	4b30      	ldr	r3, [pc, #192]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a18:	430a      	orrs	r2, r1
 8004a1a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	2380      	movs	r3, #128	; 0x80
 8004a22:	01db      	lsls	r3, r3, #7
 8004a24:	4013      	ands	r3, r2
 8004a26:	d015      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a28:	4b2b      	ldr	r3, [pc, #172]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	0899      	lsrs	r1, r3, #2
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	69da      	ldr	r2, [r3, #28]
 8004a34:	4b28      	ldr	r3, [pc, #160]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a36:	430a      	orrs	r2, r1
 8004a38:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	69da      	ldr	r2, [r3, #28]
 8004a3e:	2380      	movs	r3, #128	; 0x80
 8004a40:	05db      	lsls	r3, r3, #23
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d106      	bne.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004a46:	4b24      	ldr	r3, [pc, #144]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a48:	68da      	ldr	r2, [r3, #12]
 8004a4a:	4b23      	ldr	r3, [pc, #140]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a4c:	2180      	movs	r1, #128	; 0x80
 8004a4e:	0249      	lsls	r1, r1, #9
 8004a50:	430a      	orrs	r2, r1
 8004a52:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	2380      	movs	r3, #128	; 0x80
 8004a5a:	039b      	lsls	r3, r3, #14
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	d016      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004a60:	4b1d      	ldr	r3, [pc, #116]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a64:	4a26      	ldr	r2, [pc, #152]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004a66:	4013      	ands	r3, r2
 8004a68:	0019      	movs	r1, r3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a1a      	ldr	r2, [r3, #32]
 8004a6e:	4b1a      	ldr	r3, [pc, #104]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a70:	430a      	orrs	r2, r1
 8004a72:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a1a      	ldr	r2, [r3, #32]
 8004a78:	2380      	movs	r3, #128	; 0x80
 8004a7a:	03db      	lsls	r3, r3, #15
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d106      	bne.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004a80:	4b15      	ldr	r3, [pc, #84]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a82:	68da      	ldr	r2, [r3, #12]
 8004a84:	4b14      	ldr	r3, [pc, #80]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a86:	2180      	movs	r1, #128	; 0x80
 8004a88:	0449      	lsls	r1, r1, #17
 8004a8a:	430a      	orrs	r2, r1
 8004a8c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	2380      	movs	r3, #128	; 0x80
 8004a94:	011b      	lsls	r3, r3, #4
 8004a96:	4013      	ands	r3, r2
 8004a98:	d016      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004a9a:	4b0f      	ldr	r3, [pc, #60]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a9e:	4a19      	ldr	r2, [pc, #100]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	0019      	movs	r1, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	691a      	ldr	r2, [r3, #16]
 8004aa8:	4b0b      	ldr	r3, [pc, #44]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	691a      	ldr	r2, [r3, #16]
 8004ab2:	2380      	movs	r3, #128	; 0x80
 8004ab4:	01db      	lsls	r3, r3, #7
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d106      	bne.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004aba:	4b07      	ldr	r3, [pc, #28]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004abc:	68da      	ldr	r2, [r3, #12]
 8004abe:	4b06      	ldr	r3, [pc, #24]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004ac0:	2180      	movs	r1, #128	; 0x80
 8004ac2:	0249      	lsls	r1, r1, #9
 8004ac4:	430a      	orrs	r2, r1
 8004ac6:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004ac8:	2312      	movs	r3, #18
 8004aca:	18fb      	adds	r3, r7, r3
 8004acc:	781b      	ldrb	r3, [r3, #0]
}
 8004ace:	0018      	movs	r0, r3
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	b006      	add	sp, #24
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	46c0      	nop			; (mov r8, r8)
 8004ad8:	40021000 	.word	0x40021000
 8004adc:	40007000 	.word	0x40007000
 8004ae0:	fffffcff 	.word	0xfffffcff
 8004ae4:	fffeffff 	.word	0xfffeffff
 8004ae8:	00001388 	.word	0x00001388
 8004aec:	efffffff 	.word	0xefffffff
 8004af0:	fffff3ff 	.word	0xfffff3ff
 8004af4:	fff3ffff 	.word	0xfff3ffff
 8004af8:	ffcfffff 	.word	0xffcfffff
 8004afc:	ffffcfff 	.word	0xffffcfff
 8004b00:	ffbfffff 	.word	0xffbfffff
 8004b04:	ffff3fff 	.word	0xffff3fff

08004b08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d101      	bne.n	8004b1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e04a      	b.n	8004bb0 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	223d      	movs	r2, #61	; 0x3d
 8004b1e:	5c9b      	ldrb	r3, [r3, r2]
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d107      	bne.n	8004b36 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	223c      	movs	r2, #60	; 0x3c
 8004b2a:	2100      	movs	r1, #0
 8004b2c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	0018      	movs	r0, r3
 8004b32:	f7fe f971 	bl	8002e18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	223d      	movs	r2, #61	; 0x3d
 8004b3a:	2102      	movs	r1, #2
 8004b3c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	3304      	adds	r3, #4
 8004b46:	0019      	movs	r1, r3
 8004b48:	0010      	movs	r0, r2
 8004b4a:	f000 fa09 	bl	8004f60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2248      	movs	r2, #72	; 0x48
 8004b52:	2101      	movs	r1, #1
 8004b54:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	223e      	movs	r2, #62	; 0x3e
 8004b5a:	2101      	movs	r1, #1
 8004b5c:	5499      	strb	r1, [r3, r2]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	223f      	movs	r2, #63	; 0x3f
 8004b62:	2101      	movs	r1, #1
 8004b64:	5499      	strb	r1, [r3, r2]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2240      	movs	r2, #64	; 0x40
 8004b6a:	2101      	movs	r1, #1
 8004b6c:	5499      	strb	r1, [r3, r2]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2241      	movs	r2, #65	; 0x41
 8004b72:	2101      	movs	r1, #1
 8004b74:	5499      	strb	r1, [r3, r2]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2242      	movs	r2, #66	; 0x42
 8004b7a:	2101      	movs	r1, #1
 8004b7c:	5499      	strb	r1, [r3, r2]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2243      	movs	r2, #67	; 0x43
 8004b82:	2101      	movs	r1, #1
 8004b84:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2244      	movs	r2, #68	; 0x44
 8004b8a:	2101      	movs	r1, #1
 8004b8c:	5499      	strb	r1, [r3, r2]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2245      	movs	r2, #69	; 0x45
 8004b92:	2101      	movs	r1, #1
 8004b94:	5499      	strb	r1, [r3, r2]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2246      	movs	r2, #70	; 0x46
 8004b9a:	2101      	movs	r1, #1
 8004b9c:	5499      	strb	r1, [r3, r2]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2247      	movs	r2, #71	; 0x47
 8004ba2:	2101      	movs	r1, #1
 8004ba4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	223d      	movs	r2, #61	; 0x3d
 8004baa:	2101      	movs	r1, #1
 8004bac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004bae:	2300      	movs	r3, #0
}
 8004bb0:	0018      	movs	r0, r3
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	b002      	add	sp, #8
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	223d      	movs	r2, #61	; 0x3d
 8004bc4:	5c9b      	ldrb	r3, [r3, r2]
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d001      	beq.n	8004bd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e03d      	b.n	8004c4c <HAL_TIM_Base_Start_IT+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	223d      	movs	r2, #61	; 0x3d
 8004bd4:	2102      	movs	r1, #2
 8004bd6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68da      	ldr	r2, [r3, #12]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	2101      	movs	r1, #1
 8004be4:	430a      	orrs	r2, r1
 8004be6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a19      	ldr	r2, [pc, #100]	; (8004c54 <HAL_TIM_Base_Start_IT+0x9c>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d00a      	beq.n	8004c08 <HAL_TIM_Base_Start_IT+0x50>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	2380      	movs	r3, #128	; 0x80
 8004bf8:	05db      	lsls	r3, r3, #23
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d004      	beq.n	8004c08 <HAL_TIM_Base_Start_IT+0x50>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a15      	ldr	r2, [pc, #84]	; (8004c58 <HAL_TIM_Base_Start_IT+0xa0>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d116      	bne.n	8004c36 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	4a13      	ldr	r2, [pc, #76]	; (8004c5c <HAL_TIM_Base_Start_IT+0xa4>)
 8004c10:	4013      	ands	r3, r2
 8004c12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2b06      	cmp	r3, #6
 8004c18:	d016      	beq.n	8004c48 <HAL_TIM_Base_Start_IT+0x90>
 8004c1a:	68fa      	ldr	r2, [r7, #12]
 8004c1c:	2380      	movs	r3, #128	; 0x80
 8004c1e:	025b      	lsls	r3, r3, #9
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d011      	beq.n	8004c48 <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	2101      	movs	r1, #1
 8004c30:	430a      	orrs	r2, r1
 8004c32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c34:	e008      	b.n	8004c48 <HAL_TIM_Base_Start_IT+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2101      	movs	r1, #1
 8004c42:	430a      	orrs	r2, r1
 8004c44:	601a      	str	r2, [r3, #0]
 8004c46:	e000      	b.n	8004c4a <HAL_TIM_Base_Start_IT+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c48:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004c4a:	2300      	movs	r3, #0
}
 8004c4c:	0018      	movs	r0, r3
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	b004      	add	sp, #16
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	40012c00 	.word	0x40012c00
 8004c58:	40000400 	.word	0x40000400
 8004c5c:	00010007 	.word	0x00010007

08004c60 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b082      	sub	sp, #8
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68da      	ldr	r2, [r3, #12]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	2101      	movs	r1, #1
 8004c74:	438a      	bics	r2, r1
 8004c76:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	6a1b      	ldr	r3, [r3, #32]
 8004c7e:	4a0d      	ldr	r2, [pc, #52]	; (8004cb4 <HAL_TIM_Base_Stop_IT+0x54>)
 8004c80:	4013      	ands	r3, r2
 8004c82:	d10d      	bne.n	8004ca0 <HAL_TIM_Base_Stop_IT+0x40>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	6a1b      	ldr	r3, [r3, #32]
 8004c8a:	4a0b      	ldr	r2, [pc, #44]	; (8004cb8 <HAL_TIM_Base_Stop_IT+0x58>)
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	d107      	bne.n	8004ca0 <HAL_TIM_Base_Stop_IT+0x40>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	2101      	movs	r1, #1
 8004c9c:	438a      	bics	r2, r1
 8004c9e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	223d      	movs	r2, #61	; 0x3d
 8004ca4:	2101      	movs	r1, #1
 8004ca6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	0018      	movs	r0, r3
 8004cac:	46bd      	mov	sp, r7
 8004cae:	b002      	add	sp, #8
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	46c0      	nop			; (mov r8, r8)
 8004cb4:	00001111 	.word	0x00001111
 8004cb8:	00000444 	.word	0x00000444

08004cbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	691b      	ldr	r3, [r3, #16]
 8004cca:	2202      	movs	r2, #2
 8004ccc:	4013      	ands	r3, r2
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	d124      	bne.n	8004d1c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	2202      	movs	r2, #2
 8004cda:	4013      	ands	r3, r2
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d11d      	bne.n	8004d1c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2203      	movs	r2, #3
 8004ce6:	4252      	negs	r2, r2
 8004ce8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2201      	movs	r2, #1
 8004cee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	699b      	ldr	r3, [r3, #24]
 8004cf6:	2203      	movs	r2, #3
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	d004      	beq.n	8004d06 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	0018      	movs	r0, r3
 8004d00:	f000 f916 	bl	8004f30 <HAL_TIM_IC_CaptureCallback>
 8004d04:	e007      	b.n	8004d16 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	0018      	movs	r0, r3
 8004d0a:	f000 f909 	bl	8004f20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	0018      	movs	r0, r3
 8004d12:	f000 f915 	bl	8004f40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	2204      	movs	r2, #4
 8004d24:	4013      	ands	r3, r2
 8004d26:	2b04      	cmp	r3, #4
 8004d28:	d125      	bne.n	8004d76 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	2204      	movs	r2, #4
 8004d32:	4013      	ands	r3, r2
 8004d34:	2b04      	cmp	r3, #4
 8004d36:	d11e      	bne.n	8004d76 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2205      	movs	r2, #5
 8004d3e:	4252      	negs	r2, r2
 8004d40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2202      	movs	r2, #2
 8004d46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	699a      	ldr	r2, [r3, #24]
 8004d4e:	23c0      	movs	r3, #192	; 0xc0
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	4013      	ands	r3, r2
 8004d54:	d004      	beq.n	8004d60 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	0018      	movs	r0, r3
 8004d5a:	f000 f8e9 	bl	8004f30 <HAL_TIM_IC_CaptureCallback>
 8004d5e:	e007      	b.n	8004d70 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	0018      	movs	r0, r3
 8004d64:	f000 f8dc 	bl	8004f20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	0018      	movs	r0, r3
 8004d6c:	f000 f8e8 	bl	8004f40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	691b      	ldr	r3, [r3, #16]
 8004d7c:	2208      	movs	r2, #8
 8004d7e:	4013      	ands	r3, r2
 8004d80:	2b08      	cmp	r3, #8
 8004d82:	d124      	bne.n	8004dce <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	2208      	movs	r2, #8
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	2b08      	cmp	r3, #8
 8004d90:	d11d      	bne.n	8004dce <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	2209      	movs	r2, #9
 8004d98:	4252      	negs	r2, r2
 8004d9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2204      	movs	r2, #4
 8004da0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	69db      	ldr	r3, [r3, #28]
 8004da8:	2203      	movs	r2, #3
 8004daa:	4013      	ands	r3, r2
 8004dac:	d004      	beq.n	8004db8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	0018      	movs	r0, r3
 8004db2:	f000 f8bd 	bl	8004f30 <HAL_TIM_IC_CaptureCallback>
 8004db6:	e007      	b.n	8004dc8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	0018      	movs	r0, r3
 8004dbc:	f000 f8b0 	bl	8004f20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	0018      	movs	r0, r3
 8004dc4:	f000 f8bc 	bl	8004f40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	691b      	ldr	r3, [r3, #16]
 8004dd4:	2210      	movs	r2, #16
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	2b10      	cmp	r3, #16
 8004dda:	d125      	bne.n	8004e28 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	2210      	movs	r2, #16
 8004de4:	4013      	ands	r3, r2
 8004de6:	2b10      	cmp	r3, #16
 8004de8:	d11e      	bne.n	8004e28 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	2211      	movs	r2, #17
 8004df0:	4252      	negs	r2, r2
 8004df2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2208      	movs	r2, #8
 8004df8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	69da      	ldr	r2, [r3, #28]
 8004e00:	23c0      	movs	r3, #192	; 0xc0
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	4013      	ands	r3, r2
 8004e06:	d004      	beq.n	8004e12 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	0018      	movs	r0, r3
 8004e0c:	f000 f890 	bl	8004f30 <HAL_TIM_IC_CaptureCallback>
 8004e10:	e007      	b.n	8004e22 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	0018      	movs	r0, r3
 8004e16:	f000 f883 	bl	8004f20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	0018      	movs	r0, r3
 8004e1e:	f000 f88f 	bl	8004f40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	4013      	ands	r3, r2
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d10f      	bne.n	8004e56 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	4013      	ands	r3, r2
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d108      	bne.n	8004e56 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2202      	movs	r2, #2
 8004e4a:	4252      	negs	r2, r2
 8004e4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	0018      	movs	r0, r3
 8004e52:	f7fd ff9d 	bl	8002d90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	691b      	ldr	r3, [r3, #16]
 8004e5c:	2280      	movs	r2, #128	; 0x80
 8004e5e:	4013      	ands	r3, r2
 8004e60:	2b80      	cmp	r3, #128	; 0x80
 8004e62:	d10f      	bne.n	8004e84 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	2280      	movs	r2, #128	; 0x80
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	2b80      	cmp	r3, #128	; 0x80
 8004e70:	d108      	bne.n	8004e84 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2281      	movs	r2, #129	; 0x81
 8004e78:	4252      	negs	r2, r2
 8004e7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	0018      	movs	r0, r3
 8004e80:	f000 f8ec 	bl	800505c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	691a      	ldr	r2, [r3, #16]
 8004e8a:	2380      	movs	r3, #128	; 0x80
 8004e8c:	005b      	lsls	r3, r3, #1
 8004e8e:	401a      	ands	r2, r3
 8004e90:	2380      	movs	r3, #128	; 0x80
 8004e92:	005b      	lsls	r3, r3, #1
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d10e      	bne.n	8004eb6 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	2280      	movs	r2, #128	; 0x80
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	2b80      	cmp	r3, #128	; 0x80
 8004ea4:	d107      	bne.n	8004eb6 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a1c      	ldr	r2, [pc, #112]	; (8004f1c <HAL_TIM_IRQHandler+0x260>)
 8004eac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	0018      	movs	r0, r3
 8004eb2:	f000 f8db 	bl	800506c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	691b      	ldr	r3, [r3, #16]
 8004ebc:	2240      	movs	r2, #64	; 0x40
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	2b40      	cmp	r3, #64	; 0x40
 8004ec2:	d10f      	bne.n	8004ee4 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	2240      	movs	r2, #64	; 0x40
 8004ecc:	4013      	ands	r3, r2
 8004ece:	2b40      	cmp	r3, #64	; 0x40
 8004ed0:	d108      	bne.n	8004ee4 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2241      	movs	r2, #65	; 0x41
 8004ed8:	4252      	negs	r2, r2
 8004eda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	0018      	movs	r0, r3
 8004ee0:	f000 f836 	bl	8004f50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	2220      	movs	r2, #32
 8004eec:	4013      	ands	r3, r2
 8004eee:	2b20      	cmp	r3, #32
 8004ef0:	d10f      	bne.n	8004f12 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	2220      	movs	r2, #32
 8004efa:	4013      	ands	r3, r2
 8004efc:	2b20      	cmp	r3, #32
 8004efe:	d108      	bne.n	8004f12 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	2221      	movs	r2, #33	; 0x21
 8004f06:	4252      	negs	r2, r2
 8004f08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	0018      	movs	r0, r3
 8004f0e:	f000 f89d 	bl	800504c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f12:	46c0      	nop			; (mov r8, r8)
 8004f14:	46bd      	mov	sp, r7
 8004f16:	b002      	add	sp, #8
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	46c0      	nop			; (mov r8, r8)
 8004f1c:	fffffeff 	.word	0xfffffeff

08004f20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b082      	sub	sp, #8
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f28:	46c0      	nop			; (mov r8, r8)
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	b002      	add	sp, #8
 8004f2e:	bd80      	pop	{r7, pc}

08004f30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b082      	sub	sp, #8
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f38:	46c0      	nop			; (mov r8, r8)
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	b002      	add	sp, #8
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b082      	sub	sp, #8
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f48:	46c0      	nop			; (mov r8, r8)
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	b002      	add	sp, #8
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f58:	46c0      	nop			; (mov r8, r8)
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	b002      	add	sp, #8
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a30      	ldr	r2, [pc, #192]	; (8005034 <TIM_Base_SetConfig+0xd4>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d008      	beq.n	8004f8a <TIM_Base_SetConfig+0x2a>
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	2380      	movs	r3, #128	; 0x80
 8004f7c:	05db      	lsls	r3, r3, #23
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d003      	beq.n	8004f8a <TIM_Base_SetConfig+0x2a>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a2c      	ldr	r2, [pc, #176]	; (8005038 <TIM_Base_SetConfig+0xd8>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d108      	bne.n	8004f9c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2270      	movs	r2, #112	; 0x70
 8004f8e:	4393      	bics	r3, r2
 8004f90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	68fa      	ldr	r2, [r7, #12]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4a25      	ldr	r2, [pc, #148]	; (8005034 <TIM_Base_SetConfig+0xd4>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d014      	beq.n	8004fce <TIM_Base_SetConfig+0x6e>
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	2380      	movs	r3, #128	; 0x80
 8004fa8:	05db      	lsls	r3, r3, #23
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d00f      	beq.n	8004fce <TIM_Base_SetConfig+0x6e>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a21      	ldr	r2, [pc, #132]	; (8005038 <TIM_Base_SetConfig+0xd8>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d00b      	beq.n	8004fce <TIM_Base_SetConfig+0x6e>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a20      	ldr	r2, [pc, #128]	; (800503c <TIM_Base_SetConfig+0xdc>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d007      	beq.n	8004fce <TIM_Base_SetConfig+0x6e>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a1f      	ldr	r2, [pc, #124]	; (8005040 <TIM_Base_SetConfig+0xe0>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d003      	beq.n	8004fce <TIM_Base_SetConfig+0x6e>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a1e      	ldr	r2, [pc, #120]	; (8005044 <TIM_Base_SetConfig+0xe4>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d108      	bne.n	8004fe0 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	4a1d      	ldr	r2, [pc, #116]	; (8005048 <TIM_Base_SetConfig+0xe8>)
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2280      	movs	r2, #128	; 0x80
 8004fe4:	4393      	bics	r3, r2
 8004fe6:	001a      	movs	r2, r3
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	695b      	ldr	r3, [r3, #20]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	689a      	ldr	r2, [r3, #8]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a0a      	ldr	r2, [pc, #40]	; (8005034 <TIM_Base_SetConfig+0xd4>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d007      	beq.n	800501e <TIM_Base_SetConfig+0xbe>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a0b      	ldr	r2, [pc, #44]	; (8005040 <TIM_Base_SetConfig+0xe0>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d003      	beq.n	800501e <TIM_Base_SetConfig+0xbe>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a0a      	ldr	r2, [pc, #40]	; (8005044 <TIM_Base_SetConfig+0xe4>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d103      	bne.n	8005026 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	691a      	ldr	r2, [r3, #16]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2201      	movs	r2, #1
 800502a:	615a      	str	r2, [r3, #20]
}
 800502c:	46c0      	nop			; (mov r8, r8)
 800502e:	46bd      	mov	sp, r7
 8005030:	b004      	add	sp, #16
 8005032:	bd80      	pop	{r7, pc}
 8005034:	40012c00 	.word	0x40012c00
 8005038:	40000400 	.word	0x40000400
 800503c:	40002000 	.word	0x40002000
 8005040:	40014400 	.word	0x40014400
 8005044:	40014800 	.word	0x40014800
 8005048:	fffffcff 	.word	0xfffffcff

0800504c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005054:	46c0      	nop			; (mov r8, r8)
 8005056:	46bd      	mov	sp, r7
 8005058:	b002      	add	sp, #8
 800505a:	bd80      	pop	{r7, pc}

0800505c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b082      	sub	sp, #8
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005064:	46c0      	nop			; (mov r8, r8)
 8005066:	46bd      	mov	sp, r7
 8005068:	b002      	add	sp, #8
 800506a:	bd80      	pop	{r7, pc}

0800506c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b082      	sub	sp, #8
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005074:	46c0      	nop			; (mov r8, r8)
 8005076:	46bd      	mov	sp, r7
 8005078:	b002      	add	sp, #8
 800507a:	bd80      	pop	{r7, pc}

0800507c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b082      	sub	sp, #8
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d101      	bne.n	800508e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e046      	b.n	800511c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2288      	movs	r2, #136	; 0x88
 8005092:	589b      	ldr	r3, [r3, r2]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d107      	bne.n	80050a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2284      	movs	r2, #132	; 0x84
 800509c:	2100      	movs	r1, #0
 800509e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	0018      	movs	r0, r3
 80050a4:	f7fd fee0 	bl	8002e68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2288      	movs	r2, #136	; 0x88
 80050ac:	2124      	movs	r1, #36	; 0x24
 80050ae:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	2101      	movs	r1, #1
 80050bc:	438a      	bics	r2, r1
 80050be:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	0018      	movs	r0, r3
 80050c4:	f000 fc12 	bl	80058ec <UART_SetConfig>
 80050c8:	0003      	movs	r3, r0
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d101      	bne.n	80050d2 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e024      	b.n	800511c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d003      	beq.n	80050e2 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	0018      	movs	r0, r3
 80050de:	f000 fe7d 	bl	8005ddc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	685a      	ldr	r2, [r3, #4]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	490d      	ldr	r1, [pc, #52]	; (8005124 <HAL_UART_Init+0xa8>)
 80050ee:	400a      	ands	r2, r1
 80050f0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	689a      	ldr	r2, [r3, #8]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	212a      	movs	r1, #42	; 0x2a
 80050fe:	438a      	bics	r2, r1
 8005100:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2101      	movs	r1, #1
 800510e:	430a      	orrs	r2, r1
 8005110:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	0018      	movs	r0, r3
 8005116:	f000 ff15 	bl	8005f44 <UART_CheckIdleState>
 800511a:	0003      	movs	r3, r0
}
 800511c:	0018      	movs	r0, r3
 800511e:	46bd      	mov	sp, r7
 8005120:	b002      	add	sp, #8
 8005122:	bd80      	pop	{r7, pc}
 8005124:	ffffb7ff 	.word	0xffffb7ff

08005128 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b08a      	sub	sp, #40	; 0x28
 800512c:	af02      	add	r7, sp, #8
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	603b      	str	r3, [r7, #0]
 8005134:	1dbb      	adds	r3, r7, #6
 8005136:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2288      	movs	r2, #136	; 0x88
 800513c:	589b      	ldr	r3, [r3, r2]
 800513e:	2b20      	cmp	r3, #32
 8005140:	d000      	beq.n	8005144 <HAL_UART_Transmit+0x1c>
 8005142:	e088      	b.n	8005256 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d003      	beq.n	8005152 <HAL_UART_Transmit+0x2a>
 800514a:	1dbb      	adds	r3, r7, #6
 800514c:	881b      	ldrh	r3, [r3, #0]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d101      	bne.n	8005156 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e080      	b.n	8005258 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	689a      	ldr	r2, [r3, #8]
 800515a:	2380      	movs	r3, #128	; 0x80
 800515c:	015b      	lsls	r3, r3, #5
 800515e:	429a      	cmp	r2, r3
 8005160:	d109      	bne.n	8005176 <HAL_UART_Transmit+0x4e>
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d105      	bne.n	8005176 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	2201      	movs	r2, #1
 800516e:	4013      	ands	r3, r2
 8005170:	d001      	beq.n	8005176 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e070      	b.n	8005258 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2290      	movs	r2, #144	; 0x90
 800517a:	2100      	movs	r1, #0
 800517c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2288      	movs	r2, #136	; 0x88
 8005182:	2121      	movs	r1, #33	; 0x21
 8005184:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005186:	f7fe f8ad 	bl	80032e4 <HAL_GetTick>
 800518a:	0003      	movs	r3, r0
 800518c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	1dba      	adds	r2, r7, #6
 8005192:	2154      	movs	r1, #84	; 0x54
 8005194:	8812      	ldrh	r2, [r2, #0]
 8005196:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	1dba      	adds	r2, r7, #6
 800519c:	2156      	movs	r1, #86	; 0x56
 800519e:	8812      	ldrh	r2, [r2, #0]
 80051a0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	689a      	ldr	r2, [r3, #8]
 80051a6:	2380      	movs	r3, #128	; 0x80
 80051a8:	015b      	lsls	r3, r3, #5
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d108      	bne.n	80051c0 <HAL_UART_Transmit+0x98>
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d104      	bne.n	80051c0 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80051b6:	2300      	movs	r3, #0
 80051b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	61bb      	str	r3, [r7, #24]
 80051be:	e003      	b.n	80051c8 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051c4:	2300      	movs	r3, #0
 80051c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80051c8:	e02c      	b.n	8005224 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051ca:	697a      	ldr	r2, [r7, #20]
 80051cc:	68f8      	ldr	r0, [r7, #12]
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	9300      	str	r3, [sp, #0]
 80051d2:	0013      	movs	r3, r2
 80051d4:	2200      	movs	r2, #0
 80051d6:	2180      	movs	r1, #128	; 0x80
 80051d8:	f000 ff02 	bl	8005fe0 <UART_WaitOnFlagUntilTimeout>
 80051dc:	1e03      	subs	r3, r0, #0
 80051de:	d001      	beq.n	80051e4 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 80051e0:	2303      	movs	r3, #3
 80051e2:	e039      	b.n	8005258 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d10b      	bne.n	8005202 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80051ea:	69bb      	ldr	r3, [r7, #24]
 80051ec:	881b      	ldrh	r3, [r3, #0]
 80051ee:	001a      	movs	r2, r3
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	05d2      	lsls	r2, r2, #23
 80051f6:	0dd2      	lsrs	r2, r2, #23
 80051f8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	3302      	adds	r3, #2
 80051fe:	61bb      	str	r3, [r7, #24]
 8005200:	e007      	b.n	8005212 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	781a      	ldrb	r2, [r3, #0]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	3301      	adds	r3, #1
 8005210:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2256      	movs	r2, #86	; 0x56
 8005216:	5a9b      	ldrh	r3, [r3, r2]
 8005218:	b29b      	uxth	r3, r3
 800521a:	3b01      	subs	r3, #1
 800521c:	b299      	uxth	r1, r3
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2256      	movs	r2, #86	; 0x56
 8005222:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2256      	movs	r2, #86	; 0x56
 8005228:	5a9b      	ldrh	r3, [r3, r2]
 800522a:	b29b      	uxth	r3, r3
 800522c:	2b00      	cmp	r3, #0
 800522e:	d1cc      	bne.n	80051ca <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005230:	697a      	ldr	r2, [r7, #20]
 8005232:	68f8      	ldr	r0, [r7, #12]
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	9300      	str	r3, [sp, #0]
 8005238:	0013      	movs	r3, r2
 800523a:	2200      	movs	r2, #0
 800523c:	2140      	movs	r1, #64	; 0x40
 800523e:	f000 fecf 	bl	8005fe0 <UART_WaitOnFlagUntilTimeout>
 8005242:	1e03      	subs	r3, r0, #0
 8005244:	d001      	beq.n	800524a <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8005246:	2303      	movs	r3, #3
 8005248:	e006      	b.n	8005258 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2288      	movs	r2, #136	; 0x88
 800524e:	2120      	movs	r1, #32
 8005250:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8005252:	2300      	movs	r3, #0
 8005254:	e000      	b.n	8005258 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8005256:	2302      	movs	r3, #2
  }
}
 8005258:	0018      	movs	r0, r3
 800525a:	46bd      	mov	sp, r7
 800525c:	b008      	add	sp, #32
 800525e:	bd80      	pop	{r7, pc}

08005260 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005260:	b5b0      	push	{r4, r5, r7, lr}
 8005262:	b0aa      	sub	sp, #168	; 0xa8
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	69db      	ldr	r3, [r3, #28]
 800526e:	22a4      	movs	r2, #164	; 0xa4
 8005270:	18b9      	adds	r1, r7, r2
 8005272:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	20a0      	movs	r0, #160	; 0xa0
 800527c:	1839      	adds	r1, r7, r0
 800527e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	249c      	movs	r4, #156	; 0x9c
 8005288:	1939      	adds	r1, r7, r4
 800528a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800528c:	0011      	movs	r1, r2
 800528e:	18bb      	adds	r3, r7, r2
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4aa2      	ldr	r2, [pc, #648]	; (800551c <HAL_UART_IRQHandler+0x2bc>)
 8005294:	4013      	ands	r3, r2
 8005296:	2298      	movs	r2, #152	; 0x98
 8005298:	18bd      	adds	r5, r7, r2
 800529a:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 800529c:	18bb      	adds	r3, r7, r2
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d11a      	bne.n	80052da <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80052a4:	187b      	adds	r3, r7, r1
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2220      	movs	r2, #32
 80052aa:	4013      	ands	r3, r2
 80052ac:	d015      	beq.n	80052da <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80052ae:	183b      	adds	r3, r7, r0
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2220      	movs	r2, #32
 80052b4:	4013      	ands	r3, r2
 80052b6:	d105      	bne.n	80052c4 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80052b8:	193b      	adds	r3, r7, r4
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	2380      	movs	r3, #128	; 0x80
 80052be:	055b      	lsls	r3, r3, #21
 80052c0:	4013      	ands	r3, r2
 80052c2:	d00a      	beq.n	80052da <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d100      	bne.n	80052ce <HAL_UART_IRQHandler+0x6e>
 80052cc:	e2dc      	b.n	8005888 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	0010      	movs	r0, r2
 80052d6:	4798      	blx	r3
      }
      return;
 80052d8:	e2d6      	b.n	8005888 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80052da:	2398      	movs	r3, #152	; 0x98
 80052dc:	18fb      	adds	r3, r7, r3
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d100      	bne.n	80052e6 <HAL_UART_IRQHandler+0x86>
 80052e4:	e122      	b.n	800552c <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80052e6:	239c      	movs	r3, #156	; 0x9c
 80052e8:	18fb      	adds	r3, r7, r3
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a8c      	ldr	r2, [pc, #560]	; (8005520 <HAL_UART_IRQHandler+0x2c0>)
 80052ee:	4013      	ands	r3, r2
 80052f0:	d106      	bne.n	8005300 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80052f2:	23a0      	movs	r3, #160	; 0xa0
 80052f4:	18fb      	adds	r3, r7, r3
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a8a      	ldr	r2, [pc, #552]	; (8005524 <HAL_UART_IRQHandler+0x2c4>)
 80052fa:	4013      	ands	r3, r2
 80052fc:	d100      	bne.n	8005300 <HAL_UART_IRQHandler+0xa0>
 80052fe:	e115      	b.n	800552c <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005300:	23a4      	movs	r3, #164	; 0xa4
 8005302:	18fb      	adds	r3, r7, r3
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2201      	movs	r2, #1
 8005308:	4013      	ands	r3, r2
 800530a:	d012      	beq.n	8005332 <HAL_UART_IRQHandler+0xd2>
 800530c:	23a0      	movs	r3, #160	; 0xa0
 800530e:	18fb      	adds	r3, r7, r3
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	2380      	movs	r3, #128	; 0x80
 8005314:	005b      	lsls	r3, r3, #1
 8005316:	4013      	ands	r3, r2
 8005318:	d00b      	beq.n	8005332 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2201      	movs	r2, #1
 8005320:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2290      	movs	r2, #144	; 0x90
 8005326:	589b      	ldr	r3, [r3, r2]
 8005328:	2201      	movs	r2, #1
 800532a:	431a      	orrs	r2, r3
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2190      	movs	r1, #144	; 0x90
 8005330:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005332:	23a4      	movs	r3, #164	; 0xa4
 8005334:	18fb      	adds	r3, r7, r3
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2202      	movs	r2, #2
 800533a:	4013      	ands	r3, r2
 800533c:	d011      	beq.n	8005362 <HAL_UART_IRQHandler+0x102>
 800533e:	239c      	movs	r3, #156	; 0x9c
 8005340:	18fb      	adds	r3, r7, r3
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2201      	movs	r2, #1
 8005346:	4013      	ands	r3, r2
 8005348:	d00b      	beq.n	8005362 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	2202      	movs	r2, #2
 8005350:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2290      	movs	r2, #144	; 0x90
 8005356:	589b      	ldr	r3, [r3, r2]
 8005358:	2204      	movs	r2, #4
 800535a:	431a      	orrs	r2, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2190      	movs	r1, #144	; 0x90
 8005360:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005362:	23a4      	movs	r3, #164	; 0xa4
 8005364:	18fb      	adds	r3, r7, r3
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2204      	movs	r2, #4
 800536a:	4013      	ands	r3, r2
 800536c:	d011      	beq.n	8005392 <HAL_UART_IRQHandler+0x132>
 800536e:	239c      	movs	r3, #156	; 0x9c
 8005370:	18fb      	adds	r3, r7, r3
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2201      	movs	r2, #1
 8005376:	4013      	ands	r3, r2
 8005378:	d00b      	beq.n	8005392 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2204      	movs	r2, #4
 8005380:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2290      	movs	r2, #144	; 0x90
 8005386:	589b      	ldr	r3, [r3, r2]
 8005388:	2202      	movs	r2, #2
 800538a:	431a      	orrs	r2, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2190      	movs	r1, #144	; 0x90
 8005390:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005392:	23a4      	movs	r3, #164	; 0xa4
 8005394:	18fb      	adds	r3, r7, r3
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	2208      	movs	r2, #8
 800539a:	4013      	ands	r3, r2
 800539c:	d017      	beq.n	80053ce <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800539e:	23a0      	movs	r3, #160	; 0xa0
 80053a0:	18fb      	adds	r3, r7, r3
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	2220      	movs	r2, #32
 80053a6:	4013      	ands	r3, r2
 80053a8:	d105      	bne.n	80053b6 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80053aa:	239c      	movs	r3, #156	; 0x9c
 80053ac:	18fb      	adds	r3, r7, r3
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a5b      	ldr	r2, [pc, #364]	; (8005520 <HAL_UART_IRQHandler+0x2c0>)
 80053b2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80053b4:	d00b      	beq.n	80053ce <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	2208      	movs	r2, #8
 80053bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2290      	movs	r2, #144	; 0x90
 80053c2:	589b      	ldr	r3, [r3, r2]
 80053c4:	2208      	movs	r2, #8
 80053c6:	431a      	orrs	r2, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2190      	movs	r1, #144	; 0x90
 80053cc:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80053ce:	23a4      	movs	r3, #164	; 0xa4
 80053d0:	18fb      	adds	r3, r7, r3
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	2380      	movs	r3, #128	; 0x80
 80053d6:	011b      	lsls	r3, r3, #4
 80053d8:	4013      	ands	r3, r2
 80053da:	d013      	beq.n	8005404 <HAL_UART_IRQHandler+0x1a4>
 80053dc:	23a0      	movs	r3, #160	; 0xa0
 80053de:	18fb      	adds	r3, r7, r3
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	2380      	movs	r3, #128	; 0x80
 80053e4:	04db      	lsls	r3, r3, #19
 80053e6:	4013      	ands	r3, r2
 80053e8:	d00c      	beq.n	8005404 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	2280      	movs	r2, #128	; 0x80
 80053f0:	0112      	lsls	r2, r2, #4
 80053f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2290      	movs	r2, #144	; 0x90
 80053f8:	589b      	ldr	r3, [r3, r2]
 80053fa:	2220      	movs	r2, #32
 80053fc:	431a      	orrs	r2, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2190      	movs	r1, #144	; 0x90
 8005402:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2290      	movs	r2, #144	; 0x90
 8005408:	589b      	ldr	r3, [r3, r2]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d100      	bne.n	8005410 <HAL_UART_IRQHandler+0x1b0>
 800540e:	e23d      	b.n	800588c <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005410:	23a4      	movs	r3, #164	; 0xa4
 8005412:	18fb      	adds	r3, r7, r3
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	2220      	movs	r2, #32
 8005418:	4013      	ands	r3, r2
 800541a:	d015      	beq.n	8005448 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800541c:	23a0      	movs	r3, #160	; 0xa0
 800541e:	18fb      	adds	r3, r7, r3
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	2220      	movs	r2, #32
 8005424:	4013      	ands	r3, r2
 8005426:	d106      	bne.n	8005436 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005428:	239c      	movs	r3, #156	; 0x9c
 800542a:	18fb      	adds	r3, r7, r3
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	2380      	movs	r3, #128	; 0x80
 8005430:	055b      	lsls	r3, r3, #21
 8005432:	4013      	ands	r3, r2
 8005434:	d008      	beq.n	8005448 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800543a:	2b00      	cmp	r3, #0
 800543c:	d004      	beq.n	8005448 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	0010      	movs	r0, r2
 8005446:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2290      	movs	r2, #144	; 0x90
 800544c:	589b      	ldr	r3, [r3, r2]
 800544e:	2194      	movs	r1, #148	; 0x94
 8005450:	187a      	adds	r2, r7, r1
 8005452:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	2240      	movs	r2, #64	; 0x40
 800545c:	4013      	ands	r3, r2
 800545e:	2b40      	cmp	r3, #64	; 0x40
 8005460:	d004      	beq.n	800546c <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005462:	187b      	adds	r3, r7, r1
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	2228      	movs	r2, #40	; 0x28
 8005468:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800546a:	d04c      	beq.n	8005506 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	0018      	movs	r0, r3
 8005470:	f000 ff64 	bl	800633c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	2240      	movs	r2, #64	; 0x40
 800547c:	4013      	ands	r3, r2
 800547e:	2b40      	cmp	r3, #64	; 0x40
 8005480:	d13c      	bne.n	80054fc <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005482:	f3ef 8310 	mrs	r3, PRIMASK
 8005486:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8005488:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800548a:	2090      	movs	r0, #144	; 0x90
 800548c:	183a      	adds	r2, r7, r0
 800548e:	6013      	str	r3, [r2, #0]
 8005490:	2301      	movs	r3, #1
 8005492:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005494:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005496:	f383 8810 	msr	PRIMASK, r3
}
 800549a:	46c0      	nop			; (mov r8, r8)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	689a      	ldr	r2, [r3, #8]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	2140      	movs	r1, #64	; 0x40
 80054a8:	438a      	bics	r2, r1
 80054aa:	609a      	str	r2, [r3, #8]
 80054ac:	183b      	adds	r3, r7, r0
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80054b4:	f383 8810 	msr	PRIMASK, r3
}
 80054b8:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2280      	movs	r2, #128	; 0x80
 80054be:	589b      	ldr	r3, [r3, r2]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d016      	beq.n	80054f2 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2280      	movs	r2, #128	; 0x80
 80054c8:	589b      	ldr	r3, [r3, r2]
 80054ca:	4a17      	ldr	r2, [pc, #92]	; (8005528 <HAL_UART_IRQHandler+0x2c8>)
 80054cc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2280      	movs	r2, #128	; 0x80
 80054d2:	589b      	ldr	r3, [r3, r2]
 80054d4:	0018      	movs	r0, r3
 80054d6:	f7fe f95f 	bl	8003798 <HAL_DMA_Abort_IT>
 80054da:	1e03      	subs	r3, r0, #0
 80054dc:	d01c      	beq.n	8005518 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2280      	movs	r2, #128	; 0x80
 80054e2:	589b      	ldr	r3, [r3, r2]
 80054e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	2180      	movs	r1, #128	; 0x80
 80054ea:	5852      	ldr	r2, [r2, r1]
 80054ec:	0010      	movs	r0, r2
 80054ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054f0:	e012      	b.n	8005518 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	0018      	movs	r0, r3
 80054f6:	f000 f9f1 	bl	80058dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054fa:	e00d      	b.n	8005518 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	0018      	movs	r0, r3
 8005500:	f000 f9ec 	bl	80058dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005504:	e008      	b.n	8005518 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	0018      	movs	r0, r3
 800550a:	f000 f9e7 	bl	80058dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2290      	movs	r2, #144	; 0x90
 8005512:	2100      	movs	r1, #0
 8005514:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8005516:	e1b9      	b.n	800588c <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005518:	46c0      	nop			; (mov r8, r8)
    return;
 800551a:	e1b7      	b.n	800588c <HAL_UART_IRQHandler+0x62c>
 800551c:	0000080f 	.word	0x0000080f
 8005520:	10000001 	.word	0x10000001
 8005524:	04000120 	.word	0x04000120
 8005528:	08006601 	.word	0x08006601

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005530:	2b01      	cmp	r3, #1
 8005532:	d000      	beq.n	8005536 <HAL_UART_IRQHandler+0x2d6>
 8005534:	e13e      	b.n	80057b4 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005536:	23a4      	movs	r3, #164	; 0xa4
 8005538:	18fb      	adds	r3, r7, r3
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2210      	movs	r2, #16
 800553e:	4013      	ands	r3, r2
 8005540:	d100      	bne.n	8005544 <HAL_UART_IRQHandler+0x2e4>
 8005542:	e137      	b.n	80057b4 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005544:	23a0      	movs	r3, #160	; 0xa0
 8005546:	18fb      	adds	r3, r7, r3
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2210      	movs	r2, #16
 800554c:	4013      	ands	r3, r2
 800554e:	d100      	bne.n	8005552 <HAL_UART_IRQHandler+0x2f2>
 8005550:	e130      	b.n	80057b4 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	2210      	movs	r2, #16
 8005558:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	2240      	movs	r2, #64	; 0x40
 8005562:	4013      	ands	r3, r2
 8005564:	2b40      	cmp	r3, #64	; 0x40
 8005566:	d000      	beq.n	800556a <HAL_UART_IRQHandler+0x30a>
 8005568:	e0a4      	b.n	80056b4 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2280      	movs	r2, #128	; 0x80
 800556e:	589b      	ldr	r3, [r3, r2]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	685a      	ldr	r2, [r3, #4]
 8005574:	217e      	movs	r1, #126	; 0x7e
 8005576:	187b      	adds	r3, r7, r1
 8005578:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800557a:	187b      	adds	r3, r7, r1
 800557c:	881b      	ldrh	r3, [r3, #0]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d100      	bne.n	8005584 <HAL_UART_IRQHandler+0x324>
 8005582:	e185      	b.n	8005890 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	225c      	movs	r2, #92	; 0x5c
 8005588:	5a9b      	ldrh	r3, [r3, r2]
 800558a:	187a      	adds	r2, r7, r1
 800558c:	8812      	ldrh	r2, [r2, #0]
 800558e:	429a      	cmp	r2, r3
 8005590:	d300      	bcc.n	8005594 <HAL_UART_IRQHandler+0x334>
 8005592:	e17d      	b.n	8005890 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	187a      	adds	r2, r7, r1
 8005598:	215e      	movs	r1, #94	; 0x5e
 800559a:	8812      	ldrh	r2, [r2, #0]
 800559c:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2280      	movs	r2, #128	; 0x80
 80055a2:	589b      	ldr	r3, [r3, r2]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	2220      	movs	r2, #32
 80055aa:	4013      	ands	r3, r2
 80055ac:	d170      	bne.n	8005690 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055ae:	f3ef 8310 	mrs	r3, PRIMASK
 80055b2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80055b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055b6:	67bb      	str	r3, [r7, #120]	; 0x78
 80055b8:	2301      	movs	r3, #1
 80055ba:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055be:	f383 8810 	msr	PRIMASK, r3
}
 80055c2:	46c0      	nop			; (mov r8, r8)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	49b4      	ldr	r1, [pc, #720]	; (80058a0 <HAL_UART_IRQHandler+0x640>)
 80055d0:	400a      	ands	r2, r1
 80055d2:	601a      	str	r2, [r3, #0]
 80055d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055d6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055da:	f383 8810 	msr	PRIMASK, r3
}
 80055de:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055e0:	f3ef 8310 	mrs	r3, PRIMASK
 80055e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80055e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055e8:	677b      	str	r3, [r7, #116]	; 0x74
 80055ea:	2301      	movs	r3, #1
 80055ec:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055f0:	f383 8810 	msr	PRIMASK, r3
}
 80055f4:	46c0      	nop			; (mov r8, r8)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	689a      	ldr	r2, [r3, #8]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2101      	movs	r1, #1
 8005602:	438a      	bics	r2, r1
 8005604:	609a      	str	r2, [r3, #8]
 8005606:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005608:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800560a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800560c:	f383 8810 	msr	PRIMASK, r3
}
 8005610:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005612:	f3ef 8310 	mrs	r3, PRIMASK
 8005616:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8005618:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800561a:	673b      	str	r3, [r7, #112]	; 0x70
 800561c:	2301      	movs	r3, #1
 800561e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005620:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005622:	f383 8810 	msr	PRIMASK, r3
}
 8005626:	46c0      	nop			; (mov r8, r8)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	689a      	ldr	r2, [r3, #8]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2140      	movs	r1, #64	; 0x40
 8005634:	438a      	bics	r2, r1
 8005636:	609a      	str	r2, [r3, #8]
 8005638:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800563a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800563c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800563e:	f383 8810 	msr	PRIMASK, r3
}
 8005642:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	228c      	movs	r2, #140	; 0x8c
 8005648:	2120      	movs	r1, #32
 800564a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005652:	f3ef 8310 	mrs	r3, PRIMASK
 8005656:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8005658:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800565a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800565c:	2301      	movs	r3, #1
 800565e:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005660:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005662:	f383 8810 	msr	PRIMASK, r3
}
 8005666:	46c0      	nop			; (mov r8, r8)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	2110      	movs	r1, #16
 8005674:	438a      	bics	r2, r1
 8005676:	601a      	str	r2, [r3, #0]
 8005678:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800567a:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800567c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800567e:	f383 8810 	msr	PRIMASK, r3
}
 8005682:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2280      	movs	r2, #128	; 0x80
 8005688:	589b      	ldr	r3, [r3, r2]
 800568a:	0018      	movs	r0, r3
 800568c:	f7fe f822 	bl	80036d4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2202      	movs	r2, #2
 8005694:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	225c      	movs	r2, #92	; 0x5c
 800569a:	5a9a      	ldrh	r2, [r3, r2]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	215e      	movs	r1, #94	; 0x5e
 80056a0:	5a5b      	ldrh	r3, [r3, r1]
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	1ad3      	subs	r3, r2, r3
 80056a6:	b29a      	uxth	r2, r3
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	0011      	movs	r1, r2
 80056ac:	0018      	movs	r0, r3
 80056ae:	f7fd fb47 	bl	8002d40 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80056b2:	e0ed      	b.n	8005890 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	225c      	movs	r2, #92	; 0x5c
 80056b8:	5a99      	ldrh	r1, [r3, r2]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	225e      	movs	r2, #94	; 0x5e
 80056be:	5a9b      	ldrh	r3, [r3, r2]
 80056c0:	b29a      	uxth	r2, r3
 80056c2:	208e      	movs	r0, #142	; 0x8e
 80056c4:	183b      	adds	r3, r7, r0
 80056c6:	1a8a      	subs	r2, r1, r2
 80056c8:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	225e      	movs	r2, #94	; 0x5e
 80056ce:	5a9b      	ldrh	r3, [r3, r2]
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d100      	bne.n	80056d8 <HAL_UART_IRQHandler+0x478>
 80056d6:	e0dd      	b.n	8005894 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 80056d8:	183b      	adds	r3, r7, r0
 80056da:	881b      	ldrh	r3, [r3, #0]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d100      	bne.n	80056e2 <HAL_UART_IRQHandler+0x482>
 80056e0:	e0d8      	b.n	8005894 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056e2:	f3ef 8310 	mrs	r3, PRIMASK
 80056e6:	60fb      	str	r3, [r7, #12]
  return(result);
 80056e8:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80056ea:	2488      	movs	r4, #136	; 0x88
 80056ec:	193a      	adds	r2, r7, r4
 80056ee:	6013      	str	r3, [r2, #0]
 80056f0:	2301      	movs	r3, #1
 80056f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	f383 8810 	msr	PRIMASK, r3
}
 80056fa:	46c0      	nop			; (mov r8, r8)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4967      	ldr	r1, [pc, #412]	; (80058a4 <HAL_UART_IRQHandler+0x644>)
 8005708:	400a      	ands	r2, r1
 800570a:	601a      	str	r2, [r3, #0]
 800570c:	193b      	adds	r3, r7, r4
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	f383 8810 	msr	PRIMASK, r3
}
 8005718:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800571a:	f3ef 8310 	mrs	r3, PRIMASK
 800571e:	61bb      	str	r3, [r7, #24]
  return(result);
 8005720:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005722:	2484      	movs	r4, #132	; 0x84
 8005724:	193a      	adds	r2, r7, r4
 8005726:	6013      	str	r3, [r2, #0]
 8005728:	2301      	movs	r3, #1
 800572a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	f383 8810 	msr	PRIMASK, r3
}
 8005732:	46c0      	nop			; (mov r8, r8)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	689a      	ldr	r2, [r3, #8]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	495a      	ldr	r1, [pc, #360]	; (80058a8 <HAL_UART_IRQHandler+0x648>)
 8005740:	400a      	ands	r2, r1
 8005742:	609a      	str	r2, [r3, #8]
 8005744:	193b      	adds	r3, r7, r4
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800574a:	6a3b      	ldr	r3, [r7, #32]
 800574c:	f383 8810 	msr	PRIMASK, r3
}
 8005750:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	228c      	movs	r2, #140	; 0x8c
 8005756:	2120      	movs	r1, #32
 8005758:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005766:	f3ef 8310 	mrs	r3, PRIMASK
 800576a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800576c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800576e:	2480      	movs	r4, #128	; 0x80
 8005770:	193a      	adds	r2, r7, r4
 8005772:	6013      	str	r3, [r2, #0]
 8005774:	2301      	movs	r3, #1
 8005776:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800577a:	f383 8810 	msr	PRIMASK, r3
}
 800577e:	46c0      	nop			; (mov r8, r8)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	2110      	movs	r1, #16
 800578c:	438a      	bics	r2, r1
 800578e:	601a      	str	r2, [r3, #0]
 8005790:	193b      	adds	r3, r7, r4
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005798:	f383 8810 	msr	PRIMASK, r3
}
 800579c:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2202      	movs	r2, #2
 80057a2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80057a4:	183b      	adds	r3, r7, r0
 80057a6:	881a      	ldrh	r2, [r3, #0]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	0011      	movs	r1, r2
 80057ac:	0018      	movs	r0, r3
 80057ae:	f7fd fac7 	bl	8002d40 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80057b2:	e06f      	b.n	8005894 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80057b4:	23a4      	movs	r3, #164	; 0xa4
 80057b6:	18fb      	adds	r3, r7, r3
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	2380      	movs	r3, #128	; 0x80
 80057bc:	035b      	lsls	r3, r3, #13
 80057be:	4013      	ands	r3, r2
 80057c0:	d010      	beq.n	80057e4 <HAL_UART_IRQHandler+0x584>
 80057c2:	239c      	movs	r3, #156	; 0x9c
 80057c4:	18fb      	adds	r3, r7, r3
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	2380      	movs	r3, #128	; 0x80
 80057ca:	03db      	lsls	r3, r3, #15
 80057cc:	4013      	ands	r3, r2
 80057ce:	d009      	beq.n	80057e4 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	2280      	movs	r2, #128	; 0x80
 80057d6:	0352      	lsls	r2, r2, #13
 80057d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	0018      	movs	r0, r3
 80057de:	f000 ff52 	bl	8006686 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80057e2:	e05a      	b.n	800589a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80057e4:	23a4      	movs	r3, #164	; 0xa4
 80057e6:	18fb      	adds	r3, r7, r3
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	2280      	movs	r2, #128	; 0x80
 80057ec:	4013      	ands	r3, r2
 80057ee:	d016      	beq.n	800581e <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80057f0:	23a0      	movs	r3, #160	; 0xa0
 80057f2:	18fb      	adds	r3, r7, r3
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	2280      	movs	r2, #128	; 0x80
 80057f8:	4013      	ands	r3, r2
 80057fa:	d106      	bne.n	800580a <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80057fc:	239c      	movs	r3, #156	; 0x9c
 80057fe:	18fb      	adds	r3, r7, r3
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	2380      	movs	r3, #128	; 0x80
 8005804:	041b      	lsls	r3, r3, #16
 8005806:	4013      	ands	r3, r2
 8005808:	d009      	beq.n	800581e <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800580e:	2b00      	cmp	r3, #0
 8005810:	d042      	beq.n	8005898 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	0010      	movs	r0, r2
 800581a:	4798      	blx	r3
    }
    return;
 800581c:	e03c      	b.n	8005898 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800581e:	23a4      	movs	r3, #164	; 0xa4
 8005820:	18fb      	adds	r3, r7, r3
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2240      	movs	r2, #64	; 0x40
 8005826:	4013      	ands	r3, r2
 8005828:	d00a      	beq.n	8005840 <HAL_UART_IRQHandler+0x5e0>
 800582a:	23a0      	movs	r3, #160	; 0xa0
 800582c:	18fb      	adds	r3, r7, r3
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2240      	movs	r2, #64	; 0x40
 8005832:	4013      	ands	r3, r2
 8005834:	d004      	beq.n	8005840 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	0018      	movs	r0, r3
 800583a:	f000 fef8 	bl	800662e <UART_EndTransmit_IT>
    return;
 800583e:	e02c      	b.n	800589a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005840:	23a4      	movs	r3, #164	; 0xa4
 8005842:	18fb      	adds	r3, r7, r3
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	2380      	movs	r3, #128	; 0x80
 8005848:	041b      	lsls	r3, r3, #16
 800584a:	4013      	ands	r3, r2
 800584c:	d00b      	beq.n	8005866 <HAL_UART_IRQHandler+0x606>
 800584e:	23a0      	movs	r3, #160	; 0xa0
 8005850:	18fb      	adds	r3, r7, r3
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	2380      	movs	r3, #128	; 0x80
 8005856:	05db      	lsls	r3, r3, #23
 8005858:	4013      	ands	r3, r2
 800585a:	d004      	beq.n	8005866 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	0018      	movs	r0, r3
 8005860:	f000 ff21 	bl	80066a6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005864:	e019      	b.n	800589a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005866:	23a4      	movs	r3, #164	; 0xa4
 8005868:	18fb      	adds	r3, r7, r3
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	2380      	movs	r3, #128	; 0x80
 800586e:	045b      	lsls	r3, r3, #17
 8005870:	4013      	ands	r3, r2
 8005872:	d012      	beq.n	800589a <HAL_UART_IRQHandler+0x63a>
 8005874:	23a0      	movs	r3, #160	; 0xa0
 8005876:	18fb      	adds	r3, r7, r3
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	2b00      	cmp	r3, #0
 800587c:	da0d      	bge.n	800589a <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	0018      	movs	r0, r3
 8005882:	f000 ff08 	bl	8006696 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005886:	e008      	b.n	800589a <HAL_UART_IRQHandler+0x63a>
      return;
 8005888:	46c0      	nop			; (mov r8, r8)
 800588a:	e006      	b.n	800589a <HAL_UART_IRQHandler+0x63a>
    return;
 800588c:	46c0      	nop			; (mov r8, r8)
 800588e:	e004      	b.n	800589a <HAL_UART_IRQHandler+0x63a>
      return;
 8005890:	46c0      	nop			; (mov r8, r8)
 8005892:	e002      	b.n	800589a <HAL_UART_IRQHandler+0x63a>
      return;
 8005894:	46c0      	nop			; (mov r8, r8)
 8005896:	e000      	b.n	800589a <HAL_UART_IRQHandler+0x63a>
    return;
 8005898:	46c0      	nop			; (mov r8, r8)
  }
}
 800589a:	46bd      	mov	sp, r7
 800589c:	b02a      	add	sp, #168	; 0xa8
 800589e:	bdb0      	pop	{r4, r5, r7, pc}
 80058a0:	fffffeff 	.word	0xfffffeff
 80058a4:	fffffedf 	.word	0xfffffedf
 80058a8:	effffffe 	.word	0xeffffffe

080058ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b082      	sub	sp, #8
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80058b4:	46c0      	nop			; (mov r8, r8)
 80058b6:	46bd      	mov	sp, r7
 80058b8:	b002      	add	sp, #8
 80058ba:	bd80      	pop	{r7, pc}

080058bc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b082      	sub	sp, #8
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80058c4:	46c0      	nop			; (mov r8, r8)
 80058c6:	46bd      	mov	sp, r7
 80058c8:	b002      	add	sp, #8
 80058ca:	bd80      	pop	{r7, pc}

080058cc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b082      	sub	sp, #8
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80058d4:	46c0      	nop			; (mov r8, r8)
 80058d6:	46bd      	mov	sp, r7
 80058d8:	b002      	add	sp, #8
 80058da:	bd80      	pop	{r7, pc}

080058dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b082      	sub	sp, #8
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80058e4:	46c0      	nop			; (mov r8, r8)
 80058e6:	46bd      	mov	sp, r7
 80058e8:	b002      	add	sp, #8
 80058ea:	bd80      	pop	{r7, pc}

080058ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058ec:	b5b0      	push	{r4, r5, r7, lr}
 80058ee:	b090      	sub	sp, #64	; 0x40
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80058f4:	231a      	movs	r3, #26
 80058f6:	2220      	movs	r2, #32
 80058f8:	189b      	adds	r3, r3, r2
 80058fa:	19db      	adds	r3, r3, r7
 80058fc:	2200      	movs	r2, #0
 80058fe:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005902:	689a      	ldr	r2, [r3, #8]
 8005904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005906:	691b      	ldr	r3, [r3, #16]
 8005908:	431a      	orrs	r2, r3
 800590a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590c:	695b      	ldr	r3, [r3, #20]
 800590e:	431a      	orrs	r2, r3
 8005910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005912:	69db      	ldr	r3, [r3, #28]
 8005914:	4313      	orrs	r3, r2
 8005916:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4ac4      	ldr	r2, [pc, #784]	; (8005c30 <UART_SetConfig+0x344>)
 8005920:	4013      	ands	r3, r2
 8005922:	0019      	movs	r1, r3
 8005924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800592a:	430b      	orrs	r3, r1
 800592c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800592e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	4abf      	ldr	r2, [pc, #764]	; (8005c34 <UART_SetConfig+0x348>)
 8005936:	4013      	ands	r3, r2
 8005938:	0018      	movs	r0, r3
 800593a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593c:	68d9      	ldr	r1, [r3, #12]
 800593e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	0003      	movs	r3, r0
 8005944:	430b      	orrs	r3, r1
 8005946:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594a:	699b      	ldr	r3, [r3, #24]
 800594c:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800594e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4ab9      	ldr	r2, [pc, #740]	; (8005c38 <UART_SetConfig+0x34c>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d004      	beq.n	8005962 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595a:	6a1b      	ldr	r3, [r3, #32]
 800595c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800595e:	4313      	orrs	r3, r2
 8005960:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	4ab4      	ldr	r2, [pc, #720]	; (8005c3c <UART_SetConfig+0x350>)
 800596a:	4013      	ands	r3, r2
 800596c:	0019      	movs	r1, r3
 800596e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005974:	430b      	orrs	r3, r1
 8005976:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800597e:	220f      	movs	r2, #15
 8005980:	4393      	bics	r3, r2
 8005982:	0018      	movs	r0, r3
 8005984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005986:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	0003      	movs	r3, r0
 800598e:	430b      	orrs	r3, r1
 8005990:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4aaa      	ldr	r2, [pc, #680]	; (8005c40 <UART_SetConfig+0x354>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d131      	bne.n	8005a00 <UART_SetConfig+0x114>
 800599c:	4ba9      	ldr	r3, [pc, #676]	; (8005c44 <UART_SetConfig+0x358>)
 800599e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059a0:	2203      	movs	r2, #3
 80059a2:	4013      	ands	r3, r2
 80059a4:	2b03      	cmp	r3, #3
 80059a6:	d01d      	beq.n	80059e4 <UART_SetConfig+0xf8>
 80059a8:	d823      	bhi.n	80059f2 <UART_SetConfig+0x106>
 80059aa:	2b02      	cmp	r3, #2
 80059ac:	d00c      	beq.n	80059c8 <UART_SetConfig+0xdc>
 80059ae:	d820      	bhi.n	80059f2 <UART_SetConfig+0x106>
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d002      	beq.n	80059ba <UART_SetConfig+0xce>
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d00e      	beq.n	80059d6 <UART_SetConfig+0xea>
 80059b8:	e01b      	b.n	80059f2 <UART_SetConfig+0x106>
 80059ba:	231b      	movs	r3, #27
 80059bc:	2220      	movs	r2, #32
 80059be:	189b      	adds	r3, r3, r2
 80059c0:	19db      	adds	r3, r3, r7
 80059c2:	2200      	movs	r2, #0
 80059c4:	701a      	strb	r2, [r3, #0]
 80059c6:	e071      	b.n	8005aac <UART_SetConfig+0x1c0>
 80059c8:	231b      	movs	r3, #27
 80059ca:	2220      	movs	r2, #32
 80059cc:	189b      	adds	r3, r3, r2
 80059ce:	19db      	adds	r3, r3, r7
 80059d0:	2202      	movs	r2, #2
 80059d2:	701a      	strb	r2, [r3, #0]
 80059d4:	e06a      	b.n	8005aac <UART_SetConfig+0x1c0>
 80059d6:	231b      	movs	r3, #27
 80059d8:	2220      	movs	r2, #32
 80059da:	189b      	adds	r3, r3, r2
 80059dc:	19db      	adds	r3, r3, r7
 80059de:	2204      	movs	r2, #4
 80059e0:	701a      	strb	r2, [r3, #0]
 80059e2:	e063      	b.n	8005aac <UART_SetConfig+0x1c0>
 80059e4:	231b      	movs	r3, #27
 80059e6:	2220      	movs	r2, #32
 80059e8:	189b      	adds	r3, r3, r2
 80059ea:	19db      	adds	r3, r3, r7
 80059ec:	2208      	movs	r2, #8
 80059ee:	701a      	strb	r2, [r3, #0]
 80059f0:	e05c      	b.n	8005aac <UART_SetConfig+0x1c0>
 80059f2:	231b      	movs	r3, #27
 80059f4:	2220      	movs	r2, #32
 80059f6:	189b      	adds	r3, r3, r2
 80059f8:	19db      	adds	r3, r3, r7
 80059fa:	2210      	movs	r2, #16
 80059fc:	701a      	strb	r2, [r3, #0]
 80059fe:	e055      	b.n	8005aac <UART_SetConfig+0x1c0>
 8005a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a90      	ldr	r2, [pc, #576]	; (8005c48 <UART_SetConfig+0x35c>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d106      	bne.n	8005a18 <UART_SetConfig+0x12c>
 8005a0a:	231b      	movs	r3, #27
 8005a0c:	2220      	movs	r2, #32
 8005a0e:	189b      	adds	r3, r3, r2
 8005a10:	19db      	adds	r3, r3, r7
 8005a12:	2200      	movs	r2, #0
 8005a14:	701a      	strb	r2, [r3, #0]
 8005a16:	e049      	b.n	8005aac <UART_SetConfig+0x1c0>
 8005a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a86      	ldr	r2, [pc, #536]	; (8005c38 <UART_SetConfig+0x34c>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d13e      	bne.n	8005aa0 <UART_SetConfig+0x1b4>
 8005a22:	4b88      	ldr	r3, [pc, #544]	; (8005c44 <UART_SetConfig+0x358>)
 8005a24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a26:	23c0      	movs	r3, #192	; 0xc0
 8005a28:	011b      	lsls	r3, r3, #4
 8005a2a:	4013      	ands	r3, r2
 8005a2c:	22c0      	movs	r2, #192	; 0xc0
 8005a2e:	0112      	lsls	r2, r2, #4
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d027      	beq.n	8005a84 <UART_SetConfig+0x198>
 8005a34:	22c0      	movs	r2, #192	; 0xc0
 8005a36:	0112      	lsls	r2, r2, #4
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d82a      	bhi.n	8005a92 <UART_SetConfig+0x1a6>
 8005a3c:	2280      	movs	r2, #128	; 0x80
 8005a3e:	0112      	lsls	r2, r2, #4
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d011      	beq.n	8005a68 <UART_SetConfig+0x17c>
 8005a44:	2280      	movs	r2, #128	; 0x80
 8005a46:	0112      	lsls	r2, r2, #4
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d822      	bhi.n	8005a92 <UART_SetConfig+0x1a6>
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d004      	beq.n	8005a5a <UART_SetConfig+0x16e>
 8005a50:	2280      	movs	r2, #128	; 0x80
 8005a52:	00d2      	lsls	r2, r2, #3
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d00e      	beq.n	8005a76 <UART_SetConfig+0x18a>
 8005a58:	e01b      	b.n	8005a92 <UART_SetConfig+0x1a6>
 8005a5a:	231b      	movs	r3, #27
 8005a5c:	2220      	movs	r2, #32
 8005a5e:	189b      	adds	r3, r3, r2
 8005a60:	19db      	adds	r3, r3, r7
 8005a62:	2200      	movs	r2, #0
 8005a64:	701a      	strb	r2, [r3, #0]
 8005a66:	e021      	b.n	8005aac <UART_SetConfig+0x1c0>
 8005a68:	231b      	movs	r3, #27
 8005a6a:	2220      	movs	r2, #32
 8005a6c:	189b      	adds	r3, r3, r2
 8005a6e:	19db      	adds	r3, r3, r7
 8005a70:	2202      	movs	r2, #2
 8005a72:	701a      	strb	r2, [r3, #0]
 8005a74:	e01a      	b.n	8005aac <UART_SetConfig+0x1c0>
 8005a76:	231b      	movs	r3, #27
 8005a78:	2220      	movs	r2, #32
 8005a7a:	189b      	adds	r3, r3, r2
 8005a7c:	19db      	adds	r3, r3, r7
 8005a7e:	2204      	movs	r2, #4
 8005a80:	701a      	strb	r2, [r3, #0]
 8005a82:	e013      	b.n	8005aac <UART_SetConfig+0x1c0>
 8005a84:	231b      	movs	r3, #27
 8005a86:	2220      	movs	r2, #32
 8005a88:	189b      	adds	r3, r3, r2
 8005a8a:	19db      	adds	r3, r3, r7
 8005a8c:	2208      	movs	r2, #8
 8005a8e:	701a      	strb	r2, [r3, #0]
 8005a90:	e00c      	b.n	8005aac <UART_SetConfig+0x1c0>
 8005a92:	231b      	movs	r3, #27
 8005a94:	2220      	movs	r2, #32
 8005a96:	189b      	adds	r3, r3, r2
 8005a98:	19db      	adds	r3, r3, r7
 8005a9a:	2210      	movs	r2, #16
 8005a9c:	701a      	strb	r2, [r3, #0]
 8005a9e:	e005      	b.n	8005aac <UART_SetConfig+0x1c0>
 8005aa0:	231b      	movs	r3, #27
 8005aa2:	2220      	movs	r2, #32
 8005aa4:	189b      	adds	r3, r3, r2
 8005aa6:	19db      	adds	r3, r3, r7
 8005aa8:	2210      	movs	r2, #16
 8005aaa:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a61      	ldr	r2, [pc, #388]	; (8005c38 <UART_SetConfig+0x34c>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d000      	beq.n	8005ab8 <UART_SetConfig+0x1cc>
 8005ab6:	e092      	b.n	8005bde <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005ab8:	231b      	movs	r3, #27
 8005aba:	2220      	movs	r2, #32
 8005abc:	189b      	adds	r3, r3, r2
 8005abe:	19db      	adds	r3, r3, r7
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	2b08      	cmp	r3, #8
 8005ac4:	d015      	beq.n	8005af2 <UART_SetConfig+0x206>
 8005ac6:	dc18      	bgt.n	8005afa <UART_SetConfig+0x20e>
 8005ac8:	2b04      	cmp	r3, #4
 8005aca:	d00d      	beq.n	8005ae8 <UART_SetConfig+0x1fc>
 8005acc:	dc15      	bgt.n	8005afa <UART_SetConfig+0x20e>
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d002      	beq.n	8005ad8 <UART_SetConfig+0x1ec>
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d005      	beq.n	8005ae2 <UART_SetConfig+0x1f6>
 8005ad6:	e010      	b.n	8005afa <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ad8:	f7fe fe86 	bl	80047e8 <HAL_RCC_GetPCLK1Freq>
 8005adc:	0003      	movs	r3, r0
 8005ade:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005ae0:	e014      	b.n	8005b0c <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ae2:	4b5a      	ldr	r3, [pc, #360]	; (8005c4c <UART_SetConfig+0x360>)
 8005ae4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005ae6:	e011      	b.n	8005b0c <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ae8:	f7fe fdf2 	bl	80046d0 <HAL_RCC_GetSysClockFreq>
 8005aec:	0003      	movs	r3, r0
 8005aee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005af0:	e00c      	b.n	8005b0c <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005af2:	2380      	movs	r3, #128	; 0x80
 8005af4:	021b      	lsls	r3, r3, #8
 8005af6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005af8:	e008      	b.n	8005b0c <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 8005afa:	2300      	movs	r3, #0
 8005afc:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005afe:	231a      	movs	r3, #26
 8005b00:	2220      	movs	r2, #32
 8005b02:	189b      	adds	r3, r3, r2
 8005b04:	19db      	adds	r3, r3, r7
 8005b06:	2201      	movs	r2, #1
 8005b08:	701a      	strb	r2, [r3, #0]
        break;
 8005b0a:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d100      	bne.n	8005b14 <UART_SetConfig+0x228>
 8005b12:	e147      	b.n	8005da4 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b18:	4b4d      	ldr	r3, [pc, #308]	; (8005c50 <UART_SetConfig+0x364>)
 8005b1a:	0052      	lsls	r2, r2, #1
 8005b1c:	5ad3      	ldrh	r3, [r2, r3]
 8005b1e:	0019      	movs	r1, r3
 8005b20:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005b22:	f7fa fb0b 	bl	800013c <__udivsi3>
 8005b26:	0003      	movs	r3, r0
 8005b28:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2c:	685a      	ldr	r2, [r3, #4]
 8005b2e:	0013      	movs	r3, r2
 8005b30:	005b      	lsls	r3, r3, #1
 8005b32:	189b      	adds	r3, r3, r2
 8005b34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d305      	bcc.n	8005b46 <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d906      	bls.n	8005b54 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 8005b46:	231a      	movs	r3, #26
 8005b48:	2220      	movs	r2, #32
 8005b4a:	189b      	adds	r3, r3, r2
 8005b4c:	19db      	adds	r3, r3, r7
 8005b4e:	2201      	movs	r2, #1
 8005b50:	701a      	strb	r2, [r3, #0]
 8005b52:	e127      	b.n	8005da4 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b56:	61bb      	str	r3, [r7, #24]
 8005b58:	2300      	movs	r3, #0
 8005b5a:	61fb      	str	r3, [r7, #28]
 8005b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b60:	4b3b      	ldr	r3, [pc, #236]	; (8005c50 <UART_SetConfig+0x364>)
 8005b62:	0052      	lsls	r2, r2, #1
 8005b64:	5ad3      	ldrh	r3, [r2, r3]
 8005b66:	613b      	str	r3, [r7, #16]
 8005b68:	2300      	movs	r3, #0
 8005b6a:	617b      	str	r3, [r7, #20]
 8005b6c:	693a      	ldr	r2, [r7, #16]
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	69b8      	ldr	r0, [r7, #24]
 8005b72:	69f9      	ldr	r1, [r7, #28]
 8005b74:	f7fa fcd0 	bl	8000518 <__aeabi_uldivmod>
 8005b78:	0002      	movs	r2, r0
 8005b7a:	000b      	movs	r3, r1
 8005b7c:	0e11      	lsrs	r1, r2, #24
 8005b7e:	021d      	lsls	r5, r3, #8
 8005b80:	430d      	orrs	r5, r1
 8005b82:	0214      	lsls	r4, r2, #8
 8005b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	085b      	lsrs	r3, r3, #1
 8005b8a:	60bb      	str	r3, [r7, #8]
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	60fb      	str	r3, [r7, #12]
 8005b90:	68b8      	ldr	r0, [r7, #8]
 8005b92:	68f9      	ldr	r1, [r7, #12]
 8005b94:	1900      	adds	r0, r0, r4
 8005b96:	4169      	adcs	r1, r5
 8005b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	603b      	str	r3, [r7, #0]
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	607b      	str	r3, [r7, #4]
 8005ba2:	683a      	ldr	r2, [r7, #0]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f7fa fcb7 	bl	8000518 <__aeabi_uldivmod>
 8005baa:	0002      	movs	r2, r0
 8005bac:	000b      	movs	r3, r1
 8005bae:	0013      	movs	r3, r2
 8005bb0:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005bb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bb4:	23c0      	movs	r3, #192	; 0xc0
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d309      	bcc.n	8005bd0 <UART_SetConfig+0x2e4>
 8005bbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bbe:	2380      	movs	r3, #128	; 0x80
 8005bc0:	035b      	lsls	r3, r3, #13
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d204      	bcs.n	8005bd0 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8005bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bcc:	60da      	str	r2, [r3, #12]
 8005bce:	e0e9      	b.n	8005da4 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8005bd0:	231a      	movs	r3, #26
 8005bd2:	2220      	movs	r2, #32
 8005bd4:	189b      	adds	r3, r3, r2
 8005bd6:	19db      	adds	r3, r3, r7
 8005bd8:	2201      	movs	r2, #1
 8005bda:	701a      	strb	r2, [r3, #0]
 8005bdc:	e0e2      	b.n	8005da4 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be0:	69da      	ldr	r2, [r3, #28]
 8005be2:	2380      	movs	r3, #128	; 0x80
 8005be4:	021b      	lsls	r3, r3, #8
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d000      	beq.n	8005bec <UART_SetConfig+0x300>
 8005bea:	e083      	b.n	8005cf4 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8005bec:	231b      	movs	r3, #27
 8005bee:	2220      	movs	r2, #32
 8005bf0:	189b      	adds	r3, r3, r2
 8005bf2:	19db      	adds	r3, r3, r7
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	2b08      	cmp	r3, #8
 8005bf8:	d015      	beq.n	8005c26 <UART_SetConfig+0x33a>
 8005bfa:	dc2b      	bgt.n	8005c54 <UART_SetConfig+0x368>
 8005bfc:	2b04      	cmp	r3, #4
 8005bfe:	d00d      	beq.n	8005c1c <UART_SetConfig+0x330>
 8005c00:	dc28      	bgt.n	8005c54 <UART_SetConfig+0x368>
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d002      	beq.n	8005c0c <UART_SetConfig+0x320>
 8005c06:	2b02      	cmp	r3, #2
 8005c08:	d005      	beq.n	8005c16 <UART_SetConfig+0x32a>
 8005c0a:	e023      	b.n	8005c54 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c0c:	f7fe fdec 	bl	80047e8 <HAL_RCC_GetPCLK1Freq>
 8005c10:	0003      	movs	r3, r0
 8005c12:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c14:	e027      	b.n	8005c66 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c16:	4b0d      	ldr	r3, [pc, #52]	; (8005c4c <UART_SetConfig+0x360>)
 8005c18:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c1a:	e024      	b.n	8005c66 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c1c:	f7fe fd58 	bl	80046d0 <HAL_RCC_GetSysClockFreq>
 8005c20:	0003      	movs	r3, r0
 8005c22:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c24:	e01f      	b.n	8005c66 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c26:	2380      	movs	r3, #128	; 0x80
 8005c28:	021b      	lsls	r3, r3, #8
 8005c2a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c2c:	e01b      	b.n	8005c66 <UART_SetConfig+0x37a>
 8005c2e:	46c0      	nop			; (mov r8, r8)
 8005c30:	cfff69f3 	.word	0xcfff69f3
 8005c34:	ffffcfff 	.word	0xffffcfff
 8005c38:	40008000 	.word	0x40008000
 8005c3c:	11fff4ff 	.word	0x11fff4ff
 8005c40:	40013800 	.word	0x40013800
 8005c44:	40021000 	.word	0x40021000
 8005c48:	40004400 	.word	0x40004400
 8005c4c:	00f42400 	.word	0x00f42400
 8005c50:	0800a0e0 	.word	0x0800a0e0
      default:
        pclk = 0U;
 8005c54:	2300      	movs	r3, #0
 8005c56:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005c58:	231a      	movs	r3, #26
 8005c5a:	2220      	movs	r2, #32
 8005c5c:	189b      	adds	r3, r3, r2
 8005c5e:	19db      	adds	r3, r3, r7
 8005c60:	2201      	movs	r2, #1
 8005c62:	701a      	strb	r2, [r3, #0]
        break;
 8005c64:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d100      	bne.n	8005c6e <UART_SetConfig+0x382>
 8005c6c:	e09a      	b.n	8005da4 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c72:	4b58      	ldr	r3, [pc, #352]	; (8005dd4 <UART_SetConfig+0x4e8>)
 8005c74:	0052      	lsls	r2, r2, #1
 8005c76:	5ad3      	ldrh	r3, [r2, r3]
 8005c78:	0019      	movs	r1, r3
 8005c7a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005c7c:	f7fa fa5e 	bl	800013c <__udivsi3>
 8005c80:	0003      	movs	r3, r0
 8005c82:	005a      	lsls	r2, r3, #1
 8005c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	085b      	lsrs	r3, r3, #1
 8005c8a:	18d2      	adds	r2, r2, r3
 8005c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	0019      	movs	r1, r3
 8005c92:	0010      	movs	r0, r2
 8005c94:	f7fa fa52 	bl	800013c <__udivsi3>
 8005c98:	0003      	movs	r3, r0
 8005c9a:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c9e:	2b0f      	cmp	r3, #15
 8005ca0:	d921      	bls.n	8005ce6 <UART_SetConfig+0x3fa>
 8005ca2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ca4:	2380      	movs	r3, #128	; 0x80
 8005ca6:	025b      	lsls	r3, r3, #9
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d21c      	bcs.n	8005ce6 <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cae:	b29a      	uxth	r2, r3
 8005cb0:	200e      	movs	r0, #14
 8005cb2:	2420      	movs	r4, #32
 8005cb4:	1903      	adds	r3, r0, r4
 8005cb6:	19db      	adds	r3, r3, r7
 8005cb8:	210f      	movs	r1, #15
 8005cba:	438a      	bics	r2, r1
 8005cbc:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc0:	085b      	lsrs	r3, r3, #1
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	2207      	movs	r2, #7
 8005cc6:	4013      	ands	r3, r2
 8005cc8:	b299      	uxth	r1, r3
 8005cca:	1903      	adds	r3, r0, r4
 8005ccc:	19db      	adds	r3, r3, r7
 8005cce:	1902      	adds	r2, r0, r4
 8005cd0:	19d2      	adds	r2, r2, r7
 8005cd2:	8812      	ldrh	r2, [r2, #0]
 8005cd4:	430a      	orrs	r2, r1
 8005cd6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	1902      	adds	r2, r0, r4
 8005cde:	19d2      	adds	r2, r2, r7
 8005ce0:	8812      	ldrh	r2, [r2, #0]
 8005ce2:	60da      	str	r2, [r3, #12]
 8005ce4:	e05e      	b.n	8005da4 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8005ce6:	231a      	movs	r3, #26
 8005ce8:	2220      	movs	r2, #32
 8005cea:	189b      	adds	r3, r3, r2
 8005cec:	19db      	adds	r3, r3, r7
 8005cee:	2201      	movs	r2, #1
 8005cf0:	701a      	strb	r2, [r3, #0]
 8005cf2:	e057      	b.n	8005da4 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005cf4:	231b      	movs	r3, #27
 8005cf6:	2220      	movs	r2, #32
 8005cf8:	189b      	adds	r3, r3, r2
 8005cfa:	19db      	adds	r3, r3, r7
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	2b08      	cmp	r3, #8
 8005d00:	d015      	beq.n	8005d2e <UART_SetConfig+0x442>
 8005d02:	dc18      	bgt.n	8005d36 <UART_SetConfig+0x44a>
 8005d04:	2b04      	cmp	r3, #4
 8005d06:	d00d      	beq.n	8005d24 <UART_SetConfig+0x438>
 8005d08:	dc15      	bgt.n	8005d36 <UART_SetConfig+0x44a>
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d002      	beq.n	8005d14 <UART_SetConfig+0x428>
 8005d0e:	2b02      	cmp	r3, #2
 8005d10:	d005      	beq.n	8005d1e <UART_SetConfig+0x432>
 8005d12:	e010      	b.n	8005d36 <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d14:	f7fe fd68 	bl	80047e8 <HAL_RCC_GetPCLK1Freq>
 8005d18:	0003      	movs	r3, r0
 8005d1a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d1c:	e014      	b.n	8005d48 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d1e:	4b2e      	ldr	r3, [pc, #184]	; (8005dd8 <UART_SetConfig+0x4ec>)
 8005d20:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d22:	e011      	b.n	8005d48 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d24:	f7fe fcd4 	bl	80046d0 <HAL_RCC_GetSysClockFreq>
 8005d28:	0003      	movs	r3, r0
 8005d2a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d2c:	e00c      	b.n	8005d48 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d2e:	2380      	movs	r3, #128	; 0x80
 8005d30:	021b      	lsls	r3, r3, #8
 8005d32:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d34:	e008      	b.n	8005d48 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 8005d36:	2300      	movs	r3, #0
 8005d38:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005d3a:	231a      	movs	r3, #26
 8005d3c:	2220      	movs	r2, #32
 8005d3e:	189b      	adds	r3, r3, r2
 8005d40:	19db      	adds	r3, r3, r7
 8005d42:	2201      	movs	r2, #1
 8005d44:	701a      	strb	r2, [r3, #0]
        break;
 8005d46:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d02a      	beq.n	8005da4 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d52:	4b20      	ldr	r3, [pc, #128]	; (8005dd4 <UART_SetConfig+0x4e8>)
 8005d54:	0052      	lsls	r2, r2, #1
 8005d56:	5ad3      	ldrh	r3, [r2, r3]
 8005d58:	0019      	movs	r1, r3
 8005d5a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005d5c:	f7fa f9ee 	bl	800013c <__udivsi3>
 8005d60:	0003      	movs	r3, r0
 8005d62:	001a      	movs	r2, r3
 8005d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	085b      	lsrs	r3, r3, #1
 8005d6a:	18d2      	adds	r2, r2, r3
 8005d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	0019      	movs	r1, r3
 8005d72:	0010      	movs	r0, r2
 8005d74:	f7fa f9e2 	bl	800013c <__udivsi3>
 8005d78:	0003      	movs	r3, r0
 8005d7a:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d7e:	2b0f      	cmp	r3, #15
 8005d80:	d90a      	bls.n	8005d98 <UART_SetConfig+0x4ac>
 8005d82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d84:	2380      	movs	r3, #128	; 0x80
 8005d86:	025b      	lsls	r3, r3, #9
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d205      	bcs.n	8005d98 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d8e:	b29a      	uxth	r2, r3
 8005d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	60da      	str	r2, [r3, #12]
 8005d96:	e005      	b.n	8005da4 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8005d98:	231a      	movs	r3, #26
 8005d9a:	2220      	movs	r2, #32
 8005d9c:	189b      	adds	r3, r3, r2
 8005d9e:	19db      	adds	r3, r3, r7
 8005da0:	2201      	movs	r2, #1
 8005da2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da6:	226a      	movs	r2, #106	; 0x6a
 8005da8:	2101      	movs	r1, #1
 8005daa:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dae:	2268      	movs	r2, #104	; 0x68
 8005db0:	2101      	movs	r1, #1
 8005db2:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db6:	2200      	movs	r2, #0
 8005db8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005dc0:	231a      	movs	r3, #26
 8005dc2:	2220      	movs	r2, #32
 8005dc4:	189b      	adds	r3, r3, r2
 8005dc6:	19db      	adds	r3, r3, r7
 8005dc8:	781b      	ldrb	r3, [r3, #0]
}
 8005dca:	0018      	movs	r0, r3
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	b010      	add	sp, #64	; 0x40
 8005dd0:	bdb0      	pop	{r4, r5, r7, pc}
 8005dd2:	46c0      	nop			; (mov r8, r8)
 8005dd4:	0800a0e0 	.word	0x0800a0e0
 8005dd8:	00f42400 	.word	0x00f42400

08005ddc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b082      	sub	sp, #8
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de8:	2201      	movs	r2, #1
 8005dea:	4013      	ands	r3, r2
 8005dec:	d00b      	beq.n	8005e06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	4a4a      	ldr	r2, [pc, #296]	; (8005f20 <UART_AdvFeatureConfig+0x144>)
 8005df6:	4013      	ands	r3, r2
 8005df8:	0019      	movs	r1, r3
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	430a      	orrs	r2, r1
 8005e04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e0a:	2202      	movs	r2, #2
 8005e0c:	4013      	ands	r3, r2
 8005e0e:	d00b      	beq.n	8005e28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	4a43      	ldr	r2, [pc, #268]	; (8005f24 <UART_AdvFeatureConfig+0x148>)
 8005e18:	4013      	ands	r3, r2
 8005e1a:	0019      	movs	r1, r3
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	430a      	orrs	r2, r1
 8005e26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e2c:	2204      	movs	r2, #4
 8005e2e:	4013      	ands	r3, r2
 8005e30:	d00b      	beq.n	8005e4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	4a3b      	ldr	r2, [pc, #236]	; (8005f28 <UART_AdvFeatureConfig+0x14c>)
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	0019      	movs	r1, r3
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	430a      	orrs	r2, r1
 8005e48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e4e:	2208      	movs	r2, #8
 8005e50:	4013      	ands	r3, r2
 8005e52:	d00b      	beq.n	8005e6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	4a34      	ldr	r2, [pc, #208]	; (8005f2c <UART_AdvFeatureConfig+0x150>)
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	0019      	movs	r1, r3
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	430a      	orrs	r2, r1
 8005e6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e70:	2210      	movs	r2, #16
 8005e72:	4013      	ands	r3, r2
 8005e74:	d00b      	beq.n	8005e8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	4a2c      	ldr	r2, [pc, #176]	; (8005f30 <UART_AdvFeatureConfig+0x154>)
 8005e7e:	4013      	ands	r3, r2
 8005e80:	0019      	movs	r1, r3
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	430a      	orrs	r2, r1
 8005e8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e92:	2220      	movs	r2, #32
 8005e94:	4013      	ands	r3, r2
 8005e96:	d00b      	beq.n	8005eb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	4a25      	ldr	r2, [pc, #148]	; (8005f34 <UART_AdvFeatureConfig+0x158>)
 8005ea0:	4013      	ands	r3, r2
 8005ea2:	0019      	movs	r1, r3
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	430a      	orrs	r2, r1
 8005eae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eb4:	2240      	movs	r2, #64	; 0x40
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	d01d      	beq.n	8005ef6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	4a1d      	ldr	r2, [pc, #116]	; (8005f38 <UART_AdvFeatureConfig+0x15c>)
 8005ec2:	4013      	ands	r3, r2
 8005ec4:	0019      	movs	r1, r3
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	430a      	orrs	r2, r1
 8005ed0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ed6:	2380      	movs	r3, #128	; 0x80
 8005ed8:	035b      	lsls	r3, r3, #13
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d10b      	bne.n	8005ef6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	4a15      	ldr	r2, [pc, #84]	; (8005f3c <UART_AdvFeatureConfig+0x160>)
 8005ee6:	4013      	ands	r3, r2
 8005ee8:	0019      	movs	r1, r3
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	430a      	orrs	r2, r1
 8005ef4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005efa:	2280      	movs	r2, #128	; 0x80
 8005efc:	4013      	ands	r3, r2
 8005efe:	d00b      	beq.n	8005f18 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	4a0e      	ldr	r2, [pc, #56]	; (8005f40 <UART_AdvFeatureConfig+0x164>)
 8005f08:	4013      	ands	r3, r2
 8005f0a:	0019      	movs	r1, r3
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	430a      	orrs	r2, r1
 8005f16:	605a      	str	r2, [r3, #4]
  }
}
 8005f18:	46c0      	nop			; (mov r8, r8)
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	b002      	add	sp, #8
 8005f1e:	bd80      	pop	{r7, pc}
 8005f20:	fffdffff 	.word	0xfffdffff
 8005f24:	fffeffff 	.word	0xfffeffff
 8005f28:	fffbffff 	.word	0xfffbffff
 8005f2c:	ffff7fff 	.word	0xffff7fff
 8005f30:	ffffefff 	.word	0xffffefff
 8005f34:	ffffdfff 	.word	0xffffdfff
 8005f38:	ffefffff 	.word	0xffefffff
 8005f3c:	ff9fffff 	.word	0xff9fffff
 8005f40:	fff7ffff 	.word	0xfff7ffff

08005f44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b086      	sub	sp, #24
 8005f48:	af02      	add	r7, sp, #8
 8005f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2290      	movs	r2, #144	; 0x90
 8005f50:	2100      	movs	r1, #0
 8005f52:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f54:	f7fd f9c6 	bl	80032e4 <HAL_GetTick>
 8005f58:	0003      	movs	r3, r0
 8005f5a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	2208      	movs	r2, #8
 8005f64:	4013      	ands	r3, r2
 8005f66:	2b08      	cmp	r3, #8
 8005f68:	d10c      	bne.n	8005f84 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2280      	movs	r2, #128	; 0x80
 8005f6e:	0391      	lsls	r1, r2, #14
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	4a1a      	ldr	r2, [pc, #104]	; (8005fdc <UART_CheckIdleState+0x98>)
 8005f74:	9200      	str	r2, [sp, #0]
 8005f76:	2200      	movs	r2, #0
 8005f78:	f000 f832 	bl	8005fe0 <UART_WaitOnFlagUntilTimeout>
 8005f7c:	1e03      	subs	r3, r0, #0
 8005f7e:	d001      	beq.n	8005f84 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f80:	2303      	movs	r3, #3
 8005f82:	e026      	b.n	8005fd2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	2204      	movs	r2, #4
 8005f8c:	4013      	ands	r3, r2
 8005f8e:	2b04      	cmp	r3, #4
 8005f90:	d10c      	bne.n	8005fac <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2280      	movs	r2, #128	; 0x80
 8005f96:	03d1      	lsls	r1, r2, #15
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	4a10      	ldr	r2, [pc, #64]	; (8005fdc <UART_CheckIdleState+0x98>)
 8005f9c:	9200      	str	r2, [sp, #0]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f000 f81e 	bl	8005fe0 <UART_WaitOnFlagUntilTimeout>
 8005fa4:	1e03      	subs	r3, r0, #0
 8005fa6:	d001      	beq.n	8005fac <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fa8:	2303      	movs	r3, #3
 8005faa:	e012      	b.n	8005fd2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2288      	movs	r2, #136	; 0x88
 8005fb0:	2120      	movs	r1, #32
 8005fb2:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	228c      	movs	r2, #140	; 0x8c
 8005fb8:	2120      	movs	r1, #32
 8005fba:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2284      	movs	r2, #132	; 0x84
 8005fcc:	2100      	movs	r1, #0
 8005fce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005fd0:	2300      	movs	r3, #0
}
 8005fd2:	0018      	movs	r0, r3
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	b004      	add	sp, #16
 8005fd8:	bd80      	pop	{r7, pc}
 8005fda:	46c0      	nop			; (mov r8, r8)
 8005fdc:	01ffffff 	.word	0x01ffffff

08005fe0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b094      	sub	sp, #80	; 0x50
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	60f8      	str	r0, [r7, #12]
 8005fe8:	60b9      	str	r1, [r7, #8]
 8005fea:	603b      	str	r3, [r7, #0]
 8005fec:	1dfb      	adds	r3, r7, #7
 8005fee:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ff0:	e0a7      	b.n	8006142 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ff2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	d100      	bne.n	8005ffa <UART_WaitOnFlagUntilTimeout+0x1a>
 8005ff8:	e0a3      	b.n	8006142 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ffa:	f7fd f973 	bl	80032e4 <HAL_GetTick>
 8005ffe:	0002      	movs	r2, r0
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	1ad3      	subs	r3, r2, r3
 8006004:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006006:	429a      	cmp	r2, r3
 8006008:	d302      	bcc.n	8006010 <UART_WaitOnFlagUntilTimeout+0x30>
 800600a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800600c:	2b00      	cmp	r3, #0
 800600e:	d13f      	bne.n	8006090 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006010:	f3ef 8310 	mrs	r3, PRIMASK
 8006014:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006016:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006018:	647b      	str	r3, [r7, #68]	; 0x44
 800601a:	2301      	movs	r3, #1
 800601c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800601e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006020:	f383 8810 	msr	PRIMASK, r3
}
 8006024:	46c0      	nop			; (mov r8, r8)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	494e      	ldr	r1, [pc, #312]	; (800616c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8006032:	400a      	ands	r2, r1
 8006034:	601a      	str	r2, [r3, #0]
 8006036:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006038:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800603a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800603c:	f383 8810 	msr	PRIMASK, r3
}
 8006040:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006042:	f3ef 8310 	mrs	r3, PRIMASK
 8006046:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800604a:	643b      	str	r3, [r7, #64]	; 0x40
 800604c:	2301      	movs	r3, #1
 800604e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006052:	f383 8810 	msr	PRIMASK, r3
}
 8006056:	46c0      	nop			; (mov r8, r8)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	689a      	ldr	r2, [r3, #8]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	2101      	movs	r1, #1
 8006064:	438a      	bics	r2, r1
 8006066:	609a      	str	r2, [r3, #8]
 8006068:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800606a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800606c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800606e:	f383 8810 	msr	PRIMASK, r3
}
 8006072:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2288      	movs	r2, #136	; 0x88
 8006078:	2120      	movs	r1, #32
 800607a:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	228c      	movs	r2, #140	; 0x8c
 8006080:	2120      	movs	r1, #32
 8006082:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2284      	movs	r2, #132	; 0x84
 8006088:	2100      	movs	r1, #0
 800608a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800608c:	2303      	movs	r3, #3
 800608e:	e069      	b.n	8006164 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	2204      	movs	r2, #4
 8006098:	4013      	ands	r3, r2
 800609a:	d052      	beq.n	8006142 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	69da      	ldr	r2, [r3, #28]
 80060a2:	2380      	movs	r3, #128	; 0x80
 80060a4:	011b      	lsls	r3, r3, #4
 80060a6:	401a      	ands	r2, r3
 80060a8:	2380      	movs	r3, #128	; 0x80
 80060aa:	011b      	lsls	r3, r3, #4
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d148      	bne.n	8006142 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	2280      	movs	r2, #128	; 0x80
 80060b6:	0112      	lsls	r2, r2, #4
 80060b8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060ba:	f3ef 8310 	mrs	r3, PRIMASK
 80060be:	613b      	str	r3, [r7, #16]
  return(result);
 80060c0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80060c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060c4:	2301      	movs	r3, #1
 80060c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	f383 8810 	msr	PRIMASK, r3
}
 80060ce:	46c0      	nop			; (mov r8, r8)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4924      	ldr	r1, [pc, #144]	; (800616c <UART_WaitOnFlagUntilTimeout+0x18c>)
 80060dc:	400a      	ands	r2, r1
 80060de:	601a      	str	r2, [r3, #0]
 80060e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060e2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060e4:	69bb      	ldr	r3, [r7, #24]
 80060e6:	f383 8810 	msr	PRIMASK, r3
}
 80060ea:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060ec:	f3ef 8310 	mrs	r3, PRIMASK
 80060f0:	61fb      	str	r3, [r7, #28]
  return(result);
 80060f2:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80060f6:	2301      	movs	r3, #1
 80060f8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060fa:	6a3b      	ldr	r3, [r7, #32]
 80060fc:	f383 8810 	msr	PRIMASK, r3
}
 8006100:	46c0      	nop			; (mov r8, r8)
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	689a      	ldr	r2, [r3, #8]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	2101      	movs	r1, #1
 800610e:	438a      	bics	r2, r1
 8006110:	609a      	str	r2, [r3, #8]
 8006112:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006114:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006118:	f383 8810 	msr	PRIMASK, r3
}
 800611c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2288      	movs	r2, #136	; 0x88
 8006122:	2120      	movs	r1, #32
 8006124:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	228c      	movs	r2, #140	; 0x8c
 800612a:	2120      	movs	r1, #32
 800612c:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2290      	movs	r2, #144	; 0x90
 8006132:	2120      	movs	r1, #32
 8006134:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2284      	movs	r2, #132	; 0x84
 800613a:	2100      	movs	r1, #0
 800613c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800613e:	2303      	movs	r3, #3
 8006140:	e010      	b.n	8006164 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	69db      	ldr	r3, [r3, #28]
 8006148:	68ba      	ldr	r2, [r7, #8]
 800614a:	4013      	ands	r3, r2
 800614c:	68ba      	ldr	r2, [r7, #8]
 800614e:	1ad3      	subs	r3, r2, r3
 8006150:	425a      	negs	r2, r3
 8006152:	4153      	adcs	r3, r2
 8006154:	b2db      	uxtb	r3, r3
 8006156:	001a      	movs	r2, r3
 8006158:	1dfb      	adds	r3, r7, #7
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	429a      	cmp	r2, r3
 800615e:	d100      	bne.n	8006162 <UART_WaitOnFlagUntilTimeout+0x182>
 8006160:	e747      	b.n	8005ff2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006162:	2300      	movs	r3, #0
}
 8006164:	0018      	movs	r0, r3
 8006166:	46bd      	mov	sp, r7
 8006168:	b014      	add	sp, #80	; 0x50
 800616a:	bd80      	pop	{r7, pc}
 800616c:	fffffe5f 	.word	0xfffffe5f

08006170 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b090      	sub	sp, #64	; 0x40
 8006174:	af00      	add	r7, sp, #0
 8006176:	60f8      	str	r0, [r7, #12]
 8006178:	60b9      	str	r1, [r7, #8]
 800617a:	1dbb      	adds	r3, r7, #6
 800617c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	68ba      	ldr	r2, [r7, #8]
 8006182:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	1dba      	adds	r2, r7, #6
 8006188:	215c      	movs	r1, #92	; 0x5c
 800618a:	8812      	ldrh	r2, [r2, #0]
 800618c:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2290      	movs	r2, #144	; 0x90
 8006192:	2100      	movs	r1, #0
 8006194:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	228c      	movs	r2, #140	; 0x8c
 800619a:	2122      	movs	r1, #34	; 0x22
 800619c:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2280      	movs	r2, #128	; 0x80
 80061a2:	589b      	ldr	r3, [r3, r2]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d02d      	beq.n	8006204 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2280      	movs	r2, #128	; 0x80
 80061ac:	589b      	ldr	r3, [r3, r2]
 80061ae:	4a40      	ldr	r2, [pc, #256]	; (80062b0 <UART_Start_Receive_DMA+0x140>)
 80061b0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2280      	movs	r2, #128	; 0x80
 80061b6:	589b      	ldr	r3, [r3, r2]
 80061b8:	4a3e      	ldr	r2, [pc, #248]	; (80062b4 <UART_Start_Receive_DMA+0x144>)
 80061ba:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2280      	movs	r2, #128	; 0x80
 80061c0:	589b      	ldr	r3, [r3, r2]
 80061c2:	4a3d      	ldr	r2, [pc, #244]	; (80062b8 <UART_Start_Receive_DMA+0x148>)
 80061c4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2280      	movs	r2, #128	; 0x80
 80061ca:	589b      	ldr	r3, [r3, r2]
 80061cc:	2200      	movs	r2, #0
 80061ce:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2280      	movs	r2, #128	; 0x80
 80061d4:	5898      	ldr	r0, [r3, r2]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	3324      	adds	r3, #36	; 0x24
 80061dc:	0019      	movs	r1, r3
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061e2:	001a      	movs	r2, r3
 80061e4:	1dbb      	adds	r3, r7, #6
 80061e6:	881b      	ldrh	r3, [r3, #0]
 80061e8:	f7fd f9ee 	bl	80035c8 <HAL_DMA_Start_IT>
 80061ec:	1e03      	subs	r3, r0, #0
 80061ee:	d009      	beq.n	8006204 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2290      	movs	r2, #144	; 0x90
 80061f4:	2110      	movs	r1, #16
 80061f6:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	228c      	movs	r2, #140	; 0x8c
 80061fc:	2120      	movs	r1, #32
 80061fe:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	e050      	b.n	80062a6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	691b      	ldr	r3, [r3, #16]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d019      	beq.n	8006240 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800620c:	f3ef 8310 	mrs	r3, PRIMASK
 8006210:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006212:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006214:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006216:	2301      	movs	r3, #1
 8006218:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800621a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800621c:	f383 8810 	msr	PRIMASK, r3
}
 8006220:	46c0      	nop			; (mov r8, r8)
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	2180      	movs	r1, #128	; 0x80
 800622e:	0049      	lsls	r1, r1, #1
 8006230:	430a      	orrs	r2, r1
 8006232:	601a      	str	r2, [r3, #0]
 8006234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006236:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800623a:	f383 8810 	msr	PRIMASK, r3
}
 800623e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006240:	f3ef 8310 	mrs	r3, PRIMASK
 8006244:	613b      	str	r3, [r7, #16]
  return(result);
 8006246:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006248:	63bb      	str	r3, [r7, #56]	; 0x38
 800624a:	2301      	movs	r3, #1
 800624c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	f383 8810 	msr	PRIMASK, r3
}
 8006254:	46c0      	nop			; (mov r8, r8)
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	689a      	ldr	r2, [r3, #8]
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	2101      	movs	r1, #1
 8006262:	430a      	orrs	r2, r1
 8006264:	609a      	str	r2, [r3, #8]
 8006266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006268:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800626a:	69bb      	ldr	r3, [r7, #24]
 800626c:	f383 8810 	msr	PRIMASK, r3
}
 8006270:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006272:	f3ef 8310 	mrs	r3, PRIMASK
 8006276:	61fb      	str	r3, [r7, #28]
  return(result);
 8006278:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800627a:	637b      	str	r3, [r7, #52]	; 0x34
 800627c:	2301      	movs	r3, #1
 800627e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006280:	6a3b      	ldr	r3, [r7, #32]
 8006282:	f383 8810 	msr	PRIMASK, r3
}
 8006286:	46c0      	nop			; (mov r8, r8)
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	689a      	ldr	r2, [r3, #8]
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	2140      	movs	r1, #64	; 0x40
 8006294:	430a      	orrs	r2, r1
 8006296:	609a      	str	r2, [r3, #8]
 8006298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800629a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800629c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629e:	f383 8810 	msr	PRIMASK, r3
}
 80062a2:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 80062a4:	2300      	movs	r3, #0
}
 80062a6:	0018      	movs	r0, r3
 80062a8:	46bd      	mov	sp, r7
 80062aa:	b010      	add	sp, #64	; 0x40
 80062ac:	bd80      	pop	{r7, pc}
 80062ae:	46c0      	nop			; (mov r8, r8)
 80062b0:	08006409 	.word	0x08006409
 80062b4:	08006539 	.word	0x08006539
 80062b8:	0800657b 	.word	0x0800657b

080062bc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b08a      	sub	sp, #40	; 0x28
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062c4:	f3ef 8310 	mrs	r3, PRIMASK
 80062c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80062ca:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80062cc:	627b      	str	r3, [r7, #36]	; 0x24
 80062ce:	2301      	movs	r3, #1
 80062d0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	f383 8810 	msr	PRIMASK, r3
}
 80062d8:	46c0      	nop			; (mov r8, r8)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	21c0      	movs	r1, #192	; 0xc0
 80062e6:	438a      	bics	r2, r1
 80062e8:	601a      	str	r2, [r3, #0]
 80062ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	f383 8810 	msr	PRIMASK, r3
}
 80062f4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062f6:	f3ef 8310 	mrs	r3, PRIMASK
 80062fa:	617b      	str	r3, [r7, #20]
  return(result);
 80062fc:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80062fe:	623b      	str	r3, [r7, #32]
 8006300:	2301      	movs	r3, #1
 8006302:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006304:	69bb      	ldr	r3, [r7, #24]
 8006306:	f383 8810 	msr	PRIMASK, r3
}
 800630a:	46c0      	nop			; (mov r8, r8)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	689a      	ldr	r2, [r3, #8]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4908      	ldr	r1, [pc, #32]	; (8006338 <UART_EndTxTransfer+0x7c>)
 8006318:	400a      	ands	r2, r1
 800631a:	609a      	str	r2, [r3, #8]
 800631c:	6a3b      	ldr	r3, [r7, #32]
 800631e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006320:	69fb      	ldr	r3, [r7, #28]
 8006322:	f383 8810 	msr	PRIMASK, r3
}
 8006326:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2288      	movs	r2, #136	; 0x88
 800632c:	2120      	movs	r1, #32
 800632e:	5099      	str	r1, [r3, r2]
}
 8006330:	46c0      	nop			; (mov r8, r8)
 8006332:	46bd      	mov	sp, r7
 8006334:	b00a      	add	sp, #40	; 0x28
 8006336:	bd80      	pop	{r7, pc}
 8006338:	ff7fffff 	.word	0xff7fffff

0800633c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b08e      	sub	sp, #56	; 0x38
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006344:	f3ef 8310 	mrs	r3, PRIMASK
 8006348:	617b      	str	r3, [r7, #20]
  return(result);
 800634a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800634c:	637b      	str	r3, [r7, #52]	; 0x34
 800634e:	2301      	movs	r3, #1
 8006350:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006352:	69bb      	ldr	r3, [r7, #24]
 8006354:	f383 8810 	msr	PRIMASK, r3
}
 8006358:	46c0      	nop			; (mov r8, r8)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	681a      	ldr	r2, [r3, #0]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4926      	ldr	r1, [pc, #152]	; (8006400 <UART_EndRxTransfer+0xc4>)
 8006366:	400a      	ands	r2, r1
 8006368:	601a      	str	r2, [r3, #0]
 800636a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800636c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800636e:	69fb      	ldr	r3, [r7, #28]
 8006370:	f383 8810 	msr	PRIMASK, r3
}
 8006374:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006376:	f3ef 8310 	mrs	r3, PRIMASK
 800637a:	623b      	str	r3, [r7, #32]
  return(result);
 800637c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800637e:	633b      	str	r3, [r7, #48]	; 0x30
 8006380:	2301      	movs	r3, #1
 8006382:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006386:	f383 8810 	msr	PRIMASK, r3
}
 800638a:	46c0      	nop			; (mov r8, r8)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	689a      	ldr	r2, [r3, #8]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	491b      	ldr	r1, [pc, #108]	; (8006404 <UART_EndRxTransfer+0xc8>)
 8006398:	400a      	ands	r2, r1
 800639a:	609a      	str	r2, [r3, #8]
 800639c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800639e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a2:	f383 8810 	msr	PRIMASK, r3
}
 80063a6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d118      	bne.n	80063e2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063b0:	f3ef 8310 	mrs	r3, PRIMASK
 80063b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80063b6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063ba:	2301      	movs	r3, #1
 80063bc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f383 8810 	msr	PRIMASK, r3
}
 80063c4:	46c0      	nop			; (mov r8, r8)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	2110      	movs	r1, #16
 80063d2:	438a      	bics	r2, r1
 80063d4:	601a      	str	r2, [r3, #0]
 80063d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	f383 8810 	msr	PRIMASK, r3
}
 80063e0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	228c      	movs	r2, #140	; 0x8c
 80063e6:	2120      	movs	r1, #32
 80063e8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	675a      	str	r2, [r3, #116]	; 0x74
}
 80063f6:	46c0      	nop			; (mov r8, r8)
 80063f8:	46bd      	mov	sp, r7
 80063fa:	b00e      	add	sp, #56	; 0x38
 80063fc:	bd80      	pop	{r7, pc}
 80063fe:	46c0      	nop			; (mov r8, r8)
 8006400:	fffffedf 	.word	0xfffffedf
 8006404:	effffffe 	.word	0xeffffffe

08006408 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b094      	sub	sp, #80	; 0x50
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006414:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	2220      	movs	r2, #32
 800641e:	4013      	ands	r3, r2
 8006420:	d16f      	bne.n	8006502 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8006422:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006424:	225e      	movs	r2, #94	; 0x5e
 8006426:	2100      	movs	r1, #0
 8006428:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800642a:	f3ef 8310 	mrs	r3, PRIMASK
 800642e:	61bb      	str	r3, [r7, #24]
  return(result);
 8006430:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006432:	64bb      	str	r3, [r7, #72]	; 0x48
 8006434:	2301      	movs	r3, #1
 8006436:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	f383 8810 	msr	PRIMASK, r3
}
 800643e:	46c0      	nop			; (mov r8, r8)
 8006440:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	493a      	ldr	r1, [pc, #232]	; (8006534 <UART_DMAReceiveCplt+0x12c>)
 800644c:	400a      	ands	r2, r1
 800644e:	601a      	str	r2, [r3, #0]
 8006450:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006452:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006454:	6a3b      	ldr	r3, [r7, #32]
 8006456:	f383 8810 	msr	PRIMASK, r3
}
 800645a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800645c:	f3ef 8310 	mrs	r3, PRIMASK
 8006460:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006464:	647b      	str	r3, [r7, #68]	; 0x44
 8006466:	2301      	movs	r3, #1
 8006468:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800646a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800646c:	f383 8810 	msr	PRIMASK, r3
}
 8006470:	46c0      	nop			; (mov r8, r8)
 8006472:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	689a      	ldr	r2, [r3, #8]
 8006478:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	2101      	movs	r1, #1
 800647e:	438a      	bics	r2, r1
 8006480:	609a      	str	r2, [r3, #8]
 8006482:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006484:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006488:	f383 8810 	msr	PRIMASK, r3
}
 800648c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800648e:	f3ef 8310 	mrs	r3, PRIMASK
 8006492:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8006494:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006496:	643b      	str	r3, [r7, #64]	; 0x40
 8006498:	2301      	movs	r3, #1
 800649a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800649c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800649e:	f383 8810 	msr	PRIMASK, r3
}
 80064a2:	46c0      	nop			; (mov r8, r8)
 80064a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	689a      	ldr	r2, [r3, #8]
 80064aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	2140      	movs	r1, #64	; 0x40
 80064b0:	438a      	bics	r2, r1
 80064b2:	609a      	str	r2, [r3, #8]
 80064b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064b6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ba:	f383 8810 	msr	PRIMASK, r3
}
 80064be:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80064c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064c2:	228c      	movs	r2, #140	; 0x8c
 80064c4:	2120      	movs	r1, #32
 80064c6:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d118      	bne.n	8006502 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064d0:	f3ef 8310 	mrs	r3, PRIMASK
 80064d4:	60fb      	str	r3, [r7, #12]
  return(result);
 80064d6:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064da:	2301      	movs	r3, #1
 80064dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	f383 8810 	msr	PRIMASK, r3
}
 80064e4:	46c0      	nop			; (mov r8, r8)
 80064e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	2110      	movs	r1, #16
 80064f2:	438a      	bics	r2, r1
 80064f4:	601a      	str	r2, [r3, #0]
 80064f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	f383 8810 	msr	PRIMASK, r3
}
 8006500:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006502:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006504:	2200      	movs	r2, #0
 8006506:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006508:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800650a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800650c:	2b01      	cmp	r3, #1
 800650e:	d108      	bne.n	8006522 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006510:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006512:	225c      	movs	r2, #92	; 0x5c
 8006514:	5a9a      	ldrh	r2, [r3, r2]
 8006516:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006518:	0011      	movs	r1, r2
 800651a:	0018      	movs	r0, r3
 800651c:	f7fc fc10 	bl	8002d40 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006520:	e003      	b.n	800652a <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8006522:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006524:	0018      	movs	r0, r3
 8006526:	f7ff f9c9 	bl	80058bc <HAL_UART_RxCpltCallback>
}
 800652a:	46c0      	nop			; (mov r8, r8)
 800652c:	46bd      	mov	sp, r7
 800652e:	b014      	add	sp, #80	; 0x50
 8006530:	bd80      	pop	{r7, pc}
 8006532:	46c0      	nop			; (mov r8, r8)
 8006534:	fffffeff 	.word	0xfffffeff

08006538 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b084      	sub	sp, #16
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006544:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2201      	movs	r2, #1
 800654a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006550:	2b01      	cmp	r3, #1
 8006552:	d10a      	bne.n	800656a <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	225c      	movs	r2, #92	; 0x5c
 8006558:	5a9b      	ldrh	r3, [r3, r2]
 800655a:	085b      	lsrs	r3, r3, #1
 800655c:	b29a      	uxth	r2, r3
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	0011      	movs	r1, r2
 8006562:	0018      	movs	r0, r3
 8006564:	f7fc fbec 	bl	8002d40 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006568:	e003      	b.n	8006572 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	0018      	movs	r0, r3
 800656e:	f7ff f9ad 	bl	80058cc <HAL_UART_RxHalfCpltCallback>
}
 8006572:	46c0      	nop			; (mov r8, r8)
 8006574:	46bd      	mov	sp, r7
 8006576:	b004      	add	sp, #16
 8006578:	bd80      	pop	{r7, pc}

0800657a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800657a:	b580      	push	{r7, lr}
 800657c:	b086      	sub	sp, #24
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006586:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	2288      	movs	r2, #136	; 0x88
 800658c:	589b      	ldr	r3, [r3, r2]
 800658e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	228c      	movs	r2, #140	; 0x8c
 8006594:	589b      	ldr	r3, [r3, r2]
 8006596:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	2280      	movs	r2, #128	; 0x80
 80065a0:	4013      	ands	r3, r2
 80065a2:	2b80      	cmp	r3, #128	; 0x80
 80065a4:	d10a      	bne.n	80065bc <UART_DMAError+0x42>
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	2b21      	cmp	r3, #33	; 0x21
 80065aa:	d107      	bne.n	80065bc <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	2256      	movs	r2, #86	; 0x56
 80065b0:	2100      	movs	r1, #0
 80065b2:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	0018      	movs	r0, r3
 80065b8:	f7ff fe80 	bl	80062bc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	2240      	movs	r2, #64	; 0x40
 80065c4:	4013      	ands	r3, r2
 80065c6:	2b40      	cmp	r3, #64	; 0x40
 80065c8:	d10a      	bne.n	80065e0 <UART_DMAError+0x66>
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2b22      	cmp	r3, #34	; 0x22
 80065ce:	d107      	bne.n	80065e0 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	225e      	movs	r2, #94	; 0x5e
 80065d4:	2100      	movs	r1, #0
 80065d6:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	0018      	movs	r0, r3
 80065dc:	f7ff feae 	bl	800633c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	2290      	movs	r2, #144	; 0x90
 80065e4:	589b      	ldr	r3, [r3, r2]
 80065e6:	2210      	movs	r2, #16
 80065e8:	431a      	orrs	r2, r3
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	2190      	movs	r1, #144	; 0x90
 80065ee:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	0018      	movs	r0, r3
 80065f4:	f7ff f972 	bl	80058dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065f8:	46c0      	nop			; (mov r8, r8)
 80065fa:	46bd      	mov	sp, r7
 80065fc:	b006      	add	sp, #24
 80065fe:	bd80      	pop	{r7, pc}

08006600 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b084      	sub	sp, #16
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800660c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	225e      	movs	r2, #94	; 0x5e
 8006612:	2100      	movs	r1, #0
 8006614:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2256      	movs	r2, #86	; 0x56
 800661a:	2100      	movs	r1, #0
 800661c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	0018      	movs	r0, r3
 8006622:	f7ff f95b 	bl	80058dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006626:	46c0      	nop			; (mov r8, r8)
 8006628:	46bd      	mov	sp, r7
 800662a:	b004      	add	sp, #16
 800662c:	bd80      	pop	{r7, pc}

0800662e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800662e:	b580      	push	{r7, lr}
 8006630:	b086      	sub	sp, #24
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006636:	f3ef 8310 	mrs	r3, PRIMASK
 800663a:	60bb      	str	r3, [r7, #8]
  return(result);
 800663c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800663e:	617b      	str	r3, [r7, #20]
 8006640:	2301      	movs	r3, #1
 8006642:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f383 8810 	msr	PRIMASK, r3
}
 800664a:	46c0      	nop			; (mov r8, r8)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	2140      	movs	r1, #64	; 0x40
 8006658:	438a      	bics	r2, r1
 800665a:	601a      	str	r2, [r3, #0]
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	f383 8810 	msr	PRIMASK, r3
}
 8006666:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2288      	movs	r2, #136	; 0x88
 800666c:	2120      	movs	r1, #32
 800666e:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2200      	movs	r2, #0
 8006674:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	0018      	movs	r0, r3
 800667a:	f7ff f917 	bl	80058ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800667e:	46c0      	nop			; (mov r8, r8)
 8006680:	46bd      	mov	sp, r7
 8006682:	b006      	add	sp, #24
 8006684:	bd80      	pop	{r7, pc}

08006686 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006686:	b580      	push	{r7, lr}
 8006688:	b082      	sub	sp, #8
 800668a:	af00      	add	r7, sp, #0
 800668c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800668e:	46c0      	nop			; (mov r8, r8)
 8006690:	46bd      	mov	sp, r7
 8006692:	b002      	add	sp, #8
 8006694:	bd80      	pop	{r7, pc}

08006696 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006696:	b580      	push	{r7, lr}
 8006698:	b082      	sub	sp, #8
 800669a:	af00      	add	r7, sp, #0
 800669c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800669e:	46c0      	nop			; (mov r8, r8)
 80066a0:	46bd      	mov	sp, r7
 80066a2:	b002      	add	sp, #8
 80066a4:	bd80      	pop	{r7, pc}

080066a6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80066a6:	b580      	push	{r7, lr}
 80066a8:	b082      	sub	sp, #8
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80066ae:	46c0      	nop			; (mov r8, r8)
 80066b0:	46bd      	mov	sp, r7
 80066b2:	b002      	add	sp, #8
 80066b4:	bd80      	pop	{r7, pc}
	...

080066b8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b084      	sub	sp, #16
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2284      	movs	r2, #132	; 0x84
 80066c4:	5c9b      	ldrb	r3, [r3, r2]
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d101      	bne.n	80066ce <HAL_UARTEx_DisableFifoMode+0x16>
 80066ca:	2302      	movs	r3, #2
 80066cc:	e027      	b.n	800671e <HAL_UARTEx_DisableFifoMode+0x66>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2284      	movs	r2, #132	; 0x84
 80066d2:	2101      	movs	r1, #1
 80066d4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2288      	movs	r2, #136	; 0x88
 80066da:	2124      	movs	r1, #36	; 0x24
 80066dc:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	2101      	movs	r1, #1
 80066f2:	438a      	bics	r2, r1
 80066f4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	4a0b      	ldr	r2, [pc, #44]	; (8006728 <HAL_UARTEx_DisableFifoMode+0x70>)
 80066fa:	4013      	ands	r3, r2
 80066fc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2200      	movs	r2, #0
 8006702:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	68fa      	ldr	r2, [r7, #12]
 800670a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2288      	movs	r2, #136	; 0x88
 8006710:	2120      	movs	r1, #32
 8006712:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2284      	movs	r2, #132	; 0x84
 8006718:	2100      	movs	r1, #0
 800671a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800671c:	2300      	movs	r3, #0
}
 800671e:	0018      	movs	r0, r3
 8006720:	46bd      	mov	sp, r7
 8006722:	b004      	add	sp, #16
 8006724:	bd80      	pop	{r7, pc}
 8006726:	46c0      	nop			; (mov r8, r8)
 8006728:	dfffffff 	.word	0xdfffffff

0800672c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b084      	sub	sp, #16
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2284      	movs	r2, #132	; 0x84
 800673a:	5c9b      	ldrb	r3, [r3, r2]
 800673c:	2b01      	cmp	r3, #1
 800673e:	d101      	bne.n	8006744 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006740:	2302      	movs	r3, #2
 8006742:	e02e      	b.n	80067a2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2284      	movs	r2, #132	; 0x84
 8006748:	2101      	movs	r1, #1
 800674a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2288      	movs	r2, #136	; 0x88
 8006750:	2124      	movs	r1, #36	; 0x24
 8006752:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	2101      	movs	r1, #1
 8006768:	438a      	bics	r2, r1
 800676a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	00db      	lsls	r3, r3, #3
 8006774:	08d9      	lsrs	r1, r3, #3
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	683a      	ldr	r2, [r7, #0]
 800677c:	430a      	orrs	r2, r1
 800677e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	0018      	movs	r0, r3
 8006784:	f000 f8bc 	bl	8006900 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	68fa      	ldr	r2, [r7, #12]
 800678e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2288      	movs	r2, #136	; 0x88
 8006794:	2120      	movs	r1, #32
 8006796:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2284      	movs	r2, #132	; 0x84
 800679c:	2100      	movs	r1, #0
 800679e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80067a0:	2300      	movs	r3, #0
}
 80067a2:	0018      	movs	r0, r3
 80067a4:	46bd      	mov	sp, r7
 80067a6:	b004      	add	sp, #16
 80067a8:	bd80      	pop	{r7, pc}
	...

080067ac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b084      	sub	sp, #16
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2284      	movs	r2, #132	; 0x84
 80067ba:	5c9b      	ldrb	r3, [r3, r2]
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d101      	bne.n	80067c4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80067c0:	2302      	movs	r3, #2
 80067c2:	e02f      	b.n	8006824 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2284      	movs	r2, #132	; 0x84
 80067c8:	2101      	movs	r1, #1
 80067ca:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2288      	movs	r2, #136	; 0x88
 80067d0:	2124      	movs	r1, #36	; 0x24
 80067d2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	681a      	ldr	r2, [r3, #0]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	2101      	movs	r1, #1
 80067e8:	438a      	bics	r2, r1
 80067ea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	4a0e      	ldr	r2, [pc, #56]	; (800682c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80067f4:	4013      	ands	r3, r2
 80067f6:	0019      	movs	r1, r3
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	683a      	ldr	r2, [r7, #0]
 80067fe:	430a      	orrs	r2, r1
 8006800:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	0018      	movs	r0, r3
 8006806:	f000 f87b 	bl	8006900 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	68fa      	ldr	r2, [r7, #12]
 8006810:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2288      	movs	r2, #136	; 0x88
 8006816:	2120      	movs	r1, #32
 8006818:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2284      	movs	r2, #132	; 0x84
 800681e:	2100      	movs	r1, #0
 8006820:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006822:	2300      	movs	r3, #0
}
 8006824:	0018      	movs	r0, r3
 8006826:	46bd      	mov	sp, r7
 8006828:	b004      	add	sp, #16
 800682a:	bd80      	pop	{r7, pc}
 800682c:	f1ffffff 	.word	0xf1ffffff

08006830 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006830:	b5b0      	push	{r4, r5, r7, lr}
 8006832:	b08a      	sub	sp, #40	; 0x28
 8006834:	af00      	add	r7, sp, #0
 8006836:	60f8      	str	r0, [r7, #12]
 8006838:	60b9      	str	r1, [r7, #8]
 800683a:	1dbb      	adds	r3, r7, #6
 800683c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	228c      	movs	r2, #140	; 0x8c
 8006842:	589b      	ldr	r3, [r3, r2]
 8006844:	2b20      	cmp	r3, #32
 8006846:	d156      	bne.n	80068f6 <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d003      	beq.n	8006856 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800684e:	1dbb      	adds	r3, r7, #6
 8006850:	881b      	ldrh	r3, [r3, #0]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d101      	bne.n	800685a <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e04e      	b.n	80068f8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	689a      	ldr	r2, [r3, #8]
 800685e:	2380      	movs	r3, #128	; 0x80
 8006860:	015b      	lsls	r3, r3, #5
 8006862:	429a      	cmp	r2, r3
 8006864:	d109      	bne.n	800687a <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	691b      	ldr	r3, [r3, #16]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d105      	bne.n	800687a <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	2201      	movs	r2, #1
 8006872:	4013      	ands	r3, r2
 8006874:	d001      	beq.n	800687a <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 8006876:	2301      	movs	r3, #1
 8006878:	e03e      	b.n	80068f8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2201      	movs	r2, #1
 800687e:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2200      	movs	r2, #0
 8006884:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8006886:	2527      	movs	r5, #39	; 0x27
 8006888:	197c      	adds	r4, r7, r5
 800688a:	1dbb      	adds	r3, r7, #6
 800688c:	881a      	ldrh	r2, [r3, #0]
 800688e:	68b9      	ldr	r1, [r7, #8]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	0018      	movs	r0, r3
 8006894:	f7ff fc6c 	bl	8006170 <UART_Start_Receive_DMA>
 8006898:	0003      	movs	r3, r0
 800689a:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800689c:	197b      	adds	r3, r7, r5
 800689e:	781b      	ldrb	r3, [r3, #0]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d124      	bne.n	80068ee <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d11c      	bne.n	80068e6 <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2210      	movs	r2, #16
 80068b2:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068b4:	f3ef 8310 	mrs	r3, PRIMASK
 80068b8:	617b      	str	r3, [r7, #20]
  return(result);
 80068ba:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068bc:	623b      	str	r3, [r7, #32]
 80068be:	2301      	movs	r3, #1
 80068c0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068c2:	69bb      	ldr	r3, [r7, #24]
 80068c4:	f383 8810 	msr	PRIMASK, r3
}
 80068c8:	46c0      	nop			; (mov r8, r8)
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	2110      	movs	r1, #16
 80068d6:	430a      	orrs	r2, r1
 80068d8:	601a      	str	r2, [r3, #0]
 80068da:	6a3b      	ldr	r3, [r7, #32]
 80068dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068de:	69fb      	ldr	r3, [r7, #28]
 80068e0:	f383 8810 	msr	PRIMASK, r3
}
 80068e4:	e003      	b.n	80068ee <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80068e6:	2327      	movs	r3, #39	; 0x27
 80068e8:	18fb      	adds	r3, r7, r3
 80068ea:	2201      	movs	r2, #1
 80068ec:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 80068ee:	2327      	movs	r3, #39	; 0x27
 80068f0:	18fb      	adds	r3, r7, r3
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	e000      	b.n	80068f8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 80068f6:	2302      	movs	r3, #2
  }
}
 80068f8:	0018      	movs	r0, r3
 80068fa:	46bd      	mov	sp, r7
 80068fc:	b00a      	add	sp, #40	; 0x28
 80068fe:	bdb0      	pop	{r4, r5, r7, pc}

08006900 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006900:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006902:	b085      	sub	sp, #20
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800690c:	2b00      	cmp	r3, #0
 800690e:	d108      	bne.n	8006922 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	226a      	movs	r2, #106	; 0x6a
 8006914:	2101      	movs	r1, #1
 8006916:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2268      	movs	r2, #104	; 0x68
 800691c:	2101      	movs	r1, #1
 800691e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006920:	e043      	b.n	80069aa <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006922:	260f      	movs	r6, #15
 8006924:	19bb      	adds	r3, r7, r6
 8006926:	2208      	movs	r2, #8
 8006928:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800692a:	200e      	movs	r0, #14
 800692c:	183b      	adds	r3, r7, r0
 800692e:	2208      	movs	r2, #8
 8006930:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	0e5b      	lsrs	r3, r3, #25
 800693a:	b2da      	uxtb	r2, r3
 800693c:	240d      	movs	r4, #13
 800693e:	193b      	adds	r3, r7, r4
 8006940:	2107      	movs	r1, #7
 8006942:	400a      	ands	r2, r1
 8006944:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	0f5b      	lsrs	r3, r3, #29
 800694e:	b2da      	uxtb	r2, r3
 8006950:	250c      	movs	r5, #12
 8006952:	197b      	adds	r3, r7, r5
 8006954:	2107      	movs	r1, #7
 8006956:	400a      	ands	r2, r1
 8006958:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800695a:	183b      	adds	r3, r7, r0
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	197a      	adds	r2, r7, r5
 8006960:	7812      	ldrb	r2, [r2, #0]
 8006962:	4914      	ldr	r1, [pc, #80]	; (80069b4 <UARTEx_SetNbDataToProcess+0xb4>)
 8006964:	5c8a      	ldrb	r2, [r1, r2]
 8006966:	435a      	muls	r2, r3
 8006968:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800696a:	197b      	adds	r3, r7, r5
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	4a12      	ldr	r2, [pc, #72]	; (80069b8 <UARTEx_SetNbDataToProcess+0xb8>)
 8006970:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006972:	0019      	movs	r1, r3
 8006974:	f7f9 fc6c 	bl	8000250 <__divsi3>
 8006978:	0003      	movs	r3, r0
 800697a:	b299      	uxth	r1, r3
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	226a      	movs	r2, #106	; 0x6a
 8006980:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006982:	19bb      	adds	r3, r7, r6
 8006984:	781b      	ldrb	r3, [r3, #0]
 8006986:	193a      	adds	r2, r7, r4
 8006988:	7812      	ldrb	r2, [r2, #0]
 800698a:	490a      	ldr	r1, [pc, #40]	; (80069b4 <UARTEx_SetNbDataToProcess+0xb4>)
 800698c:	5c8a      	ldrb	r2, [r1, r2]
 800698e:	435a      	muls	r2, r3
 8006990:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8006992:	193b      	adds	r3, r7, r4
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	4a08      	ldr	r2, [pc, #32]	; (80069b8 <UARTEx_SetNbDataToProcess+0xb8>)
 8006998:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800699a:	0019      	movs	r1, r3
 800699c:	f7f9 fc58 	bl	8000250 <__divsi3>
 80069a0:	0003      	movs	r3, r0
 80069a2:	b299      	uxth	r1, r3
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2268      	movs	r2, #104	; 0x68
 80069a8:	5299      	strh	r1, [r3, r2]
}
 80069aa:	46c0      	nop			; (mov r8, r8)
 80069ac:	46bd      	mov	sp, r7
 80069ae:	b005      	add	sp, #20
 80069b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069b2:	46c0      	nop			; (mov r8, r8)
 80069b4:	0800a0f8 	.word	0x0800a0f8
 80069b8:	0800a100 	.word	0x0800a100

080069bc <__errno>:
 80069bc:	4b01      	ldr	r3, [pc, #4]	; (80069c4 <__errno+0x8>)
 80069be:	6818      	ldr	r0, [r3, #0]
 80069c0:	4770      	bx	lr
 80069c2:	46c0      	nop			; (mov r8, r8)
 80069c4:	2000007c 	.word	0x2000007c

080069c8 <__libc_init_array>:
 80069c8:	b570      	push	{r4, r5, r6, lr}
 80069ca:	2600      	movs	r6, #0
 80069cc:	4d0c      	ldr	r5, [pc, #48]	; (8006a00 <__libc_init_array+0x38>)
 80069ce:	4c0d      	ldr	r4, [pc, #52]	; (8006a04 <__libc_init_array+0x3c>)
 80069d0:	1b64      	subs	r4, r4, r5
 80069d2:	10a4      	asrs	r4, r4, #2
 80069d4:	42a6      	cmp	r6, r4
 80069d6:	d109      	bne.n	80069ec <__libc_init_array+0x24>
 80069d8:	2600      	movs	r6, #0
 80069da:	f003 fa6f 	bl	8009ebc <_init>
 80069de:	4d0a      	ldr	r5, [pc, #40]	; (8006a08 <__libc_init_array+0x40>)
 80069e0:	4c0a      	ldr	r4, [pc, #40]	; (8006a0c <__libc_init_array+0x44>)
 80069e2:	1b64      	subs	r4, r4, r5
 80069e4:	10a4      	asrs	r4, r4, #2
 80069e6:	42a6      	cmp	r6, r4
 80069e8:	d105      	bne.n	80069f6 <__libc_init_array+0x2e>
 80069ea:	bd70      	pop	{r4, r5, r6, pc}
 80069ec:	00b3      	lsls	r3, r6, #2
 80069ee:	58eb      	ldr	r3, [r5, r3]
 80069f0:	4798      	blx	r3
 80069f2:	3601      	adds	r6, #1
 80069f4:	e7ee      	b.n	80069d4 <__libc_init_array+0xc>
 80069f6:	00b3      	lsls	r3, r6, #2
 80069f8:	58eb      	ldr	r3, [r5, r3]
 80069fa:	4798      	blx	r3
 80069fc:	3601      	adds	r6, #1
 80069fe:	e7f2      	b.n	80069e6 <__libc_init_array+0x1e>
 8006a00:	0800a598 	.word	0x0800a598
 8006a04:	0800a598 	.word	0x0800a598
 8006a08:	0800a598 	.word	0x0800a598
 8006a0c:	0800a59c 	.word	0x0800a59c

08006a10 <malloc>:
 8006a10:	b510      	push	{r4, lr}
 8006a12:	4b03      	ldr	r3, [pc, #12]	; (8006a20 <malloc+0x10>)
 8006a14:	0001      	movs	r1, r0
 8006a16:	6818      	ldr	r0, [r3, #0]
 8006a18:	f000 f88c 	bl	8006b34 <_malloc_r>
 8006a1c:	bd10      	pop	{r4, pc}
 8006a1e:	46c0      	nop			; (mov r8, r8)
 8006a20:	2000007c 	.word	0x2000007c

08006a24 <free>:
 8006a24:	b510      	push	{r4, lr}
 8006a26:	4b03      	ldr	r3, [pc, #12]	; (8006a34 <free+0x10>)
 8006a28:	0001      	movs	r1, r0
 8006a2a:	6818      	ldr	r0, [r3, #0]
 8006a2c:	f000 f816 	bl	8006a5c <_free_r>
 8006a30:	bd10      	pop	{r4, pc}
 8006a32:	46c0      	nop			; (mov r8, r8)
 8006a34:	2000007c 	.word	0x2000007c

08006a38 <memcpy>:
 8006a38:	2300      	movs	r3, #0
 8006a3a:	b510      	push	{r4, lr}
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d100      	bne.n	8006a42 <memcpy+0xa>
 8006a40:	bd10      	pop	{r4, pc}
 8006a42:	5ccc      	ldrb	r4, [r1, r3]
 8006a44:	54c4      	strb	r4, [r0, r3]
 8006a46:	3301      	adds	r3, #1
 8006a48:	e7f8      	b.n	8006a3c <memcpy+0x4>

08006a4a <memset>:
 8006a4a:	0003      	movs	r3, r0
 8006a4c:	1882      	adds	r2, r0, r2
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d100      	bne.n	8006a54 <memset+0xa>
 8006a52:	4770      	bx	lr
 8006a54:	7019      	strb	r1, [r3, #0]
 8006a56:	3301      	adds	r3, #1
 8006a58:	e7f9      	b.n	8006a4e <memset+0x4>
	...

08006a5c <_free_r>:
 8006a5c:	b570      	push	{r4, r5, r6, lr}
 8006a5e:	0005      	movs	r5, r0
 8006a60:	2900      	cmp	r1, #0
 8006a62:	d010      	beq.n	8006a86 <_free_r+0x2a>
 8006a64:	1f0c      	subs	r4, r1, #4
 8006a66:	6823      	ldr	r3, [r4, #0]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	da00      	bge.n	8006a6e <_free_r+0x12>
 8006a6c:	18e4      	adds	r4, r4, r3
 8006a6e:	0028      	movs	r0, r5
 8006a70:	f001 fc4e 	bl	8008310 <__malloc_lock>
 8006a74:	4a1d      	ldr	r2, [pc, #116]	; (8006aec <_free_r+0x90>)
 8006a76:	6813      	ldr	r3, [r2, #0]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d105      	bne.n	8006a88 <_free_r+0x2c>
 8006a7c:	6063      	str	r3, [r4, #4]
 8006a7e:	6014      	str	r4, [r2, #0]
 8006a80:	0028      	movs	r0, r5
 8006a82:	f001 fc4d 	bl	8008320 <__malloc_unlock>
 8006a86:	bd70      	pop	{r4, r5, r6, pc}
 8006a88:	42a3      	cmp	r3, r4
 8006a8a:	d908      	bls.n	8006a9e <_free_r+0x42>
 8006a8c:	6821      	ldr	r1, [r4, #0]
 8006a8e:	1860      	adds	r0, r4, r1
 8006a90:	4283      	cmp	r3, r0
 8006a92:	d1f3      	bne.n	8006a7c <_free_r+0x20>
 8006a94:	6818      	ldr	r0, [r3, #0]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	1841      	adds	r1, r0, r1
 8006a9a:	6021      	str	r1, [r4, #0]
 8006a9c:	e7ee      	b.n	8006a7c <_free_r+0x20>
 8006a9e:	001a      	movs	r2, r3
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d001      	beq.n	8006aaa <_free_r+0x4e>
 8006aa6:	42a3      	cmp	r3, r4
 8006aa8:	d9f9      	bls.n	8006a9e <_free_r+0x42>
 8006aaa:	6811      	ldr	r1, [r2, #0]
 8006aac:	1850      	adds	r0, r2, r1
 8006aae:	42a0      	cmp	r0, r4
 8006ab0:	d10b      	bne.n	8006aca <_free_r+0x6e>
 8006ab2:	6820      	ldr	r0, [r4, #0]
 8006ab4:	1809      	adds	r1, r1, r0
 8006ab6:	1850      	adds	r0, r2, r1
 8006ab8:	6011      	str	r1, [r2, #0]
 8006aba:	4283      	cmp	r3, r0
 8006abc:	d1e0      	bne.n	8006a80 <_free_r+0x24>
 8006abe:	6818      	ldr	r0, [r3, #0]
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	1841      	adds	r1, r0, r1
 8006ac4:	6011      	str	r1, [r2, #0]
 8006ac6:	6053      	str	r3, [r2, #4]
 8006ac8:	e7da      	b.n	8006a80 <_free_r+0x24>
 8006aca:	42a0      	cmp	r0, r4
 8006acc:	d902      	bls.n	8006ad4 <_free_r+0x78>
 8006ace:	230c      	movs	r3, #12
 8006ad0:	602b      	str	r3, [r5, #0]
 8006ad2:	e7d5      	b.n	8006a80 <_free_r+0x24>
 8006ad4:	6821      	ldr	r1, [r4, #0]
 8006ad6:	1860      	adds	r0, r4, r1
 8006ad8:	4283      	cmp	r3, r0
 8006ada:	d103      	bne.n	8006ae4 <_free_r+0x88>
 8006adc:	6818      	ldr	r0, [r3, #0]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	1841      	adds	r1, r0, r1
 8006ae2:	6021      	str	r1, [r4, #0]
 8006ae4:	6063      	str	r3, [r4, #4]
 8006ae6:	6054      	str	r4, [r2, #4]
 8006ae8:	e7ca      	b.n	8006a80 <_free_r+0x24>
 8006aea:	46c0      	nop			; (mov r8, r8)
 8006aec:	2000057c 	.word	0x2000057c

08006af0 <sbrk_aligned>:
 8006af0:	b570      	push	{r4, r5, r6, lr}
 8006af2:	4e0f      	ldr	r6, [pc, #60]	; (8006b30 <sbrk_aligned+0x40>)
 8006af4:	000d      	movs	r5, r1
 8006af6:	6831      	ldr	r1, [r6, #0]
 8006af8:	0004      	movs	r4, r0
 8006afa:	2900      	cmp	r1, #0
 8006afc:	d102      	bne.n	8006b04 <sbrk_aligned+0x14>
 8006afe:	f000 f88f 	bl	8006c20 <_sbrk_r>
 8006b02:	6030      	str	r0, [r6, #0]
 8006b04:	0029      	movs	r1, r5
 8006b06:	0020      	movs	r0, r4
 8006b08:	f000 f88a 	bl	8006c20 <_sbrk_r>
 8006b0c:	1c43      	adds	r3, r0, #1
 8006b0e:	d00a      	beq.n	8006b26 <sbrk_aligned+0x36>
 8006b10:	2303      	movs	r3, #3
 8006b12:	1cc5      	adds	r5, r0, #3
 8006b14:	439d      	bics	r5, r3
 8006b16:	42a8      	cmp	r0, r5
 8006b18:	d007      	beq.n	8006b2a <sbrk_aligned+0x3a>
 8006b1a:	1a29      	subs	r1, r5, r0
 8006b1c:	0020      	movs	r0, r4
 8006b1e:	f000 f87f 	bl	8006c20 <_sbrk_r>
 8006b22:	1c43      	adds	r3, r0, #1
 8006b24:	d101      	bne.n	8006b2a <sbrk_aligned+0x3a>
 8006b26:	2501      	movs	r5, #1
 8006b28:	426d      	negs	r5, r5
 8006b2a:	0028      	movs	r0, r5
 8006b2c:	bd70      	pop	{r4, r5, r6, pc}
 8006b2e:	46c0      	nop			; (mov r8, r8)
 8006b30:	20000580 	.word	0x20000580

08006b34 <_malloc_r>:
 8006b34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b36:	2203      	movs	r2, #3
 8006b38:	1ccb      	adds	r3, r1, #3
 8006b3a:	4393      	bics	r3, r2
 8006b3c:	3308      	adds	r3, #8
 8006b3e:	0006      	movs	r6, r0
 8006b40:	001f      	movs	r7, r3
 8006b42:	2b0c      	cmp	r3, #12
 8006b44:	d232      	bcs.n	8006bac <_malloc_r+0x78>
 8006b46:	270c      	movs	r7, #12
 8006b48:	42b9      	cmp	r1, r7
 8006b4a:	d831      	bhi.n	8006bb0 <_malloc_r+0x7c>
 8006b4c:	0030      	movs	r0, r6
 8006b4e:	f001 fbdf 	bl	8008310 <__malloc_lock>
 8006b52:	4d32      	ldr	r5, [pc, #200]	; (8006c1c <_malloc_r+0xe8>)
 8006b54:	682b      	ldr	r3, [r5, #0]
 8006b56:	001c      	movs	r4, r3
 8006b58:	2c00      	cmp	r4, #0
 8006b5a:	d12e      	bne.n	8006bba <_malloc_r+0x86>
 8006b5c:	0039      	movs	r1, r7
 8006b5e:	0030      	movs	r0, r6
 8006b60:	f7ff ffc6 	bl	8006af0 <sbrk_aligned>
 8006b64:	0004      	movs	r4, r0
 8006b66:	1c43      	adds	r3, r0, #1
 8006b68:	d11e      	bne.n	8006ba8 <_malloc_r+0x74>
 8006b6a:	682c      	ldr	r4, [r5, #0]
 8006b6c:	0025      	movs	r5, r4
 8006b6e:	2d00      	cmp	r5, #0
 8006b70:	d14a      	bne.n	8006c08 <_malloc_r+0xd4>
 8006b72:	6823      	ldr	r3, [r4, #0]
 8006b74:	0029      	movs	r1, r5
 8006b76:	18e3      	adds	r3, r4, r3
 8006b78:	0030      	movs	r0, r6
 8006b7a:	9301      	str	r3, [sp, #4]
 8006b7c:	f000 f850 	bl	8006c20 <_sbrk_r>
 8006b80:	9b01      	ldr	r3, [sp, #4]
 8006b82:	4283      	cmp	r3, r0
 8006b84:	d143      	bne.n	8006c0e <_malloc_r+0xda>
 8006b86:	6823      	ldr	r3, [r4, #0]
 8006b88:	3703      	adds	r7, #3
 8006b8a:	1aff      	subs	r7, r7, r3
 8006b8c:	2303      	movs	r3, #3
 8006b8e:	439f      	bics	r7, r3
 8006b90:	3708      	adds	r7, #8
 8006b92:	2f0c      	cmp	r7, #12
 8006b94:	d200      	bcs.n	8006b98 <_malloc_r+0x64>
 8006b96:	270c      	movs	r7, #12
 8006b98:	0039      	movs	r1, r7
 8006b9a:	0030      	movs	r0, r6
 8006b9c:	f7ff ffa8 	bl	8006af0 <sbrk_aligned>
 8006ba0:	1c43      	adds	r3, r0, #1
 8006ba2:	d034      	beq.n	8006c0e <_malloc_r+0xda>
 8006ba4:	6823      	ldr	r3, [r4, #0]
 8006ba6:	19df      	adds	r7, r3, r7
 8006ba8:	6027      	str	r7, [r4, #0]
 8006baa:	e013      	b.n	8006bd4 <_malloc_r+0xa0>
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	dacb      	bge.n	8006b48 <_malloc_r+0x14>
 8006bb0:	230c      	movs	r3, #12
 8006bb2:	2500      	movs	r5, #0
 8006bb4:	6033      	str	r3, [r6, #0]
 8006bb6:	0028      	movs	r0, r5
 8006bb8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006bba:	6822      	ldr	r2, [r4, #0]
 8006bbc:	1bd1      	subs	r1, r2, r7
 8006bbe:	d420      	bmi.n	8006c02 <_malloc_r+0xce>
 8006bc0:	290b      	cmp	r1, #11
 8006bc2:	d917      	bls.n	8006bf4 <_malloc_r+0xc0>
 8006bc4:	19e2      	adds	r2, r4, r7
 8006bc6:	6027      	str	r7, [r4, #0]
 8006bc8:	42a3      	cmp	r3, r4
 8006bca:	d111      	bne.n	8006bf0 <_malloc_r+0xbc>
 8006bcc:	602a      	str	r2, [r5, #0]
 8006bce:	6863      	ldr	r3, [r4, #4]
 8006bd0:	6011      	str	r1, [r2, #0]
 8006bd2:	6053      	str	r3, [r2, #4]
 8006bd4:	0030      	movs	r0, r6
 8006bd6:	0025      	movs	r5, r4
 8006bd8:	f001 fba2 	bl	8008320 <__malloc_unlock>
 8006bdc:	2207      	movs	r2, #7
 8006bde:	350b      	adds	r5, #11
 8006be0:	1d23      	adds	r3, r4, #4
 8006be2:	4395      	bics	r5, r2
 8006be4:	1aea      	subs	r2, r5, r3
 8006be6:	429d      	cmp	r5, r3
 8006be8:	d0e5      	beq.n	8006bb6 <_malloc_r+0x82>
 8006bea:	1b5b      	subs	r3, r3, r5
 8006bec:	50a3      	str	r3, [r4, r2]
 8006bee:	e7e2      	b.n	8006bb6 <_malloc_r+0x82>
 8006bf0:	605a      	str	r2, [r3, #4]
 8006bf2:	e7ec      	b.n	8006bce <_malloc_r+0x9a>
 8006bf4:	6862      	ldr	r2, [r4, #4]
 8006bf6:	42a3      	cmp	r3, r4
 8006bf8:	d101      	bne.n	8006bfe <_malloc_r+0xca>
 8006bfa:	602a      	str	r2, [r5, #0]
 8006bfc:	e7ea      	b.n	8006bd4 <_malloc_r+0xa0>
 8006bfe:	605a      	str	r2, [r3, #4]
 8006c00:	e7e8      	b.n	8006bd4 <_malloc_r+0xa0>
 8006c02:	0023      	movs	r3, r4
 8006c04:	6864      	ldr	r4, [r4, #4]
 8006c06:	e7a7      	b.n	8006b58 <_malloc_r+0x24>
 8006c08:	002c      	movs	r4, r5
 8006c0a:	686d      	ldr	r5, [r5, #4]
 8006c0c:	e7af      	b.n	8006b6e <_malloc_r+0x3a>
 8006c0e:	230c      	movs	r3, #12
 8006c10:	0030      	movs	r0, r6
 8006c12:	6033      	str	r3, [r6, #0]
 8006c14:	f001 fb84 	bl	8008320 <__malloc_unlock>
 8006c18:	e7cd      	b.n	8006bb6 <_malloc_r+0x82>
 8006c1a:	46c0      	nop			; (mov r8, r8)
 8006c1c:	2000057c 	.word	0x2000057c

08006c20 <_sbrk_r>:
 8006c20:	2300      	movs	r3, #0
 8006c22:	b570      	push	{r4, r5, r6, lr}
 8006c24:	4d06      	ldr	r5, [pc, #24]	; (8006c40 <_sbrk_r+0x20>)
 8006c26:	0004      	movs	r4, r0
 8006c28:	0008      	movs	r0, r1
 8006c2a:	602b      	str	r3, [r5, #0]
 8006c2c:	f7fc fa78 	bl	8003120 <_sbrk>
 8006c30:	1c43      	adds	r3, r0, #1
 8006c32:	d103      	bne.n	8006c3c <_sbrk_r+0x1c>
 8006c34:	682b      	ldr	r3, [r5, #0]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d000      	beq.n	8006c3c <_sbrk_r+0x1c>
 8006c3a:	6023      	str	r3, [r4, #0]
 8006c3c:	bd70      	pop	{r4, r5, r6, pc}
 8006c3e:	46c0      	nop			; (mov r8, r8)
 8006c40:	20000584 	.word	0x20000584

08006c44 <siprintf>:
 8006c44:	b40e      	push	{r1, r2, r3}
 8006c46:	b500      	push	{lr}
 8006c48:	490b      	ldr	r1, [pc, #44]	; (8006c78 <siprintf+0x34>)
 8006c4a:	b09c      	sub	sp, #112	; 0x70
 8006c4c:	ab1d      	add	r3, sp, #116	; 0x74
 8006c4e:	9002      	str	r0, [sp, #8]
 8006c50:	9006      	str	r0, [sp, #24]
 8006c52:	9107      	str	r1, [sp, #28]
 8006c54:	9104      	str	r1, [sp, #16]
 8006c56:	4809      	ldr	r0, [pc, #36]	; (8006c7c <siprintf+0x38>)
 8006c58:	4909      	ldr	r1, [pc, #36]	; (8006c80 <siprintf+0x3c>)
 8006c5a:	cb04      	ldmia	r3!, {r2}
 8006c5c:	9105      	str	r1, [sp, #20]
 8006c5e:	6800      	ldr	r0, [r0, #0]
 8006c60:	a902      	add	r1, sp, #8
 8006c62:	9301      	str	r3, [sp, #4]
 8006c64:	f002 f8bc 	bl	8008de0 <_svfiprintf_r>
 8006c68:	2300      	movs	r3, #0
 8006c6a:	9a02      	ldr	r2, [sp, #8]
 8006c6c:	7013      	strb	r3, [r2, #0]
 8006c6e:	b01c      	add	sp, #112	; 0x70
 8006c70:	bc08      	pop	{r3}
 8006c72:	b003      	add	sp, #12
 8006c74:	4718      	bx	r3
 8006c76:	46c0      	nop			; (mov r8, r8)
 8006c78:	7fffffff 	.word	0x7fffffff
 8006c7c:	2000007c 	.word	0x2000007c
 8006c80:	ffff0208 	.word	0xffff0208

08006c84 <strncmp>:
 8006c84:	b530      	push	{r4, r5, lr}
 8006c86:	0005      	movs	r5, r0
 8006c88:	1e10      	subs	r0, r2, #0
 8006c8a:	d008      	beq.n	8006c9e <strncmp+0x1a>
 8006c8c:	2400      	movs	r4, #0
 8006c8e:	3a01      	subs	r2, #1
 8006c90:	5d2b      	ldrb	r3, [r5, r4]
 8006c92:	5d08      	ldrb	r0, [r1, r4]
 8006c94:	4283      	cmp	r3, r0
 8006c96:	d101      	bne.n	8006c9c <strncmp+0x18>
 8006c98:	4294      	cmp	r4, r2
 8006c9a:	d101      	bne.n	8006ca0 <strncmp+0x1c>
 8006c9c:	1a18      	subs	r0, r3, r0
 8006c9e:	bd30      	pop	{r4, r5, pc}
 8006ca0:	3401      	adds	r4, #1
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d1f4      	bne.n	8006c90 <strncmp+0xc>
 8006ca6:	e7f9      	b.n	8006c9c <strncmp+0x18>

08006ca8 <sulp>:
 8006ca8:	b570      	push	{r4, r5, r6, lr}
 8006caa:	0016      	movs	r6, r2
 8006cac:	000d      	movs	r5, r1
 8006cae:	f001 fec3 	bl	8008a38 <__ulp>
 8006cb2:	2e00      	cmp	r6, #0
 8006cb4:	d00d      	beq.n	8006cd2 <sulp+0x2a>
 8006cb6:	236b      	movs	r3, #107	; 0x6b
 8006cb8:	006a      	lsls	r2, r5, #1
 8006cba:	0d52      	lsrs	r2, r2, #21
 8006cbc:	1a9b      	subs	r3, r3, r2
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	dd07      	ble.n	8006cd2 <sulp+0x2a>
 8006cc2:	2400      	movs	r4, #0
 8006cc4:	4a03      	ldr	r2, [pc, #12]	; (8006cd4 <sulp+0x2c>)
 8006cc6:	051b      	lsls	r3, r3, #20
 8006cc8:	189d      	adds	r5, r3, r2
 8006cca:	002b      	movs	r3, r5
 8006ccc:	0022      	movs	r2, r4
 8006cce:	f7fa fd83 	bl	80017d8 <__aeabi_dmul>
 8006cd2:	bd70      	pop	{r4, r5, r6, pc}
 8006cd4:	3ff00000 	.word	0x3ff00000

08006cd8 <_strtod_l>:
 8006cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cda:	001d      	movs	r5, r3
 8006cdc:	2300      	movs	r3, #0
 8006cde:	b0a5      	sub	sp, #148	; 0x94
 8006ce0:	9320      	str	r3, [sp, #128]	; 0x80
 8006ce2:	4bac      	ldr	r3, [pc, #688]	; (8006f94 <_strtod_l+0x2bc>)
 8006ce4:	9005      	str	r0, [sp, #20]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	9108      	str	r1, [sp, #32]
 8006cea:	0018      	movs	r0, r3
 8006cec:	9307      	str	r3, [sp, #28]
 8006cee:	921b      	str	r2, [sp, #108]	; 0x6c
 8006cf0:	f7f9 fa08 	bl	8000104 <strlen>
 8006cf4:	2600      	movs	r6, #0
 8006cf6:	0004      	movs	r4, r0
 8006cf8:	2700      	movs	r7, #0
 8006cfa:	9b08      	ldr	r3, [sp, #32]
 8006cfc:	931f      	str	r3, [sp, #124]	; 0x7c
 8006cfe:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8006d00:	7813      	ldrb	r3, [r2, #0]
 8006d02:	2b2b      	cmp	r3, #43	; 0x2b
 8006d04:	d058      	beq.n	8006db8 <_strtod_l+0xe0>
 8006d06:	d844      	bhi.n	8006d92 <_strtod_l+0xba>
 8006d08:	2b0d      	cmp	r3, #13
 8006d0a:	d83d      	bhi.n	8006d88 <_strtod_l+0xb0>
 8006d0c:	2b08      	cmp	r3, #8
 8006d0e:	d83d      	bhi.n	8006d8c <_strtod_l+0xb4>
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d047      	beq.n	8006da4 <_strtod_l+0xcc>
 8006d14:	2300      	movs	r3, #0
 8006d16:	930e      	str	r3, [sp, #56]	; 0x38
 8006d18:	2200      	movs	r2, #0
 8006d1a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006d1c:	920a      	str	r2, [sp, #40]	; 0x28
 8006d1e:	9306      	str	r3, [sp, #24]
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	2b30      	cmp	r3, #48	; 0x30
 8006d24:	d000      	beq.n	8006d28 <_strtod_l+0x50>
 8006d26:	e07f      	b.n	8006e28 <_strtod_l+0x150>
 8006d28:	9b06      	ldr	r3, [sp, #24]
 8006d2a:	3220      	adds	r2, #32
 8006d2c:	785b      	ldrb	r3, [r3, #1]
 8006d2e:	4393      	bics	r3, r2
 8006d30:	2b58      	cmp	r3, #88	; 0x58
 8006d32:	d000      	beq.n	8006d36 <_strtod_l+0x5e>
 8006d34:	e06e      	b.n	8006e14 <_strtod_l+0x13c>
 8006d36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d38:	9502      	str	r5, [sp, #8]
 8006d3a:	9301      	str	r3, [sp, #4]
 8006d3c:	ab20      	add	r3, sp, #128	; 0x80
 8006d3e:	9300      	str	r3, [sp, #0]
 8006d40:	4a95      	ldr	r2, [pc, #596]	; (8006f98 <_strtod_l+0x2c0>)
 8006d42:	ab21      	add	r3, sp, #132	; 0x84
 8006d44:	9805      	ldr	r0, [sp, #20]
 8006d46:	a91f      	add	r1, sp, #124	; 0x7c
 8006d48:	f000 ffc6 	bl	8007cd8 <__gethex>
 8006d4c:	2307      	movs	r3, #7
 8006d4e:	0005      	movs	r5, r0
 8006d50:	0004      	movs	r4, r0
 8006d52:	401d      	ands	r5, r3
 8006d54:	4218      	tst	r0, r3
 8006d56:	d006      	beq.n	8006d66 <_strtod_l+0x8e>
 8006d58:	2d06      	cmp	r5, #6
 8006d5a:	d12f      	bne.n	8006dbc <_strtod_l+0xe4>
 8006d5c:	9b06      	ldr	r3, [sp, #24]
 8006d5e:	3301      	adds	r3, #1
 8006d60:	931f      	str	r3, [sp, #124]	; 0x7c
 8006d62:	2300      	movs	r3, #0
 8006d64:	930e      	str	r3, [sp, #56]	; 0x38
 8006d66:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d002      	beq.n	8006d72 <_strtod_l+0x9a>
 8006d6c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006d6e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8006d70:	601a      	str	r2, [r3, #0]
 8006d72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d01c      	beq.n	8006db2 <_strtod_l+0xda>
 8006d78:	2380      	movs	r3, #128	; 0x80
 8006d7a:	0032      	movs	r2, r6
 8006d7c:	061b      	lsls	r3, r3, #24
 8006d7e:	18fb      	adds	r3, r7, r3
 8006d80:	0010      	movs	r0, r2
 8006d82:	0019      	movs	r1, r3
 8006d84:	b025      	add	sp, #148	; 0x94
 8006d86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d88:	2b20      	cmp	r3, #32
 8006d8a:	d1c3      	bne.n	8006d14 <_strtod_l+0x3c>
 8006d8c:	3201      	adds	r2, #1
 8006d8e:	921f      	str	r2, [sp, #124]	; 0x7c
 8006d90:	e7b5      	b.n	8006cfe <_strtod_l+0x26>
 8006d92:	2b2d      	cmp	r3, #45	; 0x2d
 8006d94:	d1be      	bne.n	8006d14 <_strtod_l+0x3c>
 8006d96:	3b2c      	subs	r3, #44	; 0x2c
 8006d98:	930e      	str	r3, [sp, #56]	; 0x38
 8006d9a:	1c53      	adds	r3, r2, #1
 8006d9c:	931f      	str	r3, [sp, #124]	; 0x7c
 8006d9e:	7853      	ldrb	r3, [r2, #1]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d1b9      	bne.n	8006d18 <_strtod_l+0x40>
 8006da4:	9b08      	ldr	r3, [sp, #32]
 8006da6:	931f      	str	r3, [sp, #124]	; 0x7c
 8006da8:	2300      	movs	r3, #0
 8006daa:	930e      	str	r3, [sp, #56]	; 0x38
 8006dac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d1dc      	bne.n	8006d6c <_strtod_l+0x94>
 8006db2:	0032      	movs	r2, r6
 8006db4:	003b      	movs	r3, r7
 8006db6:	e7e3      	b.n	8006d80 <_strtod_l+0xa8>
 8006db8:	2300      	movs	r3, #0
 8006dba:	e7ed      	b.n	8006d98 <_strtod_l+0xc0>
 8006dbc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006dbe:	2a00      	cmp	r2, #0
 8006dc0:	d007      	beq.n	8006dd2 <_strtod_l+0xfa>
 8006dc2:	2135      	movs	r1, #53	; 0x35
 8006dc4:	a822      	add	r0, sp, #136	; 0x88
 8006dc6:	f001 ff38 	bl	8008c3a <__copybits>
 8006dca:	9920      	ldr	r1, [sp, #128]	; 0x80
 8006dcc:	9805      	ldr	r0, [sp, #20]
 8006dce:	f001 faf3 	bl	80083b8 <_Bfree>
 8006dd2:	1e68      	subs	r0, r5, #1
 8006dd4:	2804      	cmp	r0, #4
 8006dd6:	d806      	bhi.n	8006de6 <_strtod_l+0x10e>
 8006dd8:	f7f9 f99c 	bl	8000114 <__gnu_thumb1_case_uqi>
 8006ddc:	1816030b 	.word	0x1816030b
 8006de0:	0b          	.byte	0x0b
 8006de1:	00          	.byte	0x00
 8006de2:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8006de4:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 8006de6:	0723      	lsls	r3, r4, #28
 8006de8:	d5bd      	bpl.n	8006d66 <_strtod_l+0x8e>
 8006dea:	2380      	movs	r3, #128	; 0x80
 8006dec:	061b      	lsls	r3, r3, #24
 8006dee:	431f      	orrs	r7, r3
 8006df0:	e7b9      	b.n	8006d66 <_strtod_l+0x8e>
 8006df2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006df4:	4a69      	ldr	r2, [pc, #420]	; (8006f9c <_strtod_l+0x2c4>)
 8006df6:	496a      	ldr	r1, [pc, #424]	; (8006fa0 <_strtod_l+0x2c8>)
 8006df8:	401a      	ands	r2, r3
 8006dfa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006dfc:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8006dfe:	185b      	adds	r3, r3, r1
 8006e00:	051b      	lsls	r3, r3, #20
 8006e02:	431a      	orrs	r2, r3
 8006e04:	0017      	movs	r7, r2
 8006e06:	e7ee      	b.n	8006de6 <_strtod_l+0x10e>
 8006e08:	4f66      	ldr	r7, [pc, #408]	; (8006fa4 <_strtod_l+0x2cc>)
 8006e0a:	e7ec      	b.n	8006de6 <_strtod_l+0x10e>
 8006e0c:	2601      	movs	r6, #1
 8006e0e:	4f66      	ldr	r7, [pc, #408]	; (8006fa8 <_strtod_l+0x2d0>)
 8006e10:	4276      	negs	r6, r6
 8006e12:	e7e8      	b.n	8006de6 <_strtod_l+0x10e>
 8006e14:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006e16:	1c5a      	adds	r2, r3, #1
 8006e18:	921f      	str	r2, [sp, #124]	; 0x7c
 8006e1a:	785b      	ldrb	r3, [r3, #1]
 8006e1c:	2b30      	cmp	r3, #48	; 0x30
 8006e1e:	d0f9      	beq.n	8006e14 <_strtod_l+0x13c>
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d0a0      	beq.n	8006d66 <_strtod_l+0x8e>
 8006e24:	2301      	movs	r3, #1
 8006e26:	930a      	str	r3, [sp, #40]	; 0x28
 8006e28:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006e2a:	220a      	movs	r2, #10
 8006e2c:	9310      	str	r3, [sp, #64]	; 0x40
 8006e2e:	2300      	movs	r3, #0
 8006e30:	930f      	str	r3, [sp, #60]	; 0x3c
 8006e32:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e34:	9309      	str	r3, [sp, #36]	; 0x24
 8006e36:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8006e38:	7805      	ldrb	r5, [r0, #0]
 8006e3a:	002b      	movs	r3, r5
 8006e3c:	3b30      	subs	r3, #48	; 0x30
 8006e3e:	b2d9      	uxtb	r1, r3
 8006e40:	2909      	cmp	r1, #9
 8006e42:	d927      	bls.n	8006e94 <_strtod_l+0x1bc>
 8006e44:	0022      	movs	r2, r4
 8006e46:	9907      	ldr	r1, [sp, #28]
 8006e48:	f7ff ff1c 	bl	8006c84 <strncmp>
 8006e4c:	2800      	cmp	r0, #0
 8006e4e:	d033      	beq.n	8006eb8 <_strtod_l+0x1e0>
 8006e50:	2000      	movs	r0, #0
 8006e52:	002b      	movs	r3, r5
 8006e54:	4684      	mov	ip, r0
 8006e56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e58:	900c      	str	r0, [sp, #48]	; 0x30
 8006e5a:	9206      	str	r2, [sp, #24]
 8006e5c:	2220      	movs	r2, #32
 8006e5e:	0019      	movs	r1, r3
 8006e60:	4391      	bics	r1, r2
 8006e62:	000a      	movs	r2, r1
 8006e64:	2100      	movs	r1, #0
 8006e66:	9107      	str	r1, [sp, #28]
 8006e68:	2a45      	cmp	r2, #69	; 0x45
 8006e6a:	d000      	beq.n	8006e6e <_strtod_l+0x196>
 8006e6c:	e0c5      	b.n	8006ffa <_strtod_l+0x322>
 8006e6e:	9b06      	ldr	r3, [sp, #24]
 8006e70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e72:	4303      	orrs	r3, r0
 8006e74:	4313      	orrs	r3, r2
 8006e76:	428b      	cmp	r3, r1
 8006e78:	d094      	beq.n	8006da4 <_strtod_l+0xcc>
 8006e7a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006e7c:	9308      	str	r3, [sp, #32]
 8006e7e:	3301      	adds	r3, #1
 8006e80:	931f      	str	r3, [sp, #124]	; 0x7c
 8006e82:	9b08      	ldr	r3, [sp, #32]
 8006e84:	785b      	ldrb	r3, [r3, #1]
 8006e86:	2b2b      	cmp	r3, #43	; 0x2b
 8006e88:	d076      	beq.n	8006f78 <_strtod_l+0x2a0>
 8006e8a:	000c      	movs	r4, r1
 8006e8c:	2b2d      	cmp	r3, #45	; 0x2d
 8006e8e:	d179      	bne.n	8006f84 <_strtod_l+0x2ac>
 8006e90:	2401      	movs	r4, #1
 8006e92:	e072      	b.n	8006f7a <_strtod_l+0x2a2>
 8006e94:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e96:	2908      	cmp	r1, #8
 8006e98:	dc09      	bgt.n	8006eae <_strtod_l+0x1d6>
 8006e9a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006e9c:	4351      	muls	r1, r2
 8006e9e:	185b      	adds	r3, r3, r1
 8006ea0:	930b      	str	r3, [sp, #44]	; 0x2c
 8006ea2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ea4:	3001      	adds	r0, #1
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	9309      	str	r3, [sp, #36]	; 0x24
 8006eaa:	901f      	str	r0, [sp, #124]	; 0x7c
 8006eac:	e7c3      	b.n	8006e36 <_strtod_l+0x15e>
 8006eae:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006eb0:	4351      	muls	r1, r2
 8006eb2:	185b      	adds	r3, r3, r1
 8006eb4:	930f      	str	r3, [sp, #60]	; 0x3c
 8006eb6:	e7f4      	b.n	8006ea2 <_strtod_l+0x1ca>
 8006eb8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006eba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ebc:	191c      	adds	r4, r3, r4
 8006ebe:	941f      	str	r4, [sp, #124]	; 0x7c
 8006ec0:	7823      	ldrb	r3, [r4, #0]
 8006ec2:	2a00      	cmp	r2, #0
 8006ec4:	d039      	beq.n	8006f3a <_strtod_l+0x262>
 8006ec6:	900c      	str	r0, [sp, #48]	; 0x30
 8006ec8:	9206      	str	r2, [sp, #24]
 8006eca:	001a      	movs	r2, r3
 8006ecc:	3a30      	subs	r2, #48	; 0x30
 8006ece:	2a09      	cmp	r2, #9
 8006ed0:	d912      	bls.n	8006ef8 <_strtod_l+0x220>
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	4694      	mov	ip, r2
 8006ed6:	e7c1      	b.n	8006e5c <_strtod_l+0x184>
 8006ed8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006eda:	3001      	adds	r0, #1
 8006edc:	1c5a      	adds	r2, r3, #1
 8006ede:	921f      	str	r2, [sp, #124]	; 0x7c
 8006ee0:	785b      	ldrb	r3, [r3, #1]
 8006ee2:	2b30      	cmp	r3, #48	; 0x30
 8006ee4:	d0f8      	beq.n	8006ed8 <_strtod_l+0x200>
 8006ee6:	001a      	movs	r2, r3
 8006ee8:	3a31      	subs	r2, #49	; 0x31
 8006eea:	2a08      	cmp	r2, #8
 8006eec:	d83f      	bhi.n	8006f6e <_strtod_l+0x296>
 8006eee:	900c      	str	r0, [sp, #48]	; 0x30
 8006ef0:	2000      	movs	r0, #0
 8006ef2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8006ef4:	9006      	str	r0, [sp, #24]
 8006ef6:	9210      	str	r2, [sp, #64]	; 0x40
 8006ef8:	001a      	movs	r2, r3
 8006efa:	1c41      	adds	r1, r0, #1
 8006efc:	3a30      	subs	r2, #48	; 0x30
 8006efe:	2b30      	cmp	r3, #48	; 0x30
 8006f00:	d015      	beq.n	8006f2e <_strtod_l+0x256>
 8006f02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f04:	185b      	adds	r3, r3, r1
 8006f06:	210a      	movs	r1, #10
 8006f08:	930c      	str	r3, [sp, #48]	; 0x30
 8006f0a:	9b06      	ldr	r3, [sp, #24]
 8006f0c:	18c4      	adds	r4, r0, r3
 8006f0e:	42a3      	cmp	r3, r4
 8006f10:	d115      	bne.n	8006f3e <_strtod_l+0x266>
 8006f12:	9906      	ldr	r1, [sp, #24]
 8006f14:	9b06      	ldr	r3, [sp, #24]
 8006f16:	3101      	adds	r1, #1
 8006f18:	1809      	adds	r1, r1, r0
 8006f1a:	181b      	adds	r3, r3, r0
 8006f1c:	9106      	str	r1, [sp, #24]
 8006f1e:	2b08      	cmp	r3, #8
 8006f20:	dc1b      	bgt.n	8006f5a <_strtod_l+0x282>
 8006f22:	230a      	movs	r3, #10
 8006f24:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006f26:	434b      	muls	r3, r1
 8006f28:	2100      	movs	r1, #0
 8006f2a:	18d3      	adds	r3, r2, r3
 8006f2c:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f2e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006f30:	0008      	movs	r0, r1
 8006f32:	1c5a      	adds	r2, r3, #1
 8006f34:	921f      	str	r2, [sp, #124]	; 0x7c
 8006f36:	785b      	ldrb	r3, [r3, #1]
 8006f38:	e7c7      	b.n	8006eca <_strtod_l+0x1f2>
 8006f3a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f3c:	e7d1      	b.n	8006ee2 <_strtod_l+0x20a>
 8006f3e:	2b08      	cmp	r3, #8
 8006f40:	dc04      	bgt.n	8006f4c <_strtod_l+0x274>
 8006f42:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006f44:	434d      	muls	r5, r1
 8006f46:	950b      	str	r5, [sp, #44]	; 0x2c
 8006f48:	3301      	adds	r3, #1
 8006f4a:	e7e0      	b.n	8006f0e <_strtod_l+0x236>
 8006f4c:	1c5d      	adds	r5, r3, #1
 8006f4e:	2d10      	cmp	r5, #16
 8006f50:	dcfa      	bgt.n	8006f48 <_strtod_l+0x270>
 8006f52:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006f54:	434d      	muls	r5, r1
 8006f56:	950f      	str	r5, [sp, #60]	; 0x3c
 8006f58:	e7f6      	b.n	8006f48 <_strtod_l+0x270>
 8006f5a:	9b06      	ldr	r3, [sp, #24]
 8006f5c:	2100      	movs	r1, #0
 8006f5e:	2b10      	cmp	r3, #16
 8006f60:	dce5      	bgt.n	8006f2e <_strtod_l+0x256>
 8006f62:	230a      	movs	r3, #10
 8006f64:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8006f66:	4343      	muls	r3, r0
 8006f68:	18d3      	adds	r3, r2, r3
 8006f6a:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f6c:	e7df      	b.n	8006f2e <_strtod_l+0x256>
 8006f6e:	2200      	movs	r2, #0
 8006f70:	920c      	str	r2, [sp, #48]	; 0x30
 8006f72:	9206      	str	r2, [sp, #24]
 8006f74:	3201      	adds	r2, #1
 8006f76:	e7ad      	b.n	8006ed4 <_strtod_l+0x1fc>
 8006f78:	2400      	movs	r4, #0
 8006f7a:	9b08      	ldr	r3, [sp, #32]
 8006f7c:	3302      	adds	r3, #2
 8006f7e:	931f      	str	r3, [sp, #124]	; 0x7c
 8006f80:	9b08      	ldr	r3, [sp, #32]
 8006f82:	789b      	ldrb	r3, [r3, #2]
 8006f84:	001a      	movs	r2, r3
 8006f86:	3a30      	subs	r2, #48	; 0x30
 8006f88:	2a09      	cmp	r2, #9
 8006f8a:	d913      	bls.n	8006fb4 <_strtod_l+0x2dc>
 8006f8c:	9a08      	ldr	r2, [sp, #32]
 8006f8e:	921f      	str	r2, [sp, #124]	; 0x7c
 8006f90:	2200      	movs	r2, #0
 8006f92:	e031      	b.n	8006ff8 <_strtod_l+0x320>
 8006f94:	0800a390 	.word	0x0800a390
 8006f98:	0800a118 	.word	0x0800a118
 8006f9c:	ffefffff 	.word	0xffefffff
 8006fa0:	00000433 	.word	0x00000433
 8006fa4:	7ff00000 	.word	0x7ff00000
 8006fa8:	7fffffff 	.word	0x7fffffff
 8006fac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006fae:	1c5a      	adds	r2, r3, #1
 8006fb0:	921f      	str	r2, [sp, #124]	; 0x7c
 8006fb2:	785b      	ldrb	r3, [r3, #1]
 8006fb4:	2b30      	cmp	r3, #48	; 0x30
 8006fb6:	d0f9      	beq.n	8006fac <_strtod_l+0x2d4>
 8006fb8:	2200      	movs	r2, #0
 8006fba:	9207      	str	r2, [sp, #28]
 8006fbc:	001a      	movs	r2, r3
 8006fbe:	3a31      	subs	r2, #49	; 0x31
 8006fc0:	2a08      	cmp	r2, #8
 8006fc2:	d81a      	bhi.n	8006ffa <_strtod_l+0x322>
 8006fc4:	3b30      	subs	r3, #48	; 0x30
 8006fc6:	001a      	movs	r2, r3
 8006fc8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006fca:	9307      	str	r3, [sp, #28]
 8006fcc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006fce:	1c59      	adds	r1, r3, #1
 8006fd0:	911f      	str	r1, [sp, #124]	; 0x7c
 8006fd2:	785b      	ldrb	r3, [r3, #1]
 8006fd4:	001d      	movs	r5, r3
 8006fd6:	3d30      	subs	r5, #48	; 0x30
 8006fd8:	2d09      	cmp	r5, #9
 8006fda:	d939      	bls.n	8007050 <_strtod_l+0x378>
 8006fdc:	9d07      	ldr	r5, [sp, #28]
 8006fde:	1b49      	subs	r1, r1, r5
 8006fe0:	4db0      	ldr	r5, [pc, #704]	; (80072a4 <_strtod_l+0x5cc>)
 8006fe2:	9507      	str	r5, [sp, #28]
 8006fe4:	2908      	cmp	r1, #8
 8006fe6:	dc03      	bgt.n	8006ff0 <_strtod_l+0x318>
 8006fe8:	9207      	str	r2, [sp, #28]
 8006fea:	42aa      	cmp	r2, r5
 8006fec:	dd00      	ble.n	8006ff0 <_strtod_l+0x318>
 8006fee:	9507      	str	r5, [sp, #28]
 8006ff0:	2c00      	cmp	r4, #0
 8006ff2:	d002      	beq.n	8006ffa <_strtod_l+0x322>
 8006ff4:	9a07      	ldr	r2, [sp, #28]
 8006ff6:	4252      	negs	r2, r2
 8006ff8:	9207      	str	r2, [sp, #28]
 8006ffa:	9a06      	ldr	r2, [sp, #24]
 8006ffc:	2a00      	cmp	r2, #0
 8006ffe:	d14b      	bne.n	8007098 <_strtod_l+0x3c0>
 8007000:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007002:	4310      	orrs	r0, r2
 8007004:	d000      	beq.n	8007008 <_strtod_l+0x330>
 8007006:	e6ae      	b.n	8006d66 <_strtod_l+0x8e>
 8007008:	4662      	mov	r2, ip
 800700a:	2a00      	cmp	r2, #0
 800700c:	d000      	beq.n	8007010 <_strtod_l+0x338>
 800700e:	e6c9      	b.n	8006da4 <_strtod_l+0xcc>
 8007010:	2b69      	cmp	r3, #105	; 0x69
 8007012:	d025      	beq.n	8007060 <_strtod_l+0x388>
 8007014:	dc21      	bgt.n	800705a <_strtod_l+0x382>
 8007016:	2b49      	cmp	r3, #73	; 0x49
 8007018:	d022      	beq.n	8007060 <_strtod_l+0x388>
 800701a:	2b4e      	cmp	r3, #78	; 0x4e
 800701c:	d000      	beq.n	8007020 <_strtod_l+0x348>
 800701e:	e6c1      	b.n	8006da4 <_strtod_l+0xcc>
 8007020:	49a1      	ldr	r1, [pc, #644]	; (80072a8 <_strtod_l+0x5d0>)
 8007022:	a81f      	add	r0, sp, #124	; 0x7c
 8007024:	f001 f8a6 	bl	8008174 <__match>
 8007028:	2800      	cmp	r0, #0
 800702a:	d100      	bne.n	800702e <_strtod_l+0x356>
 800702c:	e6ba      	b.n	8006da4 <_strtod_l+0xcc>
 800702e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	2b28      	cmp	r3, #40	; 0x28
 8007034:	d12a      	bne.n	800708c <_strtod_l+0x3b4>
 8007036:	499d      	ldr	r1, [pc, #628]	; (80072ac <_strtod_l+0x5d4>)
 8007038:	aa22      	add	r2, sp, #136	; 0x88
 800703a:	a81f      	add	r0, sp, #124	; 0x7c
 800703c:	f001 f8ae 	bl	800819c <__hexnan>
 8007040:	2805      	cmp	r0, #5
 8007042:	d123      	bne.n	800708c <_strtod_l+0x3b4>
 8007044:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007046:	4a9a      	ldr	r2, [pc, #616]	; (80072b0 <_strtod_l+0x5d8>)
 8007048:	9e22      	ldr	r6, [sp, #136]	; 0x88
 800704a:	431a      	orrs	r2, r3
 800704c:	0017      	movs	r7, r2
 800704e:	e68a      	b.n	8006d66 <_strtod_l+0x8e>
 8007050:	210a      	movs	r1, #10
 8007052:	434a      	muls	r2, r1
 8007054:	18d2      	adds	r2, r2, r3
 8007056:	3a30      	subs	r2, #48	; 0x30
 8007058:	e7b8      	b.n	8006fcc <_strtod_l+0x2f4>
 800705a:	2b6e      	cmp	r3, #110	; 0x6e
 800705c:	d0e0      	beq.n	8007020 <_strtod_l+0x348>
 800705e:	e6a1      	b.n	8006da4 <_strtod_l+0xcc>
 8007060:	4994      	ldr	r1, [pc, #592]	; (80072b4 <_strtod_l+0x5dc>)
 8007062:	a81f      	add	r0, sp, #124	; 0x7c
 8007064:	f001 f886 	bl	8008174 <__match>
 8007068:	2800      	cmp	r0, #0
 800706a:	d100      	bne.n	800706e <_strtod_l+0x396>
 800706c:	e69a      	b.n	8006da4 <_strtod_l+0xcc>
 800706e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007070:	4991      	ldr	r1, [pc, #580]	; (80072b8 <_strtod_l+0x5e0>)
 8007072:	3b01      	subs	r3, #1
 8007074:	a81f      	add	r0, sp, #124	; 0x7c
 8007076:	931f      	str	r3, [sp, #124]	; 0x7c
 8007078:	f001 f87c 	bl	8008174 <__match>
 800707c:	2800      	cmp	r0, #0
 800707e:	d102      	bne.n	8007086 <_strtod_l+0x3ae>
 8007080:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007082:	3301      	adds	r3, #1
 8007084:	931f      	str	r3, [sp, #124]	; 0x7c
 8007086:	2600      	movs	r6, #0
 8007088:	4f89      	ldr	r7, [pc, #548]	; (80072b0 <_strtod_l+0x5d8>)
 800708a:	e66c      	b.n	8006d66 <_strtod_l+0x8e>
 800708c:	488b      	ldr	r0, [pc, #556]	; (80072bc <_strtod_l+0x5e4>)
 800708e:	f002 fa8b 	bl	80095a8 <nan>
 8007092:	0006      	movs	r6, r0
 8007094:	000f      	movs	r7, r1
 8007096:	e666      	b.n	8006d66 <_strtod_l+0x8e>
 8007098:	9b07      	ldr	r3, [sp, #28]
 800709a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800709c:	1a9b      	subs	r3, r3, r2
 800709e:	930a      	str	r3, [sp, #40]	; 0x28
 80070a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d101      	bne.n	80070aa <_strtod_l+0x3d2>
 80070a6:	9b06      	ldr	r3, [sp, #24]
 80070a8:	9309      	str	r3, [sp, #36]	; 0x24
 80070aa:	9c06      	ldr	r4, [sp, #24]
 80070ac:	2c10      	cmp	r4, #16
 80070ae:	dd00      	ble.n	80070b2 <_strtod_l+0x3da>
 80070b0:	2410      	movs	r4, #16
 80070b2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80070b4:	f7fb fa12 	bl	80024dc <__aeabi_ui2d>
 80070b8:	9b06      	ldr	r3, [sp, #24]
 80070ba:	0006      	movs	r6, r0
 80070bc:	000f      	movs	r7, r1
 80070be:	2b09      	cmp	r3, #9
 80070c0:	dd15      	ble.n	80070ee <_strtod_l+0x416>
 80070c2:	0022      	movs	r2, r4
 80070c4:	4b7e      	ldr	r3, [pc, #504]	; (80072c0 <_strtod_l+0x5e8>)
 80070c6:	3a09      	subs	r2, #9
 80070c8:	00d2      	lsls	r2, r2, #3
 80070ca:	189b      	adds	r3, r3, r2
 80070cc:	681a      	ldr	r2, [r3, #0]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	f7fa fb82 	bl	80017d8 <__aeabi_dmul>
 80070d4:	0006      	movs	r6, r0
 80070d6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80070d8:	000f      	movs	r7, r1
 80070da:	f7fb f9ff 	bl	80024dc <__aeabi_ui2d>
 80070de:	0002      	movs	r2, r0
 80070e0:	000b      	movs	r3, r1
 80070e2:	0030      	movs	r0, r6
 80070e4:	0039      	movs	r1, r7
 80070e6:	f7f9 fc39 	bl	800095c <__aeabi_dadd>
 80070ea:	0006      	movs	r6, r0
 80070ec:	000f      	movs	r7, r1
 80070ee:	9b06      	ldr	r3, [sp, #24]
 80070f0:	2b0f      	cmp	r3, #15
 80070f2:	dc39      	bgt.n	8007168 <_strtod_l+0x490>
 80070f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d100      	bne.n	80070fc <_strtod_l+0x424>
 80070fa:	e634      	b.n	8006d66 <_strtod_l+0x8e>
 80070fc:	dd24      	ble.n	8007148 <_strtod_l+0x470>
 80070fe:	2b16      	cmp	r3, #22
 8007100:	dc09      	bgt.n	8007116 <_strtod_l+0x43e>
 8007102:	496f      	ldr	r1, [pc, #444]	; (80072c0 <_strtod_l+0x5e8>)
 8007104:	00db      	lsls	r3, r3, #3
 8007106:	18c9      	adds	r1, r1, r3
 8007108:	0032      	movs	r2, r6
 800710a:	6808      	ldr	r0, [r1, #0]
 800710c:	6849      	ldr	r1, [r1, #4]
 800710e:	003b      	movs	r3, r7
 8007110:	f7fa fb62 	bl	80017d8 <__aeabi_dmul>
 8007114:	e7bd      	b.n	8007092 <_strtod_l+0x3ba>
 8007116:	2325      	movs	r3, #37	; 0x25
 8007118:	9a06      	ldr	r2, [sp, #24]
 800711a:	1a9b      	subs	r3, r3, r2
 800711c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800711e:	4293      	cmp	r3, r2
 8007120:	db22      	blt.n	8007168 <_strtod_l+0x490>
 8007122:	240f      	movs	r4, #15
 8007124:	9b06      	ldr	r3, [sp, #24]
 8007126:	4d66      	ldr	r5, [pc, #408]	; (80072c0 <_strtod_l+0x5e8>)
 8007128:	1ae4      	subs	r4, r4, r3
 800712a:	00e1      	lsls	r1, r4, #3
 800712c:	1869      	adds	r1, r5, r1
 800712e:	0032      	movs	r2, r6
 8007130:	6808      	ldr	r0, [r1, #0]
 8007132:	6849      	ldr	r1, [r1, #4]
 8007134:	003b      	movs	r3, r7
 8007136:	f7fa fb4f 	bl	80017d8 <__aeabi_dmul>
 800713a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800713c:	1b1c      	subs	r4, r3, r4
 800713e:	00e4      	lsls	r4, r4, #3
 8007140:	192c      	adds	r4, r5, r4
 8007142:	6822      	ldr	r2, [r4, #0]
 8007144:	6863      	ldr	r3, [r4, #4]
 8007146:	e7e3      	b.n	8007110 <_strtod_l+0x438>
 8007148:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800714a:	3316      	adds	r3, #22
 800714c:	db0c      	blt.n	8007168 <_strtod_l+0x490>
 800714e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007150:	9a07      	ldr	r2, [sp, #28]
 8007152:	0030      	movs	r0, r6
 8007154:	1a9a      	subs	r2, r3, r2
 8007156:	4b5a      	ldr	r3, [pc, #360]	; (80072c0 <_strtod_l+0x5e8>)
 8007158:	00d2      	lsls	r2, r2, #3
 800715a:	189b      	adds	r3, r3, r2
 800715c:	0039      	movs	r1, r7
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	f7f9 ff37 	bl	8000fd4 <__aeabi_ddiv>
 8007166:	e794      	b.n	8007092 <_strtod_l+0x3ba>
 8007168:	9b06      	ldr	r3, [sp, #24]
 800716a:	1b1c      	subs	r4, r3, r4
 800716c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800716e:	18e4      	adds	r4, r4, r3
 8007170:	2c00      	cmp	r4, #0
 8007172:	dd72      	ble.n	800725a <_strtod_l+0x582>
 8007174:	230f      	movs	r3, #15
 8007176:	0021      	movs	r1, r4
 8007178:	4019      	ands	r1, r3
 800717a:	421c      	tst	r4, r3
 800717c:	d00a      	beq.n	8007194 <_strtod_l+0x4bc>
 800717e:	00cb      	lsls	r3, r1, #3
 8007180:	494f      	ldr	r1, [pc, #316]	; (80072c0 <_strtod_l+0x5e8>)
 8007182:	0032      	movs	r2, r6
 8007184:	18c9      	adds	r1, r1, r3
 8007186:	6808      	ldr	r0, [r1, #0]
 8007188:	6849      	ldr	r1, [r1, #4]
 800718a:	003b      	movs	r3, r7
 800718c:	f7fa fb24 	bl	80017d8 <__aeabi_dmul>
 8007190:	0006      	movs	r6, r0
 8007192:	000f      	movs	r7, r1
 8007194:	230f      	movs	r3, #15
 8007196:	439c      	bics	r4, r3
 8007198:	d04a      	beq.n	8007230 <_strtod_l+0x558>
 800719a:	3326      	adds	r3, #38	; 0x26
 800719c:	33ff      	adds	r3, #255	; 0xff
 800719e:	429c      	cmp	r4, r3
 80071a0:	dd22      	ble.n	80071e8 <_strtod_l+0x510>
 80071a2:	2300      	movs	r3, #0
 80071a4:	9306      	str	r3, [sp, #24]
 80071a6:	9307      	str	r3, [sp, #28]
 80071a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80071aa:	9309      	str	r3, [sp, #36]	; 0x24
 80071ac:	2322      	movs	r3, #34	; 0x22
 80071ae:	2600      	movs	r6, #0
 80071b0:	9a05      	ldr	r2, [sp, #20]
 80071b2:	4f3f      	ldr	r7, [pc, #252]	; (80072b0 <_strtod_l+0x5d8>)
 80071b4:	6013      	str	r3, [r2, #0]
 80071b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071b8:	42b3      	cmp	r3, r6
 80071ba:	d100      	bne.n	80071be <_strtod_l+0x4e6>
 80071bc:	e5d3      	b.n	8006d66 <_strtod_l+0x8e>
 80071be:	9920      	ldr	r1, [sp, #128]	; 0x80
 80071c0:	9805      	ldr	r0, [sp, #20]
 80071c2:	f001 f8f9 	bl	80083b8 <_Bfree>
 80071c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80071c8:	9805      	ldr	r0, [sp, #20]
 80071ca:	f001 f8f5 	bl	80083b8 <_Bfree>
 80071ce:	9907      	ldr	r1, [sp, #28]
 80071d0:	9805      	ldr	r0, [sp, #20]
 80071d2:	f001 f8f1 	bl	80083b8 <_Bfree>
 80071d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80071d8:	9805      	ldr	r0, [sp, #20]
 80071da:	f001 f8ed 	bl	80083b8 <_Bfree>
 80071de:	9906      	ldr	r1, [sp, #24]
 80071e0:	9805      	ldr	r0, [sp, #20]
 80071e2:	f001 f8e9 	bl	80083b8 <_Bfree>
 80071e6:	e5be      	b.n	8006d66 <_strtod_l+0x8e>
 80071e8:	2300      	movs	r3, #0
 80071ea:	0030      	movs	r0, r6
 80071ec:	0039      	movs	r1, r7
 80071ee:	4d35      	ldr	r5, [pc, #212]	; (80072c4 <_strtod_l+0x5ec>)
 80071f0:	1124      	asrs	r4, r4, #4
 80071f2:	9308      	str	r3, [sp, #32]
 80071f4:	2c01      	cmp	r4, #1
 80071f6:	dc1e      	bgt.n	8007236 <_strtod_l+0x55e>
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d001      	beq.n	8007200 <_strtod_l+0x528>
 80071fc:	0006      	movs	r6, r0
 80071fe:	000f      	movs	r7, r1
 8007200:	4b31      	ldr	r3, [pc, #196]	; (80072c8 <_strtod_l+0x5f0>)
 8007202:	0032      	movs	r2, r6
 8007204:	18ff      	adds	r7, r7, r3
 8007206:	9b08      	ldr	r3, [sp, #32]
 8007208:	00dd      	lsls	r5, r3, #3
 800720a:	4b2e      	ldr	r3, [pc, #184]	; (80072c4 <_strtod_l+0x5ec>)
 800720c:	195d      	adds	r5, r3, r5
 800720e:	6828      	ldr	r0, [r5, #0]
 8007210:	6869      	ldr	r1, [r5, #4]
 8007212:	003b      	movs	r3, r7
 8007214:	f7fa fae0 	bl	80017d8 <__aeabi_dmul>
 8007218:	4b25      	ldr	r3, [pc, #148]	; (80072b0 <_strtod_l+0x5d8>)
 800721a:	4a2c      	ldr	r2, [pc, #176]	; (80072cc <_strtod_l+0x5f4>)
 800721c:	0006      	movs	r6, r0
 800721e:	400b      	ands	r3, r1
 8007220:	4293      	cmp	r3, r2
 8007222:	d8be      	bhi.n	80071a2 <_strtod_l+0x4ca>
 8007224:	4a2a      	ldr	r2, [pc, #168]	; (80072d0 <_strtod_l+0x5f8>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d913      	bls.n	8007252 <_strtod_l+0x57a>
 800722a:	2601      	movs	r6, #1
 800722c:	4f29      	ldr	r7, [pc, #164]	; (80072d4 <_strtod_l+0x5fc>)
 800722e:	4276      	negs	r6, r6
 8007230:	2300      	movs	r3, #0
 8007232:	9308      	str	r3, [sp, #32]
 8007234:	e087      	b.n	8007346 <_strtod_l+0x66e>
 8007236:	2201      	movs	r2, #1
 8007238:	4214      	tst	r4, r2
 800723a:	d004      	beq.n	8007246 <_strtod_l+0x56e>
 800723c:	682a      	ldr	r2, [r5, #0]
 800723e:	686b      	ldr	r3, [r5, #4]
 8007240:	f7fa faca 	bl	80017d8 <__aeabi_dmul>
 8007244:	2301      	movs	r3, #1
 8007246:	9a08      	ldr	r2, [sp, #32]
 8007248:	1064      	asrs	r4, r4, #1
 800724a:	3201      	adds	r2, #1
 800724c:	9208      	str	r2, [sp, #32]
 800724e:	3508      	adds	r5, #8
 8007250:	e7d0      	b.n	80071f4 <_strtod_l+0x51c>
 8007252:	23d4      	movs	r3, #212	; 0xd4
 8007254:	049b      	lsls	r3, r3, #18
 8007256:	18cf      	adds	r7, r1, r3
 8007258:	e7ea      	b.n	8007230 <_strtod_l+0x558>
 800725a:	2c00      	cmp	r4, #0
 800725c:	d0e8      	beq.n	8007230 <_strtod_l+0x558>
 800725e:	4264      	negs	r4, r4
 8007260:	220f      	movs	r2, #15
 8007262:	0023      	movs	r3, r4
 8007264:	4013      	ands	r3, r2
 8007266:	4214      	tst	r4, r2
 8007268:	d00a      	beq.n	8007280 <_strtod_l+0x5a8>
 800726a:	00da      	lsls	r2, r3, #3
 800726c:	4b14      	ldr	r3, [pc, #80]	; (80072c0 <_strtod_l+0x5e8>)
 800726e:	0030      	movs	r0, r6
 8007270:	189b      	adds	r3, r3, r2
 8007272:	0039      	movs	r1, r7
 8007274:	681a      	ldr	r2, [r3, #0]
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	f7f9 feac 	bl	8000fd4 <__aeabi_ddiv>
 800727c:	0006      	movs	r6, r0
 800727e:	000f      	movs	r7, r1
 8007280:	1124      	asrs	r4, r4, #4
 8007282:	d0d5      	beq.n	8007230 <_strtod_l+0x558>
 8007284:	2c1f      	cmp	r4, #31
 8007286:	dd27      	ble.n	80072d8 <_strtod_l+0x600>
 8007288:	2300      	movs	r3, #0
 800728a:	9306      	str	r3, [sp, #24]
 800728c:	9307      	str	r3, [sp, #28]
 800728e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007290:	9309      	str	r3, [sp, #36]	; 0x24
 8007292:	2322      	movs	r3, #34	; 0x22
 8007294:	9a05      	ldr	r2, [sp, #20]
 8007296:	2600      	movs	r6, #0
 8007298:	6013      	str	r3, [r2, #0]
 800729a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800729c:	2700      	movs	r7, #0
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d18d      	bne.n	80071be <_strtod_l+0x4e6>
 80072a2:	e560      	b.n	8006d66 <_strtod_l+0x8e>
 80072a4:	00004e1f 	.word	0x00004e1f
 80072a8:	0800a115 	.word	0x0800a115
 80072ac:	0800a12c 	.word	0x0800a12c
 80072b0:	7ff00000 	.word	0x7ff00000
 80072b4:	0800a10c 	.word	0x0800a10c
 80072b8:	0800a10f 	.word	0x0800a10f
 80072bc:	0800a217 	.word	0x0800a217
 80072c0:	0800a428 	.word	0x0800a428
 80072c4:	0800a400 	.word	0x0800a400
 80072c8:	fcb00000 	.word	0xfcb00000
 80072cc:	7ca00000 	.word	0x7ca00000
 80072d0:	7c900000 	.word	0x7c900000
 80072d4:	7fefffff 	.word	0x7fefffff
 80072d8:	2310      	movs	r3, #16
 80072da:	0022      	movs	r2, r4
 80072dc:	401a      	ands	r2, r3
 80072de:	9208      	str	r2, [sp, #32]
 80072e0:	421c      	tst	r4, r3
 80072e2:	d001      	beq.n	80072e8 <_strtod_l+0x610>
 80072e4:	335a      	adds	r3, #90	; 0x5a
 80072e6:	9308      	str	r3, [sp, #32]
 80072e8:	0030      	movs	r0, r6
 80072ea:	0039      	movs	r1, r7
 80072ec:	2300      	movs	r3, #0
 80072ee:	4dc5      	ldr	r5, [pc, #788]	; (8007604 <_strtod_l+0x92c>)
 80072f0:	2201      	movs	r2, #1
 80072f2:	4214      	tst	r4, r2
 80072f4:	d004      	beq.n	8007300 <_strtod_l+0x628>
 80072f6:	682a      	ldr	r2, [r5, #0]
 80072f8:	686b      	ldr	r3, [r5, #4]
 80072fa:	f7fa fa6d 	bl	80017d8 <__aeabi_dmul>
 80072fe:	2301      	movs	r3, #1
 8007300:	1064      	asrs	r4, r4, #1
 8007302:	3508      	adds	r5, #8
 8007304:	2c00      	cmp	r4, #0
 8007306:	d1f3      	bne.n	80072f0 <_strtod_l+0x618>
 8007308:	2b00      	cmp	r3, #0
 800730a:	d001      	beq.n	8007310 <_strtod_l+0x638>
 800730c:	0006      	movs	r6, r0
 800730e:	000f      	movs	r7, r1
 8007310:	9b08      	ldr	r3, [sp, #32]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d00f      	beq.n	8007336 <_strtod_l+0x65e>
 8007316:	236b      	movs	r3, #107	; 0x6b
 8007318:	007a      	lsls	r2, r7, #1
 800731a:	0d52      	lsrs	r2, r2, #21
 800731c:	0039      	movs	r1, r7
 800731e:	1a9b      	subs	r3, r3, r2
 8007320:	2b00      	cmp	r3, #0
 8007322:	dd08      	ble.n	8007336 <_strtod_l+0x65e>
 8007324:	2b1f      	cmp	r3, #31
 8007326:	dc00      	bgt.n	800732a <_strtod_l+0x652>
 8007328:	e124      	b.n	8007574 <_strtod_l+0x89c>
 800732a:	2600      	movs	r6, #0
 800732c:	2b34      	cmp	r3, #52	; 0x34
 800732e:	dc00      	bgt.n	8007332 <_strtod_l+0x65a>
 8007330:	e119      	b.n	8007566 <_strtod_l+0x88e>
 8007332:	27dc      	movs	r7, #220	; 0xdc
 8007334:	04bf      	lsls	r7, r7, #18
 8007336:	2200      	movs	r2, #0
 8007338:	2300      	movs	r3, #0
 800733a:	0030      	movs	r0, r6
 800733c:	0039      	movs	r1, r7
 800733e:	f7f9 f883 	bl	8000448 <__aeabi_dcmpeq>
 8007342:	2800      	cmp	r0, #0
 8007344:	d1a0      	bne.n	8007288 <_strtod_l+0x5b0>
 8007346:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007348:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800734a:	9300      	str	r3, [sp, #0]
 800734c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800734e:	9b06      	ldr	r3, [sp, #24]
 8007350:	9805      	ldr	r0, [sp, #20]
 8007352:	f001 f899 	bl	8008488 <__s2b>
 8007356:	900b      	str	r0, [sp, #44]	; 0x2c
 8007358:	2800      	cmp	r0, #0
 800735a:	d100      	bne.n	800735e <_strtod_l+0x686>
 800735c:	e721      	b.n	80071a2 <_strtod_l+0x4ca>
 800735e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007360:	9907      	ldr	r1, [sp, #28]
 8007362:	17da      	asrs	r2, r3, #31
 8007364:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007366:	1a5b      	subs	r3, r3, r1
 8007368:	401a      	ands	r2, r3
 800736a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800736c:	9215      	str	r2, [sp, #84]	; 0x54
 800736e:	43db      	mvns	r3, r3
 8007370:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007372:	17db      	asrs	r3, r3, #31
 8007374:	401a      	ands	r2, r3
 8007376:	2300      	movs	r3, #0
 8007378:	921a      	str	r2, [sp, #104]	; 0x68
 800737a:	9306      	str	r3, [sp, #24]
 800737c:	9307      	str	r3, [sp, #28]
 800737e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007380:	9805      	ldr	r0, [sp, #20]
 8007382:	6859      	ldr	r1, [r3, #4]
 8007384:	f000 ffd4 	bl	8008330 <_Balloc>
 8007388:	9009      	str	r0, [sp, #36]	; 0x24
 800738a:	2800      	cmp	r0, #0
 800738c:	d100      	bne.n	8007390 <_strtod_l+0x6b8>
 800738e:	e70d      	b.n	80071ac <_strtod_l+0x4d4>
 8007390:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007392:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007394:	691b      	ldr	r3, [r3, #16]
 8007396:	310c      	adds	r1, #12
 8007398:	1c9a      	adds	r2, r3, #2
 800739a:	0092      	lsls	r2, r2, #2
 800739c:	300c      	adds	r0, #12
 800739e:	930c      	str	r3, [sp, #48]	; 0x30
 80073a0:	f7ff fb4a 	bl	8006a38 <memcpy>
 80073a4:	ab22      	add	r3, sp, #136	; 0x88
 80073a6:	9301      	str	r3, [sp, #4]
 80073a8:	ab21      	add	r3, sp, #132	; 0x84
 80073aa:	9300      	str	r3, [sp, #0]
 80073ac:	0032      	movs	r2, r6
 80073ae:	003b      	movs	r3, r7
 80073b0:	9805      	ldr	r0, [sp, #20]
 80073b2:	9612      	str	r6, [sp, #72]	; 0x48
 80073b4:	9713      	str	r7, [sp, #76]	; 0x4c
 80073b6:	f001 fbb3 	bl	8008b20 <__d2b>
 80073ba:	9020      	str	r0, [sp, #128]	; 0x80
 80073bc:	2800      	cmp	r0, #0
 80073be:	d100      	bne.n	80073c2 <_strtod_l+0x6ea>
 80073c0:	e6f4      	b.n	80071ac <_strtod_l+0x4d4>
 80073c2:	2101      	movs	r1, #1
 80073c4:	9805      	ldr	r0, [sp, #20]
 80073c6:	f001 f8f3 	bl	80085b0 <__i2b>
 80073ca:	9007      	str	r0, [sp, #28]
 80073cc:	2800      	cmp	r0, #0
 80073ce:	d100      	bne.n	80073d2 <_strtod_l+0x6fa>
 80073d0:	e6ec      	b.n	80071ac <_strtod_l+0x4d4>
 80073d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80073d4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80073d6:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80073d8:	1ad4      	subs	r4, r2, r3
 80073da:	2b00      	cmp	r3, #0
 80073dc:	db01      	blt.n	80073e2 <_strtod_l+0x70a>
 80073de:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80073e0:	195d      	adds	r5, r3, r5
 80073e2:	9908      	ldr	r1, [sp, #32]
 80073e4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80073e6:	1a5b      	subs	r3, r3, r1
 80073e8:	2136      	movs	r1, #54	; 0x36
 80073ea:	189b      	adds	r3, r3, r2
 80073ec:	1a8a      	subs	r2, r1, r2
 80073ee:	4986      	ldr	r1, [pc, #536]	; (8007608 <_strtod_l+0x930>)
 80073f0:	2001      	movs	r0, #1
 80073f2:	468c      	mov	ip, r1
 80073f4:	2100      	movs	r1, #0
 80073f6:	3b01      	subs	r3, #1
 80073f8:	9110      	str	r1, [sp, #64]	; 0x40
 80073fa:	9014      	str	r0, [sp, #80]	; 0x50
 80073fc:	4563      	cmp	r3, ip
 80073fe:	da07      	bge.n	8007410 <_strtod_l+0x738>
 8007400:	4661      	mov	r1, ip
 8007402:	1ac9      	subs	r1, r1, r3
 8007404:	1a52      	subs	r2, r2, r1
 8007406:	291f      	cmp	r1, #31
 8007408:	dd00      	ble.n	800740c <_strtod_l+0x734>
 800740a:	e0b8      	b.n	800757e <_strtod_l+0x8a6>
 800740c:	4088      	lsls	r0, r1
 800740e:	9014      	str	r0, [sp, #80]	; 0x50
 8007410:	18ab      	adds	r3, r5, r2
 8007412:	930c      	str	r3, [sp, #48]	; 0x30
 8007414:	18a4      	adds	r4, r4, r2
 8007416:	9b08      	ldr	r3, [sp, #32]
 8007418:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800741a:	191c      	adds	r4, r3, r4
 800741c:	002b      	movs	r3, r5
 800741e:	4295      	cmp	r5, r2
 8007420:	dd00      	ble.n	8007424 <_strtod_l+0x74c>
 8007422:	0013      	movs	r3, r2
 8007424:	42a3      	cmp	r3, r4
 8007426:	dd00      	ble.n	800742a <_strtod_l+0x752>
 8007428:	0023      	movs	r3, r4
 800742a:	2b00      	cmp	r3, #0
 800742c:	dd04      	ble.n	8007438 <_strtod_l+0x760>
 800742e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007430:	1ae4      	subs	r4, r4, r3
 8007432:	1ad2      	subs	r2, r2, r3
 8007434:	920c      	str	r2, [sp, #48]	; 0x30
 8007436:	1aed      	subs	r5, r5, r3
 8007438:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800743a:	2b00      	cmp	r3, #0
 800743c:	dd17      	ble.n	800746e <_strtod_l+0x796>
 800743e:	001a      	movs	r2, r3
 8007440:	9907      	ldr	r1, [sp, #28]
 8007442:	9805      	ldr	r0, [sp, #20]
 8007444:	f001 f97a 	bl	800873c <__pow5mult>
 8007448:	9007      	str	r0, [sp, #28]
 800744a:	2800      	cmp	r0, #0
 800744c:	d100      	bne.n	8007450 <_strtod_l+0x778>
 800744e:	e6ad      	b.n	80071ac <_strtod_l+0x4d4>
 8007450:	0001      	movs	r1, r0
 8007452:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007454:	9805      	ldr	r0, [sp, #20]
 8007456:	f001 f8c1 	bl	80085dc <__multiply>
 800745a:	900f      	str	r0, [sp, #60]	; 0x3c
 800745c:	2800      	cmp	r0, #0
 800745e:	d100      	bne.n	8007462 <_strtod_l+0x78a>
 8007460:	e6a4      	b.n	80071ac <_strtod_l+0x4d4>
 8007462:	9920      	ldr	r1, [sp, #128]	; 0x80
 8007464:	9805      	ldr	r0, [sp, #20]
 8007466:	f000 ffa7 	bl	80083b8 <_Bfree>
 800746a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800746c:	9320      	str	r3, [sp, #128]	; 0x80
 800746e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007470:	2b00      	cmp	r3, #0
 8007472:	dd00      	ble.n	8007476 <_strtod_l+0x79e>
 8007474:	e089      	b.n	800758a <_strtod_l+0x8b2>
 8007476:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007478:	2b00      	cmp	r3, #0
 800747a:	dd08      	ble.n	800748e <_strtod_l+0x7b6>
 800747c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800747e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007480:	9805      	ldr	r0, [sp, #20]
 8007482:	f001 f95b 	bl	800873c <__pow5mult>
 8007486:	9009      	str	r0, [sp, #36]	; 0x24
 8007488:	2800      	cmp	r0, #0
 800748a:	d100      	bne.n	800748e <_strtod_l+0x7b6>
 800748c:	e68e      	b.n	80071ac <_strtod_l+0x4d4>
 800748e:	2c00      	cmp	r4, #0
 8007490:	dd08      	ble.n	80074a4 <_strtod_l+0x7cc>
 8007492:	0022      	movs	r2, r4
 8007494:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007496:	9805      	ldr	r0, [sp, #20]
 8007498:	f001 f9ac 	bl	80087f4 <__lshift>
 800749c:	9009      	str	r0, [sp, #36]	; 0x24
 800749e:	2800      	cmp	r0, #0
 80074a0:	d100      	bne.n	80074a4 <_strtod_l+0x7cc>
 80074a2:	e683      	b.n	80071ac <_strtod_l+0x4d4>
 80074a4:	2d00      	cmp	r5, #0
 80074a6:	dd08      	ble.n	80074ba <_strtod_l+0x7e2>
 80074a8:	002a      	movs	r2, r5
 80074aa:	9907      	ldr	r1, [sp, #28]
 80074ac:	9805      	ldr	r0, [sp, #20]
 80074ae:	f001 f9a1 	bl	80087f4 <__lshift>
 80074b2:	9007      	str	r0, [sp, #28]
 80074b4:	2800      	cmp	r0, #0
 80074b6:	d100      	bne.n	80074ba <_strtod_l+0x7e2>
 80074b8:	e678      	b.n	80071ac <_strtod_l+0x4d4>
 80074ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80074bc:	9920      	ldr	r1, [sp, #128]	; 0x80
 80074be:	9805      	ldr	r0, [sp, #20]
 80074c0:	f001 fa22 	bl	8008908 <__mdiff>
 80074c4:	9006      	str	r0, [sp, #24]
 80074c6:	2800      	cmp	r0, #0
 80074c8:	d100      	bne.n	80074cc <_strtod_l+0x7f4>
 80074ca:	e66f      	b.n	80071ac <_strtod_l+0x4d4>
 80074cc:	2200      	movs	r2, #0
 80074ce:	68c3      	ldr	r3, [r0, #12]
 80074d0:	9907      	ldr	r1, [sp, #28]
 80074d2:	60c2      	str	r2, [r0, #12]
 80074d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80074d6:	f001 f9fb 	bl	80088d0 <__mcmp>
 80074da:	2800      	cmp	r0, #0
 80074dc:	da5f      	bge.n	800759e <_strtod_l+0x8c6>
 80074de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80074e0:	4333      	orrs	r3, r6
 80074e2:	d000      	beq.n	80074e6 <_strtod_l+0x80e>
 80074e4:	e08a      	b.n	80075fc <_strtod_l+0x924>
 80074e6:	033b      	lsls	r3, r7, #12
 80074e8:	d000      	beq.n	80074ec <_strtod_l+0x814>
 80074ea:	e087      	b.n	80075fc <_strtod_l+0x924>
 80074ec:	22d6      	movs	r2, #214	; 0xd6
 80074ee:	4b47      	ldr	r3, [pc, #284]	; (800760c <_strtod_l+0x934>)
 80074f0:	04d2      	lsls	r2, r2, #19
 80074f2:	403b      	ands	r3, r7
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d800      	bhi.n	80074fa <_strtod_l+0x822>
 80074f8:	e080      	b.n	80075fc <_strtod_l+0x924>
 80074fa:	9b06      	ldr	r3, [sp, #24]
 80074fc:	695b      	ldr	r3, [r3, #20]
 80074fe:	930a      	str	r3, [sp, #40]	; 0x28
 8007500:	2b00      	cmp	r3, #0
 8007502:	d104      	bne.n	800750e <_strtod_l+0x836>
 8007504:	9b06      	ldr	r3, [sp, #24]
 8007506:	691b      	ldr	r3, [r3, #16]
 8007508:	930a      	str	r3, [sp, #40]	; 0x28
 800750a:	2b01      	cmp	r3, #1
 800750c:	dd76      	ble.n	80075fc <_strtod_l+0x924>
 800750e:	9906      	ldr	r1, [sp, #24]
 8007510:	2201      	movs	r2, #1
 8007512:	9805      	ldr	r0, [sp, #20]
 8007514:	f001 f96e 	bl	80087f4 <__lshift>
 8007518:	9907      	ldr	r1, [sp, #28]
 800751a:	9006      	str	r0, [sp, #24]
 800751c:	f001 f9d8 	bl	80088d0 <__mcmp>
 8007520:	2800      	cmp	r0, #0
 8007522:	dd6b      	ble.n	80075fc <_strtod_l+0x924>
 8007524:	9908      	ldr	r1, [sp, #32]
 8007526:	003b      	movs	r3, r7
 8007528:	4a38      	ldr	r2, [pc, #224]	; (800760c <_strtod_l+0x934>)
 800752a:	2900      	cmp	r1, #0
 800752c:	d100      	bne.n	8007530 <_strtod_l+0x858>
 800752e:	e092      	b.n	8007656 <_strtod_l+0x97e>
 8007530:	0011      	movs	r1, r2
 8007532:	20d6      	movs	r0, #214	; 0xd6
 8007534:	4039      	ands	r1, r7
 8007536:	04c0      	lsls	r0, r0, #19
 8007538:	4281      	cmp	r1, r0
 800753a:	dd00      	ble.n	800753e <_strtod_l+0x866>
 800753c:	e08b      	b.n	8007656 <_strtod_l+0x97e>
 800753e:	23dc      	movs	r3, #220	; 0xdc
 8007540:	049b      	lsls	r3, r3, #18
 8007542:	4299      	cmp	r1, r3
 8007544:	dc00      	bgt.n	8007548 <_strtod_l+0x870>
 8007546:	e6a4      	b.n	8007292 <_strtod_l+0x5ba>
 8007548:	0030      	movs	r0, r6
 800754a:	0039      	movs	r1, r7
 800754c:	2200      	movs	r2, #0
 800754e:	4b30      	ldr	r3, [pc, #192]	; (8007610 <_strtod_l+0x938>)
 8007550:	f7fa f942 	bl	80017d8 <__aeabi_dmul>
 8007554:	0006      	movs	r6, r0
 8007556:	000f      	movs	r7, r1
 8007558:	4308      	orrs	r0, r1
 800755a:	d000      	beq.n	800755e <_strtod_l+0x886>
 800755c:	e62f      	b.n	80071be <_strtod_l+0x4e6>
 800755e:	2322      	movs	r3, #34	; 0x22
 8007560:	9a05      	ldr	r2, [sp, #20]
 8007562:	6013      	str	r3, [r2, #0]
 8007564:	e62b      	b.n	80071be <_strtod_l+0x4e6>
 8007566:	234b      	movs	r3, #75	; 0x4b
 8007568:	1a9a      	subs	r2, r3, r2
 800756a:	3b4c      	subs	r3, #76	; 0x4c
 800756c:	4093      	lsls	r3, r2
 800756e:	4019      	ands	r1, r3
 8007570:	000f      	movs	r7, r1
 8007572:	e6e0      	b.n	8007336 <_strtod_l+0x65e>
 8007574:	2201      	movs	r2, #1
 8007576:	4252      	negs	r2, r2
 8007578:	409a      	lsls	r2, r3
 800757a:	4016      	ands	r6, r2
 800757c:	e6db      	b.n	8007336 <_strtod_l+0x65e>
 800757e:	4925      	ldr	r1, [pc, #148]	; (8007614 <_strtod_l+0x93c>)
 8007580:	1acb      	subs	r3, r1, r3
 8007582:	0001      	movs	r1, r0
 8007584:	4099      	lsls	r1, r3
 8007586:	9110      	str	r1, [sp, #64]	; 0x40
 8007588:	e741      	b.n	800740e <_strtod_l+0x736>
 800758a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800758c:	9920      	ldr	r1, [sp, #128]	; 0x80
 800758e:	9805      	ldr	r0, [sp, #20]
 8007590:	f001 f930 	bl	80087f4 <__lshift>
 8007594:	9020      	str	r0, [sp, #128]	; 0x80
 8007596:	2800      	cmp	r0, #0
 8007598:	d000      	beq.n	800759c <_strtod_l+0x8c4>
 800759a:	e76c      	b.n	8007476 <_strtod_l+0x79e>
 800759c:	e606      	b.n	80071ac <_strtod_l+0x4d4>
 800759e:	970c      	str	r7, [sp, #48]	; 0x30
 80075a0:	2800      	cmp	r0, #0
 80075a2:	d176      	bne.n	8007692 <_strtod_l+0x9ba>
 80075a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80075a6:	033b      	lsls	r3, r7, #12
 80075a8:	0b1b      	lsrs	r3, r3, #12
 80075aa:	2a00      	cmp	r2, #0
 80075ac:	d038      	beq.n	8007620 <_strtod_l+0x948>
 80075ae:	4a1a      	ldr	r2, [pc, #104]	; (8007618 <_strtod_l+0x940>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d138      	bne.n	8007626 <_strtod_l+0x94e>
 80075b4:	2201      	movs	r2, #1
 80075b6:	9b08      	ldr	r3, [sp, #32]
 80075b8:	4252      	negs	r2, r2
 80075ba:	0031      	movs	r1, r6
 80075bc:	0010      	movs	r0, r2
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d00b      	beq.n	80075da <_strtod_l+0x902>
 80075c2:	24d4      	movs	r4, #212	; 0xd4
 80075c4:	4b11      	ldr	r3, [pc, #68]	; (800760c <_strtod_l+0x934>)
 80075c6:	0010      	movs	r0, r2
 80075c8:	403b      	ands	r3, r7
 80075ca:	04e4      	lsls	r4, r4, #19
 80075cc:	42a3      	cmp	r3, r4
 80075ce:	d804      	bhi.n	80075da <_strtod_l+0x902>
 80075d0:	306c      	adds	r0, #108	; 0x6c
 80075d2:	0d1b      	lsrs	r3, r3, #20
 80075d4:	1ac3      	subs	r3, r0, r3
 80075d6:	409a      	lsls	r2, r3
 80075d8:	0010      	movs	r0, r2
 80075da:	4281      	cmp	r1, r0
 80075dc:	d123      	bne.n	8007626 <_strtod_l+0x94e>
 80075de:	4b0f      	ldr	r3, [pc, #60]	; (800761c <_strtod_l+0x944>)
 80075e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d102      	bne.n	80075ec <_strtod_l+0x914>
 80075e6:	1c4b      	adds	r3, r1, #1
 80075e8:	d100      	bne.n	80075ec <_strtod_l+0x914>
 80075ea:	e5df      	b.n	80071ac <_strtod_l+0x4d4>
 80075ec:	4b07      	ldr	r3, [pc, #28]	; (800760c <_strtod_l+0x934>)
 80075ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80075f0:	2600      	movs	r6, #0
 80075f2:	401a      	ands	r2, r3
 80075f4:	0013      	movs	r3, r2
 80075f6:	2280      	movs	r2, #128	; 0x80
 80075f8:	0352      	lsls	r2, r2, #13
 80075fa:	189f      	adds	r7, r3, r2
 80075fc:	9b08      	ldr	r3, [sp, #32]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d1a2      	bne.n	8007548 <_strtod_l+0x870>
 8007602:	e5dc      	b.n	80071be <_strtod_l+0x4e6>
 8007604:	0800a140 	.word	0x0800a140
 8007608:	fffffc02 	.word	0xfffffc02
 800760c:	7ff00000 	.word	0x7ff00000
 8007610:	39500000 	.word	0x39500000
 8007614:	fffffbe2 	.word	0xfffffbe2
 8007618:	000fffff 	.word	0x000fffff
 800761c:	7fefffff 	.word	0x7fefffff
 8007620:	4333      	orrs	r3, r6
 8007622:	d100      	bne.n	8007626 <_strtod_l+0x94e>
 8007624:	e77e      	b.n	8007524 <_strtod_l+0x84c>
 8007626:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007628:	2b00      	cmp	r3, #0
 800762a:	d01d      	beq.n	8007668 <_strtod_l+0x990>
 800762c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800762e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007630:	4213      	tst	r3, r2
 8007632:	d0e3      	beq.n	80075fc <_strtod_l+0x924>
 8007634:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007636:	0030      	movs	r0, r6
 8007638:	0039      	movs	r1, r7
 800763a:	9a08      	ldr	r2, [sp, #32]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d017      	beq.n	8007670 <_strtod_l+0x998>
 8007640:	f7ff fb32 	bl	8006ca8 <sulp>
 8007644:	0002      	movs	r2, r0
 8007646:	000b      	movs	r3, r1
 8007648:	9812      	ldr	r0, [sp, #72]	; 0x48
 800764a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800764c:	f7f9 f986 	bl	800095c <__aeabi_dadd>
 8007650:	0006      	movs	r6, r0
 8007652:	000f      	movs	r7, r1
 8007654:	e7d2      	b.n	80075fc <_strtod_l+0x924>
 8007656:	2601      	movs	r6, #1
 8007658:	4013      	ands	r3, r2
 800765a:	4a99      	ldr	r2, [pc, #612]	; (80078c0 <_strtod_l+0xbe8>)
 800765c:	4276      	negs	r6, r6
 800765e:	189b      	adds	r3, r3, r2
 8007660:	4a98      	ldr	r2, [pc, #608]	; (80078c4 <_strtod_l+0xbec>)
 8007662:	431a      	orrs	r2, r3
 8007664:	0017      	movs	r7, r2
 8007666:	e7c9      	b.n	80075fc <_strtod_l+0x924>
 8007668:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800766a:	4233      	tst	r3, r6
 800766c:	d0c6      	beq.n	80075fc <_strtod_l+0x924>
 800766e:	e7e1      	b.n	8007634 <_strtod_l+0x95c>
 8007670:	f7ff fb1a 	bl	8006ca8 <sulp>
 8007674:	0002      	movs	r2, r0
 8007676:	000b      	movs	r3, r1
 8007678:	9812      	ldr	r0, [sp, #72]	; 0x48
 800767a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800767c:	f7fa fb18 	bl	8001cb0 <__aeabi_dsub>
 8007680:	2200      	movs	r2, #0
 8007682:	2300      	movs	r3, #0
 8007684:	0006      	movs	r6, r0
 8007686:	000f      	movs	r7, r1
 8007688:	f7f8 fede 	bl	8000448 <__aeabi_dcmpeq>
 800768c:	2800      	cmp	r0, #0
 800768e:	d0b5      	beq.n	80075fc <_strtod_l+0x924>
 8007690:	e5ff      	b.n	8007292 <_strtod_l+0x5ba>
 8007692:	9907      	ldr	r1, [sp, #28]
 8007694:	9806      	ldr	r0, [sp, #24]
 8007696:	f001 faa7 	bl	8008be8 <__ratio>
 800769a:	2380      	movs	r3, #128	; 0x80
 800769c:	2200      	movs	r2, #0
 800769e:	05db      	lsls	r3, r3, #23
 80076a0:	0004      	movs	r4, r0
 80076a2:	000d      	movs	r5, r1
 80076a4:	f7f8 fee0 	bl	8000468 <__aeabi_dcmple>
 80076a8:	2800      	cmp	r0, #0
 80076aa:	d075      	beq.n	8007798 <_strtod_l+0xac0>
 80076ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d047      	beq.n	8007742 <_strtod_l+0xa6a>
 80076b2:	2300      	movs	r3, #0
 80076b4:	4c84      	ldr	r4, [pc, #528]	; (80078c8 <_strtod_l+0xbf0>)
 80076b6:	2500      	movs	r5, #0
 80076b8:	9310      	str	r3, [sp, #64]	; 0x40
 80076ba:	9411      	str	r4, [sp, #68]	; 0x44
 80076bc:	4c82      	ldr	r4, [pc, #520]	; (80078c8 <_strtod_l+0xbf0>)
 80076be:	4a83      	ldr	r2, [pc, #524]	; (80078cc <_strtod_l+0xbf4>)
 80076c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80076c2:	4013      	ands	r3, r2
 80076c4:	9314      	str	r3, [sp, #80]	; 0x50
 80076c6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80076c8:	4b81      	ldr	r3, [pc, #516]	; (80078d0 <_strtod_l+0xbf8>)
 80076ca:	429a      	cmp	r2, r3
 80076cc:	d000      	beq.n	80076d0 <_strtod_l+0x9f8>
 80076ce:	e0ac      	b.n	800782a <_strtod_l+0xb52>
 80076d0:	4a80      	ldr	r2, [pc, #512]	; (80078d4 <_strtod_l+0xbfc>)
 80076d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80076d4:	4694      	mov	ip, r2
 80076d6:	4463      	add	r3, ip
 80076d8:	001f      	movs	r7, r3
 80076da:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80076dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80076de:	0030      	movs	r0, r6
 80076e0:	0039      	movs	r1, r7
 80076e2:	920c      	str	r2, [sp, #48]	; 0x30
 80076e4:	930d      	str	r3, [sp, #52]	; 0x34
 80076e6:	f001 f9a7 	bl	8008a38 <__ulp>
 80076ea:	0002      	movs	r2, r0
 80076ec:	000b      	movs	r3, r1
 80076ee:	980c      	ldr	r0, [sp, #48]	; 0x30
 80076f0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80076f2:	f7fa f871 	bl	80017d8 <__aeabi_dmul>
 80076f6:	0032      	movs	r2, r6
 80076f8:	003b      	movs	r3, r7
 80076fa:	f7f9 f92f 	bl	800095c <__aeabi_dadd>
 80076fe:	4a73      	ldr	r2, [pc, #460]	; (80078cc <_strtod_l+0xbf4>)
 8007700:	4b75      	ldr	r3, [pc, #468]	; (80078d8 <_strtod_l+0xc00>)
 8007702:	0006      	movs	r6, r0
 8007704:	400a      	ands	r2, r1
 8007706:	429a      	cmp	r2, r3
 8007708:	d95e      	bls.n	80077c8 <_strtod_l+0xaf0>
 800770a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800770c:	4b73      	ldr	r3, [pc, #460]	; (80078dc <_strtod_l+0xc04>)
 800770e:	429a      	cmp	r2, r3
 8007710:	d103      	bne.n	800771a <_strtod_l+0xa42>
 8007712:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007714:	3301      	adds	r3, #1
 8007716:	d100      	bne.n	800771a <_strtod_l+0xa42>
 8007718:	e548      	b.n	80071ac <_strtod_l+0x4d4>
 800771a:	2601      	movs	r6, #1
 800771c:	4f6f      	ldr	r7, [pc, #444]	; (80078dc <_strtod_l+0xc04>)
 800771e:	4276      	negs	r6, r6
 8007720:	9920      	ldr	r1, [sp, #128]	; 0x80
 8007722:	9805      	ldr	r0, [sp, #20]
 8007724:	f000 fe48 	bl	80083b8 <_Bfree>
 8007728:	9909      	ldr	r1, [sp, #36]	; 0x24
 800772a:	9805      	ldr	r0, [sp, #20]
 800772c:	f000 fe44 	bl	80083b8 <_Bfree>
 8007730:	9907      	ldr	r1, [sp, #28]
 8007732:	9805      	ldr	r0, [sp, #20]
 8007734:	f000 fe40 	bl	80083b8 <_Bfree>
 8007738:	9906      	ldr	r1, [sp, #24]
 800773a:	9805      	ldr	r0, [sp, #20]
 800773c:	f000 fe3c 	bl	80083b8 <_Bfree>
 8007740:	e61d      	b.n	800737e <_strtod_l+0x6a6>
 8007742:	2e00      	cmp	r6, #0
 8007744:	d11c      	bne.n	8007780 <_strtod_l+0xaa8>
 8007746:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007748:	031b      	lsls	r3, r3, #12
 800774a:	d11f      	bne.n	800778c <_strtod_l+0xab4>
 800774c:	2200      	movs	r2, #0
 800774e:	0020      	movs	r0, r4
 8007750:	0029      	movs	r1, r5
 8007752:	4b5d      	ldr	r3, [pc, #372]	; (80078c8 <_strtod_l+0xbf0>)
 8007754:	f7f8 fe7e 	bl	8000454 <__aeabi_dcmplt>
 8007758:	2800      	cmp	r0, #0
 800775a:	d11a      	bne.n	8007792 <_strtod_l+0xaba>
 800775c:	0020      	movs	r0, r4
 800775e:	0029      	movs	r1, r5
 8007760:	2200      	movs	r2, #0
 8007762:	4b5f      	ldr	r3, [pc, #380]	; (80078e0 <_strtod_l+0xc08>)
 8007764:	f7fa f838 	bl	80017d8 <__aeabi_dmul>
 8007768:	0005      	movs	r5, r0
 800776a:	000c      	movs	r4, r1
 800776c:	2380      	movs	r3, #128	; 0x80
 800776e:	061b      	lsls	r3, r3, #24
 8007770:	18e3      	adds	r3, r4, r3
 8007772:	951c      	str	r5, [sp, #112]	; 0x70
 8007774:	931d      	str	r3, [sp, #116]	; 0x74
 8007776:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007778:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800777a:	9210      	str	r2, [sp, #64]	; 0x40
 800777c:	9311      	str	r3, [sp, #68]	; 0x44
 800777e:	e79e      	b.n	80076be <_strtod_l+0x9e6>
 8007780:	2e01      	cmp	r6, #1
 8007782:	d103      	bne.n	800778c <_strtod_l+0xab4>
 8007784:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007786:	2b00      	cmp	r3, #0
 8007788:	d100      	bne.n	800778c <_strtod_l+0xab4>
 800778a:	e582      	b.n	8007292 <_strtod_l+0x5ba>
 800778c:	2300      	movs	r3, #0
 800778e:	4c55      	ldr	r4, [pc, #340]	; (80078e4 <_strtod_l+0xc0c>)
 8007790:	e791      	b.n	80076b6 <_strtod_l+0x9de>
 8007792:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007794:	4c52      	ldr	r4, [pc, #328]	; (80078e0 <_strtod_l+0xc08>)
 8007796:	e7e9      	b.n	800776c <_strtod_l+0xa94>
 8007798:	2200      	movs	r2, #0
 800779a:	0020      	movs	r0, r4
 800779c:	0029      	movs	r1, r5
 800779e:	4b50      	ldr	r3, [pc, #320]	; (80078e0 <_strtod_l+0xc08>)
 80077a0:	f7fa f81a 	bl	80017d8 <__aeabi_dmul>
 80077a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80077a6:	0005      	movs	r5, r0
 80077a8:	000b      	movs	r3, r1
 80077aa:	000c      	movs	r4, r1
 80077ac:	2a00      	cmp	r2, #0
 80077ae:	d107      	bne.n	80077c0 <_strtod_l+0xae8>
 80077b0:	2280      	movs	r2, #128	; 0x80
 80077b2:	0612      	lsls	r2, r2, #24
 80077b4:	188b      	adds	r3, r1, r2
 80077b6:	9016      	str	r0, [sp, #88]	; 0x58
 80077b8:	9317      	str	r3, [sp, #92]	; 0x5c
 80077ba:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80077bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80077be:	e7dc      	b.n	800777a <_strtod_l+0xaa2>
 80077c0:	0002      	movs	r2, r0
 80077c2:	9216      	str	r2, [sp, #88]	; 0x58
 80077c4:	9317      	str	r3, [sp, #92]	; 0x5c
 80077c6:	e7f8      	b.n	80077ba <_strtod_l+0xae2>
 80077c8:	23d4      	movs	r3, #212	; 0xd4
 80077ca:	049b      	lsls	r3, r3, #18
 80077cc:	18cf      	adds	r7, r1, r3
 80077ce:	9b08      	ldr	r3, [sp, #32]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d1a5      	bne.n	8007720 <_strtod_l+0xa48>
 80077d4:	4b3d      	ldr	r3, [pc, #244]	; (80078cc <_strtod_l+0xbf4>)
 80077d6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80077d8:	403b      	ands	r3, r7
 80077da:	429a      	cmp	r2, r3
 80077dc:	d1a0      	bne.n	8007720 <_strtod_l+0xa48>
 80077de:	0028      	movs	r0, r5
 80077e0:	0021      	movs	r1, r4
 80077e2:	f7f8 fed7 	bl	8000594 <__aeabi_d2lz>
 80077e6:	f7f8 ff11 	bl	800060c <__aeabi_l2d>
 80077ea:	0002      	movs	r2, r0
 80077ec:	000b      	movs	r3, r1
 80077ee:	0028      	movs	r0, r5
 80077f0:	0021      	movs	r1, r4
 80077f2:	f7fa fa5d 	bl	8001cb0 <__aeabi_dsub>
 80077f6:	033b      	lsls	r3, r7, #12
 80077f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80077fa:	0b1b      	lsrs	r3, r3, #12
 80077fc:	4333      	orrs	r3, r6
 80077fe:	4313      	orrs	r3, r2
 8007800:	0004      	movs	r4, r0
 8007802:	000d      	movs	r5, r1
 8007804:	4a38      	ldr	r2, [pc, #224]	; (80078e8 <_strtod_l+0xc10>)
 8007806:	2b00      	cmp	r3, #0
 8007808:	d055      	beq.n	80078b6 <_strtod_l+0xbde>
 800780a:	4b38      	ldr	r3, [pc, #224]	; (80078ec <_strtod_l+0xc14>)
 800780c:	f7f8 fe22 	bl	8000454 <__aeabi_dcmplt>
 8007810:	2800      	cmp	r0, #0
 8007812:	d000      	beq.n	8007816 <_strtod_l+0xb3e>
 8007814:	e4d3      	b.n	80071be <_strtod_l+0x4e6>
 8007816:	0020      	movs	r0, r4
 8007818:	0029      	movs	r1, r5
 800781a:	4a35      	ldr	r2, [pc, #212]	; (80078f0 <_strtod_l+0xc18>)
 800781c:	4b30      	ldr	r3, [pc, #192]	; (80078e0 <_strtod_l+0xc08>)
 800781e:	f7f8 fe2d 	bl	800047c <__aeabi_dcmpgt>
 8007822:	2800      	cmp	r0, #0
 8007824:	d100      	bne.n	8007828 <_strtod_l+0xb50>
 8007826:	e77b      	b.n	8007720 <_strtod_l+0xa48>
 8007828:	e4c9      	b.n	80071be <_strtod_l+0x4e6>
 800782a:	9b08      	ldr	r3, [sp, #32]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d02b      	beq.n	8007888 <_strtod_l+0xbb0>
 8007830:	23d4      	movs	r3, #212	; 0xd4
 8007832:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007834:	04db      	lsls	r3, r3, #19
 8007836:	429a      	cmp	r2, r3
 8007838:	d826      	bhi.n	8007888 <_strtod_l+0xbb0>
 800783a:	0028      	movs	r0, r5
 800783c:	0021      	movs	r1, r4
 800783e:	4a2d      	ldr	r2, [pc, #180]	; (80078f4 <_strtod_l+0xc1c>)
 8007840:	4b2d      	ldr	r3, [pc, #180]	; (80078f8 <_strtod_l+0xc20>)
 8007842:	f7f8 fe11 	bl	8000468 <__aeabi_dcmple>
 8007846:	2800      	cmp	r0, #0
 8007848:	d017      	beq.n	800787a <_strtod_l+0xba2>
 800784a:	0028      	movs	r0, r5
 800784c:	0021      	movs	r1, r4
 800784e:	f7f8 fe83 	bl	8000558 <__aeabi_d2uiz>
 8007852:	2800      	cmp	r0, #0
 8007854:	d100      	bne.n	8007858 <_strtod_l+0xb80>
 8007856:	3001      	adds	r0, #1
 8007858:	f7fa fe40 	bl	80024dc <__aeabi_ui2d>
 800785c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800785e:	0005      	movs	r5, r0
 8007860:	000b      	movs	r3, r1
 8007862:	000c      	movs	r4, r1
 8007864:	2a00      	cmp	r2, #0
 8007866:	d122      	bne.n	80078ae <_strtod_l+0xbd6>
 8007868:	2280      	movs	r2, #128	; 0x80
 800786a:	0612      	lsls	r2, r2, #24
 800786c:	188b      	adds	r3, r1, r2
 800786e:	9018      	str	r0, [sp, #96]	; 0x60
 8007870:	9319      	str	r3, [sp, #100]	; 0x64
 8007872:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007874:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007876:	9210      	str	r2, [sp, #64]	; 0x40
 8007878:	9311      	str	r3, [sp, #68]	; 0x44
 800787a:	22d6      	movs	r2, #214	; 0xd6
 800787c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800787e:	04d2      	lsls	r2, r2, #19
 8007880:	189b      	adds	r3, r3, r2
 8007882:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007884:	1a9b      	subs	r3, r3, r2
 8007886:	9311      	str	r3, [sp, #68]	; 0x44
 8007888:	9812      	ldr	r0, [sp, #72]	; 0x48
 800788a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800788c:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800788e:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8007890:	f001 f8d2 	bl	8008a38 <__ulp>
 8007894:	0002      	movs	r2, r0
 8007896:	000b      	movs	r3, r1
 8007898:	0030      	movs	r0, r6
 800789a:	0039      	movs	r1, r7
 800789c:	f7f9 ff9c 	bl	80017d8 <__aeabi_dmul>
 80078a0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80078a2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80078a4:	f7f9 f85a 	bl	800095c <__aeabi_dadd>
 80078a8:	0006      	movs	r6, r0
 80078aa:	000f      	movs	r7, r1
 80078ac:	e78f      	b.n	80077ce <_strtod_l+0xaf6>
 80078ae:	0002      	movs	r2, r0
 80078b0:	9218      	str	r2, [sp, #96]	; 0x60
 80078b2:	9319      	str	r3, [sp, #100]	; 0x64
 80078b4:	e7dd      	b.n	8007872 <_strtod_l+0xb9a>
 80078b6:	4b11      	ldr	r3, [pc, #68]	; (80078fc <_strtod_l+0xc24>)
 80078b8:	f7f8 fdcc 	bl	8000454 <__aeabi_dcmplt>
 80078bc:	e7b1      	b.n	8007822 <_strtod_l+0xb4a>
 80078be:	46c0      	nop			; (mov r8, r8)
 80078c0:	fff00000 	.word	0xfff00000
 80078c4:	000fffff 	.word	0x000fffff
 80078c8:	3ff00000 	.word	0x3ff00000
 80078cc:	7ff00000 	.word	0x7ff00000
 80078d0:	7fe00000 	.word	0x7fe00000
 80078d4:	fcb00000 	.word	0xfcb00000
 80078d8:	7c9fffff 	.word	0x7c9fffff
 80078dc:	7fefffff 	.word	0x7fefffff
 80078e0:	3fe00000 	.word	0x3fe00000
 80078e4:	bff00000 	.word	0xbff00000
 80078e8:	94a03595 	.word	0x94a03595
 80078ec:	3fdfffff 	.word	0x3fdfffff
 80078f0:	35afe535 	.word	0x35afe535
 80078f4:	ffc00000 	.word	0xffc00000
 80078f8:	41dfffff 	.word	0x41dfffff
 80078fc:	3fcfffff 	.word	0x3fcfffff

08007900 <strtof>:
 8007900:	000a      	movs	r2, r1
 8007902:	0001      	movs	r1, r0
 8007904:	4824      	ldr	r0, [pc, #144]	; (8007998 <strtof+0x98>)
 8007906:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007908:	6800      	ldr	r0, [r0, #0]
 800790a:	4b24      	ldr	r3, [pc, #144]	; (800799c <strtof+0x9c>)
 800790c:	f7ff f9e4 	bl	8006cd8 <_strtod_l>
 8007910:	0006      	movs	r6, r0
 8007912:	000c      	movs	r4, r1
 8007914:	0002      	movs	r2, r0
 8007916:	000b      	movs	r3, r1
 8007918:	0030      	movs	r0, r6
 800791a:	0021      	movs	r1, r4
 800791c:	f7fa fd5a 	bl	80023d4 <__aeabi_dcmpun>
 8007920:	2800      	cmp	r0, #0
 8007922:	d00d      	beq.n	8007940 <strtof+0x40>
 8007924:	481e      	ldr	r0, [pc, #120]	; (80079a0 <strtof+0xa0>)
 8007926:	2c00      	cmp	r4, #0
 8007928:	da06      	bge.n	8007938 <strtof+0x38>
 800792a:	f001 fe43 	bl	80095b4 <nanf>
 800792e:	2380      	movs	r3, #128	; 0x80
 8007930:	061b      	lsls	r3, r3, #24
 8007932:	18c5      	adds	r5, r0, r3
 8007934:	1c28      	adds	r0, r5, #0
 8007936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007938:	f001 fe3c 	bl	80095b4 <nanf>
 800793c:	1c05      	adds	r5, r0, #0
 800793e:	e7f9      	b.n	8007934 <strtof+0x34>
 8007940:	0021      	movs	r1, r4
 8007942:	0030      	movs	r0, r6
 8007944:	f7fa fdf0 	bl	8002528 <__aeabi_d2f>
 8007948:	0047      	lsls	r7, r0, #1
 800794a:	087f      	lsrs	r7, r7, #1
 800794c:	1c05      	adds	r5, r0, #0
 800794e:	4915      	ldr	r1, [pc, #84]	; (80079a4 <strtof+0xa4>)
 8007950:	1c38      	adds	r0, r7, #0
 8007952:	f7f8 ffed 	bl	8000930 <__aeabi_fcmpun>
 8007956:	2800      	cmp	r0, #0
 8007958:	d1ec      	bne.n	8007934 <strtof+0x34>
 800795a:	4912      	ldr	r1, [pc, #72]	; (80079a4 <strtof+0xa4>)
 800795c:	1c38      	adds	r0, r7, #0
 800795e:	f7f8 fdbd 	bl	80004dc <__aeabi_fcmple>
 8007962:	2800      	cmp	r0, #0
 8007964:	d1e6      	bne.n	8007934 <strtof+0x34>
 8007966:	2201      	movs	r2, #1
 8007968:	0064      	lsls	r4, r4, #1
 800796a:	0864      	lsrs	r4, r4, #1
 800796c:	0030      	movs	r0, r6
 800796e:	0021      	movs	r1, r4
 8007970:	4b0d      	ldr	r3, [pc, #52]	; (80079a8 <strtof+0xa8>)
 8007972:	4252      	negs	r2, r2
 8007974:	f7fa fd2e 	bl	80023d4 <__aeabi_dcmpun>
 8007978:	2800      	cmp	r0, #0
 800797a:	d108      	bne.n	800798e <strtof+0x8e>
 800797c:	2201      	movs	r2, #1
 800797e:	0030      	movs	r0, r6
 8007980:	0021      	movs	r1, r4
 8007982:	4b09      	ldr	r3, [pc, #36]	; (80079a8 <strtof+0xa8>)
 8007984:	4252      	negs	r2, r2
 8007986:	f7f8 fd6f 	bl	8000468 <__aeabi_dcmple>
 800798a:	2800      	cmp	r0, #0
 800798c:	d0d2      	beq.n	8007934 <strtof+0x34>
 800798e:	2222      	movs	r2, #34	; 0x22
 8007990:	4b01      	ldr	r3, [pc, #4]	; (8007998 <strtof+0x98>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	601a      	str	r2, [r3, #0]
 8007996:	e7cd      	b.n	8007934 <strtof+0x34>
 8007998:	2000007c 	.word	0x2000007c
 800799c:	200000e4 	.word	0x200000e4
 80079a0:	0800a217 	.word	0x0800a217
 80079a4:	7f7fffff 	.word	0x7f7fffff
 80079a8:	7fefffff 	.word	0x7fefffff

080079ac <strtok>:
 80079ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ae:	4b16      	ldr	r3, [pc, #88]	; (8007a08 <strtok+0x5c>)
 80079b0:	0005      	movs	r5, r0
 80079b2:	681f      	ldr	r7, [r3, #0]
 80079b4:	000e      	movs	r6, r1
 80079b6:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 80079b8:	2c00      	cmp	r4, #0
 80079ba:	d11d      	bne.n	80079f8 <strtok+0x4c>
 80079bc:	2050      	movs	r0, #80	; 0x50
 80079be:	f7ff f827 	bl	8006a10 <malloc>
 80079c2:	1e02      	subs	r2, r0, #0
 80079c4:	65b8      	str	r0, [r7, #88]	; 0x58
 80079c6:	d104      	bne.n	80079d2 <strtok+0x26>
 80079c8:	2157      	movs	r1, #87	; 0x57
 80079ca:	4b10      	ldr	r3, [pc, #64]	; (8007a0c <strtok+0x60>)
 80079cc:	4810      	ldr	r0, [pc, #64]	; (8007a10 <strtok+0x64>)
 80079ce:	f000 f8eb 	bl	8007ba8 <__assert_func>
 80079d2:	6004      	str	r4, [r0, #0]
 80079d4:	6044      	str	r4, [r0, #4]
 80079d6:	6084      	str	r4, [r0, #8]
 80079d8:	60c4      	str	r4, [r0, #12]
 80079da:	6104      	str	r4, [r0, #16]
 80079dc:	6144      	str	r4, [r0, #20]
 80079de:	6184      	str	r4, [r0, #24]
 80079e0:	6284      	str	r4, [r0, #40]	; 0x28
 80079e2:	62c4      	str	r4, [r0, #44]	; 0x2c
 80079e4:	6304      	str	r4, [r0, #48]	; 0x30
 80079e6:	6344      	str	r4, [r0, #52]	; 0x34
 80079e8:	6384      	str	r4, [r0, #56]	; 0x38
 80079ea:	63c4      	str	r4, [r0, #60]	; 0x3c
 80079ec:	6404      	str	r4, [r0, #64]	; 0x40
 80079ee:	6444      	str	r4, [r0, #68]	; 0x44
 80079f0:	6484      	str	r4, [r0, #72]	; 0x48
 80079f2:	64c4      	str	r4, [r0, #76]	; 0x4c
 80079f4:	7704      	strb	r4, [r0, #28]
 80079f6:	6244      	str	r4, [r0, #36]	; 0x24
 80079f8:	0031      	movs	r1, r6
 80079fa:	0028      	movs	r0, r5
 80079fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80079fe:	2301      	movs	r3, #1
 8007a00:	f000 f808 	bl	8007a14 <__strtok_r>
 8007a04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a06:	46c0      	nop			; (mov r8, r8)
 8007a08:	2000007c 	.word	0x2000007c
 8007a0c:	0800a168 	.word	0x0800a168
 8007a10:	0800a17f 	.word	0x0800a17f

08007a14 <__strtok_r>:
 8007a14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a16:	2800      	cmp	r0, #0
 8007a18:	d102      	bne.n	8007a20 <__strtok_r+0xc>
 8007a1a:	6810      	ldr	r0, [r2, #0]
 8007a1c:	2800      	cmp	r0, #0
 8007a1e:	d013      	beq.n	8007a48 <__strtok_r+0x34>
 8007a20:	0004      	movs	r4, r0
 8007a22:	0020      	movs	r0, r4
 8007a24:	000e      	movs	r6, r1
 8007a26:	7805      	ldrb	r5, [r0, #0]
 8007a28:	3401      	adds	r4, #1
 8007a2a:	7837      	ldrb	r7, [r6, #0]
 8007a2c:	2f00      	cmp	r7, #0
 8007a2e:	d104      	bne.n	8007a3a <__strtok_r+0x26>
 8007a30:	2d00      	cmp	r5, #0
 8007a32:	d10f      	bne.n	8007a54 <__strtok_r+0x40>
 8007a34:	0028      	movs	r0, r5
 8007a36:	6015      	str	r5, [r2, #0]
 8007a38:	e006      	b.n	8007a48 <__strtok_r+0x34>
 8007a3a:	3601      	adds	r6, #1
 8007a3c:	42bd      	cmp	r5, r7
 8007a3e:	d1f4      	bne.n	8007a2a <__strtok_r+0x16>
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d1ee      	bne.n	8007a22 <__strtok_r+0xe>
 8007a44:	6014      	str	r4, [r2, #0]
 8007a46:	7003      	strb	r3, [r0, #0]
 8007a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a4a:	002f      	movs	r7, r5
 8007a4c:	e00f      	b.n	8007a6e <__strtok_r+0x5a>
 8007a4e:	3301      	adds	r3, #1
 8007a50:	2e00      	cmp	r6, #0
 8007a52:	d104      	bne.n	8007a5e <__strtok_r+0x4a>
 8007a54:	0023      	movs	r3, r4
 8007a56:	3401      	adds	r4, #1
 8007a58:	781d      	ldrb	r5, [r3, #0]
 8007a5a:	0027      	movs	r7, r4
 8007a5c:	000b      	movs	r3, r1
 8007a5e:	781e      	ldrb	r6, [r3, #0]
 8007a60:	42b5      	cmp	r5, r6
 8007a62:	d1f4      	bne.n	8007a4e <__strtok_r+0x3a>
 8007a64:	2d00      	cmp	r5, #0
 8007a66:	d0f0      	beq.n	8007a4a <__strtok_r+0x36>
 8007a68:	2300      	movs	r3, #0
 8007a6a:	3c01      	subs	r4, #1
 8007a6c:	7023      	strb	r3, [r4, #0]
 8007a6e:	6017      	str	r7, [r2, #0]
 8007a70:	e7ea      	b.n	8007a48 <__strtok_r+0x34>
	...

08007a74 <_strtol_l.constprop.0>:
 8007a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a76:	b087      	sub	sp, #28
 8007a78:	001e      	movs	r6, r3
 8007a7a:	9005      	str	r0, [sp, #20]
 8007a7c:	9101      	str	r1, [sp, #4]
 8007a7e:	9202      	str	r2, [sp, #8]
 8007a80:	2b01      	cmp	r3, #1
 8007a82:	d045      	beq.n	8007b10 <_strtol_l.constprop.0+0x9c>
 8007a84:	000b      	movs	r3, r1
 8007a86:	2e24      	cmp	r6, #36	; 0x24
 8007a88:	d842      	bhi.n	8007b10 <_strtol_l.constprop.0+0x9c>
 8007a8a:	4a3f      	ldr	r2, [pc, #252]	; (8007b88 <_strtol_l.constprop.0+0x114>)
 8007a8c:	2108      	movs	r1, #8
 8007a8e:	4694      	mov	ip, r2
 8007a90:	001a      	movs	r2, r3
 8007a92:	4660      	mov	r0, ip
 8007a94:	7814      	ldrb	r4, [r2, #0]
 8007a96:	3301      	adds	r3, #1
 8007a98:	5d00      	ldrb	r0, [r0, r4]
 8007a9a:	001d      	movs	r5, r3
 8007a9c:	0007      	movs	r7, r0
 8007a9e:	400f      	ands	r7, r1
 8007aa0:	4208      	tst	r0, r1
 8007aa2:	d1f5      	bne.n	8007a90 <_strtol_l.constprop.0+0x1c>
 8007aa4:	2c2d      	cmp	r4, #45	; 0x2d
 8007aa6:	d13a      	bne.n	8007b1e <_strtol_l.constprop.0+0xaa>
 8007aa8:	2701      	movs	r7, #1
 8007aaa:	781c      	ldrb	r4, [r3, #0]
 8007aac:	1c95      	adds	r5, r2, #2
 8007aae:	2e00      	cmp	r6, #0
 8007ab0:	d065      	beq.n	8007b7e <_strtol_l.constprop.0+0x10a>
 8007ab2:	2e10      	cmp	r6, #16
 8007ab4:	d109      	bne.n	8007aca <_strtol_l.constprop.0+0x56>
 8007ab6:	2c30      	cmp	r4, #48	; 0x30
 8007ab8:	d107      	bne.n	8007aca <_strtol_l.constprop.0+0x56>
 8007aba:	2220      	movs	r2, #32
 8007abc:	782b      	ldrb	r3, [r5, #0]
 8007abe:	4393      	bics	r3, r2
 8007ac0:	2b58      	cmp	r3, #88	; 0x58
 8007ac2:	d157      	bne.n	8007b74 <_strtol_l.constprop.0+0x100>
 8007ac4:	2610      	movs	r6, #16
 8007ac6:	786c      	ldrb	r4, [r5, #1]
 8007ac8:	3502      	adds	r5, #2
 8007aca:	4b30      	ldr	r3, [pc, #192]	; (8007b8c <_strtol_l.constprop.0+0x118>)
 8007acc:	0031      	movs	r1, r6
 8007ace:	18fb      	adds	r3, r7, r3
 8007ad0:	0018      	movs	r0, r3
 8007ad2:	9303      	str	r3, [sp, #12]
 8007ad4:	f7f8 fbb8 	bl	8000248 <__aeabi_uidivmod>
 8007ad8:	2300      	movs	r3, #0
 8007ada:	2201      	movs	r2, #1
 8007adc:	4684      	mov	ip, r0
 8007ade:	0018      	movs	r0, r3
 8007ae0:	9104      	str	r1, [sp, #16]
 8007ae2:	4252      	negs	r2, r2
 8007ae4:	0021      	movs	r1, r4
 8007ae6:	3930      	subs	r1, #48	; 0x30
 8007ae8:	2909      	cmp	r1, #9
 8007aea:	d81d      	bhi.n	8007b28 <_strtol_l.constprop.0+0xb4>
 8007aec:	000c      	movs	r4, r1
 8007aee:	42a6      	cmp	r6, r4
 8007af0:	dd28      	ble.n	8007b44 <_strtol_l.constprop.0+0xd0>
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	db24      	blt.n	8007b40 <_strtol_l.constprop.0+0xcc>
 8007af6:	0013      	movs	r3, r2
 8007af8:	4584      	cmp	ip, r0
 8007afa:	d306      	bcc.n	8007b0a <_strtol_l.constprop.0+0x96>
 8007afc:	d102      	bne.n	8007b04 <_strtol_l.constprop.0+0x90>
 8007afe:	9904      	ldr	r1, [sp, #16]
 8007b00:	42a1      	cmp	r1, r4
 8007b02:	db02      	blt.n	8007b0a <_strtol_l.constprop.0+0x96>
 8007b04:	2301      	movs	r3, #1
 8007b06:	4370      	muls	r0, r6
 8007b08:	1820      	adds	r0, r4, r0
 8007b0a:	782c      	ldrb	r4, [r5, #0]
 8007b0c:	3501      	adds	r5, #1
 8007b0e:	e7e9      	b.n	8007ae4 <_strtol_l.constprop.0+0x70>
 8007b10:	f7fe ff54 	bl	80069bc <__errno>
 8007b14:	2316      	movs	r3, #22
 8007b16:	6003      	str	r3, [r0, #0]
 8007b18:	2000      	movs	r0, #0
 8007b1a:	b007      	add	sp, #28
 8007b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b1e:	2c2b      	cmp	r4, #43	; 0x2b
 8007b20:	d1c5      	bne.n	8007aae <_strtol_l.constprop.0+0x3a>
 8007b22:	781c      	ldrb	r4, [r3, #0]
 8007b24:	1c95      	adds	r5, r2, #2
 8007b26:	e7c2      	b.n	8007aae <_strtol_l.constprop.0+0x3a>
 8007b28:	0021      	movs	r1, r4
 8007b2a:	3941      	subs	r1, #65	; 0x41
 8007b2c:	2919      	cmp	r1, #25
 8007b2e:	d801      	bhi.n	8007b34 <_strtol_l.constprop.0+0xc0>
 8007b30:	3c37      	subs	r4, #55	; 0x37
 8007b32:	e7dc      	b.n	8007aee <_strtol_l.constprop.0+0x7a>
 8007b34:	0021      	movs	r1, r4
 8007b36:	3961      	subs	r1, #97	; 0x61
 8007b38:	2919      	cmp	r1, #25
 8007b3a:	d803      	bhi.n	8007b44 <_strtol_l.constprop.0+0xd0>
 8007b3c:	3c57      	subs	r4, #87	; 0x57
 8007b3e:	e7d6      	b.n	8007aee <_strtol_l.constprop.0+0x7a>
 8007b40:	0013      	movs	r3, r2
 8007b42:	e7e2      	b.n	8007b0a <_strtol_l.constprop.0+0x96>
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	da09      	bge.n	8007b5c <_strtol_l.constprop.0+0xe8>
 8007b48:	2322      	movs	r3, #34	; 0x22
 8007b4a:	9a05      	ldr	r2, [sp, #20]
 8007b4c:	9803      	ldr	r0, [sp, #12]
 8007b4e:	6013      	str	r3, [r2, #0]
 8007b50:	9b02      	ldr	r3, [sp, #8]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d0e1      	beq.n	8007b1a <_strtol_l.constprop.0+0xa6>
 8007b56:	1e6b      	subs	r3, r5, #1
 8007b58:	9301      	str	r3, [sp, #4]
 8007b5a:	e007      	b.n	8007b6c <_strtol_l.constprop.0+0xf8>
 8007b5c:	2f00      	cmp	r7, #0
 8007b5e:	d000      	beq.n	8007b62 <_strtol_l.constprop.0+0xee>
 8007b60:	4240      	negs	r0, r0
 8007b62:	9a02      	ldr	r2, [sp, #8]
 8007b64:	2a00      	cmp	r2, #0
 8007b66:	d0d8      	beq.n	8007b1a <_strtol_l.constprop.0+0xa6>
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d1f4      	bne.n	8007b56 <_strtol_l.constprop.0+0xe2>
 8007b6c:	9b02      	ldr	r3, [sp, #8]
 8007b6e:	9a01      	ldr	r2, [sp, #4]
 8007b70:	601a      	str	r2, [r3, #0]
 8007b72:	e7d2      	b.n	8007b1a <_strtol_l.constprop.0+0xa6>
 8007b74:	2430      	movs	r4, #48	; 0x30
 8007b76:	2e00      	cmp	r6, #0
 8007b78:	d1a7      	bne.n	8007aca <_strtol_l.constprop.0+0x56>
 8007b7a:	3608      	adds	r6, #8
 8007b7c:	e7a5      	b.n	8007aca <_strtol_l.constprop.0+0x56>
 8007b7e:	2c30      	cmp	r4, #48	; 0x30
 8007b80:	d09b      	beq.n	8007aba <_strtol_l.constprop.0+0x46>
 8007b82:	260a      	movs	r6, #10
 8007b84:	e7a1      	b.n	8007aca <_strtol_l.constprop.0+0x56>
 8007b86:	46c0      	nop			; (mov r8, r8)
 8007b88:	0800a219 	.word	0x0800a219
 8007b8c:	7fffffff 	.word	0x7fffffff

08007b90 <strtol>:
 8007b90:	b510      	push	{r4, lr}
 8007b92:	0013      	movs	r3, r2
 8007b94:	000a      	movs	r2, r1
 8007b96:	0001      	movs	r1, r0
 8007b98:	4802      	ldr	r0, [pc, #8]	; (8007ba4 <strtol+0x14>)
 8007b9a:	6800      	ldr	r0, [r0, #0]
 8007b9c:	f7ff ff6a 	bl	8007a74 <_strtol_l.constprop.0>
 8007ba0:	bd10      	pop	{r4, pc}
 8007ba2:	46c0      	nop			; (mov r8, r8)
 8007ba4:	2000007c 	.word	0x2000007c

08007ba8 <__assert_func>:
 8007ba8:	b530      	push	{r4, r5, lr}
 8007baa:	0014      	movs	r4, r2
 8007bac:	001a      	movs	r2, r3
 8007bae:	4b09      	ldr	r3, [pc, #36]	; (8007bd4 <__assert_func+0x2c>)
 8007bb0:	0005      	movs	r5, r0
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	b085      	sub	sp, #20
 8007bb6:	68d8      	ldr	r0, [r3, #12]
 8007bb8:	4b07      	ldr	r3, [pc, #28]	; (8007bd8 <__assert_func+0x30>)
 8007bba:	2c00      	cmp	r4, #0
 8007bbc:	d101      	bne.n	8007bc2 <__assert_func+0x1a>
 8007bbe:	4b07      	ldr	r3, [pc, #28]	; (8007bdc <__assert_func+0x34>)
 8007bc0:	001c      	movs	r4, r3
 8007bc2:	9301      	str	r3, [sp, #4]
 8007bc4:	9100      	str	r1, [sp, #0]
 8007bc6:	002b      	movs	r3, r5
 8007bc8:	4905      	ldr	r1, [pc, #20]	; (8007be0 <__assert_func+0x38>)
 8007bca:	9402      	str	r4, [sp, #8]
 8007bcc:	f000 f80a 	bl	8007be4 <fiprintf>
 8007bd0:	f001 fdd0 	bl	8009774 <abort>
 8007bd4:	2000007c 	.word	0x2000007c
 8007bd8:	0800a1dc 	.word	0x0800a1dc
 8007bdc:	0800a217 	.word	0x0800a217
 8007be0:	0800a1e9 	.word	0x0800a1e9

08007be4 <fiprintf>:
 8007be4:	b40e      	push	{r1, r2, r3}
 8007be6:	b503      	push	{r0, r1, lr}
 8007be8:	0001      	movs	r1, r0
 8007bea:	ab03      	add	r3, sp, #12
 8007bec:	4804      	ldr	r0, [pc, #16]	; (8007c00 <fiprintf+0x1c>)
 8007bee:	cb04      	ldmia	r3!, {r2}
 8007bf0:	6800      	ldr	r0, [r0, #0]
 8007bf2:	9301      	str	r3, [sp, #4]
 8007bf4:	f001 fa1c 	bl	8009030 <_vfiprintf_r>
 8007bf8:	b002      	add	sp, #8
 8007bfa:	bc08      	pop	{r3}
 8007bfc:	b003      	add	sp, #12
 8007bfe:	4718      	bx	r3
 8007c00:	2000007c 	.word	0x2000007c

08007c04 <rshift>:
 8007c04:	0002      	movs	r2, r0
 8007c06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c08:	6904      	ldr	r4, [r0, #16]
 8007c0a:	3214      	adds	r2, #20
 8007c0c:	0013      	movs	r3, r2
 8007c0e:	b085      	sub	sp, #20
 8007c10:	114f      	asrs	r7, r1, #5
 8007c12:	42bc      	cmp	r4, r7
 8007c14:	dd31      	ble.n	8007c7a <rshift+0x76>
 8007c16:	00bb      	lsls	r3, r7, #2
 8007c18:	18d3      	adds	r3, r2, r3
 8007c1a:	261f      	movs	r6, #31
 8007c1c:	9301      	str	r3, [sp, #4]
 8007c1e:	000b      	movs	r3, r1
 8007c20:	00a5      	lsls	r5, r4, #2
 8007c22:	4033      	ands	r3, r6
 8007c24:	1955      	adds	r5, r2, r5
 8007c26:	9302      	str	r3, [sp, #8]
 8007c28:	4231      	tst	r1, r6
 8007c2a:	d10c      	bne.n	8007c46 <rshift+0x42>
 8007c2c:	0016      	movs	r6, r2
 8007c2e:	9901      	ldr	r1, [sp, #4]
 8007c30:	428d      	cmp	r5, r1
 8007c32:	d838      	bhi.n	8007ca6 <rshift+0xa2>
 8007c34:	9901      	ldr	r1, [sp, #4]
 8007c36:	2300      	movs	r3, #0
 8007c38:	3903      	subs	r1, #3
 8007c3a:	428d      	cmp	r5, r1
 8007c3c:	d301      	bcc.n	8007c42 <rshift+0x3e>
 8007c3e:	1be3      	subs	r3, r4, r7
 8007c40:	009b      	lsls	r3, r3, #2
 8007c42:	18d3      	adds	r3, r2, r3
 8007c44:	e019      	b.n	8007c7a <rshift+0x76>
 8007c46:	2120      	movs	r1, #32
 8007c48:	9b02      	ldr	r3, [sp, #8]
 8007c4a:	9e01      	ldr	r6, [sp, #4]
 8007c4c:	1acb      	subs	r3, r1, r3
 8007c4e:	9303      	str	r3, [sp, #12]
 8007c50:	ce02      	ldmia	r6!, {r1}
 8007c52:	9b02      	ldr	r3, [sp, #8]
 8007c54:	4694      	mov	ip, r2
 8007c56:	40d9      	lsrs	r1, r3
 8007c58:	9100      	str	r1, [sp, #0]
 8007c5a:	42b5      	cmp	r5, r6
 8007c5c:	d816      	bhi.n	8007c8c <rshift+0x88>
 8007c5e:	9e01      	ldr	r6, [sp, #4]
 8007c60:	2300      	movs	r3, #0
 8007c62:	3601      	adds	r6, #1
 8007c64:	42b5      	cmp	r5, r6
 8007c66:	d302      	bcc.n	8007c6e <rshift+0x6a>
 8007c68:	1be3      	subs	r3, r4, r7
 8007c6a:	009b      	lsls	r3, r3, #2
 8007c6c:	3b04      	subs	r3, #4
 8007c6e:	9900      	ldr	r1, [sp, #0]
 8007c70:	18d3      	adds	r3, r2, r3
 8007c72:	6019      	str	r1, [r3, #0]
 8007c74:	2900      	cmp	r1, #0
 8007c76:	d000      	beq.n	8007c7a <rshift+0x76>
 8007c78:	3304      	adds	r3, #4
 8007c7a:	1a99      	subs	r1, r3, r2
 8007c7c:	1089      	asrs	r1, r1, #2
 8007c7e:	6101      	str	r1, [r0, #16]
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d101      	bne.n	8007c88 <rshift+0x84>
 8007c84:	2300      	movs	r3, #0
 8007c86:	6143      	str	r3, [r0, #20]
 8007c88:	b005      	add	sp, #20
 8007c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c8c:	6833      	ldr	r3, [r6, #0]
 8007c8e:	9903      	ldr	r1, [sp, #12]
 8007c90:	408b      	lsls	r3, r1
 8007c92:	9900      	ldr	r1, [sp, #0]
 8007c94:	4319      	orrs	r1, r3
 8007c96:	4663      	mov	r3, ip
 8007c98:	c302      	stmia	r3!, {r1}
 8007c9a:	469c      	mov	ip, r3
 8007c9c:	ce02      	ldmia	r6!, {r1}
 8007c9e:	9b02      	ldr	r3, [sp, #8]
 8007ca0:	40d9      	lsrs	r1, r3
 8007ca2:	9100      	str	r1, [sp, #0]
 8007ca4:	e7d9      	b.n	8007c5a <rshift+0x56>
 8007ca6:	c908      	ldmia	r1!, {r3}
 8007ca8:	c608      	stmia	r6!, {r3}
 8007caa:	e7c1      	b.n	8007c30 <rshift+0x2c>

08007cac <__hexdig_fun>:
 8007cac:	0002      	movs	r2, r0
 8007cae:	3a30      	subs	r2, #48	; 0x30
 8007cb0:	0003      	movs	r3, r0
 8007cb2:	2a09      	cmp	r2, #9
 8007cb4:	d802      	bhi.n	8007cbc <__hexdig_fun+0x10>
 8007cb6:	3b20      	subs	r3, #32
 8007cb8:	b2d8      	uxtb	r0, r3
 8007cba:	4770      	bx	lr
 8007cbc:	0002      	movs	r2, r0
 8007cbe:	3a61      	subs	r2, #97	; 0x61
 8007cc0:	2a05      	cmp	r2, #5
 8007cc2:	d801      	bhi.n	8007cc8 <__hexdig_fun+0x1c>
 8007cc4:	3b47      	subs	r3, #71	; 0x47
 8007cc6:	e7f7      	b.n	8007cb8 <__hexdig_fun+0xc>
 8007cc8:	001a      	movs	r2, r3
 8007cca:	3a41      	subs	r2, #65	; 0x41
 8007ccc:	2000      	movs	r0, #0
 8007cce:	2a05      	cmp	r2, #5
 8007cd0:	d8f3      	bhi.n	8007cba <__hexdig_fun+0xe>
 8007cd2:	3b27      	subs	r3, #39	; 0x27
 8007cd4:	e7f0      	b.n	8007cb8 <__hexdig_fun+0xc>
	...

08007cd8 <__gethex>:
 8007cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cda:	b08d      	sub	sp, #52	; 0x34
 8007cdc:	930a      	str	r3, [sp, #40]	; 0x28
 8007cde:	4bbf      	ldr	r3, [pc, #764]	; (8007fdc <__gethex+0x304>)
 8007ce0:	9005      	str	r0, [sp, #20]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	9109      	str	r1, [sp, #36]	; 0x24
 8007ce6:	0018      	movs	r0, r3
 8007ce8:	9202      	str	r2, [sp, #8]
 8007cea:	9307      	str	r3, [sp, #28]
 8007cec:	f7f8 fa0a 	bl	8000104 <strlen>
 8007cf0:	2202      	movs	r2, #2
 8007cf2:	9b07      	ldr	r3, [sp, #28]
 8007cf4:	4252      	negs	r2, r2
 8007cf6:	181b      	adds	r3, r3, r0
 8007cf8:	3b01      	subs	r3, #1
 8007cfa:	781b      	ldrb	r3, [r3, #0]
 8007cfc:	9003      	str	r0, [sp, #12]
 8007cfe:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d02:	6819      	ldr	r1, [r3, #0]
 8007d04:	1c8b      	adds	r3, r1, #2
 8007d06:	1a52      	subs	r2, r2, r1
 8007d08:	18d1      	adds	r1, r2, r3
 8007d0a:	9301      	str	r3, [sp, #4]
 8007d0c:	9108      	str	r1, [sp, #32]
 8007d0e:	9901      	ldr	r1, [sp, #4]
 8007d10:	3301      	adds	r3, #1
 8007d12:	7808      	ldrb	r0, [r1, #0]
 8007d14:	2830      	cmp	r0, #48	; 0x30
 8007d16:	d0f7      	beq.n	8007d08 <__gethex+0x30>
 8007d18:	f7ff ffc8 	bl	8007cac <__hexdig_fun>
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	001c      	movs	r4, r3
 8007d20:	9304      	str	r3, [sp, #16]
 8007d22:	4298      	cmp	r0, r3
 8007d24:	d11f      	bne.n	8007d66 <__gethex+0x8e>
 8007d26:	9a03      	ldr	r2, [sp, #12]
 8007d28:	9907      	ldr	r1, [sp, #28]
 8007d2a:	9801      	ldr	r0, [sp, #4]
 8007d2c:	f7fe ffaa 	bl	8006c84 <strncmp>
 8007d30:	0007      	movs	r7, r0
 8007d32:	42a0      	cmp	r0, r4
 8007d34:	d000      	beq.n	8007d38 <__gethex+0x60>
 8007d36:	e06b      	b.n	8007e10 <__gethex+0x138>
 8007d38:	9b01      	ldr	r3, [sp, #4]
 8007d3a:	9a03      	ldr	r2, [sp, #12]
 8007d3c:	5c98      	ldrb	r0, [r3, r2]
 8007d3e:	189d      	adds	r5, r3, r2
 8007d40:	f7ff ffb4 	bl	8007cac <__hexdig_fun>
 8007d44:	2301      	movs	r3, #1
 8007d46:	9304      	str	r3, [sp, #16]
 8007d48:	42a0      	cmp	r0, r4
 8007d4a:	d030      	beq.n	8007dae <__gethex+0xd6>
 8007d4c:	9501      	str	r5, [sp, #4]
 8007d4e:	9b01      	ldr	r3, [sp, #4]
 8007d50:	7818      	ldrb	r0, [r3, #0]
 8007d52:	2830      	cmp	r0, #48	; 0x30
 8007d54:	d009      	beq.n	8007d6a <__gethex+0x92>
 8007d56:	f7ff ffa9 	bl	8007cac <__hexdig_fun>
 8007d5a:	4242      	negs	r2, r0
 8007d5c:	4142      	adcs	r2, r0
 8007d5e:	2301      	movs	r3, #1
 8007d60:	002c      	movs	r4, r5
 8007d62:	9204      	str	r2, [sp, #16]
 8007d64:	9308      	str	r3, [sp, #32]
 8007d66:	9d01      	ldr	r5, [sp, #4]
 8007d68:	e004      	b.n	8007d74 <__gethex+0x9c>
 8007d6a:	9b01      	ldr	r3, [sp, #4]
 8007d6c:	3301      	adds	r3, #1
 8007d6e:	9301      	str	r3, [sp, #4]
 8007d70:	e7ed      	b.n	8007d4e <__gethex+0x76>
 8007d72:	3501      	adds	r5, #1
 8007d74:	7828      	ldrb	r0, [r5, #0]
 8007d76:	f7ff ff99 	bl	8007cac <__hexdig_fun>
 8007d7a:	1e07      	subs	r7, r0, #0
 8007d7c:	d1f9      	bne.n	8007d72 <__gethex+0x9a>
 8007d7e:	0028      	movs	r0, r5
 8007d80:	9a03      	ldr	r2, [sp, #12]
 8007d82:	9907      	ldr	r1, [sp, #28]
 8007d84:	f7fe ff7e 	bl	8006c84 <strncmp>
 8007d88:	2800      	cmp	r0, #0
 8007d8a:	d10e      	bne.n	8007daa <__gethex+0xd2>
 8007d8c:	2c00      	cmp	r4, #0
 8007d8e:	d107      	bne.n	8007da0 <__gethex+0xc8>
 8007d90:	9b03      	ldr	r3, [sp, #12]
 8007d92:	18ed      	adds	r5, r5, r3
 8007d94:	002c      	movs	r4, r5
 8007d96:	7828      	ldrb	r0, [r5, #0]
 8007d98:	f7ff ff88 	bl	8007cac <__hexdig_fun>
 8007d9c:	2800      	cmp	r0, #0
 8007d9e:	d102      	bne.n	8007da6 <__gethex+0xce>
 8007da0:	1b64      	subs	r4, r4, r5
 8007da2:	00a7      	lsls	r7, r4, #2
 8007da4:	e003      	b.n	8007dae <__gethex+0xd6>
 8007da6:	3501      	adds	r5, #1
 8007da8:	e7f5      	b.n	8007d96 <__gethex+0xbe>
 8007daa:	2c00      	cmp	r4, #0
 8007dac:	d1f8      	bne.n	8007da0 <__gethex+0xc8>
 8007dae:	2220      	movs	r2, #32
 8007db0:	782b      	ldrb	r3, [r5, #0]
 8007db2:	002e      	movs	r6, r5
 8007db4:	4393      	bics	r3, r2
 8007db6:	2b50      	cmp	r3, #80	; 0x50
 8007db8:	d11d      	bne.n	8007df6 <__gethex+0x11e>
 8007dba:	786b      	ldrb	r3, [r5, #1]
 8007dbc:	2b2b      	cmp	r3, #43	; 0x2b
 8007dbe:	d02c      	beq.n	8007e1a <__gethex+0x142>
 8007dc0:	2b2d      	cmp	r3, #45	; 0x2d
 8007dc2:	d02e      	beq.n	8007e22 <__gethex+0x14a>
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	1c6e      	adds	r6, r5, #1
 8007dc8:	9306      	str	r3, [sp, #24]
 8007dca:	7830      	ldrb	r0, [r6, #0]
 8007dcc:	f7ff ff6e 	bl	8007cac <__hexdig_fun>
 8007dd0:	1e43      	subs	r3, r0, #1
 8007dd2:	b2db      	uxtb	r3, r3
 8007dd4:	2b18      	cmp	r3, #24
 8007dd6:	d82b      	bhi.n	8007e30 <__gethex+0x158>
 8007dd8:	3810      	subs	r0, #16
 8007dda:	0004      	movs	r4, r0
 8007ddc:	7870      	ldrb	r0, [r6, #1]
 8007dde:	f7ff ff65 	bl	8007cac <__hexdig_fun>
 8007de2:	1e43      	subs	r3, r0, #1
 8007de4:	b2db      	uxtb	r3, r3
 8007de6:	3601      	adds	r6, #1
 8007de8:	2b18      	cmp	r3, #24
 8007dea:	d91c      	bls.n	8007e26 <__gethex+0x14e>
 8007dec:	9b06      	ldr	r3, [sp, #24]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d000      	beq.n	8007df4 <__gethex+0x11c>
 8007df2:	4264      	negs	r4, r4
 8007df4:	193f      	adds	r7, r7, r4
 8007df6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007df8:	601e      	str	r6, [r3, #0]
 8007dfa:	9b04      	ldr	r3, [sp, #16]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d019      	beq.n	8007e34 <__gethex+0x15c>
 8007e00:	2600      	movs	r6, #0
 8007e02:	9b08      	ldr	r3, [sp, #32]
 8007e04:	42b3      	cmp	r3, r6
 8007e06:	d100      	bne.n	8007e0a <__gethex+0x132>
 8007e08:	3606      	adds	r6, #6
 8007e0a:	0030      	movs	r0, r6
 8007e0c:	b00d      	add	sp, #52	; 0x34
 8007e0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e10:	2301      	movs	r3, #1
 8007e12:	2700      	movs	r7, #0
 8007e14:	9d01      	ldr	r5, [sp, #4]
 8007e16:	9304      	str	r3, [sp, #16]
 8007e18:	e7c9      	b.n	8007dae <__gethex+0xd6>
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	9306      	str	r3, [sp, #24]
 8007e1e:	1cae      	adds	r6, r5, #2
 8007e20:	e7d3      	b.n	8007dca <__gethex+0xf2>
 8007e22:	2301      	movs	r3, #1
 8007e24:	e7fa      	b.n	8007e1c <__gethex+0x144>
 8007e26:	230a      	movs	r3, #10
 8007e28:	435c      	muls	r4, r3
 8007e2a:	1824      	adds	r4, r4, r0
 8007e2c:	3c10      	subs	r4, #16
 8007e2e:	e7d5      	b.n	8007ddc <__gethex+0x104>
 8007e30:	002e      	movs	r6, r5
 8007e32:	e7e0      	b.n	8007df6 <__gethex+0x11e>
 8007e34:	9b01      	ldr	r3, [sp, #4]
 8007e36:	9904      	ldr	r1, [sp, #16]
 8007e38:	1aeb      	subs	r3, r5, r3
 8007e3a:	3b01      	subs	r3, #1
 8007e3c:	2b07      	cmp	r3, #7
 8007e3e:	dc0a      	bgt.n	8007e56 <__gethex+0x17e>
 8007e40:	9805      	ldr	r0, [sp, #20]
 8007e42:	f000 fa75 	bl	8008330 <_Balloc>
 8007e46:	1e04      	subs	r4, r0, #0
 8007e48:	d108      	bne.n	8007e5c <__gethex+0x184>
 8007e4a:	0002      	movs	r2, r0
 8007e4c:	21de      	movs	r1, #222	; 0xde
 8007e4e:	4b64      	ldr	r3, [pc, #400]	; (8007fe0 <__gethex+0x308>)
 8007e50:	4864      	ldr	r0, [pc, #400]	; (8007fe4 <__gethex+0x30c>)
 8007e52:	f7ff fea9 	bl	8007ba8 <__assert_func>
 8007e56:	3101      	adds	r1, #1
 8007e58:	105b      	asrs	r3, r3, #1
 8007e5a:	e7ef      	b.n	8007e3c <__gethex+0x164>
 8007e5c:	0003      	movs	r3, r0
 8007e5e:	3314      	adds	r3, #20
 8007e60:	9304      	str	r3, [sp, #16]
 8007e62:	9309      	str	r3, [sp, #36]	; 0x24
 8007e64:	2300      	movs	r3, #0
 8007e66:	001e      	movs	r6, r3
 8007e68:	9306      	str	r3, [sp, #24]
 8007e6a:	9b01      	ldr	r3, [sp, #4]
 8007e6c:	42ab      	cmp	r3, r5
 8007e6e:	d340      	bcc.n	8007ef2 <__gethex+0x21a>
 8007e70:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007e72:	9b04      	ldr	r3, [sp, #16]
 8007e74:	c540      	stmia	r5!, {r6}
 8007e76:	1aed      	subs	r5, r5, r3
 8007e78:	10ad      	asrs	r5, r5, #2
 8007e7a:	0030      	movs	r0, r6
 8007e7c:	6125      	str	r5, [r4, #16]
 8007e7e:	f000 fb4f 	bl	8008520 <__hi0bits>
 8007e82:	9b02      	ldr	r3, [sp, #8]
 8007e84:	016d      	lsls	r5, r5, #5
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	1a2e      	subs	r6, r5, r0
 8007e8a:	9301      	str	r3, [sp, #4]
 8007e8c:	429e      	cmp	r6, r3
 8007e8e:	dd5a      	ble.n	8007f46 <__gethex+0x26e>
 8007e90:	1af6      	subs	r6, r6, r3
 8007e92:	0031      	movs	r1, r6
 8007e94:	0020      	movs	r0, r4
 8007e96:	f000 fef1 	bl	8008c7c <__any_on>
 8007e9a:	1e05      	subs	r5, r0, #0
 8007e9c:	d016      	beq.n	8007ecc <__gethex+0x1f4>
 8007e9e:	2501      	movs	r5, #1
 8007ea0:	211f      	movs	r1, #31
 8007ea2:	0028      	movs	r0, r5
 8007ea4:	1e73      	subs	r3, r6, #1
 8007ea6:	4019      	ands	r1, r3
 8007ea8:	4088      	lsls	r0, r1
 8007eaa:	0001      	movs	r1, r0
 8007eac:	115a      	asrs	r2, r3, #5
 8007eae:	9804      	ldr	r0, [sp, #16]
 8007eb0:	0092      	lsls	r2, r2, #2
 8007eb2:	5812      	ldr	r2, [r2, r0]
 8007eb4:	420a      	tst	r2, r1
 8007eb6:	d009      	beq.n	8007ecc <__gethex+0x1f4>
 8007eb8:	42ab      	cmp	r3, r5
 8007eba:	dd06      	ble.n	8007eca <__gethex+0x1f2>
 8007ebc:	0020      	movs	r0, r4
 8007ebe:	1eb1      	subs	r1, r6, #2
 8007ec0:	f000 fedc 	bl	8008c7c <__any_on>
 8007ec4:	3502      	adds	r5, #2
 8007ec6:	2800      	cmp	r0, #0
 8007ec8:	d100      	bne.n	8007ecc <__gethex+0x1f4>
 8007eca:	2502      	movs	r5, #2
 8007ecc:	0031      	movs	r1, r6
 8007ece:	0020      	movs	r0, r4
 8007ed0:	f7ff fe98 	bl	8007c04 <rshift>
 8007ed4:	19bf      	adds	r7, r7, r6
 8007ed6:	9b02      	ldr	r3, [sp, #8]
 8007ed8:	689b      	ldr	r3, [r3, #8]
 8007eda:	9303      	str	r3, [sp, #12]
 8007edc:	42bb      	cmp	r3, r7
 8007ede:	da42      	bge.n	8007f66 <__gethex+0x28e>
 8007ee0:	0021      	movs	r1, r4
 8007ee2:	9805      	ldr	r0, [sp, #20]
 8007ee4:	f000 fa68 	bl	80083b8 <_Bfree>
 8007ee8:	2300      	movs	r3, #0
 8007eea:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007eec:	26a3      	movs	r6, #163	; 0xa3
 8007eee:	6013      	str	r3, [r2, #0]
 8007ef0:	e78b      	b.n	8007e0a <__gethex+0x132>
 8007ef2:	1e6b      	subs	r3, r5, #1
 8007ef4:	9308      	str	r3, [sp, #32]
 8007ef6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007ef8:	781b      	ldrb	r3, [r3, #0]
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d014      	beq.n	8007f28 <__gethex+0x250>
 8007efe:	9b06      	ldr	r3, [sp, #24]
 8007f00:	2b20      	cmp	r3, #32
 8007f02:	d104      	bne.n	8007f0e <__gethex+0x236>
 8007f04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f06:	c340      	stmia	r3!, {r6}
 8007f08:	2600      	movs	r6, #0
 8007f0a:	9309      	str	r3, [sp, #36]	; 0x24
 8007f0c:	9606      	str	r6, [sp, #24]
 8007f0e:	9b08      	ldr	r3, [sp, #32]
 8007f10:	7818      	ldrb	r0, [r3, #0]
 8007f12:	f7ff fecb 	bl	8007cac <__hexdig_fun>
 8007f16:	230f      	movs	r3, #15
 8007f18:	4018      	ands	r0, r3
 8007f1a:	9b06      	ldr	r3, [sp, #24]
 8007f1c:	9d08      	ldr	r5, [sp, #32]
 8007f1e:	4098      	lsls	r0, r3
 8007f20:	3304      	adds	r3, #4
 8007f22:	4306      	orrs	r6, r0
 8007f24:	9306      	str	r3, [sp, #24]
 8007f26:	e7a0      	b.n	8007e6a <__gethex+0x192>
 8007f28:	2301      	movs	r3, #1
 8007f2a:	9a03      	ldr	r2, [sp, #12]
 8007f2c:	1a9d      	subs	r5, r3, r2
 8007f2e:	9b08      	ldr	r3, [sp, #32]
 8007f30:	195d      	adds	r5, r3, r5
 8007f32:	9b01      	ldr	r3, [sp, #4]
 8007f34:	429d      	cmp	r5, r3
 8007f36:	d3e2      	bcc.n	8007efe <__gethex+0x226>
 8007f38:	0028      	movs	r0, r5
 8007f3a:	9907      	ldr	r1, [sp, #28]
 8007f3c:	f7fe fea2 	bl	8006c84 <strncmp>
 8007f40:	2800      	cmp	r0, #0
 8007f42:	d1dc      	bne.n	8007efe <__gethex+0x226>
 8007f44:	e791      	b.n	8007e6a <__gethex+0x192>
 8007f46:	9b01      	ldr	r3, [sp, #4]
 8007f48:	2500      	movs	r5, #0
 8007f4a:	429e      	cmp	r6, r3
 8007f4c:	dac3      	bge.n	8007ed6 <__gethex+0x1fe>
 8007f4e:	1b9e      	subs	r6, r3, r6
 8007f50:	0021      	movs	r1, r4
 8007f52:	0032      	movs	r2, r6
 8007f54:	9805      	ldr	r0, [sp, #20]
 8007f56:	f000 fc4d 	bl	80087f4 <__lshift>
 8007f5a:	0003      	movs	r3, r0
 8007f5c:	3314      	adds	r3, #20
 8007f5e:	0004      	movs	r4, r0
 8007f60:	1bbf      	subs	r7, r7, r6
 8007f62:	9304      	str	r3, [sp, #16]
 8007f64:	e7b7      	b.n	8007ed6 <__gethex+0x1fe>
 8007f66:	9b02      	ldr	r3, [sp, #8]
 8007f68:	685e      	ldr	r6, [r3, #4]
 8007f6a:	42be      	cmp	r6, r7
 8007f6c:	dd71      	ble.n	8008052 <__gethex+0x37a>
 8007f6e:	9b01      	ldr	r3, [sp, #4]
 8007f70:	1bf6      	subs	r6, r6, r7
 8007f72:	42b3      	cmp	r3, r6
 8007f74:	dc38      	bgt.n	8007fe8 <__gethex+0x310>
 8007f76:	9b02      	ldr	r3, [sp, #8]
 8007f78:	68db      	ldr	r3, [r3, #12]
 8007f7a:	2b02      	cmp	r3, #2
 8007f7c:	d026      	beq.n	8007fcc <__gethex+0x2f4>
 8007f7e:	2b03      	cmp	r3, #3
 8007f80:	d028      	beq.n	8007fd4 <__gethex+0x2fc>
 8007f82:	2b01      	cmp	r3, #1
 8007f84:	d119      	bne.n	8007fba <__gethex+0x2e2>
 8007f86:	9b01      	ldr	r3, [sp, #4]
 8007f88:	42b3      	cmp	r3, r6
 8007f8a:	d116      	bne.n	8007fba <__gethex+0x2e2>
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d10d      	bne.n	8007fac <__gethex+0x2d4>
 8007f90:	9b02      	ldr	r3, [sp, #8]
 8007f92:	2662      	movs	r6, #98	; 0x62
 8007f94:	685b      	ldr	r3, [r3, #4]
 8007f96:	9301      	str	r3, [sp, #4]
 8007f98:	9a01      	ldr	r2, [sp, #4]
 8007f9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f9c:	601a      	str	r2, [r3, #0]
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	9a04      	ldr	r2, [sp, #16]
 8007fa2:	6123      	str	r3, [r4, #16]
 8007fa4:	6013      	str	r3, [r2, #0]
 8007fa6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007fa8:	601c      	str	r4, [r3, #0]
 8007faa:	e72e      	b.n	8007e0a <__gethex+0x132>
 8007fac:	9901      	ldr	r1, [sp, #4]
 8007fae:	0020      	movs	r0, r4
 8007fb0:	3901      	subs	r1, #1
 8007fb2:	f000 fe63 	bl	8008c7c <__any_on>
 8007fb6:	2800      	cmp	r0, #0
 8007fb8:	d1ea      	bne.n	8007f90 <__gethex+0x2b8>
 8007fba:	0021      	movs	r1, r4
 8007fbc:	9805      	ldr	r0, [sp, #20]
 8007fbe:	f000 f9fb 	bl	80083b8 <_Bfree>
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007fc6:	2650      	movs	r6, #80	; 0x50
 8007fc8:	6013      	str	r3, [r2, #0]
 8007fca:	e71e      	b.n	8007e0a <__gethex+0x132>
 8007fcc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d1f3      	bne.n	8007fba <__gethex+0x2e2>
 8007fd2:	e7dd      	b.n	8007f90 <__gethex+0x2b8>
 8007fd4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d1da      	bne.n	8007f90 <__gethex+0x2b8>
 8007fda:	e7ee      	b.n	8007fba <__gethex+0x2e2>
 8007fdc:	0800a390 	.word	0x0800a390
 8007fe0:	0800a319 	.word	0x0800a319
 8007fe4:	0800a32a 	.word	0x0800a32a
 8007fe8:	1e77      	subs	r7, r6, #1
 8007fea:	2d00      	cmp	r5, #0
 8007fec:	d12f      	bne.n	800804e <__gethex+0x376>
 8007fee:	2f00      	cmp	r7, #0
 8007ff0:	d004      	beq.n	8007ffc <__gethex+0x324>
 8007ff2:	0039      	movs	r1, r7
 8007ff4:	0020      	movs	r0, r4
 8007ff6:	f000 fe41 	bl	8008c7c <__any_on>
 8007ffa:	0005      	movs	r5, r0
 8007ffc:	231f      	movs	r3, #31
 8007ffe:	117a      	asrs	r2, r7, #5
 8008000:	401f      	ands	r7, r3
 8008002:	3b1e      	subs	r3, #30
 8008004:	40bb      	lsls	r3, r7
 8008006:	9904      	ldr	r1, [sp, #16]
 8008008:	0092      	lsls	r2, r2, #2
 800800a:	5852      	ldr	r2, [r2, r1]
 800800c:	421a      	tst	r2, r3
 800800e:	d001      	beq.n	8008014 <__gethex+0x33c>
 8008010:	2302      	movs	r3, #2
 8008012:	431d      	orrs	r5, r3
 8008014:	9b01      	ldr	r3, [sp, #4]
 8008016:	0031      	movs	r1, r6
 8008018:	1b9b      	subs	r3, r3, r6
 800801a:	2602      	movs	r6, #2
 800801c:	0020      	movs	r0, r4
 800801e:	9301      	str	r3, [sp, #4]
 8008020:	f7ff fdf0 	bl	8007c04 <rshift>
 8008024:	9b02      	ldr	r3, [sp, #8]
 8008026:	685f      	ldr	r7, [r3, #4]
 8008028:	2d00      	cmp	r5, #0
 800802a:	d041      	beq.n	80080b0 <__gethex+0x3d8>
 800802c:	9b02      	ldr	r3, [sp, #8]
 800802e:	68db      	ldr	r3, [r3, #12]
 8008030:	2b02      	cmp	r3, #2
 8008032:	d010      	beq.n	8008056 <__gethex+0x37e>
 8008034:	2b03      	cmp	r3, #3
 8008036:	d012      	beq.n	800805e <__gethex+0x386>
 8008038:	2b01      	cmp	r3, #1
 800803a:	d106      	bne.n	800804a <__gethex+0x372>
 800803c:	07aa      	lsls	r2, r5, #30
 800803e:	d504      	bpl.n	800804a <__gethex+0x372>
 8008040:	9a04      	ldr	r2, [sp, #16]
 8008042:	6810      	ldr	r0, [r2, #0]
 8008044:	4305      	orrs	r5, r0
 8008046:	421d      	tst	r5, r3
 8008048:	d10c      	bne.n	8008064 <__gethex+0x38c>
 800804a:	2310      	movs	r3, #16
 800804c:	e02f      	b.n	80080ae <__gethex+0x3d6>
 800804e:	2501      	movs	r5, #1
 8008050:	e7d4      	b.n	8007ffc <__gethex+0x324>
 8008052:	2601      	movs	r6, #1
 8008054:	e7e8      	b.n	8008028 <__gethex+0x350>
 8008056:	2301      	movs	r3, #1
 8008058:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800805a:	1a9b      	subs	r3, r3, r2
 800805c:	9313      	str	r3, [sp, #76]	; 0x4c
 800805e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008060:	2b00      	cmp	r3, #0
 8008062:	d0f2      	beq.n	800804a <__gethex+0x372>
 8008064:	6923      	ldr	r3, [r4, #16]
 8008066:	2000      	movs	r0, #0
 8008068:	9303      	str	r3, [sp, #12]
 800806a:	009b      	lsls	r3, r3, #2
 800806c:	9304      	str	r3, [sp, #16]
 800806e:	0023      	movs	r3, r4
 8008070:	9a04      	ldr	r2, [sp, #16]
 8008072:	3314      	adds	r3, #20
 8008074:	1899      	adds	r1, r3, r2
 8008076:	681a      	ldr	r2, [r3, #0]
 8008078:	1c55      	adds	r5, r2, #1
 800807a:	d01e      	beq.n	80080ba <__gethex+0x3e2>
 800807c:	3201      	adds	r2, #1
 800807e:	601a      	str	r2, [r3, #0]
 8008080:	0023      	movs	r3, r4
 8008082:	3314      	adds	r3, #20
 8008084:	2e02      	cmp	r6, #2
 8008086:	d140      	bne.n	800810a <__gethex+0x432>
 8008088:	9a02      	ldr	r2, [sp, #8]
 800808a:	9901      	ldr	r1, [sp, #4]
 800808c:	6812      	ldr	r2, [r2, #0]
 800808e:	3a01      	subs	r2, #1
 8008090:	428a      	cmp	r2, r1
 8008092:	d10b      	bne.n	80080ac <__gethex+0x3d4>
 8008094:	114a      	asrs	r2, r1, #5
 8008096:	211f      	movs	r1, #31
 8008098:	9801      	ldr	r0, [sp, #4]
 800809a:	0092      	lsls	r2, r2, #2
 800809c:	4001      	ands	r1, r0
 800809e:	2001      	movs	r0, #1
 80080a0:	0005      	movs	r5, r0
 80080a2:	408d      	lsls	r5, r1
 80080a4:	58d3      	ldr	r3, [r2, r3]
 80080a6:	422b      	tst	r3, r5
 80080a8:	d000      	beq.n	80080ac <__gethex+0x3d4>
 80080aa:	2601      	movs	r6, #1
 80080ac:	2320      	movs	r3, #32
 80080ae:	431e      	orrs	r6, r3
 80080b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80080b2:	601c      	str	r4, [r3, #0]
 80080b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080b6:	601f      	str	r7, [r3, #0]
 80080b8:	e6a7      	b.n	8007e0a <__gethex+0x132>
 80080ba:	c301      	stmia	r3!, {r0}
 80080bc:	4299      	cmp	r1, r3
 80080be:	d8da      	bhi.n	8008076 <__gethex+0x39e>
 80080c0:	9b03      	ldr	r3, [sp, #12]
 80080c2:	68a2      	ldr	r2, [r4, #8]
 80080c4:	4293      	cmp	r3, r2
 80080c6:	db17      	blt.n	80080f8 <__gethex+0x420>
 80080c8:	6863      	ldr	r3, [r4, #4]
 80080ca:	9805      	ldr	r0, [sp, #20]
 80080cc:	1c59      	adds	r1, r3, #1
 80080ce:	f000 f92f 	bl	8008330 <_Balloc>
 80080d2:	1e05      	subs	r5, r0, #0
 80080d4:	d103      	bne.n	80080de <__gethex+0x406>
 80080d6:	0002      	movs	r2, r0
 80080d8:	2184      	movs	r1, #132	; 0x84
 80080da:	4b1c      	ldr	r3, [pc, #112]	; (800814c <__gethex+0x474>)
 80080dc:	e6b8      	b.n	8007e50 <__gethex+0x178>
 80080de:	0021      	movs	r1, r4
 80080e0:	6923      	ldr	r3, [r4, #16]
 80080e2:	310c      	adds	r1, #12
 80080e4:	1c9a      	adds	r2, r3, #2
 80080e6:	0092      	lsls	r2, r2, #2
 80080e8:	300c      	adds	r0, #12
 80080ea:	f7fe fca5 	bl	8006a38 <memcpy>
 80080ee:	0021      	movs	r1, r4
 80080f0:	9805      	ldr	r0, [sp, #20]
 80080f2:	f000 f961 	bl	80083b8 <_Bfree>
 80080f6:	002c      	movs	r4, r5
 80080f8:	6923      	ldr	r3, [r4, #16]
 80080fa:	1c5a      	adds	r2, r3, #1
 80080fc:	6122      	str	r2, [r4, #16]
 80080fe:	2201      	movs	r2, #1
 8008100:	3304      	adds	r3, #4
 8008102:	009b      	lsls	r3, r3, #2
 8008104:	18e3      	adds	r3, r4, r3
 8008106:	605a      	str	r2, [r3, #4]
 8008108:	e7ba      	b.n	8008080 <__gethex+0x3a8>
 800810a:	6922      	ldr	r2, [r4, #16]
 800810c:	9903      	ldr	r1, [sp, #12]
 800810e:	428a      	cmp	r2, r1
 8008110:	dd09      	ble.n	8008126 <__gethex+0x44e>
 8008112:	2101      	movs	r1, #1
 8008114:	0020      	movs	r0, r4
 8008116:	f7ff fd75 	bl	8007c04 <rshift>
 800811a:	9b02      	ldr	r3, [sp, #8]
 800811c:	3701      	adds	r7, #1
 800811e:	689b      	ldr	r3, [r3, #8]
 8008120:	42bb      	cmp	r3, r7
 8008122:	dac2      	bge.n	80080aa <__gethex+0x3d2>
 8008124:	e6dc      	b.n	8007ee0 <__gethex+0x208>
 8008126:	221f      	movs	r2, #31
 8008128:	9d01      	ldr	r5, [sp, #4]
 800812a:	9901      	ldr	r1, [sp, #4]
 800812c:	2601      	movs	r6, #1
 800812e:	4015      	ands	r5, r2
 8008130:	4211      	tst	r1, r2
 8008132:	d0bb      	beq.n	80080ac <__gethex+0x3d4>
 8008134:	9a04      	ldr	r2, [sp, #16]
 8008136:	189b      	adds	r3, r3, r2
 8008138:	3b04      	subs	r3, #4
 800813a:	6818      	ldr	r0, [r3, #0]
 800813c:	f000 f9f0 	bl	8008520 <__hi0bits>
 8008140:	2320      	movs	r3, #32
 8008142:	1b5d      	subs	r5, r3, r5
 8008144:	42a8      	cmp	r0, r5
 8008146:	dbe4      	blt.n	8008112 <__gethex+0x43a>
 8008148:	e7b0      	b.n	80080ac <__gethex+0x3d4>
 800814a:	46c0      	nop			; (mov r8, r8)
 800814c:	0800a319 	.word	0x0800a319

08008150 <L_shift>:
 8008150:	2308      	movs	r3, #8
 8008152:	b570      	push	{r4, r5, r6, lr}
 8008154:	2520      	movs	r5, #32
 8008156:	1a9a      	subs	r2, r3, r2
 8008158:	0092      	lsls	r2, r2, #2
 800815a:	1aad      	subs	r5, r5, r2
 800815c:	6843      	ldr	r3, [r0, #4]
 800815e:	6806      	ldr	r6, [r0, #0]
 8008160:	001c      	movs	r4, r3
 8008162:	40ac      	lsls	r4, r5
 8008164:	40d3      	lsrs	r3, r2
 8008166:	4334      	orrs	r4, r6
 8008168:	6004      	str	r4, [r0, #0]
 800816a:	6043      	str	r3, [r0, #4]
 800816c:	3004      	adds	r0, #4
 800816e:	4288      	cmp	r0, r1
 8008170:	d3f4      	bcc.n	800815c <L_shift+0xc>
 8008172:	bd70      	pop	{r4, r5, r6, pc}

08008174 <__match>:
 8008174:	b530      	push	{r4, r5, lr}
 8008176:	6803      	ldr	r3, [r0, #0]
 8008178:	780c      	ldrb	r4, [r1, #0]
 800817a:	3301      	adds	r3, #1
 800817c:	2c00      	cmp	r4, #0
 800817e:	d102      	bne.n	8008186 <__match+0x12>
 8008180:	6003      	str	r3, [r0, #0]
 8008182:	2001      	movs	r0, #1
 8008184:	bd30      	pop	{r4, r5, pc}
 8008186:	781a      	ldrb	r2, [r3, #0]
 8008188:	0015      	movs	r5, r2
 800818a:	3d41      	subs	r5, #65	; 0x41
 800818c:	2d19      	cmp	r5, #25
 800818e:	d800      	bhi.n	8008192 <__match+0x1e>
 8008190:	3220      	adds	r2, #32
 8008192:	3101      	adds	r1, #1
 8008194:	42a2      	cmp	r2, r4
 8008196:	d0ef      	beq.n	8008178 <__match+0x4>
 8008198:	2000      	movs	r0, #0
 800819a:	e7f3      	b.n	8008184 <__match+0x10>

0800819c <__hexnan>:
 800819c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800819e:	680b      	ldr	r3, [r1, #0]
 80081a0:	b08b      	sub	sp, #44	; 0x2c
 80081a2:	9201      	str	r2, [sp, #4]
 80081a4:	9901      	ldr	r1, [sp, #4]
 80081a6:	115a      	asrs	r2, r3, #5
 80081a8:	0092      	lsls	r2, r2, #2
 80081aa:	188a      	adds	r2, r1, r2
 80081ac:	9202      	str	r2, [sp, #8]
 80081ae:	0019      	movs	r1, r3
 80081b0:	221f      	movs	r2, #31
 80081b2:	4011      	ands	r1, r2
 80081b4:	9008      	str	r0, [sp, #32]
 80081b6:	9106      	str	r1, [sp, #24]
 80081b8:	4213      	tst	r3, r2
 80081ba:	d002      	beq.n	80081c2 <__hexnan+0x26>
 80081bc:	9b02      	ldr	r3, [sp, #8]
 80081be:	3304      	adds	r3, #4
 80081c0:	9302      	str	r3, [sp, #8]
 80081c2:	9b02      	ldr	r3, [sp, #8]
 80081c4:	2500      	movs	r5, #0
 80081c6:	1f1e      	subs	r6, r3, #4
 80081c8:	0037      	movs	r7, r6
 80081ca:	0034      	movs	r4, r6
 80081cc:	9b08      	ldr	r3, [sp, #32]
 80081ce:	6035      	str	r5, [r6, #0]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	9507      	str	r5, [sp, #28]
 80081d4:	9305      	str	r3, [sp, #20]
 80081d6:	9503      	str	r5, [sp, #12]
 80081d8:	9b05      	ldr	r3, [sp, #20]
 80081da:	3301      	adds	r3, #1
 80081dc:	9309      	str	r3, [sp, #36]	; 0x24
 80081de:	9b05      	ldr	r3, [sp, #20]
 80081e0:	785b      	ldrb	r3, [r3, #1]
 80081e2:	9304      	str	r3, [sp, #16]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d028      	beq.n	800823a <__hexnan+0x9e>
 80081e8:	9804      	ldr	r0, [sp, #16]
 80081ea:	f7ff fd5f 	bl	8007cac <__hexdig_fun>
 80081ee:	2800      	cmp	r0, #0
 80081f0:	d154      	bne.n	800829c <__hexnan+0x100>
 80081f2:	9b04      	ldr	r3, [sp, #16]
 80081f4:	2b20      	cmp	r3, #32
 80081f6:	d819      	bhi.n	800822c <__hexnan+0x90>
 80081f8:	9b03      	ldr	r3, [sp, #12]
 80081fa:	9a07      	ldr	r2, [sp, #28]
 80081fc:	4293      	cmp	r3, r2
 80081fe:	dd12      	ble.n	8008226 <__hexnan+0x8a>
 8008200:	42bc      	cmp	r4, r7
 8008202:	d206      	bcs.n	8008212 <__hexnan+0x76>
 8008204:	2d07      	cmp	r5, #7
 8008206:	dc04      	bgt.n	8008212 <__hexnan+0x76>
 8008208:	002a      	movs	r2, r5
 800820a:	0039      	movs	r1, r7
 800820c:	0020      	movs	r0, r4
 800820e:	f7ff ff9f 	bl	8008150 <L_shift>
 8008212:	9b01      	ldr	r3, [sp, #4]
 8008214:	2508      	movs	r5, #8
 8008216:	429c      	cmp	r4, r3
 8008218:	d905      	bls.n	8008226 <__hexnan+0x8a>
 800821a:	1f27      	subs	r7, r4, #4
 800821c:	2500      	movs	r5, #0
 800821e:	003c      	movs	r4, r7
 8008220:	9b03      	ldr	r3, [sp, #12]
 8008222:	603d      	str	r5, [r7, #0]
 8008224:	9307      	str	r3, [sp, #28]
 8008226:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008228:	9305      	str	r3, [sp, #20]
 800822a:	e7d5      	b.n	80081d8 <__hexnan+0x3c>
 800822c:	9b04      	ldr	r3, [sp, #16]
 800822e:	2b29      	cmp	r3, #41	; 0x29
 8008230:	d159      	bne.n	80082e6 <__hexnan+0x14a>
 8008232:	9b05      	ldr	r3, [sp, #20]
 8008234:	9a08      	ldr	r2, [sp, #32]
 8008236:	3302      	adds	r3, #2
 8008238:	6013      	str	r3, [r2, #0]
 800823a:	9b03      	ldr	r3, [sp, #12]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d052      	beq.n	80082e6 <__hexnan+0x14a>
 8008240:	42bc      	cmp	r4, r7
 8008242:	d206      	bcs.n	8008252 <__hexnan+0xb6>
 8008244:	2d07      	cmp	r5, #7
 8008246:	dc04      	bgt.n	8008252 <__hexnan+0xb6>
 8008248:	002a      	movs	r2, r5
 800824a:	0039      	movs	r1, r7
 800824c:	0020      	movs	r0, r4
 800824e:	f7ff ff7f 	bl	8008150 <L_shift>
 8008252:	9b01      	ldr	r3, [sp, #4]
 8008254:	429c      	cmp	r4, r3
 8008256:	d935      	bls.n	80082c4 <__hexnan+0x128>
 8008258:	001a      	movs	r2, r3
 800825a:	0023      	movs	r3, r4
 800825c:	cb02      	ldmia	r3!, {r1}
 800825e:	c202      	stmia	r2!, {r1}
 8008260:	429e      	cmp	r6, r3
 8008262:	d2fb      	bcs.n	800825c <__hexnan+0xc0>
 8008264:	9b02      	ldr	r3, [sp, #8]
 8008266:	1c61      	adds	r1, r4, #1
 8008268:	1eda      	subs	r2, r3, #3
 800826a:	2304      	movs	r3, #4
 800826c:	4291      	cmp	r1, r2
 800826e:	d805      	bhi.n	800827c <__hexnan+0xe0>
 8008270:	9b02      	ldr	r3, [sp, #8]
 8008272:	3b04      	subs	r3, #4
 8008274:	1b1b      	subs	r3, r3, r4
 8008276:	089b      	lsrs	r3, r3, #2
 8008278:	3301      	adds	r3, #1
 800827a:	009b      	lsls	r3, r3, #2
 800827c:	9a01      	ldr	r2, [sp, #4]
 800827e:	18d3      	adds	r3, r2, r3
 8008280:	2200      	movs	r2, #0
 8008282:	c304      	stmia	r3!, {r2}
 8008284:	429e      	cmp	r6, r3
 8008286:	d2fc      	bcs.n	8008282 <__hexnan+0xe6>
 8008288:	6833      	ldr	r3, [r6, #0]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d104      	bne.n	8008298 <__hexnan+0xfc>
 800828e:	9b01      	ldr	r3, [sp, #4]
 8008290:	429e      	cmp	r6, r3
 8008292:	d126      	bne.n	80082e2 <__hexnan+0x146>
 8008294:	2301      	movs	r3, #1
 8008296:	6033      	str	r3, [r6, #0]
 8008298:	2005      	movs	r0, #5
 800829a:	e025      	b.n	80082e8 <__hexnan+0x14c>
 800829c:	9b03      	ldr	r3, [sp, #12]
 800829e:	3501      	adds	r5, #1
 80082a0:	3301      	adds	r3, #1
 80082a2:	9303      	str	r3, [sp, #12]
 80082a4:	2d08      	cmp	r5, #8
 80082a6:	dd06      	ble.n	80082b6 <__hexnan+0x11a>
 80082a8:	9b01      	ldr	r3, [sp, #4]
 80082aa:	429c      	cmp	r4, r3
 80082ac:	d9bb      	bls.n	8008226 <__hexnan+0x8a>
 80082ae:	2300      	movs	r3, #0
 80082b0:	2501      	movs	r5, #1
 80082b2:	3c04      	subs	r4, #4
 80082b4:	6023      	str	r3, [r4, #0]
 80082b6:	220f      	movs	r2, #15
 80082b8:	6823      	ldr	r3, [r4, #0]
 80082ba:	4010      	ands	r0, r2
 80082bc:	011b      	lsls	r3, r3, #4
 80082be:	4318      	orrs	r0, r3
 80082c0:	6020      	str	r0, [r4, #0]
 80082c2:	e7b0      	b.n	8008226 <__hexnan+0x8a>
 80082c4:	9b06      	ldr	r3, [sp, #24]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d0de      	beq.n	8008288 <__hexnan+0xec>
 80082ca:	2120      	movs	r1, #32
 80082cc:	9a06      	ldr	r2, [sp, #24]
 80082ce:	9b02      	ldr	r3, [sp, #8]
 80082d0:	1a89      	subs	r1, r1, r2
 80082d2:	2201      	movs	r2, #1
 80082d4:	4252      	negs	r2, r2
 80082d6:	40ca      	lsrs	r2, r1
 80082d8:	3b04      	subs	r3, #4
 80082da:	6819      	ldr	r1, [r3, #0]
 80082dc:	400a      	ands	r2, r1
 80082de:	601a      	str	r2, [r3, #0]
 80082e0:	e7d2      	b.n	8008288 <__hexnan+0xec>
 80082e2:	3e04      	subs	r6, #4
 80082e4:	e7d0      	b.n	8008288 <__hexnan+0xec>
 80082e6:	2004      	movs	r0, #4
 80082e8:	b00b      	add	sp, #44	; 0x2c
 80082ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080082ec <__ascii_mbtowc>:
 80082ec:	b082      	sub	sp, #8
 80082ee:	2900      	cmp	r1, #0
 80082f0:	d100      	bne.n	80082f4 <__ascii_mbtowc+0x8>
 80082f2:	a901      	add	r1, sp, #4
 80082f4:	1e10      	subs	r0, r2, #0
 80082f6:	d006      	beq.n	8008306 <__ascii_mbtowc+0x1a>
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d006      	beq.n	800830a <__ascii_mbtowc+0x1e>
 80082fc:	7813      	ldrb	r3, [r2, #0]
 80082fe:	600b      	str	r3, [r1, #0]
 8008300:	7810      	ldrb	r0, [r2, #0]
 8008302:	1e43      	subs	r3, r0, #1
 8008304:	4198      	sbcs	r0, r3
 8008306:	b002      	add	sp, #8
 8008308:	4770      	bx	lr
 800830a:	2002      	movs	r0, #2
 800830c:	4240      	negs	r0, r0
 800830e:	e7fa      	b.n	8008306 <__ascii_mbtowc+0x1a>

08008310 <__malloc_lock>:
 8008310:	b510      	push	{r4, lr}
 8008312:	4802      	ldr	r0, [pc, #8]	; (800831c <__malloc_lock+0xc>)
 8008314:	f001 fc05 	bl	8009b22 <__retarget_lock_acquire_recursive>
 8008318:	bd10      	pop	{r4, pc}
 800831a:	46c0      	nop			; (mov r8, r8)
 800831c:	20000588 	.word	0x20000588

08008320 <__malloc_unlock>:
 8008320:	b510      	push	{r4, lr}
 8008322:	4802      	ldr	r0, [pc, #8]	; (800832c <__malloc_unlock+0xc>)
 8008324:	f001 fbfe 	bl	8009b24 <__retarget_lock_release_recursive>
 8008328:	bd10      	pop	{r4, pc}
 800832a:	46c0      	nop			; (mov r8, r8)
 800832c:	20000588 	.word	0x20000588

08008330 <_Balloc>:
 8008330:	b570      	push	{r4, r5, r6, lr}
 8008332:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008334:	0006      	movs	r6, r0
 8008336:	000c      	movs	r4, r1
 8008338:	2d00      	cmp	r5, #0
 800833a:	d10e      	bne.n	800835a <_Balloc+0x2a>
 800833c:	2010      	movs	r0, #16
 800833e:	f7fe fb67 	bl	8006a10 <malloc>
 8008342:	1e02      	subs	r2, r0, #0
 8008344:	6270      	str	r0, [r6, #36]	; 0x24
 8008346:	d104      	bne.n	8008352 <_Balloc+0x22>
 8008348:	2166      	movs	r1, #102	; 0x66
 800834a:	4b19      	ldr	r3, [pc, #100]	; (80083b0 <_Balloc+0x80>)
 800834c:	4819      	ldr	r0, [pc, #100]	; (80083b4 <_Balloc+0x84>)
 800834e:	f7ff fc2b 	bl	8007ba8 <__assert_func>
 8008352:	6045      	str	r5, [r0, #4]
 8008354:	6085      	str	r5, [r0, #8]
 8008356:	6005      	str	r5, [r0, #0]
 8008358:	60c5      	str	r5, [r0, #12]
 800835a:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800835c:	68eb      	ldr	r3, [r5, #12]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d013      	beq.n	800838a <_Balloc+0x5a>
 8008362:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008364:	00a2      	lsls	r2, r4, #2
 8008366:	68db      	ldr	r3, [r3, #12]
 8008368:	189b      	adds	r3, r3, r2
 800836a:	6818      	ldr	r0, [r3, #0]
 800836c:	2800      	cmp	r0, #0
 800836e:	d118      	bne.n	80083a2 <_Balloc+0x72>
 8008370:	2101      	movs	r1, #1
 8008372:	000d      	movs	r5, r1
 8008374:	40a5      	lsls	r5, r4
 8008376:	1d6a      	adds	r2, r5, #5
 8008378:	0030      	movs	r0, r6
 800837a:	0092      	lsls	r2, r2, #2
 800837c:	f000 fca1 	bl	8008cc2 <_calloc_r>
 8008380:	2800      	cmp	r0, #0
 8008382:	d00c      	beq.n	800839e <_Balloc+0x6e>
 8008384:	6044      	str	r4, [r0, #4]
 8008386:	6085      	str	r5, [r0, #8]
 8008388:	e00d      	b.n	80083a6 <_Balloc+0x76>
 800838a:	2221      	movs	r2, #33	; 0x21
 800838c:	2104      	movs	r1, #4
 800838e:	0030      	movs	r0, r6
 8008390:	f000 fc97 	bl	8008cc2 <_calloc_r>
 8008394:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008396:	60e8      	str	r0, [r5, #12]
 8008398:	68db      	ldr	r3, [r3, #12]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d1e1      	bne.n	8008362 <_Balloc+0x32>
 800839e:	2000      	movs	r0, #0
 80083a0:	bd70      	pop	{r4, r5, r6, pc}
 80083a2:	6802      	ldr	r2, [r0, #0]
 80083a4:	601a      	str	r2, [r3, #0]
 80083a6:	2300      	movs	r3, #0
 80083a8:	6103      	str	r3, [r0, #16]
 80083aa:	60c3      	str	r3, [r0, #12]
 80083ac:	e7f8      	b.n	80083a0 <_Balloc+0x70>
 80083ae:	46c0      	nop			; (mov r8, r8)
 80083b0:	0800a168 	.word	0x0800a168
 80083b4:	0800a3a4 	.word	0x0800a3a4

080083b8 <_Bfree>:
 80083b8:	b570      	push	{r4, r5, r6, lr}
 80083ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80083bc:	0005      	movs	r5, r0
 80083be:	000c      	movs	r4, r1
 80083c0:	2e00      	cmp	r6, #0
 80083c2:	d10e      	bne.n	80083e2 <_Bfree+0x2a>
 80083c4:	2010      	movs	r0, #16
 80083c6:	f7fe fb23 	bl	8006a10 <malloc>
 80083ca:	1e02      	subs	r2, r0, #0
 80083cc:	6268      	str	r0, [r5, #36]	; 0x24
 80083ce:	d104      	bne.n	80083da <_Bfree+0x22>
 80083d0:	218a      	movs	r1, #138	; 0x8a
 80083d2:	4b09      	ldr	r3, [pc, #36]	; (80083f8 <_Bfree+0x40>)
 80083d4:	4809      	ldr	r0, [pc, #36]	; (80083fc <_Bfree+0x44>)
 80083d6:	f7ff fbe7 	bl	8007ba8 <__assert_func>
 80083da:	6046      	str	r6, [r0, #4]
 80083dc:	6086      	str	r6, [r0, #8]
 80083de:	6006      	str	r6, [r0, #0]
 80083e0:	60c6      	str	r6, [r0, #12]
 80083e2:	2c00      	cmp	r4, #0
 80083e4:	d007      	beq.n	80083f6 <_Bfree+0x3e>
 80083e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80083e8:	6862      	ldr	r2, [r4, #4]
 80083ea:	68db      	ldr	r3, [r3, #12]
 80083ec:	0092      	lsls	r2, r2, #2
 80083ee:	189b      	adds	r3, r3, r2
 80083f0:	681a      	ldr	r2, [r3, #0]
 80083f2:	6022      	str	r2, [r4, #0]
 80083f4:	601c      	str	r4, [r3, #0]
 80083f6:	bd70      	pop	{r4, r5, r6, pc}
 80083f8:	0800a168 	.word	0x0800a168
 80083fc:	0800a3a4 	.word	0x0800a3a4

08008400 <__multadd>:
 8008400:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008402:	000e      	movs	r6, r1
 8008404:	9001      	str	r0, [sp, #4]
 8008406:	000c      	movs	r4, r1
 8008408:	001d      	movs	r5, r3
 800840a:	2000      	movs	r0, #0
 800840c:	690f      	ldr	r7, [r1, #16]
 800840e:	3614      	adds	r6, #20
 8008410:	6833      	ldr	r3, [r6, #0]
 8008412:	3001      	adds	r0, #1
 8008414:	b299      	uxth	r1, r3
 8008416:	4351      	muls	r1, r2
 8008418:	0c1b      	lsrs	r3, r3, #16
 800841a:	4353      	muls	r3, r2
 800841c:	1949      	adds	r1, r1, r5
 800841e:	0c0d      	lsrs	r5, r1, #16
 8008420:	195b      	adds	r3, r3, r5
 8008422:	0c1d      	lsrs	r5, r3, #16
 8008424:	b289      	uxth	r1, r1
 8008426:	041b      	lsls	r3, r3, #16
 8008428:	185b      	adds	r3, r3, r1
 800842a:	c608      	stmia	r6!, {r3}
 800842c:	4287      	cmp	r7, r0
 800842e:	dcef      	bgt.n	8008410 <__multadd+0x10>
 8008430:	2d00      	cmp	r5, #0
 8008432:	d022      	beq.n	800847a <__multadd+0x7a>
 8008434:	68a3      	ldr	r3, [r4, #8]
 8008436:	42bb      	cmp	r3, r7
 8008438:	dc19      	bgt.n	800846e <__multadd+0x6e>
 800843a:	6863      	ldr	r3, [r4, #4]
 800843c:	9801      	ldr	r0, [sp, #4]
 800843e:	1c59      	adds	r1, r3, #1
 8008440:	f7ff ff76 	bl	8008330 <_Balloc>
 8008444:	1e06      	subs	r6, r0, #0
 8008446:	d105      	bne.n	8008454 <__multadd+0x54>
 8008448:	0002      	movs	r2, r0
 800844a:	21b5      	movs	r1, #181	; 0xb5
 800844c:	4b0c      	ldr	r3, [pc, #48]	; (8008480 <__multadd+0x80>)
 800844e:	480d      	ldr	r0, [pc, #52]	; (8008484 <__multadd+0x84>)
 8008450:	f7ff fbaa 	bl	8007ba8 <__assert_func>
 8008454:	0021      	movs	r1, r4
 8008456:	6923      	ldr	r3, [r4, #16]
 8008458:	310c      	adds	r1, #12
 800845a:	1c9a      	adds	r2, r3, #2
 800845c:	0092      	lsls	r2, r2, #2
 800845e:	300c      	adds	r0, #12
 8008460:	f7fe faea 	bl	8006a38 <memcpy>
 8008464:	0021      	movs	r1, r4
 8008466:	9801      	ldr	r0, [sp, #4]
 8008468:	f7ff ffa6 	bl	80083b8 <_Bfree>
 800846c:	0034      	movs	r4, r6
 800846e:	1d3b      	adds	r3, r7, #4
 8008470:	009b      	lsls	r3, r3, #2
 8008472:	18e3      	adds	r3, r4, r3
 8008474:	605d      	str	r5, [r3, #4]
 8008476:	1c7b      	adds	r3, r7, #1
 8008478:	6123      	str	r3, [r4, #16]
 800847a:	0020      	movs	r0, r4
 800847c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800847e:	46c0      	nop			; (mov r8, r8)
 8008480:	0800a319 	.word	0x0800a319
 8008484:	0800a3a4 	.word	0x0800a3a4

08008488 <__s2b>:
 8008488:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800848a:	0006      	movs	r6, r0
 800848c:	0018      	movs	r0, r3
 800848e:	000c      	movs	r4, r1
 8008490:	3008      	adds	r0, #8
 8008492:	2109      	movs	r1, #9
 8008494:	9301      	str	r3, [sp, #4]
 8008496:	0015      	movs	r5, r2
 8008498:	f7f7 feda 	bl	8000250 <__divsi3>
 800849c:	2301      	movs	r3, #1
 800849e:	2100      	movs	r1, #0
 80084a0:	4283      	cmp	r3, r0
 80084a2:	db0a      	blt.n	80084ba <__s2b+0x32>
 80084a4:	0030      	movs	r0, r6
 80084a6:	f7ff ff43 	bl	8008330 <_Balloc>
 80084aa:	1e01      	subs	r1, r0, #0
 80084ac:	d108      	bne.n	80084c0 <__s2b+0x38>
 80084ae:	0002      	movs	r2, r0
 80084b0:	4b19      	ldr	r3, [pc, #100]	; (8008518 <__s2b+0x90>)
 80084b2:	481a      	ldr	r0, [pc, #104]	; (800851c <__s2b+0x94>)
 80084b4:	31ce      	adds	r1, #206	; 0xce
 80084b6:	f7ff fb77 	bl	8007ba8 <__assert_func>
 80084ba:	005b      	lsls	r3, r3, #1
 80084bc:	3101      	adds	r1, #1
 80084be:	e7ef      	b.n	80084a0 <__s2b+0x18>
 80084c0:	9b08      	ldr	r3, [sp, #32]
 80084c2:	6143      	str	r3, [r0, #20]
 80084c4:	2301      	movs	r3, #1
 80084c6:	6103      	str	r3, [r0, #16]
 80084c8:	2d09      	cmp	r5, #9
 80084ca:	dd18      	ble.n	80084fe <__s2b+0x76>
 80084cc:	0023      	movs	r3, r4
 80084ce:	3309      	adds	r3, #9
 80084d0:	001f      	movs	r7, r3
 80084d2:	9300      	str	r3, [sp, #0]
 80084d4:	1964      	adds	r4, r4, r5
 80084d6:	783b      	ldrb	r3, [r7, #0]
 80084d8:	220a      	movs	r2, #10
 80084da:	0030      	movs	r0, r6
 80084dc:	3b30      	subs	r3, #48	; 0x30
 80084de:	f7ff ff8f 	bl	8008400 <__multadd>
 80084e2:	3701      	adds	r7, #1
 80084e4:	0001      	movs	r1, r0
 80084e6:	42a7      	cmp	r7, r4
 80084e8:	d1f5      	bne.n	80084d6 <__s2b+0x4e>
 80084ea:	002c      	movs	r4, r5
 80084ec:	9b00      	ldr	r3, [sp, #0]
 80084ee:	3c08      	subs	r4, #8
 80084f0:	191c      	adds	r4, r3, r4
 80084f2:	002f      	movs	r7, r5
 80084f4:	9b01      	ldr	r3, [sp, #4]
 80084f6:	429f      	cmp	r7, r3
 80084f8:	db04      	blt.n	8008504 <__s2b+0x7c>
 80084fa:	0008      	movs	r0, r1
 80084fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80084fe:	2509      	movs	r5, #9
 8008500:	340a      	adds	r4, #10
 8008502:	e7f6      	b.n	80084f2 <__s2b+0x6a>
 8008504:	1b63      	subs	r3, r4, r5
 8008506:	5ddb      	ldrb	r3, [r3, r7]
 8008508:	220a      	movs	r2, #10
 800850a:	0030      	movs	r0, r6
 800850c:	3b30      	subs	r3, #48	; 0x30
 800850e:	f7ff ff77 	bl	8008400 <__multadd>
 8008512:	3701      	adds	r7, #1
 8008514:	0001      	movs	r1, r0
 8008516:	e7ed      	b.n	80084f4 <__s2b+0x6c>
 8008518:	0800a319 	.word	0x0800a319
 800851c:	0800a3a4 	.word	0x0800a3a4

08008520 <__hi0bits>:
 8008520:	0003      	movs	r3, r0
 8008522:	0c02      	lsrs	r2, r0, #16
 8008524:	2000      	movs	r0, #0
 8008526:	4282      	cmp	r2, r0
 8008528:	d101      	bne.n	800852e <__hi0bits+0xe>
 800852a:	041b      	lsls	r3, r3, #16
 800852c:	3010      	adds	r0, #16
 800852e:	0e1a      	lsrs	r2, r3, #24
 8008530:	d101      	bne.n	8008536 <__hi0bits+0x16>
 8008532:	3008      	adds	r0, #8
 8008534:	021b      	lsls	r3, r3, #8
 8008536:	0f1a      	lsrs	r2, r3, #28
 8008538:	d101      	bne.n	800853e <__hi0bits+0x1e>
 800853a:	3004      	adds	r0, #4
 800853c:	011b      	lsls	r3, r3, #4
 800853e:	0f9a      	lsrs	r2, r3, #30
 8008540:	d101      	bne.n	8008546 <__hi0bits+0x26>
 8008542:	3002      	adds	r0, #2
 8008544:	009b      	lsls	r3, r3, #2
 8008546:	2b00      	cmp	r3, #0
 8008548:	db03      	blt.n	8008552 <__hi0bits+0x32>
 800854a:	3001      	adds	r0, #1
 800854c:	005b      	lsls	r3, r3, #1
 800854e:	d400      	bmi.n	8008552 <__hi0bits+0x32>
 8008550:	2020      	movs	r0, #32
 8008552:	4770      	bx	lr

08008554 <__lo0bits>:
 8008554:	6803      	ldr	r3, [r0, #0]
 8008556:	0002      	movs	r2, r0
 8008558:	2107      	movs	r1, #7
 800855a:	0018      	movs	r0, r3
 800855c:	4008      	ands	r0, r1
 800855e:	420b      	tst	r3, r1
 8008560:	d00d      	beq.n	800857e <__lo0bits+0x2a>
 8008562:	3906      	subs	r1, #6
 8008564:	2000      	movs	r0, #0
 8008566:	420b      	tst	r3, r1
 8008568:	d105      	bne.n	8008576 <__lo0bits+0x22>
 800856a:	3002      	adds	r0, #2
 800856c:	4203      	tst	r3, r0
 800856e:	d003      	beq.n	8008578 <__lo0bits+0x24>
 8008570:	40cb      	lsrs	r3, r1
 8008572:	0008      	movs	r0, r1
 8008574:	6013      	str	r3, [r2, #0]
 8008576:	4770      	bx	lr
 8008578:	089b      	lsrs	r3, r3, #2
 800857a:	6013      	str	r3, [r2, #0]
 800857c:	e7fb      	b.n	8008576 <__lo0bits+0x22>
 800857e:	b299      	uxth	r1, r3
 8008580:	2900      	cmp	r1, #0
 8008582:	d101      	bne.n	8008588 <__lo0bits+0x34>
 8008584:	2010      	movs	r0, #16
 8008586:	0c1b      	lsrs	r3, r3, #16
 8008588:	b2d9      	uxtb	r1, r3
 800858a:	2900      	cmp	r1, #0
 800858c:	d101      	bne.n	8008592 <__lo0bits+0x3e>
 800858e:	3008      	adds	r0, #8
 8008590:	0a1b      	lsrs	r3, r3, #8
 8008592:	0719      	lsls	r1, r3, #28
 8008594:	d101      	bne.n	800859a <__lo0bits+0x46>
 8008596:	3004      	adds	r0, #4
 8008598:	091b      	lsrs	r3, r3, #4
 800859a:	0799      	lsls	r1, r3, #30
 800859c:	d101      	bne.n	80085a2 <__lo0bits+0x4e>
 800859e:	3002      	adds	r0, #2
 80085a0:	089b      	lsrs	r3, r3, #2
 80085a2:	07d9      	lsls	r1, r3, #31
 80085a4:	d4e9      	bmi.n	800857a <__lo0bits+0x26>
 80085a6:	3001      	adds	r0, #1
 80085a8:	085b      	lsrs	r3, r3, #1
 80085aa:	d1e6      	bne.n	800857a <__lo0bits+0x26>
 80085ac:	2020      	movs	r0, #32
 80085ae:	e7e2      	b.n	8008576 <__lo0bits+0x22>

080085b0 <__i2b>:
 80085b0:	b510      	push	{r4, lr}
 80085b2:	000c      	movs	r4, r1
 80085b4:	2101      	movs	r1, #1
 80085b6:	f7ff febb 	bl	8008330 <_Balloc>
 80085ba:	2800      	cmp	r0, #0
 80085bc:	d106      	bne.n	80085cc <__i2b+0x1c>
 80085be:	21a0      	movs	r1, #160	; 0xa0
 80085c0:	0002      	movs	r2, r0
 80085c2:	4b04      	ldr	r3, [pc, #16]	; (80085d4 <__i2b+0x24>)
 80085c4:	4804      	ldr	r0, [pc, #16]	; (80085d8 <__i2b+0x28>)
 80085c6:	0049      	lsls	r1, r1, #1
 80085c8:	f7ff faee 	bl	8007ba8 <__assert_func>
 80085cc:	2301      	movs	r3, #1
 80085ce:	6144      	str	r4, [r0, #20]
 80085d0:	6103      	str	r3, [r0, #16]
 80085d2:	bd10      	pop	{r4, pc}
 80085d4:	0800a319 	.word	0x0800a319
 80085d8:	0800a3a4 	.word	0x0800a3a4

080085dc <__multiply>:
 80085dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085de:	690b      	ldr	r3, [r1, #16]
 80085e0:	0014      	movs	r4, r2
 80085e2:	6912      	ldr	r2, [r2, #16]
 80085e4:	000d      	movs	r5, r1
 80085e6:	b089      	sub	sp, #36	; 0x24
 80085e8:	4293      	cmp	r3, r2
 80085ea:	da01      	bge.n	80085f0 <__multiply+0x14>
 80085ec:	0025      	movs	r5, r4
 80085ee:	000c      	movs	r4, r1
 80085f0:	692f      	ldr	r7, [r5, #16]
 80085f2:	6926      	ldr	r6, [r4, #16]
 80085f4:	6869      	ldr	r1, [r5, #4]
 80085f6:	19bb      	adds	r3, r7, r6
 80085f8:	9302      	str	r3, [sp, #8]
 80085fa:	68ab      	ldr	r3, [r5, #8]
 80085fc:	19ba      	adds	r2, r7, r6
 80085fe:	4293      	cmp	r3, r2
 8008600:	da00      	bge.n	8008604 <__multiply+0x28>
 8008602:	3101      	adds	r1, #1
 8008604:	f7ff fe94 	bl	8008330 <_Balloc>
 8008608:	9001      	str	r0, [sp, #4]
 800860a:	2800      	cmp	r0, #0
 800860c:	d106      	bne.n	800861c <__multiply+0x40>
 800860e:	215e      	movs	r1, #94	; 0x5e
 8008610:	0002      	movs	r2, r0
 8008612:	4b48      	ldr	r3, [pc, #288]	; (8008734 <__multiply+0x158>)
 8008614:	4848      	ldr	r0, [pc, #288]	; (8008738 <__multiply+0x15c>)
 8008616:	31ff      	adds	r1, #255	; 0xff
 8008618:	f7ff fac6 	bl	8007ba8 <__assert_func>
 800861c:	9b01      	ldr	r3, [sp, #4]
 800861e:	2200      	movs	r2, #0
 8008620:	3314      	adds	r3, #20
 8008622:	469c      	mov	ip, r3
 8008624:	19bb      	adds	r3, r7, r6
 8008626:	009b      	lsls	r3, r3, #2
 8008628:	4463      	add	r3, ip
 800862a:	9303      	str	r3, [sp, #12]
 800862c:	4663      	mov	r3, ip
 800862e:	9903      	ldr	r1, [sp, #12]
 8008630:	428b      	cmp	r3, r1
 8008632:	d32c      	bcc.n	800868e <__multiply+0xb2>
 8008634:	002b      	movs	r3, r5
 8008636:	0022      	movs	r2, r4
 8008638:	3314      	adds	r3, #20
 800863a:	00bf      	lsls	r7, r7, #2
 800863c:	3214      	adds	r2, #20
 800863e:	9306      	str	r3, [sp, #24]
 8008640:	00b6      	lsls	r6, r6, #2
 8008642:	19db      	adds	r3, r3, r7
 8008644:	9304      	str	r3, [sp, #16]
 8008646:	1993      	adds	r3, r2, r6
 8008648:	9307      	str	r3, [sp, #28]
 800864a:	2304      	movs	r3, #4
 800864c:	9305      	str	r3, [sp, #20]
 800864e:	002b      	movs	r3, r5
 8008650:	9904      	ldr	r1, [sp, #16]
 8008652:	3315      	adds	r3, #21
 8008654:	9200      	str	r2, [sp, #0]
 8008656:	4299      	cmp	r1, r3
 8008658:	d305      	bcc.n	8008666 <__multiply+0x8a>
 800865a:	1b4b      	subs	r3, r1, r5
 800865c:	3b15      	subs	r3, #21
 800865e:	089b      	lsrs	r3, r3, #2
 8008660:	3301      	adds	r3, #1
 8008662:	009b      	lsls	r3, r3, #2
 8008664:	9305      	str	r3, [sp, #20]
 8008666:	9b07      	ldr	r3, [sp, #28]
 8008668:	9a00      	ldr	r2, [sp, #0]
 800866a:	429a      	cmp	r2, r3
 800866c:	d311      	bcc.n	8008692 <__multiply+0xb6>
 800866e:	9b02      	ldr	r3, [sp, #8]
 8008670:	2b00      	cmp	r3, #0
 8008672:	dd06      	ble.n	8008682 <__multiply+0xa6>
 8008674:	9b03      	ldr	r3, [sp, #12]
 8008676:	3b04      	subs	r3, #4
 8008678:	9303      	str	r3, [sp, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	9300      	str	r3, [sp, #0]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d053      	beq.n	800872a <__multiply+0x14e>
 8008682:	9b01      	ldr	r3, [sp, #4]
 8008684:	9a02      	ldr	r2, [sp, #8]
 8008686:	0018      	movs	r0, r3
 8008688:	611a      	str	r2, [r3, #16]
 800868a:	b009      	add	sp, #36	; 0x24
 800868c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800868e:	c304      	stmia	r3!, {r2}
 8008690:	e7cd      	b.n	800862e <__multiply+0x52>
 8008692:	9b00      	ldr	r3, [sp, #0]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	b298      	uxth	r0, r3
 8008698:	2800      	cmp	r0, #0
 800869a:	d01b      	beq.n	80086d4 <__multiply+0xf8>
 800869c:	4667      	mov	r7, ip
 800869e:	2400      	movs	r4, #0
 80086a0:	9e06      	ldr	r6, [sp, #24]
 80086a2:	ce02      	ldmia	r6!, {r1}
 80086a4:	683a      	ldr	r2, [r7, #0]
 80086a6:	b28b      	uxth	r3, r1
 80086a8:	4343      	muls	r3, r0
 80086aa:	b292      	uxth	r2, r2
 80086ac:	189b      	adds	r3, r3, r2
 80086ae:	191b      	adds	r3, r3, r4
 80086b0:	0c0c      	lsrs	r4, r1, #16
 80086b2:	4344      	muls	r4, r0
 80086b4:	683a      	ldr	r2, [r7, #0]
 80086b6:	0c11      	lsrs	r1, r2, #16
 80086b8:	1861      	adds	r1, r4, r1
 80086ba:	0c1c      	lsrs	r4, r3, #16
 80086bc:	1909      	adds	r1, r1, r4
 80086be:	0c0c      	lsrs	r4, r1, #16
 80086c0:	b29b      	uxth	r3, r3
 80086c2:	0409      	lsls	r1, r1, #16
 80086c4:	430b      	orrs	r3, r1
 80086c6:	c708      	stmia	r7!, {r3}
 80086c8:	9b04      	ldr	r3, [sp, #16]
 80086ca:	42b3      	cmp	r3, r6
 80086cc:	d8e9      	bhi.n	80086a2 <__multiply+0xc6>
 80086ce:	4663      	mov	r3, ip
 80086d0:	9a05      	ldr	r2, [sp, #20]
 80086d2:	509c      	str	r4, [r3, r2]
 80086d4:	9b00      	ldr	r3, [sp, #0]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	0c1e      	lsrs	r6, r3, #16
 80086da:	d020      	beq.n	800871e <__multiply+0x142>
 80086dc:	4663      	mov	r3, ip
 80086de:	002c      	movs	r4, r5
 80086e0:	4660      	mov	r0, ip
 80086e2:	2700      	movs	r7, #0
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	3414      	adds	r4, #20
 80086e8:	6822      	ldr	r2, [r4, #0]
 80086ea:	b29b      	uxth	r3, r3
 80086ec:	b291      	uxth	r1, r2
 80086ee:	4371      	muls	r1, r6
 80086f0:	6802      	ldr	r2, [r0, #0]
 80086f2:	0c12      	lsrs	r2, r2, #16
 80086f4:	1889      	adds	r1, r1, r2
 80086f6:	19cf      	adds	r7, r1, r7
 80086f8:	0439      	lsls	r1, r7, #16
 80086fa:	430b      	orrs	r3, r1
 80086fc:	6003      	str	r3, [r0, #0]
 80086fe:	cc02      	ldmia	r4!, {r1}
 8008700:	6843      	ldr	r3, [r0, #4]
 8008702:	0c09      	lsrs	r1, r1, #16
 8008704:	4371      	muls	r1, r6
 8008706:	b29b      	uxth	r3, r3
 8008708:	0c3f      	lsrs	r7, r7, #16
 800870a:	18cb      	adds	r3, r1, r3
 800870c:	9a04      	ldr	r2, [sp, #16]
 800870e:	19db      	adds	r3, r3, r7
 8008710:	0c1f      	lsrs	r7, r3, #16
 8008712:	3004      	adds	r0, #4
 8008714:	42a2      	cmp	r2, r4
 8008716:	d8e7      	bhi.n	80086e8 <__multiply+0x10c>
 8008718:	4662      	mov	r2, ip
 800871a:	9905      	ldr	r1, [sp, #20]
 800871c:	5053      	str	r3, [r2, r1]
 800871e:	9b00      	ldr	r3, [sp, #0]
 8008720:	3304      	adds	r3, #4
 8008722:	9300      	str	r3, [sp, #0]
 8008724:	2304      	movs	r3, #4
 8008726:	449c      	add	ip, r3
 8008728:	e79d      	b.n	8008666 <__multiply+0x8a>
 800872a:	9b02      	ldr	r3, [sp, #8]
 800872c:	3b01      	subs	r3, #1
 800872e:	9302      	str	r3, [sp, #8]
 8008730:	e79d      	b.n	800866e <__multiply+0x92>
 8008732:	46c0      	nop			; (mov r8, r8)
 8008734:	0800a319 	.word	0x0800a319
 8008738:	0800a3a4 	.word	0x0800a3a4

0800873c <__pow5mult>:
 800873c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800873e:	2303      	movs	r3, #3
 8008740:	0015      	movs	r5, r2
 8008742:	0007      	movs	r7, r0
 8008744:	000e      	movs	r6, r1
 8008746:	401a      	ands	r2, r3
 8008748:	421d      	tst	r5, r3
 800874a:	d008      	beq.n	800875e <__pow5mult+0x22>
 800874c:	4925      	ldr	r1, [pc, #148]	; (80087e4 <__pow5mult+0xa8>)
 800874e:	3a01      	subs	r2, #1
 8008750:	0092      	lsls	r2, r2, #2
 8008752:	5852      	ldr	r2, [r2, r1]
 8008754:	2300      	movs	r3, #0
 8008756:	0031      	movs	r1, r6
 8008758:	f7ff fe52 	bl	8008400 <__multadd>
 800875c:	0006      	movs	r6, r0
 800875e:	10ad      	asrs	r5, r5, #2
 8008760:	d03d      	beq.n	80087de <__pow5mult+0xa2>
 8008762:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8008764:	2c00      	cmp	r4, #0
 8008766:	d10f      	bne.n	8008788 <__pow5mult+0x4c>
 8008768:	2010      	movs	r0, #16
 800876a:	f7fe f951 	bl	8006a10 <malloc>
 800876e:	1e02      	subs	r2, r0, #0
 8008770:	6278      	str	r0, [r7, #36]	; 0x24
 8008772:	d105      	bne.n	8008780 <__pow5mult+0x44>
 8008774:	21d7      	movs	r1, #215	; 0xd7
 8008776:	4b1c      	ldr	r3, [pc, #112]	; (80087e8 <__pow5mult+0xac>)
 8008778:	481c      	ldr	r0, [pc, #112]	; (80087ec <__pow5mult+0xb0>)
 800877a:	0049      	lsls	r1, r1, #1
 800877c:	f7ff fa14 	bl	8007ba8 <__assert_func>
 8008780:	6044      	str	r4, [r0, #4]
 8008782:	6084      	str	r4, [r0, #8]
 8008784:	6004      	str	r4, [r0, #0]
 8008786:	60c4      	str	r4, [r0, #12]
 8008788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800878a:	689c      	ldr	r4, [r3, #8]
 800878c:	9301      	str	r3, [sp, #4]
 800878e:	2c00      	cmp	r4, #0
 8008790:	d108      	bne.n	80087a4 <__pow5mult+0x68>
 8008792:	0038      	movs	r0, r7
 8008794:	4916      	ldr	r1, [pc, #88]	; (80087f0 <__pow5mult+0xb4>)
 8008796:	f7ff ff0b 	bl	80085b0 <__i2b>
 800879a:	9b01      	ldr	r3, [sp, #4]
 800879c:	0004      	movs	r4, r0
 800879e:	6098      	str	r0, [r3, #8]
 80087a0:	2300      	movs	r3, #0
 80087a2:	6003      	str	r3, [r0, #0]
 80087a4:	2301      	movs	r3, #1
 80087a6:	421d      	tst	r5, r3
 80087a8:	d00a      	beq.n	80087c0 <__pow5mult+0x84>
 80087aa:	0031      	movs	r1, r6
 80087ac:	0022      	movs	r2, r4
 80087ae:	0038      	movs	r0, r7
 80087b0:	f7ff ff14 	bl	80085dc <__multiply>
 80087b4:	0031      	movs	r1, r6
 80087b6:	9001      	str	r0, [sp, #4]
 80087b8:	0038      	movs	r0, r7
 80087ba:	f7ff fdfd 	bl	80083b8 <_Bfree>
 80087be:	9e01      	ldr	r6, [sp, #4]
 80087c0:	106d      	asrs	r5, r5, #1
 80087c2:	d00c      	beq.n	80087de <__pow5mult+0xa2>
 80087c4:	6820      	ldr	r0, [r4, #0]
 80087c6:	2800      	cmp	r0, #0
 80087c8:	d107      	bne.n	80087da <__pow5mult+0x9e>
 80087ca:	0022      	movs	r2, r4
 80087cc:	0021      	movs	r1, r4
 80087ce:	0038      	movs	r0, r7
 80087d0:	f7ff ff04 	bl	80085dc <__multiply>
 80087d4:	2300      	movs	r3, #0
 80087d6:	6020      	str	r0, [r4, #0]
 80087d8:	6003      	str	r3, [r0, #0]
 80087da:	0004      	movs	r4, r0
 80087dc:	e7e2      	b.n	80087a4 <__pow5mult+0x68>
 80087de:	0030      	movs	r0, r6
 80087e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80087e2:	46c0      	nop			; (mov r8, r8)
 80087e4:	0800a4f0 	.word	0x0800a4f0
 80087e8:	0800a168 	.word	0x0800a168
 80087ec:	0800a3a4 	.word	0x0800a3a4
 80087f0:	00000271 	.word	0x00000271

080087f4 <__lshift>:
 80087f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087f6:	000c      	movs	r4, r1
 80087f8:	0017      	movs	r7, r2
 80087fa:	6923      	ldr	r3, [r4, #16]
 80087fc:	1155      	asrs	r5, r2, #5
 80087fe:	b087      	sub	sp, #28
 8008800:	18eb      	adds	r3, r5, r3
 8008802:	9302      	str	r3, [sp, #8]
 8008804:	3301      	adds	r3, #1
 8008806:	9301      	str	r3, [sp, #4]
 8008808:	6849      	ldr	r1, [r1, #4]
 800880a:	68a3      	ldr	r3, [r4, #8]
 800880c:	9004      	str	r0, [sp, #16]
 800880e:	9a01      	ldr	r2, [sp, #4]
 8008810:	4293      	cmp	r3, r2
 8008812:	db10      	blt.n	8008836 <__lshift+0x42>
 8008814:	9804      	ldr	r0, [sp, #16]
 8008816:	f7ff fd8b 	bl	8008330 <_Balloc>
 800881a:	2300      	movs	r3, #0
 800881c:	0002      	movs	r2, r0
 800881e:	0006      	movs	r6, r0
 8008820:	0019      	movs	r1, r3
 8008822:	3214      	adds	r2, #20
 8008824:	4298      	cmp	r0, r3
 8008826:	d10c      	bne.n	8008842 <__lshift+0x4e>
 8008828:	21da      	movs	r1, #218	; 0xda
 800882a:	0002      	movs	r2, r0
 800882c:	4b26      	ldr	r3, [pc, #152]	; (80088c8 <__lshift+0xd4>)
 800882e:	4827      	ldr	r0, [pc, #156]	; (80088cc <__lshift+0xd8>)
 8008830:	31ff      	adds	r1, #255	; 0xff
 8008832:	f7ff f9b9 	bl	8007ba8 <__assert_func>
 8008836:	3101      	adds	r1, #1
 8008838:	005b      	lsls	r3, r3, #1
 800883a:	e7e8      	b.n	800880e <__lshift+0x1a>
 800883c:	0098      	lsls	r0, r3, #2
 800883e:	5011      	str	r1, [r2, r0]
 8008840:	3301      	adds	r3, #1
 8008842:	42ab      	cmp	r3, r5
 8008844:	dbfa      	blt.n	800883c <__lshift+0x48>
 8008846:	43eb      	mvns	r3, r5
 8008848:	17db      	asrs	r3, r3, #31
 800884a:	401d      	ands	r5, r3
 800884c:	211f      	movs	r1, #31
 800884e:	0023      	movs	r3, r4
 8008850:	0038      	movs	r0, r7
 8008852:	00ad      	lsls	r5, r5, #2
 8008854:	1955      	adds	r5, r2, r5
 8008856:	6922      	ldr	r2, [r4, #16]
 8008858:	3314      	adds	r3, #20
 800885a:	0092      	lsls	r2, r2, #2
 800885c:	4008      	ands	r0, r1
 800885e:	4684      	mov	ip, r0
 8008860:	189a      	adds	r2, r3, r2
 8008862:	420f      	tst	r7, r1
 8008864:	d02a      	beq.n	80088bc <__lshift+0xc8>
 8008866:	3101      	adds	r1, #1
 8008868:	1a09      	subs	r1, r1, r0
 800886a:	9105      	str	r1, [sp, #20]
 800886c:	2100      	movs	r1, #0
 800886e:	9503      	str	r5, [sp, #12]
 8008870:	4667      	mov	r7, ip
 8008872:	6818      	ldr	r0, [r3, #0]
 8008874:	40b8      	lsls	r0, r7
 8008876:	4301      	orrs	r1, r0
 8008878:	9803      	ldr	r0, [sp, #12]
 800887a:	c002      	stmia	r0!, {r1}
 800887c:	cb02      	ldmia	r3!, {r1}
 800887e:	9003      	str	r0, [sp, #12]
 8008880:	9805      	ldr	r0, [sp, #20]
 8008882:	40c1      	lsrs	r1, r0
 8008884:	429a      	cmp	r2, r3
 8008886:	d8f3      	bhi.n	8008870 <__lshift+0x7c>
 8008888:	0020      	movs	r0, r4
 800888a:	3015      	adds	r0, #21
 800888c:	2304      	movs	r3, #4
 800888e:	4282      	cmp	r2, r0
 8008890:	d304      	bcc.n	800889c <__lshift+0xa8>
 8008892:	1b13      	subs	r3, r2, r4
 8008894:	3b15      	subs	r3, #21
 8008896:	089b      	lsrs	r3, r3, #2
 8008898:	3301      	adds	r3, #1
 800889a:	009b      	lsls	r3, r3, #2
 800889c:	50e9      	str	r1, [r5, r3]
 800889e:	2900      	cmp	r1, #0
 80088a0:	d002      	beq.n	80088a8 <__lshift+0xb4>
 80088a2:	9b02      	ldr	r3, [sp, #8]
 80088a4:	3302      	adds	r3, #2
 80088a6:	9301      	str	r3, [sp, #4]
 80088a8:	9b01      	ldr	r3, [sp, #4]
 80088aa:	9804      	ldr	r0, [sp, #16]
 80088ac:	3b01      	subs	r3, #1
 80088ae:	0021      	movs	r1, r4
 80088b0:	6133      	str	r3, [r6, #16]
 80088b2:	f7ff fd81 	bl	80083b8 <_Bfree>
 80088b6:	0030      	movs	r0, r6
 80088b8:	b007      	add	sp, #28
 80088ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088bc:	cb02      	ldmia	r3!, {r1}
 80088be:	c502      	stmia	r5!, {r1}
 80088c0:	429a      	cmp	r2, r3
 80088c2:	d8fb      	bhi.n	80088bc <__lshift+0xc8>
 80088c4:	e7f0      	b.n	80088a8 <__lshift+0xb4>
 80088c6:	46c0      	nop			; (mov r8, r8)
 80088c8:	0800a319 	.word	0x0800a319
 80088cc:	0800a3a4 	.word	0x0800a3a4

080088d0 <__mcmp>:
 80088d0:	6902      	ldr	r2, [r0, #16]
 80088d2:	690b      	ldr	r3, [r1, #16]
 80088d4:	b530      	push	{r4, r5, lr}
 80088d6:	0004      	movs	r4, r0
 80088d8:	1ad0      	subs	r0, r2, r3
 80088da:	429a      	cmp	r2, r3
 80088dc:	d10d      	bne.n	80088fa <__mcmp+0x2a>
 80088de:	009b      	lsls	r3, r3, #2
 80088e0:	3414      	adds	r4, #20
 80088e2:	3114      	adds	r1, #20
 80088e4:	18e2      	adds	r2, r4, r3
 80088e6:	18c9      	adds	r1, r1, r3
 80088e8:	3a04      	subs	r2, #4
 80088ea:	3904      	subs	r1, #4
 80088ec:	6815      	ldr	r5, [r2, #0]
 80088ee:	680b      	ldr	r3, [r1, #0]
 80088f0:	429d      	cmp	r5, r3
 80088f2:	d003      	beq.n	80088fc <__mcmp+0x2c>
 80088f4:	2001      	movs	r0, #1
 80088f6:	429d      	cmp	r5, r3
 80088f8:	d303      	bcc.n	8008902 <__mcmp+0x32>
 80088fa:	bd30      	pop	{r4, r5, pc}
 80088fc:	4294      	cmp	r4, r2
 80088fe:	d3f3      	bcc.n	80088e8 <__mcmp+0x18>
 8008900:	e7fb      	b.n	80088fa <__mcmp+0x2a>
 8008902:	4240      	negs	r0, r0
 8008904:	e7f9      	b.n	80088fa <__mcmp+0x2a>
	...

08008908 <__mdiff>:
 8008908:	b5f0      	push	{r4, r5, r6, r7, lr}
 800890a:	000e      	movs	r6, r1
 800890c:	0007      	movs	r7, r0
 800890e:	0011      	movs	r1, r2
 8008910:	0030      	movs	r0, r6
 8008912:	b087      	sub	sp, #28
 8008914:	0014      	movs	r4, r2
 8008916:	f7ff ffdb 	bl	80088d0 <__mcmp>
 800891a:	1e05      	subs	r5, r0, #0
 800891c:	d110      	bne.n	8008940 <__mdiff+0x38>
 800891e:	0001      	movs	r1, r0
 8008920:	0038      	movs	r0, r7
 8008922:	f7ff fd05 	bl	8008330 <_Balloc>
 8008926:	1e02      	subs	r2, r0, #0
 8008928:	d104      	bne.n	8008934 <__mdiff+0x2c>
 800892a:	4b40      	ldr	r3, [pc, #256]	; (8008a2c <__mdiff+0x124>)
 800892c:	4940      	ldr	r1, [pc, #256]	; (8008a30 <__mdiff+0x128>)
 800892e:	4841      	ldr	r0, [pc, #260]	; (8008a34 <__mdiff+0x12c>)
 8008930:	f7ff f93a 	bl	8007ba8 <__assert_func>
 8008934:	2301      	movs	r3, #1
 8008936:	6145      	str	r5, [r0, #20]
 8008938:	6103      	str	r3, [r0, #16]
 800893a:	0010      	movs	r0, r2
 800893c:	b007      	add	sp, #28
 800893e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008940:	2301      	movs	r3, #1
 8008942:	9301      	str	r3, [sp, #4]
 8008944:	2800      	cmp	r0, #0
 8008946:	db04      	blt.n	8008952 <__mdiff+0x4a>
 8008948:	0023      	movs	r3, r4
 800894a:	0034      	movs	r4, r6
 800894c:	001e      	movs	r6, r3
 800894e:	2300      	movs	r3, #0
 8008950:	9301      	str	r3, [sp, #4]
 8008952:	0038      	movs	r0, r7
 8008954:	6861      	ldr	r1, [r4, #4]
 8008956:	f7ff fceb 	bl	8008330 <_Balloc>
 800895a:	1e02      	subs	r2, r0, #0
 800895c:	d103      	bne.n	8008966 <__mdiff+0x5e>
 800895e:	2190      	movs	r1, #144	; 0x90
 8008960:	4b32      	ldr	r3, [pc, #200]	; (8008a2c <__mdiff+0x124>)
 8008962:	0089      	lsls	r1, r1, #2
 8008964:	e7e3      	b.n	800892e <__mdiff+0x26>
 8008966:	9b01      	ldr	r3, [sp, #4]
 8008968:	2700      	movs	r7, #0
 800896a:	60c3      	str	r3, [r0, #12]
 800896c:	6920      	ldr	r0, [r4, #16]
 800896e:	3414      	adds	r4, #20
 8008970:	9401      	str	r4, [sp, #4]
 8008972:	9b01      	ldr	r3, [sp, #4]
 8008974:	0084      	lsls	r4, r0, #2
 8008976:	191b      	adds	r3, r3, r4
 8008978:	0034      	movs	r4, r6
 800897a:	9302      	str	r3, [sp, #8]
 800897c:	6933      	ldr	r3, [r6, #16]
 800897e:	3414      	adds	r4, #20
 8008980:	0099      	lsls	r1, r3, #2
 8008982:	1863      	adds	r3, r4, r1
 8008984:	9303      	str	r3, [sp, #12]
 8008986:	0013      	movs	r3, r2
 8008988:	3314      	adds	r3, #20
 800898a:	469c      	mov	ip, r3
 800898c:	9305      	str	r3, [sp, #20]
 800898e:	9b01      	ldr	r3, [sp, #4]
 8008990:	9304      	str	r3, [sp, #16]
 8008992:	9b04      	ldr	r3, [sp, #16]
 8008994:	cc02      	ldmia	r4!, {r1}
 8008996:	cb20      	ldmia	r3!, {r5}
 8008998:	9304      	str	r3, [sp, #16]
 800899a:	b2ab      	uxth	r3, r5
 800899c:	19df      	adds	r7, r3, r7
 800899e:	b28b      	uxth	r3, r1
 80089a0:	1afb      	subs	r3, r7, r3
 80089a2:	0c09      	lsrs	r1, r1, #16
 80089a4:	0c2d      	lsrs	r5, r5, #16
 80089a6:	1a6d      	subs	r5, r5, r1
 80089a8:	1419      	asrs	r1, r3, #16
 80089aa:	186d      	adds	r5, r5, r1
 80089ac:	4661      	mov	r1, ip
 80089ae:	142f      	asrs	r7, r5, #16
 80089b0:	b29b      	uxth	r3, r3
 80089b2:	042d      	lsls	r5, r5, #16
 80089b4:	432b      	orrs	r3, r5
 80089b6:	c108      	stmia	r1!, {r3}
 80089b8:	9b03      	ldr	r3, [sp, #12]
 80089ba:	468c      	mov	ip, r1
 80089bc:	42a3      	cmp	r3, r4
 80089be:	d8e8      	bhi.n	8008992 <__mdiff+0x8a>
 80089c0:	0031      	movs	r1, r6
 80089c2:	9c03      	ldr	r4, [sp, #12]
 80089c4:	3115      	adds	r1, #21
 80089c6:	2304      	movs	r3, #4
 80089c8:	428c      	cmp	r4, r1
 80089ca:	d304      	bcc.n	80089d6 <__mdiff+0xce>
 80089cc:	1ba3      	subs	r3, r4, r6
 80089ce:	3b15      	subs	r3, #21
 80089d0:	089b      	lsrs	r3, r3, #2
 80089d2:	3301      	adds	r3, #1
 80089d4:	009b      	lsls	r3, r3, #2
 80089d6:	9901      	ldr	r1, [sp, #4]
 80089d8:	18cc      	adds	r4, r1, r3
 80089da:	9905      	ldr	r1, [sp, #20]
 80089dc:	0026      	movs	r6, r4
 80089de:	18cb      	adds	r3, r1, r3
 80089e0:	469c      	mov	ip, r3
 80089e2:	9902      	ldr	r1, [sp, #8]
 80089e4:	428e      	cmp	r6, r1
 80089e6:	d310      	bcc.n	8008a0a <__mdiff+0x102>
 80089e8:	9e02      	ldr	r6, [sp, #8]
 80089ea:	1ee1      	subs	r1, r4, #3
 80089ec:	2500      	movs	r5, #0
 80089ee:	428e      	cmp	r6, r1
 80089f0:	d304      	bcc.n	80089fc <__mdiff+0xf4>
 80089f2:	0031      	movs	r1, r6
 80089f4:	3103      	adds	r1, #3
 80089f6:	1b0c      	subs	r4, r1, r4
 80089f8:	08a4      	lsrs	r4, r4, #2
 80089fa:	00a5      	lsls	r5, r4, #2
 80089fc:	195b      	adds	r3, r3, r5
 80089fe:	3b04      	subs	r3, #4
 8008a00:	6819      	ldr	r1, [r3, #0]
 8008a02:	2900      	cmp	r1, #0
 8008a04:	d00f      	beq.n	8008a26 <__mdiff+0x11e>
 8008a06:	6110      	str	r0, [r2, #16]
 8008a08:	e797      	b.n	800893a <__mdiff+0x32>
 8008a0a:	ce02      	ldmia	r6!, {r1}
 8008a0c:	b28d      	uxth	r5, r1
 8008a0e:	19ed      	adds	r5, r5, r7
 8008a10:	0c0f      	lsrs	r7, r1, #16
 8008a12:	1429      	asrs	r1, r5, #16
 8008a14:	1879      	adds	r1, r7, r1
 8008a16:	140f      	asrs	r7, r1, #16
 8008a18:	b2ad      	uxth	r5, r5
 8008a1a:	0409      	lsls	r1, r1, #16
 8008a1c:	430d      	orrs	r5, r1
 8008a1e:	4661      	mov	r1, ip
 8008a20:	c120      	stmia	r1!, {r5}
 8008a22:	468c      	mov	ip, r1
 8008a24:	e7dd      	b.n	80089e2 <__mdiff+0xda>
 8008a26:	3801      	subs	r0, #1
 8008a28:	e7e9      	b.n	80089fe <__mdiff+0xf6>
 8008a2a:	46c0      	nop			; (mov r8, r8)
 8008a2c:	0800a319 	.word	0x0800a319
 8008a30:	00000232 	.word	0x00000232
 8008a34:	0800a3a4 	.word	0x0800a3a4

08008a38 <__ulp>:
 8008a38:	4b0f      	ldr	r3, [pc, #60]	; (8008a78 <__ulp+0x40>)
 8008a3a:	4019      	ands	r1, r3
 8008a3c:	4b0f      	ldr	r3, [pc, #60]	; (8008a7c <__ulp+0x44>)
 8008a3e:	18c9      	adds	r1, r1, r3
 8008a40:	2900      	cmp	r1, #0
 8008a42:	dd04      	ble.n	8008a4e <__ulp+0x16>
 8008a44:	2200      	movs	r2, #0
 8008a46:	000b      	movs	r3, r1
 8008a48:	0010      	movs	r0, r2
 8008a4a:	0019      	movs	r1, r3
 8008a4c:	4770      	bx	lr
 8008a4e:	4249      	negs	r1, r1
 8008a50:	2200      	movs	r2, #0
 8008a52:	2300      	movs	r3, #0
 8008a54:	1509      	asrs	r1, r1, #20
 8008a56:	2913      	cmp	r1, #19
 8008a58:	dc04      	bgt.n	8008a64 <__ulp+0x2c>
 8008a5a:	2080      	movs	r0, #128	; 0x80
 8008a5c:	0300      	lsls	r0, r0, #12
 8008a5e:	4108      	asrs	r0, r1
 8008a60:	0003      	movs	r3, r0
 8008a62:	e7f1      	b.n	8008a48 <__ulp+0x10>
 8008a64:	3914      	subs	r1, #20
 8008a66:	2001      	movs	r0, #1
 8008a68:	291e      	cmp	r1, #30
 8008a6a:	dc02      	bgt.n	8008a72 <__ulp+0x3a>
 8008a6c:	2080      	movs	r0, #128	; 0x80
 8008a6e:	0600      	lsls	r0, r0, #24
 8008a70:	40c8      	lsrs	r0, r1
 8008a72:	0002      	movs	r2, r0
 8008a74:	e7e8      	b.n	8008a48 <__ulp+0x10>
 8008a76:	46c0      	nop			; (mov r8, r8)
 8008a78:	7ff00000 	.word	0x7ff00000
 8008a7c:	fcc00000 	.word	0xfcc00000

08008a80 <__b2d>:
 8008a80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a82:	0006      	movs	r6, r0
 8008a84:	6903      	ldr	r3, [r0, #16]
 8008a86:	3614      	adds	r6, #20
 8008a88:	009b      	lsls	r3, r3, #2
 8008a8a:	18f3      	adds	r3, r6, r3
 8008a8c:	1f1d      	subs	r5, r3, #4
 8008a8e:	682c      	ldr	r4, [r5, #0]
 8008a90:	000f      	movs	r7, r1
 8008a92:	0020      	movs	r0, r4
 8008a94:	9301      	str	r3, [sp, #4]
 8008a96:	f7ff fd43 	bl	8008520 <__hi0bits>
 8008a9a:	2320      	movs	r3, #32
 8008a9c:	1a1b      	subs	r3, r3, r0
 8008a9e:	491f      	ldr	r1, [pc, #124]	; (8008b1c <__b2d+0x9c>)
 8008aa0:	603b      	str	r3, [r7, #0]
 8008aa2:	280a      	cmp	r0, #10
 8008aa4:	dc16      	bgt.n	8008ad4 <__b2d+0x54>
 8008aa6:	230b      	movs	r3, #11
 8008aa8:	0027      	movs	r7, r4
 8008aaa:	1a1b      	subs	r3, r3, r0
 8008aac:	40df      	lsrs	r7, r3
 8008aae:	4339      	orrs	r1, r7
 8008ab0:	469c      	mov	ip, r3
 8008ab2:	000b      	movs	r3, r1
 8008ab4:	2100      	movs	r1, #0
 8008ab6:	42ae      	cmp	r6, r5
 8008ab8:	d202      	bcs.n	8008ac0 <__b2d+0x40>
 8008aba:	9901      	ldr	r1, [sp, #4]
 8008abc:	3908      	subs	r1, #8
 8008abe:	6809      	ldr	r1, [r1, #0]
 8008ac0:	3015      	adds	r0, #21
 8008ac2:	4084      	lsls	r4, r0
 8008ac4:	4660      	mov	r0, ip
 8008ac6:	40c1      	lsrs	r1, r0
 8008ac8:	430c      	orrs	r4, r1
 8008aca:	0022      	movs	r2, r4
 8008acc:	0010      	movs	r0, r2
 8008ace:	0019      	movs	r1, r3
 8008ad0:	b003      	add	sp, #12
 8008ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ad4:	2700      	movs	r7, #0
 8008ad6:	42ae      	cmp	r6, r5
 8008ad8:	d202      	bcs.n	8008ae0 <__b2d+0x60>
 8008ada:	9d01      	ldr	r5, [sp, #4]
 8008adc:	3d08      	subs	r5, #8
 8008ade:	682f      	ldr	r7, [r5, #0]
 8008ae0:	230b      	movs	r3, #11
 8008ae2:	425b      	negs	r3, r3
 8008ae4:	469c      	mov	ip, r3
 8008ae6:	4484      	add	ip, r0
 8008ae8:	280b      	cmp	r0, #11
 8008aea:	d013      	beq.n	8008b14 <__b2d+0x94>
 8008aec:	4663      	mov	r3, ip
 8008aee:	2020      	movs	r0, #32
 8008af0:	409c      	lsls	r4, r3
 8008af2:	1ac0      	subs	r0, r0, r3
 8008af4:	003b      	movs	r3, r7
 8008af6:	40c3      	lsrs	r3, r0
 8008af8:	431c      	orrs	r4, r3
 8008afa:	4321      	orrs	r1, r4
 8008afc:	000b      	movs	r3, r1
 8008afe:	2100      	movs	r1, #0
 8008b00:	42b5      	cmp	r5, r6
 8008b02:	d901      	bls.n	8008b08 <__b2d+0x88>
 8008b04:	3d04      	subs	r5, #4
 8008b06:	6829      	ldr	r1, [r5, #0]
 8008b08:	4664      	mov	r4, ip
 8008b0a:	40c1      	lsrs	r1, r0
 8008b0c:	40a7      	lsls	r7, r4
 8008b0e:	430f      	orrs	r7, r1
 8008b10:	003a      	movs	r2, r7
 8008b12:	e7db      	b.n	8008acc <__b2d+0x4c>
 8008b14:	4321      	orrs	r1, r4
 8008b16:	000b      	movs	r3, r1
 8008b18:	e7fa      	b.n	8008b10 <__b2d+0x90>
 8008b1a:	46c0      	nop			; (mov r8, r8)
 8008b1c:	3ff00000 	.word	0x3ff00000

08008b20 <__d2b>:
 8008b20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b22:	2101      	movs	r1, #1
 8008b24:	0014      	movs	r4, r2
 8008b26:	001e      	movs	r6, r3
 8008b28:	9f08      	ldr	r7, [sp, #32]
 8008b2a:	f7ff fc01 	bl	8008330 <_Balloc>
 8008b2e:	1e05      	subs	r5, r0, #0
 8008b30:	d105      	bne.n	8008b3e <__d2b+0x1e>
 8008b32:	0002      	movs	r2, r0
 8008b34:	4b26      	ldr	r3, [pc, #152]	; (8008bd0 <__d2b+0xb0>)
 8008b36:	4927      	ldr	r1, [pc, #156]	; (8008bd4 <__d2b+0xb4>)
 8008b38:	4827      	ldr	r0, [pc, #156]	; (8008bd8 <__d2b+0xb8>)
 8008b3a:	f7ff f835 	bl	8007ba8 <__assert_func>
 8008b3e:	0333      	lsls	r3, r6, #12
 8008b40:	0076      	lsls	r6, r6, #1
 8008b42:	0b1b      	lsrs	r3, r3, #12
 8008b44:	0d76      	lsrs	r6, r6, #21
 8008b46:	d124      	bne.n	8008b92 <__d2b+0x72>
 8008b48:	9301      	str	r3, [sp, #4]
 8008b4a:	2c00      	cmp	r4, #0
 8008b4c:	d027      	beq.n	8008b9e <__d2b+0x7e>
 8008b4e:	4668      	mov	r0, sp
 8008b50:	9400      	str	r4, [sp, #0]
 8008b52:	f7ff fcff 	bl	8008554 <__lo0bits>
 8008b56:	9c00      	ldr	r4, [sp, #0]
 8008b58:	2800      	cmp	r0, #0
 8008b5a:	d01e      	beq.n	8008b9a <__d2b+0x7a>
 8008b5c:	9b01      	ldr	r3, [sp, #4]
 8008b5e:	2120      	movs	r1, #32
 8008b60:	001a      	movs	r2, r3
 8008b62:	1a09      	subs	r1, r1, r0
 8008b64:	408a      	lsls	r2, r1
 8008b66:	40c3      	lsrs	r3, r0
 8008b68:	4322      	orrs	r2, r4
 8008b6a:	616a      	str	r2, [r5, #20]
 8008b6c:	9301      	str	r3, [sp, #4]
 8008b6e:	9c01      	ldr	r4, [sp, #4]
 8008b70:	61ac      	str	r4, [r5, #24]
 8008b72:	1e63      	subs	r3, r4, #1
 8008b74:	419c      	sbcs	r4, r3
 8008b76:	3401      	adds	r4, #1
 8008b78:	612c      	str	r4, [r5, #16]
 8008b7a:	2e00      	cmp	r6, #0
 8008b7c:	d018      	beq.n	8008bb0 <__d2b+0x90>
 8008b7e:	4b17      	ldr	r3, [pc, #92]	; (8008bdc <__d2b+0xbc>)
 8008b80:	18f6      	adds	r6, r6, r3
 8008b82:	2335      	movs	r3, #53	; 0x35
 8008b84:	1836      	adds	r6, r6, r0
 8008b86:	1a18      	subs	r0, r3, r0
 8008b88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b8a:	603e      	str	r6, [r7, #0]
 8008b8c:	6018      	str	r0, [r3, #0]
 8008b8e:	0028      	movs	r0, r5
 8008b90:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008b92:	2280      	movs	r2, #128	; 0x80
 8008b94:	0352      	lsls	r2, r2, #13
 8008b96:	4313      	orrs	r3, r2
 8008b98:	e7d6      	b.n	8008b48 <__d2b+0x28>
 8008b9a:	616c      	str	r4, [r5, #20]
 8008b9c:	e7e7      	b.n	8008b6e <__d2b+0x4e>
 8008b9e:	a801      	add	r0, sp, #4
 8008ba0:	f7ff fcd8 	bl	8008554 <__lo0bits>
 8008ba4:	2401      	movs	r4, #1
 8008ba6:	9b01      	ldr	r3, [sp, #4]
 8008ba8:	612c      	str	r4, [r5, #16]
 8008baa:	616b      	str	r3, [r5, #20]
 8008bac:	3020      	adds	r0, #32
 8008bae:	e7e4      	b.n	8008b7a <__d2b+0x5a>
 8008bb0:	4b0b      	ldr	r3, [pc, #44]	; (8008be0 <__d2b+0xc0>)
 8008bb2:	18c0      	adds	r0, r0, r3
 8008bb4:	4b0b      	ldr	r3, [pc, #44]	; (8008be4 <__d2b+0xc4>)
 8008bb6:	6038      	str	r0, [r7, #0]
 8008bb8:	18e3      	adds	r3, r4, r3
 8008bba:	009b      	lsls	r3, r3, #2
 8008bbc:	18eb      	adds	r3, r5, r3
 8008bbe:	6958      	ldr	r0, [r3, #20]
 8008bc0:	f7ff fcae 	bl	8008520 <__hi0bits>
 8008bc4:	0164      	lsls	r4, r4, #5
 8008bc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bc8:	1a24      	subs	r4, r4, r0
 8008bca:	601c      	str	r4, [r3, #0]
 8008bcc:	e7df      	b.n	8008b8e <__d2b+0x6e>
 8008bce:	46c0      	nop			; (mov r8, r8)
 8008bd0:	0800a319 	.word	0x0800a319
 8008bd4:	0000030a 	.word	0x0000030a
 8008bd8:	0800a3a4 	.word	0x0800a3a4
 8008bdc:	fffffbcd 	.word	0xfffffbcd
 8008be0:	fffffbce 	.word	0xfffffbce
 8008be4:	3fffffff 	.word	0x3fffffff

08008be8 <__ratio>:
 8008be8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008bea:	b087      	sub	sp, #28
 8008bec:	000f      	movs	r7, r1
 8008bee:	a904      	add	r1, sp, #16
 8008bf0:	0006      	movs	r6, r0
 8008bf2:	f7ff ff45 	bl	8008a80 <__b2d>
 8008bf6:	9000      	str	r0, [sp, #0]
 8008bf8:	9101      	str	r1, [sp, #4]
 8008bfa:	9c00      	ldr	r4, [sp, #0]
 8008bfc:	9d01      	ldr	r5, [sp, #4]
 8008bfe:	0038      	movs	r0, r7
 8008c00:	a905      	add	r1, sp, #20
 8008c02:	f7ff ff3d 	bl	8008a80 <__b2d>
 8008c06:	9002      	str	r0, [sp, #8]
 8008c08:	9103      	str	r1, [sp, #12]
 8008c0a:	9a02      	ldr	r2, [sp, #8]
 8008c0c:	9b03      	ldr	r3, [sp, #12]
 8008c0e:	6931      	ldr	r1, [r6, #16]
 8008c10:	6938      	ldr	r0, [r7, #16]
 8008c12:	9e05      	ldr	r6, [sp, #20]
 8008c14:	1a08      	subs	r0, r1, r0
 8008c16:	9904      	ldr	r1, [sp, #16]
 8008c18:	0140      	lsls	r0, r0, #5
 8008c1a:	1b89      	subs	r1, r1, r6
 8008c1c:	1841      	adds	r1, r0, r1
 8008c1e:	0508      	lsls	r0, r1, #20
 8008c20:	2900      	cmp	r1, #0
 8008c22:	dd07      	ble.n	8008c34 <__ratio+0x4c>
 8008c24:	9901      	ldr	r1, [sp, #4]
 8008c26:	1845      	adds	r5, r0, r1
 8008c28:	0020      	movs	r0, r4
 8008c2a:	0029      	movs	r1, r5
 8008c2c:	f7f8 f9d2 	bl	8000fd4 <__aeabi_ddiv>
 8008c30:	b007      	add	sp, #28
 8008c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c34:	9903      	ldr	r1, [sp, #12]
 8008c36:	1a0b      	subs	r3, r1, r0
 8008c38:	e7f6      	b.n	8008c28 <__ratio+0x40>

08008c3a <__copybits>:
 8008c3a:	b570      	push	{r4, r5, r6, lr}
 8008c3c:	0014      	movs	r4, r2
 8008c3e:	0005      	movs	r5, r0
 8008c40:	3901      	subs	r1, #1
 8008c42:	6913      	ldr	r3, [r2, #16]
 8008c44:	1149      	asrs	r1, r1, #5
 8008c46:	3101      	adds	r1, #1
 8008c48:	0089      	lsls	r1, r1, #2
 8008c4a:	3414      	adds	r4, #20
 8008c4c:	009b      	lsls	r3, r3, #2
 8008c4e:	1841      	adds	r1, r0, r1
 8008c50:	18e3      	adds	r3, r4, r3
 8008c52:	42a3      	cmp	r3, r4
 8008c54:	d80d      	bhi.n	8008c72 <__copybits+0x38>
 8008c56:	0014      	movs	r4, r2
 8008c58:	3411      	adds	r4, #17
 8008c5a:	2500      	movs	r5, #0
 8008c5c:	429c      	cmp	r4, r3
 8008c5e:	d803      	bhi.n	8008c68 <__copybits+0x2e>
 8008c60:	1a9b      	subs	r3, r3, r2
 8008c62:	3b11      	subs	r3, #17
 8008c64:	089b      	lsrs	r3, r3, #2
 8008c66:	009d      	lsls	r5, r3, #2
 8008c68:	2300      	movs	r3, #0
 8008c6a:	1940      	adds	r0, r0, r5
 8008c6c:	4281      	cmp	r1, r0
 8008c6e:	d803      	bhi.n	8008c78 <__copybits+0x3e>
 8008c70:	bd70      	pop	{r4, r5, r6, pc}
 8008c72:	cc40      	ldmia	r4!, {r6}
 8008c74:	c540      	stmia	r5!, {r6}
 8008c76:	e7ec      	b.n	8008c52 <__copybits+0x18>
 8008c78:	c008      	stmia	r0!, {r3}
 8008c7a:	e7f7      	b.n	8008c6c <__copybits+0x32>

08008c7c <__any_on>:
 8008c7c:	0002      	movs	r2, r0
 8008c7e:	6900      	ldr	r0, [r0, #16]
 8008c80:	b510      	push	{r4, lr}
 8008c82:	3214      	adds	r2, #20
 8008c84:	114b      	asrs	r3, r1, #5
 8008c86:	4298      	cmp	r0, r3
 8008c88:	db13      	blt.n	8008cb2 <__any_on+0x36>
 8008c8a:	dd0c      	ble.n	8008ca6 <__any_on+0x2a>
 8008c8c:	241f      	movs	r4, #31
 8008c8e:	0008      	movs	r0, r1
 8008c90:	4020      	ands	r0, r4
 8008c92:	4221      	tst	r1, r4
 8008c94:	d007      	beq.n	8008ca6 <__any_on+0x2a>
 8008c96:	0099      	lsls	r1, r3, #2
 8008c98:	588c      	ldr	r4, [r1, r2]
 8008c9a:	0021      	movs	r1, r4
 8008c9c:	40c1      	lsrs	r1, r0
 8008c9e:	4081      	lsls	r1, r0
 8008ca0:	2001      	movs	r0, #1
 8008ca2:	428c      	cmp	r4, r1
 8008ca4:	d104      	bne.n	8008cb0 <__any_on+0x34>
 8008ca6:	009b      	lsls	r3, r3, #2
 8008ca8:	18d3      	adds	r3, r2, r3
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d803      	bhi.n	8008cb6 <__any_on+0x3a>
 8008cae:	2000      	movs	r0, #0
 8008cb0:	bd10      	pop	{r4, pc}
 8008cb2:	0003      	movs	r3, r0
 8008cb4:	e7f7      	b.n	8008ca6 <__any_on+0x2a>
 8008cb6:	3b04      	subs	r3, #4
 8008cb8:	6819      	ldr	r1, [r3, #0]
 8008cba:	2900      	cmp	r1, #0
 8008cbc:	d0f5      	beq.n	8008caa <__any_on+0x2e>
 8008cbe:	2001      	movs	r0, #1
 8008cc0:	e7f6      	b.n	8008cb0 <__any_on+0x34>

08008cc2 <_calloc_r>:
 8008cc2:	b570      	push	{r4, r5, r6, lr}
 8008cc4:	0c13      	lsrs	r3, r2, #16
 8008cc6:	0c0d      	lsrs	r5, r1, #16
 8008cc8:	d11e      	bne.n	8008d08 <_calloc_r+0x46>
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d10c      	bne.n	8008ce8 <_calloc_r+0x26>
 8008cce:	b289      	uxth	r1, r1
 8008cd0:	b294      	uxth	r4, r2
 8008cd2:	434c      	muls	r4, r1
 8008cd4:	0021      	movs	r1, r4
 8008cd6:	f7fd ff2d 	bl	8006b34 <_malloc_r>
 8008cda:	1e05      	subs	r5, r0, #0
 8008cdc:	d01b      	beq.n	8008d16 <_calloc_r+0x54>
 8008cde:	0022      	movs	r2, r4
 8008ce0:	2100      	movs	r1, #0
 8008ce2:	f7fd feb2 	bl	8006a4a <memset>
 8008ce6:	e016      	b.n	8008d16 <_calloc_r+0x54>
 8008ce8:	1c1d      	adds	r5, r3, #0
 8008cea:	1c0b      	adds	r3, r1, #0
 8008cec:	b292      	uxth	r2, r2
 8008cee:	b289      	uxth	r1, r1
 8008cf0:	b29c      	uxth	r4, r3
 8008cf2:	4351      	muls	r1, r2
 8008cf4:	b2ab      	uxth	r3, r5
 8008cf6:	4363      	muls	r3, r4
 8008cf8:	0c0c      	lsrs	r4, r1, #16
 8008cfa:	191c      	adds	r4, r3, r4
 8008cfc:	0c22      	lsrs	r2, r4, #16
 8008cfe:	d107      	bne.n	8008d10 <_calloc_r+0x4e>
 8008d00:	0424      	lsls	r4, r4, #16
 8008d02:	b289      	uxth	r1, r1
 8008d04:	430c      	orrs	r4, r1
 8008d06:	e7e5      	b.n	8008cd4 <_calloc_r+0x12>
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d101      	bne.n	8008d10 <_calloc_r+0x4e>
 8008d0c:	1c13      	adds	r3, r2, #0
 8008d0e:	e7ed      	b.n	8008cec <_calloc_r+0x2a>
 8008d10:	230c      	movs	r3, #12
 8008d12:	2500      	movs	r5, #0
 8008d14:	6003      	str	r3, [r0, #0]
 8008d16:	0028      	movs	r0, r5
 8008d18:	bd70      	pop	{r4, r5, r6, pc}
	...

08008d1c <__ssputs_r>:
 8008d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d1e:	688e      	ldr	r6, [r1, #8]
 8008d20:	b085      	sub	sp, #20
 8008d22:	0007      	movs	r7, r0
 8008d24:	000c      	movs	r4, r1
 8008d26:	9203      	str	r2, [sp, #12]
 8008d28:	9301      	str	r3, [sp, #4]
 8008d2a:	429e      	cmp	r6, r3
 8008d2c:	d83c      	bhi.n	8008da8 <__ssputs_r+0x8c>
 8008d2e:	2390      	movs	r3, #144	; 0x90
 8008d30:	898a      	ldrh	r2, [r1, #12]
 8008d32:	00db      	lsls	r3, r3, #3
 8008d34:	421a      	tst	r2, r3
 8008d36:	d034      	beq.n	8008da2 <__ssputs_r+0x86>
 8008d38:	6909      	ldr	r1, [r1, #16]
 8008d3a:	6823      	ldr	r3, [r4, #0]
 8008d3c:	6960      	ldr	r0, [r4, #20]
 8008d3e:	1a5b      	subs	r3, r3, r1
 8008d40:	9302      	str	r3, [sp, #8]
 8008d42:	2303      	movs	r3, #3
 8008d44:	4343      	muls	r3, r0
 8008d46:	0fdd      	lsrs	r5, r3, #31
 8008d48:	18ed      	adds	r5, r5, r3
 8008d4a:	9b01      	ldr	r3, [sp, #4]
 8008d4c:	9802      	ldr	r0, [sp, #8]
 8008d4e:	3301      	adds	r3, #1
 8008d50:	181b      	adds	r3, r3, r0
 8008d52:	106d      	asrs	r5, r5, #1
 8008d54:	42ab      	cmp	r3, r5
 8008d56:	d900      	bls.n	8008d5a <__ssputs_r+0x3e>
 8008d58:	001d      	movs	r5, r3
 8008d5a:	0553      	lsls	r3, r2, #21
 8008d5c:	d532      	bpl.n	8008dc4 <__ssputs_r+0xa8>
 8008d5e:	0029      	movs	r1, r5
 8008d60:	0038      	movs	r0, r7
 8008d62:	f7fd fee7 	bl	8006b34 <_malloc_r>
 8008d66:	1e06      	subs	r6, r0, #0
 8008d68:	d109      	bne.n	8008d7e <__ssputs_r+0x62>
 8008d6a:	230c      	movs	r3, #12
 8008d6c:	603b      	str	r3, [r7, #0]
 8008d6e:	2340      	movs	r3, #64	; 0x40
 8008d70:	2001      	movs	r0, #1
 8008d72:	89a2      	ldrh	r2, [r4, #12]
 8008d74:	4240      	negs	r0, r0
 8008d76:	4313      	orrs	r3, r2
 8008d78:	81a3      	strh	r3, [r4, #12]
 8008d7a:	b005      	add	sp, #20
 8008d7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d7e:	9a02      	ldr	r2, [sp, #8]
 8008d80:	6921      	ldr	r1, [r4, #16]
 8008d82:	f7fd fe59 	bl	8006a38 <memcpy>
 8008d86:	89a3      	ldrh	r3, [r4, #12]
 8008d88:	4a14      	ldr	r2, [pc, #80]	; (8008ddc <__ssputs_r+0xc0>)
 8008d8a:	401a      	ands	r2, r3
 8008d8c:	2380      	movs	r3, #128	; 0x80
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	81a3      	strh	r3, [r4, #12]
 8008d92:	9b02      	ldr	r3, [sp, #8]
 8008d94:	6126      	str	r6, [r4, #16]
 8008d96:	18f6      	adds	r6, r6, r3
 8008d98:	6026      	str	r6, [r4, #0]
 8008d9a:	6165      	str	r5, [r4, #20]
 8008d9c:	9e01      	ldr	r6, [sp, #4]
 8008d9e:	1aed      	subs	r5, r5, r3
 8008da0:	60a5      	str	r5, [r4, #8]
 8008da2:	9b01      	ldr	r3, [sp, #4]
 8008da4:	429e      	cmp	r6, r3
 8008da6:	d900      	bls.n	8008daa <__ssputs_r+0x8e>
 8008da8:	9e01      	ldr	r6, [sp, #4]
 8008daa:	0032      	movs	r2, r6
 8008dac:	9903      	ldr	r1, [sp, #12]
 8008dae:	6820      	ldr	r0, [r4, #0]
 8008db0:	f000 ff31 	bl	8009c16 <memmove>
 8008db4:	68a3      	ldr	r3, [r4, #8]
 8008db6:	2000      	movs	r0, #0
 8008db8:	1b9b      	subs	r3, r3, r6
 8008dba:	60a3      	str	r3, [r4, #8]
 8008dbc:	6823      	ldr	r3, [r4, #0]
 8008dbe:	199e      	adds	r6, r3, r6
 8008dc0:	6026      	str	r6, [r4, #0]
 8008dc2:	e7da      	b.n	8008d7a <__ssputs_r+0x5e>
 8008dc4:	002a      	movs	r2, r5
 8008dc6:	0038      	movs	r0, r7
 8008dc8:	f000 ff38 	bl	8009c3c <_realloc_r>
 8008dcc:	1e06      	subs	r6, r0, #0
 8008dce:	d1e0      	bne.n	8008d92 <__ssputs_r+0x76>
 8008dd0:	0038      	movs	r0, r7
 8008dd2:	6921      	ldr	r1, [r4, #16]
 8008dd4:	f7fd fe42 	bl	8006a5c <_free_r>
 8008dd8:	e7c7      	b.n	8008d6a <__ssputs_r+0x4e>
 8008dda:	46c0      	nop			; (mov r8, r8)
 8008ddc:	fffffb7f 	.word	0xfffffb7f

08008de0 <_svfiprintf_r>:
 8008de0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008de2:	b0a1      	sub	sp, #132	; 0x84
 8008de4:	9003      	str	r0, [sp, #12]
 8008de6:	001d      	movs	r5, r3
 8008de8:	898b      	ldrh	r3, [r1, #12]
 8008dea:	000f      	movs	r7, r1
 8008dec:	0016      	movs	r6, r2
 8008dee:	061b      	lsls	r3, r3, #24
 8008df0:	d511      	bpl.n	8008e16 <_svfiprintf_r+0x36>
 8008df2:	690b      	ldr	r3, [r1, #16]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d10e      	bne.n	8008e16 <_svfiprintf_r+0x36>
 8008df8:	2140      	movs	r1, #64	; 0x40
 8008dfa:	f7fd fe9b 	bl	8006b34 <_malloc_r>
 8008dfe:	6038      	str	r0, [r7, #0]
 8008e00:	6138      	str	r0, [r7, #16]
 8008e02:	2800      	cmp	r0, #0
 8008e04:	d105      	bne.n	8008e12 <_svfiprintf_r+0x32>
 8008e06:	230c      	movs	r3, #12
 8008e08:	9a03      	ldr	r2, [sp, #12]
 8008e0a:	3801      	subs	r0, #1
 8008e0c:	6013      	str	r3, [r2, #0]
 8008e0e:	b021      	add	sp, #132	; 0x84
 8008e10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e12:	2340      	movs	r3, #64	; 0x40
 8008e14:	617b      	str	r3, [r7, #20]
 8008e16:	2300      	movs	r3, #0
 8008e18:	ac08      	add	r4, sp, #32
 8008e1a:	6163      	str	r3, [r4, #20]
 8008e1c:	3320      	adds	r3, #32
 8008e1e:	7663      	strb	r3, [r4, #25]
 8008e20:	3310      	adds	r3, #16
 8008e22:	76a3      	strb	r3, [r4, #26]
 8008e24:	9507      	str	r5, [sp, #28]
 8008e26:	0035      	movs	r5, r6
 8008e28:	782b      	ldrb	r3, [r5, #0]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d001      	beq.n	8008e32 <_svfiprintf_r+0x52>
 8008e2e:	2b25      	cmp	r3, #37	; 0x25
 8008e30:	d147      	bne.n	8008ec2 <_svfiprintf_r+0xe2>
 8008e32:	1bab      	subs	r3, r5, r6
 8008e34:	9305      	str	r3, [sp, #20]
 8008e36:	42b5      	cmp	r5, r6
 8008e38:	d00c      	beq.n	8008e54 <_svfiprintf_r+0x74>
 8008e3a:	0032      	movs	r2, r6
 8008e3c:	0039      	movs	r1, r7
 8008e3e:	9803      	ldr	r0, [sp, #12]
 8008e40:	f7ff ff6c 	bl	8008d1c <__ssputs_r>
 8008e44:	1c43      	adds	r3, r0, #1
 8008e46:	d100      	bne.n	8008e4a <_svfiprintf_r+0x6a>
 8008e48:	e0ae      	b.n	8008fa8 <_svfiprintf_r+0x1c8>
 8008e4a:	6962      	ldr	r2, [r4, #20]
 8008e4c:	9b05      	ldr	r3, [sp, #20]
 8008e4e:	4694      	mov	ip, r2
 8008e50:	4463      	add	r3, ip
 8008e52:	6163      	str	r3, [r4, #20]
 8008e54:	782b      	ldrb	r3, [r5, #0]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d100      	bne.n	8008e5c <_svfiprintf_r+0x7c>
 8008e5a:	e0a5      	b.n	8008fa8 <_svfiprintf_r+0x1c8>
 8008e5c:	2201      	movs	r2, #1
 8008e5e:	2300      	movs	r3, #0
 8008e60:	4252      	negs	r2, r2
 8008e62:	6062      	str	r2, [r4, #4]
 8008e64:	a904      	add	r1, sp, #16
 8008e66:	3254      	adds	r2, #84	; 0x54
 8008e68:	1852      	adds	r2, r2, r1
 8008e6a:	1c6e      	adds	r6, r5, #1
 8008e6c:	6023      	str	r3, [r4, #0]
 8008e6e:	60e3      	str	r3, [r4, #12]
 8008e70:	60a3      	str	r3, [r4, #8]
 8008e72:	7013      	strb	r3, [r2, #0]
 8008e74:	65a3      	str	r3, [r4, #88]	; 0x58
 8008e76:	2205      	movs	r2, #5
 8008e78:	7831      	ldrb	r1, [r6, #0]
 8008e7a:	4854      	ldr	r0, [pc, #336]	; (8008fcc <_svfiprintf_r+0x1ec>)
 8008e7c:	f000 fec0 	bl	8009c00 <memchr>
 8008e80:	1c75      	adds	r5, r6, #1
 8008e82:	2800      	cmp	r0, #0
 8008e84:	d11f      	bne.n	8008ec6 <_svfiprintf_r+0xe6>
 8008e86:	6822      	ldr	r2, [r4, #0]
 8008e88:	06d3      	lsls	r3, r2, #27
 8008e8a:	d504      	bpl.n	8008e96 <_svfiprintf_r+0xb6>
 8008e8c:	2353      	movs	r3, #83	; 0x53
 8008e8e:	a904      	add	r1, sp, #16
 8008e90:	185b      	adds	r3, r3, r1
 8008e92:	2120      	movs	r1, #32
 8008e94:	7019      	strb	r1, [r3, #0]
 8008e96:	0713      	lsls	r3, r2, #28
 8008e98:	d504      	bpl.n	8008ea4 <_svfiprintf_r+0xc4>
 8008e9a:	2353      	movs	r3, #83	; 0x53
 8008e9c:	a904      	add	r1, sp, #16
 8008e9e:	185b      	adds	r3, r3, r1
 8008ea0:	212b      	movs	r1, #43	; 0x2b
 8008ea2:	7019      	strb	r1, [r3, #0]
 8008ea4:	7833      	ldrb	r3, [r6, #0]
 8008ea6:	2b2a      	cmp	r3, #42	; 0x2a
 8008ea8:	d016      	beq.n	8008ed8 <_svfiprintf_r+0xf8>
 8008eaa:	0035      	movs	r5, r6
 8008eac:	2100      	movs	r1, #0
 8008eae:	200a      	movs	r0, #10
 8008eb0:	68e3      	ldr	r3, [r4, #12]
 8008eb2:	782a      	ldrb	r2, [r5, #0]
 8008eb4:	1c6e      	adds	r6, r5, #1
 8008eb6:	3a30      	subs	r2, #48	; 0x30
 8008eb8:	2a09      	cmp	r2, #9
 8008eba:	d94e      	bls.n	8008f5a <_svfiprintf_r+0x17a>
 8008ebc:	2900      	cmp	r1, #0
 8008ebe:	d111      	bne.n	8008ee4 <_svfiprintf_r+0x104>
 8008ec0:	e017      	b.n	8008ef2 <_svfiprintf_r+0x112>
 8008ec2:	3501      	adds	r5, #1
 8008ec4:	e7b0      	b.n	8008e28 <_svfiprintf_r+0x48>
 8008ec6:	4b41      	ldr	r3, [pc, #260]	; (8008fcc <_svfiprintf_r+0x1ec>)
 8008ec8:	6822      	ldr	r2, [r4, #0]
 8008eca:	1ac0      	subs	r0, r0, r3
 8008ecc:	2301      	movs	r3, #1
 8008ece:	4083      	lsls	r3, r0
 8008ed0:	4313      	orrs	r3, r2
 8008ed2:	002e      	movs	r6, r5
 8008ed4:	6023      	str	r3, [r4, #0]
 8008ed6:	e7ce      	b.n	8008e76 <_svfiprintf_r+0x96>
 8008ed8:	9b07      	ldr	r3, [sp, #28]
 8008eda:	1d19      	adds	r1, r3, #4
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	9107      	str	r1, [sp, #28]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	db01      	blt.n	8008ee8 <_svfiprintf_r+0x108>
 8008ee4:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ee6:	e004      	b.n	8008ef2 <_svfiprintf_r+0x112>
 8008ee8:	425b      	negs	r3, r3
 8008eea:	60e3      	str	r3, [r4, #12]
 8008eec:	2302      	movs	r3, #2
 8008eee:	4313      	orrs	r3, r2
 8008ef0:	6023      	str	r3, [r4, #0]
 8008ef2:	782b      	ldrb	r3, [r5, #0]
 8008ef4:	2b2e      	cmp	r3, #46	; 0x2e
 8008ef6:	d10a      	bne.n	8008f0e <_svfiprintf_r+0x12e>
 8008ef8:	786b      	ldrb	r3, [r5, #1]
 8008efa:	2b2a      	cmp	r3, #42	; 0x2a
 8008efc:	d135      	bne.n	8008f6a <_svfiprintf_r+0x18a>
 8008efe:	9b07      	ldr	r3, [sp, #28]
 8008f00:	3502      	adds	r5, #2
 8008f02:	1d1a      	adds	r2, r3, #4
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	9207      	str	r2, [sp, #28]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	db2b      	blt.n	8008f64 <_svfiprintf_r+0x184>
 8008f0c:	9309      	str	r3, [sp, #36]	; 0x24
 8008f0e:	4e30      	ldr	r6, [pc, #192]	; (8008fd0 <_svfiprintf_r+0x1f0>)
 8008f10:	2203      	movs	r2, #3
 8008f12:	0030      	movs	r0, r6
 8008f14:	7829      	ldrb	r1, [r5, #0]
 8008f16:	f000 fe73 	bl	8009c00 <memchr>
 8008f1a:	2800      	cmp	r0, #0
 8008f1c:	d006      	beq.n	8008f2c <_svfiprintf_r+0x14c>
 8008f1e:	2340      	movs	r3, #64	; 0x40
 8008f20:	1b80      	subs	r0, r0, r6
 8008f22:	4083      	lsls	r3, r0
 8008f24:	6822      	ldr	r2, [r4, #0]
 8008f26:	3501      	adds	r5, #1
 8008f28:	4313      	orrs	r3, r2
 8008f2a:	6023      	str	r3, [r4, #0]
 8008f2c:	7829      	ldrb	r1, [r5, #0]
 8008f2e:	2206      	movs	r2, #6
 8008f30:	4828      	ldr	r0, [pc, #160]	; (8008fd4 <_svfiprintf_r+0x1f4>)
 8008f32:	1c6e      	adds	r6, r5, #1
 8008f34:	7621      	strb	r1, [r4, #24]
 8008f36:	f000 fe63 	bl	8009c00 <memchr>
 8008f3a:	2800      	cmp	r0, #0
 8008f3c:	d03c      	beq.n	8008fb8 <_svfiprintf_r+0x1d8>
 8008f3e:	4b26      	ldr	r3, [pc, #152]	; (8008fd8 <_svfiprintf_r+0x1f8>)
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d125      	bne.n	8008f90 <_svfiprintf_r+0x1b0>
 8008f44:	2207      	movs	r2, #7
 8008f46:	9b07      	ldr	r3, [sp, #28]
 8008f48:	3307      	adds	r3, #7
 8008f4a:	4393      	bics	r3, r2
 8008f4c:	3308      	adds	r3, #8
 8008f4e:	9307      	str	r3, [sp, #28]
 8008f50:	6963      	ldr	r3, [r4, #20]
 8008f52:	9a04      	ldr	r2, [sp, #16]
 8008f54:	189b      	adds	r3, r3, r2
 8008f56:	6163      	str	r3, [r4, #20]
 8008f58:	e765      	b.n	8008e26 <_svfiprintf_r+0x46>
 8008f5a:	4343      	muls	r3, r0
 8008f5c:	0035      	movs	r5, r6
 8008f5e:	2101      	movs	r1, #1
 8008f60:	189b      	adds	r3, r3, r2
 8008f62:	e7a6      	b.n	8008eb2 <_svfiprintf_r+0xd2>
 8008f64:	2301      	movs	r3, #1
 8008f66:	425b      	negs	r3, r3
 8008f68:	e7d0      	b.n	8008f0c <_svfiprintf_r+0x12c>
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	200a      	movs	r0, #10
 8008f6e:	001a      	movs	r2, r3
 8008f70:	3501      	adds	r5, #1
 8008f72:	6063      	str	r3, [r4, #4]
 8008f74:	7829      	ldrb	r1, [r5, #0]
 8008f76:	1c6e      	adds	r6, r5, #1
 8008f78:	3930      	subs	r1, #48	; 0x30
 8008f7a:	2909      	cmp	r1, #9
 8008f7c:	d903      	bls.n	8008f86 <_svfiprintf_r+0x1a6>
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d0c5      	beq.n	8008f0e <_svfiprintf_r+0x12e>
 8008f82:	9209      	str	r2, [sp, #36]	; 0x24
 8008f84:	e7c3      	b.n	8008f0e <_svfiprintf_r+0x12e>
 8008f86:	4342      	muls	r2, r0
 8008f88:	0035      	movs	r5, r6
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	1852      	adds	r2, r2, r1
 8008f8e:	e7f1      	b.n	8008f74 <_svfiprintf_r+0x194>
 8008f90:	ab07      	add	r3, sp, #28
 8008f92:	9300      	str	r3, [sp, #0]
 8008f94:	003a      	movs	r2, r7
 8008f96:	0021      	movs	r1, r4
 8008f98:	4b10      	ldr	r3, [pc, #64]	; (8008fdc <_svfiprintf_r+0x1fc>)
 8008f9a:	9803      	ldr	r0, [sp, #12]
 8008f9c:	e000      	b.n	8008fa0 <_svfiprintf_r+0x1c0>
 8008f9e:	bf00      	nop
 8008fa0:	9004      	str	r0, [sp, #16]
 8008fa2:	9b04      	ldr	r3, [sp, #16]
 8008fa4:	3301      	adds	r3, #1
 8008fa6:	d1d3      	bne.n	8008f50 <_svfiprintf_r+0x170>
 8008fa8:	89bb      	ldrh	r3, [r7, #12]
 8008faa:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008fac:	065b      	lsls	r3, r3, #25
 8008fae:	d400      	bmi.n	8008fb2 <_svfiprintf_r+0x1d2>
 8008fb0:	e72d      	b.n	8008e0e <_svfiprintf_r+0x2e>
 8008fb2:	2001      	movs	r0, #1
 8008fb4:	4240      	negs	r0, r0
 8008fb6:	e72a      	b.n	8008e0e <_svfiprintf_r+0x2e>
 8008fb8:	ab07      	add	r3, sp, #28
 8008fba:	9300      	str	r3, [sp, #0]
 8008fbc:	003a      	movs	r2, r7
 8008fbe:	0021      	movs	r1, r4
 8008fc0:	4b06      	ldr	r3, [pc, #24]	; (8008fdc <_svfiprintf_r+0x1fc>)
 8008fc2:	9803      	ldr	r0, [sp, #12]
 8008fc4:	f000 f9de 	bl	8009384 <_printf_i>
 8008fc8:	e7ea      	b.n	8008fa0 <_svfiprintf_r+0x1c0>
 8008fca:	46c0      	nop			; (mov r8, r8)
 8008fcc:	0800a4fc 	.word	0x0800a4fc
 8008fd0:	0800a502 	.word	0x0800a502
 8008fd4:	0800a506 	.word	0x0800a506
 8008fd8:	00000000 	.word	0x00000000
 8008fdc:	08008d1d 	.word	0x08008d1d

08008fe0 <__sfputc_r>:
 8008fe0:	6893      	ldr	r3, [r2, #8]
 8008fe2:	b510      	push	{r4, lr}
 8008fe4:	3b01      	subs	r3, #1
 8008fe6:	6093      	str	r3, [r2, #8]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	da04      	bge.n	8008ff6 <__sfputc_r+0x16>
 8008fec:	6994      	ldr	r4, [r2, #24]
 8008fee:	42a3      	cmp	r3, r4
 8008ff0:	db07      	blt.n	8009002 <__sfputc_r+0x22>
 8008ff2:	290a      	cmp	r1, #10
 8008ff4:	d005      	beq.n	8009002 <__sfputc_r+0x22>
 8008ff6:	6813      	ldr	r3, [r2, #0]
 8008ff8:	1c58      	adds	r0, r3, #1
 8008ffa:	6010      	str	r0, [r2, #0]
 8008ffc:	7019      	strb	r1, [r3, #0]
 8008ffe:	0008      	movs	r0, r1
 8009000:	bd10      	pop	{r4, pc}
 8009002:	f000 fadb 	bl	80095bc <__swbuf_r>
 8009006:	0001      	movs	r1, r0
 8009008:	e7f9      	b.n	8008ffe <__sfputc_r+0x1e>

0800900a <__sfputs_r>:
 800900a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800900c:	0006      	movs	r6, r0
 800900e:	000f      	movs	r7, r1
 8009010:	0014      	movs	r4, r2
 8009012:	18d5      	adds	r5, r2, r3
 8009014:	42ac      	cmp	r4, r5
 8009016:	d101      	bne.n	800901c <__sfputs_r+0x12>
 8009018:	2000      	movs	r0, #0
 800901a:	e007      	b.n	800902c <__sfputs_r+0x22>
 800901c:	7821      	ldrb	r1, [r4, #0]
 800901e:	003a      	movs	r2, r7
 8009020:	0030      	movs	r0, r6
 8009022:	f7ff ffdd 	bl	8008fe0 <__sfputc_r>
 8009026:	3401      	adds	r4, #1
 8009028:	1c43      	adds	r3, r0, #1
 800902a:	d1f3      	bne.n	8009014 <__sfputs_r+0xa>
 800902c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009030 <_vfiprintf_r>:
 8009030:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009032:	b0a1      	sub	sp, #132	; 0x84
 8009034:	0006      	movs	r6, r0
 8009036:	000c      	movs	r4, r1
 8009038:	001f      	movs	r7, r3
 800903a:	9203      	str	r2, [sp, #12]
 800903c:	2800      	cmp	r0, #0
 800903e:	d004      	beq.n	800904a <_vfiprintf_r+0x1a>
 8009040:	6983      	ldr	r3, [r0, #24]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d101      	bne.n	800904a <_vfiprintf_r+0x1a>
 8009046:	f000 fccb 	bl	80099e0 <__sinit>
 800904a:	4b8e      	ldr	r3, [pc, #568]	; (8009284 <_vfiprintf_r+0x254>)
 800904c:	429c      	cmp	r4, r3
 800904e:	d11c      	bne.n	800908a <_vfiprintf_r+0x5a>
 8009050:	6874      	ldr	r4, [r6, #4]
 8009052:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009054:	07db      	lsls	r3, r3, #31
 8009056:	d405      	bmi.n	8009064 <_vfiprintf_r+0x34>
 8009058:	89a3      	ldrh	r3, [r4, #12]
 800905a:	059b      	lsls	r3, r3, #22
 800905c:	d402      	bmi.n	8009064 <_vfiprintf_r+0x34>
 800905e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009060:	f000 fd5f 	bl	8009b22 <__retarget_lock_acquire_recursive>
 8009064:	89a3      	ldrh	r3, [r4, #12]
 8009066:	071b      	lsls	r3, r3, #28
 8009068:	d502      	bpl.n	8009070 <_vfiprintf_r+0x40>
 800906a:	6923      	ldr	r3, [r4, #16]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d11d      	bne.n	80090ac <_vfiprintf_r+0x7c>
 8009070:	0021      	movs	r1, r4
 8009072:	0030      	movs	r0, r6
 8009074:	f000 fb06 	bl	8009684 <__swsetup_r>
 8009078:	2800      	cmp	r0, #0
 800907a:	d017      	beq.n	80090ac <_vfiprintf_r+0x7c>
 800907c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800907e:	07db      	lsls	r3, r3, #31
 8009080:	d50d      	bpl.n	800909e <_vfiprintf_r+0x6e>
 8009082:	2001      	movs	r0, #1
 8009084:	4240      	negs	r0, r0
 8009086:	b021      	add	sp, #132	; 0x84
 8009088:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800908a:	4b7f      	ldr	r3, [pc, #508]	; (8009288 <_vfiprintf_r+0x258>)
 800908c:	429c      	cmp	r4, r3
 800908e:	d101      	bne.n	8009094 <_vfiprintf_r+0x64>
 8009090:	68b4      	ldr	r4, [r6, #8]
 8009092:	e7de      	b.n	8009052 <_vfiprintf_r+0x22>
 8009094:	4b7d      	ldr	r3, [pc, #500]	; (800928c <_vfiprintf_r+0x25c>)
 8009096:	429c      	cmp	r4, r3
 8009098:	d1db      	bne.n	8009052 <_vfiprintf_r+0x22>
 800909a:	68f4      	ldr	r4, [r6, #12]
 800909c:	e7d9      	b.n	8009052 <_vfiprintf_r+0x22>
 800909e:	89a3      	ldrh	r3, [r4, #12]
 80090a0:	059b      	lsls	r3, r3, #22
 80090a2:	d4ee      	bmi.n	8009082 <_vfiprintf_r+0x52>
 80090a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090a6:	f000 fd3d 	bl	8009b24 <__retarget_lock_release_recursive>
 80090aa:	e7ea      	b.n	8009082 <_vfiprintf_r+0x52>
 80090ac:	2300      	movs	r3, #0
 80090ae:	ad08      	add	r5, sp, #32
 80090b0:	616b      	str	r3, [r5, #20]
 80090b2:	3320      	adds	r3, #32
 80090b4:	766b      	strb	r3, [r5, #25]
 80090b6:	3310      	adds	r3, #16
 80090b8:	76ab      	strb	r3, [r5, #26]
 80090ba:	9707      	str	r7, [sp, #28]
 80090bc:	9f03      	ldr	r7, [sp, #12]
 80090be:	783b      	ldrb	r3, [r7, #0]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d001      	beq.n	80090c8 <_vfiprintf_r+0x98>
 80090c4:	2b25      	cmp	r3, #37	; 0x25
 80090c6:	d14e      	bne.n	8009166 <_vfiprintf_r+0x136>
 80090c8:	9b03      	ldr	r3, [sp, #12]
 80090ca:	1afb      	subs	r3, r7, r3
 80090cc:	9305      	str	r3, [sp, #20]
 80090ce:	9b03      	ldr	r3, [sp, #12]
 80090d0:	429f      	cmp	r7, r3
 80090d2:	d00d      	beq.n	80090f0 <_vfiprintf_r+0xc0>
 80090d4:	9b05      	ldr	r3, [sp, #20]
 80090d6:	0021      	movs	r1, r4
 80090d8:	0030      	movs	r0, r6
 80090da:	9a03      	ldr	r2, [sp, #12]
 80090dc:	f7ff ff95 	bl	800900a <__sfputs_r>
 80090e0:	1c43      	adds	r3, r0, #1
 80090e2:	d100      	bne.n	80090e6 <_vfiprintf_r+0xb6>
 80090e4:	e0b5      	b.n	8009252 <_vfiprintf_r+0x222>
 80090e6:	696a      	ldr	r2, [r5, #20]
 80090e8:	9b05      	ldr	r3, [sp, #20]
 80090ea:	4694      	mov	ip, r2
 80090ec:	4463      	add	r3, ip
 80090ee:	616b      	str	r3, [r5, #20]
 80090f0:	783b      	ldrb	r3, [r7, #0]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d100      	bne.n	80090f8 <_vfiprintf_r+0xc8>
 80090f6:	e0ac      	b.n	8009252 <_vfiprintf_r+0x222>
 80090f8:	2201      	movs	r2, #1
 80090fa:	1c7b      	adds	r3, r7, #1
 80090fc:	9303      	str	r3, [sp, #12]
 80090fe:	2300      	movs	r3, #0
 8009100:	4252      	negs	r2, r2
 8009102:	606a      	str	r2, [r5, #4]
 8009104:	a904      	add	r1, sp, #16
 8009106:	3254      	adds	r2, #84	; 0x54
 8009108:	1852      	adds	r2, r2, r1
 800910a:	602b      	str	r3, [r5, #0]
 800910c:	60eb      	str	r3, [r5, #12]
 800910e:	60ab      	str	r3, [r5, #8]
 8009110:	7013      	strb	r3, [r2, #0]
 8009112:	65ab      	str	r3, [r5, #88]	; 0x58
 8009114:	9b03      	ldr	r3, [sp, #12]
 8009116:	2205      	movs	r2, #5
 8009118:	7819      	ldrb	r1, [r3, #0]
 800911a:	485d      	ldr	r0, [pc, #372]	; (8009290 <_vfiprintf_r+0x260>)
 800911c:	f000 fd70 	bl	8009c00 <memchr>
 8009120:	9b03      	ldr	r3, [sp, #12]
 8009122:	1c5f      	adds	r7, r3, #1
 8009124:	2800      	cmp	r0, #0
 8009126:	d120      	bne.n	800916a <_vfiprintf_r+0x13a>
 8009128:	682a      	ldr	r2, [r5, #0]
 800912a:	06d3      	lsls	r3, r2, #27
 800912c:	d504      	bpl.n	8009138 <_vfiprintf_r+0x108>
 800912e:	2353      	movs	r3, #83	; 0x53
 8009130:	a904      	add	r1, sp, #16
 8009132:	185b      	adds	r3, r3, r1
 8009134:	2120      	movs	r1, #32
 8009136:	7019      	strb	r1, [r3, #0]
 8009138:	0713      	lsls	r3, r2, #28
 800913a:	d504      	bpl.n	8009146 <_vfiprintf_r+0x116>
 800913c:	2353      	movs	r3, #83	; 0x53
 800913e:	a904      	add	r1, sp, #16
 8009140:	185b      	adds	r3, r3, r1
 8009142:	212b      	movs	r1, #43	; 0x2b
 8009144:	7019      	strb	r1, [r3, #0]
 8009146:	9b03      	ldr	r3, [sp, #12]
 8009148:	781b      	ldrb	r3, [r3, #0]
 800914a:	2b2a      	cmp	r3, #42	; 0x2a
 800914c:	d016      	beq.n	800917c <_vfiprintf_r+0x14c>
 800914e:	2100      	movs	r1, #0
 8009150:	68eb      	ldr	r3, [r5, #12]
 8009152:	9f03      	ldr	r7, [sp, #12]
 8009154:	783a      	ldrb	r2, [r7, #0]
 8009156:	1c78      	adds	r0, r7, #1
 8009158:	3a30      	subs	r2, #48	; 0x30
 800915a:	4684      	mov	ip, r0
 800915c:	2a09      	cmp	r2, #9
 800915e:	d94f      	bls.n	8009200 <_vfiprintf_r+0x1d0>
 8009160:	2900      	cmp	r1, #0
 8009162:	d111      	bne.n	8009188 <_vfiprintf_r+0x158>
 8009164:	e017      	b.n	8009196 <_vfiprintf_r+0x166>
 8009166:	3701      	adds	r7, #1
 8009168:	e7a9      	b.n	80090be <_vfiprintf_r+0x8e>
 800916a:	4b49      	ldr	r3, [pc, #292]	; (8009290 <_vfiprintf_r+0x260>)
 800916c:	682a      	ldr	r2, [r5, #0]
 800916e:	1ac0      	subs	r0, r0, r3
 8009170:	2301      	movs	r3, #1
 8009172:	4083      	lsls	r3, r0
 8009174:	4313      	orrs	r3, r2
 8009176:	602b      	str	r3, [r5, #0]
 8009178:	9703      	str	r7, [sp, #12]
 800917a:	e7cb      	b.n	8009114 <_vfiprintf_r+0xe4>
 800917c:	9b07      	ldr	r3, [sp, #28]
 800917e:	1d19      	adds	r1, r3, #4
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	9107      	str	r1, [sp, #28]
 8009184:	2b00      	cmp	r3, #0
 8009186:	db01      	blt.n	800918c <_vfiprintf_r+0x15c>
 8009188:	930b      	str	r3, [sp, #44]	; 0x2c
 800918a:	e004      	b.n	8009196 <_vfiprintf_r+0x166>
 800918c:	425b      	negs	r3, r3
 800918e:	60eb      	str	r3, [r5, #12]
 8009190:	2302      	movs	r3, #2
 8009192:	4313      	orrs	r3, r2
 8009194:	602b      	str	r3, [r5, #0]
 8009196:	783b      	ldrb	r3, [r7, #0]
 8009198:	2b2e      	cmp	r3, #46	; 0x2e
 800919a:	d10a      	bne.n	80091b2 <_vfiprintf_r+0x182>
 800919c:	787b      	ldrb	r3, [r7, #1]
 800919e:	2b2a      	cmp	r3, #42	; 0x2a
 80091a0:	d137      	bne.n	8009212 <_vfiprintf_r+0x1e2>
 80091a2:	9b07      	ldr	r3, [sp, #28]
 80091a4:	3702      	adds	r7, #2
 80091a6:	1d1a      	adds	r2, r3, #4
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	9207      	str	r2, [sp, #28]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	db2d      	blt.n	800920c <_vfiprintf_r+0x1dc>
 80091b0:	9309      	str	r3, [sp, #36]	; 0x24
 80091b2:	2203      	movs	r2, #3
 80091b4:	7839      	ldrb	r1, [r7, #0]
 80091b6:	4837      	ldr	r0, [pc, #220]	; (8009294 <_vfiprintf_r+0x264>)
 80091b8:	f000 fd22 	bl	8009c00 <memchr>
 80091bc:	2800      	cmp	r0, #0
 80091be:	d007      	beq.n	80091d0 <_vfiprintf_r+0x1a0>
 80091c0:	4b34      	ldr	r3, [pc, #208]	; (8009294 <_vfiprintf_r+0x264>)
 80091c2:	682a      	ldr	r2, [r5, #0]
 80091c4:	1ac0      	subs	r0, r0, r3
 80091c6:	2340      	movs	r3, #64	; 0x40
 80091c8:	4083      	lsls	r3, r0
 80091ca:	4313      	orrs	r3, r2
 80091cc:	3701      	adds	r7, #1
 80091ce:	602b      	str	r3, [r5, #0]
 80091d0:	7839      	ldrb	r1, [r7, #0]
 80091d2:	1c7b      	adds	r3, r7, #1
 80091d4:	2206      	movs	r2, #6
 80091d6:	4830      	ldr	r0, [pc, #192]	; (8009298 <_vfiprintf_r+0x268>)
 80091d8:	9303      	str	r3, [sp, #12]
 80091da:	7629      	strb	r1, [r5, #24]
 80091dc:	f000 fd10 	bl	8009c00 <memchr>
 80091e0:	2800      	cmp	r0, #0
 80091e2:	d045      	beq.n	8009270 <_vfiprintf_r+0x240>
 80091e4:	4b2d      	ldr	r3, [pc, #180]	; (800929c <_vfiprintf_r+0x26c>)
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d127      	bne.n	800923a <_vfiprintf_r+0x20a>
 80091ea:	2207      	movs	r2, #7
 80091ec:	9b07      	ldr	r3, [sp, #28]
 80091ee:	3307      	adds	r3, #7
 80091f0:	4393      	bics	r3, r2
 80091f2:	3308      	adds	r3, #8
 80091f4:	9307      	str	r3, [sp, #28]
 80091f6:	696b      	ldr	r3, [r5, #20]
 80091f8:	9a04      	ldr	r2, [sp, #16]
 80091fa:	189b      	adds	r3, r3, r2
 80091fc:	616b      	str	r3, [r5, #20]
 80091fe:	e75d      	b.n	80090bc <_vfiprintf_r+0x8c>
 8009200:	210a      	movs	r1, #10
 8009202:	434b      	muls	r3, r1
 8009204:	4667      	mov	r7, ip
 8009206:	189b      	adds	r3, r3, r2
 8009208:	3909      	subs	r1, #9
 800920a:	e7a3      	b.n	8009154 <_vfiprintf_r+0x124>
 800920c:	2301      	movs	r3, #1
 800920e:	425b      	negs	r3, r3
 8009210:	e7ce      	b.n	80091b0 <_vfiprintf_r+0x180>
 8009212:	2300      	movs	r3, #0
 8009214:	001a      	movs	r2, r3
 8009216:	3701      	adds	r7, #1
 8009218:	606b      	str	r3, [r5, #4]
 800921a:	7839      	ldrb	r1, [r7, #0]
 800921c:	1c78      	adds	r0, r7, #1
 800921e:	3930      	subs	r1, #48	; 0x30
 8009220:	4684      	mov	ip, r0
 8009222:	2909      	cmp	r1, #9
 8009224:	d903      	bls.n	800922e <_vfiprintf_r+0x1fe>
 8009226:	2b00      	cmp	r3, #0
 8009228:	d0c3      	beq.n	80091b2 <_vfiprintf_r+0x182>
 800922a:	9209      	str	r2, [sp, #36]	; 0x24
 800922c:	e7c1      	b.n	80091b2 <_vfiprintf_r+0x182>
 800922e:	230a      	movs	r3, #10
 8009230:	435a      	muls	r2, r3
 8009232:	4667      	mov	r7, ip
 8009234:	1852      	adds	r2, r2, r1
 8009236:	3b09      	subs	r3, #9
 8009238:	e7ef      	b.n	800921a <_vfiprintf_r+0x1ea>
 800923a:	ab07      	add	r3, sp, #28
 800923c:	9300      	str	r3, [sp, #0]
 800923e:	0022      	movs	r2, r4
 8009240:	0029      	movs	r1, r5
 8009242:	0030      	movs	r0, r6
 8009244:	4b16      	ldr	r3, [pc, #88]	; (80092a0 <_vfiprintf_r+0x270>)
 8009246:	e000      	b.n	800924a <_vfiprintf_r+0x21a>
 8009248:	bf00      	nop
 800924a:	9004      	str	r0, [sp, #16]
 800924c:	9b04      	ldr	r3, [sp, #16]
 800924e:	3301      	adds	r3, #1
 8009250:	d1d1      	bne.n	80091f6 <_vfiprintf_r+0x1c6>
 8009252:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009254:	07db      	lsls	r3, r3, #31
 8009256:	d405      	bmi.n	8009264 <_vfiprintf_r+0x234>
 8009258:	89a3      	ldrh	r3, [r4, #12]
 800925a:	059b      	lsls	r3, r3, #22
 800925c:	d402      	bmi.n	8009264 <_vfiprintf_r+0x234>
 800925e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009260:	f000 fc60 	bl	8009b24 <__retarget_lock_release_recursive>
 8009264:	89a3      	ldrh	r3, [r4, #12]
 8009266:	065b      	lsls	r3, r3, #25
 8009268:	d500      	bpl.n	800926c <_vfiprintf_r+0x23c>
 800926a:	e70a      	b.n	8009082 <_vfiprintf_r+0x52>
 800926c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800926e:	e70a      	b.n	8009086 <_vfiprintf_r+0x56>
 8009270:	ab07      	add	r3, sp, #28
 8009272:	9300      	str	r3, [sp, #0]
 8009274:	0022      	movs	r2, r4
 8009276:	0029      	movs	r1, r5
 8009278:	0030      	movs	r0, r6
 800927a:	4b09      	ldr	r3, [pc, #36]	; (80092a0 <_vfiprintf_r+0x270>)
 800927c:	f000 f882 	bl	8009384 <_printf_i>
 8009280:	e7e3      	b.n	800924a <_vfiprintf_r+0x21a>
 8009282:	46c0      	nop			; (mov r8, r8)
 8009284:	0800a550 	.word	0x0800a550
 8009288:	0800a570 	.word	0x0800a570
 800928c:	0800a530 	.word	0x0800a530
 8009290:	0800a4fc 	.word	0x0800a4fc
 8009294:	0800a502 	.word	0x0800a502
 8009298:	0800a506 	.word	0x0800a506
 800929c:	00000000 	.word	0x00000000
 80092a0:	0800900b 	.word	0x0800900b

080092a4 <_printf_common>:
 80092a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80092a6:	0015      	movs	r5, r2
 80092a8:	9301      	str	r3, [sp, #4]
 80092aa:	688a      	ldr	r2, [r1, #8]
 80092ac:	690b      	ldr	r3, [r1, #16]
 80092ae:	000c      	movs	r4, r1
 80092b0:	9000      	str	r0, [sp, #0]
 80092b2:	4293      	cmp	r3, r2
 80092b4:	da00      	bge.n	80092b8 <_printf_common+0x14>
 80092b6:	0013      	movs	r3, r2
 80092b8:	0022      	movs	r2, r4
 80092ba:	602b      	str	r3, [r5, #0]
 80092bc:	3243      	adds	r2, #67	; 0x43
 80092be:	7812      	ldrb	r2, [r2, #0]
 80092c0:	2a00      	cmp	r2, #0
 80092c2:	d001      	beq.n	80092c8 <_printf_common+0x24>
 80092c4:	3301      	adds	r3, #1
 80092c6:	602b      	str	r3, [r5, #0]
 80092c8:	6823      	ldr	r3, [r4, #0]
 80092ca:	069b      	lsls	r3, r3, #26
 80092cc:	d502      	bpl.n	80092d4 <_printf_common+0x30>
 80092ce:	682b      	ldr	r3, [r5, #0]
 80092d0:	3302      	adds	r3, #2
 80092d2:	602b      	str	r3, [r5, #0]
 80092d4:	6822      	ldr	r2, [r4, #0]
 80092d6:	2306      	movs	r3, #6
 80092d8:	0017      	movs	r7, r2
 80092da:	401f      	ands	r7, r3
 80092dc:	421a      	tst	r2, r3
 80092de:	d027      	beq.n	8009330 <_printf_common+0x8c>
 80092e0:	0023      	movs	r3, r4
 80092e2:	3343      	adds	r3, #67	; 0x43
 80092e4:	781b      	ldrb	r3, [r3, #0]
 80092e6:	1e5a      	subs	r2, r3, #1
 80092e8:	4193      	sbcs	r3, r2
 80092ea:	6822      	ldr	r2, [r4, #0]
 80092ec:	0692      	lsls	r2, r2, #26
 80092ee:	d430      	bmi.n	8009352 <_printf_common+0xae>
 80092f0:	0022      	movs	r2, r4
 80092f2:	9901      	ldr	r1, [sp, #4]
 80092f4:	9800      	ldr	r0, [sp, #0]
 80092f6:	9e08      	ldr	r6, [sp, #32]
 80092f8:	3243      	adds	r2, #67	; 0x43
 80092fa:	47b0      	blx	r6
 80092fc:	1c43      	adds	r3, r0, #1
 80092fe:	d025      	beq.n	800934c <_printf_common+0xa8>
 8009300:	2306      	movs	r3, #6
 8009302:	6820      	ldr	r0, [r4, #0]
 8009304:	682a      	ldr	r2, [r5, #0]
 8009306:	68e1      	ldr	r1, [r4, #12]
 8009308:	2500      	movs	r5, #0
 800930a:	4003      	ands	r3, r0
 800930c:	2b04      	cmp	r3, #4
 800930e:	d103      	bne.n	8009318 <_printf_common+0x74>
 8009310:	1a8d      	subs	r5, r1, r2
 8009312:	43eb      	mvns	r3, r5
 8009314:	17db      	asrs	r3, r3, #31
 8009316:	401d      	ands	r5, r3
 8009318:	68a3      	ldr	r3, [r4, #8]
 800931a:	6922      	ldr	r2, [r4, #16]
 800931c:	4293      	cmp	r3, r2
 800931e:	dd01      	ble.n	8009324 <_printf_common+0x80>
 8009320:	1a9b      	subs	r3, r3, r2
 8009322:	18ed      	adds	r5, r5, r3
 8009324:	2700      	movs	r7, #0
 8009326:	42bd      	cmp	r5, r7
 8009328:	d120      	bne.n	800936c <_printf_common+0xc8>
 800932a:	2000      	movs	r0, #0
 800932c:	e010      	b.n	8009350 <_printf_common+0xac>
 800932e:	3701      	adds	r7, #1
 8009330:	68e3      	ldr	r3, [r4, #12]
 8009332:	682a      	ldr	r2, [r5, #0]
 8009334:	1a9b      	subs	r3, r3, r2
 8009336:	42bb      	cmp	r3, r7
 8009338:	ddd2      	ble.n	80092e0 <_printf_common+0x3c>
 800933a:	0022      	movs	r2, r4
 800933c:	2301      	movs	r3, #1
 800933e:	9901      	ldr	r1, [sp, #4]
 8009340:	9800      	ldr	r0, [sp, #0]
 8009342:	9e08      	ldr	r6, [sp, #32]
 8009344:	3219      	adds	r2, #25
 8009346:	47b0      	blx	r6
 8009348:	1c43      	adds	r3, r0, #1
 800934a:	d1f0      	bne.n	800932e <_printf_common+0x8a>
 800934c:	2001      	movs	r0, #1
 800934e:	4240      	negs	r0, r0
 8009350:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009352:	2030      	movs	r0, #48	; 0x30
 8009354:	18e1      	adds	r1, r4, r3
 8009356:	3143      	adds	r1, #67	; 0x43
 8009358:	7008      	strb	r0, [r1, #0]
 800935a:	0021      	movs	r1, r4
 800935c:	1c5a      	adds	r2, r3, #1
 800935e:	3145      	adds	r1, #69	; 0x45
 8009360:	7809      	ldrb	r1, [r1, #0]
 8009362:	18a2      	adds	r2, r4, r2
 8009364:	3243      	adds	r2, #67	; 0x43
 8009366:	3302      	adds	r3, #2
 8009368:	7011      	strb	r1, [r2, #0]
 800936a:	e7c1      	b.n	80092f0 <_printf_common+0x4c>
 800936c:	0022      	movs	r2, r4
 800936e:	2301      	movs	r3, #1
 8009370:	9901      	ldr	r1, [sp, #4]
 8009372:	9800      	ldr	r0, [sp, #0]
 8009374:	9e08      	ldr	r6, [sp, #32]
 8009376:	321a      	adds	r2, #26
 8009378:	47b0      	blx	r6
 800937a:	1c43      	adds	r3, r0, #1
 800937c:	d0e6      	beq.n	800934c <_printf_common+0xa8>
 800937e:	3701      	adds	r7, #1
 8009380:	e7d1      	b.n	8009326 <_printf_common+0x82>
	...

08009384 <_printf_i>:
 8009384:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009386:	b08b      	sub	sp, #44	; 0x2c
 8009388:	9206      	str	r2, [sp, #24]
 800938a:	000a      	movs	r2, r1
 800938c:	3243      	adds	r2, #67	; 0x43
 800938e:	9307      	str	r3, [sp, #28]
 8009390:	9005      	str	r0, [sp, #20]
 8009392:	9204      	str	r2, [sp, #16]
 8009394:	7e0a      	ldrb	r2, [r1, #24]
 8009396:	000c      	movs	r4, r1
 8009398:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800939a:	2a78      	cmp	r2, #120	; 0x78
 800939c:	d807      	bhi.n	80093ae <_printf_i+0x2a>
 800939e:	2a62      	cmp	r2, #98	; 0x62
 80093a0:	d809      	bhi.n	80093b6 <_printf_i+0x32>
 80093a2:	2a00      	cmp	r2, #0
 80093a4:	d100      	bne.n	80093a8 <_printf_i+0x24>
 80093a6:	e0c1      	b.n	800952c <_printf_i+0x1a8>
 80093a8:	2a58      	cmp	r2, #88	; 0x58
 80093aa:	d100      	bne.n	80093ae <_printf_i+0x2a>
 80093ac:	e08c      	b.n	80094c8 <_printf_i+0x144>
 80093ae:	0026      	movs	r6, r4
 80093b0:	3642      	adds	r6, #66	; 0x42
 80093b2:	7032      	strb	r2, [r6, #0]
 80093b4:	e022      	b.n	80093fc <_printf_i+0x78>
 80093b6:	0010      	movs	r0, r2
 80093b8:	3863      	subs	r0, #99	; 0x63
 80093ba:	2815      	cmp	r0, #21
 80093bc:	d8f7      	bhi.n	80093ae <_printf_i+0x2a>
 80093be:	f7f6 feb3 	bl	8000128 <__gnu_thumb1_case_shi>
 80093c2:	0016      	.short	0x0016
 80093c4:	fff6001f 	.word	0xfff6001f
 80093c8:	fff6fff6 	.word	0xfff6fff6
 80093cc:	001ffff6 	.word	0x001ffff6
 80093d0:	fff6fff6 	.word	0xfff6fff6
 80093d4:	fff6fff6 	.word	0xfff6fff6
 80093d8:	003600a8 	.word	0x003600a8
 80093dc:	fff6009a 	.word	0xfff6009a
 80093e0:	00b9fff6 	.word	0x00b9fff6
 80093e4:	0036fff6 	.word	0x0036fff6
 80093e8:	fff6fff6 	.word	0xfff6fff6
 80093ec:	009e      	.short	0x009e
 80093ee:	0026      	movs	r6, r4
 80093f0:	681a      	ldr	r2, [r3, #0]
 80093f2:	3642      	adds	r6, #66	; 0x42
 80093f4:	1d11      	adds	r1, r2, #4
 80093f6:	6019      	str	r1, [r3, #0]
 80093f8:	6813      	ldr	r3, [r2, #0]
 80093fa:	7033      	strb	r3, [r6, #0]
 80093fc:	2301      	movs	r3, #1
 80093fe:	e0a7      	b.n	8009550 <_printf_i+0x1cc>
 8009400:	6808      	ldr	r0, [r1, #0]
 8009402:	6819      	ldr	r1, [r3, #0]
 8009404:	1d0a      	adds	r2, r1, #4
 8009406:	0605      	lsls	r5, r0, #24
 8009408:	d50b      	bpl.n	8009422 <_printf_i+0x9e>
 800940a:	680d      	ldr	r5, [r1, #0]
 800940c:	601a      	str	r2, [r3, #0]
 800940e:	2d00      	cmp	r5, #0
 8009410:	da03      	bge.n	800941a <_printf_i+0x96>
 8009412:	232d      	movs	r3, #45	; 0x2d
 8009414:	9a04      	ldr	r2, [sp, #16]
 8009416:	426d      	negs	r5, r5
 8009418:	7013      	strb	r3, [r2, #0]
 800941a:	4b61      	ldr	r3, [pc, #388]	; (80095a0 <_printf_i+0x21c>)
 800941c:	270a      	movs	r7, #10
 800941e:	9303      	str	r3, [sp, #12]
 8009420:	e01b      	b.n	800945a <_printf_i+0xd6>
 8009422:	680d      	ldr	r5, [r1, #0]
 8009424:	601a      	str	r2, [r3, #0]
 8009426:	0641      	lsls	r1, r0, #25
 8009428:	d5f1      	bpl.n	800940e <_printf_i+0x8a>
 800942a:	b22d      	sxth	r5, r5
 800942c:	e7ef      	b.n	800940e <_printf_i+0x8a>
 800942e:	680d      	ldr	r5, [r1, #0]
 8009430:	6819      	ldr	r1, [r3, #0]
 8009432:	1d08      	adds	r0, r1, #4
 8009434:	6018      	str	r0, [r3, #0]
 8009436:	062e      	lsls	r6, r5, #24
 8009438:	d501      	bpl.n	800943e <_printf_i+0xba>
 800943a:	680d      	ldr	r5, [r1, #0]
 800943c:	e003      	b.n	8009446 <_printf_i+0xc2>
 800943e:	066d      	lsls	r5, r5, #25
 8009440:	d5fb      	bpl.n	800943a <_printf_i+0xb6>
 8009442:	680d      	ldr	r5, [r1, #0]
 8009444:	b2ad      	uxth	r5, r5
 8009446:	4b56      	ldr	r3, [pc, #344]	; (80095a0 <_printf_i+0x21c>)
 8009448:	2708      	movs	r7, #8
 800944a:	9303      	str	r3, [sp, #12]
 800944c:	2a6f      	cmp	r2, #111	; 0x6f
 800944e:	d000      	beq.n	8009452 <_printf_i+0xce>
 8009450:	3702      	adds	r7, #2
 8009452:	0023      	movs	r3, r4
 8009454:	2200      	movs	r2, #0
 8009456:	3343      	adds	r3, #67	; 0x43
 8009458:	701a      	strb	r2, [r3, #0]
 800945a:	6863      	ldr	r3, [r4, #4]
 800945c:	60a3      	str	r3, [r4, #8]
 800945e:	2b00      	cmp	r3, #0
 8009460:	db03      	blt.n	800946a <_printf_i+0xe6>
 8009462:	2204      	movs	r2, #4
 8009464:	6821      	ldr	r1, [r4, #0]
 8009466:	4391      	bics	r1, r2
 8009468:	6021      	str	r1, [r4, #0]
 800946a:	2d00      	cmp	r5, #0
 800946c:	d102      	bne.n	8009474 <_printf_i+0xf0>
 800946e:	9e04      	ldr	r6, [sp, #16]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d00c      	beq.n	800948e <_printf_i+0x10a>
 8009474:	9e04      	ldr	r6, [sp, #16]
 8009476:	0028      	movs	r0, r5
 8009478:	0039      	movs	r1, r7
 800947a:	f7f6 fee5 	bl	8000248 <__aeabi_uidivmod>
 800947e:	9b03      	ldr	r3, [sp, #12]
 8009480:	3e01      	subs	r6, #1
 8009482:	5c5b      	ldrb	r3, [r3, r1]
 8009484:	7033      	strb	r3, [r6, #0]
 8009486:	002b      	movs	r3, r5
 8009488:	0005      	movs	r5, r0
 800948a:	429f      	cmp	r7, r3
 800948c:	d9f3      	bls.n	8009476 <_printf_i+0xf2>
 800948e:	2f08      	cmp	r7, #8
 8009490:	d109      	bne.n	80094a6 <_printf_i+0x122>
 8009492:	6823      	ldr	r3, [r4, #0]
 8009494:	07db      	lsls	r3, r3, #31
 8009496:	d506      	bpl.n	80094a6 <_printf_i+0x122>
 8009498:	6863      	ldr	r3, [r4, #4]
 800949a:	6922      	ldr	r2, [r4, #16]
 800949c:	4293      	cmp	r3, r2
 800949e:	dc02      	bgt.n	80094a6 <_printf_i+0x122>
 80094a0:	2330      	movs	r3, #48	; 0x30
 80094a2:	3e01      	subs	r6, #1
 80094a4:	7033      	strb	r3, [r6, #0]
 80094a6:	9b04      	ldr	r3, [sp, #16]
 80094a8:	1b9b      	subs	r3, r3, r6
 80094aa:	6123      	str	r3, [r4, #16]
 80094ac:	9b07      	ldr	r3, [sp, #28]
 80094ae:	0021      	movs	r1, r4
 80094b0:	9300      	str	r3, [sp, #0]
 80094b2:	9805      	ldr	r0, [sp, #20]
 80094b4:	9b06      	ldr	r3, [sp, #24]
 80094b6:	aa09      	add	r2, sp, #36	; 0x24
 80094b8:	f7ff fef4 	bl	80092a4 <_printf_common>
 80094bc:	1c43      	adds	r3, r0, #1
 80094be:	d14c      	bne.n	800955a <_printf_i+0x1d6>
 80094c0:	2001      	movs	r0, #1
 80094c2:	4240      	negs	r0, r0
 80094c4:	b00b      	add	sp, #44	; 0x2c
 80094c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094c8:	3145      	adds	r1, #69	; 0x45
 80094ca:	700a      	strb	r2, [r1, #0]
 80094cc:	4a34      	ldr	r2, [pc, #208]	; (80095a0 <_printf_i+0x21c>)
 80094ce:	9203      	str	r2, [sp, #12]
 80094d0:	681a      	ldr	r2, [r3, #0]
 80094d2:	6821      	ldr	r1, [r4, #0]
 80094d4:	ca20      	ldmia	r2!, {r5}
 80094d6:	601a      	str	r2, [r3, #0]
 80094d8:	0608      	lsls	r0, r1, #24
 80094da:	d516      	bpl.n	800950a <_printf_i+0x186>
 80094dc:	07cb      	lsls	r3, r1, #31
 80094de:	d502      	bpl.n	80094e6 <_printf_i+0x162>
 80094e0:	2320      	movs	r3, #32
 80094e2:	4319      	orrs	r1, r3
 80094e4:	6021      	str	r1, [r4, #0]
 80094e6:	2710      	movs	r7, #16
 80094e8:	2d00      	cmp	r5, #0
 80094ea:	d1b2      	bne.n	8009452 <_printf_i+0xce>
 80094ec:	2320      	movs	r3, #32
 80094ee:	6822      	ldr	r2, [r4, #0]
 80094f0:	439a      	bics	r2, r3
 80094f2:	6022      	str	r2, [r4, #0]
 80094f4:	e7ad      	b.n	8009452 <_printf_i+0xce>
 80094f6:	2220      	movs	r2, #32
 80094f8:	6809      	ldr	r1, [r1, #0]
 80094fa:	430a      	orrs	r2, r1
 80094fc:	6022      	str	r2, [r4, #0]
 80094fe:	0022      	movs	r2, r4
 8009500:	2178      	movs	r1, #120	; 0x78
 8009502:	3245      	adds	r2, #69	; 0x45
 8009504:	7011      	strb	r1, [r2, #0]
 8009506:	4a27      	ldr	r2, [pc, #156]	; (80095a4 <_printf_i+0x220>)
 8009508:	e7e1      	b.n	80094ce <_printf_i+0x14a>
 800950a:	0648      	lsls	r0, r1, #25
 800950c:	d5e6      	bpl.n	80094dc <_printf_i+0x158>
 800950e:	b2ad      	uxth	r5, r5
 8009510:	e7e4      	b.n	80094dc <_printf_i+0x158>
 8009512:	681a      	ldr	r2, [r3, #0]
 8009514:	680d      	ldr	r5, [r1, #0]
 8009516:	1d10      	adds	r0, r2, #4
 8009518:	6949      	ldr	r1, [r1, #20]
 800951a:	6018      	str	r0, [r3, #0]
 800951c:	6813      	ldr	r3, [r2, #0]
 800951e:	062e      	lsls	r6, r5, #24
 8009520:	d501      	bpl.n	8009526 <_printf_i+0x1a2>
 8009522:	6019      	str	r1, [r3, #0]
 8009524:	e002      	b.n	800952c <_printf_i+0x1a8>
 8009526:	066d      	lsls	r5, r5, #25
 8009528:	d5fb      	bpl.n	8009522 <_printf_i+0x19e>
 800952a:	8019      	strh	r1, [r3, #0]
 800952c:	2300      	movs	r3, #0
 800952e:	9e04      	ldr	r6, [sp, #16]
 8009530:	6123      	str	r3, [r4, #16]
 8009532:	e7bb      	b.n	80094ac <_printf_i+0x128>
 8009534:	681a      	ldr	r2, [r3, #0]
 8009536:	1d11      	adds	r1, r2, #4
 8009538:	6019      	str	r1, [r3, #0]
 800953a:	6816      	ldr	r6, [r2, #0]
 800953c:	2100      	movs	r1, #0
 800953e:	0030      	movs	r0, r6
 8009540:	6862      	ldr	r2, [r4, #4]
 8009542:	f000 fb5d 	bl	8009c00 <memchr>
 8009546:	2800      	cmp	r0, #0
 8009548:	d001      	beq.n	800954e <_printf_i+0x1ca>
 800954a:	1b80      	subs	r0, r0, r6
 800954c:	6060      	str	r0, [r4, #4]
 800954e:	6863      	ldr	r3, [r4, #4]
 8009550:	6123      	str	r3, [r4, #16]
 8009552:	2300      	movs	r3, #0
 8009554:	9a04      	ldr	r2, [sp, #16]
 8009556:	7013      	strb	r3, [r2, #0]
 8009558:	e7a8      	b.n	80094ac <_printf_i+0x128>
 800955a:	6923      	ldr	r3, [r4, #16]
 800955c:	0032      	movs	r2, r6
 800955e:	9906      	ldr	r1, [sp, #24]
 8009560:	9805      	ldr	r0, [sp, #20]
 8009562:	9d07      	ldr	r5, [sp, #28]
 8009564:	47a8      	blx	r5
 8009566:	1c43      	adds	r3, r0, #1
 8009568:	d0aa      	beq.n	80094c0 <_printf_i+0x13c>
 800956a:	6823      	ldr	r3, [r4, #0]
 800956c:	079b      	lsls	r3, r3, #30
 800956e:	d415      	bmi.n	800959c <_printf_i+0x218>
 8009570:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009572:	68e0      	ldr	r0, [r4, #12]
 8009574:	4298      	cmp	r0, r3
 8009576:	daa5      	bge.n	80094c4 <_printf_i+0x140>
 8009578:	0018      	movs	r0, r3
 800957a:	e7a3      	b.n	80094c4 <_printf_i+0x140>
 800957c:	0022      	movs	r2, r4
 800957e:	2301      	movs	r3, #1
 8009580:	9906      	ldr	r1, [sp, #24]
 8009582:	9805      	ldr	r0, [sp, #20]
 8009584:	9e07      	ldr	r6, [sp, #28]
 8009586:	3219      	adds	r2, #25
 8009588:	47b0      	blx	r6
 800958a:	1c43      	adds	r3, r0, #1
 800958c:	d098      	beq.n	80094c0 <_printf_i+0x13c>
 800958e:	3501      	adds	r5, #1
 8009590:	68e3      	ldr	r3, [r4, #12]
 8009592:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009594:	1a9b      	subs	r3, r3, r2
 8009596:	42ab      	cmp	r3, r5
 8009598:	dcf0      	bgt.n	800957c <_printf_i+0x1f8>
 800959a:	e7e9      	b.n	8009570 <_printf_i+0x1ec>
 800959c:	2500      	movs	r5, #0
 800959e:	e7f7      	b.n	8009590 <_printf_i+0x20c>
 80095a0:	0800a50d 	.word	0x0800a50d
 80095a4:	0800a51e 	.word	0x0800a51e

080095a8 <nan>:
 80095a8:	2000      	movs	r0, #0
 80095aa:	4901      	ldr	r1, [pc, #4]	; (80095b0 <nan+0x8>)
 80095ac:	4770      	bx	lr
 80095ae:	46c0      	nop			; (mov r8, r8)
 80095b0:	7ff80000 	.word	0x7ff80000

080095b4 <nanf>:
 80095b4:	4800      	ldr	r0, [pc, #0]	; (80095b8 <nanf+0x4>)
 80095b6:	4770      	bx	lr
 80095b8:	7fc00000 	.word	0x7fc00000

080095bc <__swbuf_r>:
 80095bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095be:	0005      	movs	r5, r0
 80095c0:	000e      	movs	r6, r1
 80095c2:	0014      	movs	r4, r2
 80095c4:	2800      	cmp	r0, #0
 80095c6:	d004      	beq.n	80095d2 <__swbuf_r+0x16>
 80095c8:	6983      	ldr	r3, [r0, #24]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d101      	bne.n	80095d2 <__swbuf_r+0x16>
 80095ce:	f000 fa07 	bl	80099e0 <__sinit>
 80095d2:	4b22      	ldr	r3, [pc, #136]	; (800965c <__swbuf_r+0xa0>)
 80095d4:	429c      	cmp	r4, r3
 80095d6:	d12e      	bne.n	8009636 <__swbuf_r+0x7a>
 80095d8:	686c      	ldr	r4, [r5, #4]
 80095da:	69a3      	ldr	r3, [r4, #24]
 80095dc:	60a3      	str	r3, [r4, #8]
 80095de:	89a3      	ldrh	r3, [r4, #12]
 80095e0:	071b      	lsls	r3, r3, #28
 80095e2:	d532      	bpl.n	800964a <__swbuf_r+0x8e>
 80095e4:	6923      	ldr	r3, [r4, #16]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d02f      	beq.n	800964a <__swbuf_r+0x8e>
 80095ea:	6823      	ldr	r3, [r4, #0]
 80095ec:	6922      	ldr	r2, [r4, #16]
 80095ee:	b2f7      	uxtb	r7, r6
 80095f0:	1a98      	subs	r0, r3, r2
 80095f2:	6963      	ldr	r3, [r4, #20]
 80095f4:	b2f6      	uxtb	r6, r6
 80095f6:	4283      	cmp	r3, r0
 80095f8:	dc05      	bgt.n	8009606 <__swbuf_r+0x4a>
 80095fa:	0021      	movs	r1, r4
 80095fc:	0028      	movs	r0, r5
 80095fe:	f000 f94d 	bl	800989c <_fflush_r>
 8009602:	2800      	cmp	r0, #0
 8009604:	d127      	bne.n	8009656 <__swbuf_r+0x9a>
 8009606:	68a3      	ldr	r3, [r4, #8]
 8009608:	3001      	adds	r0, #1
 800960a:	3b01      	subs	r3, #1
 800960c:	60a3      	str	r3, [r4, #8]
 800960e:	6823      	ldr	r3, [r4, #0]
 8009610:	1c5a      	adds	r2, r3, #1
 8009612:	6022      	str	r2, [r4, #0]
 8009614:	701f      	strb	r7, [r3, #0]
 8009616:	6963      	ldr	r3, [r4, #20]
 8009618:	4283      	cmp	r3, r0
 800961a:	d004      	beq.n	8009626 <__swbuf_r+0x6a>
 800961c:	89a3      	ldrh	r3, [r4, #12]
 800961e:	07db      	lsls	r3, r3, #31
 8009620:	d507      	bpl.n	8009632 <__swbuf_r+0x76>
 8009622:	2e0a      	cmp	r6, #10
 8009624:	d105      	bne.n	8009632 <__swbuf_r+0x76>
 8009626:	0021      	movs	r1, r4
 8009628:	0028      	movs	r0, r5
 800962a:	f000 f937 	bl	800989c <_fflush_r>
 800962e:	2800      	cmp	r0, #0
 8009630:	d111      	bne.n	8009656 <__swbuf_r+0x9a>
 8009632:	0030      	movs	r0, r6
 8009634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009636:	4b0a      	ldr	r3, [pc, #40]	; (8009660 <__swbuf_r+0xa4>)
 8009638:	429c      	cmp	r4, r3
 800963a:	d101      	bne.n	8009640 <__swbuf_r+0x84>
 800963c:	68ac      	ldr	r4, [r5, #8]
 800963e:	e7cc      	b.n	80095da <__swbuf_r+0x1e>
 8009640:	4b08      	ldr	r3, [pc, #32]	; (8009664 <__swbuf_r+0xa8>)
 8009642:	429c      	cmp	r4, r3
 8009644:	d1c9      	bne.n	80095da <__swbuf_r+0x1e>
 8009646:	68ec      	ldr	r4, [r5, #12]
 8009648:	e7c7      	b.n	80095da <__swbuf_r+0x1e>
 800964a:	0021      	movs	r1, r4
 800964c:	0028      	movs	r0, r5
 800964e:	f000 f819 	bl	8009684 <__swsetup_r>
 8009652:	2800      	cmp	r0, #0
 8009654:	d0c9      	beq.n	80095ea <__swbuf_r+0x2e>
 8009656:	2601      	movs	r6, #1
 8009658:	4276      	negs	r6, r6
 800965a:	e7ea      	b.n	8009632 <__swbuf_r+0x76>
 800965c:	0800a550 	.word	0x0800a550
 8009660:	0800a570 	.word	0x0800a570
 8009664:	0800a530 	.word	0x0800a530

08009668 <__ascii_wctomb>:
 8009668:	0003      	movs	r3, r0
 800966a:	1e08      	subs	r0, r1, #0
 800966c:	d005      	beq.n	800967a <__ascii_wctomb+0x12>
 800966e:	2aff      	cmp	r2, #255	; 0xff
 8009670:	d904      	bls.n	800967c <__ascii_wctomb+0x14>
 8009672:	228a      	movs	r2, #138	; 0x8a
 8009674:	2001      	movs	r0, #1
 8009676:	601a      	str	r2, [r3, #0]
 8009678:	4240      	negs	r0, r0
 800967a:	4770      	bx	lr
 800967c:	2001      	movs	r0, #1
 800967e:	700a      	strb	r2, [r1, #0]
 8009680:	e7fb      	b.n	800967a <__ascii_wctomb+0x12>
	...

08009684 <__swsetup_r>:
 8009684:	4b37      	ldr	r3, [pc, #220]	; (8009764 <__swsetup_r+0xe0>)
 8009686:	b570      	push	{r4, r5, r6, lr}
 8009688:	681d      	ldr	r5, [r3, #0]
 800968a:	0006      	movs	r6, r0
 800968c:	000c      	movs	r4, r1
 800968e:	2d00      	cmp	r5, #0
 8009690:	d005      	beq.n	800969e <__swsetup_r+0x1a>
 8009692:	69ab      	ldr	r3, [r5, #24]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d102      	bne.n	800969e <__swsetup_r+0x1a>
 8009698:	0028      	movs	r0, r5
 800969a:	f000 f9a1 	bl	80099e0 <__sinit>
 800969e:	4b32      	ldr	r3, [pc, #200]	; (8009768 <__swsetup_r+0xe4>)
 80096a0:	429c      	cmp	r4, r3
 80096a2:	d10f      	bne.n	80096c4 <__swsetup_r+0x40>
 80096a4:	686c      	ldr	r4, [r5, #4]
 80096a6:	230c      	movs	r3, #12
 80096a8:	5ee2      	ldrsh	r2, [r4, r3]
 80096aa:	b293      	uxth	r3, r2
 80096ac:	0711      	lsls	r1, r2, #28
 80096ae:	d42d      	bmi.n	800970c <__swsetup_r+0x88>
 80096b0:	06d9      	lsls	r1, r3, #27
 80096b2:	d411      	bmi.n	80096d8 <__swsetup_r+0x54>
 80096b4:	2309      	movs	r3, #9
 80096b6:	2001      	movs	r0, #1
 80096b8:	6033      	str	r3, [r6, #0]
 80096ba:	3337      	adds	r3, #55	; 0x37
 80096bc:	4313      	orrs	r3, r2
 80096be:	81a3      	strh	r3, [r4, #12]
 80096c0:	4240      	negs	r0, r0
 80096c2:	bd70      	pop	{r4, r5, r6, pc}
 80096c4:	4b29      	ldr	r3, [pc, #164]	; (800976c <__swsetup_r+0xe8>)
 80096c6:	429c      	cmp	r4, r3
 80096c8:	d101      	bne.n	80096ce <__swsetup_r+0x4a>
 80096ca:	68ac      	ldr	r4, [r5, #8]
 80096cc:	e7eb      	b.n	80096a6 <__swsetup_r+0x22>
 80096ce:	4b28      	ldr	r3, [pc, #160]	; (8009770 <__swsetup_r+0xec>)
 80096d0:	429c      	cmp	r4, r3
 80096d2:	d1e8      	bne.n	80096a6 <__swsetup_r+0x22>
 80096d4:	68ec      	ldr	r4, [r5, #12]
 80096d6:	e7e6      	b.n	80096a6 <__swsetup_r+0x22>
 80096d8:	075b      	lsls	r3, r3, #29
 80096da:	d513      	bpl.n	8009704 <__swsetup_r+0x80>
 80096dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80096de:	2900      	cmp	r1, #0
 80096e0:	d008      	beq.n	80096f4 <__swsetup_r+0x70>
 80096e2:	0023      	movs	r3, r4
 80096e4:	3344      	adds	r3, #68	; 0x44
 80096e6:	4299      	cmp	r1, r3
 80096e8:	d002      	beq.n	80096f0 <__swsetup_r+0x6c>
 80096ea:	0030      	movs	r0, r6
 80096ec:	f7fd f9b6 	bl	8006a5c <_free_r>
 80096f0:	2300      	movs	r3, #0
 80096f2:	6363      	str	r3, [r4, #52]	; 0x34
 80096f4:	2224      	movs	r2, #36	; 0x24
 80096f6:	89a3      	ldrh	r3, [r4, #12]
 80096f8:	4393      	bics	r3, r2
 80096fa:	81a3      	strh	r3, [r4, #12]
 80096fc:	2300      	movs	r3, #0
 80096fe:	6063      	str	r3, [r4, #4]
 8009700:	6923      	ldr	r3, [r4, #16]
 8009702:	6023      	str	r3, [r4, #0]
 8009704:	2308      	movs	r3, #8
 8009706:	89a2      	ldrh	r2, [r4, #12]
 8009708:	4313      	orrs	r3, r2
 800970a:	81a3      	strh	r3, [r4, #12]
 800970c:	6923      	ldr	r3, [r4, #16]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d10b      	bne.n	800972a <__swsetup_r+0xa6>
 8009712:	21a0      	movs	r1, #160	; 0xa0
 8009714:	2280      	movs	r2, #128	; 0x80
 8009716:	89a3      	ldrh	r3, [r4, #12]
 8009718:	0089      	lsls	r1, r1, #2
 800971a:	0092      	lsls	r2, r2, #2
 800971c:	400b      	ands	r3, r1
 800971e:	4293      	cmp	r3, r2
 8009720:	d003      	beq.n	800972a <__swsetup_r+0xa6>
 8009722:	0021      	movs	r1, r4
 8009724:	0030      	movs	r0, r6
 8009726:	f000 fa27 	bl	8009b78 <__smakebuf_r>
 800972a:	220c      	movs	r2, #12
 800972c:	5ea3      	ldrsh	r3, [r4, r2]
 800972e:	2001      	movs	r0, #1
 8009730:	001a      	movs	r2, r3
 8009732:	b299      	uxth	r1, r3
 8009734:	4002      	ands	r2, r0
 8009736:	4203      	tst	r3, r0
 8009738:	d00f      	beq.n	800975a <__swsetup_r+0xd6>
 800973a:	2200      	movs	r2, #0
 800973c:	60a2      	str	r2, [r4, #8]
 800973e:	6962      	ldr	r2, [r4, #20]
 8009740:	4252      	negs	r2, r2
 8009742:	61a2      	str	r2, [r4, #24]
 8009744:	2000      	movs	r0, #0
 8009746:	6922      	ldr	r2, [r4, #16]
 8009748:	4282      	cmp	r2, r0
 800974a:	d1ba      	bne.n	80096c2 <__swsetup_r+0x3e>
 800974c:	060a      	lsls	r2, r1, #24
 800974e:	d5b8      	bpl.n	80096c2 <__swsetup_r+0x3e>
 8009750:	2240      	movs	r2, #64	; 0x40
 8009752:	4313      	orrs	r3, r2
 8009754:	81a3      	strh	r3, [r4, #12]
 8009756:	3801      	subs	r0, #1
 8009758:	e7b3      	b.n	80096c2 <__swsetup_r+0x3e>
 800975a:	0788      	lsls	r0, r1, #30
 800975c:	d400      	bmi.n	8009760 <__swsetup_r+0xdc>
 800975e:	6962      	ldr	r2, [r4, #20]
 8009760:	60a2      	str	r2, [r4, #8]
 8009762:	e7ef      	b.n	8009744 <__swsetup_r+0xc0>
 8009764:	2000007c 	.word	0x2000007c
 8009768:	0800a550 	.word	0x0800a550
 800976c:	0800a570 	.word	0x0800a570
 8009770:	0800a530 	.word	0x0800a530

08009774 <abort>:
 8009774:	2006      	movs	r0, #6
 8009776:	b510      	push	{r4, lr}
 8009778:	f000 faba 	bl	8009cf0 <raise>
 800977c:	2001      	movs	r0, #1
 800977e:	f7f9 fc5d 	bl	800303c <_exit>
	...

08009784 <__sflush_r>:
 8009784:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009786:	898b      	ldrh	r3, [r1, #12]
 8009788:	0005      	movs	r5, r0
 800978a:	000c      	movs	r4, r1
 800978c:	071a      	lsls	r2, r3, #28
 800978e:	d45f      	bmi.n	8009850 <__sflush_r+0xcc>
 8009790:	684a      	ldr	r2, [r1, #4]
 8009792:	2a00      	cmp	r2, #0
 8009794:	dc04      	bgt.n	80097a0 <__sflush_r+0x1c>
 8009796:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8009798:	2a00      	cmp	r2, #0
 800979a:	dc01      	bgt.n	80097a0 <__sflush_r+0x1c>
 800979c:	2000      	movs	r0, #0
 800979e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80097a0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80097a2:	2f00      	cmp	r7, #0
 80097a4:	d0fa      	beq.n	800979c <__sflush_r+0x18>
 80097a6:	2200      	movs	r2, #0
 80097a8:	2180      	movs	r1, #128	; 0x80
 80097aa:	682e      	ldr	r6, [r5, #0]
 80097ac:	602a      	str	r2, [r5, #0]
 80097ae:	001a      	movs	r2, r3
 80097b0:	0149      	lsls	r1, r1, #5
 80097b2:	400a      	ands	r2, r1
 80097b4:	420b      	tst	r3, r1
 80097b6:	d034      	beq.n	8009822 <__sflush_r+0x9e>
 80097b8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80097ba:	89a3      	ldrh	r3, [r4, #12]
 80097bc:	075b      	lsls	r3, r3, #29
 80097be:	d506      	bpl.n	80097ce <__sflush_r+0x4a>
 80097c0:	6863      	ldr	r3, [r4, #4]
 80097c2:	1ac0      	subs	r0, r0, r3
 80097c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d001      	beq.n	80097ce <__sflush_r+0x4a>
 80097ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80097cc:	1ac0      	subs	r0, r0, r3
 80097ce:	0002      	movs	r2, r0
 80097d0:	6a21      	ldr	r1, [r4, #32]
 80097d2:	2300      	movs	r3, #0
 80097d4:	0028      	movs	r0, r5
 80097d6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80097d8:	47b8      	blx	r7
 80097da:	89a1      	ldrh	r1, [r4, #12]
 80097dc:	1c43      	adds	r3, r0, #1
 80097de:	d106      	bne.n	80097ee <__sflush_r+0x6a>
 80097e0:	682b      	ldr	r3, [r5, #0]
 80097e2:	2b1d      	cmp	r3, #29
 80097e4:	d831      	bhi.n	800984a <__sflush_r+0xc6>
 80097e6:	4a2c      	ldr	r2, [pc, #176]	; (8009898 <__sflush_r+0x114>)
 80097e8:	40da      	lsrs	r2, r3
 80097ea:	07d3      	lsls	r3, r2, #31
 80097ec:	d52d      	bpl.n	800984a <__sflush_r+0xc6>
 80097ee:	2300      	movs	r3, #0
 80097f0:	6063      	str	r3, [r4, #4]
 80097f2:	6923      	ldr	r3, [r4, #16]
 80097f4:	6023      	str	r3, [r4, #0]
 80097f6:	04cb      	lsls	r3, r1, #19
 80097f8:	d505      	bpl.n	8009806 <__sflush_r+0x82>
 80097fa:	1c43      	adds	r3, r0, #1
 80097fc:	d102      	bne.n	8009804 <__sflush_r+0x80>
 80097fe:	682b      	ldr	r3, [r5, #0]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d100      	bne.n	8009806 <__sflush_r+0x82>
 8009804:	6560      	str	r0, [r4, #84]	; 0x54
 8009806:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009808:	602e      	str	r6, [r5, #0]
 800980a:	2900      	cmp	r1, #0
 800980c:	d0c6      	beq.n	800979c <__sflush_r+0x18>
 800980e:	0023      	movs	r3, r4
 8009810:	3344      	adds	r3, #68	; 0x44
 8009812:	4299      	cmp	r1, r3
 8009814:	d002      	beq.n	800981c <__sflush_r+0x98>
 8009816:	0028      	movs	r0, r5
 8009818:	f7fd f920 	bl	8006a5c <_free_r>
 800981c:	2000      	movs	r0, #0
 800981e:	6360      	str	r0, [r4, #52]	; 0x34
 8009820:	e7bd      	b.n	800979e <__sflush_r+0x1a>
 8009822:	2301      	movs	r3, #1
 8009824:	0028      	movs	r0, r5
 8009826:	6a21      	ldr	r1, [r4, #32]
 8009828:	47b8      	blx	r7
 800982a:	1c43      	adds	r3, r0, #1
 800982c:	d1c5      	bne.n	80097ba <__sflush_r+0x36>
 800982e:	682b      	ldr	r3, [r5, #0]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d0c2      	beq.n	80097ba <__sflush_r+0x36>
 8009834:	2b1d      	cmp	r3, #29
 8009836:	d001      	beq.n	800983c <__sflush_r+0xb8>
 8009838:	2b16      	cmp	r3, #22
 800983a:	d101      	bne.n	8009840 <__sflush_r+0xbc>
 800983c:	602e      	str	r6, [r5, #0]
 800983e:	e7ad      	b.n	800979c <__sflush_r+0x18>
 8009840:	2340      	movs	r3, #64	; 0x40
 8009842:	89a2      	ldrh	r2, [r4, #12]
 8009844:	4313      	orrs	r3, r2
 8009846:	81a3      	strh	r3, [r4, #12]
 8009848:	e7a9      	b.n	800979e <__sflush_r+0x1a>
 800984a:	2340      	movs	r3, #64	; 0x40
 800984c:	430b      	orrs	r3, r1
 800984e:	e7fa      	b.n	8009846 <__sflush_r+0xc2>
 8009850:	690f      	ldr	r7, [r1, #16]
 8009852:	2f00      	cmp	r7, #0
 8009854:	d0a2      	beq.n	800979c <__sflush_r+0x18>
 8009856:	680a      	ldr	r2, [r1, #0]
 8009858:	600f      	str	r7, [r1, #0]
 800985a:	1bd2      	subs	r2, r2, r7
 800985c:	9201      	str	r2, [sp, #4]
 800985e:	2200      	movs	r2, #0
 8009860:	079b      	lsls	r3, r3, #30
 8009862:	d100      	bne.n	8009866 <__sflush_r+0xe2>
 8009864:	694a      	ldr	r2, [r1, #20]
 8009866:	60a2      	str	r2, [r4, #8]
 8009868:	9b01      	ldr	r3, [sp, #4]
 800986a:	2b00      	cmp	r3, #0
 800986c:	dc00      	bgt.n	8009870 <__sflush_r+0xec>
 800986e:	e795      	b.n	800979c <__sflush_r+0x18>
 8009870:	003a      	movs	r2, r7
 8009872:	0028      	movs	r0, r5
 8009874:	9b01      	ldr	r3, [sp, #4]
 8009876:	6a21      	ldr	r1, [r4, #32]
 8009878:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800987a:	47b0      	blx	r6
 800987c:	2800      	cmp	r0, #0
 800987e:	dc06      	bgt.n	800988e <__sflush_r+0x10a>
 8009880:	2340      	movs	r3, #64	; 0x40
 8009882:	2001      	movs	r0, #1
 8009884:	89a2      	ldrh	r2, [r4, #12]
 8009886:	4240      	negs	r0, r0
 8009888:	4313      	orrs	r3, r2
 800988a:	81a3      	strh	r3, [r4, #12]
 800988c:	e787      	b.n	800979e <__sflush_r+0x1a>
 800988e:	9b01      	ldr	r3, [sp, #4]
 8009890:	183f      	adds	r7, r7, r0
 8009892:	1a1b      	subs	r3, r3, r0
 8009894:	9301      	str	r3, [sp, #4]
 8009896:	e7e7      	b.n	8009868 <__sflush_r+0xe4>
 8009898:	20400001 	.word	0x20400001

0800989c <_fflush_r>:
 800989c:	690b      	ldr	r3, [r1, #16]
 800989e:	b570      	push	{r4, r5, r6, lr}
 80098a0:	0005      	movs	r5, r0
 80098a2:	000c      	movs	r4, r1
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d102      	bne.n	80098ae <_fflush_r+0x12>
 80098a8:	2500      	movs	r5, #0
 80098aa:	0028      	movs	r0, r5
 80098ac:	bd70      	pop	{r4, r5, r6, pc}
 80098ae:	2800      	cmp	r0, #0
 80098b0:	d004      	beq.n	80098bc <_fflush_r+0x20>
 80098b2:	6983      	ldr	r3, [r0, #24]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d101      	bne.n	80098bc <_fflush_r+0x20>
 80098b8:	f000 f892 	bl	80099e0 <__sinit>
 80098bc:	4b14      	ldr	r3, [pc, #80]	; (8009910 <_fflush_r+0x74>)
 80098be:	429c      	cmp	r4, r3
 80098c0:	d11b      	bne.n	80098fa <_fflush_r+0x5e>
 80098c2:	686c      	ldr	r4, [r5, #4]
 80098c4:	220c      	movs	r2, #12
 80098c6:	5ea3      	ldrsh	r3, [r4, r2]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d0ed      	beq.n	80098a8 <_fflush_r+0xc>
 80098cc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80098ce:	07d2      	lsls	r2, r2, #31
 80098d0:	d404      	bmi.n	80098dc <_fflush_r+0x40>
 80098d2:	059b      	lsls	r3, r3, #22
 80098d4:	d402      	bmi.n	80098dc <_fflush_r+0x40>
 80098d6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80098d8:	f000 f923 	bl	8009b22 <__retarget_lock_acquire_recursive>
 80098dc:	0028      	movs	r0, r5
 80098de:	0021      	movs	r1, r4
 80098e0:	f7ff ff50 	bl	8009784 <__sflush_r>
 80098e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80098e6:	0005      	movs	r5, r0
 80098e8:	07db      	lsls	r3, r3, #31
 80098ea:	d4de      	bmi.n	80098aa <_fflush_r+0xe>
 80098ec:	89a3      	ldrh	r3, [r4, #12]
 80098ee:	059b      	lsls	r3, r3, #22
 80098f0:	d4db      	bmi.n	80098aa <_fflush_r+0xe>
 80098f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80098f4:	f000 f916 	bl	8009b24 <__retarget_lock_release_recursive>
 80098f8:	e7d7      	b.n	80098aa <_fflush_r+0xe>
 80098fa:	4b06      	ldr	r3, [pc, #24]	; (8009914 <_fflush_r+0x78>)
 80098fc:	429c      	cmp	r4, r3
 80098fe:	d101      	bne.n	8009904 <_fflush_r+0x68>
 8009900:	68ac      	ldr	r4, [r5, #8]
 8009902:	e7df      	b.n	80098c4 <_fflush_r+0x28>
 8009904:	4b04      	ldr	r3, [pc, #16]	; (8009918 <_fflush_r+0x7c>)
 8009906:	429c      	cmp	r4, r3
 8009908:	d1dc      	bne.n	80098c4 <_fflush_r+0x28>
 800990a:	68ec      	ldr	r4, [r5, #12]
 800990c:	e7da      	b.n	80098c4 <_fflush_r+0x28>
 800990e:	46c0      	nop			; (mov r8, r8)
 8009910:	0800a550 	.word	0x0800a550
 8009914:	0800a570 	.word	0x0800a570
 8009918:	0800a530 	.word	0x0800a530

0800991c <std>:
 800991c:	2300      	movs	r3, #0
 800991e:	b510      	push	{r4, lr}
 8009920:	0004      	movs	r4, r0
 8009922:	6003      	str	r3, [r0, #0]
 8009924:	6043      	str	r3, [r0, #4]
 8009926:	6083      	str	r3, [r0, #8]
 8009928:	8181      	strh	r1, [r0, #12]
 800992a:	6643      	str	r3, [r0, #100]	; 0x64
 800992c:	0019      	movs	r1, r3
 800992e:	81c2      	strh	r2, [r0, #14]
 8009930:	6103      	str	r3, [r0, #16]
 8009932:	6143      	str	r3, [r0, #20]
 8009934:	6183      	str	r3, [r0, #24]
 8009936:	2208      	movs	r2, #8
 8009938:	305c      	adds	r0, #92	; 0x5c
 800993a:	f7fd f886 	bl	8006a4a <memset>
 800993e:	4b05      	ldr	r3, [pc, #20]	; (8009954 <std+0x38>)
 8009940:	6224      	str	r4, [r4, #32]
 8009942:	6263      	str	r3, [r4, #36]	; 0x24
 8009944:	4b04      	ldr	r3, [pc, #16]	; (8009958 <std+0x3c>)
 8009946:	62a3      	str	r3, [r4, #40]	; 0x28
 8009948:	4b04      	ldr	r3, [pc, #16]	; (800995c <std+0x40>)
 800994a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800994c:	4b04      	ldr	r3, [pc, #16]	; (8009960 <std+0x44>)
 800994e:	6323      	str	r3, [r4, #48]	; 0x30
 8009950:	bd10      	pop	{r4, pc}
 8009952:	46c0      	nop			; (mov r8, r8)
 8009954:	08009d31 	.word	0x08009d31
 8009958:	08009d59 	.word	0x08009d59
 800995c:	08009d91 	.word	0x08009d91
 8009960:	08009dbd 	.word	0x08009dbd

08009964 <_cleanup_r>:
 8009964:	b510      	push	{r4, lr}
 8009966:	4902      	ldr	r1, [pc, #8]	; (8009970 <_cleanup_r+0xc>)
 8009968:	f000 f8ba 	bl	8009ae0 <_fwalk_reent>
 800996c:	bd10      	pop	{r4, pc}
 800996e:	46c0      	nop			; (mov r8, r8)
 8009970:	0800989d 	.word	0x0800989d

08009974 <__sfmoreglue>:
 8009974:	b570      	push	{r4, r5, r6, lr}
 8009976:	2568      	movs	r5, #104	; 0x68
 8009978:	1e4a      	subs	r2, r1, #1
 800997a:	4355      	muls	r5, r2
 800997c:	000e      	movs	r6, r1
 800997e:	0029      	movs	r1, r5
 8009980:	3174      	adds	r1, #116	; 0x74
 8009982:	f7fd f8d7 	bl	8006b34 <_malloc_r>
 8009986:	1e04      	subs	r4, r0, #0
 8009988:	d008      	beq.n	800999c <__sfmoreglue+0x28>
 800998a:	2100      	movs	r1, #0
 800998c:	002a      	movs	r2, r5
 800998e:	6001      	str	r1, [r0, #0]
 8009990:	6046      	str	r6, [r0, #4]
 8009992:	300c      	adds	r0, #12
 8009994:	60a0      	str	r0, [r4, #8]
 8009996:	3268      	adds	r2, #104	; 0x68
 8009998:	f7fd f857 	bl	8006a4a <memset>
 800999c:	0020      	movs	r0, r4
 800999e:	bd70      	pop	{r4, r5, r6, pc}

080099a0 <__sfp_lock_acquire>:
 80099a0:	b510      	push	{r4, lr}
 80099a2:	4802      	ldr	r0, [pc, #8]	; (80099ac <__sfp_lock_acquire+0xc>)
 80099a4:	f000 f8bd 	bl	8009b22 <__retarget_lock_acquire_recursive>
 80099a8:	bd10      	pop	{r4, pc}
 80099aa:	46c0      	nop			; (mov r8, r8)
 80099ac:	20000589 	.word	0x20000589

080099b0 <__sfp_lock_release>:
 80099b0:	b510      	push	{r4, lr}
 80099b2:	4802      	ldr	r0, [pc, #8]	; (80099bc <__sfp_lock_release+0xc>)
 80099b4:	f000 f8b6 	bl	8009b24 <__retarget_lock_release_recursive>
 80099b8:	bd10      	pop	{r4, pc}
 80099ba:	46c0      	nop			; (mov r8, r8)
 80099bc:	20000589 	.word	0x20000589

080099c0 <__sinit_lock_acquire>:
 80099c0:	b510      	push	{r4, lr}
 80099c2:	4802      	ldr	r0, [pc, #8]	; (80099cc <__sinit_lock_acquire+0xc>)
 80099c4:	f000 f8ad 	bl	8009b22 <__retarget_lock_acquire_recursive>
 80099c8:	bd10      	pop	{r4, pc}
 80099ca:	46c0      	nop			; (mov r8, r8)
 80099cc:	2000058a 	.word	0x2000058a

080099d0 <__sinit_lock_release>:
 80099d0:	b510      	push	{r4, lr}
 80099d2:	4802      	ldr	r0, [pc, #8]	; (80099dc <__sinit_lock_release+0xc>)
 80099d4:	f000 f8a6 	bl	8009b24 <__retarget_lock_release_recursive>
 80099d8:	bd10      	pop	{r4, pc}
 80099da:	46c0      	nop			; (mov r8, r8)
 80099dc:	2000058a 	.word	0x2000058a

080099e0 <__sinit>:
 80099e0:	b513      	push	{r0, r1, r4, lr}
 80099e2:	0004      	movs	r4, r0
 80099e4:	f7ff ffec 	bl	80099c0 <__sinit_lock_acquire>
 80099e8:	69a3      	ldr	r3, [r4, #24]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d002      	beq.n	80099f4 <__sinit+0x14>
 80099ee:	f7ff ffef 	bl	80099d0 <__sinit_lock_release>
 80099f2:	bd13      	pop	{r0, r1, r4, pc}
 80099f4:	64a3      	str	r3, [r4, #72]	; 0x48
 80099f6:	64e3      	str	r3, [r4, #76]	; 0x4c
 80099f8:	6523      	str	r3, [r4, #80]	; 0x50
 80099fa:	4b13      	ldr	r3, [pc, #76]	; (8009a48 <__sinit+0x68>)
 80099fc:	4a13      	ldr	r2, [pc, #76]	; (8009a4c <__sinit+0x6c>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	62a2      	str	r2, [r4, #40]	; 0x28
 8009a02:	9301      	str	r3, [sp, #4]
 8009a04:	42a3      	cmp	r3, r4
 8009a06:	d101      	bne.n	8009a0c <__sinit+0x2c>
 8009a08:	2301      	movs	r3, #1
 8009a0a:	61a3      	str	r3, [r4, #24]
 8009a0c:	0020      	movs	r0, r4
 8009a0e:	f000 f81f 	bl	8009a50 <__sfp>
 8009a12:	6060      	str	r0, [r4, #4]
 8009a14:	0020      	movs	r0, r4
 8009a16:	f000 f81b 	bl	8009a50 <__sfp>
 8009a1a:	60a0      	str	r0, [r4, #8]
 8009a1c:	0020      	movs	r0, r4
 8009a1e:	f000 f817 	bl	8009a50 <__sfp>
 8009a22:	2200      	movs	r2, #0
 8009a24:	2104      	movs	r1, #4
 8009a26:	60e0      	str	r0, [r4, #12]
 8009a28:	6860      	ldr	r0, [r4, #4]
 8009a2a:	f7ff ff77 	bl	800991c <std>
 8009a2e:	2201      	movs	r2, #1
 8009a30:	2109      	movs	r1, #9
 8009a32:	68a0      	ldr	r0, [r4, #8]
 8009a34:	f7ff ff72 	bl	800991c <std>
 8009a38:	2202      	movs	r2, #2
 8009a3a:	2112      	movs	r1, #18
 8009a3c:	68e0      	ldr	r0, [r4, #12]
 8009a3e:	f7ff ff6d 	bl	800991c <std>
 8009a42:	2301      	movs	r3, #1
 8009a44:	61a3      	str	r3, [r4, #24]
 8009a46:	e7d2      	b.n	80099ee <__sinit+0xe>
 8009a48:	0800a108 	.word	0x0800a108
 8009a4c:	08009965 	.word	0x08009965

08009a50 <__sfp>:
 8009a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a52:	0007      	movs	r7, r0
 8009a54:	f7ff ffa4 	bl	80099a0 <__sfp_lock_acquire>
 8009a58:	4b1f      	ldr	r3, [pc, #124]	; (8009ad8 <__sfp+0x88>)
 8009a5a:	681e      	ldr	r6, [r3, #0]
 8009a5c:	69b3      	ldr	r3, [r6, #24]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d102      	bne.n	8009a68 <__sfp+0x18>
 8009a62:	0030      	movs	r0, r6
 8009a64:	f7ff ffbc 	bl	80099e0 <__sinit>
 8009a68:	3648      	adds	r6, #72	; 0x48
 8009a6a:	68b4      	ldr	r4, [r6, #8]
 8009a6c:	6873      	ldr	r3, [r6, #4]
 8009a6e:	3b01      	subs	r3, #1
 8009a70:	d504      	bpl.n	8009a7c <__sfp+0x2c>
 8009a72:	6833      	ldr	r3, [r6, #0]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d022      	beq.n	8009abe <__sfp+0x6e>
 8009a78:	6836      	ldr	r6, [r6, #0]
 8009a7a:	e7f6      	b.n	8009a6a <__sfp+0x1a>
 8009a7c:	220c      	movs	r2, #12
 8009a7e:	5ea5      	ldrsh	r5, [r4, r2]
 8009a80:	2d00      	cmp	r5, #0
 8009a82:	d11a      	bne.n	8009aba <__sfp+0x6a>
 8009a84:	0020      	movs	r0, r4
 8009a86:	4b15      	ldr	r3, [pc, #84]	; (8009adc <__sfp+0x8c>)
 8009a88:	3058      	adds	r0, #88	; 0x58
 8009a8a:	60e3      	str	r3, [r4, #12]
 8009a8c:	6665      	str	r5, [r4, #100]	; 0x64
 8009a8e:	f000 f847 	bl	8009b20 <__retarget_lock_init_recursive>
 8009a92:	f7ff ff8d 	bl	80099b0 <__sfp_lock_release>
 8009a96:	0020      	movs	r0, r4
 8009a98:	2208      	movs	r2, #8
 8009a9a:	0029      	movs	r1, r5
 8009a9c:	6025      	str	r5, [r4, #0]
 8009a9e:	60a5      	str	r5, [r4, #8]
 8009aa0:	6065      	str	r5, [r4, #4]
 8009aa2:	6125      	str	r5, [r4, #16]
 8009aa4:	6165      	str	r5, [r4, #20]
 8009aa6:	61a5      	str	r5, [r4, #24]
 8009aa8:	305c      	adds	r0, #92	; 0x5c
 8009aaa:	f7fc ffce 	bl	8006a4a <memset>
 8009aae:	6365      	str	r5, [r4, #52]	; 0x34
 8009ab0:	63a5      	str	r5, [r4, #56]	; 0x38
 8009ab2:	64a5      	str	r5, [r4, #72]	; 0x48
 8009ab4:	64e5      	str	r5, [r4, #76]	; 0x4c
 8009ab6:	0020      	movs	r0, r4
 8009ab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009aba:	3468      	adds	r4, #104	; 0x68
 8009abc:	e7d7      	b.n	8009a6e <__sfp+0x1e>
 8009abe:	2104      	movs	r1, #4
 8009ac0:	0038      	movs	r0, r7
 8009ac2:	f7ff ff57 	bl	8009974 <__sfmoreglue>
 8009ac6:	1e04      	subs	r4, r0, #0
 8009ac8:	6030      	str	r0, [r6, #0]
 8009aca:	d1d5      	bne.n	8009a78 <__sfp+0x28>
 8009acc:	f7ff ff70 	bl	80099b0 <__sfp_lock_release>
 8009ad0:	230c      	movs	r3, #12
 8009ad2:	603b      	str	r3, [r7, #0]
 8009ad4:	e7ef      	b.n	8009ab6 <__sfp+0x66>
 8009ad6:	46c0      	nop			; (mov r8, r8)
 8009ad8:	0800a108 	.word	0x0800a108
 8009adc:	ffff0001 	.word	0xffff0001

08009ae0 <_fwalk_reent>:
 8009ae0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ae2:	0004      	movs	r4, r0
 8009ae4:	0006      	movs	r6, r0
 8009ae6:	2700      	movs	r7, #0
 8009ae8:	9101      	str	r1, [sp, #4]
 8009aea:	3448      	adds	r4, #72	; 0x48
 8009aec:	6863      	ldr	r3, [r4, #4]
 8009aee:	68a5      	ldr	r5, [r4, #8]
 8009af0:	9300      	str	r3, [sp, #0]
 8009af2:	9b00      	ldr	r3, [sp, #0]
 8009af4:	3b01      	subs	r3, #1
 8009af6:	9300      	str	r3, [sp, #0]
 8009af8:	d504      	bpl.n	8009b04 <_fwalk_reent+0x24>
 8009afa:	6824      	ldr	r4, [r4, #0]
 8009afc:	2c00      	cmp	r4, #0
 8009afe:	d1f5      	bne.n	8009aec <_fwalk_reent+0xc>
 8009b00:	0038      	movs	r0, r7
 8009b02:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009b04:	89ab      	ldrh	r3, [r5, #12]
 8009b06:	2b01      	cmp	r3, #1
 8009b08:	d908      	bls.n	8009b1c <_fwalk_reent+0x3c>
 8009b0a:	220e      	movs	r2, #14
 8009b0c:	5eab      	ldrsh	r3, [r5, r2]
 8009b0e:	3301      	adds	r3, #1
 8009b10:	d004      	beq.n	8009b1c <_fwalk_reent+0x3c>
 8009b12:	0029      	movs	r1, r5
 8009b14:	0030      	movs	r0, r6
 8009b16:	9b01      	ldr	r3, [sp, #4]
 8009b18:	4798      	blx	r3
 8009b1a:	4307      	orrs	r7, r0
 8009b1c:	3568      	adds	r5, #104	; 0x68
 8009b1e:	e7e8      	b.n	8009af2 <_fwalk_reent+0x12>

08009b20 <__retarget_lock_init_recursive>:
 8009b20:	4770      	bx	lr

08009b22 <__retarget_lock_acquire_recursive>:
 8009b22:	4770      	bx	lr

08009b24 <__retarget_lock_release_recursive>:
 8009b24:	4770      	bx	lr
	...

08009b28 <__swhatbuf_r>:
 8009b28:	b570      	push	{r4, r5, r6, lr}
 8009b2a:	000e      	movs	r6, r1
 8009b2c:	001d      	movs	r5, r3
 8009b2e:	230e      	movs	r3, #14
 8009b30:	5ec9      	ldrsh	r1, [r1, r3]
 8009b32:	0014      	movs	r4, r2
 8009b34:	b096      	sub	sp, #88	; 0x58
 8009b36:	2900      	cmp	r1, #0
 8009b38:	da08      	bge.n	8009b4c <__swhatbuf_r+0x24>
 8009b3a:	220c      	movs	r2, #12
 8009b3c:	5eb3      	ldrsh	r3, [r6, r2]
 8009b3e:	2200      	movs	r2, #0
 8009b40:	602a      	str	r2, [r5, #0]
 8009b42:	061b      	lsls	r3, r3, #24
 8009b44:	d411      	bmi.n	8009b6a <__swhatbuf_r+0x42>
 8009b46:	2380      	movs	r3, #128	; 0x80
 8009b48:	00db      	lsls	r3, r3, #3
 8009b4a:	e00f      	b.n	8009b6c <__swhatbuf_r+0x44>
 8009b4c:	466a      	mov	r2, sp
 8009b4e:	f000 f961 	bl	8009e14 <_fstat_r>
 8009b52:	2800      	cmp	r0, #0
 8009b54:	dbf1      	blt.n	8009b3a <__swhatbuf_r+0x12>
 8009b56:	23f0      	movs	r3, #240	; 0xf0
 8009b58:	9901      	ldr	r1, [sp, #4]
 8009b5a:	021b      	lsls	r3, r3, #8
 8009b5c:	4019      	ands	r1, r3
 8009b5e:	4b05      	ldr	r3, [pc, #20]	; (8009b74 <__swhatbuf_r+0x4c>)
 8009b60:	18c9      	adds	r1, r1, r3
 8009b62:	424b      	negs	r3, r1
 8009b64:	4159      	adcs	r1, r3
 8009b66:	6029      	str	r1, [r5, #0]
 8009b68:	e7ed      	b.n	8009b46 <__swhatbuf_r+0x1e>
 8009b6a:	2340      	movs	r3, #64	; 0x40
 8009b6c:	2000      	movs	r0, #0
 8009b6e:	6023      	str	r3, [r4, #0]
 8009b70:	b016      	add	sp, #88	; 0x58
 8009b72:	bd70      	pop	{r4, r5, r6, pc}
 8009b74:	ffffe000 	.word	0xffffe000

08009b78 <__smakebuf_r>:
 8009b78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b7a:	2602      	movs	r6, #2
 8009b7c:	898b      	ldrh	r3, [r1, #12]
 8009b7e:	0005      	movs	r5, r0
 8009b80:	000c      	movs	r4, r1
 8009b82:	4233      	tst	r3, r6
 8009b84:	d006      	beq.n	8009b94 <__smakebuf_r+0x1c>
 8009b86:	0023      	movs	r3, r4
 8009b88:	3347      	adds	r3, #71	; 0x47
 8009b8a:	6023      	str	r3, [r4, #0]
 8009b8c:	6123      	str	r3, [r4, #16]
 8009b8e:	2301      	movs	r3, #1
 8009b90:	6163      	str	r3, [r4, #20]
 8009b92:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8009b94:	466a      	mov	r2, sp
 8009b96:	ab01      	add	r3, sp, #4
 8009b98:	f7ff ffc6 	bl	8009b28 <__swhatbuf_r>
 8009b9c:	9900      	ldr	r1, [sp, #0]
 8009b9e:	0007      	movs	r7, r0
 8009ba0:	0028      	movs	r0, r5
 8009ba2:	f7fc ffc7 	bl	8006b34 <_malloc_r>
 8009ba6:	2800      	cmp	r0, #0
 8009ba8:	d108      	bne.n	8009bbc <__smakebuf_r+0x44>
 8009baa:	220c      	movs	r2, #12
 8009bac:	5ea3      	ldrsh	r3, [r4, r2]
 8009bae:	059a      	lsls	r2, r3, #22
 8009bb0:	d4ef      	bmi.n	8009b92 <__smakebuf_r+0x1a>
 8009bb2:	2203      	movs	r2, #3
 8009bb4:	4393      	bics	r3, r2
 8009bb6:	431e      	orrs	r6, r3
 8009bb8:	81a6      	strh	r6, [r4, #12]
 8009bba:	e7e4      	b.n	8009b86 <__smakebuf_r+0xe>
 8009bbc:	4b0f      	ldr	r3, [pc, #60]	; (8009bfc <__smakebuf_r+0x84>)
 8009bbe:	62ab      	str	r3, [r5, #40]	; 0x28
 8009bc0:	2380      	movs	r3, #128	; 0x80
 8009bc2:	89a2      	ldrh	r2, [r4, #12]
 8009bc4:	6020      	str	r0, [r4, #0]
 8009bc6:	4313      	orrs	r3, r2
 8009bc8:	81a3      	strh	r3, [r4, #12]
 8009bca:	9b00      	ldr	r3, [sp, #0]
 8009bcc:	6120      	str	r0, [r4, #16]
 8009bce:	6163      	str	r3, [r4, #20]
 8009bd0:	9b01      	ldr	r3, [sp, #4]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d00d      	beq.n	8009bf2 <__smakebuf_r+0x7a>
 8009bd6:	0028      	movs	r0, r5
 8009bd8:	230e      	movs	r3, #14
 8009bda:	5ee1      	ldrsh	r1, [r4, r3]
 8009bdc:	f000 f92c 	bl	8009e38 <_isatty_r>
 8009be0:	2800      	cmp	r0, #0
 8009be2:	d006      	beq.n	8009bf2 <__smakebuf_r+0x7a>
 8009be4:	2203      	movs	r2, #3
 8009be6:	89a3      	ldrh	r3, [r4, #12]
 8009be8:	4393      	bics	r3, r2
 8009bea:	001a      	movs	r2, r3
 8009bec:	2301      	movs	r3, #1
 8009bee:	4313      	orrs	r3, r2
 8009bf0:	81a3      	strh	r3, [r4, #12]
 8009bf2:	89a0      	ldrh	r0, [r4, #12]
 8009bf4:	4307      	orrs	r7, r0
 8009bf6:	81a7      	strh	r7, [r4, #12]
 8009bf8:	e7cb      	b.n	8009b92 <__smakebuf_r+0x1a>
 8009bfa:	46c0      	nop			; (mov r8, r8)
 8009bfc:	08009965 	.word	0x08009965

08009c00 <memchr>:
 8009c00:	b2c9      	uxtb	r1, r1
 8009c02:	1882      	adds	r2, r0, r2
 8009c04:	4290      	cmp	r0, r2
 8009c06:	d101      	bne.n	8009c0c <memchr+0xc>
 8009c08:	2000      	movs	r0, #0
 8009c0a:	4770      	bx	lr
 8009c0c:	7803      	ldrb	r3, [r0, #0]
 8009c0e:	428b      	cmp	r3, r1
 8009c10:	d0fb      	beq.n	8009c0a <memchr+0xa>
 8009c12:	3001      	adds	r0, #1
 8009c14:	e7f6      	b.n	8009c04 <memchr+0x4>

08009c16 <memmove>:
 8009c16:	b510      	push	{r4, lr}
 8009c18:	4288      	cmp	r0, r1
 8009c1a:	d902      	bls.n	8009c22 <memmove+0xc>
 8009c1c:	188b      	adds	r3, r1, r2
 8009c1e:	4298      	cmp	r0, r3
 8009c20:	d303      	bcc.n	8009c2a <memmove+0x14>
 8009c22:	2300      	movs	r3, #0
 8009c24:	e007      	b.n	8009c36 <memmove+0x20>
 8009c26:	5c8b      	ldrb	r3, [r1, r2]
 8009c28:	5483      	strb	r3, [r0, r2]
 8009c2a:	3a01      	subs	r2, #1
 8009c2c:	d2fb      	bcs.n	8009c26 <memmove+0x10>
 8009c2e:	bd10      	pop	{r4, pc}
 8009c30:	5ccc      	ldrb	r4, [r1, r3]
 8009c32:	54c4      	strb	r4, [r0, r3]
 8009c34:	3301      	adds	r3, #1
 8009c36:	429a      	cmp	r2, r3
 8009c38:	d1fa      	bne.n	8009c30 <memmove+0x1a>
 8009c3a:	e7f8      	b.n	8009c2e <memmove+0x18>

08009c3c <_realloc_r>:
 8009c3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c3e:	0007      	movs	r7, r0
 8009c40:	000e      	movs	r6, r1
 8009c42:	0014      	movs	r4, r2
 8009c44:	2900      	cmp	r1, #0
 8009c46:	d105      	bne.n	8009c54 <_realloc_r+0x18>
 8009c48:	0011      	movs	r1, r2
 8009c4a:	f7fc ff73 	bl	8006b34 <_malloc_r>
 8009c4e:	0005      	movs	r5, r0
 8009c50:	0028      	movs	r0, r5
 8009c52:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009c54:	2a00      	cmp	r2, #0
 8009c56:	d103      	bne.n	8009c60 <_realloc_r+0x24>
 8009c58:	f7fc ff00 	bl	8006a5c <_free_r>
 8009c5c:	0025      	movs	r5, r4
 8009c5e:	e7f7      	b.n	8009c50 <_realloc_r+0x14>
 8009c60:	f000 f910 	bl	8009e84 <_malloc_usable_size_r>
 8009c64:	9001      	str	r0, [sp, #4]
 8009c66:	4284      	cmp	r4, r0
 8009c68:	d803      	bhi.n	8009c72 <_realloc_r+0x36>
 8009c6a:	0035      	movs	r5, r6
 8009c6c:	0843      	lsrs	r3, r0, #1
 8009c6e:	42a3      	cmp	r3, r4
 8009c70:	d3ee      	bcc.n	8009c50 <_realloc_r+0x14>
 8009c72:	0021      	movs	r1, r4
 8009c74:	0038      	movs	r0, r7
 8009c76:	f7fc ff5d 	bl	8006b34 <_malloc_r>
 8009c7a:	1e05      	subs	r5, r0, #0
 8009c7c:	d0e8      	beq.n	8009c50 <_realloc_r+0x14>
 8009c7e:	9b01      	ldr	r3, [sp, #4]
 8009c80:	0022      	movs	r2, r4
 8009c82:	429c      	cmp	r4, r3
 8009c84:	d900      	bls.n	8009c88 <_realloc_r+0x4c>
 8009c86:	001a      	movs	r2, r3
 8009c88:	0031      	movs	r1, r6
 8009c8a:	0028      	movs	r0, r5
 8009c8c:	f7fc fed4 	bl	8006a38 <memcpy>
 8009c90:	0031      	movs	r1, r6
 8009c92:	0038      	movs	r0, r7
 8009c94:	f7fc fee2 	bl	8006a5c <_free_r>
 8009c98:	e7da      	b.n	8009c50 <_realloc_r+0x14>

08009c9a <_raise_r>:
 8009c9a:	b570      	push	{r4, r5, r6, lr}
 8009c9c:	0004      	movs	r4, r0
 8009c9e:	000d      	movs	r5, r1
 8009ca0:	291f      	cmp	r1, #31
 8009ca2:	d904      	bls.n	8009cae <_raise_r+0x14>
 8009ca4:	2316      	movs	r3, #22
 8009ca6:	6003      	str	r3, [r0, #0]
 8009ca8:	2001      	movs	r0, #1
 8009caa:	4240      	negs	r0, r0
 8009cac:	bd70      	pop	{r4, r5, r6, pc}
 8009cae:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d004      	beq.n	8009cbe <_raise_r+0x24>
 8009cb4:	008a      	lsls	r2, r1, #2
 8009cb6:	189b      	adds	r3, r3, r2
 8009cb8:	681a      	ldr	r2, [r3, #0]
 8009cba:	2a00      	cmp	r2, #0
 8009cbc:	d108      	bne.n	8009cd0 <_raise_r+0x36>
 8009cbe:	0020      	movs	r0, r4
 8009cc0:	f000 f832 	bl	8009d28 <_getpid_r>
 8009cc4:	002a      	movs	r2, r5
 8009cc6:	0001      	movs	r1, r0
 8009cc8:	0020      	movs	r0, r4
 8009cca:	f000 f81b 	bl	8009d04 <_kill_r>
 8009cce:	e7ed      	b.n	8009cac <_raise_r+0x12>
 8009cd0:	2000      	movs	r0, #0
 8009cd2:	2a01      	cmp	r2, #1
 8009cd4:	d0ea      	beq.n	8009cac <_raise_r+0x12>
 8009cd6:	1c51      	adds	r1, r2, #1
 8009cd8:	d103      	bne.n	8009ce2 <_raise_r+0x48>
 8009cda:	2316      	movs	r3, #22
 8009cdc:	3001      	adds	r0, #1
 8009cde:	6023      	str	r3, [r4, #0]
 8009ce0:	e7e4      	b.n	8009cac <_raise_r+0x12>
 8009ce2:	2400      	movs	r4, #0
 8009ce4:	0028      	movs	r0, r5
 8009ce6:	601c      	str	r4, [r3, #0]
 8009ce8:	4790      	blx	r2
 8009cea:	0020      	movs	r0, r4
 8009cec:	e7de      	b.n	8009cac <_raise_r+0x12>
	...

08009cf0 <raise>:
 8009cf0:	b510      	push	{r4, lr}
 8009cf2:	4b03      	ldr	r3, [pc, #12]	; (8009d00 <raise+0x10>)
 8009cf4:	0001      	movs	r1, r0
 8009cf6:	6818      	ldr	r0, [r3, #0]
 8009cf8:	f7ff ffcf 	bl	8009c9a <_raise_r>
 8009cfc:	bd10      	pop	{r4, pc}
 8009cfe:	46c0      	nop			; (mov r8, r8)
 8009d00:	2000007c 	.word	0x2000007c

08009d04 <_kill_r>:
 8009d04:	2300      	movs	r3, #0
 8009d06:	b570      	push	{r4, r5, r6, lr}
 8009d08:	4d06      	ldr	r5, [pc, #24]	; (8009d24 <_kill_r+0x20>)
 8009d0a:	0004      	movs	r4, r0
 8009d0c:	0008      	movs	r0, r1
 8009d0e:	0011      	movs	r1, r2
 8009d10:	602b      	str	r3, [r5, #0]
 8009d12:	f7f9 f983 	bl	800301c <_kill>
 8009d16:	1c43      	adds	r3, r0, #1
 8009d18:	d103      	bne.n	8009d22 <_kill_r+0x1e>
 8009d1a:	682b      	ldr	r3, [r5, #0]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d000      	beq.n	8009d22 <_kill_r+0x1e>
 8009d20:	6023      	str	r3, [r4, #0]
 8009d22:	bd70      	pop	{r4, r5, r6, pc}
 8009d24:	20000584 	.word	0x20000584

08009d28 <_getpid_r>:
 8009d28:	b510      	push	{r4, lr}
 8009d2a:	f7f9 f971 	bl	8003010 <_getpid>
 8009d2e:	bd10      	pop	{r4, pc}

08009d30 <__sread>:
 8009d30:	b570      	push	{r4, r5, r6, lr}
 8009d32:	000c      	movs	r4, r1
 8009d34:	250e      	movs	r5, #14
 8009d36:	5f49      	ldrsh	r1, [r1, r5]
 8009d38:	f000 f8ac 	bl	8009e94 <_read_r>
 8009d3c:	2800      	cmp	r0, #0
 8009d3e:	db03      	blt.n	8009d48 <__sread+0x18>
 8009d40:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009d42:	181b      	adds	r3, r3, r0
 8009d44:	6563      	str	r3, [r4, #84]	; 0x54
 8009d46:	bd70      	pop	{r4, r5, r6, pc}
 8009d48:	89a3      	ldrh	r3, [r4, #12]
 8009d4a:	4a02      	ldr	r2, [pc, #8]	; (8009d54 <__sread+0x24>)
 8009d4c:	4013      	ands	r3, r2
 8009d4e:	81a3      	strh	r3, [r4, #12]
 8009d50:	e7f9      	b.n	8009d46 <__sread+0x16>
 8009d52:	46c0      	nop			; (mov r8, r8)
 8009d54:	ffffefff 	.word	0xffffefff

08009d58 <__swrite>:
 8009d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d5a:	001f      	movs	r7, r3
 8009d5c:	898b      	ldrh	r3, [r1, #12]
 8009d5e:	0005      	movs	r5, r0
 8009d60:	000c      	movs	r4, r1
 8009d62:	0016      	movs	r6, r2
 8009d64:	05db      	lsls	r3, r3, #23
 8009d66:	d505      	bpl.n	8009d74 <__swrite+0x1c>
 8009d68:	230e      	movs	r3, #14
 8009d6a:	5ec9      	ldrsh	r1, [r1, r3]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	2302      	movs	r3, #2
 8009d70:	f000 f874 	bl	8009e5c <_lseek_r>
 8009d74:	89a3      	ldrh	r3, [r4, #12]
 8009d76:	4a05      	ldr	r2, [pc, #20]	; (8009d8c <__swrite+0x34>)
 8009d78:	0028      	movs	r0, r5
 8009d7a:	4013      	ands	r3, r2
 8009d7c:	81a3      	strh	r3, [r4, #12]
 8009d7e:	0032      	movs	r2, r6
 8009d80:	230e      	movs	r3, #14
 8009d82:	5ee1      	ldrsh	r1, [r4, r3]
 8009d84:	003b      	movs	r3, r7
 8009d86:	f000 f81f 	bl	8009dc8 <_write_r>
 8009d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d8c:	ffffefff 	.word	0xffffefff

08009d90 <__sseek>:
 8009d90:	b570      	push	{r4, r5, r6, lr}
 8009d92:	000c      	movs	r4, r1
 8009d94:	250e      	movs	r5, #14
 8009d96:	5f49      	ldrsh	r1, [r1, r5]
 8009d98:	f000 f860 	bl	8009e5c <_lseek_r>
 8009d9c:	89a3      	ldrh	r3, [r4, #12]
 8009d9e:	1c42      	adds	r2, r0, #1
 8009da0:	d103      	bne.n	8009daa <__sseek+0x1a>
 8009da2:	4a05      	ldr	r2, [pc, #20]	; (8009db8 <__sseek+0x28>)
 8009da4:	4013      	ands	r3, r2
 8009da6:	81a3      	strh	r3, [r4, #12]
 8009da8:	bd70      	pop	{r4, r5, r6, pc}
 8009daa:	2280      	movs	r2, #128	; 0x80
 8009dac:	0152      	lsls	r2, r2, #5
 8009dae:	4313      	orrs	r3, r2
 8009db0:	81a3      	strh	r3, [r4, #12]
 8009db2:	6560      	str	r0, [r4, #84]	; 0x54
 8009db4:	e7f8      	b.n	8009da8 <__sseek+0x18>
 8009db6:	46c0      	nop			; (mov r8, r8)
 8009db8:	ffffefff 	.word	0xffffefff

08009dbc <__sclose>:
 8009dbc:	b510      	push	{r4, lr}
 8009dbe:	230e      	movs	r3, #14
 8009dc0:	5ec9      	ldrsh	r1, [r1, r3]
 8009dc2:	f000 f815 	bl	8009df0 <_close_r>
 8009dc6:	bd10      	pop	{r4, pc}

08009dc8 <_write_r>:
 8009dc8:	b570      	push	{r4, r5, r6, lr}
 8009dca:	0004      	movs	r4, r0
 8009dcc:	0008      	movs	r0, r1
 8009dce:	0011      	movs	r1, r2
 8009dd0:	001a      	movs	r2, r3
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	4d05      	ldr	r5, [pc, #20]	; (8009dec <_write_r+0x24>)
 8009dd6:	602b      	str	r3, [r5, #0]
 8009dd8:	f7f9 f959 	bl	800308e <_write>
 8009ddc:	1c43      	adds	r3, r0, #1
 8009dde:	d103      	bne.n	8009de8 <_write_r+0x20>
 8009de0:	682b      	ldr	r3, [r5, #0]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d000      	beq.n	8009de8 <_write_r+0x20>
 8009de6:	6023      	str	r3, [r4, #0]
 8009de8:	bd70      	pop	{r4, r5, r6, pc}
 8009dea:	46c0      	nop			; (mov r8, r8)
 8009dec:	20000584 	.word	0x20000584

08009df0 <_close_r>:
 8009df0:	2300      	movs	r3, #0
 8009df2:	b570      	push	{r4, r5, r6, lr}
 8009df4:	4d06      	ldr	r5, [pc, #24]	; (8009e10 <_close_r+0x20>)
 8009df6:	0004      	movs	r4, r0
 8009df8:	0008      	movs	r0, r1
 8009dfa:	602b      	str	r3, [r5, #0]
 8009dfc:	f7f9 f963 	bl	80030c6 <_close>
 8009e00:	1c43      	adds	r3, r0, #1
 8009e02:	d103      	bne.n	8009e0c <_close_r+0x1c>
 8009e04:	682b      	ldr	r3, [r5, #0]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d000      	beq.n	8009e0c <_close_r+0x1c>
 8009e0a:	6023      	str	r3, [r4, #0]
 8009e0c:	bd70      	pop	{r4, r5, r6, pc}
 8009e0e:	46c0      	nop			; (mov r8, r8)
 8009e10:	20000584 	.word	0x20000584

08009e14 <_fstat_r>:
 8009e14:	2300      	movs	r3, #0
 8009e16:	b570      	push	{r4, r5, r6, lr}
 8009e18:	4d06      	ldr	r5, [pc, #24]	; (8009e34 <_fstat_r+0x20>)
 8009e1a:	0004      	movs	r4, r0
 8009e1c:	0008      	movs	r0, r1
 8009e1e:	0011      	movs	r1, r2
 8009e20:	602b      	str	r3, [r5, #0]
 8009e22:	f7f9 f95a 	bl	80030da <_fstat>
 8009e26:	1c43      	adds	r3, r0, #1
 8009e28:	d103      	bne.n	8009e32 <_fstat_r+0x1e>
 8009e2a:	682b      	ldr	r3, [r5, #0]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d000      	beq.n	8009e32 <_fstat_r+0x1e>
 8009e30:	6023      	str	r3, [r4, #0]
 8009e32:	bd70      	pop	{r4, r5, r6, pc}
 8009e34:	20000584 	.word	0x20000584

08009e38 <_isatty_r>:
 8009e38:	2300      	movs	r3, #0
 8009e3a:	b570      	push	{r4, r5, r6, lr}
 8009e3c:	4d06      	ldr	r5, [pc, #24]	; (8009e58 <_isatty_r+0x20>)
 8009e3e:	0004      	movs	r4, r0
 8009e40:	0008      	movs	r0, r1
 8009e42:	602b      	str	r3, [r5, #0]
 8009e44:	f7f9 f957 	bl	80030f6 <_isatty>
 8009e48:	1c43      	adds	r3, r0, #1
 8009e4a:	d103      	bne.n	8009e54 <_isatty_r+0x1c>
 8009e4c:	682b      	ldr	r3, [r5, #0]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d000      	beq.n	8009e54 <_isatty_r+0x1c>
 8009e52:	6023      	str	r3, [r4, #0]
 8009e54:	bd70      	pop	{r4, r5, r6, pc}
 8009e56:	46c0      	nop			; (mov r8, r8)
 8009e58:	20000584 	.word	0x20000584

08009e5c <_lseek_r>:
 8009e5c:	b570      	push	{r4, r5, r6, lr}
 8009e5e:	0004      	movs	r4, r0
 8009e60:	0008      	movs	r0, r1
 8009e62:	0011      	movs	r1, r2
 8009e64:	001a      	movs	r2, r3
 8009e66:	2300      	movs	r3, #0
 8009e68:	4d05      	ldr	r5, [pc, #20]	; (8009e80 <_lseek_r+0x24>)
 8009e6a:	602b      	str	r3, [r5, #0]
 8009e6c:	f7f9 f94c 	bl	8003108 <_lseek>
 8009e70:	1c43      	adds	r3, r0, #1
 8009e72:	d103      	bne.n	8009e7c <_lseek_r+0x20>
 8009e74:	682b      	ldr	r3, [r5, #0]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d000      	beq.n	8009e7c <_lseek_r+0x20>
 8009e7a:	6023      	str	r3, [r4, #0]
 8009e7c:	bd70      	pop	{r4, r5, r6, pc}
 8009e7e:	46c0      	nop			; (mov r8, r8)
 8009e80:	20000584 	.word	0x20000584

08009e84 <_malloc_usable_size_r>:
 8009e84:	1f0b      	subs	r3, r1, #4
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	1f18      	subs	r0, r3, #4
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	da01      	bge.n	8009e92 <_malloc_usable_size_r+0xe>
 8009e8e:	580b      	ldr	r3, [r1, r0]
 8009e90:	18c0      	adds	r0, r0, r3
 8009e92:	4770      	bx	lr

08009e94 <_read_r>:
 8009e94:	b570      	push	{r4, r5, r6, lr}
 8009e96:	0004      	movs	r4, r0
 8009e98:	0008      	movs	r0, r1
 8009e9a:	0011      	movs	r1, r2
 8009e9c:	001a      	movs	r2, r3
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	4d05      	ldr	r5, [pc, #20]	; (8009eb8 <_read_r+0x24>)
 8009ea2:	602b      	str	r3, [r5, #0]
 8009ea4:	f7f9 f8d6 	bl	8003054 <_read>
 8009ea8:	1c43      	adds	r3, r0, #1
 8009eaa:	d103      	bne.n	8009eb4 <_read_r+0x20>
 8009eac:	682b      	ldr	r3, [r5, #0]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d000      	beq.n	8009eb4 <_read_r+0x20>
 8009eb2:	6023      	str	r3, [r4, #0]
 8009eb4:	bd70      	pop	{r4, r5, r6, pc}
 8009eb6:	46c0      	nop			; (mov r8, r8)
 8009eb8:	20000584 	.word	0x20000584

08009ebc <_init>:
 8009ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ebe:	46c0      	nop			; (mov r8, r8)
 8009ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ec2:	bc08      	pop	{r3}
 8009ec4:	469e      	mov	lr, r3
 8009ec6:	4770      	bx	lr

08009ec8 <_fini>:
 8009ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eca:	46c0      	nop			; (mov r8, r8)
 8009ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ece:	bc08      	pop	{r3}
 8009ed0:	469e      	mov	lr, r3
 8009ed2:	4770      	bx	lr
