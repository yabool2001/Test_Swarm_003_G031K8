
Test_Swarm_003_G031K8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a4a8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006c8  0800a568  0800a568  0001a568  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac30  0800ac30  00020250  2**0
                  CONTENTS
  4 .ARM          00000008  0800ac30  0800ac30  0001ac30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ac38  0800ac38  00020250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac38  0800ac38  0001ac38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ac3c  0800ac3c  0001ac3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000250  20000000  0800ac40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000036c  20000250  0800ae90  00020250  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005bc  0800ae90  000205bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY
 12 .debug_info   000151f5  00000000  00000000  00020278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b50  00000000  00000000  0003546d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001258  00000000  00000000  00037fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001140  00000000  00000000  00039218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000188b8  00000000  00000000  0003a358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014fa0  00000000  00000000  00052c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b1fe  00000000  00000000  00067bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00102dae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057ac  00000000  00000000  00102e00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000250 	.word	0x20000250
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800a54c 	.word	0x0800a54c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000254 	.word	0x20000254
 8000100:	0800a54c 	.word	0x0800a54c

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 f969 	bl	8001710 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 f8b9 	bl	80015c0 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f95b 	bl	8001710 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 f951 	bl	8001710 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 f8e1 	bl	8001644 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 f8d7 	bl	8001644 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_cfrcmple>:
 80004a4:	4684      	mov	ip, r0
 80004a6:	0008      	movs	r0, r1
 80004a8:	4661      	mov	r1, ip
 80004aa:	e7ff      	b.n	80004ac <__aeabi_cfcmpeq>

080004ac <__aeabi_cfcmpeq>:
 80004ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004ae:	f000 f9fb 	bl	80008a8 <__lesf2>
 80004b2:	2800      	cmp	r0, #0
 80004b4:	d401      	bmi.n	80004ba <__aeabi_cfcmpeq+0xe>
 80004b6:	2100      	movs	r1, #0
 80004b8:	42c8      	cmn	r0, r1
 80004ba:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004bc <__aeabi_fcmpeq>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f000 f987 	bl	80007d0 <__eqsf2>
 80004c2:	4240      	negs	r0, r0
 80004c4:	3001      	adds	r0, #1
 80004c6:	bd10      	pop	{r4, pc}

080004c8 <__aeabi_fcmplt>:
 80004c8:	b510      	push	{r4, lr}
 80004ca:	f000 f9ed 	bl	80008a8 <__lesf2>
 80004ce:	2800      	cmp	r0, #0
 80004d0:	db01      	blt.n	80004d6 <__aeabi_fcmplt+0xe>
 80004d2:	2000      	movs	r0, #0
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	2001      	movs	r0, #1
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	46c0      	nop			; (mov r8, r8)

080004dc <__aeabi_fcmple>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 f9e3 	bl	80008a8 <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	dd01      	ble.n	80004ea <__aeabi_fcmple+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__aeabi_fcmpgt>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 f993 	bl	800081c <__gesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dc01      	bgt.n	80004fe <__aeabi_fcmpgt+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__aeabi_fcmpge>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 f989 	bl	800081c <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	da01      	bge.n	8000512 <__aeabi_fcmpge+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			; (mov r8, r8)

08000518 <__aeabi_uldivmod>:
 8000518:	2b00      	cmp	r3, #0
 800051a:	d111      	bne.n	8000540 <__aeabi_uldivmod+0x28>
 800051c:	2a00      	cmp	r2, #0
 800051e:	d10f      	bne.n	8000540 <__aeabi_uldivmod+0x28>
 8000520:	2900      	cmp	r1, #0
 8000522:	d100      	bne.n	8000526 <__aeabi_uldivmod+0xe>
 8000524:	2800      	cmp	r0, #0
 8000526:	d002      	beq.n	800052e <__aeabi_uldivmod+0x16>
 8000528:	2100      	movs	r1, #0
 800052a:	43c9      	mvns	r1, r1
 800052c:	0008      	movs	r0, r1
 800052e:	b407      	push	{r0, r1, r2}
 8000530:	4802      	ldr	r0, [pc, #8]	; (800053c <__aeabi_uldivmod+0x24>)
 8000532:	a102      	add	r1, pc, #8	; (adr r1, 800053c <__aeabi_uldivmod+0x24>)
 8000534:	1840      	adds	r0, r0, r1
 8000536:	9002      	str	r0, [sp, #8]
 8000538:	bd03      	pop	{r0, r1, pc}
 800053a:	46c0      	nop			; (mov r8, r8)
 800053c:	fffffee9 	.word	0xfffffee9
 8000540:	b403      	push	{r0, r1}
 8000542:	4668      	mov	r0, sp
 8000544:	b501      	push	{r0, lr}
 8000546:	9802      	ldr	r0, [sp, #8]
 8000548:	f000 f876 	bl	8000638 <__udivmoddi4>
 800054c:	9b01      	ldr	r3, [sp, #4]
 800054e:	469e      	mov	lr, r3
 8000550:	b002      	add	sp, #8
 8000552:	bc0c      	pop	{r2, r3}
 8000554:	4770      	bx	lr
 8000556:	46c0      	nop			; (mov r8, r8)

08000558 <__aeabi_d2uiz>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	2200      	movs	r2, #0
 800055c:	4b0c      	ldr	r3, [pc, #48]	; (8000590 <__aeabi_d2uiz+0x38>)
 800055e:	0004      	movs	r4, r0
 8000560:	000d      	movs	r5, r1
 8000562:	f7ff ff95 	bl	8000490 <__aeabi_dcmpge>
 8000566:	2800      	cmp	r0, #0
 8000568:	d104      	bne.n	8000574 <__aeabi_d2uiz+0x1c>
 800056a:	0020      	movs	r0, r4
 800056c:	0029      	movs	r1, r5
 800056e:	f001 ff4f 	bl	8002410 <__aeabi_d2iz>
 8000572:	bd70      	pop	{r4, r5, r6, pc}
 8000574:	4b06      	ldr	r3, [pc, #24]	; (8000590 <__aeabi_d2uiz+0x38>)
 8000576:	2200      	movs	r2, #0
 8000578:	0020      	movs	r0, r4
 800057a:	0029      	movs	r1, r5
 800057c:	f001 fb98 	bl	8001cb0 <__aeabi_dsub>
 8000580:	f001 ff46 	bl	8002410 <__aeabi_d2iz>
 8000584:	2380      	movs	r3, #128	; 0x80
 8000586:	061b      	lsls	r3, r3, #24
 8000588:	469c      	mov	ip, r3
 800058a:	4460      	add	r0, ip
 800058c:	e7f1      	b.n	8000572 <__aeabi_d2uiz+0x1a>
 800058e:	46c0      	nop			; (mov r8, r8)
 8000590:	41e00000 	.word	0x41e00000

08000594 <__aeabi_d2lz>:
 8000594:	b570      	push	{r4, r5, r6, lr}
 8000596:	0005      	movs	r5, r0
 8000598:	000c      	movs	r4, r1
 800059a:	2200      	movs	r2, #0
 800059c:	2300      	movs	r3, #0
 800059e:	0028      	movs	r0, r5
 80005a0:	0021      	movs	r1, r4
 80005a2:	f7ff ff57 	bl	8000454 <__aeabi_dcmplt>
 80005a6:	2800      	cmp	r0, #0
 80005a8:	d108      	bne.n	80005bc <__aeabi_d2lz+0x28>
 80005aa:	0028      	movs	r0, r5
 80005ac:	0021      	movs	r1, r4
 80005ae:	f000 f80f 	bl	80005d0 <__aeabi_d2ulz>
 80005b2:	0002      	movs	r2, r0
 80005b4:	000b      	movs	r3, r1
 80005b6:	0010      	movs	r0, r2
 80005b8:	0019      	movs	r1, r3
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	2380      	movs	r3, #128	; 0x80
 80005be:	061b      	lsls	r3, r3, #24
 80005c0:	18e1      	adds	r1, r4, r3
 80005c2:	0028      	movs	r0, r5
 80005c4:	f000 f804 	bl	80005d0 <__aeabi_d2ulz>
 80005c8:	2300      	movs	r3, #0
 80005ca:	4242      	negs	r2, r0
 80005cc:	418b      	sbcs	r3, r1
 80005ce:	e7f2      	b.n	80005b6 <__aeabi_d2lz+0x22>

080005d0 <__aeabi_d2ulz>:
 80005d0:	b570      	push	{r4, r5, r6, lr}
 80005d2:	2200      	movs	r2, #0
 80005d4:	4b0b      	ldr	r3, [pc, #44]	; (8000604 <__aeabi_d2ulz+0x34>)
 80005d6:	000d      	movs	r5, r1
 80005d8:	0004      	movs	r4, r0
 80005da:	f001 f8fd 	bl	80017d8 <__aeabi_dmul>
 80005de:	f7ff ffbb 	bl	8000558 <__aeabi_d2uiz>
 80005e2:	0006      	movs	r6, r0
 80005e4:	f001 ff7a 	bl	80024dc <__aeabi_ui2d>
 80005e8:	2200      	movs	r2, #0
 80005ea:	4b07      	ldr	r3, [pc, #28]	; (8000608 <__aeabi_d2ulz+0x38>)
 80005ec:	f001 f8f4 	bl	80017d8 <__aeabi_dmul>
 80005f0:	0002      	movs	r2, r0
 80005f2:	000b      	movs	r3, r1
 80005f4:	0020      	movs	r0, r4
 80005f6:	0029      	movs	r1, r5
 80005f8:	f001 fb5a 	bl	8001cb0 <__aeabi_dsub>
 80005fc:	f7ff ffac 	bl	8000558 <__aeabi_d2uiz>
 8000600:	0031      	movs	r1, r6
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	3df00000 	.word	0x3df00000
 8000608:	41f00000 	.word	0x41f00000

0800060c <__aeabi_l2d>:
 800060c:	b570      	push	{r4, r5, r6, lr}
 800060e:	0006      	movs	r6, r0
 8000610:	0008      	movs	r0, r1
 8000612:	f001 ff33 	bl	800247c <__aeabi_i2d>
 8000616:	2200      	movs	r2, #0
 8000618:	4b06      	ldr	r3, [pc, #24]	; (8000634 <__aeabi_l2d+0x28>)
 800061a:	f001 f8dd 	bl	80017d8 <__aeabi_dmul>
 800061e:	000d      	movs	r5, r1
 8000620:	0004      	movs	r4, r0
 8000622:	0030      	movs	r0, r6
 8000624:	f001 ff5a 	bl	80024dc <__aeabi_ui2d>
 8000628:	002b      	movs	r3, r5
 800062a:	0022      	movs	r2, r4
 800062c:	f000 f996 	bl	800095c <__aeabi_dadd>
 8000630:	bd70      	pop	{r4, r5, r6, pc}
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	41f00000 	.word	0x41f00000

08000638 <__udivmoddi4>:
 8000638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800063a:	4657      	mov	r7, sl
 800063c:	464e      	mov	r6, r9
 800063e:	4645      	mov	r5, r8
 8000640:	46de      	mov	lr, fp
 8000642:	b5e0      	push	{r5, r6, r7, lr}
 8000644:	0004      	movs	r4, r0
 8000646:	000d      	movs	r5, r1
 8000648:	4692      	mov	sl, r2
 800064a:	4699      	mov	r9, r3
 800064c:	b083      	sub	sp, #12
 800064e:	428b      	cmp	r3, r1
 8000650:	d830      	bhi.n	80006b4 <__udivmoddi4+0x7c>
 8000652:	d02d      	beq.n	80006b0 <__udivmoddi4+0x78>
 8000654:	4649      	mov	r1, r9
 8000656:	4650      	mov	r0, sl
 8000658:	f002 f80c 	bl	8002674 <__clzdi2>
 800065c:	0029      	movs	r1, r5
 800065e:	0006      	movs	r6, r0
 8000660:	0020      	movs	r0, r4
 8000662:	f002 f807 	bl	8002674 <__clzdi2>
 8000666:	1a33      	subs	r3, r6, r0
 8000668:	4698      	mov	r8, r3
 800066a:	3b20      	subs	r3, #32
 800066c:	469b      	mov	fp, r3
 800066e:	d433      	bmi.n	80006d8 <__udivmoddi4+0xa0>
 8000670:	465a      	mov	r2, fp
 8000672:	4653      	mov	r3, sl
 8000674:	4093      	lsls	r3, r2
 8000676:	4642      	mov	r2, r8
 8000678:	001f      	movs	r7, r3
 800067a:	4653      	mov	r3, sl
 800067c:	4093      	lsls	r3, r2
 800067e:	001e      	movs	r6, r3
 8000680:	42af      	cmp	r7, r5
 8000682:	d83a      	bhi.n	80006fa <__udivmoddi4+0xc2>
 8000684:	42af      	cmp	r7, r5
 8000686:	d100      	bne.n	800068a <__udivmoddi4+0x52>
 8000688:	e078      	b.n	800077c <__udivmoddi4+0x144>
 800068a:	465b      	mov	r3, fp
 800068c:	1ba4      	subs	r4, r4, r6
 800068e:	41bd      	sbcs	r5, r7
 8000690:	2b00      	cmp	r3, #0
 8000692:	da00      	bge.n	8000696 <__udivmoddi4+0x5e>
 8000694:	e075      	b.n	8000782 <__udivmoddi4+0x14a>
 8000696:	2200      	movs	r2, #0
 8000698:	2300      	movs	r3, #0
 800069a:	9200      	str	r2, [sp, #0]
 800069c:	9301      	str	r3, [sp, #4]
 800069e:	2301      	movs	r3, #1
 80006a0:	465a      	mov	r2, fp
 80006a2:	4093      	lsls	r3, r2
 80006a4:	9301      	str	r3, [sp, #4]
 80006a6:	2301      	movs	r3, #1
 80006a8:	4642      	mov	r2, r8
 80006aa:	4093      	lsls	r3, r2
 80006ac:	9300      	str	r3, [sp, #0]
 80006ae:	e028      	b.n	8000702 <__udivmoddi4+0xca>
 80006b0:	4282      	cmp	r2, r0
 80006b2:	d9cf      	bls.n	8000654 <__udivmoddi4+0x1c>
 80006b4:	2200      	movs	r2, #0
 80006b6:	2300      	movs	r3, #0
 80006b8:	9200      	str	r2, [sp, #0]
 80006ba:	9301      	str	r3, [sp, #4]
 80006bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <__udivmoddi4+0x8e>
 80006c2:	601c      	str	r4, [r3, #0]
 80006c4:	605d      	str	r5, [r3, #4]
 80006c6:	9800      	ldr	r0, [sp, #0]
 80006c8:	9901      	ldr	r1, [sp, #4]
 80006ca:	b003      	add	sp, #12
 80006cc:	bcf0      	pop	{r4, r5, r6, r7}
 80006ce:	46bb      	mov	fp, r7
 80006d0:	46b2      	mov	sl, r6
 80006d2:	46a9      	mov	r9, r5
 80006d4:	46a0      	mov	r8, r4
 80006d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006d8:	4642      	mov	r2, r8
 80006da:	2320      	movs	r3, #32
 80006dc:	1a9b      	subs	r3, r3, r2
 80006de:	4652      	mov	r2, sl
 80006e0:	40da      	lsrs	r2, r3
 80006e2:	4641      	mov	r1, r8
 80006e4:	0013      	movs	r3, r2
 80006e6:	464a      	mov	r2, r9
 80006e8:	408a      	lsls	r2, r1
 80006ea:	0017      	movs	r7, r2
 80006ec:	4642      	mov	r2, r8
 80006ee:	431f      	orrs	r7, r3
 80006f0:	4653      	mov	r3, sl
 80006f2:	4093      	lsls	r3, r2
 80006f4:	001e      	movs	r6, r3
 80006f6:	42af      	cmp	r7, r5
 80006f8:	d9c4      	bls.n	8000684 <__udivmoddi4+0x4c>
 80006fa:	2200      	movs	r2, #0
 80006fc:	2300      	movs	r3, #0
 80006fe:	9200      	str	r2, [sp, #0]
 8000700:	9301      	str	r3, [sp, #4]
 8000702:	4643      	mov	r3, r8
 8000704:	2b00      	cmp	r3, #0
 8000706:	d0d9      	beq.n	80006bc <__udivmoddi4+0x84>
 8000708:	07fb      	lsls	r3, r7, #31
 800070a:	0872      	lsrs	r2, r6, #1
 800070c:	431a      	orrs	r2, r3
 800070e:	4646      	mov	r6, r8
 8000710:	087b      	lsrs	r3, r7, #1
 8000712:	e00e      	b.n	8000732 <__udivmoddi4+0xfa>
 8000714:	42ab      	cmp	r3, r5
 8000716:	d101      	bne.n	800071c <__udivmoddi4+0xe4>
 8000718:	42a2      	cmp	r2, r4
 800071a:	d80c      	bhi.n	8000736 <__udivmoddi4+0xfe>
 800071c:	1aa4      	subs	r4, r4, r2
 800071e:	419d      	sbcs	r5, r3
 8000720:	2001      	movs	r0, #1
 8000722:	1924      	adds	r4, r4, r4
 8000724:	416d      	adcs	r5, r5
 8000726:	2100      	movs	r1, #0
 8000728:	3e01      	subs	r6, #1
 800072a:	1824      	adds	r4, r4, r0
 800072c:	414d      	adcs	r5, r1
 800072e:	2e00      	cmp	r6, #0
 8000730:	d006      	beq.n	8000740 <__udivmoddi4+0x108>
 8000732:	42ab      	cmp	r3, r5
 8000734:	d9ee      	bls.n	8000714 <__udivmoddi4+0xdc>
 8000736:	3e01      	subs	r6, #1
 8000738:	1924      	adds	r4, r4, r4
 800073a:	416d      	adcs	r5, r5
 800073c:	2e00      	cmp	r6, #0
 800073e:	d1f8      	bne.n	8000732 <__udivmoddi4+0xfa>
 8000740:	9800      	ldr	r0, [sp, #0]
 8000742:	9901      	ldr	r1, [sp, #4]
 8000744:	465b      	mov	r3, fp
 8000746:	1900      	adds	r0, r0, r4
 8000748:	4169      	adcs	r1, r5
 800074a:	2b00      	cmp	r3, #0
 800074c:	db24      	blt.n	8000798 <__udivmoddi4+0x160>
 800074e:	002b      	movs	r3, r5
 8000750:	465a      	mov	r2, fp
 8000752:	4644      	mov	r4, r8
 8000754:	40d3      	lsrs	r3, r2
 8000756:	002a      	movs	r2, r5
 8000758:	40e2      	lsrs	r2, r4
 800075a:	001c      	movs	r4, r3
 800075c:	465b      	mov	r3, fp
 800075e:	0015      	movs	r5, r2
 8000760:	2b00      	cmp	r3, #0
 8000762:	db2a      	blt.n	80007ba <__udivmoddi4+0x182>
 8000764:	0026      	movs	r6, r4
 8000766:	409e      	lsls	r6, r3
 8000768:	0033      	movs	r3, r6
 800076a:	0026      	movs	r6, r4
 800076c:	4647      	mov	r7, r8
 800076e:	40be      	lsls	r6, r7
 8000770:	0032      	movs	r2, r6
 8000772:	1a80      	subs	r0, r0, r2
 8000774:	4199      	sbcs	r1, r3
 8000776:	9000      	str	r0, [sp, #0]
 8000778:	9101      	str	r1, [sp, #4]
 800077a:	e79f      	b.n	80006bc <__udivmoddi4+0x84>
 800077c:	42a3      	cmp	r3, r4
 800077e:	d8bc      	bhi.n	80006fa <__udivmoddi4+0xc2>
 8000780:	e783      	b.n	800068a <__udivmoddi4+0x52>
 8000782:	4642      	mov	r2, r8
 8000784:	2320      	movs	r3, #32
 8000786:	2100      	movs	r1, #0
 8000788:	1a9b      	subs	r3, r3, r2
 800078a:	2200      	movs	r2, #0
 800078c:	9100      	str	r1, [sp, #0]
 800078e:	9201      	str	r2, [sp, #4]
 8000790:	2201      	movs	r2, #1
 8000792:	40da      	lsrs	r2, r3
 8000794:	9201      	str	r2, [sp, #4]
 8000796:	e786      	b.n	80006a6 <__udivmoddi4+0x6e>
 8000798:	4642      	mov	r2, r8
 800079a:	2320      	movs	r3, #32
 800079c:	1a9b      	subs	r3, r3, r2
 800079e:	002a      	movs	r2, r5
 80007a0:	4646      	mov	r6, r8
 80007a2:	409a      	lsls	r2, r3
 80007a4:	0023      	movs	r3, r4
 80007a6:	40f3      	lsrs	r3, r6
 80007a8:	4644      	mov	r4, r8
 80007aa:	4313      	orrs	r3, r2
 80007ac:	002a      	movs	r2, r5
 80007ae:	40e2      	lsrs	r2, r4
 80007b0:	001c      	movs	r4, r3
 80007b2:	465b      	mov	r3, fp
 80007b4:	0015      	movs	r5, r2
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	dad4      	bge.n	8000764 <__udivmoddi4+0x12c>
 80007ba:	4642      	mov	r2, r8
 80007bc:	002f      	movs	r7, r5
 80007be:	2320      	movs	r3, #32
 80007c0:	0026      	movs	r6, r4
 80007c2:	4097      	lsls	r7, r2
 80007c4:	1a9b      	subs	r3, r3, r2
 80007c6:	40de      	lsrs	r6, r3
 80007c8:	003b      	movs	r3, r7
 80007ca:	4333      	orrs	r3, r6
 80007cc:	e7cd      	b.n	800076a <__udivmoddi4+0x132>
 80007ce:	46c0      	nop			; (mov r8, r8)

080007d0 <__eqsf2>:
 80007d0:	b570      	push	{r4, r5, r6, lr}
 80007d2:	0042      	lsls	r2, r0, #1
 80007d4:	0245      	lsls	r5, r0, #9
 80007d6:	024e      	lsls	r6, r1, #9
 80007d8:	004c      	lsls	r4, r1, #1
 80007da:	0fc3      	lsrs	r3, r0, #31
 80007dc:	0a6d      	lsrs	r5, r5, #9
 80007de:	2001      	movs	r0, #1
 80007e0:	0e12      	lsrs	r2, r2, #24
 80007e2:	0a76      	lsrs	r6, r6, #9
 80007e4:	0e24      	lsrs	r4, r4, #24
 80007e6:	0fc9      	lsrs	r1, r1, #31
 80007e8:	2aff      	cmp	r2, #255	; 0xff
 80007ea:	d006      	beq.n	80007fa <__eqsf2+0x2a>
 80007ec:	2cff      	cmp	r4, #255	; 0xff
 80007ee:	d003      	beq.n	80007f8 <__eqsf2+0x28>
 80007f0:	42a2      	cmp	r2, r4
 80007f2:	d101      	bne.n	80007f8 <__eqsf2+0x28>
 80007f4:	42b5      	cmp	r5, r6
 80007f6:	d006      	beq.n	8000806 <__eqsf2+0x36>
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	2d00      	cmp	r5, #0
 80007fc:	d1fc      	bne.n	80007f8 <__eqsf2+0x28>
 80007fe:	2cff      	cmp	r4, #255	; 0xff
 8000800:	d1fa      	bne.n	80007f8 <__eqsf2+0x28>
 8000802:	2e00      	cmp	r6, #0
 8000804:	d1f8      	bne.n	80007f8 <__eqsf2+0x28>
 8000806:	428b      	cmp	r3, r1
 8000808:	d006      	beq.n	8000818 <__eqsf2+0x48>
 800080a:	2001      	movs	r0, #1
 800080c:	2a00      	cmp	r2, #0
 800080e:	d1f3      	bne.n	80007f8 <__eqsf2+0x28>
 8000810:	0028      	movs	r0, r5
 8000812:	1e43      	subs	r3, r0, #1
 8000814:	4198      	sbcs	r0, r3
 8000816:	e7ef      	b.n	80007f8 <__eqsf2+0x28>
 8000818:	2000      	movs	r0, #0
 800081a:	e7ed      	b.n	80007f8 <__eqsf2+0x28>

0800081c <__gesf2>:
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	0042      	lsls	r2, r0, #1
 8000820:	0245      	lsls	r5, r0, #9
 8000822:	024e      	lsls	r6, r1, #9
 8000824:	004c      	lsls	r4, r1, #1
 8000826:	0fc3      	lsrs	r3, r0, #31
 8000828:	0a6d      	lsrs	r5, r5, #9
 800082a:	0e12      	lsrs	r2, r2, #24
 800082c:	0a76      	lsrs	r6, r6, #9
 800082e:	0e24      	lsrs	r4, r4, #24
 8000830:	0fc8      	lsrs	r0, r1, #31
 8000832:	2aff      	cmp	r2, #255	; 0xff
 8000834:	d01b      	beq.n	800086e <__gesf2+0x52>
 8000836:	2cff      	cmp	r4, #255	; 0xff
 8000838:	d00e      	beq.n	8000858 <__gesf2+0x3c>
 800083a:	2a00      	cmp	r2, #0
 800083c:	d11b      	bne.n	8000876 <__gesf2+0x5a>
 800083e:	2c00      	cmp	r4, #0
 8000840:	d101      	bne.n	8000846 <__gesf2+0x2a>
 8000842:	2e00      	cmp	r6, #0
 8000844:	d01c      	beq.n	8000880 <__gesf2+0x64>
 8000846:	2d00      	cmp	r5, #0
 8000848:	d00c      	beq.n	8000864 <__gesf2+0x48>
 800084a:	4283      	cmp	r3, r0
 800084c:	d01c      	beq.n	8000888 <__gesf2+0x6c>
 800084e:	2102      	movs	r1, #2
 8000850:	1e58      	subs	r0, r3, #1
 8000852:	4008      	ands	r0, r1
 8000854:	3801      	subs	r0, #1
 8000856:	bd70      	pop	{r4, r5, r6, pc}
 8000858:	2e00      	cmp	r6, #0
 800085a:	d122      	bne.n	80008a2 <__gesf2+0x86>
 800085c:	2a00      	cmp	r2, #0
 800085e:	d1f4      	bne.n	800084a <__gesf2+0x2e>
 8000860:	2d00      	cmp	r5, #0
 8000862:	d1f2      	bne.n	800084a <__gesf2+0x2e>
 8000864:	2800      	cmp	r0, #0
 8000866:	d1f6      	bne.n	8000856 <__gesf2+0x3a>
 8000868:	2001      	movs	r0, #1
 800086a:	4240      	negs	r0, r0
 800086c:	e7f3      	b.n	8000856 <__gesf2+0x3a>
 800086e:	2d00      	cmp	r5, #0
 8000870:	d117      	bne.n	80008a2 <__gesf2+0x86>
 8000872:	2cff      	cmp	r4, #255	; 0xff
 8000874:	d0f0      	beq.n	8000858 <__gesf2+0x3c>
 8000876:	2c00      	cmp	r4, #0
 8000878:	d1e7      	bne.n	800084a <__gesf2+0x2e>
 800087a:	2e00      	cmp	r6, #0
 800087c:	d1e5      	bne.n	800084a <__gesf2+0x2e>
 800087e:	e7e6      	b.n	800084e <__gesf2+0x32>
 8000880:	2000      	movs	r0, #0
 8000882:	2d00      	cmp	r5, #0
 8000884:	d0e7      	beq.n	8000856 <__gesf2+0x3a>
 8000886:	e7e2      	b.n	800084e <__gesf2+0x32>
 8000888:	42a2      	cmp	r2, r4
 800088a:	dc05      	bgt.n	8000898 <__gesf2+0x7c>
 800088c:	dbea      	blt.n	8000864 <__gesf2+0x48>
 800088e:	42b5      	cmp	r5, r6
 8000890:	d802      	bhi.n	8000898 <__gesf2+0x7c>
 8000892:	d3e7      	bcc.n	8000864 <__gesf2+0x48>
 8000894:	2000      	movs	r0, #0
 8000896:	e7de      	b.n	8000856 <__gesf2+0x3a>
 8000898:	4243      	negs	r3, r0
 800089a:	4158      	adcs	r0, r3
 800089c:	0040      	lsls	r0, r0, #1
 800089e:	3801      	subs	r0, #1
 80008a0:	e7d9      	b.n	8000856 <__gesf2+0x3a>
 80008a2:	2002      	movs	r0, #2
 80008a4:	4240      	negs	r0, r0
 80008a6:	e7d6      	b.n	8000856 <__gesf2+0x3a>

080008a8 <__lesf2>:
 80008a8:	b570      	push	{r4, r5, r6, lr}
 80008aa:	0042      	lsls	r2, r0, #1
 80008ac:	0245      	lsls	r5, r0, #9
 80008ae:	024e      	lsls	r6, r1, #9
 80008b0:	004c      	lsls	r4, r1, #1
 80008b2:	0fc3      	lsrs	r3, r0, #31
 80008b4:	0a6d      	lsrs	r5, r5, #9
 80008b6:	0e12      	lsrs	r2, r2, #24
 80008b8:	0a76      	lsrs	r6, r6, #9
 80008ba:	0e24      	lsrs	r4, r4, #24
 80008bc:	0fc8      	lsrs	r0, r1, #31
 80008be:	2aff      	cmp	r2, #255	; 0xff
 80008c0:	d00b      	beq.n	80008da <__lesf2+0x32>
 80008c2:	2cff      	cmp	r4, #255	; 0xff
 80008c4:	d00d      	beq.n	80008e2 <__lesf2+0x3a>
 80008c6:	2a00      	cmp	r2, #0
 80008c8:	d11f      	bne.n	800090a <__lesf2+0x62>
 80008ca:	2c00      	cmp	r4, #0
 80008cc:	d116      	bne.n	80008fc <__lesf2+0x54>
 80008ce:	2e00      	cmp	r6, #0
 80008d0:	d114      	bne.n	80008fc <__lesf2+0x54>
 80008d2:	2000      	movs	r0, #0
 80008d4:	2d00      	cmp	r5, #0
 80008d6:	d010      	beq.n	80008fa <__lesf2+0x52>
 80008d8:	e009      	b.n	80008ee <__lesf2+0x46>
 80008da:	2d00      	cmp	r5, #0
 80008dc:	d10c      	bne.n	80008f8 <__lesf2+0x50>
 80008de:	2cff      	cmp	r4, #255	; 0xff
 80008e0:	d113      	bne.n	800090a <__lesf2+0x62>
 80008e2:	2e00      	cmp	r6, #0
 80008e4:	d108      	bne.n	80008f8 <__lesf2+0x50>
 80008e6:	2a00      	cmp	r2, #0
 80008e8:	d008      	beq.n	80008fc <__lesf2+0x54>
 80008ea:	4283      	cmp	r3, r0
 80008ec:	d012      	beq.n	8000914 <__lesf2+0x6c>
 80008ee:	2102      	movs	r1, #2
 80008f0:	1e58      	subs	r0, r3, #1
 80008f2:	4008      	ands	r0, r1
 80008f4:	3801      	subs	r0, #1
 80008f6:	e000      	b.n	80008fa <__lesf2+0x52>
 80008f8:	2002      	movs	r0, #2
 80008fa:	bd70      	pop	{r4, r5, r6, pc}
 80008fc:	2d00      	cmp	r5, #0
 80008fe:	d1f4      	bne.n	80008ea <__lesf2+0x42>
 8000900:	2800      	cmp	r0, #0
 8000902:	d1fa      	bne.n	80008fa <__lesf2+0x52>
 8000904:	2001      	movs	r0, #1
 8000906:	4240      	negs	r0, r0
 8000908:	e7f7      	b.n	80008fa <__lesf2+0x52>
 800090a:	2c00      	cmp	r4, #0
 800090c:	d1ed      	bne.n	80008ea <__lesf2+0x42>
 800090e:	2e00      	cmp	r6, #0
 8000910:	d1eb      	bne.n	80008ea <__lesf2+0x42>
 8000912:	e7ec      	b.n	80008ee <__lesf2+0x46>
 8000914:	42a2      	cmp	r2, r4
 8000916:	dc05      	bgt.n	8000924 <__lesf2+0x7c>
 8000918:	dbf2      	blt.n	8000900 <__lesf2+0x58>
 800091a:	42b5      	cmp	r5, r6
 800091c:	d802      	bhi.n	8000924 <__lesf2+0x7c>
 800091e:	d3ef      	bcc.n	8000900 <__lesf2+0x58>
 8000920:	2000      	movs	r0, #0
 8000922:	e7ea      	b.n	80008fa <__lesf2+0x52>
 8000924:	4243      	negs	r3, r0
 8000926:	4158      	adcs	r0, r3
 8000928:	0040      	lsls	r0, r0, #1
 800092a:	3801      	subs	r0, #1
 800092c:	e7e5      	b.n	80008fa <__lesf2+0x52>
 800092e:	46c0      	nop			; (mov r8, r8)

08000930 <__aeabi_fcmpun>:
 8000930:	0243      	lsls	r3, r0, #9
 8000932:	024a      	lsls	r2, r1, #9
 8000934:	0040      	lsls	r0, r0, #1
 8000936:	0049      	lsls	r1, r1, #1
 8000938:	0a5b      	lsrs	r3, r3, #9
 800093a:	0a52      	lsrs	r2, r2, #9
 800093c:	0e09      	lsrs	r1, r1, #24
 800093e:	0e00      	lsrs	r0, r0, #24
 8000940:	28ff      	cmp	r0, #255	; 0xff
 8000942:	d006      	beq.n	8000952 <__aeabi_fcmpun+0x22>
 8000944:	2000      	movs	r0, #0
 8000946:	29ff      	cmp	r1, #255	; 0xff
 8000948:	d102      	bne.n	8000950 <__aeabi_fcmpun+0x20>
 800094a:	1e53      	subs	r3, r2, #1
 800094c:	419a      	sbcs	r2, r3
 800094e:	0010      	movs	r0, r2
 8000950:	4770      	bx	lr
 8000952:	38fe      	subs	r0, #254	; 0xfe
 8000954:	2b00      	cmp	r3, #0
 8000956:	d1fb      	bne.n	8000950 <__aeabi_fcmpun+0x20>
 8000958:	e7f4      	b.n	8000944 <__aeabi_fcmpun+0x14>
 800095a:	46c0      	nop			; (mov r8, r8)

0800095c <__aeabi_dadd>:
 800095c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800095e:	464f      	mov	r7, r9
 8000960:	4646      	mov	r6, r8
 8000962:	46d6      	mov	lr, sl
 8000964:	000d      	movs	r5, r1
 8000966:	0004      	movs	r4, r0
 8000968:	b5c0      	push	{r6, r7, lr}
 800096a:	001f      	movs	r7, r3
 800096c:	0011      	movs	r1, r2
 800096e:	0328      	lsls	r0, r5, #12
 8000970:	0f62      	lsrs	r2, r4, #29
 8000972:	0a40      	lsrs	r0, r0, #9
 8000974:	4310      	orrs	r0, r2
 8000976:	007a      	lsls	r2, r7, #1
 8000978:	0d52      	lsrs	r2, r2, #21
 800097a:	00e3      	lsls	r3, r4, #3
 800097c:	033c      	lsls	r4, r7, #12
 800097e:	4691      	mov	r9, r2
 8000980:	0a64      	lsrs	r4, r4, #9
 8000982:	0ffa      	lsrs	r2, r7, #31
 8000984:	0f4f      	lsrs	r7, r1, #29
 8000986:	006e      	lsls	r6, r5, #1
 8000988:	4327      	orrs	r7, r4
 800098a:	4692      	mov	sl, r2
 800098c:	46b8      	mov	r8, r7
 800098e:	0d76      	lsrs	r6, r6, #21
 8000990:	0fed      	lsrs	r5, r5, #31
 8000992:	00c9      	lsls	r1, r1, #3
 8000994:	4295      	cmp	r5, r2
 8000996:	d100      	bne.n	800099a <__aeabi_dadd+0x3e>
 8000998:	e099      	b.n	8000ace <__aeabi_dadd+0x172>
 800099a:	464c      	mov	r4, r9
 800099c:	1b34      	subs	r4, r6, r4
 800099e:	46a4      	mov	ip, r4
 80009a0:	2c00      	cmp	r4, #0
 80009a2:	dc00      	bgt.n	80009a6 <__aeabi_dadd+0x4a>
 80009a4:	e07c      	b.n	8000aa0 <__aeabi_dadd+0x144>
 80009a6:	464a      	mov	r2, r9
 80009a8:	2a00      	cmp	r2, #0
 80009aa:	d100      	bne.n	80009ae <__aeabi_dadd+0x52>
 80009ac:	e0b8      	b.n	8000b20 <__aeabi_dadd+0x1c4>
 80009ae:	4ac5      	ldr	r2, [pc, #788]	; (8000cc4 <__aeabi_dadd+0x368>)
 80009b0:	4296      	cmp	r6, r2
 80009b2:	d100      	bne.n	80009b6 <__aeabi_dadd+0x5a>
 80009b4:	e11c      	b.n	8000bf0 <__aeabi_dadd+0x294>
 80009b6:	2280      	movs	r2, #128	; 0x80
 80009b8:	003c      	movs	r4, r7
 80009ba:	0412      	lsls	r2, r2, #16
 80009bc:	4314      	orrs	r4, r2
 80009be:	46a0      	mov	r8, r4
 80009c0:	4662      	mov	r2, ip
 80009c2:	2a38      	cmp	r2, #56	; 0x38
 80009c4:	dd00      	ble.n	80009c8 <__aeabi_dadd+0x6c>
 80009c6:	e161      	b.n	8000c8c <__aeabi_dadd+0x330>
 80009c8:	2a1f      	cmp	r2, #31
 80009ca:	dd00      	ble.n	80009ce <__aeabi_dadd+0x72>
 80009cc:	e1cc      	b.n	8000d68 <__aeabi_dadd+0x40c>
 80009ce:	4664      	mov	r4, ip
 80009d0:	2220      	movs	r2, #32
 80009d2:	1b12      	subs	r2, r2, r4
 80009d4:	4644      	mov	r4, r8
 80009d6:	4094      	lsls	r4, r2
 80009d8:	000f      	movs	r7, r1
 80009da:	46a1      	mov	r9, r4
 80009dc:	4664      	mov	r4, ip
 80009de:	4091      	lsls	r1, r2
 80009e0:	40e7      	lsrs	r7, r4
 80009e2:	464c      	mov	r4, r9
 80009e4:	1e4a      	subs	r2, r1, #1
 80009e6:	4191      	sbcs	r1, r2
 80009e8:	433c      	orrs	r4, r7
 80009ea:	4642      	mov	r2, r8
 80009ec:	4321      	orrs	r1, r4
 80009ee:	4664      	mov	r4, ip
 80009f0:	40e2      	lsrs	r2, r4
 80009f2:	1a80      	subs	r0, r0, r2
 80009f4:	1a5c      	subs	r4, r3, r1
 80009f6:	42a3      	cmp	r3, r4
 80009f8:	419b      	sbcs	r3, r3
 80009fa:	425f      	negs	r7, r3
 80009fc:	1bc7      	subs	r7, r0, r7
 80009fe:	023b      	lsls	r3, r7, #8
 8000a00:	d400      	bmi.n	8000a04 <__aeabi_dadd+0xa8>
 8000a02:	e0d0      	b.n	8000ba6 <__aeabi_dadd+0x24a>
 8000a04:	027f      	lsls	r7, r7, #9
 8000a06:	0a7f      	lsrs	r7, r7, #9
 8000a08:	2f00      	cmp	r7, #0
 8000a0a:	d100      	bne.n	8000a0e <__aeabi_dadd+0xb2>
 8000a0c:	e0ff      	b.n	8000c0e <__aeabi_dadd+0x2b2>
 8000a0e:	0038      	movs	r0, r7
 8000a10:	f001 fe12 	bl	8002638 <__clzsi2>
 8000a14:	0001      	movs	r1, r0
 8000a16:	3908      	subs	r1, #8
 8000a18:	2320      	movs	r3, #32
 8000a1a:	0022      	movs	r2, r4
 8000a1c:	1a5b      	subs	r3, r3, r1
 8000a1e:	408f      	lsls	r7, r1
 8000a20:	40da      	lsrs	r2, r3
 8000a22:	408c      	lsls	r4, r1
 8000a24:	4317      	orrs	r7, r2
 8000a26:	42b1      	cmp	r1, r6
 8000a28:	da00      	bge.n	8000a2c <__aeabi_dadd+0xd0>
 8000a2a:	e0ff      	b.n	8000c2c <__aeabi_dadd+0x2d0>
 8000a2c:	1b89      	subs	r1, r1, r6
 8000a2e:	1c4b      	adds	r3, r1, #1
 8000a30:	2b1f      	cmp	r3, #31
 8000a32:	dd00      	ble.n	8000a36 <__aeabi_dadd+0xda>
 8000a34:	e0a8      	b.n	8000b88 <__aeabi_dadd+0x22c>
 8000a36:	2220      	movs	r2, #32
 8000a38:	0039      	movs	r1, r7
 8000a3a:	1ad2      	subs	r2, r2, r3
 8000a3c:	0020      	movs	r0, r4
 8000a3e:	4094      	lsls	r4, r2
 8000a40:	4091      	lsls	r1, r2
 8000a42:	40d8      	lsrs	r0, r3
 8000a44:	1e62      	subs	r2, r4, #1
 8000a46:	4194      	sbcs	r4, r2
 8000a48:	40df      	lsrs	r7, r3
 8000a4a:	2600      	movs	r6, #0
 8000a4c:	4301      	orrs	r1, r0
 8000a4e:	430c      	orrs	r4, r1
 8000a50:	0763      	lsls	r3, r4, #29
 8000a52:	d009      	beq.n	8000a68 <__aeabi_dadd+0x10c>
 8000a54:	230f      	movs	r3, #15
 8000a56:	4023      	ands	r3, r4
 8000a58:	2b04      	cmp	r3, #4
 8000a5a:	d005      	beq.n	8000a68 <__aeabi_dadd+0x10c>
 8000a5c:	1d23      	adds	r3, r4, #4
 8000a5e:	42a3      	cmp	r3, r4
 8000a60:	41a4      	sbcs	r4, r4
 8000a62:	4264      	negs	r4, r4
 8000a64:	193f      	adds	r7, r7, r4
 8000a66:	001c      	movs	r4, r3
 8000a68:	023b      	lsls	r3, r7, #8
 8000a6a:	d400      	bmi.n	8000a6e <__aeabi_dadd+0x112>
 8000a6c:	e09e      	b.n	8000bac <__aeabi_dadd+0x250>
 8000a6e:	4b95      	ldr	r3, [pc, #596]	; (8000cc4 <__aeabi_dadd+0x368>)
 8000a70:	3601      	adds	r6, #1
 8000a72:	429e      	cmp	r6, r3
 8000a74:	d100      	bne.n	8000a78 <__aeabi_dadd+0x11c>
 8000a76:	e0b7      	b.n	8000be8 <__aeabi_dadd+0x28c>
 8000a78:	4a93      	ldr	r2, [pc, #588]	; (8000cc8 <__aeabi_dadd+0x36c>)
 8000a7a:	08e4      	lsrs	r4, r4, #3
 8000a7c:	4017      	ands	r7, r2
 8000a7e:	077b      	lsls	r3, r7, #29
 8000a80:	0571      	lsls	r1, r6, #21
 8000a82:	027f      	lsls	r7, r7, #9
 8000a84:	4323      	orrs	r3, r4
 8000a86:	0b3f      	lsrs	r7, r7, #12
 8000a88:	0d4a      	lsrs	r2, r1, #21
 8000a8a:	0512      	lsls	r2, r2, #20
 8000a8c:	433a      	orrs	r2, r7
 8000a8e:	07ed      	lsls	r5, r5, #31
 8000a90:	432a      	orrs	r2, r5
 8000a92:	0018      	movs	r0, r3
 8000a94:	0011      	movs	r1, r2
 8000a96:	bce0      	pop	{r5, r6, r7}
 8000a98:	46ba      	mov	sl, r7
 8000a9a:	46b1      	mov	r9, r6
 8000a9c:	46a8      	mov	r8, r5
 8000a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000aa0:	2c00      	cmp	r4, #0
 8000aa2:	d04b      	beq.n	8000b3c <__aeabi_dadd+0x1e0>
 8000aa4:	464c      	mov	r4, r9
 8000aa6:	1ba4      	subs	r4, r4, r6
 8000aa8:	46a4      	mov	ip, r4
 8000aaa:	2e00      	cmp	r6, #0
 8000aac:	d000      	beq.n	8000ab0 <__aeabi_dadd+0x154>
 8000aae:	e123      	b.n	8000cf8 <__aeabi_dadd+0x39c>
 8000ab0:	0004      	movs	r4, r0
 8000ab2:	431c      	orrs	r4, r3
 8000ab4:	d100      	bne.n	8000ab8 <__aeabi_dadd+0x15c>
 8000ab6:	e1af      	b.n	8000e18 <__aeabi_dadd+0x4bc>
 8000ab8:	4662      	mov	r2, ip
 8000aba:	1e54      	subs	r4, r2, #1
 8000abc:	2a01      	cmp	r2, #1
 8000abe:	d100      	bne.n	8000ac2 <__aeabi_dadd+0x166>
 8000ac0:	e215      	b.n	8000eee <__aeabi_dadd+0x592>
 8000ac2:	4d80      	ldr	r5, [pc, #512]	; (8000cc4 <__aeabi_dadd+0x368>)
 8000ac4:	45ac      	cmp	ip, r5
 8000ac6:	d100      	bne.n	8000aca <__aeabi_dadd+0x16e>
 8000ac8:	e1c8      	b.n	8000e5c <__aeabi_dadd+0x500>
 8000aca:	46a4      	mov	ip, r4
 8000acc:	e11b      	b.n	8000d06 <__aeabi_dadd+0x3aa>
 8000ace:	464a      	mov	r2, r9
 8000ad0:	1ab2      	subs	r2, r6, r2
 8000ad2:	4694      	mov	ip, r2
 8000ad4:	2a00      	cmp	r2, #0
 8000ad6:	dc00      	bgt.n	8000ada <__aeabi_dadd+0x17e>
 8000ad8:	e0ac      	b.n	8000c34 <__aeabi_dadd+0x2d8>
 8000ada:	464a      	mov	r2, r9
 8000adc:	2a00      	cmp	r2, #0
 8000ade:	d043      	beq.n	8000b68 <__aeabi_dadd+0x20c>
 8000ae0:	4a78      	ldr	r2, [pc, #480]	; (8000cc4 <__aeabi_dadd+0x368>)
 8000ae2:	4296      	cmp	r6, r2
 8000ae4:	d100      	bne.n	8000ae8 <__aeabi_dadd+0x18c>
 8000ae6:	e1af      	b.n	8000e48 <__aeabi_dadd+0x4ec>
 8000ae8:	2280      	movs	r2, #128	; 0x80
 8000aea:	003c      	movs	r4, r7
 8000aec:	0412      	lsls	r2, r2, #16
 8000aee:	4314      	orrs	r4, r2
 8000af0:	46a0      	mov	r8, r4
 8000af2:	4662      	mov	r2, ip
 8000af4:	2a38      	cmp	r2, #56	; 0x38
 8000af6:	dc67      	bgt.n	8000bc8 <__aeabi_dadd+0x26c>
 8000af8:	2a1f      	cmp	r2, #31
 8000afa:	dc00      	bgt.n	8000afe <__aeabi_dadd+0x1a2>
 8000afc:	e15f      	b.n	8000dbe <__aeabi_dadd+0x462>
 8000afe:	4647      	mov	r7, r8
 8000b00:	3a20      	subs	r2, #32
 8000b02:	40d7      	lsrs	r7, r2
 8000b04:	4662      	mov	r2, ip
 8000b06:	2a20      	cmp	r2, #32
 8000b08:	d005      	beq.n	8000b16 <__aeabi_dadd+0x1ba>
 8000b0a:	4664      	mov	r4, ip
 8000b0c:	2240      	movs	r2, #64	; 0x40
 8000b0e:	1b12      	subs	r2, r2, r4
 8000b10:	4644      	mov	r4, r8
 8000b12:	4094      	lsls	r4, r2
 8000b14:	4321      	orrs	r1, r4
 8000b16:	1e4a      	subs	r2, r1, #1
 8000b18:	4191      	sbcs	r1, r2
 8000b1a:	000c      	movs	r4, r1
 8000b1c:	433c      	orrs	r4, r7
 8000b1e:	e057      	b.n	8000bd0 <__aeabi_dadd+0x274>
 8000b20:	003a      	movs	r2, r7
 8000b22:	430a      	orrs	r2, r1
 8000b24:	d100      	bne.n	8000b28 <__aeabi_dadd+0x1cc>
 8000b26:	e105      	b.n	8000d34 <__aeabi_dadd+0x3d8>
 8000b28:	0022      	movs	r2, r4
 8000b2a:	3a01      	subs	r2, #1
 8000b2c:	2c01      	cmp	r4, #1
 8000b2e:	d100      	bne.n	8000b32 <__aeabi_dadd+0x1d6>
 8000b30:	e182      	b.n	8000e38 <__aeabi_dadd+0x4dc>
 8000b32:	4c64      	ldr	r4, [pc, #400]	; (8000cc4 <__aeabi_dadd+0x368>)
 8000b34:	45a4      	cmp	ip, r4
 8000b36:	d05b      	beq.n	8000bf0 <__aeabi_dadd+0x294>
 8000b38:	4694      	mov	ip, r2
 8000b3a:	e741      	b.n	80009c0 <__aeabi_dadd+0x64>
 8000b3c:	4c63      	ldr	r4, [pc, #396]	; (8000ccc <__aeabi_dadd+0x370>)
 8000b3e:	1c77      	adds	r7, r6, #1
 8000b40:	4227      	tst	r7, r4
 8000b42:	d000      	beq.n	8000b46 <__aeabi_dadd+0x1ea>
 8000b44:	e0c4      	b.n	8000cd0 <__aeabi_dadd+0x374>
 8000b46:	0004      	movs	r4, r0
 8000b48:	431c      	orrs	r4, r3
 8000b4a:	2e00      	cmp	r6, #0
 8000b4c:	d000      	beq.n	8000b50 <__aeabi_dadd+0x1f4>
 8000b4e:	e169      	b.n	8000e24 <__aeabi_dadd+0x4c8>
 8000b50:	2c00      	cmp	r4, #0
 8000b52:	d100      	bne.n	8000b56 <__aeabi_dadd+0x1fa>
 8000b54:	e1bf      	b.n	8000ed6 <__aeabi_dadd+0x57a>
 8000b56:	4644      	mov	r4, r8
 8000b58:	430c      	orrs	r4, r1
 8000b5a:	d000      	beq.n	8000b5e <__aeabi_dadd+0x202>
 8000b5c:	e1d0      	b.n	8000f00 <__aeabi_dadd+0x5a4>
 8000b5e:	0742      	lsls	r2, r0, #29
 8000b60:	08db      	lsrs	r3, r3, #3
 8000b62:	4313      	orrs	r3, r2
 8000b64:	08c0      	lsrs	r0, r0, #3
 8000b66:	e029      	b.n	8000bbc <__aeabi_dadd+0x260>
 8000b68:	003a      	movs	r2, r7
 8000b6a:	430a      	orrs	r2, r1
 8000b6c:	d100      	bne.n	8000b70 <__aeabi_dadd+0x214>
 8000b6e:	e170      	b.n	8000e52 <__aeabi_dadd+0x4f6>
 8000b70:	4662      	mov	r2, ip
 8000b72:	4664      	mov	r4, ip
 8000b74:	3a01      	subs	r2, #1
 8000b76:	2c01      	cmp	r4, #1
 8000b78:	d100      	bne.n	8000b7c <__aeabi_dadd+0x220>
 8000b7a:	e0e0      	b.n	8000d3e <__aeabi_dadd+0x3e2>
 8000b7c:	4c51      	ldr	r4, [pc, #324]	; (8000cc4 <__aeabi_dadd+0x368>)
 8000b7e:	45a4      	cmp	ip, r4
 8000b80:	d100      	bne.n	8000b84 <__aeabi_dadd+0x228>
 8000b82:	e161      	b.n	8000e48 <__aeabi_dadd+0x4ec>
 8000b84:	4694      	mov	ip, r2
 8000b86:	e7b4      	b.n	8000af2 <__aeabi_dadd+0x196>
 8000b88:	003a      	movs	r2, r7
 8000b8a:	391f      	subs	r1, #31
 8000b8c:	40ca      	lsrs	r2, r1
 8000b8e:	0011      	movs	r1, r2
 8000b90:	2b20      	cmp	r3, #32
 8000b92:	d003      	beq.n	8000b9c <__aeabi_dadd+0x240>
 8000b94:	2240      	movs	r2, #64	; 0x40
 8000b96:	1ad3      	subs	r3, r2, r3
 8000b98:	409f      	lsls	r7, r3
 8000b9a:	433c      	orrs	r4, r7
 8000b9c:	1e63      	subs	r3, r4, #1
 8000b9e:	419c      	sbcs	r4, r3
 8000ba0:	2700      	movs	r7, #0
 8000ba2:	2600      	movs	r6, #0
 8000ba4:	430c      	orrs	r4, r1
 8000ba6:	0763      	lsls	r3, r4, #29
 8000ba8:	d000      	beq.n	8000bac <__aeabi_dadd+0x250>
 8000baa:	e753      	b.n	8000a54 <__aeabi_dadd+0xf8>
 8000bac:	46b4      	mov	ip, r6
 8000bae:	08e4      	lsrs	r4, r4, #3
 8000bb0:	077b      	lsls	r3, r7, #29
 8000bb2:	4323      	orrs	r3, r4
 8000bb4:	08f8      	lsrs	r0, r7, #3
 8000bb6:	4a43      	ldr	r2, [pc, #268]	; (8000cc4 <__aeabi_dadd+0x368>)
 8000bb8:	4594      	cmp	ip, r2
 8000bba:	d01d      	beq.n	8000bf8 <__aeabi_dadd+0x29c>
 8000bbc:	4662      	mov	r2, ip
 8000bbe:	0307      	lsls	r7, r0, #12
 8000bc0:	0552      	lsls	r2, r2, #21
 8000bc2:	0b3f      	lsrs	r7, r7, #12
 8000bc4:	0d52      	lsrs	r2, r2, #21
 8000bc6:	e760      	b.n	8000a8a <__aeabi_dadd+0x12e>
 8000bc8:	4644      	mov	r4, r8
 8000bca:	430c      	orrs	r4, r1
 8000bcc:	1e62      	subs	r2, r4, #1
 8000bce:	4194      	sbcs	r4, r2
 8000bd0:	18e4      	adds	r4, r4, r3
 8000bd2:	429c      	cmp	r4, r3
 8000bd4:	419b      	sbcs	r3, r3
 8000bd6:	425f      	negs	r7, r3
 8000bd8:	183f      	adds	r7, r7, r0
 8000bda:	023b      	lsls	r3, r7, #8
 8000bdc:	d5e3      	bpl.n	8000ba6 <__aeabi_dadd+0x24a>
 8000bde:	4b39      	ldr	r3, [pc, #228]	; (8000cc4 <__aeabi_dadd+0x368>)
 8000be0:	3601      	adds	r6, #1
 8000be2:	429e      	cmp	r6, r3
 8000be4:	d000      	beq.n	8000be8 <__aeabi_dadd+0x28c>
 8000be6:	e0b5      	b.n	8000d54 <__aeabi_dadd+0x3f8>
 8000be8:	0032      	movs	r2, r6
 8000bea:	2700      	movs	r7, #0
 8000bec:	2300      	movs	r3, #0
 8000bee:	e74c      	b.n	8000a8a <__aeabi_dadd+0x12e>
 8000bf0:	0742      	lsls	r2, r0, #29
 8000bf2:	08db      	lsrs	r3, r3, #3
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	08c0      	lsrs	r0, r0, #3
 8000bf8:	001a      	movs	r2, r3
 8000bfa:	4302      	orrs	r2, r0
 8000bfc:	d100      	bne.n	8000c00 <__aeabi_dadd+0x2a4>
 8000bfe:	e1e1      	b.n	8000fc4 <__aeabi_dadd+0x668>
 8000c00:	2780      	movs	r7, #128	; 0x80
 8000c02:	033f      	lsls	r7, r7, #12
 8000c04:	4307      	orrs	r7, r0
 8000c06:	033f      	lsls	r7, r7, #12
 8000c08:	4a2e      	ldr	r2, [pc, #184]	; (8000cc4 <__aeabi_dadd+0x368>)
 8000c0a:	0b3f      	lsrs	r7, r7, #12
 8000c0c:	e73d      	b.n	8000a8a <__aeabi_dadd+0x12e>
 8000c0e:	0020      	movs	r0, r4
 8000c10:	f001 fd12 	bl	8002638 <__clzsi2>
 8000c14:	0001      	movs	r1, r0
 8000c16:	3118      	adds	r1, #24
 8000c18:	291f      	cmp	r1, #31
 8000c1a:	dc00      	bgt.n	8000c1e <__aeabi_dadd+0x2c2>
 8000c1c:	e6fc      	b.n	8000a18 <__aeabi_dadd+0xbc>
 8000c1e:	3808      	subs	r0, #8
 8000c20:	4084      	lsls	r4, r0
 8000c22:	0027      	movs	r7, r4
 8000c24:	2400      	movs	r4, #0
 8000c26:	42b1      	cmp	r1, r6
 8000c28:	db00      	blt.n	8000c2c <__aeabi_dadd+0x2d0>
 8000c2a:	e6ff      	b.n	8000a2c <__aeabi_dadd+0xd0>
 8000c2c:	4a26      	ldr	r2, [pc, #152]	; (8000cc8 <__aeabi_dadd+0x36c>)
 8000c2e:	1a76      	subs	r6, r6, r1
 8000c30:	4017      	ands	r7, r2
 8000c32:	e70d      	b.n	8000a50 <__aeabi_dadd+0xf4>
 8000c34:	2a00      	cmp	r2, #0
 8000c36:	d02f      	beq.n	8000c98 <__aeabi_dadd+0x33c>
 8000c38:	464a      	mov	r2, r9
 8000c3a:	1b92      	subs	r2, r2, r6
 8000c3c:	4694      	mov	ip, r2
 8000c3e:	2e00      	cmp	r6, #0
 8000c40:	d100      	bne.n	8000c44 <__aeabi_dadd+0x2e8>
 8000c42:	e0ad      	b.n	8000da0 <__aeabi_dadd+0x444>
 8000c44:	4a1f      	ldr	r2, [pc, #124]	; (8000cc4 <__aeabi_dadd+0x368>)
 8000c46:	4591      	cmp	r9, r2
 8000c48:	d100      	bne.n	8000c4c <__aeabi_dadd+0x2f0>
 8000c4a:	e10f      	b.n	8000e6c <__aeabi_dadd+0x510>
 8000c4c:	2280      	movs	r2, #128	; 0x80
 8000c4e:	0412      	lsls	r2, r2, #16
 8000c50:	4310      	orrs	r0, r2
 8000c52:	4662      	mov	r2, ip
 8000c54:	2a38      	cmp	r2, #56	; 0x38
 8000c56:	dd00      	ble.n	8000c5a <__aeabi_dadd+0x2fe>
 8000c58:	e10f      	b.n	8000e7a <__aeabi_dadd+0x51e>
 8000c5a:	2a1f      	cmp	r2, #31
 8000c5c:	dd00      	ble.n	8000c60 <__aeabi_dadd+0x304>
 8000c5e:	e180      	b.n	8000f62 <__aeabi_dadd+0x606>
 8000c60:	4664      	mov	r4, ip
 8000c62:	2220      	movs	r2, #32
 8000c64:	001e      	movs	r6, r3
 8000c66:	1b12      	subs	r2, r2, r4
 8000c68:	4667      	mov	r7, ip
 8000c6a:	0004      	movs	r4, r0
 8000c6c:	4093      	lsls	r3, r2
 8000c6e:	4094      	lsls	r4, r2
 8000c70:	40fe      	lsrs	r6, r7
 8000c72:	1e5a      	subs	r2, r3, #1
 8000c74:	4193      	sbcs	r3, r2
 8000c76:	40f8      	lsrs	r0, r7
 8000c78:	4334      	orrs	r4, r6
 8000c7a:	431c      	orrs	r4, r3
 8000c7c:	4480      	add	r8, r0
 8000c7e:	1864      	adds	r4, r4, r1
 8000c80:	428c      	cmp	r4, r1
 8000c82:	41bf      	sbcs	r7, r7
 8000c84:	427f      	negs	r7, r7
 8000c86:	464e      	mov	r6, r9
 8000c88:	4447      	add	r7, r8
 8000c8a:	e7a6      	b.n	8000bda <__aeabi_dadd+0x27e>
 8000c8c:	4642      	mov	r2, r8
 8000c8e:	430a      	orrs	r2, r1
 8000c90:	0011      	movs	r1, r2
 8000c92:	1e4a      	subs	r2, r1, #1
 8000c94:	4191      	sbcs	r1, r2
 8000c96:	e6ad      	b.n	80009f4 <__aeabi_dadd+0x98>
 8000c98:	4c0c      	ldr	r4, [pc, #48]	; (8000ccc <__aeabi_dadd+0x370>)
 8000c9a:	1c72      	adds	r2, r6, #1
 8000c9c:	4222      	tst	r2, r4
 8000c9e:	d000      	beq.n	8000ca2 <__aeabi_dadd+0x346>
 8000ca0:	e0a1      	b.n	8000de6 <__aeabi_dadd+0x48a>
 8000ca2:	0002      	movs	r2, r0
 8000ca4:	431a      	orrs	r2, r3
 8000ca6:	2e00      	cmp	r6, #0
 8000ca8:	d000      	beq.n	8000cac <__aeabi_dadd+0x350>
 8000caa:	e0fa      	b.n	8000ea2 <__aeabi_dadd+0x546>
 8000cac:	2a00      	cmp	r2, #0
 8000cae:	d100      	bne.n	8000cb2 <__aeabi_dadd+0x356>
 8000cb0:	e145      	b.n	8000f3e <__aeabi_dadd+0x5e2>
 8000cb2:	003a      	movs	r2, r7
 8000cb4:	430a      	orrs	r2, r1
 8000cb6:	d000      	beq.n	8000cba <__aeabi_dadd+0x35e>
 8000cb8:	e146      	b.n	8000f48 <__aeabi_dadd+0x5ec>
 8000cba:	0742      	lsls	r2, r0, #29
 8000cbc:	08db      	lsrs	r3, r3, #3
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	08c0      	lsrs	r0, r0, #3
 8000cc2:	e77b      	b.n	8000bbc <__aeabi_dadd+0x260>
 8000cc4:	000007ff 	.word	0x000007ff
 8000cc8:	ff7fffff 	.word	0xff7fffff
 8000ccc:	000007fe 	.word	0x000007fe
 8000cd0:	4647      	mov	r7, r8
 8000cd2:	1a5c      	subs	r4, r3, r1
 8000cd4:	1bc2      	subs	r2, r0, r7
 8000cd6:	42a3      	cmp	r3, r4
 8000cd8:	41bf      	sbcs	r7, r7
 8000cda:	427f      	negs	r7, r7
 8000cdc:	46b9      	mov	r9, r7
 8000cde:	0017      	movs	r7, r2
 8000ce0:	464a      	mov	r2, r9
 8000ce2:	1abf      	subs	r7, r7, r2
 8000ce4:	023a      	lsls	r2, r7, #8
 8000ce6:	d500      	bpl.n	8000cea <__aeabi_dadd+0x38e>
 8000ce8:	e08d      	b.n	8000e06 <__aeabi_dadd+0x4aa>
 8000cea:	0023      	movs	r3, r4
 8000cec:	433b      	orrs	r3, r7
 8000cee:	d000      	beq.n	8000cf2 <__aeabi_dadd+0x396>
 8000cf0:	e68a      	b.n	8000a08 <__aeabi_dadd+0xac>
 8000cf2:	2000      	movs	r0, #0
 8000cf4:	2500      	movs	r5, #0
 8000cf6:	e761      	b.n	8000bbc <__aeabi_dadd+0x260>
 8000cf8:	4cb4      	ldr	r4, [pc, #720]	; (8000fcc <__aeabi_dadd+0x670>)
 8000cfa:	45a1      	cmp	r9, r4
 8000cfc:	d100      	bne.n	8000d00 <__aeabi_dadd+0x3a4>
 8000cfe:	e0ad      	b.n	8000e5c <__aeabi_dadd+0x500>
 8000d00:	2480      	movs	r4, #128	; 0x80
 8000d02:	0424      	lsls	r4, r4, #16
 8000d04:	4320      	orrs	r0, r4
 8000d06:	4664      	mov	r4, ip
 8000d08:	2c38      	cmp	r4, #56	; 0x38
 8000d0a:	dc3d      	bgt.n	8000d88 <__aeabi_dadd+0x42c>
 8000d0c:	4662      	mov	r2, ip
 8000d0e:	2c1f      	cmp	r4, #31
 8000d10:	dd00      	ble.n	8000d14 <__aeabi_dadd+0x3b8>
 8000d12:	e0b7      	b.n	8000e84 <__aeabi_dadd+0x528>
 8000d14:	2520      	movs	r5, #32
 8000d16:	001e      	movs	r6, r3
 8000d18:	1b2d      	subs	r5, r5, r4
 8000d1a:	0004      	movs	r4, r0
 8000d1c:	40ab      	lsls	r3, r5
 8000d1e:	40ac      	lsls	r4, r5
 8000d20:	40d6      	lsrs	r6, r2
 8000d22:	40d0      	lsrs	r0, r2
 8000d24:	4642      	mov	r2, r8
 8000d26:	1e5d      	subs	r5, r3, #1
 8000d28:	41ab      	sbcs	r3, r5
 8000d2a:	4334      	orrs	r4, r6
 8000d2c:	1a12      	subs	r2, r2, r0
 8000d2e:	4690      	mov	r8, r2
 8000d30:	4323      	orrs	r3, r4
 8000d32:	e02c      	b.n	8000d8e <__aeabi_dadd+0x432>
 8000d34:	0742      	lsls	r2, r0, #29
 8000d36:	08db      	lsrs	r3, r3, #3
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	08c0      	lsrs	r0, r0, #3
 8000d3c:	e73b      	b.n	8000bb6 <__aeabi_dadd+0x25a>
 8000d3e:	185c      	adds	r4, r3, r1
 8000d40:	429c      	cmp	r4, r3
 8000d42:	419b      	sbcs	r3, r3
 8000d44:	4440      	add	r0, r8
 8000d46:	425b      	negs	r3, r3
 8000d48:	18c7      	adds	r7, r0, r3
 8000d4a:	2601      	movs	r6, #1
 8000d4c:	023b      	lsls	r3, r7, #8
 8000d4e:	d400      	bmi.n	8000d52 <__aeabi_dadd+0x3f6>
 8000d50:	e729      	b.n	8000ba6 <__aeabi_dadd+0x24a>
 8000d52:	2602      	movs	r6, #2
 8000d54:	4a9e      	ldr	r2, [pc, #632]	; (8000fd0 <__aeabi_dadd+0x674>)
 8000d56:	0863      	lsrs	r3, r4, #1
 8000d58:	4017      	ands	r7, r2
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	4014      	ands	r4, r2
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	07fb      	lsls	r3, r7, #31
 8000d62:	431c      	orrs	r4, r3
 8000d64:	087f      	lsrs	r7, r7, #1
 8000d66:	e673      	b.n	8000a50 <__aeabi_dadd+0xf4>
 8000d68:	4644      	mov	r4, r8
 8000d6a:	3a20      	subs	r2, #32
 8000d6c:	40d4      	lsrs	r4, r2
 8000d6e:	4662      	mov	r2, ip
 8000d70:	2a20      	cmp	r2, #32
 8000d72:	d005      	beq.n	8000d80 <__aeabi_dadd+0x424>
 8000d74:	4667      	mov	r7, ip
 8000d76:	2240      	movs	r2, #64	; 0x40
 8000d78:	1bd2      	subs	r2, r2, r7
 8000d7a:	4647      	mov	r7, r8
 8000d7c:	4097      	lsls	r7, r2
 8000d7e:	4339      	orrs	r1, r7
 8000d80:	1e4a      	subs	r2, r1, #1
 8000d82:	4191      	sbcs	r1, r2
 8000d84:	4321      	orrs	r1, r4
 8000d86:	e635      	b.n	80009f4 <__aeabi_dadd+0x98>
 8000d88:	4303      	orrs	r3, r0
 8000d8a:	1e58      	subs	r0, r3, #1
 8000d8c:	4183      	sbcs	r3, r0
 8000d8e:	1acc      	subs	r4, r1, r3
 8000d90:	42a1      	cmp	r1, r4
 8000d92:	41bf      	sbcs	r7, r7
 8000d94:	4643      	mov	r3, r8
 8000d96:	427f      	negs	r7, r7
 8000d98:	4655      	mov	r5, sl
 8000d9a:	464e      	mov	r6, r9
 8000d9c:	1bdf      	subs	r7, r3, r7
 8000d9e:	e62e      	b.n	80009fe <__aeabi_dadd+0xa2>
 8000da0:	0002      	movs	r2, r0
 8000da2:	431a      	orrs	r2, r3
 8000da4:	d100      	bne.n	8000da8 <__aeabi_dadd+0x44c>
 8000da6:	e0bd      	b.n	8000f24 <__aeabi_dadd+0x5c8>
 8000da8:	4662      	mov	r2, ip
 8000daa:	4664      	mov	r4, ip
 8000dac:	3a01      	subs	r2, #1
 8000dae:	2c01      	cmp	r4, #1
 8000db0:	d100      	bne.n	8000db4 <__aeabi_dadd+0x458>
 8000db2:	e0e5      	b.n	8000f80 <__aeabi_dadd+0x624>
 8000db4:	4c85      	ldr	r4, [pc, #532]	; (8000fcc <__aeabi_dadd+0x670>)
 8000db6:	45a4      	cmp	ip, r4
 8000db8:	d058      	beq.n	8000e6c <__aeabi_dadd+0x510>
 8000dba:	4694      	mov	ip, r2
 8000dbc:	e749      	b.n	8000c52 <__aeabi_dadd+0x2f6>
 8000dbe:	4664      	mov	r4, ip
 8000dc0:	2220      	movs	r2, #32
 8000dc2:	1b12      	subs	r2, r2, r4
 8000dc4:	4644      	mov	r4, r8
 8000dc6:	4094      	lsls	r4, r2
 8000dc8:	000f      	movs	r7, r1
 8000dca:	46a1      	mov	r9, r4
 8000dcc:	4664      	mov	r4, ip
 8000dce:	4091      	lsls	r1, r2
 8000dd0:	40e7      	lsrs	r7, r4
 8000dd2:	464c      	mov	r4, r9
 8000dd4:	1e4a      	subs	r2, r1, #1
 8000dd6:	4191      	sbcs	r1, r2
 8000dd8:	433c      	orrs	r4, r7
 8000dda:	4642      	mov	r2, r8
 8000ddc:	430c      	orrs	r4, r1
 8000dde:	4661      	mov	r1, ip
 8000de0:	40ca      	lsrs	r2, r1
 8000de2:	1880      	adds	r0, r0, r2
 8000de4:	e6f4      	b.n	8000bd0 <__aeabi_dadd+0x274>
 8000de6:	4c79      	ldr	r4, [pc, #484]	; (8000fcc <__aeabi_dadd+0x670>)
 8000de8:	42a2      	cmp	r2, r4
 8000dea:	d100      	bne.n	8000dee <__aeabi_dadd+0x492>
 8000dec:	e6fd      	b.n	8000bea <__aeabi_dadd+0x28e>
 8000dee:	1859      	adds	r1, r3, r1
 8000df0:	4299      	cmp	r1, r3
 8000df2:	419b      	sbcs	r3, r3
 8000df4:	4440      	add	r0, r8
 8000df6:	425f      	negs	r7, r3
 8000df8:	19c7      	adds	r7, r0, r7
 8000dfa:	07fc      	lsls	r4, r7, #31
 8000dfc:	0849      	lsrs	r1, r1, #1
 8000dfe:	0016      	movs	r6, r2
 8000e00:	430c      	orrs	r4, r1
 8000e02:	087f      	lsrs	r7, r7, #1
 8000e04:	e6cf      	b.n	8000ba6 <__aeabi_dadd+0x24a>
 8000e06:	1acc      	subs	r4, r1, r3
 8000e08:	42a1      	cmp	r1, r4
 8000e0a:	41bf      	sbcs	r7, r7
 8000e0c:	4643      	mov	r3, r8
 8000e0e:	427f      	negs	r7, r7
 8000e10:	1a18      	subs	r0, r3, r0
 8000e12:	4655      	mov	r5, sl
 8000e14:	1bc7      	subs	r7, r0, r7
 8000e16:	e5f7      	b.n	8000a08 <__aeabi_dadd+0xac>
 8000e18:	08c9      	lsrs	r1, r1, #3
 8000e1a:	077b      	lsls	r3, r7, #29
 8000e1c:	4655      	mov	r5, sl
 8000e1e:	430b      	orrs	r3, r1
 8000e20:	08f8      	lsrs	r0, r7, #3
 8000e22:	e6c8      	b.n	8000bb6 <__aeabi_dadd+0x25a>
 8000e24:	2c00      	cmp	r4, #0
 8000e26:	d000      	beq.n	8000e2a <__aeabi_dadd+0x4ce>
 8000e28:	e081      	b.n	8000f2e <__aeabi_dadd+0x5d2>
 8000e2a:	4643      	mov	r3, r8
 8000e2c:	430b      	orrs	r3, r1
 8000e2e:	d115      	bne.n	8000e5c <__aeabi_dadd+0x500>
 8000e30:	2080      	movs	r0, #128	; 0x80
 8000e32:	2500      	movs	r5, #0
 8000e34:	0300      	lsls	r0, r0, #12
 8000e36:	e6e3      	b.n	8000c00 <__aeabi_dadd+0x2a4>
 8000e38:	1a5c      	subs	r4, r3, r1
 8000e3a:	42a3      	cmp	r3, r4
 8000e3c:	419b      	sbcs	r3, r3
 8000e3e:	1bc7      	subs	r7, r0, r7
 8000e40:	425b      	negs	r3, r3
 8000e42:	2601      	movs	r6, #1
 8000e44:	1aff      	subs	r7, r7, r3
 8000e46:	e5da      	b.n	80009fe <__aeabi_dadd+0xa2>
 8000e48:	0742      	lsls	r2, r0, #29
 8000e4a:	08db      	lsrs	r3, r3, #3
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	08c0      	lsrs	r0, r0, #3
 8000e50:	e6d2      	b.n	8000bf8 <__aeabi_dadd+0x29c>
 8000e52:	0742      	lsls	r2, r0, #29
 8000e54:	08db      	lsrs	r3, r3, #3
 8000e56:	4313      	orrs	r3, r2
 8000e58:	08c0      	lsrs	r0, r0, #3
 8000e5a:	e6ac      	b.n	8000bb6 <__aeabi_dadd+0x25a>
 8000e5c:	4643      	mov	r3, r8
 8000e5e:	4642      	mov	r2, r8
 8000e60:	08c9      	lsrs	r1, r1, #3
 8000e62:	075b      	lsls	r3, r3, #29
 8000e64:	4655      	mov	r5, sl
 8000e66:	430b      	orrs	r3, r1
 8000e68:	08d0      	lsrs	r0, r2, #3
 8000e6a:	e6c5      	b.n	8000bf8 <__aeabi_dadd+0x29c>
 8000e6c:	4643      	mov	r3, r8
 8000e6e:	4642      	mov	r2, r8
 8000e70:	075b      	lsls	r3, r3, #29
 8000e72:	08c9      	lsrs	r1, r1, #3
 8000e74:	430b      	orrs	r3, r1
 8000e76:	08d0      	lsrs	r0, r2, #3
 8000e78:	e6be      	b.n	8000bf8 <__aeabi_dadd+0x29c>
 8000e7a:	4303      	orrs	r3, r0
 8000e7c:	001c      	movs	r4, r3
 8000e7e:	1e63      	subs	r3, r4, #1
 8000e80:	419c      	sbcs	r4, r3
 8000e82:	e6fc      	b.n	8000c7e <__aeabi_dadd+0x322>
 8000e84:	0002      	movs	r2, r0
 8000e86:	3c20      	subs	r4, #32
 8000e88:	40e2      	lsrs	r2, r4
 8000e8a:	0014      	movs	r4, r2
 8000e8c:	4662      	mov	r2, ip
 8000e8e:	2a20      	cmp	r2, #32
 8000e90:	d003      	beq.n	8000e9a <__aeabi_dadd+0x53e>
 8000e92:	2540      	movs	r5, #64	; 0x40
 8000e94:	1aad      	subs	r5, r5, r2
 8000e96:	40a8      	lsls	r0, r5
 8000e98:	4303      	orrs	r3, r0
 8000e9a:	1e58      	subs	r0, r3, #1
 8000e9c:	4183      	sbcs	r3, r0
 8000e9e:	4323      	orrs	r3, r4
 8000ea0:	e775      	b.n	8000d8e <__aeabi_dadd+0x432>
 8000ea2:	2a00      	cmp	r2, #0
 8000ea4:	d0e2      	beq.n	8000e6c <__aeabi_dadd+0x510>
 8000ea6:	003a      	movs	r2, r7
 8000ea8:	430a      	orrs	r2, r1
 8000eaa:	d0cd      	beq.n	8000e48 <__aeabi_dadd+0x4ec>
 8000eac:	0742      	lsls	r2, r0, #29
 8000eae:	08db      	lsrs	r3, r3, #3
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	2280      	movs	r2, #128	; 0x80
 8000eb4:	08c0      	lsrs	r0, r0, #3
 8000eb6:	0312      	lsls	r2, r2, #12
 8000eb8:	4210      	tst	r0, r2
 8000eba:	d006      	beq.n	8000eca <__aeabi_dadd+0x56e>
 8000ebc:	08fc      	lsrs	r4, r7, #3
 8000ebe:	4214      	tst	r4, r2
 8000ec0:	d103      	bne.n	8000eca <__aeabi_dadd+0x56e>
 8000ec2:	0020      	movs	r0, r4
 8000ec4:	08cb      	lsrs	r3, r1, #3
 8000ec6:	077a      	lsls	r2, r7, #29
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	0f5a      	lsrs	r2, r3, #29
 8000ecc:	00db      	lsls	r3, r3, #3
 8000ece:	0752      	lsls	r2, r2, #29
 8000ed0:	08db      	lsrs	r3, r3, #3
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	e690      	b.n	8000bf8 <__aeabi_dadd+0x29c>
 8000ed6:	4643      	mov	r3, r8
 8000ed8:	430b      	orrs	r3, r1
 8000eda:	d100      	bne.n	8000ede <__aeabi_dadd+0x582>
 8000edc:	e709      	b.n	8000cf2 <__aeabi_dadd+0x396>
 8000ede:	4643      	mov	r3, r8
 8000ee0:	4642      	mov	r2, r8
 8000ee2:	08c9      	lsrs	r1, r1, #3
 8000ee4:	075b      	lsls	r3, r3, #29
 8000ee6:	4655      	mov	r5, sl
 8000ee8:	430b      	orrs	r3, r1
 8000eea:	08d0      	lsrs	r0, r2, #3
 8000eec:	e666      	b.n	8000bbc <__aeabi_dadd+0x260>
 8000eee:	1acc      	subs	r4, r1, r3
 8000ef0:	42a1      	cmp	r1, r4
 8000ef2:	4189      	sbcs	r1, r1
 8000ef4:	1a3f      	subs	r7, r7, r0
 8000ef6:	4249      	negs	r1, r1
 8000ef8:	4655      	mov	r5, sl
 8000efa:	2601      	movs	r6, #1
 8000efc:	1a7f      	subs	r7, r7, r1
 8000efe:	e57e      	b.n	80009fe <__aeabi_dadd+0xa2>
 8000f00:	4642      	mov	r2, r8
 8000f02:	1a5c      	subs	r4, r3, r1
 8000f04:	1a87      	subs	r7, r0, r2
 8000f06:	42a3      	cmp	r3, r4
 8000f08:	4192      	sbcs	r2, r2
 8000f0a:	4252      	negs	r2, r2
 8000f0c:	1abf      	subs	r7, r7, r2
 8000f0e:	023a      	lsls	r2, r7, #8
 8000f10:	d53d      	bpl.n	8000f8e <__aeabi_dadd+0x632>
 8000f12:	1acc      	subs	r4, r1, r3
 8000f14:	42a1      	cmp	r1, r4
 8000f16:	4189      	sbcs	r1, r1
 8000f18:	4643      	mov	r3, r8
 8000f1a:	4249      	negs	r1, r1
 8000f1c:	1a1f      	subs	r7, r3, r0
 8000f1e:	4655      	mov	r5, sl
 8000f20:	1a7f      	subs	r7, r7, r1
 8000f22:	e595      	b.n	8000a50 <__aeabi_dadd+0xf4>
 8000f24:	077b      	lsls	r3, r7, #29
 8000f26:	08c9      	lsrs	r1, r1, #3
 8000f28:	430b      	orrs	r3, r1
 8000f2a:	08f8      	lsrs	r0, r7, #3
 8000f2c:	e643      	b.n	8000bb6 <__aeabi_dadd+0x25a>
 8000f2e:	4644      	mov	r4, r8
 8000f30:	08db      	lsrs	r3, r3, #3
 8000f32:	430c      	orrs	r4, r1
 8000f34:	d130      	bne.n	8000f98 <__aeabi_dadd+0x63c>
 8000f36:	0742      	lsls	r2, r0, #29
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	08c0      	lsrs	r0, r0, #3
 8000f3c:	e65c      	b.n	8000bf8 <__aeabi_dadd+0x29c>
 8000f3e:	077b      	lsls	r3, r7, #29
 8000f40:	08c9      	lsrs	r1, r1, #3
 8000f42:	430b      	orrs	r3, r1
 8000f44:	08f8      	lsrs	r0, r7, #3
 8000f46:	e639      	b.n	8000bbc <__aeabi_dadd+0x260>
 8000f48:	185c      	adds	r4, r3, r1
 8000f4a:	429c      	cmp	r4, r3
 8000f4c:	419b      	sbcs	r3, r3
 8000f4e:	4440      	add	r0, r8
 8000f50:	425b      	negs	r3, r3
 8000f52:	18c7      	adds	r7, r0, r3
 8000f54:	023b      	lsls	r3, r7, #8
 8000f56:	d400      	bmi.n	8000f5a <__aeabi_dadd+0x5fe>
 8000f58:	e625      	b.n	8000ba6 <__aeabi_dadd+0x24a>
 8000f5a:	4b1d      	ldr	r3, [pc, #116]	; (8000fd0 <__aeabi_dadd+0x674>)
 8000f5c:	2601      	movs	r6, #1
 8000f5e:	401f      	ands	r7, r3
 8000f60:	e621      	b.n	8000ba6 <__aeabi_dadd+0x24a>
 8000f62:	0004      	movs	r4, r0
 8000f64:	3a20      	subs	r2, #32
 8000f66:	40d4      	lsrs	r4, r2
 8000f68:	4662      	mov	r2, ip
 8000f6a:	2a20      	cmp	r2, #32
 8000f6c:	d004      	beq.n	8000f78 <__aeabi_dadd+0x61c>
 8000f6e:	2240      	movs	r2, #64	; 0x40
 8000f70:	4666      	mov	r6, ip
 8000f72:	1b92      	subs	r2, r2, r6
 8000f74:	4090      	lsls	r0, r2
 8000f76:	4303      	orrs	r3, r0
 8000f78:	1e5a      	subs	r2, r3, #1
 8000f7a:	4193      	sbcs	r3, r2
 8000f7c:	431c      	orrs	r4, r3
 8000f7e:	e67e      	b.n	8000c7e <__aeabi_dadd+0x322>
 8000f80:	185c      	adds	r4, r3, r1
 8000f82:	428c      	cmp	r4, r1
 8000f84:	4189      	sbcs	r1, r1
 8000f86:	4440      	add	r0, r8
 8000f88:	4249      	negs	r1, r1
 8000f8a:	1847      	adds	r7, r0, r1
 8000f8c:	e6dd      	b.n	8000d4a <__aeabi_dadd+0x3ee>
 8000f8e:	0023      	movs	r3, r4
 8000f90:	433b      	orrs	r3, r7
 8000f92:	d100      	bne.n	8000f96 <__aeabi_dadd+0x63a>
 8000f94:	e6ad      	b.n	8000cf2 <__aeabi_dadd+0x396>
 8000f96:	e606      	b.n	8000ba6 <__aeabi_dadd+0x24a>
 8000f98:	0744      	lsls	r4, r0, #29
 8000f9a:	4323      	orrs	r3, r4
 8000f9c:	2480      	movs	r4, #128	; 0x80
 8000f9e:	08c0      	lsrs	r0, r0, #3
 8000fa0:	0324      	lsls	r4, r4, #12
 8000fa2:	4220      	tst	r0, r4
 8000fa4:	d008      	beq.n	8000fb8 <__aeabi_dadd+0x65c>
 8000fa6:	4642      	mov	r2, r8
 8000fa8:	08d6      	lsrs	r6, r2, #3
 8000faa:	4226      	tst	r6, r4
 8000fac:	d104      	bne.n	8000fb8 <__aeabi_dadd+0x65c>
 8000fae:	4655      	mov	r5, sl
 8000fb0:	0030      	movs	r0, r6
 8000fb2:	08cb      	lsrs	r3, r1, #3
 8000fb4:	0751      	lsls	r1, r2, #29
 8000fb6:	430b      	orrs	r3, r1
 8000fb8:	0f5a      	lsrs	r2, r3, #29
 8000fba:	00db      	lsls	r3, r3, #3
 8000fbc:	08db      	lsrs	r3, r3, #3
 8000fbe:	0752      	lsls	r2, r2, #29
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	e619      	b.n	8000bf8 <__aeabi_dadd+0x29c>
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	4a01      	ldr	r2, [pc, #4]	; (8000fcc <__aeabi_dadd+0x670>)
 8000fc8:	001f      	movs	r7, r3
 8000fca:	e55e      	b.n	8000a8a <__aeabi_dadd+0x12e>
 8000fcc:	000007ff 	.word	0x000007ff
 8000fd0:	ff7fffff 	.word	0xff7fffff

08000fd4 <__aeabi_ddiv>:
 8000fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fd6:	4657      	mov	r7, sl
 8000fd8:	464e      	mov	r6, r9
 8000fda:	4645      	mov	r5, r8
 8000fdc:	46de      	mov	lr, fp
 8000fde:	b5e0      	push	{r5, r6, r7, lr}
 8000fe0:	4681      	mov	r9, r0
 8000fe2:	0005      	movs	r5, r0
 8000fe4:	030c      	lsls	r4, r1, #12
 8000fe6:	0048      	lsls	r0, r1, #1
 8000fe8:	4692      	mov	sl, r2
 8000fea:	001f      	movs	r7, r3
 8000fec:	b085      	sub	sp, #20
 8000fee:	0b24      	lsrs	r4, r4, #12
 8000ff0:	0d40      	lsrs	r0, r0, #21
 8000ff2:	0fce      	lsrs	r6, r1, #31
 8000ff4:	2800      	cmp	r0, #0
 8000ff6:	d100      	bne.n	8000ffa <__aeabi_ddiv+0x26>
 8000ff8:	e156      	b.n	80012a8 <__aeabi_ddiv+0x2d4>
 8000ffa:	4bd4      	ldr	r3, [pc, #848]	; (800134c <__aeabi_ddiv+0x378>)
 8000ffc:	4298      	cmp	r0, r3
 8000ffe:	d100      	bne.n	8001002 <__aeabi_ddiv+0x2e>
 8001000:	e172      	b.n	80012e8 <__aeabi_ddiv+0x314>
 8001002:	0f6b      	lsrs	r3, r5, #29
 8001004:	00e4      	lsls	r4, r4, #3
 8001006:	431c      	orrs	r4, r3
 8001008:	2380      	movs	r3, #128	; 0x80
 800100a:	041b      	lsls	r3, r3, #16
 800100c:	4323      	orrs	r3, r4
 800100e:	4698      	mov	r8, r3
 8001010:	4bcf      	ldr	r3, [pc, #828]	; (8001350 <__aeabi_ddiv+0x37c>)
 8001012:	00ed      	lsls	r5, r5, #3
 8001014:	469b      	mov	fp, r3
 8001016:	2300      	movs	r3, #0
 8001018:	4699      	mov	r9, r3
 800101a:	4483      	add	fp, r0
 800101c:	9300      	str	r3, [sp, #0]
 800101e:	033c      	lsls	r4, r7, #12
 8001020:	007b      	lsls	r3, r7, #1
 8001022:	4650      	mov	r0, sl
 8001024:	0b24      	lsrs	r4, r4, #12
 8001026:	0d5b      	lsrs	r3, r3, #21
 8001028:	0fff      	lsrs	r7, r7, #31
 800102a:	2b00      	cmp	r3, #0
 800102c:	d100      	bne.n	8001030 <__aeabi_ddiv+0x5c>
 800102e:	e11f      	b.n	8001270 <__aeabi_ddiv+0x29c>
 8001030:	4ac6      	ldr	r2, [pc, #792]	; (800134c <__aeabi_ddiv+0x378>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d100      	bne.n	8001038 <__aeabi_ddiv+0x64>
 8001036:	e162      	b.n	80012fe <__aeabi_ddiv+0x32a>
 8001038:	49c5      	ldr	r1, [pc, #788]	; (8001350 <__aeabi_ddiv+0x37c>)
 800103a:	0f42      	lsrs	r2, r0, #29
 800103c:	468c      	mov	ip, r1
 800103e:	00e4      	lsls	r4, r4, #3
 8001040:	4659      	mov	r1, fp
 8001042:	4314      	orrs	r4, r2
 8001044:	2280      	movs	r2, #128	; 0x80
 8001046:	4463      	add	r3, ip
 8001048:	0412      	lsls	r2, r2, #16
 800104a:	1acb      	subs	r3, r1, r3
 800104c:	4314      	orrs	r4, r2
 800104e:	469b      	mov	fp, r3
 8001050:	00c2      	lsls	r2, r0, #3
 8001052:	2000      	movs	r0, #0
 8001054:	0033      	movs	r3, r6
 8001056:	407b      	eors	r3, r7
 8001058:	469a      	mov	sl, r3
 800105a:	464b      	mov	r3, r9
 800105c:	2b0f      	cmp	r3, #15
 800105e:	d827      	bhi.n	80010b0 <__aeabi_ddiv+0xdc>
 8001060:	49bc      	ldr	r1, [pc, #752]	; (8001354 <__aeabi_ddiv+0x380>)
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	58cb      	ldr	r3, [r1, r3]
 8001066:	469f      	mov	pc, r3
 8001068:	46b2      	mov	sl, r6
 800106a:	9b00      	ldr	r3, [sp, #0]
 800106c:	2b02      	cmp	r3, #2
 800106e:	d016      	beq.n	800109e <__aeabi_ddiv+0xca>
 8001070:	2b03      	cmp	r3, #3
 8001072:	d100      	bne.n	8001076 <__aeabi_ddiv+0xa2>
 8001074:	e28e      	b.n	8001594 <__aeabi_ddiv+0x5c0>
 8001076:	2b01      	cmp	r3, #1
 8001078:	d000      	beq.n	800107c <__aeabi_ddiv+0xa8>
 800107a:	e0d9      	b.n	8001230 <__aeabi_ddiv+0x25c>
 800107c:	2300      	movs	r3, #0
 800107e:	2400      	movs	r4, #0
 8001080:	2500      	movs	r5, #0
 8001082:	4652      	mov	r2, sl
 8001084:	051b      	lsls	r3, r3, #20
 8001086:	4323      	orrs	r3, r4
 8001088:	07d2      	lsls	r2, r2, #31
 800108a:	4313      	orrs	r3, r2
 800108c:	0028      	movs	r0, r5
 800108e:	0019      	movs	r1, r3
 8001090:	b005      	add	sp, #20
 8001092:	bcf0      	pop	{r4, r5, r6, r7}
 8001094:	46bb      	mov	fp, r7
 8001096:	46b2      	mov	sl, r6
 8001098:	46a9      	mov	r9, r5
 800109a:	46a0      	mov	r8, r4
 800109c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800109e:	2400      	movs	r4, #0
 80010a0:	2500      	movs	r5, #0
 80010a2:	4baa      	ldr	r3, [pc, #680]	; (800134c <__aeabi_ddiv+0x378>)
 80010a4:	e7ed      	b.n	8001082 <__aeabi_ddiv+0xae>
 80010a6:	46ba      	mov	sl, r7
 80010a8:	46a0      	mov	r8, r4
 80010aa:	0015      	movs	r5, r2
 80010ac:	9000      	str	r0, [sp, #0]
 80010ae:	e7dc      	b.n	800106a <__aeabi_ddiv+0x96>
 80010b0:	4544      	cmp	r4, r8
 80010b2:	d200      	bcs.n	80010b6 <__aeabi_ddiv+0xe2>
 80010b4:	e1c7      	b.n	8001446 <__aeabi_ddiv+0x472>
 80010b6:	d100      	bne.n	80010ba <__aeabi_ddiv+0xe6>
 80010b8:	e1c2      	b.n	8001440 <__aeabi_ddiv+0x46c>
 80010ba:	2301      	movs	r3, #1
 80010bc:	425b      	negs	r3, r3
 80010be:	469c      	mov	ip, r3
 80010c0:	002e      	movs	r6, r5
 80010c2:	4640      	mov	r0, r8
 80010c4:	2500      	movs	r5, #0
 80010c6:	44e3      	add	fp, ip
 80010c8:	0223      	lsls	r3, r4, #8
 80010ca:	0e14      	lsrs	r4, r2, #24
 80010cc:	431c      	orrs	r4, r3
 80010ce:	0c1b      	lsrs	r3, r3, #16
 80010d0:	4699      	mov	r9, r3
 80010d2:	0423      	lsls	r3, r4, #16
 80010d4:	0c1f      	lsrs	r7, r3, #16
 80010d6:	0212      	lsls	r2, r2, #8
 80010d8:	4649      	mov	r1, r9
 80010da:	9200      	str	r2, [sp, #0]
 80010dc:	9701      	str	r7, [sp, #4]
 80010de:	f7ff f8b3 	bl	8000248 <__aeabi_uidivmod>
 80010e2:	0002      	movs	r2, r0
 80010e4:	437a      	muls	r2, r7
 80010e6:	040b      	lsls	r3, r1, #16
 80010e8:	0c31      	lsrs	r1, r6, #16
 80010ea:	4680      	mov	r8, r0
 80010ec:	4319      	orrs	r1, r3
 80010ee:	428a      	cmp	r2, r1
 80010f0:	d907      	bls.n	8001102 <__aeabi_ddiv+0x12e>
 80010f2:	2301      	movs	r3, #1
 80010f4:	425b      	negs	r3, r3
 80010f6:	469c      	mov	ip, r3
 80010f8:	1909      	adds	r1, r1, r4
 80010fa:	44e0      	add	r8, ip
 80010fc:	428c      	cmp	r4, r1
 80010fe:	d800      	bhi.n	8001102 <__aeabi_ddiv+0x12e>
 8001100:	e207      	b.n	8001512 <__aeabi_ddiv+0x53e>
 8001102:	1a88      	subs	r0, r1, r2
 8001104:	4649      	mov	r1, r9
 8001106:	f7ff f89f 	bl	8000248 <__aeabi_uidivmod>
 800110a:	0409      	lsls	r1, r1, #16
 800110c:	468c      	mov	ip, r1
 800110e:	0431      	lsls	r1, r6, #16
 8001110:	4666      	mov	r6, ip
 8001112:	9a01      	ldr	r2, [sp, #4]
 8001114:	0c09      	lsrs	r1, r1, #16
 8001116:	4342      	muls	r2, r0
 8001118:	0003      	movs	r3, r0
 800111a:	4331      	orrs	r1, r6
 800111c:	428a      	cmp	r2, r1
 800111e:	d904      	bls.n	800112a <__aeabi_ddiv+0x156>
 8001120:	1909      	adds	r1, r1, r4
 8001122:	3b01      	subs	r3, #1
 8001124:	428c      	cmp	r4, r1
 8001126:	d800      	bhi.n	800112a <__aeabi_ddiv+0x156>
 8001128:	e1ed      	b.n	8001506 <__aeabi_ddiv+0x532>
 800112a:	1a88      	subs	r0, r1, r2
 800112c:	4642      	mov	r2, r8
 800112e:	0412      	lsls	r2, r2, #16
 8001130:	431a      	orrs	r2, r3
 8001132:	4690      	mov	r8, r2
 8001134:	4641      	mov	r1, r8
 8001136:	9b00      	ldr	r3, [sp, #0]
 8001138:	040e      	lsls	r6, r1, #16
 800113a:	0c1b      	lsrs	r3, r3, #16
 800113c:	001f      	movs	r7, r3
 800113e:	9302      	str	r3, [sp, #8]
 8001140:	9b00      	ldr	r3, [sp, #0]
 8001142:	0c36      	lsrs	r6, r6, #16
 8001144:	041b      	lsls	r3, r3, #16
 8001146:	0c19      	lsrs	r1, r3, #16
 8001148:	000b      	movs	r3, r1
 800114a:	4373      	muls	r3, r6
 800114c:	0c12      	lsrs	r2, r2, #16
 800114e:	437e      	muls	r6, r7
 8001150:	9103      	str	r1, [sp, #12]
 8001152:	4351      	muls	r1, r2
 8001154:	437a      	muls	r2, r7
 8001156:	0c1f      	lsrs	r7, r3, #16
 8001158:	46bc      	mov	ip, r7
 800115a:	1876      	adds	r6, r6, r1
 800115c:	4466      	add	r6, ip
 800115e:	42b1      	cmp	r1, r6
 8001160:	d903      	bls.n	800116a <__aeabi_ddiv+0x196>
 8001162:	2180      	movs	r1, #128	; 0x80
 8001164:	0249      	lsls	r1, r1, #9
 8001166:	468c      	mov	ip, r1
 8001168:	4462      	add	r2, ip
 800116a:	0c31      	lsrs	r1, r6, #16
 800116c:	188a      	adds	r2, r1, r2
 800116e:	0431      	lsls	r1, r6, #16
 8001170:	041e      	lsls	r6, r3, #16
 8001172:	0c36      	lsrs	r6, r6, #16
 8001174:	198e      	adds	r6, r1, r6
 8001176:	4290      	cmp	r0, r2
 8001178:	d302      	bcc.n	8001180 <__aeabi_ddiv+0x1ac>
 800117a:	d112      	bne.n	80011a2 <__aeabi_ddiv+0x1ce>
 800117c:	42b5      	cmp	r5, r6
 800117e:	d210      	bcs.n	80011a2 <__aeabi_ddiv+0x1ce>
 8001180:	4643      	mov	r3, r8
 8001182:	1e59      	subs	r1, r3, #1
 8001184:	9b00      	ldr	r3, [sp, #0]
 8001186:	469c      	mov	ip, r3
 8001188:	4465      	add	r5, ip
 800118a:	001f      	movs	r7, r3
 800118c:	429d      	cmp	r5, r3
 800118e:	419b      	sbcs	r3, r3
 8001190:	425b      	negs	r3, r3
 8001192:	191b      	adds	r3, r3, r4
 8001194:	18c0      	adds	r0, r0, r3
 8001196:	4284      	cmp	r4, r0
 8001198:	d200      	bcs.n	800119c <__aeabi_ddiv+0x1c8>
 800119a:	e1a0      	b.n	80014de <__aeabi_ddiv+0x50a>
 800119c:	d100      	bne.n	80011a0 <__aeabi_ddiv+0x1cc>
 800119e:	e19b      	b.n	80014d8 <__aeabi_ddiv+0x504>
 80011a0:	4688      	mov	r8, r1
 80011a2:	1bae      	subs	r6, r5, r6
 80011a4:	42b5      	cmp	r5, r6
 80011a6:	41ad      	sbcs	r5, r5
 80011a8:	1a80      	subs	r0, r0, r2
 80011aa:	426d      	negs	r5, r5
 80011ac:	1b40      	subs	r0, r0, r5
 80011ae:	4284      	cmp	r4, r0
 80011b0:	d100      	bne.n	80011b4 <__aeabi_ddiv+0x1e0>
 80011b2:	e1d5      	b.n	8001560 <__aeabi_ddiv+0x58c>
 80011b4:	4649      	mov	r1, r9
 80011b6:	f7ff f847 	bl	8000248 <__aeabi_uidivmod>
 80011ba:	9a01      	ldr	r2, [sp, #4]
 80011bc:	040b      	lsls	r3, r1, #16
 80011be:	4342      	muls	r2, r0
 80011c0:	0c31      	lsrs	r1, r6, #16
 80011c2:	0005      	movs	r5, r0
 80011c4:	4319      	orrs	r1, r3
 80011c6:	428a      	cmp	r2, r1
 80011c8:	d900      	bls.n	80011cc <__aeabi_ddiv+0x1f8>
 80011ca:	e16c      	b.n	80014a6 <__aeabi_ddiv+0x4d2>
 80011cc:	1a88      	subs	r0, r1, r2
 80011ce:	4649      	mov	r1, r9
 80011d0:	f7ff f83a 	bl	8000248 <__aeabi_uidivmod>
 80011d4:	9a01      	ldr	r2, [sp, #4]
 80011d6:	0436      	lsls	r6, r6, #16
 80011d8:	4342      	muls	r2, r0
 80011da:	0409      	lsls	r1, r1, #16
 80011dc:	0c36      	lsrs	r6, r6, #16
 80011de:	0003      	movs	r3, r0
 80011e0:	430e      	orrs	r6, r1
 80011e2:	42b2      	cmp	r2, r6
 80011e4:	d900      	bls.n	80011e8 <__aeabi_ddiv+0x214>
 80011e6:	e153      	b.n	8001490 <__aeabi_ddiv+0x4bc>
 80011e8:	9803      	ldr	r0, [sp, #12]
 80011ea:	1ab6      	subs	r6, r6, r2
 80011ec:	0002      	movs	r2, r0
 80011ee:	042d      	lsls	r5, r5, #16
 80011f0:	431d      	orrs	r5, r3
 80011f2:	9f02      	ldr	r7, [sp, #8]
 80011f4:	042b      	lsls	r3, r5, #16
 80011f6:	0c1b      	lsrs	r3, r3, #16
 80011f8:	435a      	muls	r2, r3
 80011fa:	437b      	muls	r3, r7
 80011fc:	469c      	mov	ip, r3
 80011fe:	0c29      	lsrs	r1, r5, #16
 8001200:	4348      	muls	r0, r1
 8001202:	0c13      	lsrs	r3, r2, #16
 8001204:	4484      	add	ip, r0
 8001206:	4463      	add	r3, ip
 8001208:	4379      	muls	r1, r7
 800120a:	4298      	cmp	r0, r3
 800120c:	d903      	bls.n	8001216 <__aeabi_ddiv+0x242>
 800120e:	2080      	movs	r0, #128	; 0x80
 8001210:	0240      	lsls	r0, r0, #9
 8001212:	4684      	mov	ip, r0
 8001214:	4461      	add	r1, ip
 8001216:	0c18      	lsrs	r0, r3, #16
 8001218:	0412      	lsls	r2, r2, #16
 800121a:	041b      	lsls	r3, r3, #16
 800121c:	0c12      	lsrs	r2, r2, #16
 800121e:	1841      	adds	r1, r0, r1
 8001220:	189b      	adds	r3, r3, r2
 8001222:	428e      	cmp	r6, r1
 8001224:	d200      	bcs.n	8001228 <__aeabi_ddiv+0x254>
 8001226:	e0ff      	b.n	8001428 <__aeabi_ddiv+0x454>
 8001228:	d100      	bne.n	800122c <__aeabi_ddiv+0x258>
 800122a:	e0fa      	b.n	8001422 <__aeabi_ddiv+0x44e>
 800122c:	2301      	movs	r3, #1
 800122e:	431d      	orrs	r5, r3
 8001230:	4a49      	ldr	r2, [pc, #292]	; (8001358 <__aeabi_ddiv+0x384>)
 8001232:	445a      	add	r2, fp
 8001234:	2a00      	cmp	r2, #0
 8001236:	dc00      	bgt.n	800123a <__aeabi_ddiv+0x266>
 8001238:	e0aa      	b.n	8001390 <__aeabi_ddiv+0x3bc>
 800123a:	076b      	lsls	r3, r5, #29
 800123c:	d000      	beq.n	8001240 <__aeabi_ddiv+0x26c>
 800123e:	e13d      	b.n	80014bc <__aeabi_ddiv+0x4e8>
 8001240:	08ed      	lsrs	r5, r5, #3
 8001242:	4643      	mov	r3, r8
 8001244:	01db      	lsls	r3, r3, #7
 8001246:	d506      	bpl.n	8001256 <__aeabi_ddiv+0x282>
 8001248:	4642      	mov	r2, r8
 800124a:	4b44      	ldr	r3, [pc, #272]	; (800135c <__aeabi_ddiv+0x388>)
 800124c:	401a      	ands	r2, r3
 800124e:	4690      	mov	r8, r2
 8001250:	2280      	movs	r2, #128	; 0x80
 8001252:	00d2      	lsls	r2, r2, #3
 8001254:	445a      	add	r2, fp
 8001256:	4b42      	ldr	r3, [pc, #264]	; (8001360 <__aeabi_ddiv+0x38c>)
 8001258:	429a      	cmp	r2, r3
 800125a:	dd00      	ble.n	800125e <__aeabi_ddiv+0x28a>
 800125c:	e71f      	b.n	800109e <__aeabi_ddiv+0xca>
 800125e:	4643      	mov	r3, r8
 8001260:	075b      	lsls	r3, r3, #29
 8001262:	431d      	orrs	r5, r3
 8001264:	4643      	mov	r3, r8
 8001266:	0552      	lsls	r2, r2, #21
 8001268:	025c      	lsls	r4, r3, #9
 800126a:	0b24      	lsrs	r4, r4, #12
 800126c:	0d53      	lsrs	r3, r2, #21
 800126e:	e708      	b.n	8001082 <__aeabi_ddiv+0xae>
 8001270:	4652      	mov	r2, sl
 8001272:	4322      	orrs	r2, r4
 8001274:	d100      	bne.n	8001278 <__aeabi_ddiv+0x2a4>
 8001276:	e07b      	b.n	8001370 <__aeabi_ddiv+0x39c>
 8001278:	2c00      	cmp	r4, #0
 800127a:	d100      	bne.n	800127e <__aeabi_ddiv+0x2aa>
 800127c:	e0fa      	b.n	8001474 <__aeabi_ddiv+0x4a0>
 800127e:	0020      	movs	r0, r4
 8001280:	f001 f9da 	bl	8002638 <__clzsi2>
 8001284:	0002      	movs	r2, r0
 8001286:	3a0b      	subs	r2, #11
 8001288:	231d      	movs	r3, #29
 800128a:	0001      	movs	r1, r0
 800128c:	1a9b      	subs	r3, r3, r2
 800128e:	4652      	mov	r2, sl
 8001290:	3908      	subs	r1, #8
 8001292:	40da      	lsrs	r2, r3
 8001294:	408c      	lsls	r4, r1
 8001296:	4314      	orrs	r4, r2
 8001298:	4652      	mov	r2, sl
 800129a:	408a      	lsls	r2, r1
 800129c:	4b31      	ldr	r3, [pc, #196]	; (8001364 <__aeabi_ddiv+0x390>)
 800129e:	4458      	add	r0, fp
 80012a0:	469b      	mov	fp, r3
 80012a2:	4483      	add	fp, r0
 80012a4:	2000      	movs	r0, #0
 80012a6:	e6d5      	b.n	8001054 <__aeabi_ddiv+0x80>
 80012a8:	464b      	mov	r3, r9
 80012aa:	4323      	orrs	r3, r4
 80012ac:	4698      	mov	r8, r3
 80012ae:	d044      	beq.n	800133a <__aeabi_ddiv+0x366>
 80012b0:	2c00      	cmp	r4, #0
 80012b2:	d100      	bne.n	80012b6 <__aeabi_ddiv+0x2e2>
 80012b4:	e0ce      	b.n	8001454 <__aeabi_ddiv+0x480>
 80012b6:	0020      	movs	r0, r4
 80012b8:	f001 f9be 	bl	8002638 <__clzsi2>
 80012bc:	0001      	movs	r1, r0
 80012be:	0002      	movs	r2, r0
 80012c0:	390b      	subs	r1, #11
 80012c2:	231d      	movs	r3, #29
 80012c4:	1a5b      	subs	r3, r3, r1
 80012c6:	4649      	mov	r1, r9
 80012c8:	0010      	movs	r0, r2
 80012ca:	40d9      	lsrs	r1, r3
 80012cc:	3808      	subs	r0, #8
 80012ce:	4084      	lsls	r4, r0
 80012d0:	000b      	movs	r3, r1
 80012d2:	464d      	mov	r5, r9
 80012d4:	4323      	orrs	r3, r4
 80012d6:	4698      	mov	r8, r3
 80012d8:	4085      	lsls	r5, r0
 80012da:	4823      	ldr	r0, [pc, #140]	; (8001368 <__aeabi_ddiv+0x394>)
 80012dc:	1a83      	subs	r3, r0, r2
 80012de:	469b      	mov	fp, r3
 80012e0:	2300      	movs	r3, #0
 80012e2:	4699      	mov	r9, r3
 80012e4:	9300      	str	r3, [sp, #0]
 80012e6:	e69a      	b.n	800101e <__aeabi_ddiv+0x4a>
 80012e8:	464b      	mov	r3, r9
 80012ea:	4323      	orrs	r3, r4
 80012ec:	4698      	mov	r8, r3
 80012ee:	d11d      	bne.n	800132c <__aeabi_ddiv+0x358>
 80012f0:	2308      	movs	r3, #8
 80012f2:	4699      	mov	r9, r3
 80012f4:	3b06      	subs	r3, #6
 80012f6:	2500      	movs	r5, #0
 80012f8:	4683      	mov	fp, r0
 80012fa:	9300      	str	r3, [sp, #0]
 80012fc:	e68f      	b.n	800101e <__aeabi_ddiv+0x4a>
 80012fe:	4652      	mov	r2, sl
 8001300:	4322      	orrs	r2, r4
 8001302:	d109      	bne.n	8001318 <__aeabi_ddiv+0x344>
 8001304:	2302      	movs	r3, #2
 8001306:	4649      	mov	r1, r9
 8001308:	4319      	orrs	r1, r3
 800130a:	4b18      	ldr	r3, [pc, #96]	; (800136c <__aeabi_ddiv+0x398>)
 800130c:	4689      	mov	r9, r1
 800130e:	469c      	mov	ip, r3
 8001310:	2400      	movs	r4, #0
 8001312:	2002      	movs	r0, #2
 8001314:	44e3      	add	fp, ip
 8001316:	e69d      	b.n	8001054 <__aeabi_ddiv+0x80>
 8001318:	2303      	movs	r3, #3
 800131a:	464a      	mov	r2, r9
 800131c:	431a      	orrs	r2, r3
 800131e:	4b13      	ldr	r3, [pc, #76]	; (800136c <__aeabi_ddiv+0x398>)
 8001320:	4691      	mov	r9, r2
 8001322:	469c      	mov	ip, r3
 8001324:	4652      	mov	r2, sl
 8001326:	2003      	movs	r0, #3
 8001328:	44e3      	add	fp, ip
 800132a:	e693      	b.n	8001054 <__aeabi_ddiv+0x80>
 800132c:	230c      	movs	r3, #12
 800132e:	4699      	mov	r9, r3
 8001330:	3b09      	subs	r3, #9
 8001332:	46a0      	mov	r8, r4
 8001334:	4683      	mov	fp, r0
 8001336:	9300      	str	r3, [sp, #0]
 8001338:	e671      	b.n	800101e <__aeabi_ddiv+0x4a>
 800133a:	2304      	movs	r3, #4
 800133c:	4699      	mov	r9, r3
 800133e:	2300      	movs	r3, #0
 8001340:	469b      	mov	fp, r3
 8001342:	3301      	adds	r3, #1
 8001344:	2500      	movs	r5, #0
 8001346:	9300      	str	r3, [sp, #0]
 8001348:	e669      	b.n	800101e <__aeabi_ddiv+0x4a>
 800134a:	46c0      	nop			; (mov r8, r8)
 800134c:	000007ff 	.word	0x000007ff
 8001350:	fffffc01 	.word	0xfffffc01
 8001354:	0800a6a0 	.word	0x0800a6a0
 8001358:	000003ff 	.word	0x000003ff
 800135c:	feffffff 	.word	0xfeffffff
 8001360:	000007fe 	.word	0x000007fe
 8001364:	000003f3 	.word	0x000003f3
 8001368:	fffffc0d 	.word	0xfffffc0d
 800136c:	fffff801 	.word	0xfffff801
 8001370:	4649      	mov	r1, r9
 8001372:	2301      	movs	r3, #1
 8001374:	4319      	orrs	r1, r3
 8001376:	4689      	mov	r9, r1
 8001378:	2400      	movs	r4, #0
 800137a:	2001      	movs	r0, #1
 800137c:	e66a      	b.n	8001054 <__aeabi_ddiv+0x80>
 800137e:	2300      	movs	r3, #0
 8001380:	2480      	movs	r4, #128	; 0x80
 8001382:	469a      	mov	sl, r3
 8001384:	2500      	movs	r5, #0
 8001386:	4b8a      	ldr	r3, [pc, #552]	; (80015b0 <__aeabi_ddiv+0x5dc>)
 8001388:	0324      	lsls	r4, r4, #12
 800138a:	e67a      	b.n	8001082 <__aeabi_ddiv+0xae>
 800138c:	2501      	movs	r5, #1
 800138e:	426d      	negs	r5, r5
 8001390:	2301      	movs	r3, #1
 8001392:	1a9b      	subs	r3, r3, r2
 8001394:	2b38      	cmp	r3, #56	; 0x38
 8001396:	dd00      	ble.n	800139a <__aeabi_ddiv+0x3c6>
 8001398:	e670      	b.n	800107c <__aeabi_ddiv+0xa8>
 800139a:	2b1f      	cmp	r3, #31
 800139c:	dc00      	bgt.n	80013a0 <__aeabi_ddiv+0x3cc>
 800139e:	e0bf      	b.n	8001520 <__aeabi_ddiv+0x54c>
 80013a0:	211f      	movs	r1, #31
 80013a2:	4249      	negs	r1, r1
 80013a4:	1a8a      	subs	r2, r1, r2
 80013a6:	4641      	mov	r1, r8
 80013a8:	40d1      	lsrs	r1, r2
 80013aa:	000a      	movs	r2, r1
 80013ac:	2b20      	cmp	r3, #32
 80013ae:	d004      	beq.n	80013ba <__aeabi_ddiv+0x3e6>
 80013b0:	4641      	mov	r1, r8
 80013b2:	4b80      	ldr	r3, [pc, #512]	; (80015b4 <__aeabi_ddiv+0x5e0>)
 80013b4:	445b      	add	r3, fp
 80013b6:	4099      	lsls	r1, r3
 80013b8:	430d      	orrs	r5, r1
 80013ba:	1e6b      	subs	r3, r5, #1
 80013bc:	419d      	sbcs	r5, r3
 80013be:	2307      	movs	r3, #7
 80013c0:	432a      	orrs	r2, r5
 80013c2:	001d      	movs	r5, r3
 80013c4:	2400      	movs	r4, #0
 80013c6:	4015      	ands	r5, r2
 80013c8:	4213      	tst	r3, r2
 80013ca:	d100      	bne.n	80013ce <__aeabi_ddiv+0x3fa>
 80013cc:	e0d4      	b.n	8001578 <__aeabi_ddiv+0x5a4>
 80013ce:	210f      	movs	r1, #15
 80013d0:	2300      	movs	r3, #0
 80013d2:	4011      	ands	r1, r2
 80013d4:	2904      	cmp	r1, #4
 80013d6:	d100      	bne.n	80013da <__aeabi_ddiv+0x406>
 80013d8:	e0cb      	b.n	8001572 <__aeabi_ddiv+0x59e>
 80013da:	1d11      	adds	r1, r2, #4
 80013dc:	4291      	cmp	r1, r2
 80013de:	4192      	sbcs	r2, r2
 80013e0:	4252      	negs	r2, r2
 80013e2:	189b      	adds	r3, r3, r2
 80013e4:	000a      	movs	r2, r1
 80013e6:	0219      	lsls	r1, r3, #8
 80013e8:	d400      	bmi.n	80013ec <__aeabi_ddiv+0x418>
 80013ea:	e0c2      	b.n	8001572 <__aeabi_ddiv+0x59e>
 80013ec:	2301      	movs	r3, #1
 80013ee:	2400      	movs	r4, #0
 80013f0:	2500      	movs	r5, #0
 80013f2:	e646      	b.n	8001082 <__aeabi_ddiv+0xae>
 80013f4:	2380      	movs	r3, #128	; 0x80
 80013f6:	4641      	mov	r1, r8
 80013f8:	031b      	lsls	r3, r3, #12
 80013fa:	4219      	tst	r1, r3
 80013fc:	d008      	beq.n	8001410 <__aeabi_ddiv+0x43c>
 80013fe:	421c      	tst	r4, r3
 8001400:	d106      	bne.n	8001410 <__aeabi_ddiv+0x43c>
 8001402:	431c      	orrs	r4, r3
 8001404:	0324      	lsls	r4, r4, #12
 8001406:	46ba      	mov	sl, r7
 8001408:	0015      	movs	r5, r2
 800140a:	4b69      	ldr	r3, [pc, #420]	; (80015b0 <__aeabi_ddiv+0x5dc>)
 800140c:	0b24      	lsrs	r4, r4, #12
 800140e:	e638      	b.n	8001082 <__aeabi_ddiv+0xae>
 8001410:	2480      	movs	r4, #128	; 0x80
 8001412:	4643      	mov	r3, r8
 8001414:	0324      	lsls	r4, r4, #12
 8001416:	431c      	orrs	r4, r3
 8001418:	0324      	lsls	r4, r4, #12
 800141a:	46b2      	mov	sl, r6
 800141c:	4b64      	ldr	r3, [pc, #400]	; (80015b0 <__aeabi_ddiv+0x5dc>)
 800141e:	0b24      	lsrs	r4, r4, #12
 8001420:	e62f      	b.n	8001082 <__aeabi_ddiv+0xae>
 8001422:	2b00      	cmp	r3, #0
 8001424:	d100      	bne.n	8001428 <__aeabi_ddiv+0x454>
 8001426:	e703      	b.n	8001230 <__aeabi_ddiv+0x25c>
 8001428:	19a6      	adds	r6, r4, r6
 800142a:	1e68      	subs	r0, r5, #1
 800142c:	42a6      	cmp	r6, r4
 800142e:	d200      	bcs.n	8001432 <__aeabi_ddiv+0x45e>
 8001430:	e08d      	b.n	800154e <__aeabi_ddiv+0x57a>
 8001432:	428e      	cmp	r6, r1
 8001434:	d200      	bcs.n	8001438 <__aeabi_ddiv+0x464>
 8001436:	e0a3      	b.n	8001580 <__aeabi_ddiv+0x5ac>
 8001438:	d100      	bne.n	800143c <__aeabi_ddiv+0x468>
 800143a:	e0b3      	b.n	80015a4 <__aeabi_ddiv+0x5d0>
 800143c:	0005      	movs	r5, r0
 800143e:	e6f5      	b.n	800122c <__aeabi_ddiv+0x258>
 8001440:	42aa      	cmp	r2, r5
 8001442:	d900      	bls.n	8001446 <__aeabi_ddiv+0x472>
 8001444:	e639      	b.n	80010ba <__aeabi_ddiv+0xe6>
 8001446:	4643      	mov	r3, r8
 8001448:	07de      	lsls	r6, r3, #31
 800144a:	0858      	lsrs	r0, r3, #1
 800144c:	086b      	lsrs	r3, r5, #1
 800144e:	431e      	orrs	r6, r3
 8001450:	07ed      	lsls	r5, r5, #31
 8001452:	e639      	b.n	80010c8 <__aeabi_ddiv+0xf4>
 8001454:	4648      	mov	r0, r9
 8001456:	f001 f8ef 	bl	8002638 <__clzsi2>
 800145a:	0001      	movs	r1, r0
 800145c:	0002      	movs	r2, r0
 800145e:	3115      	adds	r1, #21
 8001460:	3220      	adds	r2, #32
 8001462:	291c      	cmp	r1, #28
 8001464:	dc00      	bgt.n	8001468 <__aeabi_ddiv+0x494>
 8001466:	e72c      	b.n	80012c2 <__aeabi_ddiv+0x2ee>
 8001468:	464b      	mov	r3, r9
 800146a:	3808      	subs	r0, #8
 800146c:	4083      	lsls	r3, r0
 800146e:	2500      	movs	r5, #0
 8001470:	4698      	mov	r8, r3
 8001472:	e732      	b.n	80012da <__aeabi_ddiv+0x306>
 8001474:	f001 f8e0 	bl	8002638 <__clzsi2>
 8001478:	0003      	movs	r3, r0
 800147a:	001a      	movs	r2, r3
 800147c:	3215      	adds	r2, #21
 800147e:	3020      	adds	r0, #32
 8001480:	2a1c      	cmp	r2, #28
 8001482:	dc00      	bgt.n	8001486 <__aeabi_ddiv+0x4b2>
 8001484:	e700      	b.n	8001288 <__aeabi_ddiv+0x2b4>
 8001486:	4654      	mov	r4, sl
 8001488:	3b08      	subs	r3, #8
 800148a:	2200      	movs	r2, #0
 800148c:	409c      	lsls	r4, r3
 800148e:	e705      	b.n	800129c <__aeabi_ddiv+0x2c8>
 8001490:	1936      	adds	r6, r6, r4
 8001492:	3b01      	subs	r3, #1
 8001494:	42b4      	cmp	r4, r6
 8001496:	d900      	bls.n	800149a <__aeabi_ddiv+0x4c6>
 8001498:	e6a6      	b.n	80011e8 <__aeabi_ddiv+0x214>
 800149a:	42b2      	cmp	r2, r6
 800149c:	d800      	bhi.n	80014a0 <__aeabi_ddiv+0x4cc>
 800149e:	e6a3      	b.n	80011e8 <__aeabi_ddiv+0x214>
 80014a0:	1e83      	subs	r3, r0, #2
 80014a2:	1936      	adds	r6, r6, r4
 80014a4:	e6a0      	b.n	80011e8 <__aeabi_ddiv+0x214>
 80014a6:	1909      	adds	r1, r1, r4
 80014a8:	3d01      	subs	r5, #1
 80014aa:	428c      	cmp	r4, r1
 80014ac:	d900      	bls.n	80014b0 <__aeabi_ddiv+0x4dc>
 80014ae:	e68d      	b.n	80011cc <__aeabi_ddiv+0x1f8>
 80014b0:	428a      	cmp	r2, r1
 80014b2:	d800      	bhi.n	80014b6 <__aeabi_ddiv+0x4e2>
 80014b4:	e68a      	b.n	80011cc <__aeabi_ddiv+0x1f8>
 80014b6:	1e85      	subs	r5, r0, #2
 80014b8:	1909      	adds	r1, r1, r4
 80014ba:	e687      	b.n	80011cc <__aeabi_ddiv+0x1f8>
 80014bc:	230f      	movs	r3, #15
 80014be:	402b      	ands	r3, r5
 80014c0:	2b04      	cmp	r3, #4
 80014c2:	d100      	bne.n	80014c6 <__aeabi_ddiv+0x4f2>
 80014c4:	e6bc      	b.n	8001240 <__aeabi_ddiv+0x26c>
 80014c6:	2305      	movs	r3, #5
 80014c8:	425b      	negs	r3, r3
 80014ca:	42ab      	cmp	r3, r5
 80014cc:	419b      	sbcs	r3, r3
 80014ce:	3504      	adds	r5, #4
 80014d0:	425b      	negs	r3, r3
 80014d2:	08ed      	lsrs	r5, r5, #3
 80014d4:	4498      	add	r8, r3
 80014d6:	e6b4      	b.n	8001242 <__aeabi_ddiv+0x26e>
 80014d8:	42af      	cmp	r7, r5
 80014da:	d900      	bls.n	80014de <__aeabi_ddiv+0x50a>
 80014dc:	e660      	b.n	80011a0 <__aeabi_ddiv+0x1cc>
 80014de:	4282      	cmp	r2, r0
 80014e0:	d804      	bhi.n	80014ec <__aeabi_ddiv+0x518>
 80014e2:	d000      	beq.n	80014e6 <__aeabi_ddiv+0x512>
 80014e4:	e65c      	b.n	80011a0 <__aeabi_ddiv+0x1cc>
 80014e6:	42ae      	cmp	r6, r5
 80014e8:	d800      	bhi.n	80014ec <__aeabi_ddiv+0x518>
 80014ea:	e659      	b.n	80011a0 <__aeabi_ddiv+0x1cc>
 80014ec:	2302      	movs	r3, #2
 80014ee:	425b      	negs	r3, r3
 80014f0:	469c      	mov	ip, r3
 80014f2:	9b00      	ldr	r3, [sp, #0]
 80014f4:	44e0      	add	r8, ip
 80014f6:	469c      	mov	ip, r3
 80014f8:	4465      	add	r5, ip
 80014fa:	429d      	cmp	r5, r3
 80014fc:	419b      	sbcs	r3, r3
 80014fe:	425b      	negs	r3, r3
 8001500:	191b      	adds	r3, r3, r4
 8001502:	18c0      	adds	r0, r0, r3
 8001504:	e64d      	b.n	80011a2 <__aeabi_ddiv+0x1ce>
 8001506:	428a      	cmp	r2, r1
 8001508:	d800      	bhi.n	800150c <__aeabi_ddiv+0x538>
 800150a:	e60e      	b.n	800112a <__aeabi_ddiv+0x156>
 800150c:	1e83      	subs	r3, r0, #2
 800150e:	1909      	adds	r1, r1, r4
 8001510:	e60b      	b.n	800112a <__aeabi_ddiv+0x156>
 8001512:	428a      	cmp	r2, r1
 8001514:	d800      	bhi.n	8001518 <__aeabi_ddiv+0x544>
 8001516:	e5f4      	b.n	8001102 <__aeabi_ddiv+0x12e>
 8001518:	1e83      	subs	r3, r0, #2
 800151a:	4698      	mov	r8, r3
 800151c:	1909      	adds	r1, r1, r4
 800151e:	e5f0      	b.n	8001102 <__aeabi_ddiv+0x12e>
 8001520:	4925      	ldr	r1, [pc, #148]	; (80015b8 <__aeabi_ddiv+0x5e4>)
 8001522:	0028      	movs	r0, r5
 8001524:	4459      	add	r1, fp
 8001526:	408d      	lsls	r5, r1
 8001528:	4642      	mov	r2, r8
 800152a:	408a      	lsls	r2, r1
 800152c:	1e69      	subs	r1, r5, #1
 800152e:	418d      	sbcs	r5, r1
 8001530:	4641      	mov	r1, r8
 8001532:	40d8      	lsrs	r0, r3
 8001534:	40d9      	lsrs	r1, r3
 8001536:	4302      	orrs	r2, r0
 8001538:	432a      	orrs	r2, r5
 800153a:	000b      	movs	r3, r1
 800153c:	0751      	lsls	r1, r2, #29
 800153e:	d100      	bne.n	8001542 <__aeabi_ddiv+0x56e>
 8001540:	e751      	b.n	80013e6 <__aeabi_ddiv+0x412>
 8001542:	210f      	movs	r1, #15
 8001544:	4011      	ands	r1, r2
 8001546:	2904      	cmp	r1, #4
 8001548:	d000      	beq.n	800154c <__aeabi_ddiv+0x578>
 800154a:	e746      	b.n	80013da <__aeabi_ddiv+0x406>
 800154c:	e74b      	b.n	80013e6 <__aeabi_ddiv+0x412>
 800154e:	0005      	movs	r5, r0
 8001550:	428e      	cmp	r6, r1
 8001552:	d000      	beq.n	8001556 <__aeabi_ddiv+0x582>
 8001554:	e66a      	b.n	800122c <__aeabi_ddiv+0x258>
 8001556:	9a00      	ldr	r2, [sp, #0]
 8001558:	4293      	cmp	r3, r2
 800155a:	d000      	beq.n	800155e <__aeabi_ddiv+0x58a>
 800155c:	e666      	b.n	800122c <__aeabi_ddiv+0x258>
 800155e:	e667      	b.n	8001230 <__aeabi_ddiv+0x25c>
 8001560:	4a16      	ldr	r2, [pc, #88]	; (80015bc <__aeabi_ddiv+0x5e8>)
 8001562:	445a      	add	r2, fp
 8001564:	2a00      	cmp	r2, #0
 8001566:	dc00      	bgt.n	800156a <__aeabi_ddiv+0x596>
 8001568:	e710      	b.n	800138c <__aeabi_ddiv+0x3b8>
 800156a:	2301      	movs	r3, #1
 800156c:	2500      	movs	r5, #0
 800156e:	4498      	add	r8, r3
 8001570:	e667      	b.n	8001242 <__aeabi_ddiv+0x26e>
 8001572:	075d      	lsls	r5, r3, #29
 8001574:	025b      	lsls	r3, r3, #9
 8001576:	0b1c      	lsrs	r4, r3, #12
 8001578:	08d2      	lsrs	r2, r2, #3
 800157a:	2300      	movs	r3, #0
 800157c:	4315      	orrs	r5, r2
 800157e:	e580      	b.n	8001082 <__aeabi_ddiv+0xae>
 8001580:	9800      	ldr	r0, [sp, #0]
 8001582:	3d02      	subs	r5, #2
 8001584:	0042      	lsls	r2, r0, #1
 8001586:	4282      	cmp	r2, r0
 8001588:	41bf      	sbcs	r7, r7
 800158a:	427f      	negs	r7, r7
 800158c:	193c      	adds	r4, r7, r4
 800158e:	1936      	adds	r6, r6, r4
 8001590:	9200      	str	r2, [sp, #0]
 8001592:	e7dd      	b.n	8001550 <__aeabi_ddiv+0x57c>
 8001594:	2480      	movs	r4, #128	; 0x80
 8001596:	4643      	mov	r3, r8
 8001598:	0324      	lsls	r4, r4, #12
 800159a:	431c      	orrs	r4, r3
 800159c:	0324      	lsls	r4, r4, #12
 800159e:	4b04      	ldr	r3, [pc, #16]	; (80015b0 <__aeabi_ddiv+0x5dc>)
 80015a0:	0b24      	lsrs	r4, r4, #12
 80015a2:	e56e      	b.n	8001082 <__aeabi_ddiv+0xae>
 80015a4:	9a00      	ldr	r2, [sp, #0]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d3ea      	bcc.n	8001580 <__aeabi_ddiv+0x5ac>
 80015aa:	0005      	movs	r5, r0
 80015ac:	e7d3      	b.n	8001556 <__aeabi_ddiv+0x582>
 80015ae:	46c0      	nop			; (mov r8, r8)
 80015b0:	000007ff 	.word	0x000007ff
 80015b4:	0000043e 	.word	0x0000043e
 80015b8:	0000041e 	.word	0x0000041e
 80015bc:	000003ff 	.word	0x000003ff

080015c0 <__eqdf2>:
 80015c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015c2:	464e      	mov	r6, r9
 80015c4:	4645      	mov	r5, r8
 80015c6:	46de      	mov	lr, fp
 80015c8:	4657      	mov	r7, sl
 80015ca:	4690      	mov	r8, r2
 80015cc:	b5e0      	push	{r5, r6, r7, lr}
 80015ce:	0017      	movs	r7, r2
 80015d0:	031a      	lsls	r2, r3, #12
 80015d2:	0b12      	lsrs	r2, r2, #12
 80015d4:	0005      	movs	r5, r0
 80015d6:	4684      	mov	ip, r0
 80015d8:	4819      	ldr	r0, [pc, #100]	; (8001640 <__eqdf2+0x80>)
 80015da:	030e      	lsls	r6, r1, #12
 80015dc:	004c      	lsls	r4, r1, #1
 80015de:	4691      	mov	r9, r2
 80015e0:	005a      	lsls	r2, r3, #1
 80015e2:	0fdb      	lsrs	r3, r3, #31
 80015e4:	469b      	mov	fp, r3
 80015e6:	0b36      	lsrs	r6, r6, #12
 80015e8:	0d64      	lsrs	r4, r4, #21
 80015ea:	0fc9      	lsrs	r1, r1, #31
 80015ec:	0d52      	lsrs	r2, r2, #21
 80015ee:	4284      	cmp	r4, r0
 80015f0:	d019      	beq.n	8001626 <__eqdf2+0x66>
 80015f2:	4282      	cmp	r2, r0
 80015f4:	d010      	beq.n	8001618 <__eqdf2+0x58>
 80015f6:	2001      	movs	r0, #1
 80015f8:	4294      	cmp	r4, r2
 80015fa:	d10e      	bne.n	800161a <__eqdf2+0x5a>
 80015fc:	454e      	cmp	r6, r9
 80015fe:	d10c      	bne.n	800161a <__eqdf2+0x5a>
 8001600:	2001      	movs	r0, #1
 8001602:	45c4      	cmp	ip, r8
 8001604:	d109      	bne.n	800161a <__eqdf2+0x5a>
 8001606:	4559      	cmp	r1, fp
 8001608:	d017      	beq.n	800163a <__eqdf2+0x7a>
 800160a:	2c00      	cmp	r4, #0
 800160c:	d105      	bne.n	800161a <__eqdf2+0x5a>
 800160e:	0030      	movs	r0, r6
 8001610:	4328      	orrs	r0, r5
 8001612:	1e43      	subs	r3, r0, #1
 8001614:	4198      	sbcs	r0, r3
 8001616:	e000      	b.n	800161a <__eqdf2+0x5a>
 8001618:	2001      	movs	r0, #1
 800161a:	bcf0      	pop	{r4, r5, r6, r7}
 800161c:	46bb      	mov	fp, r7
 800161e:	46b2      	mov	sl, r6
 8001620:	46a9      	mov	r9, r5
 8001622:	46a0      	mov	r8, r4
 8001624:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001626:	0033      	movs	r3, r6
 8001628:	2001      	movs	r0, #1
 800162a:	432b      	orrs	r3, r5
 800162c:	d1f5      	bne.n	800161a <__eqdf2+0x5a>
 800162e:	42a2      	cmp	r2, r4
 8001630:	d1f3      	bne.n	800161a <__eqdf2+0x5a>
 8001632:	464b      	mov	r3, r9
 8001634:	433b      	orrs	r3, r7
 8001636:	d1f0      	bne.n	800161a <__eqdf2+0x5a>
 8001638:	e7e2      	b.n	8001600 <__eqdf2+0x40>
 800163a:	2000      	movs	r0, #0
 800163c:	e7ed      	b.n	800161a <__eqdf2+0x5a>
 800163e:	46c0      	nop			; (mov r8, r8)
 8001640:	000007ff 	.word	0x000007ff

08001644 <__gedf2>:
 8001644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001646:	4647      	mov	r7, r8
 8001648:	46ce      	mov	lr, r9
 800164a:	0004      	movs	r4, r0
 800164c:	0018      	movs	r0, r3
 800164e:	0016      	movs	r6, r2
 8001650:	031b      	lsls	r3, r3, #12
 8001652:	0b1b      	lsrs	r3, r3, #12
 8001654:	4d2d      	ldr	r5, [pc, #180]	; (800170c <__gedf2+0xc8>)
 8001656:	004a      	lsls	r2, r1, #1
 8001658:	4699      	mov	r9, r3
 800165a:	b580      	push	{r7, lr}
 800165c:	0043      	lsls	r3, r0, #1
 800165e:	030f      	lsls	r7, r1, #12
 8001660:	46a4      	mov	ip, r4
 8001662:	46b0      	mov	r8, r6
 8001664:	0b3f      	lsrs	r7, r7, #12
 8001666:	0d52      	lsrs	r2, r2, #21
 8001668:	0fc9      	lsrs	r1, r1, #31
 800166a:	0d5b      	lsrs	r3, r3, #21
 800166c:	0fc0      	lsrs	r0, r0, #31
 800166e:	42aa      	cmp	r2, r5
 8001670:	d021      	beq.n	80016b6 <__gedf2+0x72>
 8001672:	42ab      	cmp	r3, r5
 8001674:	d013      	beq.n	800169e <__gedf2+0x5a>
 8001676:	2a00      	cmp	r2, #0
 8001678:	d122      	bne.n	80016c0 <__gedf2+0x7c>
 800167a:	433c      	orrs	r4, r7
 800167c:	2b00      	cmp	r3, #0
 800167e:	d102      	bne.n	8001686 <__gedf2+0x42>
 8001680:	464d      	mov	r5, r9
 8001682:	432e      	orrs	r6, r5
 8001684:	d022      	beq.n	80016cc <__gedf2+0x88>
 8001686:	2c00      	cmp	r4, #0
 8001688:	d010      	beq.n	80016ac <__gedf2+0x68>
 800168a:	4281      	cmp	r1, r0
 800168c:	d022      	beq.n	80016d4 <__gedf2+0x90>
 800168e:	2002      	movs	r0, #2
 8001690:	3901      	subs	r1, #1
 8001692:	4008      	ands	r0, r1
 8001694:	3801      	subs	r0, #1
 8001696:	bcc0      	pop	{r6, r7}
 8001698:	46b9      	mov	r9, r7
 800169a:	46b0      	mov	r8, r6
 800169c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800169e:	464d      	mov	r5, r9
 80016a0:	432e      	orrs	r6, r5
 80016a2:	d129      	bne.n	80016f8 <__gedf2+0xb4>
 80016a4:	2a00      	cmp	r2, #0
 80016a6:	d1f0      	bne.n	800168a <__gedf2+0x46>
 80016a8:	433c      	orrs	r4, r7
 80016aa:	d1ee      	bne.n	800168a <__gedf2+0x46>
 80016ac:	2800      	cmp	r0, #0
 80016ae:	d1f2      	bne.n	8001696 <__gedf2+0x52>
 80016b0:	2001      	movs	r0, #1
 80016b2:	4240      	negs	r0, r0
 80016b4:	e7ef      	b.n	8001696 <__gedf2+0x52>
 80016b6:	003d      	movs	r5, r7
 80016b8:	4325      	orrs	r5, r4
 80016ba:	d11d      	bne.n	80016f8 <__gedf2+0xb4>
 80016bc:	4293      	cmp	r3, r2
 80016be:	d0ee      	beq.n	800169e <__gedf2+0x5a>
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d1e2      	bne.n	800168a <__gedf2+0x46>
 80016c4:	464c      	mov	r4, r9
 80016c6:	4326      	orrs	r6, r4
 80016c8:	d1df      	bne.n	800168a <__gedf2+0x46>
 80016ca:	e7e0      	b.n	800168e <__gedf2+0x4a>
 80016cc:	2000      	movs	r0, #0
 80016ce:	2c00      	cmp	r4, #0
 80016d0:	d0e1      	beq.n	8001696 <__gedf2+0x52>
 80016d2:	e7dc      	b.n	800168e <__gedf2+0x4a>
 80016d4:	429a      	cmp	r2, r3
 80016d6:	dc0a      	bgt.n	80016ee <__gedf2+0xaa>
 80016d8:	dbe8      	blt.n	80016ac <__gedf2+0x68>
 80016da:	454f      	cmp	r7, r9
 80016dc:	d8d7      	bhi.n	800168e <__gedf2+0x4a>
 80016de:	d00e      	beq.n	80016fe <__gedf2+0xba>
 80016e0:	2000      	movs	r0, #0
 80016e2:	454f      	cmp	r7, r9
 80016e4:	d2d7      	bcs.n	8001696 <__gedf2+0x52>
 80016e6:	2900      	cmp	r1, #0
 80016e8:	d0e2      	beq.n	80016b0 <__gedf2+0x6c>
 80016ea:	0008      	movs	r0, r1
 80016ec:	e7d3      	b.n	8001696 <__gedf2+0x52>
 80016ee:	4243      	negs	r3, r0
 80016f0:	4158      	adcs	r0, r3
 80016f2:	0040      	lsls	r0, r0, #1
 80016f4:	3801      	subs	r0, #1
 80016f6:	e7ce      	b.n	8001696 <__gedf2+0x52>
 80016f8:	2002      	movs	r0, #2
 80016fa:	4240      	negs	r0, r0
 80016fc:	e7cb      	b.n	8001696 <__gedf2+0x52>
 80016fe:	45c4      	cmp	ip, r8
 8001700:	d8c5      	bhi.n	800168e <__gedf2+0x4a>
 8001702:	2000      	movs	r0, #0
 8001704:	45c4      	cmp	ip, r8
 8001706:	d2c6      	bcs.n	8001696 <__gedf2+0x52>
 8001708:	e7ed      	b.n	80016e6 <__gedf2+0xa2>
 800170a:	46c0      	nop			; (mov r8, r8)
 800170c:	000007ff 	.word	0x000007ff

08001710 <__ledf2>:
 8001710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001712:	4647      	mov	r7, r8
 8001714:	46ce      	mov	lr, r9
 8001716:	0004      	movs	r4, r0
 8001718:	0018      	movs	r0, r3
 800171a:	0016      	movs	r6, r2
 800171c:	031b      	lsls	r3, r3, #12
 800171e:	0b1b      	lsrs	r3, r3, #12
 8001720:	4d2c      	ldr	r5, [pc, #176]	; (80017d4 <__ledf2+0xc4>)
 8001722:	004a      	lsls	r2, r1, #1
 8001724:	4699      	mov	r9, r3
 8001726:	b580      	push	{r7, lr}
 8001728:	0043      	lsls	r3, r0, #1
 800172a:	030f      	lsls	r7, r1, #12
 800172c:	46a4      	mov	ip, r4
 800172e:	46b0      	mov	r8, r6
 8001730:	0b3f      	lsrs	r7, r7, #12
 8001732:	0d52      	lsrs	r2, r2, #21
 8001734:	0fc9      	lsrs	r1, r1, #31
 8001736:	0d5b      	lsrs	r3, r3, #21
 8001738:	0fc0      	lsrs	r0, r0, #31
 800173a:	42aa      	cmp	r2, r5
 800173c:	d00d      	beq.n	800175a <__ledf2+0x4a>
 800173e:	42ab      	cmp	r3, r5
 8001740:	d010      	beq.n	8001764 <__ledf2+0x54>
 8001742:	2a00      	cmp	r2, #0
 8001744:	d127      	bne.n	8001796 <__ledf2+0x86>
 8001746:	433c      	orrs	r4, r7
 8001748:	2b00      	cmp	r3, #0
 800174a:	d111      	bne.n	8001770 <__ledf2+0x60>
 800174c:	464d      	mov	r5, r9
 800174e:	432e      	orrs	r6, r5
 8001750:	d10e      	bne.n	8001770 <__ledf2+0x60>
 8001752:	2000      	movs	r0, #0
 8001754:	2c00      	cmp	r4, #0
 8001756:	d015      	beq.n	8001784 <__ledf2+0x74>
 8001758:	e00e      	b.n	8001778 <__ledf2+0x68>
 800175a:	003d      	movs	r5, r7
 800175c:	4325      	orrs	r5, r4
 800175e:	d110      	bne.n	8001782 <__ledf2+0x72>
 8001760:	4293      	cmp	r3, r2
 8001762:	d118      	bne.n	8001796 <__ledf2+0x86>
 8001764:	464d      	mov	r5, r9
 8001766:	432e      	orrs	r6, r5
 8001768:	d10b      	bne.n	8001782 <__ledf2+0x72>
 800176a:	2a00      	cmp	r2, #0
 800176c:	d102      	bne.n	8001774 <__ledf2+0x64>
 800176e:	433c      	orrs	r4, r7
 8001770:	2c00      	cmp	r4, #0
 8001772:	d00b      	beq.n	800178c <__ledf2+0x7c>
 8001774:	4281      	cmp	r1, r0
 8001776:	d014      	beq.n	80017a2 <__ledf2+0x92>
 8001778:	2002      	movs	r0, #2
 800177a:	3901      	subs	r1, #1
 800177c:	4008      	ands	r0, r1
 800177e:	3801      	subs	r0, #1
 8001780:	e000      	b.n	8001784 <__ledf2+0x74>
 8001782:	2002      	movs	r0, #2
 8001784:	bcc0      	pop	{r6, r7}
 8001786:	46b9      	mov	r9, r7
 8001788:	46b0      	mov	r8, r6
 800178a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800178c:	2800      	cmp	r0, #0
 800178e:	d1f9      	bne.n	8001784 <__ledf2+0x74>
 8001790:	2001      	movs	r0, #1
 8001792:	4240      	negs	r0, r0
 8001794:	e7f6      	b.n	8001784 <__ledf2+0x74>
 8001796:	2b00      	cmp	r3, #0
 8001798:	d1ec      	bne.n	8001774 <__ledf2+0x64>
 800179a:	464c      	mov	r4, r9
 800179c:	4326      	orrs	r6, r4
 800179e:	d1e9      	bne.n	8001774 <__ledf2+0x64>
 80017a0:	e7ea      	b.n	8001778 <__ledf2+0x68>
 80017a2:	429a      	cmp	r2, r3
 80017a4:	dd04      	ble.n	80017b0 <__ledf2+0xa0>
 80017a6:	4243      	negs	r3, r0
 80017a8:	4158      	adcs	r0, r3
 80017aa:	0040      	lsls	r0, r0, #1
 80017ac:	3801      	subs	r0, #1
 80017ae:	e7e9      	b.n	8001784 <__ledf2+0x74>
 80017b0:	429a      	cmp	r2, r3
 80017b2:	dbeb      	blt.n	800178c <__ledf2+0x7c>
 80017b4:	454f      	cmp	r7, r9
 80017b6:	d8df      	bhi.n	8001778 <__ledf2+0x68>
 80017b8:	d006      	beq.n	80017c8 <__ledf2+0xb8>
 80017ba:	2000      	movs	r0, #0
 80017bc:	454f      	cmp	r7, r9
 80017be:	d2e1      	bcs.n	8001784 <__ledf2+0x74>
 80017c0:	2900      	cmp	r1, #0
 80017c2:	d0e5      	beq.n	8001790 <__ledf2+0x80>
 80017c4:	0008      	movs	r0, r1
 80017c6:	e7dd      	b.n	8001784 <__ledf2+0x74>
 80017c8:	45c4      	cmp	ip, r8
 80017ca:	d8d5      	bhi.n	8001778 <__ledf2+0x68>
 80017cc:	2000      	movs	r0, #0
 80017ce:	45c4      	cmp	ip, r8
 80017d0:	d2d8      	bcs.n	8001784 <__ledf2+0x74>
 80017d2:	e7f5      	b.n	80017c0 <__ledf2+0xb0>
 80017d4:	000007ff 	.word	0x000007ff

080017d8 <__aeabi_dmul>:
 80017d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017da:	4657      	mov	r7, sl
 80017dc:	464e      	mov	r6, r9
 80017de:	4645      	mov	r5, r8
 80017e0:	46de      	mov	lr, fp
 80017e2:	b5e0      	push	{r5, r6, r7, lr}
 80017e4:	4698      	mov	r8, r3
 80017e6:	030c      	lsls	r4, r1, #12
 80017e8:	004b      	lsls	r3, r1, #1
 80017ea:	0006      	movs	r6, r0
 80017ec:	4692      	mov	sl, r2
 80017ee:	b087      	sub	sp, #28
 80017f0:	0b24      	lsrs	r4, r4, #12
 80017f2:	0d5b      	lsrs	r3, r3, #21
 80017f4:	0fcf      	lsrs	r7, r1, #31
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d100      	bne.n	80017fc <__aeabi_dmul+0x24>
 80017fa:	e15c      	b.n	8001ab6 <__aeabi_dmul+0x2de>
 80017fc:	4ad9      	ldr	r2, [pc, #868]	; (8001b64 <__aeabi_dmul+0x38c>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d100      	bne.n	8001804 <__aeabi_dmul+0x2c>
 8001802:	e175      	b.n	8001af0 <__aeabi_dmul+0x318>
 8001804:	0f42      	lsrs	r2, r0, #29
 8001806:	00e4      	lsls	r4, r4, #3
 8001808:	4314      	orrs	r4, r2
 800180a:	2280      	movs	r2, #128	; 0x80
 800180c:	0412      	lsls	r2, r2, #16
 800180e:	4314      	orrs	r4, r2
 8001810:	4ad5      	ldr	r2, [pc, #852]	; (8001b68 <__aeabi_dmul+0x390>)
 8001812:	00c5      	lsls	r5, r0, #3
 8001814:	4694      	mov	ip, r2
 8001816:	4463      	add	r3, ip
 8001818:	9300      	str	r3, [sp, #0]
 800181a:	2300      	movs	r3, #0
 800181c:	4699      	mov	r9, r3
 800181e:	469b      	mov	fp, r3
 8001820:	4643      	mov	r3, r8
 8001822:	4642      	mov	r2, r8
 8001824:	031e      	lsls	r6, r3, #12
 8001826:	0fd2      	lsrs	r2, r2, #31
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	4650      	mov	r0, sl
 800182c:	4690      	mov	r8, r2
 800182e:	0b36      	lsrs	r6, r6, #12
 8001830:	0d5b      	lsrs	r3, r3, #21
 8001832:	d100      	bne.n	8001836 <__aeabi_dmul+0x5e>
 8001834:	e120      	b.n	8001a78 <__aeabi_dmul+0x2a0>
 8001836:	4acb      	ldr	r2, [pc, #812]	; (8001b64 <__aeabi_dmul+0x38c>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d100      	bne.n	800183e <__aeabi_dmul+0x66>
 800183c:	e162      	b.n	8001b04 <__aeabi_dmul+0x32c>
 800183e:	49ca      	ldr	r1, [pc, #808]	; (8001b68 <__aeabi_dmul+0x390>)
 8001840:	0f42      	lsrs	r2, r0, #29
 8001842:	468c      	mov	ip, r1
 8001844:	9900      	ldr	r1, [sp, #0]
 8001846:	4463      	add	r3, ip
 8001848:	00f6      	lsls	r6, r6, #3
 800184a:	468c      	mov	ip, r1
 800184c:	4316      	orrs	r6, r2
 800184e:	2280      	movs	r2, #128	; 0x80
 8001850:	449c      	add	ip, r3
 8001852:	0412      	lsls	r2, r2, #16
 8001854:	4663      	mov	r3, ip
 8001856:	4316      	orrs	r6, r2
 8001858:	00c2      	lsls	r2, r0, #3
 800185a:	2000      	movs	r0, #0
 800185c:	9300      	str	r3, [sp, #0]
 800185e:	9900      	ldr	r1, [sp, #0]
 8001860:	4643      	mov	r3, r8
 8001862:	3101      	adds	r1, #1
 8001864:	468c      	mov	ip, r1
 8001866:	4649      	mov	r1, r9
 8001868:	407b      	eors	r3, r7
 800186a:	9301      	str	r3, [sp, #4]
 800186c:	290f      	cmp	r1, #15
 800186e:	d826      	bhi.n	80018be <__aeabi_dmul+0xe6>
 8001870:	4bbe      	ldr	r3, [pc, #760]	; (8001b6c <__aeabi_dmul+0x394>)
 8001872:	0089      	lsls	r1, r1, #2
 8001874:	5859      	ldr	r1, [r3, r1]
 8001876:	468f      	mov	pc, r1
 8001878:	4643      	mov	r3, r8
 800187a:	9301      	str	r3, [sp, #4]
 800187c:	0034      	movs	r4, r6
 800187e:	0015      	movs	r5, r2
 8001880:	4683      	mov	fp, r0
 8001882:	465b      	mov	r3, fp
 8001884:	2b02      	cmp	r3, #2
 8001886:	d016      	beq.n	80018b6 <__aeabi_dmul+0xde>
 8001888:	2b03      	cmp	r3, #3
 800188a:	d100      	bne.n	800188e <__aeabi_dmul+0xb6>
 800188c:	e203      	b.n	8001c96 <__aeabi_dmul+0x4be>
 800188e:	2b01      	cmp	r3, #1
 8001890:	d000      	beq.n	8001894 <__aeabi_dmul+0xbc>
 8001892:	e0cd      	b.n	8001a30 <__aeabi_dmul+0x258>
 8001894:	2200      	movs	r2, #0
 8001896:	2400      	movs	r4, #0
 8001898:	2500      	movs	r5, #0
 800189a:	9b01      	ldr	r3, [sp, #4]
 800189c:	0512      	lsls	r2, r2, #20
 800189e:	4322      	orrs	r2, r4
 80018a0:	07db      	lsls	r3, r3, #31
 80018a2:	431a      	orrs	r2, r3
 80018a4:	0028      	movs	r0, r5
 80018a6:	0011      	movs	r1, r2
 80018a8:	b007      	add	sp, #28
 80018aa:	bcf0      	pop	{r4, r5, r6, r7}
 80018ac:	46bb      	mov	fp, r7
 80018ae:	46b2      	mov	sl, r6
 80018b0:	46a9      	mov	r9, r5
 80018b2:	46a0      	mov	r8, r4
 80018b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018b6:	2400      	movs	r4, #0
 80018b8:	2500      	movs	r5, #0
 80018ba:	4aaa      	ldr	r2, [pc, #680]	; (8001b64 <__aeabi_dmul+0x38c>)
 80018bc:	e7ed      	b.n	800189a <__aeabi_dmul+0xc2>
 80018be:	0c28      	lsrs	r0, r5, #16
 80018c0:	042d      	lsls	r5, r5, #16
 80018c2:	0c2d      	lsrs	r5, r5, #16
 80018c4:	002b      	movs	r3, r5
 80018c6:	0c11      	lsrs	r1, r2, #16
 80018c8:	0412      	lsls	r2, r2, #16
 80018ca:	0c12      	lsrs	r2, r2, #16
 80018cc:	4353      	muls	r3, r2
 80018ce:	4698      	mov	r8, r3
 80018d0:	0013      	movs	r3, r2
 80018d2:	002f      	movs	r7, r5
 80018d4:	4343      	muls	r3, r0
 80018d6:	4699      	mov	r9, r3
 80018d8:	434f      	muls	r7, r1
 80018da:	444f      	add	r7, r9
 80018dc:	46bb      	mov	fp, r7
 80018de:	4647      	mov	r7, r8
 80018e0:	000b      	movs	r3, r1
 80018e2:	0c3f      	lsrs	r7, r7, #16
 80018e4:	46ba      	mov	sl, r7
 80018e6:	4343      	muls	r3, r0
 80018e8:	44da      	add	sl, fp
 80018ea:	9302      	str	r3, [sp, #8]
 80018ec:	45d1      	cmp	r9, sl
 80018ee:	d904      	bls.n	80018fa <__aeabi_dmul+0x122>
 80018f0:	2780      	movs	r7, #128	; 0x80
 80018f2:	027f      	lsls	r7, r7, #9
 80018f4:	46b9      	mov	r9, r7
 80018f6:	444b      	add	r3, r9
 80018f8:	9302      	str	r3, [sp, #8]
 80018fa:	4653      	mov	r3, sl
 80018fc:	0c1b      	lsrs	r3, r3, #16
 80018fe:	469b      	mov	fp, r3
 8001900:	4653      	mov	r3, sl
 8001902:	041f      	lsls	r7, r3, #16
 8001904:	4643      	mov	r3, r8
 8001906:	041b      	lsls	r3, r3, #16
 8001908:	0c1b      	lsrs	r3, r3, #16
 800190a:	4698      	mov	r8, r3
 800190c:	003b      	movs	r3, r7
 800190e:	4443      	add	r3, r8
 8001910:	9304      	str	r3, [sp, #16]
 8001912:	0c33      	lsrs	r3, r6, #16
 8001914:	0436      	lsls	r6, r6, #16
 8001916:	0c36      	lsrs	r6, r6, #16
 8001918:	4698      	mov	r8, r3
 800191a:	0033      	movs	r3, r6
 800191c:	4343      	muls	r3, r0
 800191e:	4699      	mov	r9, r3
 8001920:	4643      	mov	r3, r8
 8001922:	4343      	muls	r3, r0
 8001924:	002f      	movs	r7, r5
 8001926:	469a      	mov	sl, r3
 8001928:	4643      	mov	r3, r8
 800192a:	4377      	muls	r7, r6
 800192c:	435d      	muls	r5, r3
 800192e:	0c38      	lsrs	r0, r7, #16
 8001930:	444d      	add	r5, r9
 8001932:	1945      	adds	r5, r0, r5
 8001934:	45a9      	cmp	r9, r5
 8001936:	d903      	bls.n	8001940 <__aeabi_dmul+0x168>
 8001938:	2380      	movs	r3, #128	; 0x80
 800193a:	025b      	lsls	r3, r3, #9
 800193c:	4699      	mov	r9, r3
 800193e:	44ca      	add	sl, r9
 8001940:	043f      	lsls	r7, r7, #16
 8001942:	0c28      	lsrs	r0, r5, #16
 8001944:	0c3f      	lsrs	r7, r7, #16
 8001946:	042d      	lsls	r5, r5, #16
 8001948:	19ed      	adds	r5, r5, r7
 800194a:	0c27      	lsrs	r7, r4, #16
 800194c:	0424      	lsls	r4, r4, #16
 800194e:	0c24      	lsrs	r4, r4, #16
 8001950:	0003      	movs	r3, r0
 8001952:	0020      	movs	r0, r4
 8001954:	4350      	muls	r0, r2
 8001956:	437a      	muls	r2, r7
 8001958:	4691      	mov	r9, r2
 800195a:	003a      	movs	r2, r7
 800195c:	4453      	add	r3, sl
 800195e:	9305      	str	r3, [sp, #20]
 8001960:	0c03      	lsrs	r3, r0, #16
 8001962:	469a      	mov	sl, r3
 8001964:	434a      	muls	r2, r1
 8001966:	4361      	muls	r1, r4
 8001968:	4449      	add	r1, r9
 800196a:	4451      	add	r1, sl
 800196c:	44ab      	add	fp, r5
 800196e:	4589      	cmp	r9, r1
 8001970:	d903      	bls.n	800197a <__aeabi_dmul+0x1a2>
 8001972:	2380      	movs	r3, #128	; 0x80
 8001974:	025b      	lsls	r3, r3, #9
 8001976:	4699      	mov	r9, r3
 8001978:	444a      	add	r2, r9
 800197a:	0400      	lsls	r0, r0, #16
 800197c:	0c0b      	lsrs	r3, r1, #16
 800197e:	0c00      	lsrs	r0, r0, #16
 8001980:	0409      	lsls	r1, r1, #16
 8001982:	1809      	adds	r1, r1, r0
 8001984:	0020      	movs	r0, r4
 8001986:	4699      	mov	r9, r3
 8001988:	4643      	mov	r3, r8
 800198a:	4370      	muls	r0, r6
 800198c:	435c      	muls	r4, r3
 800198e:	437e      	muls	r6, r7
 8001990:	435f      	muls	r7, r3
 8001992:	0c03      	lsrs	r3, r0, #16
 8001994:	4698      	mov	r8, r3
 8001996:	19a4      	adds	r4, r4, r6
 8001998:	4444      	add	r4, r8
 800199a:	444a      	add	r2, r9
 800199c:	9703      	str	r7, [sp, #12]
 800199e:	42a6      	cmp	r6, r4
 80019a0:	d904      	bls.n	80019ac <__aeabi_dmul+0x1d4>
 80019a2:	2380      	movs	r3, #128	; 0x80
 80019a4:	025b      	lsls	r3, r3, #9
 80019a6:	4698      	mov	r8, r3
 80019a8:	4447      	add	r7, r8
 80019aa:	9703      	str	r7, [sp, #12]
 80019ac:	0423      	lsls	r3, r4, #16
 80019ae:	9e02      	ldr	r6, [sp, #8]
 80019b0:	469a      	mov	sl, r3
 80019b2:	9b05      	ldr	r3, [sp, #20]
 80019b4:	445e      	add	r6, fp
 80019b6:	4698      	mov	r8, r3
 80019b8:	42ae      	cmp	r6, r5
 80019ba:	41ad      	sbcs	r5, r5
 80019bc:	1876      	adds	r6, r6, r1
 80019be:	428e      	cmp	r6, r1
 80019c0:	4189      	sbcs	r1, r1
 80019c2:	0400      	lsls	r0, r0, #16
 80019c4:	0c00      	lsrs	r0, r0, #16
 80019c6:	4450      	add	r0, sl
 80019c8:	4440      	add	r0, r8
 80019ca:	426d      	negs	r5, r5
 80019cc:	1947      	adds	r7, r0, r5
 80019ce:	46b8      	mov	r8, r7
 80019d0:	4693      	mov	fp, r2
 80019d2:	4249      	negs	r1, r1
 80019d4:	4689      	mov	r9, r1
 80019d6:	44c3      	add	fp, r8
 80019d8:	44d9      	add	r9, fp
 80019da:	4298      	cmp	r0, r3
 80019dc:	4180      	sbcs	r0, r0
 80019de:	45a8      	cmp	r8, r5
 80019e0:	41ad      	sbcs	r5, r5
 80019e2:	4593      	cmp	fp, r2
 80019e4:	4192      	sbcs	r2, r2
 80019e6:	4589      	cmp	r9, r1
 80019e8:	4189      	sbcs	r1, r1
 80019ea:	426d      	negs	r5, r5
 80019ec:	4240      	negs	r0, r0
 80019ee:	4328      	orrs	r0, r5
 80019f0:	0c24      	lsrs	r4, r4, #16
 80019f2:	4252      	negs	r2, r2
 80019f4:	4249      	negs	r1, r1
 80019f6:	430a      	orrs	r2, r1
 80019f8:	9b03      	ldr	r3, [sp, #12]
 80019fa:	1900      	adds	r0, r0, r4
 80019fc:	1880      	adds	r0, r0, r2
 80019fe:	18c7      	adds	r7, r0, r3
 8001a00:	464b      	mov	r3, r9
 8001a02:	0ddc      	lsrs	r4, r3, #23
 8001a04:	9b04      	ldr	r3, [sp, #16]
 8001a06:	0275      	lsls	r5, r6, #9
 8001a08:	431d      	orrs	r5, r3
 8001a0a:	1e6a      	subs	r2, r5, #1
 8001a0c:	4195      	sbcs	r5, r2
 8001a0e:	464b      	mov	r3, r9
 8001a10:	0df6      	lsrs	r6, r6, #23
 8001a12:	027f      	lsls	r7, r7, #9
 8001a14:	4335      	orrs	r5, r6
 8001a16:	025a      	lsls	r2, r3, #9
 8001a18:	433c      	orrs	r4, r7
 8001a1a:	4315      	orrs	r5, r2
 8001a1c:	01fb      	lsls	r3, r7, #7
 8001a1e:	d400      	bmi.n	8001a22 <__aeabi_dmul+0x24a>
 8001a20:	e11c      	b.n	8001c5c <__aeabi_dmul+0x484>
 8001a22:	2101      	movs	r1, #1
 8001a24:	086a      	lsrs	r2, r5, #1
 8001a26:	400d      	ands	r5, r1
 8001a28:	4315      	orrs	r5, r2
 8001a2a:	07e2      	lsls	r2, r4, #31
 8001a2c:	4315      	orrs	r5, r2
 8001a2e:	0864      	lsrs	r4, r4, #1
 8001a30:	494f      	ldr	r1, [pc, #316]	; (8001b70 <__aeabi_dmul+0x398>)
 8001a32:	4461      	add	r1, ip
 8001a34:	2900      	cmp	r1, #0
 8001a36:	dc00      	bgt.n	8001a3a <__aeabi_dmul+0x262>
 8001a38:	e0b0      	b.n	8001b9c <__aeabi_dmul+0x3c4>
 8001a3a:	076b      	lsls	r3, r5, #29
 8001a3c:	d009      	beq.n	8001a52 <__aeabi_dmul+0x27a>
 8001a3e:	220f      	movs	r2, #15
 8001a40:	402a      	ands	r2, r5
 8001a42:	2a04      	cmp	r2, #4
 8001a44:	d005      	beq.n	8001a52 <__aeabi_dmul+0x27a>
 8001a46:	1d2a      	adds	r2, r5, #4
 8001a48:	42aa      	cmp	r2, r5
 8001a4a:	41ad      	sbcs	r5, r5
 8001a4c:	426d      	negs	r5, r5
 8001a4e:	1964      	adds	r4, r4, r5
 8001a50:	0015      	movs	r5, r2
 8001a52:	01e3      	lsls	r3, r4, #7
 8001a54:	d504      	bpl.n	8001a60 <__aeabi_dmul+0x288>
 8001a56:	2180      	movs	r1, #128	; 0x80
 8001a58:	4a46      	ldr	r2, [pc, #280]	; (8001b74 <__aeabi_dmul+0x39c>)
 8001a5a:	00c9      	lsls	r1, r1, #3
 8001a5c:	4014      	ands	r4, r2
 8001a5e:	4461      	add	r1, ip
 8001a60:	4a45      	ldr	r2, [pc, #276]	; (8001b78 <__aeabi_dmul+0x3a0>)
 8001a62:	4291      	cmp	r1, r2
 8001a64:	dd00      	ble.n	8001a68 <__aeabi_dmul+0x290>
 8001a66:	e726      	b.n	80018b6 <__aeabi_dmul+0xde>
 8001a68:	0762      	lsls	r2, r4, #29
 8001a6a:	08ed      	lsrs	r5, r5, #3
 8001a6c:	0264      	lsls	r4, r4, #9
 8001a6e:	0549      	lsls	r1, r1, #21
 8001a70:	4315      	orrs	r5, r2
 8001a72:	0b24      	lsrs	r4, r4, #12
 8001a74:	0d4a      	lsrs	r2, r1, #21
 8001a76:	e710      	b.n	800189a <__aeabi_dmul+0xc2>
 8001a78:	4652      	mov	r2, sl
 8001a7a:	4332      	orrs	r2, r6
 8001a7c:	d100      	bne.n	8001a80 <__aeabi_dmul+0x2a8>
 8001a7e:	e07f      	b.n	8001b80 <__aeabi_dmul+0x3a8>
 8001a80:	2e00      	cmp	r6, #0
 8001a82:	d100      	bne.n	8001a86 <__aeabi_dmul+0x2ae>
 8001a84:	e0dc      	b.n	8001c40 <__aeabi_dmul+0x468>
 8001a86:	0030      	movs	r0, r6
 8001a88:	f000 fdd6 	bl	8002638 <__clzsi2>
 8001a8c:	0002      	movs	r2, r0
 8001a8e:	3a0b      	subs	r2, #11
 8001a90:	231d      	movs	r3, #29
 8001a92:	0001      	movs	r1, r0
 8001a94:	1a9b      	subs	r3, r3, r2
 8001a96:	4652      	mov	r2, sl
 8001a98:	3908      	subs	r1, #8
 8001a9a:	40da      	lsrs	r2, r3
 8001a9c:	408e      	lsls	r6, r1
 8001a9e:	4316      	orrs	r6, r2
 8001aa0:	4652      	mov	r2, sl
 8001aa2:	408a      	lsls	r2, r1
 8001aa4:	9b00      	ldr	r3, [sp, #0]
 8001aa6:	4935      	ldr	r1, [pc, #212]	; (8001b7c <__aeabi_dmul+0x3a4>)
 8001aa8:	1a18      	subs	r0, r3, r0
 8001aaa:	0003      	movs	r3, r0
 8001aac:	468c      	mov	ip, r1
 8001aae:	4463      	add	r3, ip
 8001ab0:	2000      	movs	r0, #0
 8001ab2:	9300      	str	r3, [sp, #0]
 8001ab4:	e6d3      	b.n	800185e <__aeabi_dmul+0x86>
 8001ab6:	0025      	movs	r5, r4
 8001ab8:	4305      	orrs	r5, r0
 8001aba:	d04a      	beq.n	8001b52 <__aeabi_dmul+0x37a>
 8001abc:	2c00      	cmp	r4, #0
 8001abe:	d100      	bne.n	8001ac2 <__aeabi_dmul+0x2ea>
 8001ac0:	e0b0      	b.n	8001c24 <__aeabi_dmul+0x44c>
 8001ac2:	0020      	movs	r0, r4
 8001ac4:	f000 fdb8 	bl	8002638 <__clzsi2>
 8001ac8:	0001      	movs	r1, r0
 8001aca:	0002      	movs	r2, r0
 8001acc:	390b      	subs	r1, #11
 8001ace:	231d      	movs	r3, #29
 8001ad0:	0010      	movs	r0, r2
 8001ad2:	1a5b      	subs	r3, r3, r1
 8001ad4:	0031      	movs	r1, r6
 8001ad6:	0035      	movs	r5, r6
 8001ad8:	3808      	subs	r0, #8
 8001ada:	4084      	lsls	r4, r0
 8001adc:	40d9      	lsrs	r1, r3
 8001ade:	4085      	lsls	r5, r0
 8001ae0:	430c      	orrs	r4, r1
 8001ae2:	4826      	ldr	r0, [pc, #152]	; (8001b7c <__aeabi_dmul+0x3a4>)
 8001ae4:	1a83      	subs	r3, r0, r2
 8001ae6:	9300      	str	r3, [sp, #0]
 8001ae8:	2300      	movs	r3, #0
 8001aea:	4699      	mov	r9, r3
 8001aec:	469b      	mov	fp, r3
 8001aee:	e697      	b.n	8001820 <__aeabi_dmul+0x48>
 8001af0:	0005      	movs	r5, r0
 8001af2:	4325      	orrs	r5, r4
 8001af4:	d126      	bne.n	8001b44 <__aeabi_dmul+0x36c>
 8001af6:	2208      	movs	r2, #8
 8001af8:	9300      	str	r3, [sp, #0]
 8001afa:	2302      	movs	r3, #2
 8001afc:	2400      	movs	r4, #0
 8001afe:	4691      	mov	r9, r2
 8001b00:	469b      	mov	fp, r3
 8001b02:	e68d      	b.n	8001820 <__aeabi_dmul+0x48>
 8001b04:	4652      	mov	r2, sl
 8001b06:	9b00      	ldr	r3, [sp, #0]
 8001b08:	4332      	orrs	r2, r6
 8001b0a:	d110      	bne.n	8001b2e <__aeabi_dmul+0x356>
 8001b0c:	4915      	ldr	r1, [pc, #84]	; (8001b64 <__aeabi_dmul+0x38c>)
 8001b0e:	2600      	movs	r6, #0
 8001b10:	468c      	mov	ip, r1
 8001b12:	4463      	add	r3, ip
 8001b14:	4649      	mov	r1, r9
 8001b16:	9300      	str	r3, [sp, #0]
 8001b18:	2302      	movs	r3, #2
 8001b1a:	4319      	orrs	r1, r3
 8001b1c:	4689      	mov	r9, r1
 8001b1e:	2002      	movs	r0, #2
 8001b20:	e69d      	b.n	800185e <__aeabi_dmul+0x86>
 8001b22:	465b      	mov	r3, fp
 8001b24:	9701      	str	r7, [sp, #4]
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d000      	beq.n	8001b2c <__aeabi_dmul+0x354>
 8001b2a:	e6ad      	b.n	8001888 <__aeabi_dmul+0xb0>
 8001b2c:	e6c3      	b.n	80018b6 <__aeabi_dmul+0xde>
 8001b2e:	4a0d      	ldr	r2, [pc, #52]	; (8001b64 <__aeabi_dmul+0x38c>)
 8001b30:	2003      	movs	r0, #3
 8001b32:	4694      	mov	ip, r2
 8001b34:	4463      	add	r3, ip
 8001b36:	464a      	mov	r2, r9
 8001b38:	9300      	str	r3, [sp, #0]
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	431a      	orrs	r2, r3
 8001b3e:	4691      	mov	r9, r2
 8001b40:	4652      	mov	r2, sl
 8001b42:	e68c      	b.n	800185e <__aeabi_dmul+0x86>
 8001b44:	220c      	movs	r2, #12
 8001b46:	9300      	str	r3, [sp, #0]
 8001b48:	2303      	movs	r3, #3
 8001b4a:	0005      	movs	r5, r0
 8001b4c:	4691      	mov	r9, r2
 8001b4e:	469b      	mov	fp, r3
 8001b50:	e666      	b.n	8001820 <__aeabi_dmul+0x48>
 8001b52:	2304      	movs	r3, #4
 8001b54:	4699      	mov	r9, r3
 8001b56:	2300      	movs	r3, #0
 8001b58:	9300      	str	r3, [sp, #0]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	2400      	movs	r4, #0
 8001b5e:	469b      	mov	fp, r3
 8001b60:	e65e      	b.n	8001820 <__aeabi_dmul+0x48>
 8001b62:	46c0      	nop			; (mov r8, r8)
 8001b64:	000007ff 	.word	0x000007ff
 8001b68:	fffffc01 	.word	0xfffffc01
 8001b6c:	0800a6e0 	.word	0x0800a6e0
 8001b70:	000003ff 	.word	0x000003ff
 8001b74:	feffffff 	.word	0xfeffffff
 8001b78:	000007fe 	.word	0x000007fe
 8001b7c:	fffffc0d 	.word	0xfffffc0d
 8001b80:	4649      	mov	r1, r9
 8001b82:	2301      	movs	r3, #1
 8001b84:	4319      	orrs	r1, r3
 8001b86:	4689      	mov	r9, r1
 8001b88:	2600      	movs	r6, #0
 8001b8a:	2001      	movs	r0, #1
 8001b8c:	e667      	b.n	800185e <__aeabi_dmul+0x86>
 8001b8e:	2300      	movs	r3, #0
 8001b90:	2480      	movs	r4, #128	; 0x80
 8001b92:	2500      	movs	r5, #0
 8001b94:	4a43      	ldr	r2, [pc, #268]	; (8001ca4 <__aeabi_dmul+0x4cc>)
 8001b96:	9301      	str	r3, [sp, #4]
 8001b98:	0324      	lsls	r4, r4, #12
 8001b9a:	e67e      	b.n	800189a <__aeabi_dmul+0xc2>
 8001b9c:	2001      	movs	r0, #1
 8001b9e:	1a40      	subs	r0, r0, r1
 8001ba0:	2838      	cmp	r0, #56	; 0x38
 8001ba2:	dd00      	ble.n	8001ba6 <__aeabi_dmul+0x3ce>
 8001ba4:	e676      	b.n	8001894 <__aeabi_dmul+0xbc>
 8001ba6:	281f      	cmp	r0, #31
 8001ba8:	dd5b      	ble.n	8001c62 <__aeabi_dmul+0x48a>
 8001baa:	221f      	movs	r2, #31
 8001bac:	0023      	movs	r3, r4
 8001bae:	4252      	negs	r2, r2
 8001bb0:	1a51      	subs	r1, r2, r1
 8001bb2:	40cb      	lsrs	r3, r1
 8001bb4:	0019      	movs	r1, r3
 8001bb6:	2820      	cmp	r0, #32
 8001bb8:	d003      	beq.n	8001bc2 <__aeabi_dmul+0x3ea>
 8001bba:	4a3b      	ldr	r2, [pc, #236]	; (8001ca8 <__aeabi_dmul+0x4d0>)
 8001bbc:	4462      	add	r2, ip
 8001bbe:	4094      	lsls	r4, r2
 8001bc0:	4325      	orrs	r5, r4
 8001bc2:	1e6a      	subs	r2, r5, #1
 8001bc4:	4195      	sbcs	r5, r2
 8001bc6:	002a      	movs	r2, r5
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	2107      	movs	r1, #7
 8001bcc:	000d      	movs	r5, r1
 8001bce:	2400      	movs	r4, #0
 8001bd0:	4015      	ands	r5, r2
 8001bd2:	4211      	tst	r1, r2
 8001bd4:	d05b      	beq.n	8001c8e <__aeabi_dmul+0x4b6>
 8001bd6:	210f      	movs	r1, #15
 8001bd8:	2400      	movs	r4, #0
 8001bda:	4011      	ands	r1, r2
 8001bdc:	2904      	cmp	r1, #4
 8001bde:	d053      	beq.n	8001c88 <__aeabi_dmul+0x4b0>
 8001be0:	1d11      	adds	r1, r2, #4
 8001be2:	4291      	cmp	r1, r2
 8001be4:	4192      	sbcs	r2, r2
 8001be6:	4252      	negs	r2, r2
 8001be8:	18a4      	adds	r4, r4, r2
 8001bea:	000a      	movs	r2, r1
 8001bec:	0223      	lsls	r3, r4, #8
 8001bee:	d54b      	bpl.n	8001c88 <__aeabi_dmul+0x4b0>
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	2400      	movs	r4, #0
 8001bf4:	2500      	movs	r5, #0
 8001bf6:	e650      	b.n	800189a <__aeabi_dmul+0xc2>
 8001bf8:	2380      	movs	r3, #128	; 0x80
 8001bfa:	031b      	lsls	r3, r3, #12
 8001bfc:	421c      	tst	r4, r3
 8001bfe:	d009      	beq.n	8001c14 <__aeabi_dmul+0x43c>
 8001c00:	421e      	tst	r6, r3
 8001c02:	d107      	bne.n	8001c14 <__aeabi_dmul+0x43c>
 8001c04:	4333      	orrs	r3, r6
 8001c06:	031c      	lsls	r4, r3, #12
 8001c08:	4643      	mov	r3, r8
 8001c0a:	0015      	movs	r5, r2
 8001c0c:	0b24      	lsrs	r4, r4, #12
 8001c0e:	4a25      	ldr	r2, [pc, #148]	; (8001ca4 <__aeabi_dmul+0x4cc>)
 8001c10:	9301      	str	r3, [sp, #4]
 8001c12:	e642      	b.n	800189a <__aeabi_dmul+0xc2>
 8001c14:	2280      	movs	r2, #128	; 0x80
 8001c16:	0312      	lsls	r2, r2, #12
 8001c18:	4314      	orrs	r4, r2
 8001c1a:	0324      	lsls	r4, r4, #12
 8001c1c:	4a21      	ldr	r2, [pc, #132]	; (8001ca4 <__aeabi_dmul+0x4cc>)
 8001c1e:	0b24      	lsrs	r4, r4, #12
 8001c20:	9701      	str	r7, [sp, #4]
 8001c22:	e63a      	b.n	800189a <__aeabi_dmul+0xc2>
 8001c24:	f000 fd08 	bl	8002638 <__clzsi2>
 8001c28:	0001      	movs	r1, r0
 8001c2a:	0002      	movs	r2, r0
 8001c2c:	3115      	adds	r1, #21
 8001c2e:	3220      	adds	r2, #32
 8001c30:	291c      	cmp	r1, #28
 8001c32:	dc00      	bgt.n	8001c36 <__aeabi_dmul+0x45e>
 8001c34:	e74b      	b.n	8001ace <__aeabi_dmul+0x2f6>
 8001c36:	0034      	movs	r4, r6
 8001c38:	3808      	subs	r0, #8
 8001c3a:	2500      	movs	r5, #0
 8001c3c:	4084      	lsls	r4, r0
 8001c3e:	e750      	b.n	8001ae2 <__aeabi_dmul+0x30a>
 8001c40:	f000 fcfa 	bl	8002638 <__clzsi2>
 8001c44:	0003      	movs	r3, r0
 8001c46:	001a      	movs	r2, r3
 8001c48:	3215      	adds	r2, #21
 8001c4a:	3020      	adds	r0, #32
 8001c4c:	2a1c      	cmp	r2, #28
 8001c4e:	dc00      	bgt.n	8001c52 <__aeabi_dmul+0x47a>
 8001c50:	e71e      	b.n	8001a90 <__aeabi_dmul+0x2b8>
 8001c52:	4656      	mov	r6, sl
 8001c54:	3b08      	subs	r3, #8
 8001c56:	2200      	movs	r2, #0
 8001c58:	409e      	lsls	r6, r3
 8001c5a:	e723      	b.n	8001aa4 <__aeabi_dmul+0x2cc>
 8001c5c:	9b00      	ldr	r3, [sp, #0]
 8001c5e:	469c      	mov	ip, r3
 8001c60:	e6e6      	b.n	8001a30 <__aeabi_dmul+0x258>
 8001c62:	4912      	ldr	r1, [pc, #72]	; (8001cac <__aeabi_dmul+0x4d4>)
 8001c64:	0022      	movs	r2, r4
 8001c66:	4461      	add	r1, ip
 8001c68:	002e      	movs	r6, r5
 8001c6a:	408d      	lsls	r5, r1
 8001c6c:	408a      	lsls	r2, r1
 8001c6e:	40c6      	lsrs	r6, r0
 8001c70:	1e69      	subs	r1, r5, #1
 8001c72:	418d      	sbcs	r5, r1
 8001c74:	4332      	orrs	r2, r6
 8001c76:	432a      	orrs	r2, r5
 8001c78:	40c4      	lsrs	r4, r0
 8001c7a:	0753      	lsls	r3, r2, #29
 8001c7c:	d0b6      	beq.n	8001bec <__aeabi_dmul+0x414>
 8001c7e:	210f      	movs	r1, #15
 8001c80:	4011      	ands	r1, r2
 8001c82:	2904      	cmp	r1, #4
 8001c84:	d1ac      	bne.n	8001be0 <__aeabi_dmul+0x408>
 8001c86:	e7b1      	b.n	8001bec <__aeabi_dmul+0x414>
 8001c88:	0765      	lsls	r5, r4, #29
 8001c8a:	0264      	lsls	r4, r4, #9
 8001c8c:	0b24      	lsrs	r4, r4, #12
 8001c8e:	08d2      	lsrs	r2, r2, #3
 8001c90:	4315      	orrs	r5, r2
 8001c92:	2200      	movs	r2, #0
 8001c94:	e601      	b.n	800189a <__aeabi_dmul+0xc2>
 8001c96:	2280      	movs	r2, #128	; 0x80
 8001c98:	0312      	lsls	r2, r2, #12
 8001c9a:	4314      	orrs	r4, r2
 8001c9c:	0324      	lsls	r4, r4, #12
 8001c9e:	4a01      	ldr	r2, [pc, #4]	; (8001ca4 <__aeabi_dmul+0x4cc>)
 8001ca0:	0b24      	lsrs	r4, r4, #12
 8001ca2:	e5fa      	b.n	800189a <__aeabi_dmul+0xc2>
 8001ca4:	000007ff 	.word	0x000007ff
 8001ca8:	0000043e 	.word	0x0000043e
 8001cac:	0000041e 	.word	0x0000041e

08001cb0 <__aeabi_dsub>:
 8001cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cb2:	4657      	mov	r7, sl
 8001cb4:	464e      	mov	r6, r9
 8001cb6:	4645      	mov	r5, r8
 8001cb8:	46de      	mov	lr, fp
 8001cba:	b5e0      	push	{r5, r6, r7, lr}
 8001cbc:	001e      	movs	r6, r3
 8001cbe:	0017      	movs	r7, r2
 8001cc0:	004a      	lsls	r2, r1, #1
 8001cc2:	030b      	lsls	r3, r1, #12
 8001cc4:	0d52      	lsrs	r2, r2, #21
 8001cc6:	0a5b      	lsrs	r3, r3, #9
 8001cc8:	4690      	mov	r8, r2
 8001cca:	0f42      	lsrs	r2, r0, #29
 8001ccc:	431a      	orrs	r2, r3
 8001cce:	0fcd      	lsrs	r5, r1, #31
 8001cd0:	4ccd      	ldr	r4, [pc, #820]	; (8002008 <__aeabi_dsub+0x358>)
 8001cd2:	0331      	lsls	r1, r6, #12
 8001cd4:	00c3      	lsls	r3, r0, #3
 8001cd6:	4694      	mov	ip, r2
 8001cd8:	0070      	lsls	r0, r6, #1
 8001cda:	0f7a      	lsrs	r2, r7, #29
 8001cdc:	0a49      	lsrs	r1, r1, #9
 8001cde:	00ff      	lsls	r7, r7, #3
 8001ce0:	469a      	mov	sl, r3
 8001ce2:	46b9      	mov	r9, r7
 8001ce4:	0d40      	lsrs	r0, r0, #21
 8001ce6:	0ff6      	lsrs	r6, r6, #31
 8001ce8:	4311      	orrs	r1, r2
 8001cea:	42a0      	cmp	r0, r4
 8001cec:	d100      	bne.n	8001cf0 <__aeabi_dsub+0x40>
 8001cee:	e0b1      	b.n	8001e54 <__aeabi_dsub+0x1a4>
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	4056      	eors	r6, r2
 8001cf4:	46b3      	mov	fp, r6
 8001cf6:	42b5      	cmp	r5, r6
 8001cf8:	d100      	bne.n	8001cfc <__aeabi_dsub+0x4c>
 8001cfa:	e088      	b.n	8001e0e <__aeabi_dsub+0x15e>
 8001cfc:	4642      	mov	r2, r8
 8001cfe:	1a12      	subs	r2, r2, r0
 8001d00:	2a00      	cmp	r2, #0
 8001d02:	dc00      	bgt.n	8001d06 <__aeabi_dsub+0x56>
 8001d04:	e0ae      	b.n	8001e64 <__aeabi_dsub+0x1b4>
 8001d06:	2800      	cmp	r0, #0
 8001d08:	d100      	bne.n	8001d0c <__aeabi_dsub+0x5c>
 8001d0a:	e0c1      	b.n	8001e90 <__aeabi_dsub+0x1e0>
 8001d0c:	48be      	ldr	r0, [pc, #760]	; (8002008 <__aeabi_dsub+0x358>)
 8001d0e:	4580      	cmp	r8, r0
 8001d10:	d100      	bne.n	8001d14 <__aeabi_dsub+0x64>
 8001d12:	e151      	b.n	8001fb8 <__aeabi_dsub+0x308>
 8001d14:	2080      	movs	r0, #128	; 0x80
 8001d16:	0400      	lsls	r0, r0, #16
 8001d18:	4301      	orrs	r1, r0
 8001d1a:	2a38      	cmp	r2, #56	; 0x38
 8001d1c:	dd00      	ble.n	8001d20 <__aeabi_dsub+0x70>
 8001d1e:	e17b      	b.n	8002018 <__aeabi_dsub+0x368>
 8001d20:	2a1f      	cmp	r2, #31
 8001d22:	dd00      	ble.n	8001d26 <__aeabi_dsub+0x76>
 8001d24:	e1ee      	b.n	8002104 <__aeabi_dsub+0x454>
 8001d26:	2020      	movs	r0, #32
 8001d28:	003e      	movs	r6, r7
 8001d2a:	1a80      	subs	r0, r0, r2
 8001d2c:	000c      	movs	r4, r1
 8001d2e:	40d6      	lsrs	r6, r2
 8001d30:	40d1      	lsrs	r1, r2
 8001d32:	4087      	lsls	r7, r0
 8001d34:	4662      	mov	r2, ip
 8001d36:	4084      	lsls	r4, r0
 8001d38:	1a52      	subs	r2, r2, r1
 8001d3a:	1e78      	subs	r0, r7, #1
 8001d3c:	4187      	sbcs	r7, r0
 8001d3e:	4694      	mov	ip, r2
 8001d40:	4334      	orrs	r4, r6
 8001d42:	4327      	orrs	r7, r4
 8001d44:	1bdc      	subs	r4, r3, r7
 8001d46:	42a3      	cmp	r3, r4
 8001d48:	419b      	sbcs	r3, r3
 8001d4a:	4662      	mov	r2, ip
 8001d4c:	425b      	negs	r3, r3
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	4699      	mov	r9, r3
 8001d52:	464b      	mov	r3, r9
 8001d54:	021b      	lsls	r3, r3, #8
 8001d56:	d400      	bmi.n	8001d5a <__aeabi_dsub+0xaa>
 8001d58:	e118      	b.n	8001f8c <__aeabi_dsub+0x2dc>
 8001d5a:	464b      	mov	r3, r9
 8001d5c:	0258      	lsls	r0, r3, #9
 8001d5e:	0a43      	lsrs	r3, r0, #9
 8001d60:	4699      	mov	r9, r3
 8001d62:	464b      	mov	r3, r9
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d100      	bne.n	8001d6a <__aeabi_dsub+0xba>
 8001d68:	e137      	b.n	8001fda <__aeabi_dsub+0x32a>
 8001d6a:	4648      	mov	r0, r9
 8001d6c:	f000 fc64 	bl	8002638 <__clzsi2>
 8001d70:	0001      	movs	r1, r0
 8001d72:	3908      	subs	r1, #8
 8001d74:	2320      	movs	r3, #32
 8001d76:	0022      	movs	r2, r4
 8001d78:	4648      	mov	r0, r9
 8001d7a:	1a5b      	subs	r3, r3, r1
 8001d7c:	40da      	lsrs	r2, r3
 8001d7e:	4088      	lsls	r0, r1
 8001d80:	408c      	lsls	r4, r1
 8001d82:	4643      	mov	r3, r8
 8001d84:	4310      	orrs	r0, r2
 8001d86:	4588      	cmp	r8, r1
 8001d88:	dd00      	ble.n	8001d8c <__aeabi_dsub+0xdc>
 8001d8a:	e136      	b.n	8001ffa <__aeabi_dsub+0x34a>
 8001d8c:	1ac9      	subs	r1, r1, r3
 8001d8e:	1c4b      	adds	r3, r1, #1
 8001d90:	2b1f      	cmp	r3, #31
 8001d92:	dd00      	ble.n	8001d96 <__aeabi_dsub+0xe6>
 8001d94:	e0ea      	b.n	8001f6c <__aeabi_dsub+0x2bc>
 8001d96:	2220      	movs	r2, #32
 8001d98:	0026      	movs	r6, r4
 8001d9a:	1ad2      	subs	r2, r2, r3
 8001d9c:	0001      	movs	r1, r0
 8001d9e:	4094      	lsls	r4, r2
 8001da0:	40de      	lsrs	r6, r3
 8001da2:	40d8      	lsrs	r0, r3
 8001da4:	2300      	movs	r3, #0
 8001da6:	4091      	lsls	r1, r2
 8001da8:	1e62      	subs	r2, r4, #1
 8001daa:	4194      	sbcs	r4, r2
 8001dac:	4681      	mov	r9, r0
 8001dae:	4698      	mov	r8, r3
 8001db0:	4331      	orrs	r1, r6
 8001db2:	430c      	orrs	r4, r1
 8001db4:	0763      	lsls	r3, r4, #29
 8001db6:	d009      	beq.n	8001dcc <__aeabi_dsub+0x11c>
 8001db8:	230f      	movs	r3, #15
 8001dba:	4023      	ands	r3, r4
 8001dbc:	2b04      	cmp	r3, #4
 8001dbe:	d005      	beq.n	8001dcc <__aeabi_dsub+0x11c>
 8001dc0:	1d23      	adds	r3, r4, #4
 8001dc2:	42a3      	cmp	r3, r4
 8001dc4:	41a4      	sbcs	r4, r4
 8001dc6:	4264      	negs	r4, r4
 8001dc8:	44a1      	add	r9, r4
 8001dca:	001c      	movs	r4, r3
 8001dcc:	464b      	mov	r3, r9
 8001dce:	021b      	lsls	r3, r3, #8
 8001dd0:	d400      	bmi.n	8001dd4 <__aeabi_dsub+0x124>
 8001dd2:	e0de      	b.n	8001f92 <__aeabi_dsub+0x2e2>
 8001dd4:	4641      	mov	r1, r8
 8001dd6:	4b8c      	ldr	r3, [pc, #560]	; (8002008 <__aeabi_dsub+0x358>)
 8001dd8:	3101      	adds	r1, #1
 8001dda:	4299      	cmp	r1, r3
 8001ddc:	d100      	bne.n	8001de0 <__aeabi_dsub+0x130>
 8001dde:	e0e7      	b.n	8001fb0 <__aeabi_dsub+0x300>
 8001de0:	464b      	mov	r3, r9
 8001de2:	488a      	ldr	r0, [pc, #552]	; (800200c <__aeabi_dsub+0x35c>)
 8001de4:	08e4      	lsrs	r4, r4, #3
 8001de6:	4003      	ands	r3, r0
 8001de8:	0018      	movs	r0, r3
 8001dea:	0549      	lsls	r1, r1, #21
 8001dec:	075b      	lsls	r3, r3, #29
 8001dee:	0240      	lsls	r0, r0, #9
 8001df0:	4323      	orrs	r3, r4
 8001df2:	0d4a      	lsrs	r2, r1, #21
 8001df4:	0b04      	lsrs	r4, r0, #12
 8001df6:	0512      	lsls	r2, r2, #20
 8001df8:	07ed      	lsls	r5, r5, #31
 8001dfa:	4322      	orrs	r2, r4
 8001dfc:	432a      	orrs	r2, r5
 8001dfe:	0018      	movs	r0, r3
 8001e00:	0011      	movs	r1, r2
 8001e02:	bcf0      	pop	{r4, r5, r6, r7}
 8001e04:	46bb      	mov	fp, r7
 8001e06:	46b2      	mov	sl, r6
 8001e08:	46a9      	mov	r9, r5
 8001e0a:	46a0      	mov	r8, r4
 8001e0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e0e:	4642      	mov	r2, r8
 8001e10:	1a12      	subs	r2, r2, r0
 8001e12:	2a00      	cmp	r2, #0
 8001e14:	dd52      	ble.n	8001ebc <__aeabi_dsub+0x20c>
 8001e16:	2800      	cmp	r0, #0
 8001e18:	d100      	bne.n	8001e1c <__aeabi_dsub+0x16c>
 8001e1a:	e09c      	b.n	8001f56 <__aeabi_dsub+0x2a6>
 8001e1c:	45a0      	cmp	r8, r4
 8001e1e:	d100      	bne.n	8001e22 <__aeabi_dsub+0x172>
 8001e20:	e0ca      	b.n	8001fb8 <__aeabi_dsub+0x308>
 8001e22:	2080      	movs	r0, #128	; 0x80
 8001e24:	0400      	lsls	r0, r0, #16
 8001e26:	4301      	orrs	r1, r0
 8001e28:	2a38      	cmp	r2, #56	; 0x38
 8001e2a:	dd00      	ble.n	8001e2e <__aeabi_dsub+0x17e>
 8001e2c:	e149      	b.n	80020c2 <__aeabi_dsub+0x412>
 8001e2e:	2a1f      	cmp	r2, #31
 8001e30:	dc00      	bgt.n	8001e34 <__aeabi_dsub+0x184>
 8001e32:	e197      	b.n	8002164 <__aeabi_dsub+0x4b4>
 8001e34:	0010      	movs	r0, r2
 8001e36:	000e      	movs	r6, r1
 8001e38:	3820      	subs	r0, #32
 8001e3a:	40c6      	lsrs	r6, r0
 8001e3c:	2a20      	cmp	r2, #32
 8001e3e:	d004      	beq.n	8001e4a <__aeabi_dsub+0x19a>
 8001e40:	2040      	movs	r0, #64	; 0x40
 8001e42:	1a82      	subs	r2, r0, r2
 8001e44:	4091      	lsls	r1, r2
 8001e46:	430f      	orrs	r7, r1
 8001e48:	46b9      	mov	r9, r7
 8001e4a:	464c      	mov	r4, r9
 8001e4c:	1e62      	subs	r2, r4, #1
 8001e4e:	4194      	sbcs	r4, r2
 8001e50:	4334      	orrs	r4, r6
 8001e52:	e13a      	b.n	80020ca <__aeabi_dsub+0x41a>
 8001e54:	000a      	movs	r2, r1
 8001e56:	433a      	orrs	r2, r7
 8001e58:	d028      	beq.n	8001eac <__aeabi_dsub+0x1fc>
 8001e5a:	46b3      	mov	fp, r6
 8001e5c:	42b5      	cmp	r5, r6
 8001e5e:	d02b      	beq.n	8001eb8 <__aeabi_dsub+0x208>
 8001e60:	4a6b      	ldr	r2, [pc, #428]	; (8002010 <__aeabi_dsub+0x360>)
 8001e62:	4442      	add	r2, r8
 8001e64:	2a00      	cmp	r2, #0
 8001e66:	d05d      	beq.n	8001f24 <__aeabi_dsub+0x274>
 8001e68:	4642      	mov	r2, r8
 8001e6a:	4644      	mov	r4, r8
 8001e6c:	1a82      	subs	r2, r0, r2
 8001e6e:	2c00      	cmp	r4, #0
 8001e70:	d000      	beq.n	8001e74 <__aeabi_dsub+0x1c4>
 8001e72:	e0f5      	b.n	8002060 <__aeabi_dsub+0x3b0>
 8001e74:	4665      	mov	r5, ip
 8001e76:	431d      	orrs	r5, r3
 8001e78:	d100      	bne.n	8001e7c <__aeabi_dsub+0x1cc>
 8001e7a:	e19c      	b.n	80021b6 <__aeabi_dsub+0x506>
 8001e7c:	1e55      	subs	r5, r2, #1
 8001e7e:	2a01      	cmp	r2, #1
 8001e80:	d100      	bne.n	8001e84 <__aeabi_dsub+0x1d4>
 8001e82:	e1fb      	b.n	800227c <__aeabi_dsub+0x5cc>
 8001e84:	4c60      	ldr	r4, [pc, #384]	; (8002008 <__aeabi_dsub+0x358>)
 8001e86:	42a2      	cmp	r2, r4
 8001e88:	d100      	bne.n	8001e8c <__aeabi_dsub+0x1dc>
 8001e8a:	e1bd      	b.n	8002208 <__aeabi_dsub+0x558>
 8001e8c:	002a      	movs	r2, r5
 8001e8e:	e0f0      	b.n	8002072 <__aeabi_dsub+0x3c2>
 8001e90:	0008      	movs	r0, r1
 8001e92:	4338      	orrs	r0, r7
 8001e94:	d100      	bne.n	8001e98 <__aeabi_dsub+0x1e8>
 8001e96:	e0c3      	b.n	8002020 <__aeabi_dsub+0x370>
 8001e98:	1e50      	subs	r0, r2, #1
 8001e9a:	2a01      	cmp	r2, #1
 8001e9c:	d100      	bne.n	8001ea0 <__aeabi_dsub+0x1f0>
 8001e9e:	e1a8      	b.n	80021f2 <__aeabi_dsub+0x542>
 8001ea0:	4c59      	ldr	r4, [pc, #356]	; (8002008 <__aeabi_dsub+0x358>)
 8001ea2:	42a2      	cmp	r2, r4
 8001ea4:	d100      	bne.n	8001ea8 <__aeabi_dsub+0x1f8>
 8001ea6:	e087      	b.n	8001fb8 <__aeabi_dsub+0x308>
 8001ea8:	0002      	movs	r2, r0
 8001eaa:	e736      	b.n	8001d1a <__aeabi_dsub+0x6a>
 8001eac:	2201      	movs	r2, #1
 8001eae:	4056      	eors	r6, r2
 8001eb0:	46b3      	mov	fp, r6
 8001eb2:	42b5      	cmp	r5, r6
 8001eb4:	d000      	beq.n	8001eb8 <__aeabi_dsub+0x208>
 8001eb6:	e721      	b.n	8001cfc <__aeabi_dsub+0x4c>
 8001eb8:	4a55      	ldr	r2, [pc, #340]	; (8002010 <__aeabi_dsub+0x360>)
 8001eba:	4442      	add	r2, r8
 8001ebc:	2a00      	cmp	r2, #0
 8001ebe:	d100      	bne.n	8001ec2 <__aeabi_dsub+0x212>
 8001ec0:	e0b5      	b.n	800202e <__aeabi_dsub+0x37e>
 8001ec2:	4642      	mov	r2, r8
 8001ec4:	4644      	mov	r4, r8
 8001ec6:	1a82      	subs	r2, r0, r2
 8001ec8:	2c00      	cmp	r4, #0
 8001eca:	d100      	bne.n	8001ece <__aeabi_dsub+0x21e>
 8001ecc:	e138      	b.n	8002140 <__aeabi_dsub+0x490>
 8001ece:	4e4e      	ldr	r6, [pc, #312]	; (8002008 <__aeabi_dsub+0x358>)
 8001ed0:	42b0      	cmp	r0, r6
 8001ed2:	d100      	bne.n	8001ed6 <__aeabi_dsub+0x226>
 8001ed4:	e1de      	b.n	8002294 <__aeabi_dsub+0x5e4>
 8001ed6:	2680      	movs	r6, #128	; 0x80
 8001ed8:	4664      	mov	r4, ip
 8001eda:	0436      	lsls	r6, r6, #16
 8001edc:	4334      	orrs	r4, r6
 8001ede:	46a4      	mov	ip, r4
 8001ee0:	2a38      	cmp	r2, #56	; 0x38
 8001ee2:	dd00      	ble.n	8001ee6 <__aeabi_dsub+0x236>
 8001ee4:	e196      	b.n	8002214 <__aeabi_dsub+0x564>
 8001ee6:	2a1f      	cmp	r2, #31
 8001ee8:	dd00      	ble.n	8001eec <__aeabi_dsub+0x23c>
 8001eea:	e224      	b.n	8002336 <__aeabi_dsub+0x686>
 8001eec:	2620      	movs	r6, #32
 8001eee:	1ab4      	subs	r4, r6, r2
 8001ef0:	46a2      	mov	sl, r4
 8001ef2:	4664      	mov	r4, ip
 8001ef4:	4656      	mov	r6, sl
 8001ef6:	40b4      	lsls	r4, r6
 8001ef8:	46a1      	mov	r9, r4
 8001efa:	001c      	movs	r4, r3
 8001efc:	464e      	mov	r6, r9
 8001efe:	40d4      	lsrs	r4, r2
 8001f00:	4326      	orrs	r6, r4
 8001f02:	0034      	movs	r4, r6
 8001f04:	4656      	mov	r6, sl
 8001f06:	40b3      	lsls	r3, r6
 8001f08:	1e5e      	subs	r6, r3, #1
 8001f0a:	41b3      	sbcs	r3, r6
 8001f0c:	431c      	orrs	r4, r3
 8001f0e:	4663      	mov	r3, ip
 8001f10:	40d3      	lsrs	r3, r2
 8001f12:	18c9      	adds	r1, r1, r3
 8001f14:	19e4      	adds	r4, r4, r7
 8001f16:	42bc      	cmp	r4, r7
 8001f18:	41bf      	sbcs	r7, r7
 8001f1a:	427f      	negs	r7, r7
 8001f1c:	46b9      	mov	r9, r7
 8001f1e:	4680      	mov	r8, r0
 8001f20:	4489      	add	r9, r1
 8001f22:	e0d8      	b.n	80020d6 <__aeabi_dsub+0x426>
 8001f24:	4640      	mov	r0, r8
 8001f26:	4c3b      	ldr	r4, [pc, #236]	; (8002014 <__aeabi_dsub+0x364>)
 8001f28:	3001      	adds	r0, #1
 8001f2a:	4220      	tst	r0, r4
 8001f2c:	d000      	beq.n	8001f30 <__aeabi_dsub+0x280>
 8001f2e:	e0b4      	b.n	800209a <__aeabi_dsub+0x3ea>
 8001f30:	4640      	mov	r0, r8
 8001f32:	2800      	cmp	r0, #0
 8001f34:	d000      	beq.n	8001f38 <__aeabi_dsub+0x288>
 8001f36:	e144      	b.n	80021c2 <__aeabi_dsub+0x512>
 8001f38:	4660      	mov	r0, ip
 8001f3a:	4318      	orrs	r0, r3
 8001f3c:	d100      	bne.n	8001f40 <__aeabi_dsub+0x290>
 8001f3e:	e190      	b.n	8002262 <__aeabi_dsub+0x5b2>
 8001f40:	0008      	movs	r0, r1
 8001f42:	4338      	orrs	r0, r7
 8001f44:	d000      	beq.n	8001f48 <__aeabi_dsub+0x298>
 8001f46:	e1aa      	b.n	800229e <__aeabi_dsub+0x5ee>
 8001f48:	4661      	mov	r1, ip
 8001f4a:	08db      	lsrs	r3, r3, #3
 8001f4c:	0749      	lsls	r1, r1, #29
 8001f4e:	430b      	orrs	r3, r1
 8001f50:	4661      	mov	r1, ip
 8001f52:	08cc      	lsrs	r4, r1, #3
 8001f54:	e027      	b.n	8001fa6 <__aeabi_dsub+0x2f6>
 8001f56:	0008      	movs	r0, r1
 8001f58:	4338      	orrs	r0, r7
 8001f5a:	d061      	beq.n	8002020 <__aeabi_dsub+0x370>
 8001f5c:	1e50      	subs	r0, r2, #1
 8001f5e:	2a01      	cmp	r2, #1
 8001f60:	d100      	bne.n	8001f64 <__aeabi_dsub+0x2b4>
 8001f62:	e139      	b.n	80021d8 <__aeabi_dsub+0x528>
 8001f64:	42a2      	cmp	r2, r4
 8001f66:	d027      	beq.n	8001fb8 <__aeabi_dsub+0x308>
 8001f68:	0002      	movs	r2, r0
 8001f6a:	e75d      	b.n	8001e28 <__aeabi_dsub+0x178>
 8001f6c:	0002      	movs	r2, r0
 8001f6e:	391f      	subs	r1, #31
 8001f70:	40ca      	lsrs	r2, r1
 8001f72:	0011      	movs	r1, r2
 8001f74:	2b20      	cmp	r3, #32
 8001f76:	d003      	beq.n	8001f80 <__aeabi_dsub+0x2d0>
 8001f78:	2240      	movs	r2, #64	; 0x40
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	4098      	lsls	r0, r3
 8001f7e:	4304      	orrs	r4, r0
 8001f80:	1e63      	subs	r3, r4, #1
 8001f82:	419c      	sbcs	r4, r3
 8001f84:	2300      	movs	r3, #0
 8001f86:	4699      	mov	r9, r3
 8001f88:	4698      	mov	r8, r3
 8001f8a:	430c      	orrs	r4, r1
 8001f8c:	0763      	lsls	r3, r4, #29
 8001f8e:	d000      	beq.n	8001f92 <__aeabi_dsub+0x2e2>
 8001f90:	e712      	b.n	8001db8 <__aeabi_dsub+0x108>
 8001f92:	464b      	mov	r3, r9
 8001f94:	464a      	mov	r2, r9
 8001f96:	08e4      	lsrs	r4, r4, #3
 8001f98:	075b      	lsls	r3, r3, #29
 8001f9a:	4323      	orrs	r3, r4
 8001f9c:	08d4      	lsrs	r4, r2, #3
 8001f9e:	4642      	mov	r2, r8
 8001fa0:	4919      	ldr	r1, [pc, #100]	; (8002008 <__aeabi_dsub+0x358>)
 8001fa2:	428a      	cmp	r2, r1
 8001fa4:	d00e      	beq.n	8001fc4 <__aeabi_dsub+0x314>
 8001fa6:	0324      	lsls	r4, r4, #12
 8001fa8:	0552      	lsls	r2, r2, #21
 8001faa:	0b24      	lsrs	r4, r4, #12
 8001fac:	0d52      	lsrs	r2, r2, #21
 8001fae:	e722      	b.n	8001df6 <__aeabi_dsub+0x146>
 8001fb0:	000a      	movs	r2, r1
 8001fb2:	2400      	movs	r4, #0
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	e71e      	b.n	8001df6 <__aeabi_dsub+0x146>
 8001fb8:	08db      	lsrs	r3, r3, #3
 8001fba:	4662      	mov	r2, ip
 8001fbc:	0752      	lsls	r2, r2, #29
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	4662      	mov	r2, ip
 8001fc2:	08d4      	lsrs	r4, r2, #3
 8001fc4:	001a      	movs	r2, r3
 8001fc6:	4322      	orrs	r2, r4
 8001fc8:	d100      	bne.n	8001fcc <__aeabi_dsub+0x31c>
 8001fca:	e1fc      	b.n	80023c6 <__aeabi_dsub+0x716>
 8001fcc:	2280      	movs	r2, #128	; 0x80
 8001fce:	0312      	lsls	r2, r2, #12
 8001fd0:	4314      	orrs	r4, r2
 8001fd2:	0324      	lsls	r4, r4, #12
 8001fd4:	4a0c      	ldr	r2, [pc, #48]	; (8002008 <__aeabi_dsub+0x358>)
 8001fd6:	0b24      	lsrs	r4, r4, #12
 8001fd8:	e70d      	b.n	8001df6 <__aeabi_dsub+0x146>
 8001fda:	0020      	movs	r0, r4
 8001fdc:	f000 fb2c 	bl	8002638 <__clzsi2>
 8001fe0:	0001      	movs	r1, r0
 8001fe2:	3118      	adds	r1, #24
 8001fe4:	291f      	cmp	r1, #31
 8001fe6:	dc00      	bgt.n	8001fea <__aeabi_dsub+0x33a>
 8001fe8:	e6c4      	b.n	8001d74 <__aeabi_dsub+0xc4>
 8001fea:	3808      	subs	r0, #8
 8001fec:	4084      	lsls	r4, r0
 8001fee:	4643      	mov	r3, r8
 8001ff0:	0020      	movs	r0, r4
 8001ff2:	2400      	movs	r4, #0
 8001ff4:	4588      	cmp	r8, r1
 8001ff6:	dc00      	bgt.n	8001ffa <__aeabi_dsub+0x34a>
 8001ff8:	e6c8      	b.n	8001d8c <__aeabi_dsub+0xdc>
 8001ffa:	4a04      	ldr	r2, [pc, #16]	; (800200c <__aeabi_dsub+0x35c>)
 8001ffc:	1a5b      	subs	r3, r3, r1
 8001ffe:	4010      	ands	r0, r2
 8002000:	4698      	mov	r8, r3
 8002002:	4681      	mov	r9, r0
 8002004:	e6d6      	b.n	8001db4 <__aeabi_dsub+0x104>
 8002006:	46c0      	nop			; (mov r8, r8)
 8002008:	000007ff 	.word	0x000007ff
 800200c:	ff7fffff 	.word	0xff7fffff
 8002010:	fffff801 	.word	0xfffff801
 8002014:	000007fe 	.word	0x000007fe
 8002018:	430f      	orrs	r7, r1
 800201a:	1e7a      	subs	r2, r7, #1
 800201c:	4197      	sbcs	r7, r2
 800201e:	e691      	b.n	8001d44 <__aeabi_dsub+0x94>
 8002020:	4661      	mov	r1, ip
 8002022:	08db      	lsrs	r3, r3, #3
 8002024:	0749      	lsls	r1, r1, #29
 8002026:	430b      	orrs	r3, r1
 8002028:	4661      	mov	r1, ip
 800202a:	08cc      	lsrs	r4, r1, #3
 800202c:	e7b8      	b.n	8001fa0 <__aeabi_dsub+0x2f0>
 800202e:	4640      	mov	r0, r8
 8002030:	4cd3      	ldr	r4, [pc, #844]	; (8002380 <__aeabi_dsub+0x6d0>)
 8002032:	3001      	adds	r0, #1
 8002034:	4220      	tst	r0, r4
 8002036:	d000      	beq.n	800203a <__aeabi_dsub+0x38a>
 8002038:	e0a2      	b.n	8002180 <__aeabi_dsub+0x4d0>
 800203a:	4640      	mov	r0, r8
 800203c:	2800      	cmp	r0, #0
 800203e:	d000      	beq.n	8002042 <__aeabi_dsub+0x392>
 8002040:	e101      	b.n	8002246 <__aeabi_dsub+0x596>
 8002042:	4660      	mov	r0, ip
 8002044:	4318      	orrs	r0, r3
 8002046:	d100      	bne.n	800204a <__aeabi_dsub+0x39a>
 8002048:	e15e      	b.n	8002308 <__aeabi_dsub+0x658>
 800204a:	0008      	movs	r0, r1
 800204c:	4338      	orrs	r0, r7
 800204e:	d000      	beq.n	8002052 <__aeabi_dsub+0x3a2>
 8002050:	e15f      	b.n	8002312 <__aeabi_dsub+0x662>
 8002052:	4661      	mov	r1, ip
 8002054:	08db      	lsrs	r3, r3, #3
 8002056:	0749      	lsls	r1, r1, #29
 8002058:	430b      	orrs	r3, r1
 800205a:	4661      	mov	r1, ip
 800205c:	08cc      	lsrs	r4, r1, #3
 800205e:	e7a2      	b.n	8001fa6 <__aeabi_dsub+0x2f6>
 8002060:	4dc8      	ldr	r5, [pc, #800]	; (8002384 <__aeabi_dsub+0x6d4>)
 8002062:	42a8      	cmp	r0, r5
 8002064:	d100      	bne.n	8002068 <__aeabi_dsub+0x3b8>
 8002066:	e0cf      	b.n	8002208 <__aeabi_dsub+0x558>
 8002068:	2580      	movs	r5, #128	; 0x80
 800206a:	4664      	mov	r4, ip
 800206c:	042d      	lsls	r5, r5, #16
 800206e:	432c      	orrs	r4, r5
 8002070:	46a4      	mov	ip, r4
 8002072:	2a38      	cmp	r2, #56	; 0x38
 8002074:	dc56      	bgt.n	8002124 <__aeabi_dsub+0x474>
 8002076:	2a1f      	cmp	r2, #31
 8002078:	dd00      	ble.n	800207c <__aeabi_dsub+0x3cc>
 800207a:	e0d1      	b.n	8002220 <__aeabi_dsub+0x570>
 800207c:	2520      	movs	r5, #32
 800207e:	001e      	movs	r6, r3
 8002080:	1aad      	subs	r5, r5, r2
 8002082:	4664      	mov	r4, ip
 8002084:	40ab      	lsls	r3, r5
 8002086:	40ac      	lsls	r4, r5
 8002088:	40d6      	lsrs	r6, r2
 800208a:	1e5d      	subs	r5, r3, #1
 800208c:	41ab      	sbcs	r3, r5
 800208e:	4334      	orrs	r4, r6
 8002090:	4323      	orrs	r3, r4
 8002092:	4664      	mov	r4, ip
 8002094:	40d4      	lsrs	r4, r2
 8002096:	1b09      	subs	r1, r1, r4
 8002098:	e049      	b.n	800212e <__aeabi_dsub+0x47e>
 800209a:	4660      	mov	r0, ip
 800209c:	1bdc      	subs	r4, r3, r7
 800209e:	1a46      	subs	r6, r0, r1
 80020a0:	42a3      	cmp	r3, r4
 80020a2:	4180      	sbcs	r0, r0
 80020a4:	4240      	negs	r0, r0
 80020a6:	4681      	mov	r9, r0
 80020a8:	0030      	movs	r0, r6
 80020aa:	464e      	mov	r6, r9
 80020ac:	1b80      	subs	r0, r0, r6
 80020ae:	4681      	mov	r9, r0
 80020b0:	0200      	lsls	r0, r0, #8
 80020b2:	d476      	bmi.n	80021a2 <__aeabi_dsub+0x4f2>
 80020b4:	464b      	mov	r3, r9
 80020b6:	4323      	orrs	r3, r4
 80020b8:	d000      	beq.n	80020bc <__aeabi_dsub+0x40c>
 80020ba:	e652      	b.n	8001d62 <__aeabi_dsub+0xb2>
 80020bc:	2400      	movs	r4, #0
 80020be:	2500      	movs	r5, #0
 80020c0:	e771      	b.n	8001fa6 <__aeabi_dsub+0x2f6>
 80020c2:	4339      	orrs	r1, r7
 80020c4:	000c      	movs	r4, r1
 80020c6:	1e62      	subs	r2, r4, #1
 80020c8:	4194      	sbcs	r4, r2
 80020ca:	18e4      	adds	r4, r4, r3
 80020cc:	429c      	cmp	r4, r3
 80020ce:	419b      	sbcs	r3, r3
 80020d0:	425b      	negs	r3, r3
 80020d2:	4463      	add	r3, ip
 80020d4:	4699      	mov	r9, r3
 80020d6:	464b      	mov	r3, r9
 80020d8:	021b      	lsls	r3, r3, #8
 80020da:	d400      	bmi.n	80020de <__aeabi_dsub+0x42e>
 80020dc:	e756      	b.n	8001f8c <__aeabi_dsub+0x2dc>
 80020de:	2301      	movs	r3, #1
 80020e0:	469c      	mov	ip, r3
 80020e2:	4ba8      	ldr	r3, [pc, #672]	; (8002384 <__aeabi_dsub+0x6d4>)
 80020e4:	44e0      	add	r8, ip
 80020e6:	4598      	cmp	r8, r3
 80020e8:	d038      	beq.n	800215c <__aeabi_dsub+0x4ac>
 80020ea:	464b      	mov	r3, r9
 80020ec:	48a6      	ldr	r0, [pc, #664]	; (8002388 <__aeabi_dsub+0x6d8>)
 80020ee:	2201      	movs	r2, #1
 80020f0:	4003      	ands	r3, r0
 80020f2:	0018      	movs	r0, r3
 80020f4:	0863      	lsrs	r3, r4, #1
 80020f6:	4014      	ands	r4, r2
 80020f8:	431c      	orrs	r4, r3
 80020fa:	07c3      	lsls	r3, r0, #31
 80020fc:	431c      	orrs	r4, r3
 80020fe:	0843      	lsrs	r3, r0, #1
 8002100:	4699      	mov	r9, r3
 8002102:	e657      	b.n	8001db4 <__aeabi_dsub+0x104>
 8002104:	0010      	movs	r0, r2
 8002106:	000e      	movs	r6, r1
 8002108:	3820      	subs	r0, #32
 800210a:	40c6      	lsrs	r6, r0
 800210c:	2a20      	cmp	r2, #32
 800210e:	d004      	beq.n	800211a <__aeabi_dsub+0x46a>
 8002110:	2040      	movs	r0, #64	; 0x40
 8002112:	1a82      	subs	r2, r0, r2
 8002114:	4091      	lsls	r1, r2
 8002116:	430f      	orrs	r7, r1
 8002118:	46b9      	mov	r9, r7
 800211a:	464f      	mov	r7, r9
 800211c:	1e7a      	subs	r2, r7, #1
 800211e:	4197      	sbcs	r7, r2
 8002120:	4337      	orrs	r7, r6
 8002122:	e60f      	b.n	8001d44 <__aeabi_dsub+0x94>
 8002124:	4662      	mov	r2, ip
 8002126:	431a      	orrs	r2, r3
 8002128:	0013      	movs	r3, r2
 800212a:	1e5a      	subs	r2, r3, #1
 800212c:	4193      	sbcs	r3, r2
 800212e:	1afc      	subs	r4, r7, r3
 8002130:	42a7      	cmp	r7, r4
 8002132:	41bf      	sbcs	r7, r7
 8002134:	427f      	negs	r7, r7
 8002136:	1bcb      	subs	r3, r1, r7
 8002138:	4699      	mov	r9, r3
 800213a:	465d      	mov	r5, fp
 800213c:	4680      	mov	r8, r0
 800213e:	e608      	b.n	8001d52 <__aeabi_dsub+0xa2>
 8002140:	4666      	mov	r6, ip
 8002142:	431e      	orrs	r6, r3
 8002144:	d100      	bne.n	8002148 <__aeabi_dsub+0x498>
 8002146:	e0be      	b.n	80022c6 <__aeabi_dsub+0x616>
 8002148:	1e56      	subs	r6, r2, #1
 800214a:	2a01      	cmp	r2, #1
 800214c:	d100      	bne.n	8002150 <__aeabi_dsub+0x4a0>
 800214e:	e109      	b.n	8002364 <__aeabi_dsub+0x6b4>
 8002150:	4c8c      	ldr	r4, [pc, #560]	; (8002384 <__aeabi_dsub+0x6d4>)
 8002152:	42a2      	cmp	r2, r4
 8002154:	d100      	bne.n	8002158 <__aeabi_dsub+0x4a8>
 8002156:	e119      	b.n	800238c <__aeabi_dsub+0x6dc>
 8002158:	0032      	movs	r2, r6
 800215a:	e6c1      	b.n	8001ee0 <__aeabi_dsub+0x230>
 800215c:	4642      	mov	r2, r8
 800215e:	2400      	movs	r4, #0
 8002160:	2300      	movs	r3, #0
 8002162:	e648      	b.n	8001df6 <__aeabi_dsub+0x146>
 8002164:	2020      	movs	r0, #32
 8002166:	000c      	movs	r4, r1
 8002168:	1a80      	subs	r0, r0, r2
 800216a:	003e      	movs	r6, r7
 800216c:	4087      	lsls	r7, r0
 800216e:	4084      	lsls	r4, r0
 8002170:	40d6      	lsrs	r6, r2
 8002172:	1e78      	subs	r0, r7, #1
 8002174:	4187      	sbcs	r7, r0
 8002176:	40d1      	lsrs	r1, r2
 8002178:	4334      	orrs	r4, r6
 800217a:	433c      	orrs	r4, r7
 800217c:	448c      	add	ip, r1
 800217e:	e7a4      	b.n	80020ca <__aeabi_dsub+0x41a>
 8002180:	4a80      	ldr	r2, [pc, #512]	; (8002384 <__aeabi_dsub+0x6d4>)
 8002182:	4290      	cmp	r0, r2
 8002184:	d100      	bne.n	8002188 <__aeabi_dsub+0x4d8>
 8002186:	e0e9      	b.n	800235c <__aeabi_dsub+0x6ac>
 8002188:	19df      	adds	r7, r3, r7
 800218a:	429f      	cmp	r7, r3
 800218c:	419b      	sbcs	r3, r3
 800218e:	4461      	add	r1, ip
 8002190:	425b      	negs	r3, r3
 8002192:	18c9      	adds	r1, r1, r3
 8002194:	07cc      	lsls	r4, r1, #31
 8002196:	087f      	lsrs	r7, r7, #1
 8002198:	084b      	lsrs	r3, r1, #1
 800219a:	4699      	mov	r9, r3
 800219c:	4680      	mov	r8, r0
 800219e:	433c      	orrs	r4, r7
 80021a0:	e6f4      	b.n	8001f8c <__aeabi_dsub+0x2dc>
 80021a2:	1afc      	subs	r4, r7, r3
 80021a4:	42a7      	cmp	r7, r4
 80021a6:	41bf      	sbcs	r7, r7
 80021a8:	4663      	mov	r3, ip
 80021aa:	427f      	negs	r7, r7
 80021ac:	1ac9      	subs	r1, r1, r3
 80021ae:	1bcb      	subs	r3, r1, r7
 80021b0:	4699      	mov	r9, r3
 80021b2:	465d      	mov	r5, fp
 80021b4:	e5d5      	b.n	8001d62 <__aeabi_dsub+0xb2>
 80021b6:	08ff      	lsrs	r7, r7, #3
 80021b8:	074b      	lsls	r3, r1, #29
 80021ba:	465d      	mov	r5, fp
 80021bc:	433b      	orrs	r3, r7
 80021be:	08cc      	lsrs	r4, r1, #3
 80021c0:	e6ee      	b.n	8001fa0 <__aeabi_dsub+0x2f0>
 80021c2:	4662      	mov	r2, ip
 80021c4:	431a      	orrs	r2, r3
 80021c6:	d000      	beq.n	80021ca <__aeabi_dsub+0x51a>
 80021c8:	e082      	b.n	80022d0 <__aeabi_dsub+0x620>
 80021ca:	000b      	movs	r3, r1
 80021cc:	433b      	orrs	r3, r7
 80021ce:	d11b      	bne.n	8002208 <__aeabi_dsub+0x558>
 80021d0:	2480      	movs	r4, #128	; 0x80
 80021d2:	2500      	movs	r5, #0
 80021d4:	0324      	lsls	r4, r4, #12
 80021d6:	e6f9      	b.n	8001fcc <__aeabi_dsub+0x31c>
 80021d8:	19dc      	adds	r4, r3, r7
 80021da:	429c      	cmp	r4, r3
 80021dc:	419b      	sbcs	r3, r3
 80021de:	4461      	add	r1, ip
 80021e0:	4689      	mov	r9, r1
 80021e2:	425b      	negs	r3, r3
 80021e4:	4499      	add	r9, r3
 80021e6:	464b      	mov	r3, r9
 80021e8:	021b      	lsls	r3, r3, #8
 80021ea:	d444      	bmi.n	8002276 <__aeabi_dsub+0x5c6>
 80021ec:	2301      	movs	r3, #1
 80021ee:	4698      	mov	r8, r3
 80021f0:	e6cc      	b.n	8001f8c <__aeabi_dsub+0x2dc>
 80021f2:	1bdc      	subs	r4, r3, r7
 80021f4:	4662      	mov	r2, ip
 80021f6:	42a3      	cmp	r3, r4
 80021f8:	419b      	sbcs	r3, r3
 80021fa:	1a51      	subs	r1, r2, r1
 80021fc:	425b      	negs	r3, r3
 80021fe:	1acb      	subs	r3, r1, r3
 8002200:	4699      	mov	r9, r3
 8002202:	2301      	movs	r3, #1
 8002204:	4698      	mov	r8, r3
 8002206:	e5a4      	b.n	8001d52 <__aeabi_dsub+0xa2>
 8002208:	08ff      	lsrs	r7, r7, #3
 800220a:	074b      	lsls	r3, r1, #29
 800220c:	465d      	mov	r5, fp
 800220e:	433b      	orrs	r3, r7
 8002210:	08cc      	lsrs	r4, r1, #3
 8002212:	e6d7      	b.n	8001fc4 <__aeabi_dsub+0x314>
 8002214:	4662      	mov	r2, ip
 8002216:	431a      	orrs	r2, r3
 8002218:	0014      	movs	r4, r2
 800221a:	1e63      	subs	r3, r4, #1
 800221c:	419c      	sbcs	r4, r3
 800221e:	e679      	b.n	8001f14 <__aeabi_dsub+0x264>
 8002220:	0015      	movs	r5, r2
 8002222:	4664      	mov	r4, ip
 8002224:	3d20      	subs	r5, #32
 8002226:	40ec      	lsrs	r4, r5
 8002228:	46a0      	mov	r8, r4
 800222a:	2a20      	cmp	r2, #32
 800222c:	d005      	beq.n	800223a <__aeabi_dsub+0x58a>
 800222e:	2540      	movs	r5, #64	; 0x40
 8002230:	4664      	mov	r4, ip
 8002232:	1aaa      	subs	r2, r5, r2
 8002234:	4094      	lsls	r4, r2
 8002236:	4323      	orrs	r3, r4
 8002238:	469a      	mov	sl, r3
 800223a:	4654      	mov	r4, sl
 800223c:	1e63      	subs	r3, r4, #1
 800223e:	419c      	sbcs	r4, r3
 8002240:	4643      	mov	r3, r8
 8002242:	4323      	orrs	r3, r4
 8002244:	e773      	b.n	800212e <__aeabi_dsub+0x47e>
 8002246:	4662      	mov	r2, ip
 8002248:	431a      	orrs	r2, r3
 800224a:	d023      	beq.n	8002294 <__aeabi_dsub+0x5e4>
 800224c:	000a      	movs	r2, r1
 800224e:	433a      	orrs	r2, r7
 8002250:	d000      	beq.n	8002254 <__aeabi_dsub+0x5a4>
 8002252:	e0a0      	b.n	8002396 <__aeabi_dsub+0x6e6>
 8002254:	4662      	mov	r2, ip
 8002256:	08db      	lsrs	r3, r3, #3
 8002258:	0752      	lsls	r2, r2, #29
 800225a:	4313      	orrs	r3, r2
 800225c:	4662      	mov	r2, ip
 800225e:	08d4      	lsrs	r4, r2, #3
 8002260:	e6b0      	b.n	8001fc4 <__aeabi_dsub+0x314>
 8002262:	000b      	movs	r3, r1
 8002264:	433b      	orrs	r3, r7
 8002266:	d100      	bne.n	800226a <__aeabi_dsub+0x5ba>
 8002268:	e728      	b.n	80020bc <__aeabi_dsub+0x40c>
 800226a:	08ff      	lsrs	r7, r7, #3
 800226c:	074b      	lsls	r3, r1, #29
 800226e:	465d      	mov	r5, fp
 8002270:	433b      	orrs	r3, r7
 8002272:	08cc      	lsrs	r4, r1, #3
 8002274:	e697      	b.n	8001fa6 <__aeabi_dsub+0x2f6>
 8002276:	2302      	movs	r3, #2
 8002278:	4698      	mov	r8, r3
 800227a:	e736      	b.n	80020ea <__aeabi_dsub+0x43a>
 800227c:	1afc      	subs	r4, r7, r3
 800227e:	42a7      	cmp	r7, r4
 8002280:	41bf      	sbcs	r7, r7
 8002282:	4663      	mov	r3, ip
 8002284:	427f      	negs	r7, r7
 8002286:	1ac9      	subs	r1, r1, r3
 8002288:	1bcb      	subs	r3, r1, r7
 800228a:	4699      	mov	r9, r3
 800228c:	2301      	movs	r3, #1
 800228e:	465d      	mov	r5, fp
 8002290:	4698      	mov	r8, r3
 8002292:	e55e      	b.n	8001d52 <__aeabi_dsub+0xa2>
 8002294:	074b      	lsls	r3, r1, #29
 8002296:	08ff      	lsrs	r7, r7, #3
 8002298:	433b      	orrs	r3, r7
 800229a:	08cc      	lsrs	r4, r1, #3
 800229c:	e692      	b.n	8001fc4 <__aeabi_dsub+0x314>
 800229e:	1bdc      	subs	r4, r3, r7
 80022a0:	4660      	mov	r0, ip
 80022a2:	42a3      	cmp	r3, r4
 80022a4:	41b6      	sbcs	r6, r6
 80022a6:	1a40      	subs	r0, r0, r1
 80022a8:	4276      	negs	r6, r6
 80022aa:	1b80      	subs	r0, r0, r6
 80022ac:	4681      	mov	r9, r0
 80022ae:	0200      	lsls	r0, r0, #8
 80022b0:	d560      	bpl.n	8002374 <__aeabi_dsub+0x6c4>
 80022b2:	1afc      	subs	r4, r7, r3
 80022b4:	42a7      	cmp	r7, r4
 80022b6:	41bf      	sbcs	r7, r7
 80022b8:	4663      	mov	r3, ip
 80022ba:	427f      	negs	r7, r7
 80022bc:	1ac9      	subs	r1, r1, r3
 80022be:	1bcb      	subs	r3, r1, r7
 80022c0:	4699      	mov	r9, r3
 80022c2:	465d      	mov	r5, fp
 80022c4:	e576      	b.n	8001db4 <__aeabi_dsub+0x104>
 80022c6:	08ff      	lsrs	r7, r7, #3
 80022c8:	074b      	lsls	r3, r1, #29
 80022ca:	433b      	orrs	r3, r7
 80022cc:	08cc      	lsrs	r4, r1, #3
 80022ce:	e667      	b.n	8001fa0 <__aeabi_dsub+0x2f0>
 80022d0:	000a      	movs	r2, r1
 80022d2:	08db      	lsrs	r3, r3, #3
 80022d4:	433a      	orrs	r2, r7
 80022d6:	d100      	bne.n	80022da <__aeabi_dsub+0x62a>
 80022d8:	e66f      	b.n	8001fba <__aeabi_dsub+0x30a>
 80022da:	4662      	mov	r2, ip
 80022dc:	0752      	lsls	r2, r2, #29
 80022de:	4313      	orrs	r3, r2
 80022e0:	4662      	mov	r2, ip
 80022e2:	08d4      	lsrs	r4, r2, #3
 80022e4:	2280      	movs	r2, #128	; 0x80
 80022e6:	0312      	lsls	r2, r2, #12
 80022e8:	4214      	tst	r4, r2
 80022ea:	d007      	beq.n	80022fc <__aeabi_dsub+0x64c>
 80022ec:	08c8      	lsrs	r0, r1, #3
 80022ee:	4210      	tst	r0, r2
 80022f0:	d104      	bne.n	80022fc <__aeabi_dsub+0x64c>
 80022f2:	465d      	mov	r5, fp
 80022f4:	0004      	movs	r4, r0
 80022f6:	08fb      	lsrs	r3, r7, #3
 80022f8:	0749      	lsls	r1, r1, #29
 80022fa:	430b      	orrs	r3, r1
 80022fc:	0f5a      	lsrs	r2, r3, #29
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	08db      	lsrs	r3, r3, #3
 8002302:	0752      	lsls	r2, r2, #29
 8002304:	4313      	orrs	r3, r2
 8002306:	e65d      	b.n	8001fc4 <__aeabi_dsub+0x314>
 8002308:	074b      	lsls	r3, r1, #29
 800230a:	08ff      	lsrs	r7, r7, #3
 800230c:	433b      	orrs	r3, r7
 800230e:	08cc      	lsrs	r4, r1, #3
 8002310:	e649      	b.n	8001fa6 <__aeabi_dsub+0x2f6>
 8002312:	19dc      	adds	r4, r3, r7
 8002314:	429c      	cmp	r4, r3
 8002316:	419b      	sbcs	r3, r3
 8002318:	4461      	add	r1, ip
 800231a:	4689      	mov	r9, r1
 800231c:	425b      	negs	r3, r3
 800231e:	4499      	add	r9, r3
 8002320:	464b      	mov	r3, r9
 8002322:	021b      	lsls	r3, r3, #8
 8002324:	d400      	bmi.n	8002328 <__aeabi_dsub+0x678>
 8002326:	e631      	b.n	8001f8c <__aeabi_dsub+0x2dc>
 8002328:	464a      	mov	r2, r9
 800232a:	4b17      	ldr	r3, [pc, #92]	; (8002388 <__aeabi_dsub+0x6d8>)
 800232c:	401a      	ands	r2, r3
 800232e:	2301      	movs	r3, #1
 8002330:	4691      	mov	r9, r2
 8002332:	4698      	mov	r8, r3
 8002334:	e62a      	b.n	8001f8c <__aeabi_dsub+0x2dc>
 8002336:	0016      	movs	r6, r2
 8002338:	4664      	mov	r4, ip
 800233a:	3e20      	subs	r6, #32
 800233c:	40f4      	lsrs	r4, r6
 800233e:	46a0      	mov	r8, r4
 8002340:	2a20      	cmp	r2, #32
 8002342:	d005      	beq.n	8002350 <__aeabi_dsub+0x6a0>
 8002344:	2640      	movs	r6, #64	; 0x40
 8002346:	4664      	mov	r4, ip
 8002348:	1ab2      	subs	r2, r6, r2
 800234a:	4094      	lsls	r4, r2
 800234c:	4323      	orrs	r3, r4
 800234e:	469a      	mov	sl, r3
 8002350:	4654      	mov	r4, sl
 8002352:	1e63      	subs	r3, r4, #1
 8002354:	419c      	sbcs	r4, r3
 8002356:	4643      	mov	r3, r8
 8002358:	431c      	orrs	r4, r3
 800235a:	e5db      	b.n	8001f14 <__aeabi_dsub+0x264>
 800235c:	0002      	movs	r2, r0
 800235e:	2400      	movs	r4, #0
 8002360:	2300      	movs	r3, #0
 8002362:	e548      	b.n	8001df6 <__aeabi_dsub+0x146>
 8002364:	19dc      	adds	r4, r3, r7
 8002366:	42bc      	cmp	r4, r7
 8002368:	41bf      	sbcs	r7, r7
 800236a:	4461      	add	r1, ip
 800236c:	4689      	mov	r9, r1
 800236e:	427f      	negs	r7, r7
 8002370:	44b9      	add	r9, r7
 8002372:	e738      	b.n	80021e6 <__aeabi_dsub+0x536>
 8002374:	464b      	mov	r3, r9
 8002376:	4323      	orrs	r3, r4
 8002378:	d100      	bne.n	800237c <__aeabi_dsub+0x6cc>
 800237a:	e69f      	b.n	80020bc <__aeabi_dsub+0x40c>
 800237c:	e606      	b.n	8001f8c <__aeabi_dsub+0x2dc>
 800237e:	46c0      	nop			; (mov r8, r8)
 8002380:	000007fe 	.word	0x000007fe
 8002384:	000007ff 	.word	0x000007ff
 8002388:	ff7fffff 	.word	0xff7fffff
 800238c:	08ff      	lsrs	r7, r7, #3
 800238e:	074b      	lsls	r3, r1, #29
 8002390:	433b      	orrs	r3, r7
 8002392:	08cc      	lsrs	r4, r1, #3
 8002394:	e616      	b.n	8001fc4 <__aeabi_dsub+0x314>
 8002396:	4662      	mov	r2, ip
 8002398:	08db      	lsrs	r3, r3, #3
 800239a:	0752      	lsls	r2, r2, #29
 800239c:	4313      	orrs	r3, r2
 800239e:	4662      	mov	r2, ip
 80023a0:	08d4      	lsrs	r4, r2, #3
 80023a2:	2280      	movs	r2, #128	; 0x80
 80023a4:	0312      	lsls	r2, r2, #12
 80023a6:	4214      	tst	r4, r2
 80023a8:	d007      	beq.n	80023ba <__aeabi_dsub+0x70a>
 80023aa:	08c8      	lsrs	r0, r1, #3
 80023ac:	4210      	tst	r0, r2
 80023ae:	d104      	bne.n	80023ba <__aeabi_dsub+0x70a>
 80023b0:	465d      	mov	r5, fp
 80023b2:	0004      	movs	r4, r0
 80023b4:	08fb      	lsrs	r3, r7, #3
 80023b6:	0749      	lsls	r1, r1, #29
 80023b8:	430b      	orrs	r3, r1
 80023ba:	0f5a      	lsrs	r2, r3, #29
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	0752      	lsls	r2, r2, #29
 80023c0:	08db      	lsrs	r3, r3, #3
 80023c2:	4313      	orrs	r3, r2
 80023c4:	e5fe      	b.n	8001fc4 <__aeabi_dsub+0x314>
 80023c6:	2300      	movs	r3, #0
 80023c8:	4a01      	ldr	r2, [pc, #4]	; (80023d0 <__aeabi_dsub+0x720>)
 80023ca:	001c      	movs	r4, r3
 80023cc:	e513      	b.n	8001df6 <__aeabi_dsub+0x146>
 80023ce:	46c0      	nop			; (mov r8, r8)
 80023d0:	000007ff 	.word	0x000007ff

080023d4 <__aeabi_dcmpun>:
 80023d4:	b570      	push	{r4, r5, r6, lr}
 80023d6:	0005      	movs	r5, r0
 80023d8:	480c      	ldr	r0, [pc, #48]	; (800240c <__aeabi_dcmpun+0x38>)
 80023da:	031c      	lsls	r4, r3, #12
 80023dc:	0016      	movs	r6, r2
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	030a      	lsls	r2, r1, #12
 80023e2:	0049      	lsls	r1, r1, #1
 80023e4:	0b12      	lsrs	r2, r2, #12
 80023e6:	0d49      	lsrs	r1, r1, #21
 80023e8:	0b24      	lsrs	r4, r4, #12
 80023ea:	0d5b      	lsrs	r3, r3, #21
 80023ec:	4281      	cmp	r1, r0
 80023ee:	d008      	beq.n	8002402 <__aeabi_dcmpun+0x2e>
 80023f0:	4a06      	ldr	r2, [pc, #24]	; (800240c <__aeabi_dcmpun+0x38>)
 80023f2:	2000      	movs	r0, #0
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d103      	bne.n	8002400 <__aeabi_dcmpun+0x2c>
 80023f8:	0020      	movs	r0, r4
 80023fa:	4330      	orrs	r0, r6
 80023fc:	1e43      	subs	r3, r0, #1
 80023fe:	4198      	sbcs	r0, r3
 8002400:	bd70      	pop	{r4, r5, r6, pc}
 8002402:	2001      	movs	r0, #1
 8002404:	432a      	orrs	r2, r5
 8002406:	d1fb      	bne.n	8002400 <__aeabi_dcmpun+0x2c>
 8002408:	e7f2      	b.n	80023f0 <__aeabi_dcmpun+0x1c>
 800240a:	46c0      	nop			; (mov r8, r8)
 800240c:	000007ff 	.word	0x000007ff

08002410 <__aeabi_d2iz>:
 8002410:	000a      	movs	r2, r1
 8002412:	b530      	push	{r4, r5, lr}
 8002414:	4c13      	ldr	r4, [pc, #76]	; (8002464 <__aeabi_d2iz+0x54>)
 8002416:	0053      	lsls	r3, r2, #1
 8002418:	0309      	lsls	r1, r1, #12
 800241a:	0005      	movs	r5, r0
 800241c:	0b09      	lsrs	r1, r1, #12
 800241e:	2000      	movs	r0, #0
 8002420:	0d5b      	lsrs	r3, r3, #21
 8002422:	0fd2      	lsrs	r2, r2, #31
 8002424:	42a3      	cmp	r3, r4
 8002426:	dd04      	ble.n	8002432 <__aeabi_d2iz+0x22>
 8002428:	480f      	ldr	r0, [pc, #60]	; (8002468 <__aeabi_d2iz+0x58>)
 800242a:	4283      	cmp	r3, r0
 800242c:	dd02      	ble.n	8002434 <__aeabi_d2iz+0x24>
 800242e:	4b0f      	ldr	r3, [pc, #60]	; (800246c <__aeabi_d2iz+0x5c>)
 8002430:	18d0      	adds	r0, r2, r3
 8002432:	bd30      	pop	{r4, r5, pc}
 8002434:	2080      	movs	r0, #128	; 0x80
 8002436:	0340      	lsls	r0, r0, #13
 8002438:	4301      	orrs	r1, r0
 800243a:	480d      	ldr	r0, [pc, #52]	; (8002470 <__aeabi_d2iz+0x60>)
 800243c:	1ac0      	subs	r0, r0, r3
 800243e:	281f      	cmp	r0, #31
 8002440:	dd08      	ble.n	8002454 <__aeabi_d2iz+0x44>
 8002442:	480c      	ldr	r0, [pc, #48]	; (8002474 <__aeabi_d2iz+0x64>)
 8002444:	1ac3      	subs	r3, r0, r3
 8002446:	40d9      	lsrs	r1, r3
 8002448:	000b      	movs	r3, r1
 800244a:	4258      	negs	r0, r3
 800244c:	2a00      	cmp	r2, #0
 800244e:	d1f0      	bne.n	8002432 <__aeabi_d2iz+0x22>
 8002450:	0018      	movs	r0, r3
 8002452:	e7ee      	b.n	8002432 <__aeabi_d2iz+0x22>
 8002454:	4c08      	ldr	r4, [pc, #32]	; (8002478 <__aeabi_d2iz+0x68>)
 8002456:	40c5      	lsrs	r5, r0
 8002458:	46a4      	mov	ip, r4
 800245a:	4463      	add	r3, ip
 800245c:	4099      	lsls	r1, r3
 800245e:	000b      	movs	r3, r1
 8002460:	432b      	orrs	r3, r5
 8002462:	e7f2      	b.n	800244a <__aeabi_d2iz+0x3a>
 8002464:	000003fe 	.word	0x000003fe
 8002468:	0000041d 	.word	0x0000041d
 800246c:	7fffffff 	.word	0x7fffffff
 8002470:	00000433 	.word	0x00000433
 8002474:	00000413 	.word	0x00000413
 8002478:	fffffbed 	.word	0xfffffbed

0800247c <__aeabi_i2d>:
 800247c:	b570      	push	{r4, r5, r6, lr}
 800247e:	2800      	cmp	r0, #0
 8002480:	d016      	beq.n	80024b0 <__aeabi_i2d+0x34>
 8002482:	17c3      	asrs	r3, r0, #31
 8002484:	18c5      	adds	r5, r0, r3
 8002486:	405d      	eors	r5, r3
 8002488:	0fc4      	lsrs	r4, r0, #31
 800248a:	0028      	movs	r0, r5
 800248c:	f000 f8d4 	bl	8002638 <__clzsi2>
 8002490:	4a11      	ldr	r2, [pc, #68]	; (80024d8 <__aeabi_i2d+0x5c>)
 8002492:	1a12      	subs	r2, r2, r0
 8002494:	280a      	cmp	r0, #10
 8002496:	dc16      	bgt.n	80024c6 <__aeabi_i2d+0x4a>
 8002498:	0003      	movs	r3, r0
 800249a:	002e      	movs	r6, r5
 800249c:	3315      	adds	r3, #21
 800249e:	409e      	lsls	r6, r3
 80024a0:	230b      	movs	r3, #11
 80024a2:	1a18      	subs	r0, r3, r0
 80024a4:	40c5      	lsrs	r5, r0
 80024a6:	0552      	lsls	r2, r2, #21
 80024a8:	032d      	lsls	r5, r5, #12
 80024aa:	0b2d      	lsrs	r5, r5, #12
 80024ac:	0d53      	lsrs	r3, r2, #21
 80024ae:	e003      	b.n	80024b8 <__aeabi_i2d+0x3c>
 80024b0:	2400      	movs	r4, #0
 80024b2:	2300      	movs	r3, #0
 80024b4:	2500      	movs	r5, #0
 80024b6:	2600      	movs	r6, #0
 80024b8:	051b      	lsls	r3, r3, #20
 80024ba:	432b      	orrs	r3, r5
 80024bc:	07e4      	lsls	r4, r4, #31
 80024be:	4323      	orrs	r3, r4
 80024c0:	0030      	movs	r0, r6
 80024c2:	0019      	movs	r1, r3
 80024c4:	bd70      	pop	{r4, r5, r6, pc}
 80024c6:	380b      	subs	r0, #11
 80024c8:	4085      	lsls	r5, r0
 80024ca:	0552      	lsls	r2, r2, #21
 80024cc:	032d      	lsls	r5, r5, #12
 80024ce:	2600      	movs	r6, #0
 80024d0:	0b2d      	lsrs	r5, r5, #12
 80024d2:	0d53      	lsrs	r3, r2, #21
 80024d4:	e7f0      	b.n	80024b8 <__aeabi_i2d+0x3c>
 80024d6:	46c0      	nop			; (mov r8, r8)
 80024d8:	0000041e 	.word	0x0000041e

080024dc <__aeabi_ui2d>:
 80024dc:	b510      	push	{r4, lr}
 80024de:	1e04      	subs	r4, r0, #0
 80024e0:	d010      	beq.n	8002504 <__aeabi_ui2d+0x28>
 80024e2:	f000 f8a9 	bl	8002638 <__clzsi2>
 80024e6:	4b0f      	ldr	r3, [pc, #60]	; (8002524 <__aeabi_ui2d+0x48>)
 80024e8:	1a1b      	subs	r3, r3, r0
 80024ea:	280a      	cmp	r0, #10
 80024ec:	dc11      	bgt.n	8002512 <__aeabi_ui2d+0x36>
 80024ee:	220b      	movs	r2, #11
 80024f0:	0021      	movs	r1, r4
 80024f2:	1a12      	subs	r2, r2, r0
 80024f4:	40d1      	lsrs	r1, r2
 80024f6:	3015      	adds	r0, #21
 80024f8:	030a      	lsls	r2, r1, #12
 80024fa:	055b      	lsls	r3, r3, #21
 80024fc:	4084      	lsls	r4, r0
 80024fe:	0b12      	lsrs	r2, r2, #12
 8002500:	0d5b      	lsrs	r3, r3, #21
 8002502:	e001      	b.n	8002508 <__aeabi_ui2d+0x2c>
 8002504:	2300      	movs	r3, #0
 8002506:	2200      	movs	r2, #0
 8002508:	051b      	lsls	r3, r3, #20
 800250a:	4313      	orrs	r3, r2
 800250c:	0020      	movs	r0, r4
 800250e:	0019      	movs	r1, r3
 8002510:	bd10      	pop	{r4, pc}
 8002512:	0022      	movs	r2, r4
 8002514:	380b      	subs	r0, #11
 8002516:	4082      	lsls	r2, r0
 8002518:	055b      	lsls	r3, r3, #21
 800251a:	0312      	lsls	r2, r2, #12
 800251c:	2400      	movs	r4, #0
 800251e:	0b12      	lsrs	r2, r2, #12
 8002520:	0d5b      	lsrs	r3, r3, #21
 8002522:	e7f1      	b.n	8002508 <__aeabi_ui2d+0x2c>
 8002524:	0000041e 	.word	0x0000041e

08002528 <__aeabi_d2f>:
 8002528:	0002      	movs	r2, r0
 800252a:	004b      	lsls	r3, r1, #1
 800252c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800252e:	0d5b      	lsrs	r3, r3, #21
 8002530:	030c      	lsls	r4, r1, #12
 8002532:	4e3d      	ldr	r6, [pc, #244]	; (8002628 <__aeabi_d2f+0x100>)
 8002534:	0a64      	lsrs	r4, r4, #9
 8002536:	0f40      	lsrs	r0, r0, #29
 8002538:	1c5f      	adds	r7, r3, #1
 800253a:	0fc9      	lsrs	r1, r1, #31
 800253c:	4304      	orrs	r4, r0
 800253e:	00d5      	lsls	r5, r2, #3
 8002540:	4237      	tst	r7, r6
 8002542:	d00a      	beq.n	800255a <__aeabi_d2f+0x32>
 8002544:	4839      	ldr	r0, [pc, #228]	; (800262c <__aeabi_d2f+0x104>)
 8002546:	181e      	adds	r6, r3, r0
 8002548:	2efe      	cmp	r6, #254	; 0xfe
 800254a:	dd16      	ble.n	800257a <__aeabi_d2f+0x52>
 800254c:	20ff      	movs	r0, #255	; 0xff
 800254e:	2400      	movs	r4, #0
 8002550:	05c0      	lsls	r0, r0, #23
 8002552:	4320      	orrs	r0, r4
 8002554:	07c9      	lsls	r1, r1, #31
 8002556:	4308      	orrs	r0, r1
 8002558:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800255a:	2b00      	cmp	r3, #0
 800255c:	d106      	bne.n	800256c <__aeabi_d2f+0x44>
 800255e:	432c      	orrs	r4, r5
 8002560:	d026      	beq.n	80025b0 <__aeabi_d2f+0x88>
 8002562:	2205      	movs	r2, #5
 8002564:	0192      	lsls	r2, r2, #6
 8002566:	0a54      	lsrs	r4, r2, #9
 8002568:	b2d8      	uxtb	r0, r3
 800256a:	e7f1      	b.n	8002550 <__aeabi_d2f+0x28>
 800256c:	4325      	orrs	r5, r4
 800256e:	d0ed      	beq.n	800254c <__aeabi_d2f+0x24>
 8002570:	2080      	movs	r0, #128	; 0x80
 8002572:	03c0      	lsls	r0, r0, #15
 8002574:	4304      	orrs	r4, r0
 8002576:	20ff      	movs	r0, #255	; 0xff
 8002578:	e7ea      	b.n	8002550 <__aeabi_d2f+0x28>
 800257a:	2e00      	cmp	r6, #0
 800257c:	dd1b      	ble.n	80025b6 <__aeabi_d2f+0x8e>
 800257e:	0192      	lsls	r2, r2, #6
 8002580:	1e53      	subs	r3, r2, #1
 8002582:	419a      	sbcs	r2, r3
 8002584:	00e4      	lsls	r4, r4, #3
 8002586:	0f6d      	lsrs	r5, r5, #29
 8002588:	4322      	orrs	r2, r4
 800258a:	432a      	orrs	r2, r5
 800258c:	0753      	lsls	r3, r2, #29
 800258e:	d048      	beq.n	8002622 <__aeabi_d2f+0xfa>
 8002590:	230f      	movs	r3, #15
 8002592:	4013      	ands	r3, r2
 8002594:	2b04      	cmp	r3, #4
 8002596:	d000      	beq.n	800259a <__aeabi_d2f+0x72>
 8002598:	3204      	adds	r2, #4
 800259a:	2380      	movs	r3, #128	; 0x80
 800259c:	04db      	lsls	r3, r3, #19
 800259e:	4013      	ands	r3, r2
 80025a0:	d03f      	beq.n	8002622 <__aeabi_d2f+0xfa>
 80025a2:	1c70      	adds	r0, r6, #1
 80025a4:	2efe      	cmp	r6, #254	; 0xfe
 80025a6:	d0d1      	beq.n	800254c <__aeabi_d2f+0x24>
 80025a8:	0192      	lsls	r2, r2, #6
 80025aa:	0a54      	lsrs	r4, r2, #9
 80025ac:	b2c0      	uxtb	r0, r0
 80025ae:	e7cf      	b.n	8002550 <__aeabi_d2f+0x28>
 80025b0:	2000      	movs	r0, #0
 80025b2:	2400      	movs	r4, #0
 80025b4:	e7cc      	b.n	8002550 <__aeabi_d2f+0x28>
 80025b6:	0032      	movs	r2, r6
 80025b8:	3217      	adds	r2, #23
 80025ba:	db22      	blt.n	8002602 <__aeabi_d2f+0xda>
 80025bc:	2080      	movs	r0, #128	; 0x80
 80025be:	0400      	lsls	r0, r0, #16
 80025c0:	4320      	orrs	r0, r4
 80025c2:	241e      	movs	r4, #30
 80025c4:	1ba4      	subs	r4, r4, r6
 80025c6:	2c1f      	cmp	r4, #31
 80025c8:	dd1d      	ble.n	8002606 <__aeabi_d2f+0xde>
 80025ca:	2202      	movs	r2, #2
 80025cc:	4252      	negs	r2, r2
 80025ce:	1b96      	subs	r6, r2, r6
 80025d0:	0002      	movs	r2, r0
 80025d2:	40f2      	lsrs	r2, r6
 80025d4:	0016      	movs	r6, r2
 80025d6:	2c20      	cmp	r4, #32
 80025d8:	d004      	beq.n	80025e4 <__aeabi_d2f+0xbc>
 80025da:	4a15      	ldr	r2, [pc, #84]	; (8002630 <__aeabi_d2f+0x108>)
 80025dc:	4694      	mov	ip, r2
 80025de:	4463      	add	r3, ip
 80025e0:	4098      	lsls	r0, r3
 80025e2:	4305      	orrs	r5, r0
 80025e4:	002a      	movs	r2, r5
 80025e6:	1e53      	subs	r3, r2, #1
 80025e8:	419a      	sbcs	r2, r3
 80025ea:	4332      	orrs	r2, r6
 80025ec:	2600      	movs	r6, #0
 80025ee:	0753      	lsls	r3, r2, #29
 80025f0:	d1ce      	bne.n	8002590 <__aeabi_d2f+0x68>
 80025f2:	2480      	movs	r4, #128	; 0x80
 80025f4:	0013      	movs	r3, r2
 80025f6:	04e4      	lsls	r4, r4, #19
 80025f8:	2001      	movs	r0, #1
 80025fa:	4023      	ands	r3, r4
 80025fc:	4222      	tst	r2, r4
 80025fe:	d1d3      	bne.n	80025a8 <__aeabi_d2f+0x80>
 8002600:	e7b0      	b.n	8002564 <__aeabi_d2f+0x3c>
 8002602:	2300      	movs	r3, #0
 8002604:	e7ad      	b.n	8002562 <__aeabi_d2f+0x3a>
 8002606:	4a0b      	ldr	r2, [pc, #44]	; (8002634 <__aeabi_d2f+0x10c>)
 8002608:	4694      	mov	ip, r2
 800260a:	002a      	movs	r2, r5
 800260c:	40e2      	lsrs	r2, r4
 800260e:	0014      	movs	r4, r2
 8002610:	002a      	movs	r2, r5
 8002612:	4463      	add	r3, ip
 8002614:	409a      	lsls	r2, r3
 8002616:	4098      	lsls	r0, r3
 8002618:	1e55      	subs	r5, r2, #1
 800261a:	41aa      	sbcs	r2, r5
 800261c:	4302      	orrs	r2, r0
 800261e:	4322      	orrs	r2, r4
 8002620:	e7e4      	b.n	80025ec <__aeabi_d2f+0xc4>
 8002622:	0033      	movs	r3, r6
 8002624:	e79e      	b.n	8002564 <__aeabi_d2f+0x3c>
 8002626:	46c0      	nop			; (mov r8, r8)
 8002628:	000007fe 	.word	0x000007fe
 800262c:	fffffc80 	.word	0xfffffc80
 8002630:	fffffca2 	.word	0xfffffca2
 8002634:	fffffc82 	.word	0xfffffc82

08002638 <__clzsi2>:
 8002638:	211c      	movs	r1, #28
 800263a:	2301      	movs	r3, #1
 800263c:	041b      	lsls	r3, r3, #16
 800263e:	4298      	cmp	r0, r3
 8002640:	d301      	bcc.n	8002646 <__clzsi2+0xe>
 8002642:	0c00      	lsrs	r0, r0, #16
 8002644:	3910      	subs	r1, #16
 8002646:	0a1b      	lsrs	r3, r3, #8
 8002648:	4298      	cmp	r0, r3
 800264a:	d301      	bcc.n	8002650 <__clzsi2+0x18>
 800264c:	0a00      	lsrs	r0, r0, #8
 800264e:	3908      	subs	r1, #8
 8002650:	091b      	lsrs	r3, r3, #4
 8002652:	4298      	cmp	r0, r3
 8002654:	d301      	bcc.n	800265a <__clzsi2+0x22>
 8002656:	0900      	lsrs	r0, r0, #4
 8002658:	3904      	subs	r1, #4
 800265a:	a202      	add	r2, pc, #8	; (adr r2, 8002664 <__clzsi2+0x2c>)
 800265c:	5c10      	ldrb	r0, [r2, r0]
 800265e:	1840      	adds	r0, r0, r1
 8002660:	4770      	bx	lr
 8002662:	46c0      	nop			; (mov r8, r8)
 8002664:	02020304 	.word	0x02020304
 8002668:	01010101 	.word	0x01010101
	...

08002674 <__clzdi2>:
 8002674:	b510      	push	{r4, lr}
 8002676:	2900      	cmp	r1, #0
 8002678:	d103      	bne.n	8002682 <__clzdi2+0xe>
 800267a:	f7ff ffdd 	bl	8002638 <__clzsi2>
 800267e:	3020      	adds	r0, #32
 8002680:	e002      	b.n	8002688 <__clzdi2+0x14>
 8002682:	0008      	movs	r0, r1
 8002684:	f7ff ffd8 	bl	8002638 <__clzsi2>
 8002688:	bd10      	pop	{r4, pc}
 800268a:	46c0      	nop			; (mov r8, r8)

0800268c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002690:	f000 fe6e 	bl	8003370 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002694:	f000 f83c 	bl	8002710 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002698:	f000 f95c 	bl	8002954 <MX_GPIO_Init>
  MX_DMA_Init();
 800269c:	f000 f93c 	bl	8002918 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80026a0:	f000 f8ec 	bl	800287c <MX_USART1_UART_Init>
  MX_TIM14_Init();
 80026a4:	f000 f8c2 	bl	800282c <MX_TIM14_Init>
  MX_RTC_Init();
 80026a8:	f000 f888 	bl	80027bc <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  __HAL_TIM_CLEAR_IT ( &htim14 , TIM_IT_UPDATE ) ;
 80026ac:	4b12      	ldr	r3, [pc, #72]	; (80026f8 <main+0x6c>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2202      	movs	r2, #2
 80026b2:	4252      	negs	r2, r2
 80026b4:	611a      	str	r2, [r3, #16]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //HAL_Delay ( 15000 ) ;
  m138_init () ;
 80026b6:	f000 fa15 	bl	8002ae4 <m138_init>

  while (1)
  {
	  HAL_Delay ( 2000 ) ;
 80026ba:	23fa      	movs	r3, #250	; 0xfa
 80026bc:	00db      	lsls	r3, r3, #3
 80026be:	0018      	movs	r0, r3
 80026c0:	f000 fedc 	bl	800347c <HAL_Delay>
	  send_at_command_2_swarm ( pw_mostrecent_at , pw_mostrecent_answer , 14 ) ;
 80026c4:	4b0d      	ldr	r3, [pc, #52]	; (80026fc <main+0x70>)
 80026c6:	6818      	ldr	r0, [r3, #0]
 80026c8:	4b0d      	ldr	r3, [pc, #52]	; (8002700 <main+0x74>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	220e      	movs	r2, #14
 80026ce:	0019      	movs	r1, r3
 80026d0:	f000 fae6 	bl	8002ca0 <send_at_command_2_swarm>
	  if ( swarm_checklist == 14 )
 80026d4:	4b0b      	ldr	r3, [pc, #44]	; (8002704 <main+0x78>)
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	2b0e      	cmp	r3, #14
 80026da:	d105      	bne.n	80026e8 <main+0x5c>
		  store_m138_voltage ( &m138_voltage , swarm_answer_buff ) ;
 80026dc:	4a0a      	ldr	r2, [pc, #40]	; (8002708 <main+0x7c>)
 80026de:	4b0b      	ldr	r3, [pc, #44]	; (800270c <main+0x80>)
 80026e0:	0011      	movs	r1, r2
 80026e2:	0018      	movs	r0, r3
 80026e4:	f000 f998 	bl	8002a18 <store_m138_voltage>
	  HAL_PWR_EnterSTOPMode ( PWR_LOWPOWERREGULATOR_ON , PWR_STOPENTRY_WFI ) ;
 80026e8:	2380      	movs	r3, #128	; 0x80
 80026ea:	01db      	lsls	r3, r3, #7
 80026ec:	2101      	movs	r1, #1
 80026ee:	0018      	movs	r0, r3
 80026f0:	f001 fc74 	bl	8003fdc <HAL_PWR_EnterSTOPMode>
	  HAL_Delay ( 2000 ) ;
 80026f4:	e7e1      	b.n	80026ba <main+0x2e>
 80026f6:	46c0      	nop			; (mov r8, r8)
 80026f8:	20000298 	.word	0x20000298
 80026fc:	20000014 	.word	0x20000014
 8002700:	2000004c 	.word	0x2000004c
 8002704:	20000597 	.word	0x20000597
 8002708:	20000438 	.word	0x20000438
 800270c:	2000059c 	.word	0x2000059c

08002710 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002710:	b590      	push	{r4, r7, lr}
 8002712:	b093      	sub	sp, #76	; 0x4c
 8002714:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002716:	2410      	movs	r4, #16
 8002718:	193b      	adds	r3, r7, r4
 800271a:	0018      	movs	r0, r3
 800271c:	2338      	movs	r3, #56	; 0x38
 800271e:	001a      	movs	r2, r3
 8002720:	2100      	movs	r1, #0
 8002722:	f004 fcba 	bl	800709a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002726:	003b      	movs	r3, r7
 8002728:	0018      	movs	r0, r3
 800272a:	2310      	movs	r3, #16
 800272c:	001a      	movs	r2, r3
 800272e:	2100      	movs	r1, #0
 8002730:	f004 fcb3 	bl	800709a <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002734:	2380      	movs	r3, #128	; 0x80
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	0018      	movs	r0, r3
 800273a:	f001 fc87 	bl	800404c <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800273e:	f001 fc3f 	bl	8003fc0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002742:	4b1d      	ldr	r3, [pc, #116]	; (80027b8 <SystemClock_Config+0xa8>)
 8002744:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002746:	4b1c      	ldr	r3, [pc, #112]	; (80027b8 <SystemClock_Config+0xa8>)
 8002748:	2118      	movs	r1, #24
 800274a:	438a      	bics	r2, r1
 800274c:	65da      	str	r2, [r3, #92]	; 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800274e:	193b      	adds	r3, r7, r4
 8002750:	2206      	movs	r2, #6
 8002752:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002754:	193b      	adds	r3, r7, r4
 8002756:	2201      	movs	r2, #1
 8002758:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800275a:	193b      	adds	r3, r7, r4
 800275c:	2280      	movs	r2, #128	; 0x80
 800275e:	0052      	lsls	r2, r2, #1
 8002760:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002762:	193b      	adds	r3, r7, r4
 8002764:	2200      	movs	r2, #0
 8002766:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002768:	193b      	adds	r3, r7, r4
 800276a:	2240      	movs	r2, #64	; 0x40
 800276c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800276e:	193b      	adds	r3, r7, r4
 8002770:	2200      	movs	r2, #0
 8002772:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002774:	193b      	adds	r3, r7, r4
 8002776:	0018      	movs	r0, r3
 8002778:	f001 fcb4 	bl	80040e4 <HAL_RCC_OscConfig>
 800277c:	1e03      	subs	r3, r0, #0
 800277e:	d001      	beq.n	8002784 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8002780:	f000 fb90 	bl	8002ea4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002784:	003b      	movs	r3, r7
 8002786:	2207      	movs	r2, #7
 8002788:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800278a:	003b      	movs	r3, r7
 800278c:	2200      	movs	r2, #0
 800278e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002790:	003b      	movs	r3, r7
 8002792:	2200      	movs	r2, #0
 8002794:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002796:	003b      	movs	r3, r7
 8002798:	2200      	movs	r2, #0
 800279a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800279c:	003b      	movs	r3, r7
 800279e:	2100      	movs	r1, #0
 80027a0:	0018      	movs	r0, r3
 80027a2:	f001 ffb9 	bl	8004718 <HAL_RCC_ClockConfig>
 80027a6:	1e03      	subs	r3, r0, #0
 80027a8:	d001      	beq.n	80027ae <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80027aa:	f000 fb7b 	bl	8002ea4 <Error_Handler>
  }
}
 80027ae:	46c0      	nop			; (mov r8, r8)
 80027b0:	46bd      	mov	sp, r7
 80027b2:	b013      	add	sp, #76	; 0x4c
 80027b4:	bd90      	pop	{r4, r7, pc}
 80027b6:	46c0      	nop			; (mov r8, r8)
 80027b8:	40021000 	.word	0x40021000

080027bc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80027c0:	4b18      	ldr	r3, [pc, #96]	; (8002824 <MX_RTC_Init+0x68>)
 80027c2:	4a19      	ldr	r2, [pc, #100]	; (8002828 <MX_RTC_Init+0x6c>)
 80027c4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80027c6:	4b17      	ldr	r3, [pc, #92]	; (8002824 <MX_RTC_Init+0x68>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 80027cc:	4b15      	ldr	r3, [pc, #84]	; (8002824 <MX_RTC_Init+0x68>)
 80027ce:	227f      	movs	r2, #127	; 0x7f
 80027d0:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 80027d2:	4b14      	ldr	r3, [pc, #80]	; (8002824 <MX_RTC_Init+0x68>)
 80027d4:	22ff      	movs	r2, #255	; 0xff
 80027d6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80027d8:	4b12      	ldr	r3, [pc, #72]	; (8002824 <MX_RTC_Init+0x68>)
 80027da:	2200      	movs	r2, #0
 80027dc:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80027de:	4b11      	ldr	r3, [pc, #68]	; (8002824 <MX_RTC_Init+0x68>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80027e4:	4b0f      	ldr	r3, [pc, #60]	; (8002824 <MX_RTC_Init+0x68>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80027ea:	4b0e      	ldr	r3, [pc, #56]	; (8002824 <MX_RTC_Init+0x68>)
 80027ec:	2280      	movs	r2, #128	; 0x80
 80027ee:	05d2      	lsls	r2, r2, #23
 80027f0:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80027f2:	4b0c      	ldr	r3, [pc, #48]	; (8002824 <MX_RTC_Init+0x68>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80027f8:	4b0a      	ldr	r3, [pc, #40]	; (8002824 <MX_RTC_Init+0x68>)
 80027fa:	0018      	movs	r0, r3
 80027fc:	f002 fab0 	bl	8004d60 <HAL_RTC_Init>
 8002800:	1e03      	subs	r3, r0, #0
 8002802:	d001      	beq.n	8002808 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 8002804:	f000 fb4e 	bl	8002ea4 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 60, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8002808:	4b06      	ldr	r3, [pc, #24]	; (8002824 <MX_RTC_Init+0x68>)
 800280a:	2204      	movs	r2, #4
 800280c:	213c      	movs	r1, #60	; 0x3c
 800280e:	0018      	movs	r0, r3
 8002810:	f002 fbf6 	bl	8005000 <HAL_RTCEx_SetWakeUpTimer_IT>
 8002814:	1e03      	subs	r3, r0, #0
 8002816:	d001      	beq.n	800281c <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8002818:	f000 fb44 	bl	8002ea4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800281c:	46c0      	nop			; (mov r8, r8)
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	46c0      	nop			; (mov r8, r8)
 8002824:	2000026c 	.word	0x2000026c
 8002828:	40002800 	.word	0x40002800

0800282c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002830:	4b0e      	ldr	r3, [pc, #56]	; (800286c <MX_TIM14_Init+0x40>)
 8002832:	4a0f      	ldr	r2, [pc, #60]	; (8002870 <MX_TIM14_Init+0x44>)
 8002834:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 16000-1;
 8002836:	4b0d      	ldr	r3, [pc, #52]	; (800286c <MX_TIM14_Init+0x40>)
 8002838:	4a0e      	ldr	r2, [pc, #56]	; (8002874 <MX_TIM14_Init+0x48>)
 800283a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800283c:	4b0b      	ldr	r3, [pc, #44]	; (800286c <MX_TIM14_Init+0x40>)
 800283e:	2200      	movs	r2, #0
 8002840:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 5000-1;
 8002842:	4b0a      	ldr	r3, [pc, #40]	; (800286c <MX_TIM14_Init+0x40>)
 8002844:	4a0c      	ldr	r2, [pc, #48]	; (8002878 <MX_TIM14_Init+0x4c>)
 8002846:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002848:	4b08      	ldr	r3, [pc, #32]	; (800286c <MX_TIM14_Init+0x40>)
 800284a:	2200      	movs	r2, #0
 800284c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800284e:	4b07      	ldr	r3, [pc, #28]	; (800286c <MX_TIM14_Init+0x40>)
 8002850:	2200      	movs	r2, #0
 8002852:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002854:	4b05      	ldr	r3, [pc, #20]	; (800286c <MX_TIM14_Init+0x40>)
 8002856:	0018      	movs	r0, r3
 8002858:	f002 fc92 	bl	8005180 <HAL_TIM_Base_Init>
 800285c:	1e03      	subs	r3, r0, #0
 800285e:	d001      	beq.n	8002864 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8002860:	f000 fb20 	bl	8002ea4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8002864:	46c0      	nop			; (mov r8, r8)
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	46c0      	nop			; (mov r8, r8)
 800286c:	20000298 	.word	0x20000298
 8002870:	40002000 	.word	0x40002000
 8002874:	00003e7f 	.word	0x00003e7f
 8002878:	00001387 	.word	0x00001387

0800287c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002880:	4b23      	ldr	r3, [pc, #140]	; (8002910 <MX_USART1_UART_Init+0x94>)
 8002882:	4a24      	ldr	r2, [pc, #144]	; (8002914 <MX_USART1_UART_Init+0x98>)
 8002884:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002886:	4b22      	ldr	r3, [pc, #136]	; (8002910 <MX_USART1_UART_Init+0x94>)
 8002888:	22e1      	movs	r2, #225	; 0xe1
 800288a:	0252      	lsls	r2, r2, #9
 800288c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800288e:	4b20      	ldr	r3, [pc, #128]	; (8002910 <MX_USART1_UART_Init+0x94>)
 8002890:	2200      	movs	r2, #0
 8002892:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002894:	4b1e      	ldr	r3, [pc, #120]	; (8002910 <MX_USART1_UART_Init+0x94>)
 8002896:	2200      	movs	r2, #0
 8002898:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800289a:	4b1d      	ldr	r3, [pc, #116]	; (8002910 <MX_USART1_UART_Init+0x94>)
 800289c:	2200      	movs	r2, #0
 800289e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80028a0:	4b1b      	ldr	r3, [pc, #108]	; (8002910 <MX_USART1_UART_Init+0x94>)
 80028a2:	220c      	movs	r2, #12
 80028a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028a6:	4b1a      	ldr	r3, [pc, #104]	; (8002910 <MX_USART1_UART_Init+0x94>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80028ac:	4b18      	ldr	r3, [pc, #96]	; (8002910 <MX_USART1_UART_Init+0x94>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028b2:	4b17      	ldr	r3, [pc, #92]	; (8002910 <MX_USART1_UART_Init+0x94>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80028b8:	4b15      	ldr	r3, [pc, #84]	; (8002910 <MX_USART1_UART_Init+0x94>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028be:	4b14      	ldr	r3, [pc, #80]	; (8002910 <MX_USART1_UART_Init+0x94>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80028c4:	4b12      	ldr	r3, [pc, #72]	; (8002910 <MX_USART1_UART_Init+0x94>)
 80028c6:	0018      	movs	r0, r3
 80028c8:	f002 ff14 	bl	80056f4 <HAL_UART_Init>
 80028cc:	1e03      	subs	r3, r0, #0
 80028ce:	d001      	beq.n	80028d4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80028d0:	f000 fae8 	bl	8002ea4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028d4:	4b0e      	ldr	r3, [pc, #56]	; (8002910 <MX_USART1_UART_Init+0x94>)
 80028d6:	2100      	movs	r1, #0
 80028d8:	0018      	movs	r0, r3
 80028da:	f004 fa63 	bl	8006da4 <HAL_UARTEx_SetTxFifoThreshold>
 80028de:	1e03      	subs	r3, r0, #0
 80028e0:	d001      	beq.n	80028e6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80028e2:	f000 fadf 	bl	8002ea4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028e6:	4b0a      	ldr	r3, [pc, #40]	; (8002910 <MX_USART1_UART_Init+0x94>)
 80028e8:	2100      	movs	r1, #0
 80028ea:	0018      	movs	r0, r3
 80028ec:	f004 fa9a 	bl	8006e24 <HAL_UARTEx_SetRxFifoThreshold>
 80028f0:	1e03      	subs	r3, r0, #0
 80028f2:	d001      	beq.n	80028f8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80028f4:	f000 fad6 	bl	8002ea4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80028f8:	4b05      	ldr	r3, [pc, #20]	; (8002910 <MX_USART1_UART_Init+0x94>)
 80028fa:	0018      	movs	r0, r3
 80028fc:	f004 fa18 	bl	8006d30 <HAL_UARTEx_DisableFifoMode>
 8002900:	1e03      	subs	r3, r0, #0
 8002902:	d001      	beq.n	8002908 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002904:	f000 face 	bl	8002ea4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002908:	46c0      	nop			; (mov r8, r8)
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	46c0      	nop			; (mov r8, r8)
 8002910:	200002e4 	.word	0x200002e4
 8002914:	40013800 	.word	0x40013800

08002918 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800291e:	4b0c      	ldr	r3, [pc, #48]	; (8002950 <MX_DMA_Init+0x38>)
 8002920:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002922:	4b0b      	ldr	r3, [pc, #44]	; (8002950 <MX_DMA_Init+0x38>)
 8002924:	2101      	movs	r1, #1
 8002926:	430a      	orrs	r2, r1
 8002928:	639a      	str	r2, [r3, #56]	; 0x38
 800292a:	4b09      	ldr	r3, [pc, #36]	; (8002950 <MX_DMA_Init+0x38>)
 800292c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800292e:	2201      	movs	r2, #1
 8002930:	4013      	ands	r3, r2
 8002932:	607b      	str	r3, [r7, #4]
 8002934:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002936:	2200      	movs	r2, #0
 8002938:	2100      	movs	r1, #0
 800293a:	2009      	movs	r0, #9
 800293c:	f000 fe6e 	bl	800361c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002940:	2009      	movs	r0, #9
 8002942:	f000 fe80 	bl	8003646 <HAL_NVIC_EnableIRQ>

}
 8002946:	46c0      	nop			; (mov r8, r8)
 8002948:	46bd      	mov	sp, r7
 800294a:	b002      	add	sp, #8
 800294c:	bd80      	pop	{r7, pc}
 800294e:	46c0      	nop			; (mov r8, r8)
 8002950:	40021000 	.word	0x40021000

08002954 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002954:	b590      	push	{r4, r7, lr}
 8002956:	b089      	sub	sp, #36	; 0x24
 8002958:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800295a:	240c      	movs	r4, #12
 800295c:	193b      	adds	r3, r7, r4
 800295e:	0018      	movs	r0, r3
 8002960:	2314      	movs	r3, #20
 8002962:	001a      	movs	r2, r3
 8002964:	2100      	movs	r1, #0
 8002966:	f004 fb98 	bl	800709a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800296a:	4b28      	ldr	r3, [pc, #160]	; (8002a0c <MX_GPIO_Init+0xb8>)
 800296c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800296e:	4b27      	ldr	r3, [pc, #156]	; (8002a0c <MX_GPIO_Init+0xb8>)
 8002970:	2104      	movs	r1, #4
 8002972:	430a      	orrs	r2, r1
 8002974:	635a      	str	r2, [r3, #52]	; 0x34
 8002976:	4b25      	ldr	r3, [pc, #148]	; (8002a0c <MX_GPIO_Init+0xb8>)
 8002978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800297a:	2204      	movs	r2, #4
 800297c:	4013      	ands	r3, r2
 800297e:	60bb      	str	r3, [r7, #8]
 8002980:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002982:	4b22      	ldr	r3, [pc, #136]	; (8002a0c <MX_GPIO_Init+0xb8>)
 8002984:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002986:	4b21      	ldr	r3, [pc, #132]	; (8002a0c <MX_GPIO_Init+0xb8>)
 8002988:	2120      	movs	r1, #32
 800298a:	430a      	orrs	r2, r1
 800298c:	635a      	str	r2, [r3, #52]	; 0x34
 800298e:	4b1f      	ldr	r3, [pc, #124]	; (8002a0c <MX_GPIO_Init+0xb8>)
 8002990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002992:	2220      	movs	r2, #32
 8002994:	4013      	ands	r3, r2
 8002996:	607b      	str	r3, [r7, #4]
 8002998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800299a:	4b1c      	ldr	r3, [pc, #112]	; (8002a0c <MX_GPIO_Init+0xb8>)
 800299c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800299e:	4b1b      	ldr	r3, [pc, #108]	; (8002a0c <MX_GPIO_Init+0xb8>)
 80029a0:	2101      	movs	r1, #1
 80029a2:	430a      	orrs	r2, r1
 80029a4:	635a      	str	r2, [r3, #52]	; 0x34
 80029a6:	4b19      	ldr	r3, [pc, #100]	; (8002a0c <MX_GPIO_Init+0xb8>)
 80029a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029aa:	2201      	movs	r2, #1
 80029ac:	4013      	ands	r3, r2
 80029ae:	603b      	str	r3, [r7, #0]
 80029b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, GPIO_PIN_RESET);
 80029b2:	4b17      	ldr	r3, [pc, #92]	; (8002a10 <MX_GPIO_Init+0xbc>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	2140      	movs	r1, #64	; 0x40
 80029b8:	0018      	movs	r0, r3
 80029ba:	f001 fae3 	bl	8003f84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : T_NRST_Pin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 80029be:	193b      	adds	r3, r7, r4
 80029c0:	2204      	movs	r2, #4
 80029c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80029c4:	193b      	adds	r3, r7, r4
 80029c6:	2288      	movs	r2, #136	; 0x88
 80029c8:	0352      	lsls	r2, r2, #13
 80029ca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029cc:	193b      	adds	r3, r7, r4
 80029ce:	2200      	movs	r2, #0
 80029d0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 80029d2:	193b      	adds	r3, r7, r4
 80029d4:	4a0f      	ldr	r2, [pc, #60]	; (8002a14 <MX_GPIO_Init+0xc0>)
 80029d6:	0019      	movs	r1, r3
 80029d8:	0010      	movs	r0, r2
 80029da:	f001 f96f 	bl	8003cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_Pin */
  GPIO_InitStruct.Pin = GREEN_Pin;
 80029de:	0021      	movs	r1, r4
 80029e0:	187b      	adds	r3, r7, r1
 80029e2:	2240      	movs	r2, #64	; 0x40
 80029e4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029e6:	187b      	adds	r3, r7, r1
 80029e8:	2201      	movs	r2, #1
 80029ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ec:	187b      	adds	r3, r7, r1
 80029ee:	2200      	movs	r2, #0
 80029f0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029f2:	187b      	adds	r3, r7, r1
 80029f4:	2200      	movs	r2, #0
 80029f6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GREEN_GPIO_Port, &GPIO_InitStruct);
 80029f8:	187b      	adds	r3, r7, r1
 80029fa:	4a05      	ldr	r2, [pc, #20]	; (8002a10 <MX_GPIO_Init+0xbc>)
 80029fc:	0019      	movs	r1, r3
 80029fe:	0010      	movs	r0, r2
 8002a00:	f001 f95c 	bl	8003cbc <HAL_GPIO_Init>

}
 8002a04:	46c0      	nop			; (mov r8, r8)
 8002a06:	46bd      	mov	sp, r7
 8002a08:	b009      	add	sp, #36	; 0x24
 8002a0a:	bd90      	pop	{r4, r7, pc}
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	50000800 	.word	0x50000800
 8002a14:	50001400 	.word	0x50001400

08002a18 <store_m138_voltage>:

/* USER CODE BEGIN 4 */

uint8_t store_m138_voltage ( float* v , char* s )
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
	if ( ! strstr ( s , "$PW " ) )
 8002a22:	4a13      	ldr	r2, [pc, #76]	; (8002a70 <store_m138_voltage+0x58>)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	0011      	movs	r1, r2
 8002a28:	0018      	movs	r0, r3
 8002a2a:	f004 fb71 	bl	8007110 <strstr>
 8002a2e:	1e03      	subs	r3, r0, #0
 8002a30:	d101      	bne.n	8002a36 <store_m138_voltage+0x1e>
		return 0 ;
 8002a32:	2300      	movs	r3, #0
 8002a34:	e017      	b.n	8002a66 <store_m138_voltage+0x4e>
	s = strtok ( (char*) s , " " ) ;
 8002a36:	4a0f      	ldr	r2, [pc, #60]	; (8002a74 <store_m138_voltage+0x5c>)
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	0011      	movs	r1, r2
 8002a3c:	0018      	movs	r0, r3
 8002a3e:	f005 f9ff 	bl	8007e40 <strtok>
 8002a42:	0003      	movs	r3, r0
 8002a44:	603b      	str	r3, [r7, #0]
	s = strtok ( NULL , "," ) ;
 8002a46:	4b0c      	ldr	r3, [pc, #48]	; (8002a78 <store_m138_voltage+0x60>)
 8002a48:	0019      	movs	r1, r3
 8002a4a:	2000      	movs	r0, #0
 8002a4c:	f005 f9f8 	bl	8007e40 <strtok>
 8002a50:	0003      	movs	r3, r0
 8002a52:	603b      	str	r3, [r7, #0]
	*v = (float) strtof ( s , NULL ) ;
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	2100      	movs	r1, #0
 8002a58:	0018      	movs	r0, r3
 8002a5a:	f005 f99b 	bl	8007d94 <strtof>
 8002a5e:	1c02      	adds	r2, r0, #0
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	601a      	str	r2, [r3, #0]
	return 1 ;
 8002a64:	2301      	movs	r3, #1
	//clean_array ( swarm_uart_rx_buff , SWARM_UART_RX_MAX_BUFF_SIZE ) ;
}
 8002a66:	0018      	movs	r0, r3
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	b002      	add	sp, #8
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	46c0      	nop			; (mov r8, r8)
 8002a70:	0800a678 	.word	0x0800a678
 8002a74:	0800a680 	.word	0x0800a680
 8002a78:	0800a684 	.word	0x0800a684

08002a7c <store_m138_dev_id>:

uint8_t store_m138_dev_id ( uint32_t* dev_id , char* s )
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
	if ( ! strstr ( s , "DI=0x" ) )
 8002a86:	4a14      	ldr	r2, [pc, #80]	; (8002ad8 <store_m138_dev_id+0x5c>)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	0011      	movs	r1, r2
 8002a8c:	0018      	movs	r0, r3
 8002a8e:	f004 fb3f 	bl	8007110 <strstr>
 8002a92:	1e03      	subs	r3, r0, #0
 8002a94:	d101      	bne.n	8002a9a <store_m138_dev_id+0x1e>
		return 0 ;
 8002a96:	2300      	movs	r3, #0
 8002a98:	e019      	b.n	8002ace <store_m138_dev_id+0x52>
	s = strtok ( (char*) s , "=" ) ;
 8002a9a:	4a10      	ldr	r2, [pc, #64]	; (8002adc <store_m138_dev_id+0x60>)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	0011      	movs	r1, r2
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	f005 f9cd 	bl	8007e40 <strtok>
 8002aa6:	0003      	movs	r3, r0
 8002aa8:	603b      	str	r3, [r7, #0]
	s = strtok ( NULL , "," ) ;
 8002aaa:	4b0d      	ldr	r3, [pc, #52]	; (8002ae0 <store_m138_dev_id+0x64>)
 8002aac:	0019      	movs	r1, r3
 8002aae:	2000      	movs	r0, #0
 8002ab0:	f005 f9c6 	bl	8007e40 <strtok>
 8002ab4:	0003      	movs	r3, r0
 8002ab6:	603b      	str	r3, [r7, #0]
	*dev_id = (uint32_t) strtol ( s , NULL , 16 ) ;
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	2210      	movs	r2, #16
 8002abc:	2100      	movs	r1, #0
 8002abe:	0018      	movs	r0, r3
 8002ac0:	f005 fab0 	bl	8008024 <strtol>
 8002ac4:	0003      	movs	r3, r0
 8002ac6:	001a      	movs	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	601a      	str	r2, [r3, #0]
	return 1 ;
 8002acc:	2301      	movs	r3, #1
	//clean_array ( swarm_uart_rx_buff , SWARM_UART_RX_MAX_BUFF_SIZE ) ;
}
 8002ace:	0018      	movs	r0, r3
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	b002      	add	sp, #8
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	46c0      	nop			; (mov r8, r8)
 8002ad8:	0800a688 	.word	0x0800a688
 8002adc:	0800a690 	.word	0x0800a690
 8002ae0:	0800a684 	.word	0x0800a684

08002ae4 <m138_init>:

void m138_init ()
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
	send_at_command_2_swarm ( cs_at , cs_answer , 1 ) ;
 8002ae8:	4b50      	ldr	r3, [pc, #320]	; (8002c2c <m138_init+0x148>)
 8002aea:	6818      	ldr	r0, [r3, #0]
 8002aec:	4b50      	ldr	r3, [pc, #320]	; (8002c30 <m138_init+0x14c>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2201      	movs	r2, #1
 8002af2:	0019      	movs	r1, r3
 8002af4:	f000 f8d4 	bl	8002ca0 <send_at_command_2_swarm>
	if ( swarm_checklist == 1 )
 8002af8:	4b4e      	ldr	r3, [pc, #312]	; (8002c34 <m138_init+0x150>)
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d10d      	bne.n	8002b1c <m138_init+0x38>
	{
		store_m138_dev_id ( &m138_dev_id , swarm_answer_buff ) ;
 8002b00:	4a4d      	ldr	r2, [pc, #308]	; (8002c38 <m138_init+0x154>)
 8002b02:	4b4e      	ldr	r3, [pc, #312]	; (8002c3c <m138_init+0x158>)
 8002b04:	0011      	movs	r1, r2
 8002b06:	0018      	movs	r0, r3
 8002b08:	f7ff ffb8 	bl	8002a7c <store_m138_dev_id>
		send_at_command_2_swarm ( rt_0_at , rt_ok_answer , 2 ) ;
 8002b0c:	4b4c      	ldr	r3, [pc, #304]	; (8002c40 <m138_init+0x15c>)
 8002b0e:	6818      	ldr	r0, [r3, #0]
 8002b10:	4b4c      	ldr	r3, [pc, #304]	; (8002c44 <m138_init+0x160>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2202      	movs	r2, #2
 8002b16:	0019      	movs	r1, r3
 8002b18:	f000 f8c2 	bl	8002ca0 <send_at_command_2_swarm>
	}
	if ( swarm_checklist == 2 )
 8002b1c:	4b45      	ldr	r3, [pc, #276]	; (8002c34 <m138_init+0x150>)
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d107      	bne.n	8002b34 <m138_init+0x50>
		send_at_command_2_swarm ( rt_q_rate_at , rt_0_answer , 3 ) ;
 8002b24:	4b48      	ldr	r3, [pc, #288]	; (8002c48 <m138_init+0x164>)
 8002b26:	6818      	ldr	r0, [r3, #0]
 8002b28:	4b48      	ldr	r3, [pc, #288]	; (8002c4c <m138_init+0x168>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2203      	movs	r2, #3
 8002b2e:	0019      	movs	r1, r3
 8002b30:	f000 f8b6 	bl	8002ca0 <send_at_command_2_swarm>
	if ( swarm_checklist == 3 )
 8002b34:	4b3f      	ldr	r3, [pc, #252]	; (8002c34 <m138_init+0x150>)
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	2b03      	cmp	r3, #3
 8002b3a:	d107      	bne.n	8002b4c <m138_init+0x68>
		send_at_command_2_swarm ( pw_0_at , pw_ok_answer , 4 ) ;
 8002b3c:	4b44      	ldr	r3, [pc, #272]	; (8002c50 <m138_init+0x16c>)
 8002b3e:	6818      	ldr	r0, [r3, #0]
 8002b40:	4b44      	ldr	r3, [pc, #272]	; (8002c54 <m138_init+0x170>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2204      	movs	r2, #4
 8002b46:	0019      	movs	r1, r3
 8002b48:	f000 f8aa 	bl	8002ca0 <send_at_command_2_swarm>
	if ( swarm_checklist == 4 )
 8002b4c:	4b39      	ldr	r3, [pc, #228]	; (8002c34 <m138_init+0x150>)
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	2b04      	cmp	r3, #4
 8002b52:	d107      	bne.n	8002b64 <m138_init+0x80>
		send_at_command_2_swarm ( pw_q_rate_at , pw_0_answer , 5 ) ;
 8002b54:	4b40      	ldr	r3, [pc, #256]	; (8002c58 <m138_init+0x174>)
 8002b56:	6818      	ldr	r0, [r3, #0]
 8002b58:	4b40      	ldr	r3, [pc, #256]	; (8002c5c <m138_init+0x178>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2205      	movs	r2, #5
 8002b5e:	0019      	movs	r1, r3
 8002b60:	f000 f89e 	bl	8002ca0 <send_at_command_2_swarm>
	if ( swarm_checklist == 5 )
 8002b64:	4b33      	ldr	r3, [pc, #204]	; (8002c34 <m138_init+0x150>)
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	2b05      	cmp	r3, #5
 8002b6a:	d107      	bne.n	8002b7c <m138_init+0x98>
		send_at_command_2_swarm ( dt_0_at , dt_ok_answer , 6 ) ;
 8002b6c:	4b3c      	ldr	r3, [pc, #240]	; (8002c60 <m138_init+0x17c>)
 8002b6e:	6818      	ldr	r0, [r3, #0]
 8002b70:	4b3c      	ldr	r3, [pc, #240]	; (8002c64 <m138_init+0x180>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2206      	movs	r2, #6
 8002b76:	0019      	movs	r1, r3
 8002b78:	f000 f892 	bl	8002ca0 <send_at_command_2_swarm>
	if ( swarm_checklist == 6 )
 8002b7c:	4b2d      	ldr	r3, [pc, #180]	; (8002c34 <m138_init+0x150>)
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	2b06      	cmp	r3, #6
 8002b82:	d107      	bne.n	8002b94 <m138_init+0xb0>
		send_at_command_2_swarm ( dt_q_rate_at , dt_0_answer , 7 ) ;
 8002b84:	4b38      	ldr	r3, [pc, #224]	; (8002c68 <m138_init+0x184>)
 8002b86:	6818      	ldr	r0, [r3, #0]
 8002b88:	4b38      	ldr	r3, [pc, #224]	; (8002c6c <m138_init+0x188>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2207      	movs	r2, #7
 8002b8e:	0019      	movs	r1, r3
 8002b90:	f000 f886 	bl	8002ca0 <send_at_command_2_swarm>
	if ( swarm_checklist == 7 )
 8002b94:	4b27      	ldr	r3, [pc, #156]	; (8002c34 <m138_init+0x150>)
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	2b07      	cmp	r3, #7
 8002b9a:	d107      	bne.n	8002bac <m138_init+0xc8>
		send_at_command_2_swarm ( gs_0_at , gs_ok_answer  , 8 ) ;
 8002b9c:	4b34      	ldr	r3, [pc, #208]	; (8002c70 <m138_init+0x18c>)
 8002b9e:	6818      	ldr	r0, [r3, #0]
 8002ba0:	4b34      	ldr	r3, [pc, #208]	; (8002c74 <m138_init+0x190>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2208      	movs	r2, #8
 8002ba6:	0019      	movs	r1, r3
 8002ba8:	f000 f87a 	bl	8002ca0 <send_at_command_2_swarm>
	if ( swarm_checklist == 8 )
 8002bac:	4b21      	ldr	r3, [pc, #132]	; (8002c34 <m138_init+0x150>)
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	2b08      	cmp	r3, #8
 8002bb2:	d107      	bne.n	8002bc4 <m138_init+0xe0>
		send_at_command_2_swarm ( gs_q_rate_at , gs_0_answer , 9 ) ;
 8002bb4:	4b30      	ldr	r3, [pc, #192]	; (8002c78 <m138_init+0x194>)
 8002bb6:	6818      	ldr	r0, [r3, #0]
 8002bb8:	4b30      	ldr	r3, [pc, #192]	; (8002c7c <m138_init+0x198>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2209      	movs	r2, #9
 8002bbe:	0019      	movs	r1, r3
 8002bc0:	f000 f86e 	bl	8002ca0 <send_at_command_2_swarm>
	if ( swarm_checklist == 9 )
 8002bc4:	4b1b      	ldr	r3, [pc, #108]	; (8002c34 <m138_init+0x150>)
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	2b09      	cmp	r3, #9
 8002bca:	d107      	bne.n	8002bdc <m138_init+0xf8>
		send_at_command_2_swarm ( gj_0_at , gj_ok_answer  , 10 ) ;
 8002bcc:	4b2c      	ldr	r3, [pc, #176]	; (8002c80 <m138_init+0x19c>)
 8002bce:	6818      	ldr	r0, [r3, #0]
 8002bd0:	4b2c      	ldr	r3, [pc, #176]	; (8002c84 <m138_init+0x1a0>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	220a      	movs	r2, #10
 8002bd6:	0019      	movs	r1, r3
 8002bd8:	f000 f862 	bl	8002ca0 <send_at_command_2_swarm>
	if ( swarm_checklist == 10 )
 8002bdc:	4b15      	ldr	r3, [pc, #84]	; (8002c34 <m138_init+0x150>)
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	2b0a      	cmp	r3, #10
 8002be2:	d107      	bne.n	8002bf4 <m138_init+0x110>
		send_at_command_2_swarm ( gj_q_rate_at , gj_0_answer , 11 ) ;
 8002be4:	4b28      	ldr	r3, [pc, #160]	; (8002c88 <m138_init+0x1a4>)
 8002be6:	6818      	ldr	r0, [r3, #0]
 8002be8:	4b28      	ldr	r3, [pc, #160]	; (8002c8c <m138_init+0x1a8>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	220b      	movs	r2, #11
 8002bee:	0019      	movs	r1, r3
 8002bf0:	f000 f856 	bl	8002ca0 <send_at_command_2_swarm>
	if ( swarm_checklist == 11 )
 8002bf4:	4b0f      	ldr	r3, [pc, #60]	; (8002c34 <m138_init+0x150>)
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	2b0b      	cmp	r3, #11
 8002bfa:	d107      	bne.n	8002c0c <m138_init+0x128>
		send_at_command_2_swarm ( gn_0_at , gn_ok_answer  , 12 ) ;
 8002bfc:	4b24      	ldr	r3, [pc, #144]	; (8002c90 <m138_init+0x1ac>)
 8002bfe:	6818      	ldr	r0, [r3, #0]
 8002c00:	4b24      	ldr	r3, [pc, #144]	; (8002c94 <m138_init+0x1b0>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	220c      	movs	r2, #12
 8002c06:	0019      	movs	r1, r3
 8002c08:	f000 f84a 	bl	8002ca0 <send_at_command_2_swarm>
	if ( swarm_checklist == 12 )
 8002c0c:	4b09      	ldr	r3, [pc, #36]	; (8002c34 <m138_init+0x150>)
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	2b0c      	cmp	r3, #12
 8002c12:	d107      	bne.n	8002c24 <m138_init+0x140>
		send_at_command_2_swarm ( gn_q_rate_at , gn_0_answer , 13 ) ;
 8002c14:	4b20      	ldr	r3, [pc, #128]	; (8002c98 <m138_init+0x1b4>)
 8002c16:	6818      	ldr	r0, [r3, #0]
 8002c18:	4b20      	ldr	r3, [pc, #128]	; (8002c9c <m138_init+0x1b8>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	220d      	movs	r2, #13
 8002c1e:	0019      	movs	r1, r3
 8002c20:	f000 f83e 	bl	8002ca0 <send_at_command_2_swarm>
	//clean_array ( swarm_uart_rx_buff , SWARM_UART_RX_MAX_BUFF_SIZE ) ;
}
 8002c24:	46c0      	nop			; (mov r8, r8)
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	46c0      	nop			; (mov r8, r8)
 8002c2c:	20000000 	.word	0x20000000
 8002c30:	20000038 	.word	0x20000038
 8002c34:	20000597 	.word	0x20000597
 8002c38:	20000438 	.word	0x20000438
 8002c3c:	20000598 	.word	0x20000598
 8002c40:	20000004 	.word	0x20000004
 8002c44:	2000003c 	.word	0x2000003c
 8002c48:	20000008 	.word	0x20000008
 8002c4c:	20000040 	.word	0x20000040
 8002c50:	2000000c 	.word	0x2000000c
 8002c54:	20000044 	.word	0x20000044
 8002c58:	20000010 	.word	0x20000010
 8002c5c:	20000048 	.word	0x20000048
 8002c60:	20000018 	.word	0x20000018
 8002c64:	20000050 	.word	0x20000050
 8002c68:	2000001c 	.word	0x2000001c
 8002c6c:	20000054 	.word	0x20000054
 8002c70:	20000020 	.word	0x20000020
 8002c74:	20000058 	.word	0x20000058
 8002c78:	20000024 	.word	0x20000024
 8002c7c:	2000005c 	.word	0x2000005c
 8002c80:	20000028 	.word	0x20000028
 8002c84:	20000060 	.word	0x20000060
 8002c88:	2000002c 	.word	0x2000002c
 8002c8c:	20000064 	.word	0x20000064
 8002c90:	20000030 	.word	0x20000030
 8002c94:	20000068 	.word	0x20000068
 8002c98:	20000034 	.word	0x20000034
 8002c9c:	2000006c 	.word	0x2000006c

08002ca0 <send_at_command_2_swarm>:

void send_at_command_2_swarm ( const char* at_command , const char* answer , uint16_t step )
{
 8002ca0:	b5b0      	push	{r4, r5, r7, lr}
 8002ca2:	b086      	sub	sp, #24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	1dbb      	adds	r3, r7, #6
 8002cac:	801a      	strh	r2, [r3, #0]
	uint8_t t ;
	uint8_t cs = nmea_checksum ( at_command , strlen ( at_command ) ) ;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	0018      	movs	r0, r3
 8002cb2:	f7fd fa27 	bl	8000104 <strlen>
 8002cb6:	0002      	movs	r2, r0
 8002cb8:	2516      	movs	r5, #22
 8002cba:	197c      	adds	r4, r7, r5
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	0011      	movs	r1, r2
 8002cc0:	0018      	movs	r0, r3
 8002cc2:	f000 f87b 	bl	8002dbc <nmea_checksum>
 8002cc6:	0003      	movs	r3, r0
 8002cc8:	7023      	strb	r3, [r4, #0]
	sprintf ( swarm_uart_tx_buff , "%s*%02x\n" , at_command , cs ) ;
 8002cca:	197b      	adds	r3, r7, r5
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	68fa      	ldr	r2, [r7, #12]
 8002cd0:	4930      	ldr	r1, [pc, #192]	; (8002d94 <send_at_command_2_swarm+0xf4>)
 8002cd2:	4831      	ldr	r0, [pc, #196]	; (8002d98 <send_at_command_2_swarm+0xf8>)
 8002cd4:	f004 f9ea 	bl	80070ac <siprintf>

	for ( t = 0 ; t < 5 ; t++ )
 8002cd8:	2317      	movs	r3, #23
 8002cda:	18fb      	adds	r3, r7, r3
 8002cdc:	2200      	movs	r2, #0
 8002cde:	701a      	strb	r2, [r3, #0]
 8002ce0:	e04c      	b.n	8002d7c <send_at_command_2_swarm+0xdc>
	{
		tim14_on = 1 ;
 8002ce2:	4b2e      	ldr	r3, [pc, #184]	; (8002d9c <send_at_command_2_swarm+0xfc>)
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Start_IT ( &htim14 ) ;
 8002ce8:	4b2d      	ldr	r3, [pc, #180]	; (8002da0 <send_at_command_2_swarm+0x100>)
 8002cea:	0018      	movs	r0, r3
 8002cec:	f002 faa0 	bl	8005230 <HAL_TIM_Base_Start_IT>
		//Usunąc poniższe bo nie dziala do końca przez to
		answer_from_swarm = 0 ;
 8002cf0:	4b2c      	ldr	r3, [pc, #176]	; (8002da4 <send_at_command_2_swarm+0x104>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	701a      	strb	r2, [r3, #0]
		//clean_array ( swarm_uart_rx_buff , SWARM_UART_RX_MAX_BUFF_SIZE ) ;
		//clean_array ( swarm_answer_buff , SWARM_ANSWER_MAX_BUFF_SIZE ) ;
		HAL_UARTEx_ReceiveToIdle_DMA ( SWARM_UART_HANDLER , (uint8_t*) swarm_uart_rx_buff , SWARM_UART_RX_MAX_BUFF_SIZE ) ;
 8002cf6:	492c      	ldr	r1, [pc, #176]	; (8002da8 <send_at_command_2_swarm+0x108>)
 8002cf8:	4b2c      	ldr	r3, [pc, #176]	; (8002dac <send_at_command_2_swarm+0x10c>)
 8002cfa:	2264      	movs	r2, #100	; 0x64
 8002cfc:	0018      	movs	r0, r3
 8002cfe:	f004 f8d3 	bl	8006ea8 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT ( &hdma_usart1_rx, DMA_IT_HT ) ; //Disable Half Transfer interrupt.
 8002d02:	4b2b      	ldr	r3, [pc, #172]	; (8002db0 <send_at_command_2_swarm+0x110>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	4b29      	ldr	r3, [pc, #164]	; (8002db0 <send_at_command_2_swarm+0x110>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2104      	movs	r1, #4
 8002d0e:	438a      	bics	r2, r1
 8002d10:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit ( SWARM_UART_HANDLER , (uint8_t*) swarm_uart_tx_buff ,  strlen ( swarm_uart_tx_buff ) , SWARM_UART_UART_TX_TIMEOUT ) ;
 8002d12:	4b21      	ldr	r3, [pc, #132]	; (8002d98 <send_at_command_2_swarm+0xf8>)
 8002d14:	0018      	movs	r0, r3
 8002d16:	f7fd f9f5 	bl	8000104 <strlen>
 8002d1a:	0003      	movs	r3, r0
 8002d1c:	b29a      	uxth	r2, r3
 8002d1e:	491e      	ldr	r1, [pc, #120]	; (8002d98 <send_at_command_2_swarm+0xf8>)
 8002d20:	4822      	ldr	r0, [pc, #136]	; (8002dac <send_at_command_2_swarm+0x10c>)
 8002d22:	2364      	movs	r3, #100	; 0x64
 8002d24:	f002 fd3c 	bl	80057a0 <HAL_UART_Transmit>
		while ( tim14_on )
 8002d28:	e015      	b.n	8002d56 <send_at_command_2_swarm+0xb6>
		{
			if ( answer_from_swarm == 1 )
 8002d2a:	4b1e      	ldr	r3, [pc, #120]	; (8002da4 <send_at_command_2_swarm+0x104>)
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d111      	bne.n	8002d56 <send_at_command_2_swarm+0xb6>
			{
				if ( strncmp ( swarm_answer_buff , answer , strlen ( answer ) ) == 0 )
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	0018      	movs	r0, r3
 8002d36:	f7fd f9e5 	bl	8000104 <strlen>
 8002d3a:	0002      	movs	r2, r0
 8002d3c:	68b9      	ldr	r1, [r7, #8]
 8002d3e:	4b1d      	ldr	r3, [pc, #116]	; (8002db4 <send_at_command_2_swarm+0x114>)
 8002d40:	0018      	movs	r0, r3
 8002d42:	f004 f9d3 	bl	80070ec <strncmp>
 8002d46:	1e03      	subs	r3, r0, #0
 8002d48:	d10a      	bne.n	8002d60 <send_at_command_2_swarm+0xc0>
					swarm_checklist = step ;
 8002d4a:	1dbb      	adds	r3, r7, #6
 8002d4c:	881b      	ldrh	r3, [r3, #0]
 8002d4e:	b2da      	uxtb	r2, r3
 8002d50:	4b19      	ldr	r3, [pc, #100]	; (8002db8 <send_at_command_2_swarm+0x118>)
 8002d52:	701a      	strb	r2, [r3, #0]
				break ;
 8002d54:	e004      	b.n	8002d60 <send_at_command_2_swarm+0xc0>
		while ( tim14_on )
 8002d56:	4b11      	ldr	r3, [pc, #68]	; (8002d9c <send_at_command_2_swarm+0xfc>)
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d1e5      	bne.n	8002d2a <send_at_command_2_swarm+0x8a>
 8002d5e:	e000      	b.n	8002d62 <send_at_command_2_swarm+0xc2>
				break ;
 8002d60:	46c0      	nop			; (mov r8, r8)
			}
		}
		if ( swarm_checklist == step )
 8002d62:	4b15      	ldr	r3, [pc, #84]	; (8002db8 <send_at_command_2_swarm+0x118>)
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	1dba      	adds	r2, r7, #6
 8002d6a:	8812      	ldrh	r2, [r2, #0]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d00b      	beq.n	8002d88 <send_at_command_2_swarm+0xe8>
	for ( t = 0 ; t < 5 ; t++ )
 8002d70:	2117      	movs	r1, #23
 8002d72:	187b      	adds	r3, r7, r1
 8002d74:	781a      	ldrb	r2, [r3, #0]
 8002d76:	187b      	adds	r3, r7, r1
 8002d78:	3201      	adds	r2, #1
 8002d7a:	701a      	strb	r2, [r3, #0]
 8002d7c:	2317      	movs	r3, #23
 8002d7e:	18fb      	adds	r3, r7, r3
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	2b04      	cmp	r3, #4
 8002d84:	d9ad      	bls.n	8002ce2 <send_at_command_2_swarm+0x42>
			break ;
	}
	//clean_array ( swarm_answer_buff , SWARM_ANSWER_MAX_BUFF_SIZE ) ;
}
 8002d86:	e000      	b.n	8002d8a <send_at_command_2_swarm+0xea>
			break ;
 8002d88:	46c0      	nop			; (mov r8, r8)
}
 8002d8a:	46c0      	nop			; (mov r8, r8)
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	b006      	add	sp, #24
 8002d90:	bdb0      	pop	{r4, r5, r7, pc}
 8002d92:	46c0      	nop			; (mov r8, r8)
 8002d94:	0800a694 	.word	0x0800a694
 8002d98:	2000049c 	.word	0x2000049c
 8002d9c:	20000596 	.word	0x20000596
 8002da0:	20000298 	.word	0x20000298
 8002da4:	200005a0 	.word	0x200005a0
 8002da8:	200003d4 	.word	0x200003d4
 8002dac:	200002e4 	.word	0x200002e4
 8002db0:	20000378 	.word	0x20000378
 8002db4:	20000438 	.word	0x20000438
 8002db8:	20000597 	.word	0x20000597

08002dbc <nmea_checksum>:
	for ( i = 0 ; i < array_max_size ; i++ )
		array[i] = 0 ;
}

uint8_t nmea_checksum ( const char *message , size_t len )
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
	size_t i = 0 ;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	60fb      	str	r3, [r7, #12]
	uint8_t cs ;
	if ( message [0] == '$' )
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	2b24      	cmp	r3, #36	; 0x24
 8002dd0:	d102      	bne.n	8002dd8 <nmea_checksum+0x1c>
		i++ ;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	60fb      	str	r3, [r7, #12]
	for ( cs = 0 ; ( i < len ) && message [i] ; i++ )
 8002dd8:	230b      	movs	r3, #11
 8002dda:	18fb      	adds	r3, r7, r3
 8002ddc:	2200      	movs	r2, #0
 8002dde:	701a      	strb	r2, [r3, #0]
 8002de0:	e00c      	b.n	8002dfc <nmea_checksum+0x40>
		cs ^= ( (uint8_t) message [i] ) ;
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	18d3      	adds	r3, r2, r3
 8002de8:	7819      	ldrb	r1, [r3, #0]
 8002dea:	220b      	movs	r2, #11
 8002dec:	18bb      	adds	r3, r7, r2
 8002dee:	18ba      	adds	r2, r7, r2
 8002df0:	7812      	ldrb	r2, [r2, #0]
 8002df2:	404a      	eors	r2, r1
 8002df4:	701a      	strb	r2, [r3, #0]
	for ( cs = 0 ; ( i < len ) && message [i] ; i++ )
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	3301      	adds	r3, #1
 8002dfa:	60fb      	str	r3, [r7, #12]
 8002dfc:	68fa      	ldr	r2, [r7, #12]
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d205      	bcs.n	8002e10 <nmea_checksum+0x54>
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	18d3      	adds	r3, r2, r3
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d1e8      	bne.n	8002de2 <nmea_checksum+0x26>
	return cs;
 8002e10:	230b      	movs	r3, #11
 8002e12:	18fb      	adds	r3, r7, r3
 8002e14:	781b      	ldrb	r3, [r3, #0]
}
 8002e16:	0018      	movs	r0, r3
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	b004      	add	sp, #16
 8002e1c:	bd80      	pop	{r7, pc}
	...

08002e20 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback ( UART_HandleTypeDef *huart , uint16_t Size )
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	000a      	movs	r2, r1
 8002e2a:	1cbb      	adds	r3, r7, #2
 8002e2c:	801a      	strh	r2, [r3, #0]
    if ( huart->Instance == USART1 )
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a0b      	ldr	r2, [pc, #44]	; (8002e60 <HAL_UARTEx_RxEventCallback+0x40>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d10e      	bne.n	8002e56 <HAL_UARTEx_RxEventCallback+0x36>
    {
    	memcpy ( swarm_answer_buff , swarm_uart_rx_buff , Size ) ;
 8002e38:	1cbb      	adds	r3, r7, #2
 8002e3a:	881a      	ldrh	r2, [r3, #0]
 8002e3c:	4909      	ldr	r1, [pc, #36]	; (8002e64 <HAL_UARTEx_RxEventCallback+0x44>)
 8002e3e:	4b0a      	ldr	r3, [pc, #40]	; (8002e68 <HAL_UARTEx_RxEventCallback+0x48>)
 8002e40:	0018      	movs	r0, r3
 8002e42:	f004 f921 	bl	8007088 <memcpy>
    	swarm_uart_rx_buff[Size] = '\0' ;
 8002e46:	1cbb      	adds	r3, r7, #2
 8002e48:	881b      	ldrh	r3, [r3, #0]
 8002e4a:	4a06      	ldr	r2, [pc, #24]	; (8002e64 <HAL_UARTEx_RxEventCallback+0x44>)
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	54d1      	strb	r1, [r2, r3]
    	answer_from_swarm = 1 ;
 8002e50:	4b06      	ldr	r3, [pc, #24]	; (8002e6c <HAL_UARTEx_RxEventCallback+0x4c>)
 8002e52:	2201      	movs	r2, #1
 8002e54:	701a      	strb	r2, [r3, #0]
    }
}
 8002e56:	46c0      	nop			; (mov r8, r8)
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	b002      	add	sp, #8
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	46c0      	nop			; (mov r8, r8)
 8002e60:	40013800 	.word	0x40013800
 8002e64:	200003d4 	.word	0x200003d4
 8002e68:	20000438 	.word	0x20000438
 8002e6c:	200005a0 	.word	0x200005a0

08002e70 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
	if ( htim->Instance == TIM14 )
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a06      	ldr	r2, [pc, #24]	; (8002e98 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d106      	bne.n	8002e90 <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		tim14_on = 0 ;
 8002e82:	4b06      	ldr	r3, [pc, #24]	; (8002e9c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT ( &htim14 ) ;
 8002e88:	4b05      	ldr	r3, [pc, #20]	; (8002ea0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002e8a:	0018      	movs	r0, r3
 8002e8c:	f002 fa24 	bl	80052d8 <HAL_TIM_Base_Stop_IT>
	}
}
 8002e90:	46c0      	nop			; (mov r8, r8)
 8002e92:	46bd      	mov	sp, r7
 8002e94:	b002      	add	sp, #8
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	40002000 	.word	0x40002000
 8002e9c:	20000596 	.word	0x20000596
 8002ea0:	20000298 	.word	0x20000298

08002ea4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ea8:	b672      	cpsid	i
}
 8002eaa:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002eac:	e7fe      	b.n	8002eac <Error_Handler+0x8>
	...

08002eb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eb6:	4b0f      	ldr	r3, [pc, #60]	; (8002ef4 <HAL_MspInit+0x44>)
 8002eb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002eba:	4b0e      	ldr	r3, [pc, #56]	; (8002ef4 <HAL_MspInit+0x44>)
 8002ebc:	2101      	movs	r1, #1
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	641a      	str	r2, [r3, #64]	; 0x40
 8002ec2:	4b0c      	ldr	r3, [pc, #48]	; (8002ef4 <HAL_MspInit+0x44>)
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	4013      	ands	r3, r2
 8002eca:	607b      	str	r3, [r7, #4]
 8002ecc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ece:	4b09      	ldr	r3, [pc, #36]	; (8002ef4 <HAL_MspInit+0x44>)
 8002ed0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ed2:	4b08      	ldr	r3, [pc, #32]	; (8002ef4 <HAL_MspInit+0x44>)
 8002ed4:	2180      	movs	r1, #128	; 0x80
 8002ed6:	0549      	lsls	r1, r1, #21
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	63da      	str	r2, [r3, #60]	; 0x3c
 8002edc:	4b05      	ldr	r3, [pc, #20]	; (8002ef4 <HAL_MspInit+0x44>)
 8002ede:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ee0:	2380      	movs	r3, #128	; 0x80
 8002ee2:	055b      	lsls	r3, r3, #21
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	603b      	str	r3, [r7, #0]
 8002ee8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002eea:	46c0      	nop			; (mov r8, r8)
 8002eec:	46bd      	mov	sp, r7
 8002eee:	b002      	add	sp, #8
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	46c0      	nop			; (mov r8, r8)
 8002ef4:	40021000 	.word	0x40021000

08002ef8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002ef8:	b590      	push	{r4, r7, lr}
 8002efa:	b08f      	sub	sp, #60	; 0x3c
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f00:	2410      	movs	r4, #16
 8002f02:	193b      	adds	r3, r7, r4
 8002f04:	0018      	movs	r0, r3
 8002f06:	2328      	movs	r3, #40	; 0x28
 8002f08:	001a      	movs	r2, r3
 8002f0a:	2100      	movs	r1, #0
 8002f0c:	f004 f8c5 	bl	800709a <memset>
  if(hrtc->Instance==RTC)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a19      	ldr	r2, [pc, #100]	; (8002f7c <HAL_RTC_MspInit+0x84>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d12c      	bne.n	8002f74 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002f1a:	193b      	adds	r3, r7, r4
 8002f1c:	2280      	movs	r2, #128	; 0x80
 8002f1e:	0292      	lsls	r2, r2, #10
 8002f20:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002f22:	193b      	adds	r3, r7, r4
 8002f24:	2280      	movs	r2, #128	; 0x80
 8002f26:	0052      	lsls	r2, r2, #1
 8002f28:	625a      	str	r2, [r3, #36]	; 0x24

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f2a:	193b      	adds	r3, r7, r4
 8002f2c:	0018      	movs	r0, r3
 8002f2e:	f001 fd9d 	bl	8004a6c <HAL_RCCEx_PeriphCLKConfig>
 8002f32:	1e03      	subs	r3, r0, #0
 8002f34:	d001      	beq.n	8002f3a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8002f36:	f7ff ffb5 	bl	8002ea4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002f3a:	4b11      	ldr	r3, [pc, #68]	; (8002f80 <HAL_RTC_MspInit+0x88>)
 8002f3c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002f3e:	4b10      	ldr	r3, [pc, #64]	; (8002f80 <HAL_RTC_MspInit+0x88>)
 8002f40:	2180      	movs	r1, #128	; 0x80
 8002f42:	0209      	lsls	r1, r1, #8
 8002f44:	430a      	orrs	r2, r1
 8002f46:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002f48:	4b0d      	ldr	r3, [pc, #52]	; (8002f80 <HAL_RTC_MspInit+0x88>)
 8002f4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f4c:	4b0c      	ldr	r3, [pc, #48]	; (8002f80 <HAL_RTC_MspInit+0x88>)
 8002f4e:	2180      	movs	r1, #128	; 0x80
 8002f50:	00c9      	lsls	r1, r1, #3
 8002f52:	430a      	orrs	r2, r1
 8002f54:	63da      	str	r2, [r3, #60]	; 0x3c
 8002f56:	4b0a      	ldr	r3, [pc, #40]	; (8002f80 <HAL_RTC_MspInit+0x88>)
 8002f58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f5a:	2380      	movs	r3, #128	; 0x80
 8002f5c:	00db      	lsls	r3, r3, #3
 8002f5e:	4013      	ands	r3, r2
 8002f60:	60fb      	str	r3, [r7, #12]
 8002f62:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8002f64:	2200      	movs	r2, #0
 8002f66:	2100      	movs	r1, #0
 8002f68:	2002      	movs	r0, #2
 8002f6a:	f000 fb57 	bl	800361c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8002f6e:	2002      	movs	r0, #2
 8002f70:	f000 fb69 	bl	8003646 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002f74:	46c0      	nop			; (mov r8, r8)
 8002f76:	46bd      	mov	sp, r7
 8002f78:	b00f      	add	sp, #60	; 0x3c
 8002f7a:	bd90      	pop	{r4, r7, pc}
 8002f7c:	40002800 	.word	0x40002800
 8002f80:	40021000 	.word	0x40021000

08002f84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a0e      	ldr	r2, [pc, #56]	; (8002fcc <HAL_TIM_Base_MspInit+0x48>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d115      	bne.n	8002fc2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002f96:	4b0e      	ldr	r3, [pc, #56]	; (8002fd0 <HAL_TIM_Base_MspInit+0x4c>)
 8002f98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f9a:	4b0d      	ldr	r3, [pc, #52]	; (8002fd0 <HAL_TIM_Base_MspInit+0x4c>)
 8002f9c:	2180      	movs	r1, #128	; 0x80
 8002f9e:	0209      	lsls	r1, r1, #8
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	641a      	str	r2, [r3, #64]	; 0x40
 8002fa4:	4b0a      	ldr	r3, [pc, #40]	; (8002fd0 <HAL_TIM_Base_MspInit+0x4c>)
 8002fa6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fa8:	2380      	movs	r3, #128	; 0x80
 8002faa:	021b      	lsls	r3, r3, #8
 8002fac:	4013      	ands	r3, r2
 8002fae:	60fb      	str	r3, [r7, #12]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	2100      	movs	r1, #0
 8002fb6:	2013      	movs	r0, #19
 8002fb8:	f000 fb30 	bl	800361c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8002fbc:	2013      	movs	r0, #19
 8002fbe:	f000 fb42 	bl	8003646 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8002fc2:	46c0      	nop			; (mov r8, r8)
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	b004      	add	sp, #16
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	46c0      	nop			; (mov r8, r8)
 8002fcc:	40002000 	.word	0x40002000
 8002fd0:	40021000 	.word	0x40021000

08002fd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002fd4:	b590      	push	{r4, r7, lr}
 8002fd6:	b095      	sub	sp, #84	; 0x54
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fdc:	233c      	movs	r3, #60	; 0x3c
 8002fde:	18fb      	adds	r3, r7, r3
 8002fe0:	0018      	movs	r0, r3
 8002fe2:	2314      	movs	r3, #20
 8002fe4:	001a      	movs	r2, r3
 8002fe6:	2100      	movs	r1, #0
 8002fe8:	f004 f857 	bl	800709a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002fec:	2414      	movs	r4, #20
 8002fee:	193b      	adds	r3, r7, r4
 8002ff0:	0018      	movs	r0, r3
 8002ff2:	2328      	movs	r3, #40	; 0x28
 8002ff4:	001a      	movs	r2, r3
 8002ff6:	2100      	movs	r1, #0
 8002ff8:	f004 f84f 	bl	800709a <memset>
  if(huart->Instance==USART1)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a3c      	ldr	r2, [pc, #240]	; (80030f4 <HAL_UART_MspInit+0x120>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d171      	bne.n	80030ea <HAL_UART_MspInit+0x116>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003006:	193b      	adds	r3, r7, r4
 8003008:	2201      	movs	r2, #1
 800300a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800300c:	193b      	adds	r3, r7, r4
 800300e:	2200      	movs	r2, #0
 8003010:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003012:	193b      	adds	r3, r7, r4
 8003014:	0018      	movs	r0, r3
 8003016:	f001 fd29 	bl	8004a6c <HAL_RCCEx_PeriphCLKConfig>
 800301a:	1e03      	subs	r3, r0, #0
 800301c:	d001      	beq.n	8003022 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800301e:	f7ff ff41 	bl	8002ea4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003022:	4b35      	ldr	r3, [pc, #212]	; (80030f8 <HAL_UART_MspInit+0x124>)
 8003024:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003026:	4b34      	ldr	r3, [pc, #208]	; (80030f8 <HAL_UART_MspInit+0x124>)
 8003028:	2180      	movs	r1, #128	; 0x80
 800302a:	01c9      	lsls	r1, r1, #7
 800302c:	430a      	orrs	r2, r1
 800302e:	641a      	str	r2, [r3, #64]	; 0x40
 8003030:	4b31      	ldr	r3, [pc, #196]	; (80030f8 <HAL_UART_MspInit+0x124>)
 8003032:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003034:	2380      	movs	r3, #128	; 0x80
 8003036:	01db      	lsls	r3, r3, #7
 8003038:	4013      	ands	r3, r2
 800303a:	613b      	str	r3, [r7, #16]
 800303c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800303e:	4b2e      	ldr	r3, [pc, #184]	; (80030f8 <HAL_UART_MspInit+0x124>)
 8003040:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003042:	4b2d      	ldr	r3, [pc, #180]	; (80030f8 <HAL_UART_MspInit+0x124>)
 8003044:	2101      	movs	r1, #1
 8003046:	430a      	orrs	r2, r1
 8003048:	635a      	str	r2, [r3, #52]	; 0x34
 800304a:	4b2b      	ldr	r3, [pc, #172]	; (80030f8 <HAL_UART_MspInit+0x124>)
 800304c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800304e:	2201      	movs	r2, #1
 8003050:	4013      	ands	r3, r2
 8003052:	60fb      	str	r3, [r7, #12]
 8003054:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003056:	213c      	movs	r1, #60	; 0x3c
 8003058:	187b      	adds	r3, r7, r1
 800305a:	22c0      	movs	r2, #192	; 0xc0
 800305c:	00d2      	lsls	r2, r2, #3
 800305e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003060:	187b      	adds	r3, r7, r1
 8003062:	2202      	movs	r2, #2
 8003064:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003066:	187b      	adds	r3, r7, r1
 8003068:	2200      	movs	r2, #0
 800306a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800306c:	187b      	adds	r3, r7, r1
 800306e:	2200      	movs	r2, #0
 8003070:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8003072:	187b      	adds	r3, r7, r1
 8003074:	2201      	movs	r2, #1
 8003076:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003078:	187a      	adds	r2, r7, r1
 800307a:	23a0      	movs	r3, #160	; 0xa0
 800307c:	05db      	lsls	r3, r3, #23
 800307e:	0011      	movs	r1, r2
 8003080:	0018      	movs	r0, r3
 8003082:	f000 fe1b 	bl	8003cbc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8003086:	4b1d      	ldr	r3, [pc, #116]	; (80030fc <HAL_UART_MspInit+0x128>)
 8003088:	4a1d      	ldr	r2, [pc, #116]	; (8003100 <HAL_UART_MspInit+0x12c>)
 800308a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800308c:	4b1b      	ldr	r3, [pc, #108]	; (80030fc <HAL_UART_MspInit+0x128>)
 800308e:	2232      	movs	r2, #50	; 0x32
 8003090:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003092:	4b1a      	ldr	r3, [pc, #104]	; (80030fc <HAL_UART_MspInit+0x128>)
 8003094:	2200      	movs	r2, #0
 8003096:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003098:	4b18      	ldr	r3, [pc, #96]	; (80030fc <HAL_UART_MspInit+0x128>)
 800309a:	2200      	movs	r2, #0
 800309c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800309e:	4b17      	ldr	r3, [pc, #92]	; (80030fc <HAL_UART_MspInit+0x128>)
 80030a0:	2280      	movs	r2, #128	; 0x80
 80030a2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030a4:	4b15      	ldr	r3, [pc, #84]	; (80030fc <HAL_UART_MspInit+0x128>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030aa:	4b14      	ldr	r3, [pc, #80]	; (80030fc <HAL_UART_MspInit+0x128>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80030b0:	4b12      	ldr	r3, [pc, #72]	; (80030fc <HAL_UART_MspInit+0x128>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80030b6:	4b11      	ldr	r3, [pc, #68]	; (80030fc <HAL_UART_MspInit+0x128>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80030bc:	4b0f      	ldr	r3, [pc, #60]	; (80030fc <HAL_UART_MspInit+0x128>)
 80030be:	0018      	movs	r0, r3
 80030c0:	f000 fade 	bl	8003680 <HAL_DMA_Init>
 80030c4:	1e03      	subs	r3, r0, #0
 80030c6:	d001      	beq.n	80030cc <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 80030c8:	f7ff feec 	bl	8002ea4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2180      	movs	r1, #128	; 0x80
 80030d0:	4a0a      	ldr	r2, [pc, #40]	; (80030fc <HAL_UART_MspInit+0x128>)
 80030d2:	505a      	str	r2, [r3, r1]
 80030d4:	4b09      	ldr	r3, [pc, #36]	; (80030fc <HAL_UART_MspInit+0x128>)
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80030da:	2200      	movs	r2, #0
 80030dc:	2100      	movs	r1, #0
 80030de:	201b      	movs	r0, #27
 80030e0:	f000 fa9c 	bl	800361c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80030e4:	201b      	movs	r0, #27
 80030e6:	f000 faae 	bl	8003646 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80030ea:	46c0      	nop			; (mov r8, r8)
 80030ec:	46bd      	mov	sp, r7
 80030ee:	b015      	add	sp, #84	; 0x54
 80030f0:	bd90      	pop	{r4, r7, pc}
 80030f2:	46c0      	nop			; (mov r8, r8)
 80030f4:	40013800 	.word	0x40013800
 80030f8:	40021000 	.word	0x40021000
 80030fc:	20000378 	.word	0x20000378
 8003100:	40020008 	.word	0x40020008

08003104 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003108:	e7fe      	b.n	8003108 <NMI_Handler+0x4>

0800310a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800310a:	b580      	push	{r7, lr}
 800310c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800310e:	e7fe      	b.n	800310e <HardFault_Handler+0x4>

08003110 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003114:	46c0      	nop			; (mov r8, r8)
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}

0800311a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800311a:	b580      	push	{r7, lr}
 800311c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800311e:	46c0      	nop			; (mov r8, r8)
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003128:	f000 f98c 	bl	8003444 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800312c:	46c0      	nop			; (mov r8, r8)
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
	...

08003134 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8003138:	4b03      	ldr	r3, [pc, #12]	; (8003148 <RTC_TAMP_IRQHandler+0x14>)
 800313a:	0018      	movs	r0, r3
 800313c:	f001 fffa 	bl	8005134 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8003140:	46c0      	nop			; (mov r8, r8)
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	46c0      	nop			; (mov r8, r8)
 8003148:	2000026c 	.word	0x2000026c

0800314c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003150:	4b03      	ldr	r3, [pc, #12]	; (8003160 <DMA1_Channel1_IRQHandler+0x14>)
 8003152:	0018      	movs	r0, r3
 8003154:	f000 fc70 	bl	8003a38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003158:	46c0      	nop			; (mov r8, r8)
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	46c0      	nop			; (mov r8, r8)
 8003160:	20000378 	.word	0x20000378

08003164 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8003168:	4b03      	ldr	r3, [pc, #12]	; (8003178 <TIM14_IRQHandler+0x14>)
 800316a:	0018      	movs	r0, r3
 800316c:	f002 f8e2 	bl	8005334 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8003170:	46c0      	nop			; (mov r8, r8)
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	46c0      	nop			; (mov r8, r8)
 8003178:	20000298 	.word	0x20000298

0800317c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003180:	4b03      	ldr	r3, [pc, #12]	; (8003190 <USART1_IRQHandler+0x14>)
 8003182:	0018      	movs	r0, r3
 8003184:	f002 fba8 	bl	80058d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003188:	46c0      	nop			; (mov r8, r8)
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	46c0      	nop			; (mov r8, r8)
 8003190:	200002e4 	.word	0x200002e4

08003194 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
	return 1;
 8003198:	2301      	movs	r3, #1
}
 800319a:	0018      	movs	r0, r3
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}

080031a0 <_kill>:

int _kill(int pid, int sig)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80031aa:	f003 ff43 	bl	8007034 <__errno>
 80031ae:	0003      	movs	r3, r0
 80031b0:	2216      	movs	r2, #22
 80031b2:	601a      	str	r2, [r3, #0]
	return -1;
 80031b4:	2301      	movs	r3, #1
 80031b6:	425b      	negs	r3, r3
}
 80031b8:	0018      	movs	r0, r3
 80031ba:	46bd      	mov	sp, r7
 80031bc:	b002      	add	sp, #8
 80031be:	bd80      	pop	{r7, pc}

080031c0 <_exit>:

void _exit (int status)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80031c8:	2301      	movs	r3, #1
 80031ca:	425a      	negs	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	0011      	movs	r1, r2
 80031d0:	0018      	movs	r0, r3
 80031d2:	f7ff ffe5 	bl	80031a0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80031d6:	e7fe      	b.n	80031d6 <_exit+0x16>

080031d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b086      	sub	sp, #24
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031e4:	2300      	movs	r3, #0
 80031e6:	617b      	str	r3, [r7, #20]
 80031e8:	e00a      	b.n	8003200 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80031ea:	e000      	b.n	80031ee <_read+0x16>
 80031ec:	bf00      	nop
 80031ee:	0001      	movs	r1, r0
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	1c5a      	adds	r2, r3, #1
 80031f4:	60ba      	str	r2, [r7, #8]
 80031f6:	b2ca      	uxtb	r2, r1
 80031f8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	3301      	adds	r3, #1
 80031fe:	617b      	str	r3, [r7, #20]
 8003200:	697a      	ldr	r2, [r7, #20]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	429a      	cmp	r2, r3
 8003206:	dbf0      	blt.n	80031ea <_read+0x12>
	}

return len;
 8003208:	687b      	ldr	r3, [r7, #4]
}
 800320a:	0018      	movs	r0, r3
 800320c:	46bd      	mov	sp, r7
 800320e:	b006      	add	sp, #24
 8003210:	bd80      	pop	{r7, pc}

08003212 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003212:	b580      	push	{r7, lr}
 8003214:	b086      	sub	sp, #24
 8003216:	af00      	add	r7, sp, #0
 8003218:	60f8      	str	r0, [r7, #12]
 800321a:	60b9      	str	r1, [r7, #8]
 800321c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800321e:	2300      	movs	r3, #0
 8003220:	617b      	str	r3, [r7, #20]
 8003222:	e009      	b.n	8003238 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	1c5a      	adds	r2, r3, #1
 8003228:	60ba      	str	r2, [r7, #8]
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	0018      	movs	r0, r3
 800322e:	e000      	b.n	8003232 <_write+0x20>
 8003230:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	3301      	adds	r3, #1
 8003236:	617b      	str	r3, [r7, #20]
 8003238:	697a      	ldr	r2, [r7, #20]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	429a      	cmp	r2, r3
 800323e:	dbf1      	blt.n	8003224 <_write+0x12>
	}
	return len;
 8003240:	687b      	ldr	r3, [r7, #4]
}
 8003242:	0018      	movs	r0, r3
 8003244:	46bd      	mov	sp, r7
 8003246:	b006      	add	sp, #24
 8003248:	bd80      	pop	{r7, pc}

0800324a <_close>:

int _close(int file)
{
 800324a:	b580      	push	{r7, lr}
 800324c:	b082      	sub	sp, #8
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
	return -1;
 8003252:	2301      	movs	r3, #1
 8003254:	425b      	negs	r3, r3
}
 8003256:	0018      	movs	r0, r3
 8003258:	46bd      	mov	sp, r7
 800325a:	b002      	add	sp, #8
 800325c:	bd80      	pop	{r7, pc}

0800325e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800325e:	b580      	push	{r7, lr}
 8003260:	b082      	sub	sp, #8
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
 8003266:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	2280      	movs	r2, #128	; 0x80
 800326c:	0192      	lsls	r2, r2, #6
 800326e:	605a      	str	r2, [r3, #4]
	return 0;
 8003270:	2300      	movs	r3, #0
}
 8003272:	0018      	movs	r0, r3
 8003274:	46bd      	mov	sp, r7
 8003276:	b002      	add	sp, #8
 8003278:	bd80      	pop	{r7, pc}

0800327a <_isatty>:

int _isatty(int file)
{
 800327a:	b580      	push	{r7, lr}
 800327c:	b082      	sub	sp, #8
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
	return 1;
 8003282:	2301      	movs	r3, #1
}
 8003284:	0018      	movs	r0, r3
 8003286:	46bd      	mov	sp, r7
 8003288:	b002      	add	sp, #8
 800328a:	bd80      	pop	{r7, pc}

0800328c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	607a      	str	r2, [r7, #4]
	return 0;
 8003298:	2300      	movs	r3, #0
}
 800329a:	0018      	movs	r0, r3
 800329c:	46bd      	mov	sp, r7
 800329e:	b004      	add	sp, #16
 80032a0:	bd80      	pop	{r7, pc}
	...

080032a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b086      	sub	sp, #24
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80032ac:	4a14      	ldr	r2, [pc, #80]	; (8003300 <_sbrk+0x5c>)
 80032ae:	4b15      	ldr	r3, [pc, #84]	; (8003304 <_sbrk+0x60>)
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80032b8:	4b13      	ldr	r3, [pc, #76]	; (8003308 <_sbrk+0x64>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d102      	bne.n	80032c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80032c0:	4b11      	ldr	r3, [pc, #68]	; (8003308 <_sbrk+0x64>)
 80032c2:	4a12      	ldr	r2, [pc, #72]	; (800330c <_sbrk+0x68>)
 80032c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80032c6:	4b10      	ldr	r3, [pc, #64]	; (8003308 <_sbrk+0x64>)
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	18d3      	adds	r3, r2, r3
 80032ce:	693a      	ldr	r2, [r7, #16]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d207      	bcs.n	80032e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80032d4:	f003 feae 	bl	8007034 <__errno>
 80032d8:	0003      	movs	r3, r0
 80032da:	220c      	movs	r2, #12
 80032dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80032de:	2301      	movs	r3, #1
 80032e0:	425b      	negs	r3, r3
 80032e2:	e009      	b.n	80032f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80032e4:	4b08      	ldr	r3, [pc, #32]	; (8003308 <_sbrk+0x64>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80032ea:	4b07      	ldr	r3, [pc, #28]	; (8003308 <_sbrk+0x64>)
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	18d2      	adds	r2, r2, r3
 80032f2:	4b05      	ldr	r3, [pc, #20]	; (8003308 <_sbrk+0x64>)
 80032f4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80032f6:	68fb      	ldr	r3, [r7, #12]
}
 80032f8:	0018      	movs	r0, r3
 80032fa:	46bd      	mov	sp, r7
 80032fc:	b006      	add	sp, #24
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	20002000 	.word	0x20002000
 8003304:	00000400 	.word	0x00000400
 8003308:	200005a4 	.word	0x200005a4
 800330c:	200005c0 	.word	0x200005c0

08003310 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003314:	46c0      	nop			; (mov r8, r8)
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
	...

0800331c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800331c:	480d      	ldr	r0, [pc, #52]	; (8003354 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800331e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003320:	f7ff fff6 	bl	8003310 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003324:	480c      	ldr	r0, [pc, #48]	; (8003358 <LoopForever+0x6>)
  ldr r1, =_edata
 8003326:	490d      	ldr	r1, [pc, #52]	; (800335c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003328:	4a0d      	ldr	r2, [pc, #52]	; (8003360 <LoopForever+0xe>)
  movs r3, #0
 800332a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800332c:	e002      	b.n	8003334 <LoopCopyDataInit>

0800332e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800332e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003330:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003332:	3304      	adds	r3, #4

08003334 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003334:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003336:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003338:	d3f9      	bcc.n	800332e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800333a:	4a0a      	ldr	r2, [pc, #40]	; (8003364 <LoopForever+0x12>)
  ldr r4, =_ebss
 800333c:	4c0a      	ldr	r4, [pc, #40]	; (8003368 <LoopForever+0x16>)
  movs r3, #0
 800333e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003340:	e001      	b.n	8003346 <LoopFillZerobss>

08003342 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003342:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003344:	3204      	adds	r2, #4

08003346 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003346:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003348:	d3fb      	bcc.n	8003342 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800334a:	f003 fe79 	bl	8007040 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800334e:	f7ff f99d 	bl	800268c <main>

08003352 <LoopForever>:

LoopForever:
  b LoopForever
 8003352:	e7fe      	b.n	8003352 <LoopForever>
  ldr   r0, =_estack
 8003354:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003358:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800335c:	20000250 	.word	0x20000250
  ldr r2, =_sidata
 8003360:	0800ac40 	.word	0x0800ac40
  ldr r2, =_sbss
 8003364:	20000250 	.word	0x20000250
  ldr r4, =_ebss
 8003368:	200005bc 	.word	0x200005bc

0800336c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800336c:	e7fe      	b.n	800336c <ADC1_IRQHandler>
	...

08003370 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003376:	1dfb      	adds	r3, r7, #7
 8003378:	2200      	movs	r2, #0
 800337a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800337c:	4b0b      	ldr	r3, [pc, #44]	; (80033ac <HAL_Init+0x3c>)
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	4b0a      	ldr	r3, [pc, #40]	; (80033ac <HAL_Init+0x3c>)
 8003382:	2180      	movs	r1, #128	; 0x80
 8003384:	0049      	lsls	r1, r1, #1
 8003386:	430a      	orrs	r2, r1
 8003388:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800338a:	2000      	movs	r0, #0
 800338c:	f000 f810 	bl	80033b0 <HAL_InitTick>
 8003390:	1e03      	subs	r3, r0, #0
 8003392:	d003      	beq.n	800339c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003394:	1dfb      	adds	r3, r7, #7
 8003396:	2201      	movs	r2, #1
 8003398:	701a      	strb	r2, [r3, #0]
 800339a:	e001      	b.n	80033a0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800339c:	f7ff fd88 	bl	8002eb0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80033a0:	1dfb      	adds	r3, r7, #7
 80033a2:	781b      	ldrb	r3, [r3, #0]
}
 80033a4:	0018      	movs	r0, r3
 80033a6:	46bd      	mov	sp, r7
 80033a8:	b002      	add	sp, #8
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	40022000 	.word	0x40022000

080033b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033b0:	b590      	push	{r4, r7, lr}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80033b8:	230f      	movs	r3, #15
 80033ba:	18fb      	adds	r3, r7, r3
 80033bc:	2200      	movs	r2, #0
 80033be:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80033c0:	4b1d      	ldr	r3, [pc, #116]	; (8003438 <HAL_InitTick+0x88>)
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d02b      	beq.n	8003420 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80033c8:	4b1c      	ldr	r3, [pc, #112]	; (800343c <HAL_InitTick+0x8c>)
 80033ca:	681c      	ldr	r4, [r3, #0]
 80033cc:	4b1a      	ldr	r3, [pc, #104]	; (8003438 <HAL_InitTick+0x88>)
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	0019      	movs	r1, r3
 80033d2:	23fa      	movs	r3, #250	; 0xfa
 80033d4:	0098      	lsls	r0, r3, #2
 80033d6:	f7fc feb1 	bl	800013c <__udivsi3>
 80033da:	0003      	movs	r3, r0
 80033dc:	0019      	movs	r1, r3
 80033de:	0020      	movs	r0, r4
 80033e0:	f7fc feac 	bl	800013c <__udivsi3>
 80033e4:	0003      	movs	r3, r0
 80033e6:	0018      	movs	r0, r3
 80033e8:	f000 f93d 	bl	8003666 <HAL_SYSTICK_Config>
 80033ec:	1e03      	subs	r3, r0, #0
 80033ee:	d112      	bne.n	8003416 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2b03      	cmp	r3, #3
 80033f4:	d80a      	bhi.n	800340c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033f6:	6879      	ldr	r1, [r7, #4]
 80033f8:	2301      	movs	r3, #1
 80033fa:	425b      	negs	r3, r3
 80033fc:	2200      	movs	r2, #0
 80033fe:	0018      	movs	r0, r3
 8003400:	f000 f90c 	bl	800361c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003404:	4b0e      	ldr	r3, [pc, #56]	; (8003440 <HAL_InitTick+0x90>)
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	601a      	str	r2, [r3, #0]
 800340a:	e00d      	b.n	8003428 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800340c:	230f      	movs	r3, #15
 800340e:	18fb      	adds	r3, r7, r3
 8003410:	2201      	movs	r2, #1
 8003412:	701a      	strb	r2, [r3, #0]
 8003414:	e008      	b.n	8003428 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003416:	230f      	movs	r3, #15
 8003418:	18fb      	adds	r3, r7, r3
 800341a:	2201      	movs	r2, #1
 800341c:	701a      	strb	r2, [r3, #0]
 800341e:	e003      	b.n	8003428 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003420:	230f      	movs	r3, #15
 8003422:	18fb      	adds	r3, r7, r3
 8003424:	2201      	movs	r2, #1
 8003426:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003428:	230f      	movs	r3, #15
 800342a:	18fb      	adds	r3, r7, r3
 800342c:	781b      	ldrb	r3, [r3, #0]
}
 800342e:	0018      	movs	r0, r3
 8003430:	46bd      	mov	sp, r7
 8003432:	b005      	add	sp, #20
 8003434:	bd90      	pop	{r4, r7, pc}
 8003436:	46c0      	nop			; (mov r8, r8)
 8003438:	20000078 	.word	0x20000078
 800343c:	20000070 	.word	0x20000070
 8003440:	20000074 	.word	0x20000074

08003444 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003448:	4b05      	ldr	r3, [pc, #20]	; (8003460 <HAL_IncTick+0x1c>)
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	001a      	movs	r2, r3
 800344e:	4b05      	ldr	r3, [pc, #20]	; (8003464 <HAL_IncTick+0x20>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	18d2      	adds	r2, r2, r3
 8003454:	4b03      	ldr	r3, [pc, #12]	; (8003464 <HAL_IncTick+0x20>)
 8003456:	601a      	str	r2, [r3, #0]
}
 8003458:	46c0      	nop			; (mov r8, r8)
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	46c0      	nop			; (mov r8, r8)
 8003460:	20000078 	.word	0x20000078
 8003464:	200005a8 	.word	0x200005a8

08003468 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0
  return uwTick;
 800346c:	4b02      	ldr	r3, [pc, #8]	; (8003478 <HAL_GetTick+0x10>)
 800346e:	681b      	ldr	r3, [r3, #0]
}
 8003470:	0018      	movs	r0, r3
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	46c0      	nop			; (mov r8, r8)
 8003478:	200005a8 	.word	0x200005a8

0800347c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003484:	f7ff fff0 	bl	8003468 <HAL_GetTick>
 8003488:	0003      	movs	r3, r0
 800348a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	3301      	adds	r3, #1
 8003494:	d005      	beq.n	80034a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003496:	4b0a      	ldr	r3, [pc, #40]	; (80034c0 <HAL_Delay+0x44>)
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	001a      	movs	r2, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	189b      	adds	r3, r3, r2
 80034a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80034a2:	46c0      	nop			; (mov r8, r8)
 80034a4:	f7ff ffe0 	bl	8003468 <HAL_GetTick>
 80034a8:	0002      	movs	r2, r0
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d8f7      	bhi.n	80034a4 <HAL_Delay+0x28>
  {
  }
}
 80034b4:	46c0      	nop			; (mov r8, r8)
 80034b6:	46c0      	nop			; (mov r8, r8)
 80034b8:	46bd      	mov	sp, r7
 80034ba:	b004      	add	sp, #16
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	46c0      	nop			; (mov r8, r8)
 80034c0:	20000078 	.word	0x20000078

080034c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	0002      	movs	r2, r0
 80034cc:	1dfb      	adds	r3, r7, #7
 80034ce:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80034d0:	1dfb      	adds	r3, r7, #7
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	2b7f      	cmp	r3, #127	; 0x7f
 80034d6:	d809      	bhi.n	80034ec <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034d8:	1dfb      	adds	r3, r7, #7
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	001a      	movs	r2, r3
 80034de:	231f      	movs	r3, #31
 80034e0:	401a      	ands	r2, r3
 80034e2:	4b04      	ldr	r3, [pc, #16]	; (80034f4 <__NVIC_EnableIRQ+0x30>)
 80034e4:	2101      	movs	r1, #1
 80034e6:	4091      	lsls	r1, r2
 80034e8:	000a      	movs	r2, r1
 80034ea:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80034ec:	46c0      	nop			; (mov r8, r8)
 80034ee:	46bd      	mov	sp, r7
 80034f0:	b002      	add	sp, #8
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	e000e100 	.word	0xe000e100

080034f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034f8:	b590      	push	{r4, r7, lr}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	0002      	movs	r2, r0
 8003500:	6039      	str	r1, [r7, #0]
 8003502:	1dfb      	adds	r3, r7, #7
 8003504:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003506:	1dfb      	adds	r3, r7, #7
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	2b7f      	cmp	r3, #127	; 0x7f
 800350c:	d828      	bhi.n	8003560 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800350e:	4a2f      	ldr	r2, [pc, #188]	; (80035cc <__NVIC_SetPriority+0xd4>)
 8003510:	1dfb      	adds	r3, r7, #7
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	b25b      	sxtb	r3, r3
 8003516:	089b      	lsrs	r3, r3, #2
 8003518:	33c0      	adds	r3, #192	; 0xc0
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	589b      	ldr	r3, [r3, r2]
 800351e:	1dfa      	adds	r2, r7, #7
 8003520:	7812      	ldrb	r2, [r2, #0]
 8003522:	0011      	movs	r1, r2
 8003524:	2203      	movs	r2, #3
 8003526:	400a      	ands	r2, r1
 8003528:	00d2      	lsls	r2, r2, #3
 800352a:	21ff      	movs	r1, #255	; 0xff
 800352c:	4091      	lsls	r1, r2
 800352e:	000a      	movs	r2, r1
 8003530:	43d2      	mvns	r2, r2
 8003532:	401a      	ands	r2, r3
 8003534:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	019b      	lsls	r3, r3, #6
 800353a:	22ff      	movs	r2, #255	; 0xff
 800353c:	401a      	ands	r2, r3
 800353e:	1dfb      	adds	r3, r7, #7
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	0018      	movs	r0, r3
 8003544:	2303      	movs	r3, #3
 8003546:	4003      	ands	r3, r0
 8003548:	00db      	lsls	r3, r3, #3
 800354a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800354c:	481f      	ldr	r0, [pc, #124]	; (80035cc <__NVIC_SetPriority+0xd4>)
 800354e:	1dfb      	adds	r3, r7, #7
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	b25b      	sxtb	r3, r3
 8003554:	089b      	lsrs	r3, r3, #2
 8003556:	430a      	orrs	r2, r1
 8003558:	33c0      	adds	r3, #192	; 0xc0
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800355e:	e031      	b.n	80035c4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003560:	4a1b      	ldr	r2, [pc, #108]	; (80035d0 <__NVIC_SetPriority+0xd8>)
 8003562:	1dfb      	adds	r3, r7, #7
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	0019      	movs	r1, r3
 8003568:	230f      	movs	r3, #15
 800356a:	400b      	ands	r3, r1
 800356c:	3b08      	subs	r3, #8
 800356e:	089b      	lsrs	r3, r3, #2
 8003570:	3306      	adds	r3, #6
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	18d3      	adds	r3, r2, r3
 8003576:	3304      	adds	r3, #4
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	1dfa      	adds	r2, r7, #7
 800357c:	7812      	ldrb	r2, [r2, #0]
 800357e:	0011      	movs	r1, r2
 8003580:	2203      	movs	r2, #3
 8003582:	400a      	ands	r2, r1
 8003584:	00d2      	lsls	r2, r2, #3
 8003586:	21ff      	movs	r1, #255	; 0xff
 8003588:	4091      	lsls	r1, r2
 800358a:	000a      	movs	r2, r1
 800358c:	43d2      	mvns	r2, r2
 800358e:	401a      	ands	r2, r3
 8003590:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	019b      	lsls	r3, r3, #6
 8003596:	22ff      	movs	r2, #255	; 0xff
 8003598:	401a      	ands	r2, r3
 800359a:	1dfb      	adds	r3, r7, #7
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	0018      	movs	r0, r3
 80035a0:	2303      	movs	r3, #3
 80035a2:	4003      	ands	r3, r0
 80035a4:	00db      	lsls	r3, r3, #3
 80035a6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80035a8:	4809      	ldr	r0, [pc, #36]	; (80035d0 <__NVIC_SetPriority+0xd8>)
 80035aa:	1dfb      	adds	r3, r7, #7
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	001c      	movs	r4, r3
 80035b0:	230f      	movs	r3, #15
 80035b2:	4023      	ands	r3, r4
 80035b4:	3b08      	subs	r3, #8
 80035b6:	089b      	lsrs	r3, r3, #2
 80035b8:	430a      	orrs	r2, r1
 80035ba:	3306      	adds	r3, #6
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	18c3      	adds	r3, r0, r3
 80035c0:	3304      	adds	r3, #4
 80035c2:	601a      	str	r2, [r3, #0]
}
 80035c4:	46c0      	nop			; (mov r8, r8)
 80035c6:	46bd      	mov	sp, r7
 80035c8:	b003      	add	sp, #12
 80035ca:	bd90      	pop	{r4, r7, pc}
 80035cc:	e000e100 	.word	0xe000e100
 80035d0:	e000ed00 	.word	0xe000ed00

080035d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	1e5a      	subs	r2, r3, #1
 80035e0:	2380      	movs	r3, #128	; 0x80
 80035e2:	045b      	lsls	r3, r3, #17
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d301      	bcc.n	80035ec <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035e8:	2301      	movs	r3, #1
 80035ea:	e010      	b.n	800360e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035ec:	4b0a      	ldr	r3, [pc, #40]	; (8003618 <SysTick_Config+0x44>)
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	3a01      	subs	r2, #1
 80035f2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035f4:	2301      	movs	r3, #1
 80035f6:	425b      	negs	r3, r3
 80035f8:	2103      	movs	r1, #3
 80035fa:	0018      	movs	r0, r3
 80035fc:	f7ff ff7c 	bl	80034f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003600:	4b05      	ldr	r3, [pc, #20]	; (8003618 <SysTick_Config+0x44>)
 8003602:	2200      	movs	r2, #0
 8003604:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003606:	4b04      	ldr	r3, [pc, #16]	; (8003618 <SysTick_Config+0x44>)
 8003608:	2207      	movs	r2, #7
 800360a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800360c:	2300      	movs	r3, #0
}
 800360e:	0018      	movs	r0, r3
 8003610:	46bd      	mov	sp, r7
 8003612:	b002      	add	sp, #8
 8003614:	bd80      	pop	{r7, pc}
 8003616:	46c0      	nop			; (mov r8, r8)
 8003618:	e000e010 	.word	0xe000e010

0800361c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	60b9      	str	r1, [r7, #8]
 8003624:	607a      	str	r2, [r7, #4]
 8003626:	210f      	movs	r1, #15
 8003628:	187b      	adds	r3, r7, r1
 800362a:	1c02      	adds	r2, r0, #0
 800362c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800362e:	68ba      	ldr	r2, [r7, #8]
 8003630:	187b      	adds	r3, r7, r1
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	b25b      	sxtb	r3, r3
 8003636:	0011      	movs	r1, r2
 8003638:	0018      	movs	r0, r3
 800363a:	f7ff ff5d 	bl	80034f8 <__NVIC_SetPriority>
}
 800363e:	46c0      	nop			; (mov r8, r8)
 8003640:	46bd      	mov	sp, r7
 8003642:	b004      	add	sp, #16
 8003644:	bd80      	pop	{r7, pc}

08003646 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b082      	sub	sp, #8
 800364a:	af00      	add	r7, sp, #0
 800364c:	0002      	movs	r2, r0
 800364e:	1dfb      	adds	r3, r7, #7
 8003650:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003652:	1dfb      	adds	r3, r7, #7
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	b25b      	sxtb	r3, r3
 8003658:	0018      	movs	r0, r3
 800365a:	f7ff ff33 	bl	80034c4 <__NVIC_EnableIRQ>
}
 800365e:	46c0      	nop			; (mov r8, r8)
 8003660:	46bd      	mov	sp, r7
 8003662:	b002      	add	sp, #8
 8003664:	bd80      	pop	{r7, pc}

08003666 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b082      	sub	sp, #8
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	0018      	movs	r0, r3
 8003672:	f7ff ffaf 	bl	80035d4 <SysTick_Config>
 8003676:	0003      	movs	r3, r0
}
 8003678:	0018      	movs	r0, r3
 800367a:	46bd      	mov	sp, r7
 800367c:	b002      	add	sp, #8
 800367e:	bd80      	pop	{r7, pc}

08003680 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d101      	bne.n	8003692 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e077      	b.n	8003782 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a3d      	ldr	r2, [pc, #244]	; (800378c <HAL_DMA_Init+0x10c>)
 8003698:	4694      	mov	ip, r2
 800369a:	4463      	add	r3, ip
 800369c:	2114      	movs	r1, #20
 800369e:	0018      	movs	r0, r3
 80036a0:	f7fc fd4c 	bl	800013c <__udivsi3>
 80036a4:	0003      	movs	r3, r0
 80036a6:	009a      	lsls	r2, r3, #2
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2225      	movs	r2, #37	; 0x25
 80036b0:	2102      	movs	r1, #2
 80036b2:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4934      	ldr	r1, [pc, #208]	; (8003790 <HAL_DMA_Init+0x110>)
 80036c0:	400a      	ands	r2, r1
 80036c2:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	6819      	ldr	r1, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	689a      	ldr	r2, [r3, #8]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	431a      	orrs	r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	431a      	orrs	r2, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	431a      	orrs	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	699b      	ldr	r3, [r3, #24]
 80036e4:	431a      	orrs	r2, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	69db      	ldr	r3, [r3, #28]
 80036ea:	431a      	orrs	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a1b      	ldr	r3, [r3, #32]
 80036f0:	431a      	orrs	r2, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	430a      	orrs	r2, r1
 80036f8:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	0018      	movs	r0, r3
 80036fe:	f000 fa8d 	bl	8003c1c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	689a      	ldr	r2, [r3, #8]
 8003706:	2380      	movs	r3, #128	; 0x80
 8003708:	01db      	lsls	r3, r3, #7
 800370a:	429a      	cmp	r2, r3
 800370c:	d102      	bne.n	8003714 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685a      	ldr	r2, [r3, #4]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800371c:	213f      	movs	r1, #63	; 0x3f
 800371e:	400a      	ands	r2, r1
 8003720:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800372a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d011      	beq.n	8003758 <HAL_DMA_Init+0xd8>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	2b04      	cmp	r3, #4
 800373a:	d80d      	bhi.n	8003758 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	0018      	movs	r0, r3
 8003740:	f000 fa98 	bl	8003c74 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003748:	2200      	movs	r2, #0
 800374a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003754:	605a      	str	r2, [r3, #4]
 8003756:	e008      	b.n	800376a <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2225      	movs	r2, #37	; 0x25
 8003774:	2101      	movs	r1, #1
 8003776:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2224      	movs	r2, #36	; 0x24
 800377c:	2100      	movs	r1, #0
 800377e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	0018      	movs	r0, r3
 8003784:	46bd      	mov	sp, r7
 8003786:	b002      	add	sp, #8
 8003788:	bd80      	pop	{r7, pc}
 800378a:	46c0      	nop			; (mov r8, r8)
 800378c:	bffdfff8 	.word	0xbffdfff8
 8003790:	ffff800f 	.word	0xffff800f

08003794 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
 80037a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037a2:	2317      	movs	r3, #23
 80037a4:	18fb      	adds	r3, r7, r3
 80037a6:	2200      	movs	r2, #0
 80037a8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2224      	movs	r2, #36	; 0x24
 80037ae:	5c9b      	ldrb	r3, [r3, r2]
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d101      	bne.n	80037b8 <HAL_DMA_Start_IT+0x24>
 80037b4:	2302      	movs	r3, #2
 80037b6:	e06f      	b.n	8003898 <HAL_DMA_Start_IT+0x104>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2224      	movs	r2, #36	; 0x24
 80037bc:	2101      	movs	r1, #1
 80037be:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2225      	movs	r2, #37	; 0x25
 80037c4:	5c9b      	ldrb	r3, [r3, r2]
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d157      	bne.n	800387c <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2225      	movs	r2, #37	; 0x25
 80037d0:	2102      	movs	r1, #2
 80037d2:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2200      	movs	r2, #0
 80037d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2101      	movs	r1, #1
 80037e6:	438a      	bics	r2, r1
 80037e8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	68b9      	ldr	r1, [r7, #8]
 80037f0:	68f8      	ldr	r0, [r7, #12]
 80037f2:	f000 f9d3 	bl	8003b9c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d008      	beq.n	8003810 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	210e      	movs	r1, #14
 800380a:	430a      	orrs	r2, r1
 800380c:	601a      	str	r2, [r3, #0]
 800380e:	e00f      	b.n	8003830 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2104      	movs	r1, #4
 800381c:	438a      	bics	r2, r1
 800381e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	210a      	movs	r1, #10
 800382c:	430a      	orrs	r2, r1
 800382e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	2380      	movs	r3, #128	; 0x80
 8003838:	025b      	lsls	r3, r3, #9
 800383a:	4013      	ands	r3, r2
 800383c:	d008      	beq.n	8003850 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003848:	2180      	movs	r1, #128	; 0x80
 800384a:	0049      	lsls	r1, r1, #1
 800384c:	430a      	orrs	r2, r1
 800384e:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003854:	2b00      	cmp	r3, #0
 8003856:	d008      	beq.n	800386a <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003862:	2180      	movs	r1, #128	; 0x80
 8003864:	0049      	lsls	r1, r1, #1
 8003866:	430a      	orrs	r2, r1
 8003868:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2101      	movs	r1, #1
 8003876:	430a      	orrs	r2, r1
 8003878:	601a      	str	r2, [r3, #0]
 800387a:	e00a      	b.n	8003892 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2280      	movs	r2, #128	; 0x80
 8003880:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2224      	movs	r2, #36	; 0x24
 8003886:	2100      	movs	r1, #0
 8003888:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 800388a:	2317      	movs	r3, #23
 800388c:	18fb      	adds	r3, r7, r3
 800388e:	2201      	movs	r2, #1
 8003890:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8003892:	2317      	movs	r3, #23
 8003894:	18fb      	adds	r3, r7, r3
 8003896:	781b      	ldrb	r3, [r3, #0]
}
 8003898:	0018      	movs	r0, r3
 800389a:	46bd      	mov	sp, r7
 800389c:	b006      	add	sp, #24
 800389e:	bd80      	pop	{r7, pc}

080038a0 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d101      	bne.n	80038b2 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e050      	b.n	8003954 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2225      	movs	r2, #37	; 0x25
 80038b6:	5c9b      	ldrb	r3, [r3, r2]
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d008      	beq.n	80038d0 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2204      	movs	r2, #4
 80038c2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2224      	movs	r2, #36	; 0x24
 80038c8:	2100      	movs	r1, #0
 80038ca:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e041      	b.n	8003954 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	210e      	movs	r1, #14
 80038dc:	438a      	bics	r2, r1
 80038de:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ea:	491c      	ldr	r1, [pc, #112]	; (800395c <HAL_DMA_Abort+0xbc>)
 80038ec:	400a      	ands	r2, r1
 80038ee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2101      	movs	r1, #1
 80038fc:	438a      	bics	r2, r1
 80038fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8003900:	4b17      	ldr	r3, [pc, #92]	; (8003960 <HAL_DMA_Abort+0xc0>)
 8003902:	6859      	ldr	r1, [r3, #4]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003908:	221c      	movs	r2, #28
 800390a:	4013      	ands	r3, r2
 800390c:	2201      	movs	r2, #1
 800390e:	409a      	lsls	r2, r3
 8003910:	4b13      	ldr	r3, [pc, #76]	; (8003960 <HAL_DMA_Abort+0xc0>)
 8003912:	430a      	orrs	r2, r1
 8003914:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800391e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003924:	2b00      	cmp	r3, #0
 8003926:	d00c      	beq.n	8003942 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003932:	490a      	ldr	r1, [pc, #40]	; (800395c <HAL_DMA_Abort+0xbc>)
 8003934:	400a      	ands	r2, r1
 8003936:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003940:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2225      	movs	r2, #37	; 0x25
 8003946:	2101      	movs	r1, #1
 8003948:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2224      	movs	r2, #36	; 0x24
 800394e:	2100      	movs	r1, #0
 8003950:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8003952:	2300      	movs	r3, #0
}
 8003954:	0018      	movs	r0, r3
 8003956:	46bd      	mov	sp, r7
 8003958:	b002      	add	sp, #8
 800395a:	bd80      	pop	{r7, pc}
 800395c:	fffffeff 	.word	0xfffffeff
 8003960:	40020000 	.word	0x40020000

08003964 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800396c:	210f      	movs	r1, #15
 800396e:	187b      	adds	r3, r7, r1
 8003970:	2200      	movs	r2, #0
 8003972:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2225      	movs	r2, #37	; 0x25
 8003978:	5c9b      	ldrb	r3, [r3, r2]
 800397a:	b2db      	uxtb	r3, r3
 800397c:	2b02      	cmp	r3, #2
 800397e:	d006      	beq.n	800398e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2204      	movs	r2, #4
 8003984:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003986:	187b      	adds	r3, r7, r1
 8003988:	2201      	movs	r2, #1
 800398a:	701a      	strb	r2, [r3, #0]
 800398c:	e049      	b.n	8003a22 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	210e      	movs	r1, #14
 800399a:	438a      	bics	r2, r1
 800399c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2101      	movs	r1, #1
 80039aa:	438a      	bics	r2, r1
 80039ac:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b8:	491d      	ldr	r1, [pc, #116]	; (8003a30 <HAL_DMA_Abort_IT+0xcc>)
 80039ba:	400a      	ands	r2, r1
 80039bc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80039be:	4b1d      	ldr	r3, [pc, #116]	; (8003a34 <HAL_DMA_Abort_IT+0xd0>)
 80039c0:	6859      	ldr	r1, [r3, #4]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c6:	221c      	movs	r2, #28
 80039c8:	4013      	ands	r3, r2
 80039ca:	2201      	movs	r2, #1
 80039cc:	409a      	lsls	r2, r3
 80039ce:	4b19      	ldr	r3, [pc, #100]	; (8003a34 <HAL_DMA_Abort_IT+0xd0>)
 80039d0:	430a      	orrs	r2, r1
 80039d2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80039dc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00c      	beq.n	8003a00 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039f0:	490f      	ldr	r1, [pc, #60]	; (8003a30 <HAL_DMA_Abort_IT+0xcc>)
 80039f2:	400a      	ands	r2, r1
 80039f4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80039fe:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2225      	movs	r2, #37	; 0x25
 8003a04:	2101      	movs	r1, #1
 8003a06:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2224      	movs	r2, #36	; 0x24
 8003a0c:	2100      	movs	r1, #0
 8003a0e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d004      	beq.n	8003a22 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	0010      	movs	r0, r2
 8003a20:	4798      	blx	r3
    }
  }
  return status;
 8003a22:	230f      	movs	r3, #15
 8003a24:	18fb      	adds	r3, r7, r3
 8003a26:	781b      	ldrb	r3, [r3, #0]
}
 8003a28:	0018      	movs	r0, r3
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	b004      	add	sp, #16
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	fffffeff 	.word	0xfffffeff
 8003a34:	40020000 	.word	0x40020000

08003a38 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8003a40:	4b55      	ldr	r3, [pc, #340]	; (8003b98 <HAL_DMA_IRQHandler+0x160>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a52:	221c      	movs	r2, #28
 8003a54:	4013      	ands	r3, r2
 8003a56:	2204      	movs	r2, #4
 8003a58:	409a      	lsls	r2, r3
 8003a5a:	0013      	movs	r3, r2
 8003a5c:	68fa      	ldr	r2, [r7, #12]
 8003a5e:	4013      	ands	r3, r2
 8003a60:	d027      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0x7a>
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	2204      	movs	r2, #4
 8003a66:	4013      	ands	r3, r2
 8003a68:	d023      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2220      	movs	r2, #32
 8003a72:	4013      	ands	r3, r2
 8003a74:	d107      	bne.n	8003a86 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2104      	movs	r1, #4
 8003a82:	438a      	bics	r2, r1
 8003a84:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8003a86:	4b44      	ldr	r3, [pc, #272]	; (8003b98 <HAL_DMA_IRQHandler+0x160>)
 8003a88:	6859      	ldr	r1, [r3, #4]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8e:	221c      	movs	r2, #28
 8003a90:	4013      	ands	r3, r2
 8003a92:	2204      	movs	r2, #4
 8003a94:	409a      	lsls	r2, r3
 8003a96:	4b40      	ldr	r3, [pc, #256]	; (8003b98 <HAL_DMA_IRQHandler+0x160>)
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d100      	bne.n	8003aa6 <HAL_DMA_IRQHandler+0x6e>
 8003aa4:	e073      	b.n	8003b8e <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	0010      	movs	r0, r2
 8003aae:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8003ab0:	e06d      	b.n	8003b8e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab6:	221c      	movs	r2, #28
 8003ab8:	4013      	ands	r3, r2
 8003aba:	2202      	movs	r2, #2
 8003abc:	409a      	lsls	r2, r3
 8003abe:	0013      	movs	r3, r2
 8003ac0:	68fa      	ldr	r2, [r7, #12]
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	d02e      	beq.n	8003b24 <HAL_DMA_IRQHandler+0xec>
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	2202      	movs	r2, #2
 8003aca:	4013      	ands	r3, r2
 8003acc:	d02a      	beq.n	8003b24 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2220      	movs	r2, #32
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	d10b      	bne.n	8003af2 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	210a      	movs	r1, #10
 8003ae6:	438a      	bics	r2, r1
 8003ae8:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2225      	movs	r2, #37	; 0x25
 8003aee:	2101      	movs	r1, #1
 8003af0:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003af2:	4b29      	ldr	r3, [pc, #164]	; (8003b98 <HAL_DMA_IRQHandler+0x160>)
 8003af4:	6859      	ldr	r1, [r3, #4]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afa:	221c      	movs	r2, #28
 8003afc:	4013      	ands	r3, r2
 8003afe:	2202      	movs	r2, #2
 8003b00:	409a      	lsls	r2, r3
 8003b02:	4b25      	ldr	r3, [pc, #148]	; (8003b98 <HAL_DMA_IRQHandler+0x160>)
 8003b04:	430a      	orrs	r2, r1
 8003b06:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2224      	movs	r2, #36	; 0x24
 8003b0c:	2100      	movs	r1, #0
 8003b0e:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d03a      	beq.n	8003b8e <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	0010      	movs	r0, r2
 8003b20:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8003b22:	e034      	b.n	8003b8e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b28:	221c      	movs	r2, #28
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	2208      	movs	r2, #8
 8003b2e:	409a      	lsls	r2, r3
 8003b30:	0013      	movs	r3, r2
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	4013      	ands	r3, r2
 8003b36:	d02b      	beq.n	8003b90 <HAL_DMA_IRQHandler+0x158>
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	2208      	movs	r2, #8
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	d027      	beq.n	8003b90 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	210e      	movs	r1, #14
 8003b4c:	438a      	bics	r2, r1
 8003b4e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003b50:	4b11      	ldr	r3, [pc, #68]	; (8003b98 <HAL_DMA_IRQHandler+0x160>)
 8003b52:	6859      	ldr	r1, [r3, #4]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b58:	221c      	movs	r2, #28
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	409a      	lsls	r2, r3
 8003b60:	4b0d      	ldr	r3, [pc, #52]	; (8003b98 <HAL_DMA_IRQHandler+0x160>)
 8003b62:	430a      	orrs	r2, r1
 8003b64:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2225      	movs	r2, #37	; 0x25
 8003b70:	2101      	movs	r1, #1
 8003b72:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2224      	movs	r2, #36	; 0x24
 8003b78:	2100      	movs	r1, #0
 8003b7a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d005      	beq.n	8003b90 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	0010      	movs	r0, r2
 8003b8c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003b8e:	46c0      	nop			; (mov r8, r8)
 8003b90:	46c0      	nop			; (mov r8, r8)
}
 8003b92:	46bd      	mov	sp, r7
 8003b94:	b004      	add	sp, #16
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	40020000 	.word	0x40020000

08003b9c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	607a      	str	r2, [r7, #4]
 8003ba8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bae:	68fa      	ldr	r2, [r7, #12]
 8003bb0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003bb2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d004      	beq.n	8003bc6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc0:	68fa      	ldr	r2, [r7, #12]
 8003bc2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003bc4:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003bc6:	4b14      	ldr	r3, [pc, #80]	; (8003c18 <DMA_SetConfig+0x7c>)
 8003bc8:	6859      	ldr	r1, [r3, #4]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bce:	221c      	movs	r2, #28
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	409a      	lsls	r2, r3
 8003bd6:	4b10      	ldr	r3, [pc, #64]	; (8003c18 <DMA_SetConfig+0x7c>)
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	683a      	ldr	r2, [r7, #0]
 8003be2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	2b10      	cmp	r3, #16
 8003bea:	d108      	bne.n	8003bfe <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	68ba      	ldr	r2, [r7, #8]
 8003bfa:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003bfc:	e007      	b.n	8003c0e <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68ba      	ldr	r2, [r7, #8]
 8003c04:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	60da      	str	r2, [r3, #12]
}
 8003c0e:	46c0      	nop			; (mov r8, r8)
 8003c10:	46bd      	mov	sp, r7
 8003c12:	b004      	add	sp, #16
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	46c0      	nop			; (mov r8, r8)
 8003c18:	40020000 	.word	0x40020000

08003c1c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c28:	089b      	lsrs	r3, r3, #2
 8003c2a:	4a10      	ldr	r2, [pc, #64]	; (8003c6c <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8003c2c:	4694      	mov	ip, r2
 8003c2e:	4463      	add	r3, ip
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	001a      	movs	r2, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	001a      	movs	r2, r3
 8003c3e:	23ff      	movs	r3, #255	; 0xff
 8003c40:	4013      	ands	r3, r2
 8003c42:	3b08      	subs	r3, #8
 8003c44:	2114      	movs	r1, #20
 8003c46:	0018      	movs	r0, r3
 8003c48:	f7fc fa78 	bl	800013c <__udivsi3>
 8003c4c:	0003      	movs	r3, r0
 8003c4e:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4a07      	ldr	r2, [pc, #28]	; (8003c70 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003c54:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	221f      	movs	r2, #31
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	409a      	lsls	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8003c64:	46c0      	nop			; (mov r8, r8)
 8003c66:	46bd      	mov	sp, r7
 8003c68:	b004      	add	sp, #16
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	10008200 	.word	0x10008200
 8003c70:	40020880 	.word	0x40020880

08003c74 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	223f      	movs	r2, #63	; 0x3f
 8003c82:	4013      	ands	r3, r2
 8003c84:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	4a0a      	ldr	r2, [pc, #40]	; (8003cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003c8a:	4694      	mov	ip, r2
 8003c8c:	4463      	add	r3, ip
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	001a      	movs	r2, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a07      	ldr	r2, [pc, #28]	; (8003cb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003c9a:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	2203      	movs	r2, #3
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	409a      	lsls	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	659a      	str	r2, [r3, #88]	; 0x58
}
 8003cac:	46c0      	nop			; (mov r8, r8)
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	b004      	add	sp, #16
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	1000823f 	.word	0x1000823f
 8003cb8:	40020940 	.word	0x40020940

08003cbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b086      	sub	sp, #24
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cca:	e147      	b.n	8003f5c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2101      	movs	r1, #1
 8003cd2:	697a      	ldr	r2, [r7, #20]
 8003cd4:	4091      	lsls	r1, r2
 8003cd6:	000a      	movs	r2, r1
 8003cd8:	4013      	ands	r3, r2
 8003cda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d100      	bne.n	8003ce4 <HAL_GPIO_Init+0x28>
 8003ce2:	e138      	b.n	8003f56 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	2203      	movs	r2, #3
 8003cea:	4013      	ands	r3, r2
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d005      	beq.n	8003cfc <HAL_GPIO_Init+0x40>
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	2203      	movs	r2, #3
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d130      	bne.n	8003d5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	005b      	lsls	r3, r3, #1
 8003d06:	2203      	movs	r2, #3
 8003d08:	409a      	lsls	r2, r3
 8003d0a:	0013      	movs	r3, r2
 8003d0c:	43da      	mvns	r2, r3
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	4013      	ands	r3, r2
 8003d12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	68da      	ldr	r2, [r3, #12]
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	005b      	lsls	r3, r3, #1
 8003d1c:	409a      	lsls	r2, r3
 8003d1e:	0013      	movs	r3, r2
 8003d20:	693a      	ldr	r2, [r7, #16]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	693a      	ldr	r2, [r7, #16]
 8003d2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d32:	2201      	movs	r2, #1
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	409a      	lsls	r2, r3
 8003d38:	0013      	movs	r3, r2
 8003d3a:	43da      	mvns	r2, r3
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	4013      	ands	r3, r2
 8003d40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	091b      	lsrs	r3, r3, #4
 8003d48:	2201      	movs	r2, #1
 8003d4a:	401a      	ands	r2, r3
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	409a      	lsls	r2, r3
 8003d50:	0013      	movs	r3, r2
 8003d52:	693a      	ldr	r2, [r7, #16]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	2203      	movs	r2, #3
 8003d64:	4013      	ands	r3, r2
 8003d66:	2b03      	cmp	r3, #3
 8003d68:	d017      	beq.n	8003d9a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	005b      	lsls	r3, r3, #1
 8003d74:	2203      	movs	r2, #3
 8003d76:	409a      	lsls	r2, r3
 8003d78:	0013      	movs	r3, r2
 8003d7a:	43da      	mvns	r2, r3
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	4013      	ands	r3, r2
 8003d80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	689a      	ldr	r2, [r3, #8]
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	005b      	lsls	r3, r3, #1
 8003d8a:	409a      	lsls	r2, r3
 8003d8c:	0013      	movs	r3, r2
 8003d8e:	693a      	ldr	r2, [r7, #16]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	2203      	movs	r2, #3
 8003da0:	4013      	ands	r3, r2
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d123      	bne.n	8003dee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	08da      	lsrs	r2, r3, #3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	3208      	adds	r2, #8
 8003dae:	0092      	lsls	r2, r2, #2
 8003db0:	58d3      	ldr	r3, [r2, r3]
 8003db2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	2207      	movs	r2, #7
 8003db8:	4013      	ands	r3, r2
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	220f      	movs	r2, #15
 8003dbe:	409a      	lsls	r2, r3
 8003dc0:	0013      	movs	r3, r2
 8003dc2:	43da      	mvns	r2, r3
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	691a      	ldr	r2, [r3, #16]
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	2107      	movs	r1, #7
 8003dd2:	400b      	ands	r3, r1
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	409a      	lsls	r2, r3
 8003dd8:	0013      	movs	r3, r2
 8003dda:	693a      	ldr	r2, [r7, #16]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	08da      	lsrs	r2, r3, #3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	3208      	adds	r2, #8
 8003de8:	0092      	lsls	r2, r2, #2
 8003dea:	6939      	ldr	r1, [r7, #16]
 8003dec:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	005b      	lsls	r3, r3, #1
 8003df8:	2203      	movs	r2, #3
 8003dfa:	409a      	lsls	r2, r3
 8003dfc:	0013      	movs	r3, r2
 8003dfe:	43da      	mvns	r2, r3
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	4013      	ands	r3, r2
 8003e04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	2203      	movs	r2, #3
 8003e0c:	401a      	ands	r2, r3
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	005b      	lsls	r3, r3, #1
 8003e12:	409a      	lsls	r2, r3
 8003e14:	0013      	movs	r3, r2
 8003e16:	693a      	ldr	r2, [r7, #16]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	685a      	ldr	r2, [r3, #4]
 8003e26:	23c0      	movs	r3, #192	; 0xc0
 8003e28:	029b      	lsls	r3, r3, #10
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	d100      	bne.n	8003e30 <HAL_GPIO_Init+0x174>
 8003e2e:	e092      	b.n	8003f56 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003e30:	4a50      	ldr	r2, [pc, #320]	; (8003f74 <HAL_GPIO_Init+0x2b8>)
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	089b      	lsrs	r3, r3, #2
 8003e36:	3318      	adds	r3, #24
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	589b      	ldr	r3, [r3, r2]
 8003e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	2203      	movs	r2, #3
 8003e42:	4013      	ands	r3, r2
 8003e44:	00db      	lsls	r3, r3, #3
 8003e46:	220f      	movs	r2, #15
 8003e48:	409a      	lsls	r2, r3
 8003e4a:	0013      	movs	r3, r2
 8003e4c:	43da      	mvns	r2, r3
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	4013      	ands	r3, r2
 8003e52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	23a0      	movs	r3, #160	; 0xa0
 8003e58:	05db      	lsls	r3, r3, #23
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d013      	beq.n	8003e86 <HAL_GPIO_Init+0x1ca>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a45      	ldr	r2, [pc, #276]	; (8003f78 <HAL_GPIO_Init+0x2bc>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d00d      	beq.n	8003e82 <HAL_GPIO_Init+0x1c6>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a44      	ldr	r2, [pc, #272]	; (8003f7c <HAL_GPIO_Init+0x2c0>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d007      	beq.n	8003e7e <HAL_GPIO_Init+0x1c2>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a43      	ldr	r2, [pc, #268]	; (8003f80 <HAL_GPIO_Init+0x2c4>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d101      	bne.n	8003e7a <HAL_GPIO_Init+0x1be>
 8003e76:	2303      	movs	r3, #3
 8003e78:	e006      	b.n	8003e88 <HAL_GPIO_Init+0x1cc>
 8003e7a:	2305      	movs	r3, #5
 8003e7c:	e004      	b.n	8003e88 <HAL_GPIO_Init+0x1cc>
 8003e7e:	2302      	movs	r3, #2
 8003e80:	e002      	b.n	8003e88 <HAL_GPIO_Init+0x1cc>
 8003e82:	2301      	movs	r3, #1
 8003e84:	e000      	b.n	8003e88 <HAL_GPIO_Init+0x1cc>
 8003e86:	2300      	movs	r3, #0
 8003e88:	697a      	ldr	r2, [r7, #20]
 8003e8a:	2103      	movs	r1, #3
 8003e8c:	400a      	ands	r2, r1
 8003e8e:	00d2      	lsls	r2, r2, #3
 8003e90:	4093      	lsls	r3, r2
 8003e92:	693a      	ldr	r2, [r7, #16]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003e98:	4936      	ldr	r1, [pc, #216]	; (8003f74 <HAL_GPIO_Init+0x2b8>)
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	089b      	lsrs	r3, r3, #2
 8003e9e:	3318      	adds	r3, #24
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	693a      	ldr	r2, [r7, #16]
 8003ea4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ea6:	4b33      	ldr	r3, [pc, #204]	; (8003f74 <HAL_GPIO_Init+0x2b8>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	43da      	mvns	r2, r3
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	685a      	ldr	r2, [r3, #4]
 8003eba:	2380      	movs	r3, #128	; 0x80
 8003ebc:	035b      	lsls	r3, r3, #13
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	d003      	beq.n	8003eca <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003eca:	4b2a      	ldr	r3, [pc, #168]	; (8003f74 <HAL_GPIO_Init+0x2b8>)
 8003ecc:	693a      	ldr	r2, [r7, #16]
 8003ece:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003ed0:	4b28      	ldr	r3, [pc, #160]	; (8003f74 <HAL_GPIO_Init+0x2b8>)
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	43da      	mvns	r2, r3
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	4013      	ands	r3, r2
 8003ede:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	685a      	ldr	r2, [r3, #4]
 8003ee4:	2380      	movs	r3, #128	; 0x80
 8003ee6:	039b      	lsls	r3, r3, #14
 8003ee8:	4013      	ands	r3, r2
 8003eea:	d003      	beq.n	8003ef4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8003eec:	693a      	ldr	r2, [r7, #16]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003ef4:	4b1f      	ldr	r3, [pc, #124]	; (8003f74 <HAL_GPIO_Init+0x2b8>)
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003efa:	4a1e      	ldr	r2, [pc, #120]	; (8003f74 <HAL_GPIO_Init+0x2b8>)
 8003efc:	2384      	movs	r3, #132	; 0x84
 8003efe:	58d3      	ldr	r3, [r2, r3]
 8003f00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	43da      	mvns	r2, r3
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	4013      	ands	r3, r2
 8003f0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	685a      	ldr	r2, [r3, #4]
 8003f10:	2380      	movs	r3, #128	; 0x80
 8003f12:	029b      	lsls	r3, r3, #10
 8003f14:	4013      	ands	r3, r2
 8003f16:	d003      	beq.n	8003f20 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003f18:	693a      	ldr	r2, [r7, #16]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003f20:	4914      	ldr	r1, [pc, #80]	; (8003f74 <HAL_GPIO_Init+0x2b8>)
 8003f22:	2284      	movs	r2, #132	; 0x84
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003f28:	4a12      	ldr	r2, [pc, #72]	; (8003f74 <HAL_GPIO_Init+0x2b8>)
 8003f2a:	2380      	movs	r3, #128	; 0x80
 8003f2c:	58d3      	ldr	r3, [r2, r3]
 8003f2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	43da      	mvns	r2, r3
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	4013      	ands	r3, r2
 8003f38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	685a      	ldr	r2, [r3, #4]
 8003f3e:	2380      	movs	r3, #128	; 0x80
 8003f40:	025b      	lsls	r3, r3, #9
 8003f42:	4013      	ands	r3, r2
 8003f44:	d003      	beq.n	8003f4e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8003f46:	693a      	ldr	r2, [r7, #16]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003f4e:	4909      	ldr	r1, [pc, #36]	; (8003f74 <HAL_GPIO_Init+0x2b8>)
 8003f50:	2280      	movs	r2, #128	; 0x80
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	3301      	adds	r3, #1
 8003f5a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	40da      	lsrs	r2, r3
 8003f64:	1e13      	subs	r3, r2, #0
 8003f66:	d000      	beq.n	8003f6a <HAL_GPIO_Init+0x2ae>
 8003f68:	e6b0      	b.n	8003ccc <HAL_GPIO_Init+0x10>
  }
}
 8003f6a:	46c0      	nop			; (mov r8, r8)
 8003f6c:	46c0      	nop			; (mov r8, r8)
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	b006      	add	sp, #24
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	40021800 	.word	0x40021800
 8003f78:	50000400 	.word	0x50000400
 8003f7c:	50000800 	.word	0x50000800
 8003f80:	50000c00 	.word	0x50000c00

08003f84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	0008      	movs	r0, r1
 8003f8e:	0011      	movs	r1, r2
 8003f90:	1cbb      	adds	r3, r7, #2
 8003f92:	1c02      	adds	r2, r0, #0
 8003f94:	801a      	strh	r2, [r3, #0]
 8003f96:	1c7b      	adds	r3, r7, #1
 8003f98:	1c0a      	adds	r2, r1, #0
 8003f9a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f9c:	1c7b      	adds	r3, r7, #1
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d004      	beq.n	8003fae <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003fa4:	1cbb      	adds	r3, r7, #2
 8003fa6:	881a      	ldrh	r2, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003fac:	e003      	b.n	8003fb6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003fae:	1cbb      	adds	r3, r7, #2
 8003fb0:	881a      	ldrh	r2, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003fb6:	46c0      	nop			; (mov r8, r8)
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	b002      	add	sp, #8
 8003fbc:	bd80      	pop	{r7, pc}
	...

08003fc0 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fc4:	4b04      	ldr	r3, [pc, #16]	; (8003fd8 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	4b03      	ldr	r3, [pc, #12]	; (8003fd8 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003fca:	2180      	movs	r1, #128	; 0x80
 8003fcc:	0049      	lsls	r1, r1, #1
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	601a      	str	r2, [r3, #0]
}
 8003fd2:	46c0      	nop			; (mov r8, r8)
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	40007000 	.word	0x40007000

08003fdc <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE
  *                                         instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	000a      	movs	r2, r1
 8003fe6:	1cfb      	adds	r3, r7, #3
 8003fe8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  if (Regulator != PWR_MAINREGULATOR_ON)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d009      	beq.n	8004004 <HAL_PWR_EnterSTOPMode+0x28>
  {
    /* Stop mode with Low-Power Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 8003ff0:	4b14      	ldr	r3, [pc, #80]	; (8004044 <HAL_PWR_EnterSTOPMode+0x68>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2207      	movs	r2, #7
 8003ff6:	4393      	bics	r3, r2
 8003ff8:	001a      	movs	r2, r3
 8003ffa:	4b12      	ldr	r3, [pc, #72]	; (8004044 <HAL_PWR_EnterSTOPMode+0x68>)
 8003ffc:	2101      	movs	r1, #1
 8003ffe:	430a      	orrs	r2, r1
 8004000:	601a      	str	r2, [r3, #0]
 8004002:	e005      	b.n	8004010 <HAL_PWR_EnterSTOPMode+0x34>
  }
  else
  {
    /* Stop mode with Main Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 8004004:	4b0f      	ldr	r3, [pc, #60]	; (8004044 <HAL_PWR_EnterSTOPMode+0x68>)
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	4b0e      	ldr	r3, [pc, #56]	; (8004044 <HAL_PWR_EnterSTOPMode+0x68>)
 800400a:	2107      	movs	r1, #7
 800400c:	438a      	bics	r2, r1
 800400e:	601a      	str	r2, [r3, #0]
  }

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004010:	4b0d      	ldr	r3, [pc, #52]	; (8004048 <HAL_PWR_EnterSTOPMode+0x6c>)
 8004012:	691a      	ldr	r2, [r3, #16]
 8004014:	4b0c      	ldr	r3, [pc, #48]	; (8004048 <HAL_PWR_EnterSTOPMode+0x6c>)
 8004016:	2104      	movs	r1, #4
 8004018:	430a      	orrs	r2, r1
 800401a:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800401c:	1cfb      	adds	r3, r7, #3
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	2b01      	cmp	r3, #1
 8004022:	d101      	bne.n	8004028 <HAL_PWR_EnterSTOPMode+0x4c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004024:	bf30      	wfi
 8004026:	e002      	b.n	800402e <HAL_PWR_EnterSTOPMode+0x52>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004028:	bf40      	sev
    __WFE();
 800402a:	bf20      	wfe
    __WFE();
 800402c:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800402e:	4b06      	ldr	r3, [pc, #24]	; (8004048 <HAL_PWR_EnterSTOPMode+0x6c>)
 8004030:	691a      	ldr	r2, [r3, #16]
 8004032:	4b05      	ldr	r3, [pc, #20]	; (8004048 <HAL_PWR_EnterSTOPMode+0x6c>)
 8004034:	2104      	movs	r1, #4
 8004036:	438a      	bics	r2, r1
 8004038:	611a      	str	r2, [r3, #16]
}
 800403a:	46c0      	nop			; (mov r8, r8)
 800403c:	46bd      	mov	sp, r7
 800403e:	b002      	add	sp, #8
 8004040:	bd80      	pop	{r7, pc}
 8004042:	46c0      	nop			; (mov r8, r8)
 8004044:	40007000 	.word	0x40007000
 8004048:	e000ed00 	.word	0xe000ed00

0800404c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004054:	4b19      	ldr	r3, [pc, #100]	; (80040bc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a19      	ldr	r2, [pc, #100]	; (80040c0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800405a:	4013      	ands	r3, r2
 800405c:	0019      	movs	r1, r3
 800405e:	4b17      	ldr	r3, [pc, #92]	; (80040bc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	430a      	orrs	r2, r1
 8004064:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	2380      	movs	r3, #128	; 0x80
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	429a      	cmp	r2, r3
 800406e:	d11f      	bne.n	80040b0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004070:	4b14      	ldr	r3, [pc, #80]	; (80040c4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	0013      	movs	r3, r2
 8004076:	005b      	lsls	r3, r3, #1
 8004078:	189b      	adds	r3, r3, r2
 800407a:	005b      	lsls	r3, r3, #1
 800407c:	4912      	ldr	r1, [pc, #72]	; (80040c8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800407e:	0018      	movs	r0, r3
 8004080:	f7fc f85c 	bl	800013c <__udivsi3>
 8004084:	0003      	movs	r3, r0
 8004086:	3301      	adds	r3, #1
 8004088:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800408a:	e008      	b.n	800409e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d003      	beq.n	800409a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	3b01      	subs	r3, #1
 8004096:	60fb      	str	r3, [r7, #12]
 8004098:	e001      	b.n	800409e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e009      	b.n	80040b2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800409e:	4b07      	ldr	r3, [pc, #28]	; (80040bc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80040a0:	695a      	ldr	r2, [r3, #20]
 80040a2:	2380      	movs	r3, #128	; 0x80
 80040a4:	00db      	lsls	r3, r3, #3
 80040a6:	401a      	ands	r2, r3
 80040a8:	2380      	movs	r3, #128	; 0x80
 80040aa:	00db      	lsls	r3, r3, #3
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d0ed      	beq.n	800408c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	0018      	movs	r0, r3
 80040b4:	46bd      	mov	sp, r7
 80040b6:	b004      	add	sp, #16
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	46c0      	nop			; (mov r8, r8)
 80040bc:	40007000 	.word	0x40007000
 80040c0:	fffff9ff 	.word	0xfffff9ff
 80040c4:	20000070 	.word	0x20000070
 80040c8:	000f4240 	.word	0x000f4240

080040cc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80040d0:	4b03      	ldr	r3, [pc, #12]	; (80040e0 <LL_RCC_GetAPB1Prescaler+0x14>)
 80040d2:	689a      	ldr	r2, [r3, #8]
 80040d4:	23e0      	movs	r3, #224	; 0xe0
 80040d6:	01db      	lsls	r3, r3, #7
 80040d8:	4013      	ands	r3, r2
}
 80040da:	0018      	movs	r0, r3
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	40021000 	.word	0x40021000

080040e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b088      	sub	sp, #32
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d101      	bne.n	80040f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e2fe      	b.n	80046f4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2201      	movs	r2, #1
 80040fc:	4013      	ands	r3, r2
 80040fe:	d100      	bne.n	8004102 <HAL_RCC_OscConfig+0x1e>
 8004100:	e07c      	b.n	80041fc <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004102:	4bc3      	ldr	r3, [pc, #780]	; (8004410 <HAL_RCC_OscConfig+0x32c>)
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	2238      	movs	r2, #56	; 0x38
 8004108:	4013      	ands	r3, r2
 800410a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800410c:	4bc0      	ldr	r3, [pc, #768]	; (8004410 <HAL_RCC_OscConfig+0x32c>)
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	2203      	movs	r2, #3
 8004112:	4013      	ands	r3, r2
 8004114:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	2b10      	cmp	r3, #16
 800411a:	d102      	bne.n	8004122 <HAL_RCC_OscConfig+0x3e>
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	2b03      	cmp	r3, #3
 8004120:	d002      	beq.n	8004128 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	2b08      	cmp	r3, #8
 8004126:	d10b      	bne.n	8004140 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004128:	4bb9      	ldr	r3, [pc, #740]	; (8004410 <HAL_RCC_OscConfig+0x32c>)
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	2380      	movs	r3, #128	; 0x80
 800412e:	029b      	lsls	r3, r3, #10
 8004130:	4013      	ands	r3, r2
 8004132:	d062      	beq.n	80041fa <HAL_RCC_OscConfig+0x116>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d15e      	bne.n	80041fa <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e2d9      	b.n	80046f4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	685a      	ldr	r2, [r3, #4]
 8004144:	2380      	movs	r3, #128	; 0x80
 8004146:	025b      	lsls	r3, r3, #9
 8004148:	429a      	cmp	r2, r3
 800414a:	d107      	bne.n	800415c <HAL_RCC_OscConfig+0x78>
 800414c:	4bb0      	ldr	r3, [pc, #704]	; (8004410 <HAL_RCC_OscConfig+0x32c>)
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	4baf      	ldr	r3, [pc, #700]	; (8004410 <HAL_RCC_OscConfig+0x32c>)
 8004152:	2180      	movs	r1, #128	; 0x80
 8004154:	0249      	lsls	r1, r1, #9
 8004156:	430a      	orrs	r2, r1
 8004158:	601a      	str	r2, [r3, #0]
 800415a:	e020      	b.n	800419e <HAL_RCC_OscConfig+0xba>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685a      	ldr	r2, [r3, #4]
 8004160:	23a0      	movs	r3, #160	; 0xa0
 8004162:	02db      	lsls	r3, r3, #11
 8004164:	429a      	cmp	r2, r3
 8004166:	d10e      	bne.n	8004186 <HAL_RCC_OscConfig+0xa2>
 8004168:	4ba9      	ldr	r3, [pc, #676]	; (8004410 <HAL_RCC_OscConfig+0x32c>)
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	4ba8      	ldr	r3, [pc, #672]	; (8004410 <HAL_RCC_OscConfig+0x32c>)
 800416e:	2180      	movs	r1, #128	; 0x80
 8004170:	02c9      	lsls	r1, r1, #11
 8004172:	430a      	orrs	r2, r1
 8004174:	601a      	str	r2, [r3, #0]
 8004176:	4ba6      	ldr	r3, [pc, #664]	; (8004410 <HAL_RCC_OscConfig+0x32c>)
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	4ba5      	ldr	r3, [pc, #660]	; (8004410 <HAL_RCC_OscConfig+0x32c>)
 800417c:	2180      	movs	r1, #128	; 0x80
 800417e:	0249      	lsls	r1, r1, #9
 8004180:	430a      	orrs	r2, r1
 8004182:	601a      	str	r2, [r3, #0]
 8004184:	e00b      	b.n	800419e <HAL_RCC_OscConfig+0xba>
 8004186:	4ba2      	ldr	r3, [pc, #648]	; (8004410 <HAL_RCC_OscConfig+0x32c>)
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	4ba1      	ldr	r3, [pc, #644]	; (8004410 <HAL_RCC_OscConfig+0x32c>)
 800418c:	49a1      	ldr	r1, [pc, #644]	; (8004414 <HAL_RCC_OscConfig+0x330>)
 800418e:	400a      	ands	r2, r1
 8004190:	601a      	str	r2, [r3, #0]
 8004192:	4b9f      	ldr	r3, [pc, #636]	; (8004410 <HAL_RCC_OscConfig+0x32c>)
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	4b9e      	ldr	r3, [pc, #632]	; (8004410 <HAL_RCC_OscConfig+0x32c>)
 8004198:	499f      	ldr	r1, [pc, #636]	; (8004418 <HAL_RCC_OscConfig+0x334>)
 800419a:	400a      	ands	r2, r1
 800419c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d014      	beq.n	80041d0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a6:	f7ff f95f 	bl	8003468 <HAL_GetTick>
 80041aa:	0003      	movs	r3, r0
 80041ac:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041ae:	e008      	b.n	80041c2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041b0:	f7ff f95a 	bl	8003468 <HAL_GetTick>
 80041b4:	0002      	movs	r2, r0
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	2b64      	cmp	r3, #100	; 0x64
 80041bc:	d901      	bls.n	80041c2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e298      	b.n	80046f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041c2:	4b93      	ldr	r3, [pc, #588]	; (8004410 <HAL_RCC_OscConfig+0x32c>)
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	2380      	movs	r3, #128	; 0x80
 80041c8:	029b      	lsls	r3, r3, #10
 80041ca:	4013      	ands	r3, r2
 80041cc:	d0f0      	beq.n	80041b0 <HAL_RCC_OscConfig+0xcc>
 80041ce:	e015      	b.n	80041fc <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d0:	f7ff f94a 	bl	8003468 <HAL_GetTick>
 80041d4:	0003      	movs	r3, r0
 80041d6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041d8:	e008      	b.n	80041ec <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041da:	f7ff f945 	bl	8003468 <HAL_GetTick>
 80041de:	0002      	movs	r2, r0
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	2b64      	cmp	r3, #100	; 0x64
 80041e6:	d901      	bls.n	80041ec <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e283      	b.n	80046f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041ec:	4b88      	ldr	r3, [pc, #544]	; (8004410 <HAL_RCC_OscConfig+0x32c>)
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	2380      	movs	r3, #128	; 0x80
 80041f2:	029b      	lsls	r3, r3, #10
 80041f4:	4013      	ands	r3, r2
 80041f6:	d1f0      	bne.n	80041da <HAL_RCC_OscConfig+0xf6>
 80041f8:	e000      	b.n	80041fc <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041fa:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2202      	movs	r2, #2
 8004202:	4013      	ands	r3, r2
 8004204:	d100      	bne.n	8004208 <HAL_RCC_OscConfig+0x124>
 8004206:	e099      	b.n	800433c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004208:	4b81      	ldr	r3, [pc, #516]	; (8004410 <HAL_RCC_OscConfig+0x32c>)
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	2238      	movs	r2, #56	; 0x38
 800420e:	4013      	ands	r3, r2
 8004210:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004212:	4b7f      	ldr	r3, [pc, #508]	; (8004410 <HAL_RCC_OscConfig+0x32c>)
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	2203      	movs	r2, #3
 8004218:	4013      	ands	r3, r2
 800421a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	2b10      	cmp	r3, #16
 8004220:	d102      	bne.n	8004228 <HAL_RCC_OscConfig+0x144>
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	2b02      	cmp	r3, #2
 8004226:	d002      	beq.n	800422e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d135      	bne.n	800429a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800422e:	4b78      	ldr	r3, [pc, #480]	; (8004410 <HAL_RCC_OscConfig+0x32c>)
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	2380      	movs	r3, #128	; 0x80
 8004234:	00db      	lsls	r3, r3, #3
 8004236:	4013      	ands	r3, r2
 8004238:	d005      	beq.n	8004246 <HAL_RCC_OscConfig+0x162>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d101      	bne.n	8004246 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e256      	b.n	80046f4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004246:	4b72      	ldr	r3, [pc, #456]	; (8004410 <HAL_RCC_OscConfig+0x32c>)
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	4a74      	ldr	r2, [pc, #464]	; (800441c <HAL_RCC_OscConfig+0x338>)
 800424c:	4013      	ands	r3, r2
 800424e:	0019      	movs	r1, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	695b      	ldr	r3, [r3, #20]
 8004254:	021a      	lsls	r2, r3, #8
 8004256:	4b6e      	ldr	r3, [pc, #440]	; (8004410 <HAL_RCC_OscConfig+0x32c>)
 8004258:	430a      	orrs	r2, r1
 800425a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d112      	bne.n	8004288 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004262:	4b6b      	ldr	r3, [pc, #428]	; (8004410 <HAL_RCC_OscConfig+0x32c>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a6e      	ldr	r2, [pc, #440]	; (8004420 <HAL_RCC_OscConfig+0x33c>)
 8004268:	4013      	ands	r3, r2
 800426a:	0019      	movs	r1, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	691a      	ldr	r2, [r3, #16]
 8004270:	4b67      	ldr	r3, [pc, #412]	; (8004410 <HAL_RCC_OscConfig+0x32c>)
 8004272:	430a      	orrs	r2, r1
 8004274:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004276:	4b66      	ldr	r3, [pc, #408]	; (8004410 <HAL_RCC_OscConfig+0x32c>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	0adb      	lsrs	r3, r3, #11
 800427c:	2207      	movs	r2, #7
 800427e:	4013      	ands	r3, r2
 8004280:	4a68      	ldr	r2, [pc, #416]	; (8004424 <HAL_RCC_OscConfig+0x340>)
 8004282:	40da      	lsrs	r2, r3
 8004284:	4b68      	ldr	r3, [pc, #416]	; (8004428 <HAL_RCC_OscConfig+0x344>)
 8004286:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004288:	4b68      	ldr	r3, [pc, #416]	; (800442c <HAL_RCC_OscConfig+0x348>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	0018      	movs	r0, r3
 800428e:	f7ff f88f 	bl	80033b0 <HAL_InitTick>
 8004292:	1e03      	subs	r3, r0, #0
 8004294:	d051      	beq.n	800433a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e22c      	b.n	80046f4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d030      	beq.n	8004304 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80042a2:	4b5b      	ldr	r3, [pc, #364]	; (8004410 <HAL_RCC_OscConfig+0x32c>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a5e      	ldr	r2, [pc, #376]	; (8004420 <HAL_RCC_OscConfig+0x33c>)
 80042a8:	4013      	ands	r3, r2
 80042aa:	0019      	movs	r1, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	691a      	ldr	r2, [r3, #16]
 80042b0:	4b57      	ldr	r3, [pc, #348]	; (8004410 <HAL_RCC_OscConfig+0x32c>)
 80042b2:	430a      	orrs	r2, r1
 80042b4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80042b6:	4b56      	ldr	r3, [pc, #344]	; (8004410 <HAL_RCC_OscConfig+0x32c>)
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	4b55      	ldr	r3, [pc, #340]	; (8004410 <HAL_RCC_OscConfig+0x32c>)
 80042bc:	2180      	movs	r1, #128	; 0x80
 80042be:	0049      	lsls	r1, r1, #1
 80042c0:	430a      	orrs	r2, r1
 80042c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c4:	f7ff f8d0 	bl	8003468 <HAL_GetTick>
 80042c8:	0003      	movs	r3, r0
 80042ca:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042cc:	e008      	b.n	80042e0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042ce:	f7ff f8cb 	bl	8003468 <HAL_GetTick>
 80042d2:	0002      	movs	r2, r0
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d901      	bls.n	80042e0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80042dc:	2303      	movs	r3, #3
 80042de:	e209      	b.n	80046f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042e0:	4b4b      	ldr	r3, [pc, #300]	; (8004410 <HAL_RCC_OscConfig+0x32c>)
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	2380      	movs	r3, #128	; 0x80
 80042e6:	00db      	lsls	r3, r3, #3
 80042e8:	4013      	ands	r3, r2
 80042ea:	d0f0      	beq.n	80042ce <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042ec:	4b48      	ldr	r3, [pc, #288]	; (8004410 <HAL_RCC_OscConfig+0x32c>)
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	4a4a      	ldr	r2, [pc, #296]	; (800441c <HAL_RCC_OscConfig+0x338>)
 80042f2:	4013      	ands	r3, r2
 80042f4:	0019      	movs	r1, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	695b      	ldr	r3, [r3, #20]
 80042fa:	021a      	lsls	r2, r3, #8
 80042fc:	4b44      	ldr	r3, [pc, #272]	; (8004410 <HAL_RCC_OscConfig+0x32c>)
 80042fe:	430a      	orrs	r2, r1
 8004300:	605a      	str	r2, [r3, #4]
 8004302:	e01b      	b.n	800433c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004304:	4b42      	ldr	r3, [pc, #264]	; (8004410 <HAL_RCC_OscConfig+0x32c>)
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	4b41      	ldr	r3, [pc, #260]	; (8004410 <HAL_RCC_OscConfig+0x32c>)
 800430a:	4949      	ldr	r1, [pc, #292]	; (8004430 <HAL_RCC_OscConfig+0x34c>)
 800430c:	400a      	ands	r2, r1
 800430e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004310:	f7ff f8aa 	bl	8003468 <HAL_GetTick>
 8004314:	0003      	movs	r3, r0
 8004316:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004318:	e008      	b.n	800432c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800431a:	f7ff f8a5 	bl	8003468 <HAL_GetTick>
 800431e:	0002      	movs	r2, r0
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	2b02      	cmp	r3, #2
 8004326:	d901      	bls.n	800432c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	e1e3      	b.n	80046f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800432c:	4b38      	ldr	r3, [pc, #224]	; (8004410 <HAL_RCC_OscConfig+0x32c>)
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	2380      	movs	r3, #128	; 0x80
 8004332:	00db      	lsls	r3, r3, #3
 8004334:	4013      	ands	r3, r2
 8004336:	d1f0      	bne.n	800431a <HAL_RCC_OscConfig+0x236>
 8004338:	e000      	b.n	800433c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800433a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2208      	movs	r2, #8
 8004342:	4013      	ands	r3, r2
 8004344:	d047      	beq.n	80043d6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004346:	4b32      	ldr	r3, [pc, #200]	; (8004410 <HAL_RCC_OscConfig+0x32c>)
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	2238      	movs	r2, #56	; 0x38
 800434c:	4013      	ands	r3, r2
 800434e:	2b18      	cmp	r3, #24
 8004350:	d10a      	bne.n	8004368 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004352:	4b2f      	ldr	r3, [pc, #188]	; (8004410 <HAL_RCC_OscConfig+0x32c>)
 8004354:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004356:	2202      	movs	r2, #2
 8004358:	4013      	ands	r3, r2
 800435a:	d03c      	beq.n	80043d6 <HAL_RCC_OscConfig+0x2f2>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	699b      	ldr	r3, [r3, #24]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d138      	bne.n	80043d6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e1c5      	b.n	80046f4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	699b      	ldr	r3, [r3, #24]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d019      	beq.n	80043a4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004370:	4b27      	ldr	r3, [pc, #156]	; (8004410 <HAL_RCC_OscConfig+0x32c>)
 8004372:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004374:	4b26      	ldr	r3, [pc, #152]	; (8004410 <HAL_RCC_OscConfig+0x32c>)
 8004376:	2101      	movs	r1, #1
 8004378:	430a      	orrs	r2, r1
 800437a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800437c:	f7ff f874 	bl	8003468 <HAL_GetTick>
 8004380:	0003      	movs	r3, r0
 8004382:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004384:	e008      	b.n	8004398 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004386:	f7ff f86f 	bl	8003468 <HAL_GetTick>
 800438a:	0002      	movs	r2, r0
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	2b02      	cmp	r3, #2
 8004392:	d901      	bls.n	8004398 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e1ad      	b.n	80046f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004398:	4b1d      	ldr	r3, [pc, #116]	; (8004410 <HAL_RCC_OscConfig+0x32c>)
 800439a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800439c:	2202      	movs	r2, #2
 800439e:	4013      	ands	r3, r2
 80043a0:	d0f1      	beq.n	8004386 <HAL_RCC_OscConfig+0x2a2>
 80043a2:	e018      	b.n	80043d6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80043a4:	4b1a      	ldr	r3, [pc, #104]	; (8004410 <HAL_RCC_OscConfig+0x32c>)
 80043a6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80043a8:	4b19      	ldr	r3, [pc, #100]	; (8004410 <HAL_RCC_OscConfig+0x32c>)
 80043aa:	2101      	movs	r1, #1
 80043ac:	438a      	bics	r2, r1
 80043ae:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043b0:	f7ff f85a 	bl	8003468 <HAL_GetTick>
 80043b4:	0003      	movs	r3, r0
 80043b6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80043b8:	e008      	b.n	80043cc <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043ba:	f7ff f855 	bl	8003468 <HAL_GetTick>
 80043be:	0002      	movs	r2, r0
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	1ad3      	subs	r3, r2, r3
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	d901      	bls.n	80043cc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80043c8:	2303      	movs	r3, #3
 80043ca:	e193      	b.n	80046f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80043cc:	4b10      	ldr	r3, [pc, #64]	; (8004410 <HAL_RCC_OscConfig+0x32c>)
 80043ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043d0:	2202      	movs	r2, #2
 80043d2:	4013      	ands	r3, r2
 80043d4:	d1f1      	bne.n	80043ba <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2204      	movs	r2, #4
 80043dc:	4013      	ands	r3, r2
 80043de:	d100      	bne.n	80043e2 <HAL_RCC_OscConfig+0x2fe>
 80043e0:	e0c6      	b.n	8004570 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043e2:	231f      	movs	r3, #31
 80043e4:	18fb      	adds	r3, r7, r3
 80043e6:	2200      	movs	r2, #0
 80043e8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80043ea:	4b09      	ldr	r3, [pc, #36]	; (8004410 <HAL_RCC_OscConfig+0x32c>)
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	2238      	movs	r2, #56	; 0x38
 80043f0:	4013      	ands	r3, r2
 80043f2:	2b20      	cmp	r3, #32
 80043f4:	d11e      	bne.n	8004434 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80043f6:	4b06      	ldr	r3, [pc, #24]	; (8004410 <HAL_RCC_OscConfig+0x32c>)
 80043f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043fa:	2202      	movs	r2, #2
 80043fc:	4013      	ands	r3, r2
 80043fe:	d100      	bne.n	8004402 <HAL_RCC_OscConfig+0x31e>
 8004400:	e0b6      	b.n	8004570 <HAL_RCC_OscConfig+0x48c>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d000      	beq.n	800440c <HAL_RCC_OscConfig+0x328>
 800440a:	e0b1      	b.n	8004570 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e171      	b.n	80046f4 <HAL_RCC_OscConfig+0x610>
 8004410:	40021000 	.word	0x40021000
 8004414:	fffeffff 	.word	0xfffeffff
 8004418:	fffbffff 	.word	0xfffbffff
 800441c:	ffff80ff 	.word	0xffff80ff
 8004420:	ffffc7ff 	.word	0xffffc7ff
 8004424:	00f42400 	.word	0x00f42400
 8004428:	20000070 	.word	0x20000070
 800442c:	20000074 	.word	0x20000074
 8004430:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004434:	4bb1      	ldr	r3, [pc, #708]	; (80046fc <HAL_RCC_OscConfig+0x618>)
 8004436:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004438:	2380      	movs	r3, #128	; 0x80
 800443a:	055b      	lsls	r3, r3, #21
 800443c:	4013      	ands	r3, r2
 800443e:	d101      	bne.n	8004444 <HAL_RCC_OscConfig+0x360>
 8004440:	2301      	movs	r3, #1
 8004442:	e000      	b.n	8004446 <HAL_RCC_OscConfig+0x362>
 8004444:	2300      	movs	r3, #0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d011      	beq.n	800446e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800444a:	4bac      	ldr	r3, [pc, #688]	; (80046fc <HAL_RCC_OscConfig+0x618>)
 800444c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800444e:	4bab      	ldr	r3, [pc, #684]	; (80046fc <HAL_RCC_OscConfig+0x618>)
 8004450:	2180      	movs	r1, #128	; 0x80
 8004452:	0549      	lsls	r1, r1, #21
 8004454:	430a      	orrs	r2, r1
 8004456:	63da      	str	r2, [r3, #60]	; 0x3c
 8004458:	4ba8      	ldr	r3, [pc, #672]	; (80046fc <HAL_RCC_OscConfig+0x618>)
 800445a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800445c:	2380      	movs	r3, #128	; 0x80
 800445e:	055b      	lsls	r3, r3, #21
 8004460:	4013      	ands	r3, r2
 8004462:	60fb      	str	r3, [r7, #12]
 8004464:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004466:	231f      	movs	r3, #31
 8004468:	18fb      	adds	r3, r7, r3
 800446a:	2201      	movs	r2, #1
 800446c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800446e:	4ba4      	ldr	r3, [pc, #656]	; (8004700 <HAL_RCC_OscConfig+0x61c>)
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	2380      	movs	r3, #128	; 0x80
 8004474:	005b      	lsls	r3, r3, #1
 8004476:	4013      	ands	r3, r2
 8004478:	d11a      	bne.n	80044b0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800447a:	4ba1      	ldr	r3, [pc, #644]	; (8004700 <HAL_RCC_OscConfig+0x61c>)
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	4ba0      	ldr	r3, [pc, #640]	; (8004700 <HAL_RCC_OscConfig+0x61c>)
 8004480:	2180      	movs	r1, #128	; 0x80
 8004482:	0049      	lsls	r1, r1, #1
 8004484:	430a      	orrs	r2, r1
 8004486:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004488:	f7fe ffee 	bl	8003468 <HAL_GetTick>
 800448c:	0003      	movs	r3, r0
 800448e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004490:	e008      	b.n	80044a4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004492:	f7fe ffe9 	bl	8003468 <HAL_GetTick>
 8004496:	0002      	movs	r2, r0
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	2b02      	cmp	r3, #2
 800449e:	d901      	bls.n	80044a4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	e127      	b.n	80046f4 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044a4:	4b96      	ldr	r3, [pc, #600]	; (8004700 <HAL_RCC_OscConfig+0x61c>)
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	2380      	movs	r3, #128	; 0x80
 80044aa:	005b      	lsls	r3, r3, #1
 80044ac:	4013      	ands	r3, r2
 80044ae:	d0f0      	beq.n	8004492 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d106      	bne.n	80044c6 <HAL_RCC_OscConfig+0x3e2>
 80044b8:	4b90      	ldr	r3, [pc, #576]	; (80046fc <HAL_RCC_OscConfig+0x618>)
 80044ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80044bc:	4b8f      	ldr	r3, [pc, #572]	; (80046fc <HAL_RCC_OscConfig+0x618>)
 80044be:	2101      	movs	r1, #1
 80044c0:	430a      	orrs	r2, r1
 80044c2:	65da      	str	r2, [r3, #92]	; 0x5c
 80044c4:	e01c      	b.n	8004500 <HAL_RCC_OscConfig+0x41c>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	2b05      	cmp	r3, #5
 80044cc:	d10c      	bne.n	80044e8 <HAL_RCC_OscConfig+0x404>
 80044ce:	4b8b      	ldr	r3, [pc, #556]	; (80046fc <HAL_RCC_OscConfig+0x618>)
 80044d0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80044d2:	4b8a      	ldr	r3, [pc, #552]	; (80046fc <HAL_RCC_OscConfig+0x618>)
 80044d4:	2104      	movs	r1, #4
 80044d6:	430a      	orrs	r2, r1
 80044d8:	65da      	str	r2, [r3, #92]	; 0x5c
 80044da:	4b88      	ldr	r3, [pc, #544]	; (80046fc <HAL_RCC_OscConfig+0x618>)
 80044dc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80044de:	4b87      	ldr	r3, [pc, #540]	; (80046fc <HAL_RCC_OscConfig+0x618>)
 80044e0:	2101      	movs	r1, #1
 80044e2:	430a      	orrs	r2, r1
 80044e4:	65da      	str	r2, [r3, #92]	; 0x5c
 80044e6:	e00b      	b.n	8004500 <HAL_RCC_OscConfig+0x41c>
 80044e8:	4b84      	ldr	r3, [pc, #528]	; (80046fc <HAL_RCC_OscConfig+0x618>)
 80044ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80044ec:	4b83      	ldr	r3, [pc, #524]	; (80046fc <HAL_RCC_OscConfig+0x618>)
 80044ee:	2101      	movs	r1, #1
 80044f0:	438a      	bics	r2, r1
 80044f2:	65da      	str	r2, [r3, #92]	; 0x5c
 80044f4:	4b81      	ldr	r3, [pc, #516]	; (80046fc <HAL_RCC_OscConfig+0x618>)
 80044f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80044f8:	4b80      	ldr	r3, [pc, #512]	; (80046fc <HAL_RCC_OscConfig+0x618>)
 80044fa:	2104      	movs	r1, #4
 80044fc:	438a      	bics	r2, r1
 80044fe:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d014      	beq.n	8004532 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004508:	f7fe ffae 	bl	8003468 <HAL_GetTick>
 800450c:	0003      	movs	r3, r0
 800450e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004510:	e009      	b.n	8004526 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004512:	f7fe ffa9 	bl	8003468 <HAL_GetTick>
 8004516:	0002      	movs	r2, r0
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	4a79      	ldr	r2, [pc, #484]	; (8004704 <HAL_RCC_OscConfig+0x620>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d901      	bls.n	8004526 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e0e6      	b.n	80046f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004526:	4b75      	ldr	r3, [pc, #468]	; (80046fc <HAL_RCC_OscConfig+0x618>)
 8004528:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800452a:	2202      	movs	r2, #2
 800452c:	4013      	ands	r3, r2
 800452e:	d0f0      	beq.n	8004512 <HAL_RCC_OscConfig+0x42e>
 8004530:	e013      	b.n	800455a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004532:	f7fe ff99 	bl	8003468 <HAL_GetTick>
 8004536:	0003      	movs	r3, r0
 8004538:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800453a:	e009      	b.n	8004550 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800453c:	f7fe ff94 	bl	8003468 <HAL_GetTick>
 8004540:	0002      	movs	r2, r0
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	4a6f      	ldr	r2, [pc, #444]	; (8004704 <HAL_RCC_OscConfig+0x620>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d901      	bls.n	8004550 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	e0d1      	b.n	80046f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004550:	4b6a      	ldr	r3, [pc, #424]	; (80046fc <HAL_RCC_OscConfig+0x618>)
 8004552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004554:	2202      	movs	r2, #2
 8004556:	4013      	ands	r3, r2
 8004558:	d1f0      	bne.n	800453c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800455a:	231f      	movs	r3, #31
 800455c:	18fb      	adds	r3, r7, r3
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	2b01      	cmp	r3, #1
 8004562:	d105      	bne.n	8004570 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004564:	4b65      	ldr	r3, [pc, #404]	; (80046fc <HAL_RCC_OscConfig+0x618>)
 8004566:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004568:	4b64      	ldr	r3, [pc, #400]	; (80046fc <HAL_RCC_OscConfig+0x618>)
 800456a:	4967      	ldr	r1, [pc, #412]	; (8004708 <HAL_RCC_OscConfig+0x624>)
 800456c:	400a      	ands	r2, r1
 800456e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	69db      	ldr	r3, [r3, #28]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d100      	bne.n	800457a <HAL_RCC_OscConfig+0x496>
 8004578:	e0bb      	b.n	80046f2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800457a:	4b60      	ldr	r3, [pc, #384]	; (80046fc <HAL_RCC_OscConfig+0x618>)
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	2238      	movs	r2, #56	; 0x38
 8004580:	4013      	ands	r3, r2
 8004582:	2b10      	cmp	r3, #16
 8004584:	d100      	bne.n	8004588 <HAL_RCC_OscConfig+0x4a4>
 8004586:	e07b      	b.n	8004680 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	69db      	ldr	r3, [r3, #28]
 800458c:	2b02      	cmp	r3, #2
 800458e:	d156      	bne.n	800463e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004590:	4b5a      	ldr	r3, [pc, #360]	; (80046fc <HAL_RCC_OscConfig+0x618>)
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	4b59      	ldr	r3, [pc, #356]	; (80046fc <HAL_RCC_OscConfig+0x618>)
 8004596:	495d      	ldr	r1, [pc, #372]	; (800470c <HAL_RCC_OscConfig+0x628>)
 8004598:	400a      	ands	r2, r1
 800459a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800459c:	f7fe ff64 	bl	8003468 <HAL_GetTick>
 80045a0:	0003      	movs	r3, r0
 80045a2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045a4:	e008      	b.n	80045b8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045a6:	f7fe ff5f 	bl	8003468 <HAL_GetTick>
 80045aa:	0002      	movs	r2, r0
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	d901      	bls.n	80045b8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	e09d      	b.n	80046f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045b8:	4b50      	ldr	r3, [pc, #320]	; (80046fc <HAL_RCC_OscConfig+0x618>)
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	2380      	movs	r3, #128	; 0x80
 80045be:	049b      	lsls	r3, r3, #18
 80045c0:	4013      	ands	r3, r2
 80045c2:	d1f0      	bne.n	80045a6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045c4:	4b4d      	ldr	r3, [pc, #308]	; (80046fc <HAL_RCC_OscConfig+0x618>)
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	4a51      	ldr	r2, [pc, #324]	; (8004710 <HAL_RCC_OscConfig+0x62c>)
 80045ca:	4013      	ands	r3, r2
 80045cc:	0019      	movs	r1, r3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a1a      	ldr	r2, [r3, #32]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d6:	431a      	orrs	r2, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045dc:	021b      	lsls	r3, r3, #8
 80045de:	431a      	orrs	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e4:	431a      	orrs	r2, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ea:	431a      	orrs	r2, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045f0:	431a      	orrs	r2, r3
 80045f2:	4b42      	ldr	r3, [pc, #264]	; (80046fc <HAL_RCC_OscConfig+0x618>)
 80045f4:	430a      	orrs	r2, r1
 80045f6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045f8:	4b40      	ldr	r3, [pc, #256]	; (80046fc <HAL_RCC_OscConfig+0x618>)
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	4b3f      	ldr	r3, [pc, #252]	; (80046fc <HAL_RCC_OscConfig+0x618>)
 80045fe:	2180      	movs	r1, #128	; 0x80
 8004600:	0449      	lsls	r1, r1, #17
 8004602:	430a      	orrs	r2, r1
 8004604:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004606:	4b3d      	ldr	r3, [pc, #244]	; (80046fc <HAL_RCC_OscConfig+0x618>)
 8004608:	68da      	ldr	r2, [r3, #12]
 800460a:	4b3c      	ldr	r3, [pc, #240]	; (80046fc <HAL_RCC_OscConfig+0x618>)
 800460c:	2180      	movs	r1, #128	; 0x80
 800460e:	0549      	lsls	r1, r1, #21
 8004610:	430a      	orrs	r2, r1
 8004612:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004614:	f7fe ff28 	bl	8003468 <HAL_GetTick>
 8004618:	0003      	movs	r3, r0
 800461a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800461c:	e008      	b.n	8004630 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800461e:	f7fe ff23 	bl	8003468 <HAL_GetTick>
 8004622:	0002      	movs	r2, r0
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	2b02      	cmp	r3, #2
 800462a:	d901      	bls.n	8004630 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	e061      	b.n	80046f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004630:	4b32      	ldr	r3, [pc, #200]	; (80046fc <HAL_RCC_OscConfig+0x618>)
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	2380      	movs	r3, #128	; 0x80
 8004636:	049b      	lsls	r3, r3, #18
 8004638:	4013      	ands	r3, r2
 800463a:	d0f0      	beq.n	800461e <HAL_RCC_OscConfig+0x53a>
 800463c:	e059      	b.n	80046f2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800463e:	4b2f      	ldr	r3, [pc, #188]	; (80046fc <HAL_RCC_OscConfig+0x618>)
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	4b2e      	ldr	r3, [pc, #184]	; (80046fc <HAL_RCC_OscConfig+0x618>)
 8004644:	4931      	ldr	r1, [pc, #196]	; (800470c <HAL_RCC_OscConfig+0x628>)
 8004646:	400a      	ands	r2, r1
 8004648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800464a:	f7fe ff0d 	bl	8003468 <HAL_GetTick>
 800464e:	0003      	movs	r3, r0
 8004650:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004652:	e008      	b.n	8004666 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004654:	f7fe ff08 	bl	8003468 <HAL_GetTick>
 8004658:	0002      	movs	r2, r0
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	2b02      	cmp	r3, #2
 8004660:	d901      	bls.n	8004666 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e046      	b.n	80046f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004666:	4b25      	ldr	r3, [pc, #148]	; (80046fc <HAL_RCC_OscConfig+0x618>)
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	2380      	movs	r3, #128	; 0x80
 800466c:	049b      	lsls	r3, r3, #18
 800466e:	4013      	ands	r3, r2
 8004670:	d1f0      	bne.n	8004654 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8004672:	4b22      	ldr	r3, [pc, #136]	; (80046fc <HAL_RCC_OscConfig+0x618>)
 8004674:	68da      	ldr	r2, [r3, #12]
 8004676:	4b21      	ldr	r3, [pc, #132]	; (80046fc <HAL_RCC_OscConfig+0x618>)
 8004678:	4926      	ldr	r1, [pc, #152]	; (8004714 <HAL_RCC_OscConfig+0x630>)
 800467a:	400a      	ands	r2, r1
 800467c:	60da      	str	r2, [r3, #12]
 800467e:	e038      	b.n	80046f2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	69db      	ldr	r3, [r3, #28]
 8004684:	2b01      	cmp	r3, #1
 8004686:	d101      	bne.n	800468c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e033      	b.n	80046f4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800468c:	4b1b      	ldr	r3, [pc, #108]	; (80046fc <HAL_RCC_OscConfig+0x618>)
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	2203      	movs	r2, #3
 8004696:	401a      	ands	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a1b      	ldr	r3, [r3, #32]
 800469c:	429a      	cmp	r2, r3
 800469e:	d126      	bne.n	80046ee <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	2270      	movs	r2, #112	; 0x70
 80046a4:	401a      	ands	r2, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d11f      	bne.n	80046ee <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046ae:	697a      	ldr	r2, [r7, #20]
 80046b0:	23fe      	movs	r3, #254	; 0xfe
 80046b2:	01db      	lsls	r3, r3, #7
 80046b4:	401a      	ands	r2, r3
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ba:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80046bc:	429a      	cmp	r2, r3
 80046be:	d116      	bne.n	80046ee <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80046c0:	697a      	ldr	r2, [r7, #20]
 80046c2:	23f8      	movs	r3, #248	; 0xf8
 80046c4:	039b      	lsls	r3, r3, #14
 80046c6:	401a      	ands	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d10e      	bne.n	80046ee <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80046d0:	697a      	ldr	r2, [r7, #20]
 80046d2:	23e0      	movs	r3, #224	; 0xe0
 80046d4:	051b      	lsls	r3, r3, #20
 80046d6:	401a      	ands	r2, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80046dc:	429a      	cmp	r2, r3
 80046de:	d106      	bne.n	80046ee <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	0f5b      	lsrs	r3, r3, #29
 80046e4:	075a      	lsls	r2, r3, #29
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d001      	beq.n	80046f2 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e000      	b.n	80046f4 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80046f2:	2300      	movs	r3, #0
}
 80046f4:	0018      	movs	r0, r3
 80046f6:	46bd      	mov	sp, r7
 80046f8:	b008      	add	sp, #32
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	40021000 	.word	0x40021000
 8004700:	40007000 	.word	0x40007000
 8004704:	00001388 	.word	0x00001388
 8004708:	efffffff 	.word	0xefffffff
 800470c:	feffffff 	.word	0xfeffffff
 8004710:	11c1808c 	.word	0x11c1808c
 8004714:	eefefffc 	.word	0xeefefffc

08004718 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d101      	bne.n	800472c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e0e9      	b.n	8004900 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800472c:	4b76      	ldr	r3, [pc, #472]	; (8004908 <HAL_RCC_ClockConfig+0x1f0>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2207      	movs	r2, #7
 8004732:	4013      	ands	r3, r2
 8004734:	683a      	ldr	r2, [r7, #0]
 8004736:	429a      	cmp	r2, r3
 8004738:	d91e      	bls.n	8004778 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800473a:	4b73      	ldr	r3, [pc, #460]	; (8004908 <HAL_RCC_ClockConfig+0x1f0>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	2207      	movs	r2, #7
 8004740:	4393      	bics	r3, r2
 8004742:	0019      	movs	r1, r3
 8004744:	4b70      	ldr	r3, [pc, #448]	; (8004908 <HAL_RCC_ClockConfig+0x1f0>)
 8004746:	683a      	ldr	r2, [r7, #0]
 8004748:	430a      	orrs	r2, r1
 800474a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800474c:	f7fe fe8c 	bl	8003468 <HAL_GetTick>
 8004750:	0003      	movs	r3, r0
 8004752:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004754:	e009      	b.n	800476a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004756:	f7fe fe87 	bl	8003468 <HAL_GetTick>
 800475a:	0002      	movs	r2, r0
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	4a6a      	ldr	r2, [pc, #424]	; (800490c <HAL_RCC_ClockConfig+0x1f4>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d901      	bls.n	800476a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e0ca      	b.n	8004900 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800476a:	4b67      	ldr	r3, [pc, #412]	; (8004908 <HAL_RCC_ClockConfig+0x1f0>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2207      	movs	r2, #7
 8004770:	4013      	ands	r3, r2
 8004772:	683a      	ldr	r2, [r7, #0]
 8004774:	429a      	cmp	r2, r3
 8004776:	d1ee      	bne.n	8004756 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2202      	movs	r2, #2
 800477e:	4013      	ands	r3, r2
 8004780:	d015      	beq.n	80047ae <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2204      	movs	r2, #4
 8004788:	4013      	ands	r3, r2
 800478a:	d006      	beq.n	800479a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800478c:	4b60      	ldr	r3, [pc, #384]	; (8004910 <HAL_RCC_ClockConfig+0x1f8>)
 800478e:	689a      	ldr	r2, [r3, #8]
 8004790:	4b5f      	ldr	r3, [pc, #380]	; (8004910 <HAL_RCC_ClockConfig+0x1f8>)
 8004792:	21e0      	movs	r1, #224	; 0xe0
 8004794:	01c9      	lsls	r1, r1, #7
 8004796:	430a      	orrs	r2, r1
 8004798:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800479a:	4b5d      	ldr	r3, [pc, #372]	; (8004910 <HAL_RCC_ClockConfig+0x1f8>)
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	4a5d      	ldr	r2, [pc, #372]	; (8004914 <HAL_RCC_ClockConfig+0x1fc>)
 80047a0:	4013      	ands	r3, r2
 80047a2:	0019      	movs	r1, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	689a      	ldr	r2, [r3, #8]
 80047a8:	4b59      	ldr	r3, [pc, #356]	; (8004910 <HAL_RCC_ClockConfig+0x1f8>)
 80047aa:	430a      	orrs	r2, r1
 80047ac:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2201      	movs	r2, #1
 80047b4:	4013      	ands	r3, r2
 80047b6:	d057      	beq.n	8004868 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d107      	bne.n	80047d0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047c0:	4b53      	ldr	r3, [pc, #332]	; (8004910 <HAL_RCC_ClockConfig+0x1f8>)
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	2380      	movs	r3, #128	; 0x80
 80047c6:	029b      	lsls	r3, r3, #10
 80047c8:	4013      	ands	r3, r2
 80047ca:	d12b      	bne.n	8004824 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e097      	b.n	8004900 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	2b02      	cmp	r3, #2
 80047d6:	d107      	bne.n	80047e8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047d8:	4b4d      	ldr	r3, [pc, #308]	; (8004910 <HAL_RCC_ClockConfig+0x1f8>)
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	2380      	movs	r3, #128	; 0x80
 80047de:	049b      	lsls	r3, r3, #18
 80047e0:	4013      	ands	r3, r2
 80047e2:	d11f      	bne.n	8004824 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e08b      	b.n	8004900 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d107      	bne.n	8004800 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047f0:	4b47      	ldr	r3, [pc, #284]	; (8004910 <HAL_RCC_ClockConfig+0x1f8>)
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	2380      	movs	r3, #128	; 0x80
 80047f6:	00db      	lsls	r3, r3, #3
 80047f8:	4013      	ands	r3, r2
 80047fa:	d113      	bne.n	8004824 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e07f      	b.n	8004900 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	2b03      	cmp	r3, #3
 8004806:	d106      	bne.n	8004816 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004808:	4b41      	ldr	r3, [pc, #260]	; (8004910 <HAL_RCC_ClockConfig+0x1f8>)
 800480a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800480c:	2202      	movs	r2, #2
 800480e:	4013      	ands	r3, r2
 8004810:	d108      	bne.n	8004824 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e074      	b.n	8004900 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004816:	4b3e      	ldr	r3, [pc, #248]	; (8004910 <HAL_RCC_ClockConfig+0x1f8>)
 8004818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800481a:	2202      	movs	r2, #2
 800481c:	4013      	ands	r3, r2
 800481e:	d101      	bne.n	8004824 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e06d      	b.n	8004900 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004824:	4b3a      	ldr	r3, [pc, #232]	; (8004910 <HAL_RCC_ClockConfig+0x1f8>)
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	2207      	movs	r2, #7
 800482a:	4393      	bics	r3, r2
 800482c:	0019      	movs	r1, r3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685a      	ldr	r2, [r3, #4]
 8004832:	4b37      	ldr	r3, [pc, #220]	; (8004910 <HAL_RCC_ClockConfig+0x1f8>)
 8004834:	430a      	orrs	r2, r1
 8004836:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004838:	f7fe fe16 	bl	8003468 <HAL_GetTick>
 800483c:	0003      	movs	r3, r0
 800483e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004840:	e009      	b.n	8004856 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004842:	f7fe fe11 	bl	8003468 <HAL_GetTick>
 8004846:	0002      	movs	r2, r0
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	4a2f      	ldr	r2, [pc, #188]	; (800490c <HAL_RCC_ClockConfig+0x1f4>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d901      	bls.n	8004856 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004852:	2303      	movs	r3, #3
 8004854:	e054      	b.n	8004900 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004856:	4b2e      	ldr	r3, [pc, #184]	; (8004910 <HAL_RCC_ClockConfig+0x1f8>)
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	2238      	movs	r2, #56	; 0x38
 800485c:	401a      	ands	r2, r3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	00db      	lsls	r3, r3, #3
 8004864:	429a      	cmp	r2, r3
 8004866:	d1ec      	bne.n	8004842 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004868:	4b27      	ldr	r3, [pc, #156]	; (8004908 <HAL_RCC_ClockConfig+0x1f0>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2207      	movs	r2, #7
 800486e:	4013      	ands	r3, r2
 8004870:	683a      	ldr	r2, [r7, #0]
 8004872:	429a      	cmp	r2, r3
 8004874:	d21e      	bcs.n	80048b4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004876:	4b24      	ldr	r3, [pc, #144]	; (8004908 <HAL_RCC_ClockConfig+0x1f0>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2207      	movs	r2, #7
 800487c:	4393      	bics	r3, r2
 800487e:	0019      	movs	r1, r3
 8004880:	4b21      	ldr	r3, [pc, #132]	; (8004908 <HAL_RCC_ClockConfig+0x1f0>)
 8004882:	683a      	ldr	r2, [r7, #0]
 8004884:	430a      	orrs	r2, r1
 8004886:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004888:	f7fe fdee 	bl	8003468 <HAL_GetTick>
 800488c:	0003      	movs	r3, r0
 800488e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004890:	e009      	b.n	80048a6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004892:	f7fe fde9 	bl	8003468 <HAL_GetTick>
 8004896:	0002      	movs	r2, r0
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	4a1b      	ldr	r2, [pc, #108]	; (800490c <HAL_RCC_ClockConfig+0x1f4>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d901      	bls.n	80048a6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e02c      	b.n	8004900 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80048a6:	4b18      	ldr	r3, [pc, #96]	; (8004908 <HAL_RCC_ClockConfig+0x1f0>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	2207      	movs	r2, #7
 80048ac:	4013      	ands	r3, r2
 80048ae:	683a      	ldr	r2, [r7, #0]
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d1ee      	bne.n	8004892 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2204      	movs	r2, #4
 80048ba:	4013      	ands	r3, r2
 80048bc:	d009      	beq.n	80048d2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80048be:	4b14      	ldr	r3, [pc, #80]	; (8004910 <HAL_RCC_ClockConfig+0x1f8>)
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	4a15      	ldr	r2, [pc, #84]	; (8004918 <HAL_RCC_ClockConfig+0x200>)
 80048c4:	4013      	ands	r3, r2
 80048c6:	0019      	movs	r1, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	68da      	ldr	r2, [r3, #12]
 80048cc:	4b10      	ldr	r3, [pc, #64]	; (8004910 <HAL_RCC_ClockConfig+0x1f8>)
 80048ce:	430a      	orrs	r2, r1
 80048d0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80048d2:	f000 f829 	bl	8004928 <HAL_RCC_GetSysClockFreq>
 80048d6:	0001      	movs	r1, r0
 80048d8:	4b0d      	ldr	r3, [pc, #52]	; (8004910 <HAL_RCC_ClockConfig+0x1f8>)
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	0a1b      	lsrs	r3, r3, #8
 80048de:	220f      	movs	r2, #15
 80048e0:	401a      	ands	r2, r3
 80048e2:	4b0e      	ldr	r3, [pc, #56]	; (800491c <HAL_RCC_ClockConfig+0x204>)
 80048e4:	0092      	lsls	r2, r2, #2
 80048e6:	58d3      	ldr	r3, [r2, r3]
 80048e8:	221f      	movs	r2, #31
 80048ea:	4013      	ands	r3, r2
 80048ec:	000a      	movs	r2, r1
 80048ee:	40da      	lsrs	r2, r3
 80048f0:	4b0b      	ldr	r3, [pc, #44]	; (8004920 <HAL_RCC_ClockConfig+0x208>)
 80048f2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80048f4:	4b0b      	ldr	r3, [pc, #44]	; (8004924 <HAL_RCC_ClockConfig+0x20c>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	0018      	movs	r0, r3
 80048fa:	f7fe fd59 	bl	80033b0 <HAL_InitTick>
 80048fe:	0003      	movs	r3, r0
}
 8004900:	0018      	movs	r0, r3
 8004902:	46bd      	mov	sp, r7
 8004904:	b004      	add	sp, #16
 8004906:	bd80      	pop	{r7, pc}
 8004908:	40022000 	.word	0x40022000
 800490c:	00001388 	.word	0x00001388
 8004910:	40021000 	.word	0x40021000
 8004914:	fffff0ff 	.word	0xfffff0ff
 8004918:	ffff8fff 	.word	0xffff8fff
 800491c:	0800a720 	.word	0x0800a720
 8004920:	20000070 	.word	0x20000070
 8004924:	20000074 	.word	0x20000074

08004928 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b086      	sub	sp, #24
 800492c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800492e:	4b3c      	ldr	r3, [pc, #240]	; (8004a20 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	2238      	movs	r2, #56	; 0x38
 8004934:	4013      	ands	r3, r2
 8004936:	d10f      	bne.n	8004958 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004938:	4b39      	ldr	r3, [pc, #228]	; (8004a20 <HAL_RCC_GetSysClockFreq+0xf8>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	0adb      	lsrs	r3, r3, #11
 800493e:	2207      	movs	r2, #7
 8004940:	4013      	ands	r3, r2
 8004942:	2201      	movs	r2, #1
 8004944:	409a      	lsls	r2, r3
 8004946:	0013      	movs	r3, r2
 8004948:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800494a:	6839      	ldr	r1, [r7, #0]
 800494c:	4835      	ldr	r0, [pc, #212]	; (8004a24 <HAL_RCC_GetSysClockFreq+0xfc>)
 800494e:	f7fb fbf5 	bl	800013c <__udivsi3>
 8004952:	0003      	movs	r3, r0
 8004954:	613b      	str	r3, [r7, #16]
 8004956:	e05d      	b.n	8004a14 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004958:	4b31      	ldr	r3, [pc, #196]	; (8004a20 <HAL_RCC_GetSysClockFreq+0xf8>)
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	2238      	movs	r2, #56	; 0x38
 800495e:	4013      	ands	r3, r2
 8004960:	2b08      	cmp	r3, #8
 8004962:	d102      	bne.n	800496a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004964:	4b30      	ldr	r3, [pc, #192]	; (8004a28 <HAL_RCC_GetSysClockFreq+0x100>)
 8004966:	613b      	str	r3, [r7, #16]
 8004968:	e054      	b.n	8004a14 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800496a:	4b2d      	ldr	r3, [pc, #180]	; (8004a20 <HAL_RCC_GetSysClockFreq+0xf8>)
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	2238      	movs	r2, #56	; 0x38
 8004970:	4013      	ands	r3, r2
 8004972:	2b10      	cmp	r3, #16
 8004974:	d138      	bne.n	80049e8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004976:	4b2a      	ldr	r3, [pc, #168]	; (8004a20 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	2203      	movs	r2, #3
 800497c:	4013      	ands	r3, r2
 800497e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004980:	4b27      	ldr	r3, [pc, #156]	; (8004a20 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	091b      	lsrs	r3, r3, #4
 8004986:	2207      	movs	r2, #7
 8004988:	4013      	ands	r3, r2
 800498a:	3301      	adds	r3, #1
 800498c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2b03      	cmp	r3, #3
 8004992:	d10d      	bne.n	80049b0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004994:	68b9      	ldr	r1, [r7, #8]
 8004996:	4824      	ldr	r0, [pc, #144]	; (8004a28 <HAL_RCC_GetSysClockFreq+0x100>)
 8004998:	f7fb fbd0 	bl	800013c <__udivsi3>
 800499c:	0003      	movs	r3, r0
 800499e:	0019      	movs	r1, r3
 80049a0:	4b1f      	ldr	r3, [pc, #124]	; (8004a20 <HAL_RCC_GetSysClockFreq+0xf8>)
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	0a1b      	lsrs	r3, r3, #8
 80049a6:	227f      	movs	r2, #127	; 0x7f
 80049a8:	4013      	ands	r3, r2
 80049aa:	434b      	muls	r3, r1
 80049ac:	617b      	str	r3, [r7, #20]
        break;
 80049ae:	e00d      	b.n	80049cc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80049b0:	68b9      	ldr	r1, [r7, #8]
 80049b2:	481c      	ldr	r0, [pc, #112]	; (8004a24 <HAL_RCC_GetSysClockFreq+0xfc>)
 80049b4:	f7fb fbc2 	bl	800013c <__udivsi3>
 80049b8:	0003      	movs	r3, r0
 80049ba:	0019      	movs	r1, r3
 80049bc:	4b18      	ldr	r3, [pc, #96]	; (8004a20 <HAL_RCC_GetSysClockFreq+0xf8>)
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	0a1b      	lsrs	r3, r3, #8
 80049c2:	227f      	movs	r2, #127	; 0x7f
 80049c4:	4013      	ands	r3, r2
 80049c6:	434b      	muls	r3, r1
 80049c8:	617b      	str	r3, [r7, #20]
        break;
 80049ca:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80049cc:	4b14      	ldr	r3, [pc, #80]	; (8004a20 <HAL_RCC_GetSysClockFreq+0xf8>)
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	0f5b      	lsrs	r3, r3, #29
 80049d2:	2207      	movs	r2, #7
 80049d4:	4013      	ands	r3, r2
 80049d6:	3301      	adds	r3, #1
 80049d8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80049da:	6879      	ldr	r1, [r7, #4]
 80049dc:	6978      	ldr	r0, [r7, #20]
 80049de:	f7fb fbad 	bl	800013c <__udivsi3>
 80049e2:	0003      	movs	r3, r0
 80049e4:	613b      	str	r3, [r7, #16]
 80049e6:	e015      	b.n	8004a14 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80049e8:	4b0d      	ldr	r3, [pc, #52]	; (8004a20 <HAL_RCC_GetSysClockFreq+0xf8>)
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	2238      	movs	r2, #56	; 0x38
 80049ee:	4013      	ands	r3, r2
 80049f0:	2b20      	cmp	r3, #32
 80049f2:	d103      	bne.n	80049fc <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80049f4:	2380      	movs	r3, #128	; 0x80
 80049f6:	021b      	lsls	r3, r3, #8
 80049f8:	613b      	str	r3, [r7, #16]
 80049fa:	e00b      	b.n	8004a14 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80049fc:	4b08      	ldr	r3, [pc, #32]	; (8004a20 <HAL_RCC_GetSysClockFreq+0xf8>)
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	2238      	movs	r2, #56	; 0x38
 8004a02:	4013      	ands	r3, r2
 8004a04:	2b18      	cmp	r3, #24
 8004a06:	d103      	bne.n	8004a10 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004a08:	23fa      	movs	r3, #250	; 0xfa
 8004a0a:	01db      	lsls	r3, r3, #7
 8004a0c:	613b      	str	r3, [r7, #16]
 8004a0e:	e001      	b.n	8004a14 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004a10:	2300      	movs	r3, #0
 8004a12:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004a14:	693b      	ldr	r3, [r7, #16]
}
 8004a16:	0018      	movs	r0, r3
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	b006      	add	sp, #24
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	46c0      	nop			; (mov r8, r8)
 8004a20:	40021000 	.word	0x40021000
 8004a24:	00f42400 	.word	0x00f42400
 8004a28:	007a1200 	.word	0x007a1200

08004a2c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a30:	4b02      	ldr	r3, [pc, #8]	; (8004a3c <HAL_RCC_GetHCLKFreq+0x10>)
 8004a32:	681b      	ldr	r3, [r3, #0]
}
 8004a34:	0018      	movs	r0, r3
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	46c0      	nop			; (mov r8, r8)
 8004a3c:	20000070 	.word	0x20000070

08004a40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a40:	b5b0      	push	{r4, r5, r7, lr}
 8004a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004a44:	f7ff fff2 	bl	8004a2c <HAL_RCC_GetHCLKFreq>
 8004a48:	0004      	movs	r4, r0
 8004a4a:	f7ff fb3f 	bl	80040cc <LL_RCC_GetAPB1Prescaler>
 8004a4e:	0003      	movs	r3, r0
 8004a50:	0b1a      	lsrs	r2, r3, #12
 8004a52:	4b05      	ldr	r3, [pc, #20]	; (8004a68 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004a54:	0092      	lsls	r2, r2, #2
 8004a56:	58d3      	ldr	r3, [r2, r3]
 8004a58:	221f      	movs	r2, #31
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	40dc      	lsrs	r4, r3
 8004a5e:	0023      	movs	r3, r4
}
 8004a60:	0018      	movs	r0, r3
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bdb0      	pop	{r4, r5, r7, pc}
 8004a66:	46c0      	nop			; (mov r8, r8)
 8004a68:	0800a760 	.word	0x0800a760

08004a6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b086      	sub	sp, #24
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004a74:	2313      	movs	r3, #19
 8004a76:	18fb      	adds	r3, r7, r3
 8004a78:	2200      	movs	r2, #0
 8004a7a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a7c:	2312      	movs	r3, #18
 8004a7e:	18fb      	adds	r3, r7, r3
 8004a80:	2200      	movs	r2, #0
 8004a82:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	2380      	movs	r3, #128	; 0x80
 8004a8a:	029b      	lsls	r3, r3, #10
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	d100      	bne.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004a90:	e0a3      	b.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a92:	2011      	movs	r0, #17
 8004a94:	183b      	adds	r3, r7, r0
 8004a96:	2200      	movs	r2, #0
 8004a98:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a9a:	4ba5      	ldr	r3, [pc, #660]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a9e:	2380      	movs	r3, #128	; 0x80
 8004aa0:	055b      	lsls	r3, r3, #21
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	d110      	bne.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004aa6:	4ba2      	ldr	r3, [pc, #648]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004aa8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004aaa:	4ba1      	ldr	r3, [pc, #644]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004aac:	2180      	movs	r1, #128	; 0x80
 8004aae:	0549      	lsls	r1, r1, #21
 8004ab0:	430a      	orrs	r2, r1
 8004ab2:	63da      	str	r2, [r3, #60]	; 0x3c
 8004ab4:	4b9e      	ldr	r3, [pc, #632]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004ab6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ab8:	2380      	movs	r3, #128	; 0x80
 8004aba:	055b      	lsls	r3, r3, #21
 8004abc:	4013      	ands	r3, r2
 8004abe:	60bb      	str	r3, [r7, #8]
 8004ac0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ac2:	183b      	adds	r3, r7, r0
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ac8:	4b9a      	ldr	r3, [pc, #616]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	4b99      	ldr	r3, [pc, #612]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004ace:	2180      	movs	r1, #128	; 0x80
 8004ad0:	0049      	lsls	r1, r1, #1
 8004ad2:	430a      	orrs	r2, r1
 8004ad4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ad6:	f7fe fcc7 	bl	8003468 <HAL_GetTick>
 8004ada:	0003      	movs	r3, r0
 8004adc:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ade:	e00b      	b.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ae0:	f7fe fcc2 	bl	8003468 <HAL_GetTick>
 8004ae4:	0002      	movs	r2, r0
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d904      	bls.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004aee:	2313      	movs	r3, #19
 8004af0:	18fb      	adds	r3, r7, r3
 8004af2:	2203      	movs	r2, #3
 8004af4:	701a      	strb	r2, [r3, #0]
        break;
 8004af6:	e005      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004af8:	4b8e      	ldr	r3, [pc, #568]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	2380      	movs	r3, #128	; 0x80
 8004afe:	005b      	lsls	r3, r3, #1
 8004b00:	4013      	ands	r3, r2
 8004b02:	d0ed      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004b04:	2313      	movs	r3, #19
 8004b06:	18fb      	adds	r3, r7, r3
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d154      	bne.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b0e:	4b88      	ldr	r3, [pc, #544]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004b10:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004b12:	23c0      	movs	r3, #192	; 0xc0
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	4013      	ands	r3, r2
 8004b18:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d019      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b24:	697a      	ldr	r2, [r7, #20]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d014      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b2a:	4b81      	ldr	r3, [pc, #516]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004b2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b2e:	4a82      	ldr	r2, [pc, #520]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004b30:	4013      	ands	r3, r2
 8004b32:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b34:	4b7e      	ldr	r3, [pc, #504]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004b36:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004b38:	4b7d      	ldr	r3, [pc, #500]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004b3a:	2180      	movs	r1, #128	; 0x80
 8004b3c:	0249      	lsls	r1, r1, #9
 8004b3e:	430a      	orrs	r2, r1
 8004b40:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b42:	4b7b      	ldr	r3, [pc, #492]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004b44:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004b46:	4b7a      	ldr	r3, [pc, #488]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004b48:	497c      	ldr	r1, [pc, #496]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8004b4a:	400a      	ands	r2, r1
 8004b4c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004b4e:	4b78      	ldr	r3, [pc, #480]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004b50:	697a      	ldr	r2, [r7, #20]
 8004b52:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	2201      	movs	r2, #1
 8004b58:	4013      	ands	r3, r2
 8004b5a:	d016      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b5c:	f7fe fc84 	bl	8003468 <HAL_GetTick>
 8004b60:	0003      	movs	r3, r0
 8004b62:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b64:	e00c      	b.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b66:	f7fe fc7f 	bl	8003468 <HAL_GetTick>
 8004b6a:	0002      	movs	r2, r0
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	4a73      	ldr	r2, [pc, #460]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d904      	bls.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004b76:	2313      	movs	r3, #19
 8004b78:	18fb      	adds	r3, r7, r3
 8004b7a:	2203      	movs	r2, #3
 8004b7c:	701a      	strb	r2, [r3, #0]
            break;
 8004b7e:	e004      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b80:	4b6b      	ldr	r3, [pc, #428]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b84:	2202      	movs	r2, #2
 8004b86:	4013      	ands	r3, r2
 8004b88:	d0ed      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004b8a:	2313      	movs	r3, #19
 8004b8c:	18fb      	adds	r3, r7, r3
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d10a      	bne.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b94:	4b66      	ldr	r3, [pc, #408]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004b96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b98:	4a67      	ldr	r2, [pc, #412]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	0019      	movs	r1, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ba2:	4b63      	ldr	r3, [pc, #396]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004ba4:	430a      	orrs	r2, r1
 8004ba6:	65da      	str	r2, [r3, #92]	; 0x5c
 8004ba8:	e00c      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004baa:	2312      	movs	r3, #18
 8004bac:	18fb      	adds	r3, r7, r3
 8004bae:	2213      	movs	r2, #19
 8004bb0:	18ba      	adds	r2, r7, r2
 8004bb2:	7812      	ldrb	r2, [r2, #0]
 8004bb4:	701a      	strb	r2, [r3, #0]
 8004bb6:	e005      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bb8:	2312      	movs	r3, #18
 8004bba:	18fb      	adds	r3, r7, r3
 8004bbc:	2213      	movs	r2, #19
 8004bbe:	18ba      	adds	r2, r7, r2
 8004bc0:	7812      	ldrb	r2, [r2, #0]
 8004bc2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004bc4:	2311      	movs	r3, #17
 8004bc6:	18fb      	adds	r3, r7, r3
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d105      	bne.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bce:	4b58      	ldr	r3, [pc, #352]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004bd0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bd2:	4b57      	ldr	r3, [pc, #348]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004bd4:	495b      	ldr	r1, [pc, #364]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004bd6:	400a      	ands	r2, r1
 8004bd8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2201      	movs	r2, #1
 8004be0:	4013      	ands	r3, r2
 8004be2:	d009      	beq.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004be4:	4b52      	ldr	r3, [pc, #328]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004be8:	2203      	movs	r2, #3
 8004bea:	4393      	bics	r3, r2
 8004bec:	0019      	movs	r1, r3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	685a      	ldr	r2, [r3, #4]
 8004bf2:	4b4f      	ldr	r3, [pc, #316]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004bf4:	430a      	orrs	r2, r1
 8004bf6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2210      	movs	r2, #16
 8004bfe:	4013      	ands	r3, r2
 8004c00:	d009      	beq.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004c02:	4b4b      	ldr	r3, [pc, #300]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c06:	4a50      	ldr	r2, [pc, #320]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8004c08:	4013      	ands	r3, r2
 8004c0a:	0019      	movs	r1, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	689a      	ldr	r2, [r3, #8]
 8004c10:	4b47      	ldr	r3, [pc, #284]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004c12:	430a      	orrs	r2, r1
 8004c14:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	2380      	movs	r3, #128	; 0x80
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	4013      	ands	r3, r2
 8004c20:	d009      	beq.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c22:	4b43      	ldr	r3, [pc, #268]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c26:	4a49      	ldr	r2, [pc, #292]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004c28:	4013      	ands	r3, r2
 8004c2a:	0019      	movs	r1, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	695a      	ldr	r2, [r3, #20]
 8004c30:	4b3f      	ldr	r3, [pc, #252]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004c32:	430a      	orrs	r2, r1
 8004c34:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	2380      	movs	r3, #128	; 0x80
 8004c3c:	00db      	lsls	r3, r3, #3
 8004c3e:	4013      	ands	r3, r2
 8004c40:	d009      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004c42:	4b3b      	ldr	r3, [pc, #236]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c46:	4a42      	ldr	r2, [pc, #264]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004c48:	4013      	ands	r3, r2
 8004c4a:	0019      	movs	r1, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	699a      	ldr	r2, [r3, #24]
 8004c50:	4b37      	ldr	r3, [pc, #220]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004c52:	430a      	orrs	r2, r1
 8004c54:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	2220      	movs	r2, #32
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	d009      	beq.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c60:	4b33      	ldr	r3, [pc, #204]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c64:	4a3b      	ldr	r2, [pc, #236]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004c66:	4013      	ands	r3, r2
 8004c68:	0019      	movs	r1, r3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	68da      	ldr	r2, [r3, #12]
 8004c6e:	4b30      	ldr	r3, [pc, #192]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004c70:	430a      	orrs	r2, r1
 8004c72:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	2380      	movs	r3, #128	; 0x80
 8004c7a:	01db      	lsls	r3, r3, #7
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	d015      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c80:	4b2b      	ldr	r3, [pc, #172]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004c82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	0899      	lsrs	r1, r3, #2
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	69da      	ldr	r2, [r3, #28]
 8004c8c:	4b28      	ldr	r3, [pc, #160]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004c8e:	430a      	orrs	r2, r1
 8004c90:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	69da      	ldr	r2, [r3, #28]
 8004c96:	2380      	movs	r3, #128	; 0x80
 8004c98:	05db      	lsls	r3, r3, #23
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d106      	bne.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004c9e:	4b24      	ldr	r3, [pc, #144]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004ca0:	68da      	ldr	r2, [r3, #12]
 8004ca2:	4b23      	ldr	r3, [pc, #140]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004ca4:	2180      	movs	r1, #128	; 0x80
 8004ca6:	0249      	lsls	r1, r1, #9
 8004ca8:	430a      	orrs	r2, r1
 8004caa:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	2380      	movs	r3, #128	; 0x80
 8004cb2:	039b      	lsls	r3, r3, #14
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	d016      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004cb8:	4b1d      	ldr	r3, [pc, #116]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cbc:	4a26      	ldr	r2, [pc, #152]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	0019      	movs	r1, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a1a      	ldr	r2, [r3, #32]
 8004cc6:	4b1a      	ldr	r3, [pc, #104]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004cc8:	430a      	orrs	r2, r1
 8004cca:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a1a      	ldr	r2, [r3, #32]
 8004cd0:	2380      	movs	r3, #128	; 0x80
 8004cd2:	03db      	lsls	r3, r3, #15
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d106      	bne.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004cd8:	4b15      	ldr	r3, [pc, #84]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004cda:	68da      	ldr	r2, [r3, #12]
 8004cdc:	4b14      	ldr	r3, [pc, #80]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004cde:	2180      	movs	r1, #128	; 0x80
 8004ce0:	0449      	lsls	r1, r1, #17
 8004ce2:	430a      	orrs	r2, r1
 8004ce4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	2380      	movs	r3, #128	; 0x80
 8004cec:	011b      	lsls	r3, r3, #4
 8004cee:	4013      	ands	r3, r2
 8004cf0:	d016      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004cf2:	4b0f      	ldr	r3, [pc, #60]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cf6:	4a19      	ldr	r2, [pc, #100]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	0019      	movs	r1, r3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	691a      	ldr	r2, [r3, #16]
 8004d00:	4b0b      	ldr	r3, [pc, #44]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004d02:	430a      	orrs	r2, r1
 8004d04:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	691a      	ldr	r2, [r3, #16]
 8004d0a:	2380      	movs	r3, #128	; 0x80
 8004d0c:	01db      	lsls	r3, r3, #7
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d106      	bne.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004d12:	4b07      	ldr	r3, [pc, #28]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004d14:	68da      	ldr	r2, [r3, #12]
 8004d16:	4b06      	ldr	r3, [pc, #24]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004d18:	2180      	movs	r1, #128	; 0x80
 8004d1a:	0249      	lsls	r1, r1, #9
 8004d1c:	430a      	orrs	r2, r1
 8004d1e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004d20:	2312      	movs	r3, #18
 8004d22:	18fb      	adds	r3, r7, r3
 8004d24:	781b      	ldrb	r3, [r3, #0]
}
 8004d26:	0018      	movs	r0, r3
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	b006      	add	sp, #24
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	46c0      	nop			; (mov r8, r8)
 8004d30:	40021000 	.word	0x40021000
 8004d34:	40007000 	.word	0x40007000
 8004d38:	fffffcff 	.word	0xfffffcff
 8004d3c:	fffeffff 	.word	0xfffeffff
 8004d40:	00001388 	.word	0x00001388
 8004d44:	efffffff 	.word	0xefffffff
 8004d48:	fffff3ff 	.word	0xfffff3ff
 8004d4c:	fff3ffff 	.word	0xfff3ffff
 8004d50:	ffcfffff 	.word	0xffcfffff
 8004d54:	ffffcfff 	.word	0xffffcfff
 8004d58:	ffbfffff 	.word	0xffbfffff
 8004d5c:	ffff3fff 	.word	0xffff3fff

08004d60 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004d60:	b5b0      	push	{r4, r5, r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004d68:	230f      	movs	r3, #15
 8004d6a:	18fb      	adds	r3, r7, r3
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d100      	bne.n	8004d78 <HAL_RTC_Init+0x18>
 8004d76:	e08c      	b.n	8004e92 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2229      	movs	r2, #41	; 0x29
 8004d7c:	5c9b      	ldrb	r3, [r3, r2]
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d10b      	bne.n	8004d9c <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2228      	movs	r2, #40	; 0x28
 8004d88:	2100      	movs	r1, #0
 8004d8a:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2288      	movs	r2, #136	; 0x88
 8004d90:	0212      	lsls	r2, r2, #8
 8004d92:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	0018      	movs	r0, r3
 8004d98:	f7fe f8ae 	bl	8002ef8 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2229      	movs	r2, #41	; 0x29
 8004da0:	2102      	movs	r1, #2
 8004da2:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	2210      	movs	r2, #16
 8004dac:	4013      	ands	r3, r2
 8004dae:	2b10      	cmp	r3, #16
 8004db0:	d062      	beq.n	8004e78 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	22ca      	movs	r2, #202	; 0xca
 8004db8:	625a      	str	r2, [r3, #36]	; 0x24
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2253      	movs	r2, #83	; 0x53
 8004dc0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004dc2:	250f      	movs	r5, #15
 8004dc4:	197c      	adds	r4, r7, r5
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	0018      	movs	r0, r3
 8004dca:	f000 f892 	bl	8004ef2 <RTC_EnterInitMode>
 8004dce:	0003      	movs	r3, r0
 8004dd0:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8004dd2:	0028      	movs	r0, r5
 8004dd4:	183b      	adds	r3, r7, r0
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d12c      	bne.n	8004e36 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	699a      	ldr	r2, [r3, #24]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	492e      	ldr	r1, [pc, #184]	; (8004ea0 <HAL_RTC_Init+0x140>)
 8004de8:	400a      	ands	r2, r1
 8004dea:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	6999      	ldr	r1, [r3, #24]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	689a      	ldr	r2, [r3, #8]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	695b      	ldr	r3, [r3, #20]
 8004dfa:	431a      	orrs	r2, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	69db      	ldr	r3, [r3, #28]
 8004e00:	431a      	orrs	r2, r3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	430a      	orrs	r2, r1
 8004e08:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	6912      	ldr	r2, [r2, #16]
 8004e12:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	6919      	ldr	r1, [r3, #16]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	041a      	lsls	r2, r3, #16
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	430a      	orrs	r2, r1
 8004e26:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8004e28:	183c      	adds	r4, r7, r0
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	0018      	movs	r0, r3
 8004e2e:	f000 f8a3 	bl	8004f78 <RTC_ExitInitMode>
 8004e32:	0003      	movs	r3, r0
 8004e34:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8004e36:	230f      	movs	r3, #15
 8004e38:	18fb      	adds	r3, r7, r3
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d116      	bne.n	8004e6e <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	699a      	ldr	r2, [r3, #24]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	00d2      	lsls	r2, r2, #3
 8004e4c:	08d2      	lsrs	r2, r2, #3
 8004e4e:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	6999      	ldr	r1, [r3, #24]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a1b      	ldr	r3, [r3, #32]
 8004e5e:	431a      	orrs	r2, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	699b      	ldr	r3, [r3, #24]
 8004e64:	431a      	orrs	r2, r3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	430a      	orrs	r2, r1
 8004e6c:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	22ff      	movs	r2, #255	; 0xff
 8004e74:	625a      	str	r2, [r3, #36]	; 0x24
 8004e76:	e003      	b.n	8004e80 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8004e78:	230f      	movs	r3, #15
 8004e7a:	18fb      	adds	r3, r7, r3
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8004e80:	230f      	movs	r3, #15
 8004e82:	18fb      	adds	r3, r7, r3
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d103      	bne.n	8004e92 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2229      	movs	r2, #41	; 0x29
 8004e8e:	2101      	movs	r1, #1
 8004e90:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8004e92:	230f      	movs	r3, #15
 8004e94:	18fb      	adds	r3, r7, r3
 8004e96:	781b      	ldrb	r3, [r3, #0]
}
 8004e98:	0018      	movs	r0, r3
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	b004      	add	sp, #16
 8004e9e:	bdb0      	pop	{r4, r5, r7, pc}
 8004ea0:	fb8fffbf 	.word	0xfb8fffbf

08004ea4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	68da      	ldr	r2, [r3, #12]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	21a0      	movs	r1, #160	; 0xa0
 8004eb8:	438a      	bics	r2, r1
 8004eba:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004ebc:	f7fe fad4 	bl	8003468 <HAL_GetTick>
 8004ec0:	0003      	movs	r3, r0
 8004ec2:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8004ec4:	e00a      	b.n	8004edc <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004ec6:	f7fe facf 	bl	8003468 <HAL_GetTick>
 8004eca:	0002      	movs	r2, r0
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	1ad2      	subs	r2, r2, r3
 8004ed0:	23fa      	movs	r3, #250	; 0xfa
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d901      	bls.n	8004edc <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e006      	b.n	8004eea <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	2220      	movs	r2, #32
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	d0ee      	beq.n	8004ec6 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8004ee8:	2300      	movs	r3, #0
}
 8004eea:	0018      	movs	r0, r3
 8004eec:	46bd      	mov	sp, r7
 8004eee:	b004      	add	sp, #16
 8004ef0:	bd80      	pop	{r7, pc}

08004ef2 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004ef2:	b580      	push	{r7, lr}
 8004ef4:	b084      	sub	sp, #16
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8004efa:	230f      	movs	r3, #15
 8004efc:	18fb      	adds	r3, r7, r3
 8004efe:	2200      	movs	r2, #0
 8004f00:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	2240      	movs	r2, #64	; 0x40
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	d12c      	bne.n	8004f68 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68da      	ldr	r2, [r3, #12]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2180      	movs	r1, #128	; 0x80
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004f1e:	f7fe faa3 	bl	8003468 <HAL_GetTick>
 8004f22:	0003      	movs	r3, r0
 8004f24:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004f26:	e014      	b.n	8004f52 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8004f28:	f7fe fa9e 	bl	8003468 <HAL_GetTick>
 8004f2c:	0002      	movs	r2, r0
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	1ad2      	subs	r2, r2, r3
 8004f32:	200f      	movs	r0, #15
 8004f34:	183b      	adds	r3, r7, r0
 8004f36:	1839      	adds	r1, r7, r0
 8004f38:	7809      	ldrb	r1, [r1, #0]
 8004f3a:	7019      	strb	r1, [r3, #0]
 8004f3c:	23fa      	movs	r3, #250	; 0xfa
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d906      	bls.n	8004f52 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8004f44:	183b      	adds	r3, r7, r0
 8004f46:	2203      	movs	r2, #3
 8004f48:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2229      	movs	r2, #41	; 0x29
 8004f4e:	2103      	movs	r1, #3
 8004f50:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	2240      	movs	r2, #64	; 0x40
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	d104      	bne.n	8004f68 <RTC_EnterInitMode+0x76>
 8004f5e:	230f      	movs	r3, #15
 8004f60:	18fb      	adds	r3, r7, r3
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	2b03      	cmp	r3, #3
 8004f66:	d1df      	bne.n	8004f28 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004f68:	230f      	movs	r3, #15
 8004f6a:	18fb      	adds	r3, r7, r3
 8004f6c:	781b      	ldrb	r3, [r3, #0]
}
 8004f6e:	0018      	movs	r0, r3
 8004f70:	46bd      	mov	sp, r7
 8004f72:	b004      	add	sp, #16
 8004f74:	bd80      	pop	{r7, pc}
	...

08004f78 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004f78:	b590      	push	{r4, r7, lr}
 8004f7a:	b085      	sub	sp, #20
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f80:	240f      	movs	r4, #15
 8004f82:	193b      	adds	r3, r7, r4
 8004f84:	2200      	movs	r2, #0
 8004f86:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004f88:	4b1c      	ldr	r3, [pc, #112]	; (8004ffc <RTC_ExitInitMode+0x84>)
 8004f8a:	68da      	ldr	r2, [r3, #12]
 8004f8c:	4b1b      	ldr	r3, [pc, #108]	; (8004ffc <RTC_ExitInitMode+0x84>)
 8004f8e:	2180      	movs	r1, #128	; 0x80
 8004f90:	438a      	bics	r2, r1
 8004f92:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004f94:	4b19      	ldr	r3, [pc, #100]	; (8004ffc <RTC_ExitInitMode+0x84>)
 8004f96:	699b      	ldr	r3, [r3, #24]
 8004f98:	2220      	movs	r2, #32
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	d10d      	bne.n	8004fba <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	0018      	movs	r0, r3
 8004fa2:	f7ff ff7f 	bl	8004ea4 <HAL_RTC_WaitForSynchro>
 8004fa6:	1e03      	subs	r3, r0, #0
 8004fa8:	d021      	beq.n	8004fee <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2229      	movs	r2, #41	; 0x29
 8004fae:	2103      	movs	r1, #3
 8004fb0:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8004fb2:	193b      	adds	r3, r7, r4
 8004fb4:	2203      	movs	r2, #3
 8004fb6:	701a      	strb	r2, [r3, #0]
 8004fb8:	e019      	b.n	8004fee <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004fba:	4b10      	ldr	r3, [pc, #64]	; (8004ffc <RTC_ExitInitMode+0x84>)
 8004fbc:	699a      	ldr	r2, [r3, #24]
 8004fbe:	4b0f      	ldr	r3, [pc, #60]	; (8004ffc <RTC_ExitInitMode+0x84>)
 8004fc0:	2120      	movs	r1, #32
 8004fc2:	438a      	bics	r2, r1
 8004fc4:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	0018      	movs	r0, r3
 8004fca:	f7ff ff6b 	bl	8004ea4 <HAL_RTC_WaitForSynchro>
 8004fce:	1e03      	subs	r3, r0, #0
 8004fd0:	d007      	beq.n	8004fe2 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2229      	movs	r2, #41	; 0x29
 8004fd6:	2103      	movs	r1, #3
 8004fd8:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8004fda:	230f      	movs	r3, #15
 8004fdc:	18fb      	adds	r3, r7, r3
 8004fde:	2203      	movs	r2, #3
 8004fe0:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004fe2:	4b06      	ldr	r3, [pc, #24]	; (8004ffc <RTC_ExitInitMode+0x84>)
 8004fe4:	699a      	ldr	r2, [r3, #24]
 8004fe6:	4b05      	ldr	r3, [pc, #20]	; (8004ffc <RTC_ExitInitMode+0x84>)
 8004fe8:	2120      	movs	r1, #32
 8004fea:	430a      	orrs	r2, r1
 8004fec:	619a      	str	r2, [r3, #24]
  }

  return status;
 8004fee:	230f      	movs	r3, #15
 8004ff0:	18fb      	adds	r3, r7, r3
 8004ff2:	781b      	ldrb	r3, [r3, #0]
}
 8004ff4:	0018      	movs	r0, r3
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	b005      	add	sp, #20
 8004ffa:	bd90      	pop	{r4, r7, pc}
 8004ffc:	40002800 	.word	0x40002800

08005000 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b086      	sub	sp, #24
 8005004:	af00      	add	r7, sp, #0
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	60b9      	str	r1, [r7, #8]
 800500a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2228      	movs	r2, #40	; 0x28
 8005010:	5c9b      	ldrb	r3, [r3, r2]
 8005012:	2b01      	cmp	r3, #1
 8005014:	d101      	bne.n	800501a <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8005016:	2302      	movs	r3, #2
 8005018:	e082      	b.n	8005120 <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2228      	movs	r2, #40	; 0x28
 800501e:	2101      	movs	r1, #1
 8005020:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2229      	movs	r2, #41	; 0x29
 8005026:	2102      	movs	r1, #2
 8005028:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	22ca      	movs	r2, #202	; 0xca
 8005030:	625a      	str	r2, [r3, #36]	; 0x24
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	2253      	movs	r2, #83	; 0x53
 8005038:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	699a      	ldr	r2, [r3, #24]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4938      	ldr	r1, [pc, #224]	; (8005128 <HAL_RTCEx_SetWakeUpTimer_IT+0x128>)
 8005046:	400a      	ands	r2, r1
 8005048:	619a      	str	r2, [r3, #24]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2104      	movs	r1, #4
 8005056:	430a      	orrs	r2, r1
 8005058:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800505a:	4b34      	ldr	r3, [pc, #208]	; (800512c <HAL_RTCEx_SetWakeUpTimer_IT+0x12c>)
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	2240      	movs	r2, #64	; 0x40
 8005060:	4013      	ands	r3, r2
 8005062:	d121      	bne.n	80050a8 <HAL_RTCEx_SetWakeUpTimer_IT+0xa8>
  {
    tickstart = HAL_GetTick();
 8005064:	f7fe fa00 	bl	8003468 <HAL_GetTick>
 8005068:	0003      	movs	r3, r0
 800506a:	617b      	str	r3, [r7, #20]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800506c:	e016      	b.n	800509c <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800506e:	f7fe f9fb 	bl	8003468 <HAL_GetTick>
 8005072:	0002      	movs	r2, r0
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	1ad2      	subs	r2, r2, r3
 8005078:	23fa      	movs	r3, #250	; 0xfa
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	429a      	cmp	r2, r3
 800507e:	d90d      	bls.n	800509c <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	22ff      	movs	r2, #255	; 0xff
 8005086:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2229      	movs	r2, #41	; 0x29
 800508c:	2103      	movs	r1, #3
 800508e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2228      	movs	r2, #40	; 0x28
 8005094:	2100      	movs	r1, #0
 8005096:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005098:	2303      	movs	r3, #3
 800509a:	e041      	b.n	8005120 <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	2204      	movs	r2, #4
 80050a4:	4013      	ands	r3, r2
 80050a6:	d0e2      	beq.n	800506e <HAL_RTCEx_SetWakeUpTimer_IT+0x6e>
      }
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68ba      	ldr	r2, [r7, #8]
 80050ae:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	699a      	ldr	r2, [r3, #24]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	2107      	movs	r1, #7
 80050bc:	438a      	bics	r2, r1
 80050be:	619a      	str	r2, [r3, #24]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	6999      	ldr	r1, [r3, #24]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	430a      	orrs	r2, r1
 80050ce:	619a      	str	r2, [r3, #24]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80050d0:	4a17      	ldr	r2, [pc, #92]	; (8005130 <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 80050d2:	2380      	movs	r3, #128	; 0x80
 80050d4:	58d3      	ldr	r3, [r2, r3]
 80050d6:	4916      	ldr	r1, [pc, #88]	; (8005130 <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 80050d8:	2280      	movs	r2, #128	; 0x80
 80050da:	0312      	lsls	r2, r2, #12
 80050dc:	4313      	orrs	r3, r2
 80050de:	2280      	movs	r2, #128	; 0x80
 80050e0:	508b      	str	r3, [r1, r2]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	699a      	ldr	r2, [r3, #24]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2180      	movs	r1, #128	; 0x80
 80050ee:	01c9      	lsls	r1, r1, #7
 80050f0:	430a      	orrs	r2, r1
 80050f2:	619a      	str	r2, [r3, #24]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	699a      	ldr	r2, [r3, #24]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2180      	movs	r1, #128	; 0x80
 8005100:	00c9      	lsls	r1, r1, #3
 8005102:	430a      	orrs	r2, r1
 8005104:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	22ff      	movs	r2, #255	; 0xff
 800510c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2229      	movs	r2, #41	; 0x29
 8005112:	2101      	movs	r1, #1
 8005114:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2228      	movs	r2, #40	; 0x28
 800511a:	2100      	movs	r1, #0
 800511c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800511e:	2300      	movs	r3, #0
}
 8005120:	0018      	movs	r0, r3
 8005122:	46bd      	mov	sp, r7
 8005124:	b006      	add	sp, #24
 8005126:	bd80      	pop	{r7, pc}
 8005128:	fffffbff 	.word	0xfffffbff
 800512c:	40002800 	.word	0x40002800
 8005130:	40021800 	.word	0x40021800

08005134 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
    /* Get the pending status of the WAKEUPTIMER Interrupt */
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005142:	2204      	movs	r2, #4
 8005144:	4013      	ands	r3, r2
 8005146:	d00b      	beq.n	8005160 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>
    {
      /* Clear the WAKEUPTIMER interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	2104      	movs	r1, #4
 8005154:	430a      	orrs	r2, r1
 8005156:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call WakeUpTimerEvent registered Callback */
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      /* WAKEUPTIMER callback */
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	0018      	movs	r0, r3
 800515c:	f000 f808 	bl	8005170 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2229      	movs	r2, #41	; 0x29
 8005164:	2101      	movs	r1, #1
 8005166:	5499      	strb	r1, [r3, r2]
}
 8005168:	46c0      	nop			; (mov r8, r8)
 800516a:	46bd      	mov	sp, r7
 800516c:	b002      	add	sp, #8
 800516e:	bd80      	pop	{r7, pc}

08005170 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b082      	sub	sp, #8
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8005178:	46c0      	nop			; (mov r8, r8)
 800517a:	46bd      	mov	sp, r7
 800517c:	b002      	add	sp, #8
 800517e:	bd80      	pop	{r7, pc}

08005180 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b082      	sub	sp, #8
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d101      	bne.n	8005192 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e04a      	b.n	8005228 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	223d      	movs	r2, #61	; 0x3d
 8005196:	5c9b      	ldrb	r3, [r3, r2]
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b00      	cmp	r3, #0
 800519c:	d107      	bne.n	80051ae <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	223c      	movs	r2, #60	; 0x3c
 80051a2:	2100      	movs	r1, #0
 80051a4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	0018      	movs	r0, r3
 80051aa:	f7fd feeb 	bl	8002f84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	223d      	movs	r2, #61	; 0x3d
 80051b2:	2102      	movs	r1, #2
 80051b4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	3304      	adds	r3, #4
 80051be:	0019      	movs	r1, r3
 80051c0:	0010      	movs	r0, r2
 80051c2:	f000 fa09 	bl	80055d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2248      	movs	r2, #72	; 0x48
 80051ca:	2101      	movs	r1, #1
 80051cc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	223e      	movs	r2, #62	; 0x3e
 80051d2:	2101      	movs	r1, #1
 80051d4:	5499      	strb	r1, [r3, r2]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	223f      	movs	r2, #63	; 0x3f
 80051da:	2101      	movs	r1, #1
 80051dc:	5499      	strb	r1, [r3, r2]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2240      	movs	r2, #64	; 0x40
 80051e2:	2101      	movs	r1, #1
 80051e4:	5499      	strb	r1, [r3, r2]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2241      	movs	r2, #65	; 0x41
 80051ea:	2101      	movs	r1, #1
 80051ec:	5499      	strb	r1, [r3, r2]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2242      	movs	r2, #66	; 0x42
 80051f2:	2101      	movs	r1, #1
 80051f4:	5499      	strb	r1, [r3, r2]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2243      	movs	r2, #67	; 0x43
 80051fa:	2101      	movs	r1, #1
 80051fc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2244      	movs	r2, #68	; 0x44
 8005202:	2101      	movs	r1, #1
 8005204:	5499      	strb	r1, [r3, r2]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2245      	movs	r2, #69	; 0x45
 800520a:	2101      	movs	r1, #1
 800520c:	5499      	strb	r1, [r3, r2]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2246      	movs	r2, #70	; 0x46
 8005212:	2101      	movs	r1, #1
 8005214:	5499      	strb	r1, [r3, r2]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2247      	movs	r2, #71	; 0x47
 800521a:	2101      	movs	r1, #1
 800521c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	223d      	movs	r2, #61	; 0x3d
 8005222:	2101      	movs	r1, #1
 8005224:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005226:	2300      	movs	r3, #0
}
 8005228:	0018      	movs	r0, r3
 800522a:	46bd      	mov	sp, r7
 800522c:	b002      	add	sp, #8
 800522e:	bd80      	pop	{r7, pc}

08005230 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	223d      	movs	r2, #61	; 0x3d
 800523c:	5c9b      	ldrb	r3, [r3, r2]
 800523e:	b2db      	uxtb	r3, r3
 8005240:	2b01      	cmp	r3, #1
 8005242:	d001      	beq.n	8005248 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	e03d      	b.n	80052c4 <HAL_TIM_Base_Start_IT+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	223d      	movs	r2, #61	; 0x3d
 800524c:	2102      	movs	r1, #2
 800524e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	68da      	ldr	r2, [r3, #12]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	2101      	movs	r1, #1
 800525c:	430a      	orrs	r2, r1
 800525e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a19      	ldr	r2, [pc, #100]	; (80052cc <HAL_TIM_Base_Start_IT+0x9c>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d00a      	beq.n	8005280 <HAL_TIM_Base_Start_IT+0x50>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	2380      	movs	r3, #128	; 0x80
 8005270:	05db      	lsls	r3, r3, #23
 8005272:	429a      	cmp	r2, r3
 8005274:	d004      	beq.n	8005280 <HAL_TIM_Base_Start_IT+0x50>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a15      	ldr	r2, [pc, #84]	; (80052d0 <HAL_TIM_Base_Start_IT+0xa0>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d116      	bne.n	80052ae <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	4a13      	ldr	r2, [pc, #76]	; (80052d4 <HAL_TIM_Base_Start_IT+0xa4>)
 8005288:	4013      	ands	r3, r2
 800528a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2b06      	cmp	r3, #6
 8005290:	d016      	beq.n	80052c0 <HAL_TIM_Base_Start_IT+0x90>
 8005292:	68fa      	ldr	r2, [r7, #12]
 8005294:	2380      	movs	r3, #128	; 0x80
 8005296:	025b      	lsls	r3, r3, #9
 8005298:	429a      	cmp	r2, r3
 800529a:	d011      	beq.n	80052c0 <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2101      	movs	r1, #1
 80052a8:	430a      	orrs	r2, r1
 80052aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052ac:	e008      	b.n	80052c0 <HAL_TIM_Base_Start_IT+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2101      	movs	r1, #1
 80052ba:	430a      	orrs	r2, r1
 80052bc:	601a      	str	r2, [r3, #0]
 80052be:	e000      	b.n	80052c2 <HAL_TIM_Base_Start_IT+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052c0:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80052c2:	2300      	movs	r3, #0
}
 80052c4:	0018      	movs	r0, r3
 80052c6:	46bd      	mov	sp, r7
 80052c8:	b004      	add	sp, #16
 80052ca:	bd80      	pop	{r7, pc}
 80052cc:	40012c00 	.word	0x40012c00
 80052d0:	40000400 	.word	0x40000400
 80052d4:	00010007 	.word	0x00010007

080052d8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b082      	sub	sp, #8
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68da      	ldr	r2, [r3, #12]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	2101      	movs	r1, #1
 80052ec:	438a      	bics	r2, r1
 80052ee:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	6a1b      	ldr	r3, [r3, #32]
 80052f6:	4a0d      	ldr	r2, [pc, #52]	; (800532c <HAL_TIM_Base_Stop_IT+0x54>)
 80052f8:	4013      	ands	r3, r2
 80052fa:	d10d      	bne.n	8005318 <HAL_TIM_Base_Stop_IT+0x40>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	6a1b      	ldr	r3, [r3, #32]
 8005302:	4a0b      	ldr	r2, [pc, #44]	; (8005330 <HAL_TIM_Base_Stop_IT+0x58>)
 8005304:	4013      	ands	r3, r2
 8005306:	d107      	bne.n	8005318 <HAL_TIM_Base_Stop_IT+0x40>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	2101      	movs	r1, #1
 8005314:	438a      	bics	r2, r1
 8005316:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	223d      	movs	r2, #61	; 0x3d
 800531c:	2101      	movs	r1, #1
 800531e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	0018      	movs	r0, r3
 8005324:	46bd      	mov	sp, r7
 8005326:	b002      	add	sp, #8
 8005328:	bd80      	pop	{r7, pc}
 800532a:	46c0      	nop			; (mov r8, r8)
 800532c:	00001111 	.word	0x00001111
 8005330:	00000444 	.word	0x00000444

08005334 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b082      	sub	sp, #8
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	2202      	movs	r2, #2
 8005344:	4013      	ands	r3, r2
 8005346:	2b02      	cmp	r3, #2
 8005348:	d124      	bne.n	8005394 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	2202      	movs	r2, #2
 8005352:	4013      	ands	r3, r2
 8005354:	2b02      	cmp	r3, #2
 8005356:	d11d      	bne.n	8005394 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	2203      	movs	r2, #3
 800535e:	4252      	negs	r2, r2
 8005360:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2201      	movs	r2, #1
 8005366:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	699b      	ldr	r3, [r3, #24]
 800536e:	2203      	movs	r2, #3
 8005370:	4013      	ands	r3, r2
 8005372:	d004      	beq.n	800537e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	0018      	movs	r0, r3
 8005378:	f000 f916 	bl	80055a8 <HAL_TIM_IC_CaptureCallback>
 800537c:	e007      	b.n	800538e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	0018      	movs	r0, r3
 8005382:	f000 f909 	bl	8005598 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	0018      	movs	r0, r3
 800538a:	f000 f915 	bl	80055b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	2204      	movs	r2, #4
 800539c:	4013      	ands	r3, r2
 800539e:	2b04      	cmp	r3, #4
 80053a0:	d125      	bne.n	80053ee <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	2204      	movs	r2, #4
 80053aa:	4013      	ands	r3, r2
 80053ac:	2b04      	cmp	r3, #4
 80053ae:	d11e      	bne.n	80053ee <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2205      	movs	r2, #5
 80053b6:	4252      	negs	r2, r2
 80053b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2202      	movs	r2, #2
 80053be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	699a      	ldr	r2, [r3, #24]
 80053c6:	23c0      	movs	r3, #192	; 0xc0
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	4013      	ands	r3, r2
 80053cc:	d004      	beq.n	80053d8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	0018      	movs	r0, r3
 80053d2:	f000 f8e9 	bl	80055a8 <HAL_TIM_IC_CaptureCallback>
 80053d6:	e007      	b.n	80053e8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	0018      	movs	r0, r3
 80053dc:	f000 f8dc 	bl	8005598 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	0018      	movs	r0, r3
 80053e4:	f000 f8e8 	bl	80055b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	691b      	ldr	r3, [r3, #16]
 80053f4:	2208      	movs	r2, #8
 80053f6:	4013      	ands	r3, r2
 80053f8:	2b08      	cmp	r3, #8
 80053fa:	d124      	bne.n	8005446 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	2208      	movs	r2, #8
 8005404:	4013      	ands	r3, r2
 8005406:	2b08      	cmp	r3, #8
 8005408:	d11d      	bne.n	8005446 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2209      	movs	r2, #9
 8005410:	4252      	negs	r2, r2
 8005412:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2204      	movs	r2, #4
 8005418:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	69db      	ldr	r3, [r3, #28]
 8005420:	2203      	movs	r2, #3
 8005422:	4013      	ands	r3, r2
 8005424:	d004      	beq.n	8005430 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	0018      	movs	r0, r3
 800542a:	f000 f8bd 	bl	80055a8 <HAL_TIM_IC_CaptureCallback>
 800542e:	e007      	b.n	8005440 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	0018      	movs	r0, r3
 8005434:	f000 f8b0 	bl	8005598 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	0018      	movs	r0, r3
 800543c:	f000 f8bc 	bl	80055b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2200      	movs	r2, #0
 8005444:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	691b      	ldr	r3, [r3, #16]
 800544c:	2210      	movs	r2, #16
 800544e:	4013      	ands	r3, r2
 8005450:	2b10      	cmp	r3, #16
 8005452:	d125      	bne.n	80054a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	2210      	movs	r2, #16
 800545c:	4013      	ands	r3, r2
 800545e:	2b10      	cmp	r3, #16
 8005460:	d11e      	bne.n	80054a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	2211      	movs	r2, #17
 8005468:	4252      	negs	r2, r2
 800546a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2208      	movs	r2, #8
 8005470:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	69da      	ldr	r2, [r3, #28]
 8005478:	23c0      	movs	r3, #192	; 0xc0
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	4013      	ands	r3, r2
 800547e:	d004      	beq.n	800548a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	0018      	movs	r0, r3
 8005484:	f000 f890 	bl	80055a8 <HAL_TIM_IC_CaptureCallback>
 8005488:	e007      	b.n	800549a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	0018      	movs	r0, r3
 800548e:	f000 f883 	bl	8005598 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	0018      	movs	r0, r3
 8005496:	f000 f88f 	bl	80055b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	2201      	movs	r2, #1
 80054a8:	4013      	ands	r3, r2
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d10f      	bne.n	80054ce <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	2201      	movs	r2, #1
 80054b6:	4013      	ands	r3, r2
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d108      	bne.n	80054ce <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	2202      	movs	r2, #2
 80054c2:	4252      	negs	r2, r2
 80054c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	0018      	movs	r0, r3
 80054ca:	f7fd fcd1 	bl	8002e70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	691b      	ldr	r3, [r3, #16]
 80054d4:	2280      	movs	r2, #128	; 0x80
 80054d6:	4013      	ands	r3, r2
 80054d8:	2b80      	cmp	r3, #128	; 0x80
 80054da:	d10f      	bne.n	80054fc <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	2280      	movs	r2, #128	; 0x80
 80054e4:	4013      	ands	r3, r2
 80054e6:	2b80      	cmp	r3, #128	; 0x80
 80054e8:	d108      	bne.n	80054fc <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	2281      	movs	r2, #129	; 0x81
 80054f0:	4252      	negs	r2, r2
 80054f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	0018      	movs	r0, r3
 80054f8:	f000 f8ec 	bl	80056d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	691a      	ldr	r2, [r3, #16]
 8005502:	2380      	movs	r3, #128	; 0x80
 8005504:	005b      	lsls	r3, r3, #1
 8005506:	401a      	ands	r2, r3
 8005508:	2380      	movs	r3, #128	; 0x80
 800550a:	005b      	lsls	r3, r3, #1
 800550c:	429a      	cmp	r2, r3
 800550e:	d10e      	bne.n	800552e <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	2280      	movs	r2, #128	; 0x80
 8005518:	4013      	ands	r3, r2
 800551a:	2b80      	cmp	r3, #128	; 0x80
 800551c:	d107      	bne.n	800552e <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a1c      	ldr	r2, [pc, #112]	; (8005594 <HAL_TIM_IRQHandler+0x260>)
 8005524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	0018      	movs	r0, r3
 800552a:	f000 f8db 	bl	80056e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	691b      	ldr	r3, [r3, #16]
 8005534:	2240      	movs	r2, #64	; 0x40
 8005536:	4013      	ands	r3, r2
 8005538:	2b40      	cmp	r3, #64	; 0x40
 800553a:	d10f      	bne.n	800555c <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	2240      	movs	r2, #64	; 0x40
 8005544:	4013      	ands	r3, r2
 8005546:	2b40      	cmp	r3, #64	; 0x40
 8005548:	d108      	bne.n	800555c <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2241      	movs	r2, #65	; 0x41
 8005550:	4252      	negs	r2, r2
 8005552:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	0018      	movs	r0, r3
 8005558:	f000 f836 	bl	80055c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	2220      	movs	r2, #32
 8005564:	4013      	ands	r3, r2
 8005566:	2b20      	cmp	r3, #32
 8005568:	d10f      	bne.n	800558a <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	2220      	movs	r2, #32
 8005572:	4013      	ands	r3, r2
 8005574:	2b20      	cmp	r3, #32
 8005576:	d108      	bne.n	800558a <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2221      	movs	r2, #33	; 0x21
 800557e:	4252      	negs	r2, r2
 8005580:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	0018      	movs	r0, r3
 8005586:	f000 f89d 	bl	80056c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800558a:	46c0      	nop			; (mov r8, r8)
 800558c:	46bd      	mov	sp, r7
 800558e:	b002      	add	sp, #8
 8005590:	bd80      	pop	{r7, pc}
 8005592:	46c0      	nop			; (mov r8, r8)
 8005594:	fffffeff 	.word	0xfffffeff

08005598 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b082      	sub	sp, #8
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80055a0:	46c0      	nop			; (mov r8, r8)
 80055a2:	46bd      	mov	sp, r7
 80055a4:	b002      	add	sp, #8
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b082      	sub	sp, #8
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80055b0:	46c0      	nop			; (mov r8, r8)
 80055b2:	46bd      	mov	sp, r7
 80055b4:	b002      	add	sp, #8
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b082      	sub	sp, #8
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055c0:	46c0      	nop			; (mov r8, r8)
 80055c2:	46bd      	mov	sp, r7
 80055c4:	b002      	add	sp, #8
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055d0:	46c0      	nop			; (mov r8, r8)
 80055d2:	46bd      	mov	sp, r7
 80055d4:	b002      	add	sp, #8
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b084      	sub	sp, #16
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4a30      	ldr	r2, [pc, #192]	; (80056ac <TIM_Base_SetConfig+0xd4>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d008      	beq.n	8005602 <TIM_Base_SetConfig+0x2a>
 80055f0:	687a      	ldr	r2, [r7, #4]
 80055f2:	2380      	movs	r3, #128	; 0x80
 80055f4:	05db      	lsls	r3, r3, #23
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d003      	beq.n	8005602 <TIM_Base_SetConfig+0x2a>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4a2c      	ldr	r2, [pc, #176]	; (80056b0 <TIM_Base_SetConfig+0xd8>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d108      	bne.n	8005614 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2270      	movs	r2, #112	; 0x70
 8005606:	4393      	bics	r3, r2
 8005608:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	68fa      	ldr	r2, [r7, #12]
 8005610:	4313      	orrs	r3, r2
 8005612:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	4a25      	ldr	r2, [pc, #148]	; (80056ac <TIM_Base_SetConfig+0xd4>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d014      	beq.n	8005646 <TIM_Base_SetConfig+0x6e>
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	2380      	movs	r3, #128	; 0x80
 8005620:	05db      	lsls	r3, r3, #23
 8005622:	429a      	cmp	r2, r3
 8005624:	d00f      	beq.n	8005646 <TIM_Base_SetConfig+0x6e>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a21      	ldr	r2, [pc, #132]	; (80056b0 <TIM_Base_SetConfig+0xd8>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d00b      	beq.n	8005646 <TIM_Base_SetConfig+0x6e>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4a20      	ldr	r2, [pc, #128]	; (80056b4 <TIM_Base_SetConfig+0xdc>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d007      	beq.n	8005646 <TIM_Base_SetConfig+0x6e>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a1f      	ldr	r2, [pc, #124]	; (80056b8 <TIM_Base_SetConfig+0xe0>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d003      	beq.n	8005646 <TIM_Base_SetConfig+0x6e>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a1e      	ldr	r2, [pc, #120]	; (80056bc <TIM_Base_SetConfig+0xe4>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d108      	bne.n	8005658 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	4a1d      	ldr	r2, [pc, #116]	; (80056c0 <TIM_Base_SetConfig+0xe8>)
 800564a:	4013      	ands	r3, r2
 800564c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	68fa      	ldr	r2, [r7, #12]
 8005654:	4313      	orrs	r3, r2
 8005656:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2280      	movs	r2, #128	; 0x80
 800565c:	4393      	bics	r3, r2
 800565e:	001a      	movs	r2, r3
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	695b      	ldr	r3, [r3, #20]
 8005664:	4313      	orrs	r3, r2
 8005666:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	689a      	ldr	r2, [r3, #8]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a0a      	ldr	r2, [pc, #40]	; (80056ac <TIM_Base_SetConfig+0xd4>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d007      	beq.n	8005696 <TIM_Base_SetConfig+0xbe>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a0b      	ldr	r2, [pc, #44]	; (80056b8 <TIM_Base_SetConfig+0xe0>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d003      	beq.n	8005696 <TIM_Base_SetConfig+0xbe>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4a0a      	ldr	r2, [pc, #40]	; (80056bc <TIM_Base_SetConfig+0xe4>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d103      	bne.n	800569e <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	691a      	ldr	r2, [r3, #16]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2201      	movs	r2, #1
 80056a2:	615a      	str	r2, [r3, #20]
}
 80056a4:	46c0      	nop			; (mov r8, r8)
 80056a6:	46bd      	mov	sp, r7
 80056a8:	b004      	add	sp, #16
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	40012c00 	.word	0x40012c00
 80056b0:	40000400 	.word	0x40000400
 80056b4:	40002000 	.word	0x40002000
 80056b8:	40014400 	.word	0x40014400
 80056bc:	40014800 	.word	0x40014800
 80056c0:	fffffcff 	.word	0xfffffcff

080056c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b082      	sub	sp, #8
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056cc:	46c0      	nop			; (mov r8, r8)
 80056ce:	46bd      	mov	sp, r7
 80056d0:	b002      	add	sp, #8
 80056d2:	bd80      	pop	{r7, pc}

080056d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b082      	sub	sp, #8
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056dc:	46c0      	nop			; (mov r8, r8)
 80056de:	46bd      	mov	sp, r7
 80056e0:	b002      	add	sp, #8
 80056e2:	bd80      	pop	{r7, pc}

080056e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b082      	sub	sp, #8
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80056ec:	46c0      	nop			; (mov r8, r8)
 80056ee:	46bd      	mov	sp, r7
 80056f0:	b002      	add	sp, #8
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b082      	sub	sp, #8
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d101      	bne.n	8005706 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e046      	b.n	8005794 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2288      	movs	r2, #136	; 0x88
 800570a:	589b      	ldr	r3, [r3, r2]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d107      	bne.n	8005720 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2284      	movs	r2, #132	; 0x84
 8005714:	2100      	movs	r1, #0
 8005716:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	0018      	movs	r0, r3
 800571c:	f7fd fc5a 	bl	8002fd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2288      	movs	r2, #136	; 0x88
 8005724:	2124      	movs	r1, #36	; 0x24
 8005726:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	2101      	movs	r1, #1
 8005734:	438a      	bics	r2, r1
 8005736:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	0018      	movs	r0, r3
 800573c:	f000 fc12 	bl	8005f64 <UART_SetConfig>
 8005740:	0003      	movs	r3, r0
 8005742:	2b01      	cmp	r3, #1
 8005744:	d101      	bne.n	800574a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e024      	b.n	8005794 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800574e:	2b00      	cmp	r3, #0
 8005750:	d003      	beq.n	800575a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	0018      	movs	r0, r3
 8005756:	f000 fe7d 	bl	8006454 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	685a      	ldr	r2, [r3, #4]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	490d      	ldr	r1, [pc, #52]	; (800579c <HAL_UART_Init+0xa8>)
 8005766:	400a      	ands	r2, r1
 8005768:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	689a      	ldr	r2, [r3, #8]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	212a      	movs	r1, #42	; 0x2a
 8005776:	438a      	bics	r2, r1
 8005778:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	2101      	movs	r1, #1
 8005786:	430a      	orrs	r2, r1
 8005788:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	0018      	movs	r0, r3
 800578e:	f000 ff15 	bl	80065bc <UART_CheckIdleState>
 8005792:	0003      	movs	r3, r0
}
 8005794:	0018      	movs	r0, r3
 8005796:	46bd      	mov	sp, r7
 8005798:	b002      	add	sp, #8
 800579a:	bd80      	pop	{r7, pc}
 800579c:	ffffb7ff 	.word	0xffffb7ff

080057a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b08a      	sub	sp, #40	; 0x28
 80057a4:	af02      	add	r7, sp, #8
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	60b9      	str	r1, [r7, #8]
 80057aa:	603b      	str	r3, [r7, #0]
 80057ac:	1dbb      	adds	r3, r7, #6
 80057ae:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2288      	movs	r2, #136	; 0x88
 80057b4:	589b      	ldr	r3, [r3, r2]
 80057b6:	2b20      	cmp	r3, #32
 80057b8:	d000      	beq.n	80057bc <HAL_UART_Transmit+0x1c>
 80057ba:	e088      	b.n	80058ce <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d003      	beq.n	80057ca <HAL_UART_Transmit+0x2a>
 80057c2:	1dbb      	adds	r3, r7, #6
 80057c4:	881b      	ldrh	r3, [r3, #0]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d101      	bne.n	80057ce <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e080      	b.n	80058d0 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	689a      	ldr	r2, [r3, #8]
 80057d2:	2380      	movs	r3, #128	; 0x80
 80057d4:	015b      	lsls	r3, r3, #5
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d109      	bne.n	80057ee <HAL_UART_Transmit+0x4e>
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d105      	bne.n	80057ee <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	2201      	movs	r2, #1
 80057e6:	4013      	ands	r3, r2
 80057e8:	d001      	beq.n	80057ee <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	e070      	b.n	80058d0 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2290      	movs	r2, #144	; 0x90
 80057f2:	2100      	movs	r1, #0
 80057f4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2288      	movs	r2, #136	; 0x88
 80057fa:	2121      	movs	r1, #33	; 0x21
 80057fc:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80057fe:	f7fd fe33 	bl	8003468 <HAL_GetTick>
 8005802:	0003      	movs	r3, r0
 8005804:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	1dba      	adds	r2, r7, #6
 800580a:	2154      	movs	r1, #84	; 0x54
 800580c:	8812      	ldrh	r2, [r2, #0]
 800580e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	1dba      	adds	r2, r7, #6
 8005814:	2156      	movs	r1, #86	; 0x56
 8005816:	8812      	ldrh	r2, [r2, #0]
 8005818:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	689a      	ldr	r2, [r3, #8]
 800581e:	2380      	movs	r3, #128	; 0x80
 8005820:	015b      	lsls	r3, r3, #5
 8005822:	429a      	cmp	r2, r3
 8005824:	d108      	bne.n	8005838 <HAL_UART_Transmit+0x98>
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d104      	bne.n	8005838 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800582e:	2300      	movs	r3, #0
 8005830:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	61bb      	str	r3, [r7, #24]
 8005836:	e003      	b.n	8005840 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800583c:	2300      	movs	r3, #0
 800583e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005840:	e02c      	b.n	800589c <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005842:	697a      	ldr	r2, [r7, #20]
 8005844:	68f8      	ldr	r0, [r7, #12]
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	9300      	str	r3, [sp, #0]
 800584a:	0013      	movs	r3, r2
 800584c:	2200      	movs	r2, #0
 800584e:	2180      	movs	r1, #128	; 0x80
 8005850:	f000 ff02 	bl	8006658 <UART_WaitOnFlagUntilTimeout>
 8005854:	1e03      	subs	r3, r0, #0
 8005856:	d001      	beq.n	800585c <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8005858:	2303      	movs	r3, #3
 800585a:	e039      	b.n	80058d0 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d10b      	bne.n	800587a <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005862:	69bb      	ldr	r3, [r7, #24]
 8005864:	881b      	ldrh	r3, [r3, #0]
 8005866:	001a      	movs	r2, r3
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	05d2      	lsls	r2, r2, #23
 800586e:	0dd2      	lsrs	r2, r2, #23
 8005870:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005872:	69bb      	ldr	r3, [r7, #24]
 8005874:	3302      	adds	r3, #2
 8005876:	61bb      	str	r3, [r7, #24]
 8005878:	e007      	b.n	800588a <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	781a      	ldrb	r2, [r3, #0]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005884:	69fb      	ldr	r3, [r7, #28]
 8005886:	3301      	adds	r3, #1
 8005888:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2256      	movs	r2, #86	; 0x56
 800588e:	5a9b      	ldrh	r3, [r3, r2]
 8005890:	b29b      	uxth	r3, r3
 8005892:	3b01      	subs	r3, #1
 8005894:	b299      	uxth	r1, r3
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2256      	movs	r2, #86	; 0x56
 800589a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2256      	movs	r2, #86	; 0x56
 80058a0:	5a9b      	ldrh	r3, [r3, r2]
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d1cc      	bne.n	8005842 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058a8:	697a      	ldr	r2, [r7, #20]
 80058aa:	68f8      	ldr	r0, [r7, #12]
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	9300      	str	r3, [sp, #0]
 80058b0:	0013      	movs	r3, r2
 80058b2:	2200      	movs	r2, #0
 80058b4:	2140      	movs	r1, #64	; 0x40
 80058b6:	f000 fecf 	bl	8006658 <UART_WaitOnFlagUntilTimeout>
 80058ba:	1e03      	subs	r3, r0, #0
 80058bc:	d001      	beq.n	80058c2 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 80058be:	2303      	movs	r3, #3
 80058c0:	e006      	b.n	80058d0 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2288      	movs	r2, #136	; 0x88
 80058c6:	2120      	movs	r1, #32
 80058c8:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80058ca:	2300      	movs	r3, #0
 80058cc:	e000      	b.n	80058d0 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 80058ce:	2302      	movs	r3, #2
  }
}
 80058d0:	0018      	movs	r0, r3
 80058d2:	46bd      	mov	sp, r7
 80058d4:	b008      	add	sp, #32
 80058d6:	bd80      	pop	{r7, pc}

080058d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80058d8:	b5b0      	push	{r4, r5, r7, lr}
 80058da:	b0aa      	sub	sp, #168	; 0xa8
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	69db      	ldr	r3, [r3, #28]
 80058e6:	22a4      	movs	r2, #164	; 0xa4
 80058e8:	18b9      	adds	r1, r7, r2
 80058ea:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	20a0      	movs	r0, #160	; 0xa0
 80058f4:	1839      	adds	r1, r7, r0
 80058f6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	249c      	movs	r4, #156	; 0x9c
 8005900:	1939      	adds	r1, r7, r4
 8005902:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005904:	0011      	movs	r1, r2
 8005906:	18bb      	adds	r3, r7, r2
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4aa2      	ldr	r2, [pc, #648]	; (8005b94 <HAL_UART_IRQHandler+0x2bc>)
 800590c:	4013      	ands	r3, r2
 800590e:	2298      	movs	r2, #152	; 0x98
 8005910:	18bd      	adds	r5, r7, r2
 8005912:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8005914:	18bb      	adds	r3, r7, r2
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d11a      	bne.n	8005952 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800591c:	187b      	adds	r3, r7, r1
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2220      	movs	r2, #32
 8005922:	4013      	ands	r3, r2
 8005924:	d015      	beq.n	8005952 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005926:	183b      	adds	r3, r7, r0
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	2220      	movs	r2, #32
 800592c:	4013      	ands	r3, r2
 800592e:	d105      	bne.n	800593c <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005930:	193b      	adds	r3, r7, r4
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	2380      	movs	r3, #128	; 0x80
 8005936:	055b      	lsls	r3, r3, #21
 8005938:	4013      	ands	r3, r2
 800593a:	d00a      	beq.n	8005952 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005940:	2b00      	cmp	r3, #0
 8005942:	d100      	bne.n	8005946 <HAL_UART_IRQHandler+0x6e>
 8005944:	e2dc      	b.n	8005f00 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	0010      	movs	r0, r2
 800594e:	4798      	blx	r3
      }
      return;
 8005950:	e2d6      	b.n	8005f00 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005952:	2398      	movs	r3, #152	; 0x98
 8005954:	18fb      	adds	r3, r7, r3
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d100      	bne.n	800595e <HAL_UART_IRQHandler+0x86>
 800595c:	e122      	b.n	8005ba4 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800595e:	239c      	movs	r3, #156	; 0x9c
 8005960:	18fb      	adds	r3, r7, r3
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a8c      	ldr	r2, [pc, #560]	; (8005b98 <HAL_UART_IRQHandler+0x2c0>)
 8005966:	4013      	ands	r3, r2
 8005968:	d106      	bne.n	8005978 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800596a:	23a0      	movs	r3, #160	; 0xa0
 800596c:	18fb      	adds	r3, r7, r3
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a8a      	ldr	r2, [pc, #552]	; (8005b9c <HAL_UART_IRQHandler+0x2c4>)
 8005972:	4013      	ands	r3, r2
 8005974:	d100      	bne.n	8005978 <HAL_UART_IRQHandler+0xa0>
 8005976:	e115      	b.n	8005ba4 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005978:	23a4      	movs	r3, #164	; 0xa4
 800597a:	18fb      	adds	r3, r7, r3
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	2201      	movs	r2, #1
 8005980:	4013      	ands	r3, r2
 8005982:	d012      	beq.n	80059aa <HAL_UART_IRQHandler+0xd2>
 8005984:	23a0      	movs	r3, #160	; 0xa0
 8005986:	18fb      	adds	r3, r7, r3
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	2380      	movs	r3, #128	; 0x80
 800598c:	005b      	lsls	r3, r3, #1
 800598e:	4013      	ands	r3, r2
 8005990:	d00b      	beq.n	80059aa <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	2201      	movs	r2, #1
 8005998:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2290      	movs	r2, #144	; 0x90
 800599e:	589b      	ldr	r3, [r3, r2]
 80059a0:	2201      	movs	r2, #1
 80059a2:	431a      	orrs	r2, r3
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2190      	movs	r1, #144	; 0x90
 80059a8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80059aa:	23a4      	movs	r3, #164	; 0xa4
 80059ac:	18fb      	adds	r3, r7, r3
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	2202      	movs	r2, #2
 80059b2:	4013      	ands	r3, r2
 80059b4:	d011      	beq.n	80059da <HAL_UART_IRQHandler+0x102>
 80059b6:	239c      	movs	r3, #156	; 0x9c
 80059b8:	18fb      	adds	r3, r7, r3
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	2201      	movs	r2, #1
 80059be:	4013      	ands	r3, r2
 80059c0:	d00b      	beq.n	80059da <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2202      	movs	r2, #2
 80059c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2290      	movs	r2, #144	; 0x90
 80059ce:	589b      	ldr	r3, [r3, r2]
 80059d0:	2204      	movs	r2, #4
 80059d2:	431a      	orrs	r2, r3
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2190      	movs	r1, #144	; 0x90
 80059d8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80059da:	23a4      	movs	r3, #164	; 0xa4
 80059dc:	18fb      	adds	r3, r7, r3
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	2204      	movs	r2, #4
 80059e2:	4013      	ands	r3, r2
 80059e4:	d011      	beq.n	8005a0a <HAL_UART_IRQHandler+0x132>
 80059e6:	239c      	movs	r3, #156	; 0x9c
 80059e8:	18fb      	adds	r3, r7, r3
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	2201      	movs	r2, #1
 80059ee:	4013      	ands	r3, r2
 80059f0:	d00b      	beq.n	8005a0a <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	2204      	movs	r2, #4
 80059f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2290      	movs	r2, #144	; 0x90
 80059fe:	589b      	ldr	r3, [r3, r2]
 8005a00:	2202      	movs	r2, #2
 8005a02:	431a      	orrs	r2, r3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2190      	movs	r1, #144	; 0x90
 8005a08:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005a0a:	23a4      	movs	r3, #164	; 0xa4
 8005a0c:	18fb      	adds	r3, r7, r3
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	2208      	movs	r2, #8
 8005a12:	4013      	ands	r3, r2
 8005a14:	d017      	beq.n	8005a46 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005a16:	23a0      	movs	r3, #160	; 0xa0
 8005a18:	18fb      	adds	r3, r7, r3
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	2220      	movs	r2, #32
 8005a1e:	4013      	ands	r3, r2
 8005a20:	d105      	bne.n	8005a2e <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005a22:	239c      	movs	r3, #156	; 0x9c
 8005a24:	18fb      	adds	r3, r7, r3
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a5b      	ldr	r2, [pc, #364]	; (8005b98 <HAL_UART_IRQHandler+0x2c0>)
 8005a2a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005a2c:	d00b      	beq.n	8005a46 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	2208      	movs	r2, #8
 8005a34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2290      	movs	r2, #144	; 0x90
 8005a3a:	589b      	ldr	r3, [r3, r2]
 8005a3c:	2208      	movs	r2, #8
 8005a3e:	431a      	orrs	r2, r3
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2190      	movs	r1, #144	; 0x90
 8005a44:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005a46:	23a4      	movs	r3, #164	; 0xa4
 8005a48:	18fb      	adds	r3, r7, r3
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	2380      	movs	r3, #128	; 0x80
 8005a4e:	011b      	lsls	r3, r3, #4
 8005a50:	4013      	ands	r3, r2
 8005a52:	d013      	beq.n	8005a7c <HAL_UART_IRQHandler+0x1a4>
 8005a54:	23a0      	movs	r3, #160	; 0xa0
 8005a56:	18fb      	adds	r3, r7, r3
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	2380      	movs	r3, #128	; 0x80
 8005a5c:	04db      	lsls	r3, r3, #19
 8005a5e:	4013      	ands	r3, r2
 8005a60:	d00c      	beq.n	8005a7c <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	2280      	movs	r2, #128	; 0x80
 8005a68:	0112      	lsls	r2, r2, #4
 8005a6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2290      	movs	r2, #144	; 0x90
 8005a70:	589b      	ldr	r3, [r3, r2]
 8005a72:	2220      	movs	r2, #32
 8005a74:	431a      	orrs	r2, r3
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2190      	movs	r1, #144	; 0x90
 8005a7a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2290      	movs	r2, #144	; 0x90
 8005a80:	589b      	ldr	r3, [r3, r2]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d100      	bne.n	8005a88 <HAL_UART_IRQHandler+0x1b0>
 8005a86:	e23d      	b.n	8005f04 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005a88:	23a4      	movs	r3, #164	; 0xa4
 8005a8a:	18fb      	adds	r3, r7, r3
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	2220      	movs	r2, #32
 8005a90:	4013      	ands	r3, r2
 8005a92:	d015      	beq.n	8005ac0 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005a94:	23a0      	movs	r3, #160	; 0xa0
 8005a96:	18fb      	adds	r3, r7, r3
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	2220      	movs	r2, #32
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	d106      	bne.n	8005aae <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005aa0:	239c      	movs	r3, #156	; 0x9c
 8005aa2:	18fb      	adds	r3, r7, r3
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	2380      	movs	r3, #128	; 0x80
 8005aa8:	055b      	lsls	r3, r3, #21
 8005aaa:	4013      	ands	r3, r2
 8005aac:	d008      	beq.n	8005ac0 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d004      	beq.n	8005ac0 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	0010      	movs	r0, r2
 8005abe:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2290      	movs	r2, #144	; 0x90
 8005ac4:	589b      	ldr	r3, [r3, r2]
 8005ac6:	2194      	movs	r1, #148	; 0x94
 8005ac8:	187a      	adds	r2, r7, r1
 8005aca:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	2240      	movs	r2, #64	; 0x40
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	2b40      	cmp	r3, #64	; 0x40
 8005ad8:	d004      	beq.n	8005ae4 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005ada:	187b      	adds	r3, r7, r1
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	2228      	movs	r2, #40	; 0x28
 8005ae0:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ae2:	d04c      	beq.n	8005b7e <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	0018      	movs	r0, r3
 8005ae8:	f000 ff64 	bl	80069b4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	2240      	movs	r2, #64	; 0x40
 8005af4:	4013      	ands	r3, r2
 8005af6:	2b40      	cmp	r3, #64	; 0x40
 8005af8:	d13c      	bne.n	8005b74 <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005afa:	f3ef 8310 	mrs	r3, PRIMASK
 8005afe:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8005b00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b02:	2090      	movs	r0, #144	; 0x90
 8005b04:	183a      	adds	r2, r7, r0
 8005b06:	6013      	str	r3, [r2, #0]
 8005b08:	2301      	movs	r3, #1
 8005b0a:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b0e:	f383 8810 	msr	PRIMASK, r3
}
 8005b12:	46c0      	nop			; (mov r8, r8)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	689a      	ldr	r2, [r3, #8]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	2140      	movs	r1, #64	; 0x40
 8005b20:	438a      	bics	r2, r1
 8005b22:	609a      	str	r2, [r3, #8]
 8005b24:	183b      	adds	r3, r7, r0
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b2c:	f383 8810 	msr	PRIMASK, r3
}
 8005b30:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2280      	movs	r2, #128	; 0x80
 8005b36:	589b      	ldr	r3, [r3, r2]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d016      	beq.n	8005b6a <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2280      	movs	r2, #128	; 0x80
 8005b40:	589b      	ldr	r3, [r3, r2]
 8005b42:	4a17      	ldr	r2, [pc, #92]	; (8005ba0 <HAL_UART_IRQHandler+0x2c8>)
 8005b44:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2280      	movs	r2, #128	; 0x80
 8005b4a:	589b      	ldr	r3, [r3, r2]
 8005b4c:	0018      	movs	r0, r3
 8005b4e:	f7fd ff09 	bl	8003964 <HAL_DMA_Abort_IT>
 8005b52:	1e03      	subs	r3, r0, #0
 8005b54:	d01c      	beq.n	8005b90 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2280      	movs	r2, #128	; 0x80
 8005b5a:	589b      	ldr	r3, [r3, r2]
 8005b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	2180      	movs	r1, #128	; 0x80
 8005b62:	5852      	ldr	r2, [r2, r1]
 8005b64:	0010      	movs	r0, r2
 8005b66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b68:	e012      	b.n	8005b90 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	0018      	movs	r0, r3
 8005b6e:	f000 f9f1 	bl	8005f54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b72:	e00d      	b.n	8005b90 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	0018      	movs	r0, r3
 8005b78:	f000 f9ec 	bl	8005f54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b7c:	e008      	b.n	8005b90 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	0018      	movs	r0, r3
 8005b82:	f000 f9e7 	bl	8005f54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2290      	movs	r2, #144	; 0x90
 8005b8a:	2100      	movs	r1, #0
 8005b8c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8005b8e:	e1b9      	b.n	8005f04 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b90:	46c0      	nop			; (mov r8, r8)
    return;
 8005b92:	e1b7      	b.n	8005f04 <HAL_UART_IRQHandler+0x62c>
 8005b94:	0000080f 	.word	0x0000080f
 8005b98:	10000001 	.word	0x10000001
 8005b9c:	04000120 	.word	0x04000120
 8005ba0:	08006c79 	.word	0x08006c79

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d000      	beq.n	8005bae <HAL_UART_IRQHandler+0x2d6>
 8005bac:	e13e      	b.n	8005e2c <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005bae:	23a4      	movs	r3, #164	; 0xa4
 8005bb0:	18fb      	adds	r3, r7, r3
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	2210      	movs	r2, #16
 8005bb6:	4013      	ands	r3, r2
 8005bb8:	d100      	bne.n	8005bbc <HAL_UART_IRQHandler+0x2e4>
 8005bba:	e137      	b.n	8005e2c <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005bbc:	23a0      	movs	r3, #160	; 0xa0
 8005bbe:	18fb      	adds	r3, r7, r3
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	2210      	movs	r2, #16
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	d100      	bne.n	8005bca <HAL_UART_IRQHandler+0x2f2>
 8005bc8:	e130      	b.n	8005e2c <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	2210      	movs	r2, #16
 8005bd0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	2240      	movs	r2, #64	; 0x40
 8005bda:	4013      	ands	r3, r2
 8005bdc:	2b40      	cmp	r3, #64	; 0x40
 8005bde:	d000      	beq.n	8005be2 <HAL_UART_IRQHandler+0x30a>
 8005be0:	e0a4      	b.n	8005d2c <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2280      	movs	r2, #128	; 0x80
 8005be6:	589b      	ldr	r3, [r3, r2]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	685a      	ldr	r2, [r3, #4]
 8005bec:	217e      	movs	r1, #126	; 0x7e
 8005bee:	187b      	adds	r3, r7, r1
 8005bf0:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8005bf2:	187b      	adds	r3, r7, r1
 8005bf4:	881b      	ldrh	r3, [r3, #0]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d100      	bne.n	8005bfc <HAL_UART_IRQHandler+0x324>
 8005bfa:	e185      	b.n	8005f08 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	225c      	movs	r2, #92	; 0x5c
 8005c00:	5a9b      	ldrh	r3, [r3, r2]
 8005c02:	187a      	adds	r2, r7, r1
 8005c04:	8812      	ldrh	r2, [r2, #0]
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d300      	bcc.n	8005c0c <HAL_UART_IRQHandler+0x334>
 8005c0a:	e17d      	b.n	8005f08 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	187a      	adds	r2, r7, r1
 8005c10:	215e      	movs	r1, #94	; 0x5e
 8005c12:	8812      	ldrh	r2, [r2, #0]
 8005c14:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2280      	movs	r2, #128	; 0x80
 8005c1a:	589b      	ldr	r3, [r3, r2]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	2220      	movs	r2, #32
 8005c22:	4013      	ands	r3, r2
 8005c24:	d170      	bne.n	8005d08 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c26:	f3ef 8310 	mrs	r3, PRIMASK
 8005c2a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c2e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005c30:	2301      	movs	r3, #1
 8005c32:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c36:	f383 8810 	msr	PRIMASK, r3
}
 8005c3a:	46c0      	nop			; (mov r8, r8)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	49b4      	ldr	r1, [pc, #720]	; (8005f18 <HAL_UART_IRQHandler+0x640>)
 8005c48:	400a      	ands	r2, r1
 8005c4a:	601a      	str	r2, [r3, #0]
 8005c4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c4e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c52:	f383 8810 	msr	PRIMASK, r3
}
 8005c56:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c58:	f3ef 8310 	mrs	r3, PRIMASK
 8005c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8005c5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c60:	677b      	str	r3, [r7, #116]	; 0x74
 8005c62:	2301      	movs	r3, #1
 8005c64:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c68:	f383 8810 	msr	PRIMASK, r3
}
 8005c6c:	46c0      	nop			; (mov r8, r8)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	689a      	ldr	r2, [r3, #8]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	2101      	movs	r1, #1
 8005c7a:	438a      	bics	r2, r1
 8005c7c:	609a      	str	r2, [r3, #8]
 8005c7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c80:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c84:	f383 8810 	msr	PRIMASK, r3
}
 8005c88:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c8a:	f3ef 8310 	mrs	r3, PRIMASK
 8005c8e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8005c90:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c92:	673b      	str	r3, [r7, #112]	; 0x70
 8005c94:	2301      	movs	r3, #1
 8005c96:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c9a:	f383 8810 	msr	PRIMASK, r3
}
 8005c9e:	46c0      	nop			; (mov r8, r8)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	689a      	ldr	r2, [r3, #8]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	2140      	movs	r1, #64	; 0x40
 8005cac:	438a      	bics	r2, r1
 8005cae:	609a      	str	r2, [r3, #8]
 8005cb0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005cb2:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cb6:	f383 8810 	msr	PRIMASK, r3
}
 8005cba:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	228c      	movs	r2, #140	; 0x8c
 8005cc0:	2120      	movs	r1, #32
 8005cc2:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cca:	f3ef 8310 	mrs	r3, PRIMASK
 8005cce:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8005cd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cd2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cd8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005cda:	f383 8810 	msr	PRIMASK, r3
}
 8005cde:	46c0      	nop			; (mov r8, r8)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	2110      	movs	r1, #16
 8005cec:	438a      	bics	r2, r1
 8005cee:	601a      	str	r2, [r3, #0]
 8005cf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cf2:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cf6:	f383 8810 	msr	PRIMASK, r3
}
 8005cfa:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2280      	movs	r2, #128	; 0x80
 8005d00:	589b      	ldr	r3, [r3, r2]
 8005d02:	0018      	movs	r0, r3
 8005d04:	f7fd fdcc 	bl	80038a0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2202      	movs	r2, #2
 8005d0c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	225c      	movs	r2, #92	; 0x5c
 8005d12:	5a9a      	ldrh	r2, [r3, r2]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	215e      	movs	r1, #94	; 0x5e
 8005d18:	5a5b      	ldrh	r3, [r3, r1]
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	1ad3      	subs	r3, r2, r3
 8005d1e:	b29a      	uxth	r2, r3
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	0011      	movs	r1, r2
 8005d24:	0018      	movs	r0, r3
 8005d26:	f7fd f87b 	bl	8002e20 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005d2a:	e0ed      	b.n	8005f08 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	225c      	movs	r2, #92	; 0x5c
 8005d30:	5a99      	ldrh	r1, [r3, r2]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	225e      	movs	r2, #94	; 0x5e
 8005d36:	5a9b      	ldrh	r3, [r3, r2]
 8005d38:	b29a      	uxth	r2, r3
 8005d3a:	208e      	movs	r0, #142	; 0x8e
 8005d3c:	183b      	adds	r3, r7, r0
 8005d3e:	1a8a      	subs	r2, r1, r2
 8005d40:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	225e      	movs	r2, #94	; 0x5e
 8005d46:	5a9b      	ldrh	r3, [r3, r2]
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d100      	bne.n	8005d50 <HAL_UART_IRQHandler+0x478>
 8005d4e:	e0dd      	b.n	8005f0c <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8005d50:	183b      	adds	r3, r7, r0
 8005d52:	881b      	ldrh	r3, [r3, #0]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d100      	bne.n	8005d5a <HAL_UART_IRQHandler+0x482>
 8005d58:	e0d8      	b.n	8005f0c <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d5a:	f3ef 8310 	mrs	r3, PRIMASK
 8005d5e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005d60:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d62:	2488      	movs	r4, #136	; 0x88
 8005d64:	193a      	adds	r2, r7, r4
 8005d66:	6013      	str	r3, [r2, #0]
 8005d68:	2301      	movs	r3, #1
 8005d6a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	f383 8810 	msr	PRIMASK, r3
}
 8005d72:	46c0      	nop			; (mov r8, r8)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4967      	ldr	r1, [pc, #412]	; (8005f1c <HAL_UART_IRQHandler+0x644>)
 8005d80:	400a      	ands	r2, r1
 8005d82:	601a      	str	r2, [r3, #0]
 8005d84:	193b      	adds	r3, r7, r4
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	f383 8810 	msr	PRIMASK, r3
}
 8005d90:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d92:	f3ef 8310 	mrs	r3, PRIMASK
 8005d96:	61bb      	str	r3, [r7, #24]
  return(result);
 8005d98:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005d9a:	2484      	movs	r4, #132	; 0x84
 8005d9c:	193a      	adds	r2, r7, r4
 8005d9e:	6013      	str	r3, [r2, #0]
 8005da0:	2301      	movs	r3, #1
 8005da2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	f383 8810 	msr	PRIMASK, r3
}
 8005daa:	46c0      	nop			; (mov r8, r8)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	689a      	ldr	r2, [r3, #8]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	495a      	ldr	r1, [pc, #360]	; (8005f20 <HAL_UART_IRQHandler+0x648>)
 8005db8:	400a      	ands	r2, r1
 8005dba:	609a      	str	r2, [r3, #8]
 8005dbc:	193b      	adds	r3, r7, r4
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dc2:	6a3b      	ldr	r3, [r7, #32]
 8005dc4:	f383 8810 	msr	PRIMASK, r3
}
 8005dc8:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	228c      	movs	r2, #140	; 0x8c
 8005dce:	2120      	movs	r1, #32
 8005dd0:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dde:	f3ef 8310 	mrs	r3, PRIMASK
 8005de2:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005de6:	2480      	movs	r4, #128	; 0x80
 8005de8:	193a      	adds	r2, r7, r4
 8005dea:	6013      	str	r3, [r2, #0]
 8005dec:	2301      	movs	r3, #1
 8005dee:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df2:	f383 8810 	msr	PRIMASK, r3
}
 8005df6:	46c0      	nop			; (mov r8, r8)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	2110      	movs	r1, #16
 8005e04:	438a      	bics	r2, r1
 8005e06:	601a      	str	r2, [r3, #0]
 8005e08:	193b      	adds	r3, r7, r4
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e10:	f383 8810 	msr	PRIMASK, r3
}
 8005e14:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2202      	movs	r2, #2
 8005e1a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e1c:	183b      	adds	r3, r7, r0
 8005e1e:	881a      	ldrh	r2, [r3, #0]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	0011      	movs	r1, r2
 8005e24:	0018      	movs	r0, r3
 8005e26:	f7fc fffb 	bl	8002e20 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005e2a:	e06f      	b.n	8005f0c <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005e2c:	23a4      	movs	r3, #164	; 0xa4
 8005e2e:	18fb      	adds	r3, r7, r3
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	2380      	movs	r3, #128	; 0x80
 8005e34:	035b      	lsls	r3, r3, #13
 8005e36:	4013      	ands	r3, r2
 8005e38:	d010      	beq.n	8005e5c <HAL_UART_IRQHandler+0x584>
 8005e3a:	239c      	movs	r3, #156	; 0x9c
 8005e3c:	18fb      	adds	r3, r7, r3
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	2380      	movs	r3, #128	; 0x80
 8005e42:	03db      	lsls	r3, r3, #15
 8005e44:	4013      	ands	r3, r2
 8005e46:	d009      	beq.n	8005e5c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	2280      	movs	r2, #128	; 0x80
 8005e4e:	0352      	lsls	r2, r2, #13
 8005e50:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	0018      	movs	r0, r3
 8005e56:	f000 ff52 	bl	8006cfe <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005e5a:	e05a      	b.n	8005f12 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005e5c:	23a4      	movs	r3, #164	; 0xa4
 8005e5e:	18fb      	adds	r3, r7, r3
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	2280      	movs	r2, #128	; 0x80
 8005e64:	4013      	ands	r3, r2
 8005e66:	d016      	beq.n	8005e96 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005e68:	23a0      	movs	r3, #160	; 0xa0
 8005e6a:	18fb      	adds	r3, r7, r3
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	2280      	movs	r2, #128	; 0x80
 8005e70:	4013      	ands	r3, r2
 8005e72:	d106      	bne.n	8005e82 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005e74:	239c      	movs	r3, #156	; 0x9c
 8005e76:	18fb      	adds	r3, r7, r3
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	2380      	movs	r3, #128	; 0x80
 8005e7c:	041b      	lsls	r3, r3, #16
 8005e7e:	4013      	ands	r3, r2
 8005e80:	d009      	beq.n	8005e96 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d042      	beq.n	8005f10 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	0010      	movs	r0, r2
 8005e92:	4798      	blx	r3
    }
    return;
 8005e94:	e03c      	b.n	8005f10 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005e96:	23a4      	movs	r3, #164	; 0xa4
 8005e98:	18fb      	adds	r3, r7, r3
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	2240      	movs	r2, #64	; 0x40
 8005e9e:	4013      	ands	r3, r2
 8005ea0:	d00a      	beq.n	8005eb8 <HAL_UART_IRQHandler+0x5e0>
 8005ea2:	23a0      	movs	r3, #160	; 0xa0
 8005ea4:	18fb      	adds	r3, r7, r3
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2240      	movs	r2, #64	; 0x40
 8005eaa:	4013      	ands	r3, r2
 8005eac:	d004      	beq.n	8005eb8 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	0018      	movs	r0, r3
 8005eb2:	f000 fef8 	bl	8006ca6 <UART_EndTransmit_IT>
    return;
 8005eb6:	e02c      	b.n	8005f12 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005eb8:	23a4      	movs	r3, #164	; 0xa4
 8005eba:	18fb      	adds	r3, r7, r3
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	2380      	movs	r3, #128	; 0x80
 8005ec0:	041b      	lsls	r3, r3, #16
 8005ec2:	4013      	ands	r3, r2
 8005ec4:	d00b      	beq.n	8005ede <HAL_UART_IRQHandler+0x606>
 8005ec6:	23a0      	movs	r3, #160	; 0xa0
 8005ec8:	18fb      	adds	r3, r7, r3
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	2380      	movs	r3, #128	; 0x80
 8005ece:	05db      	lsls	r3, r3, #23
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	d004      	beq.n	8005ede <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	0018      	movs	r0, r3
 8005ed8:	f000 ff21 	bl	8006d1e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005edc:	e019      	b.n	8005f12 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005ede:	23a4      	movs	r3, #164	; 0xa4
 8005ee0:	18fb      	adds	r3, r7, r3
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	2380      	movs	r3, #128	; 0x80
 8005ee6:	045b      	lsls	r3, r3, #17
 8005ee8:	4013      	ands	r3, r2
 8005eea:	d012      	beq.n	8005f12 <HAL_UART_IRQHandler+0x63a>
 8005eec:	23a0      	movs	r3, #160	; 0xa0
 8005eee:	18fb      	adds	r3, r7, r3
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	da0d      	bge.n	8005f12 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	0018      	movs	r0, r3
 8005efa:	f000 ff08 	bl	8006d0e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005efe:	e008      	b.n	8005f12 <HAL_UART_IRQHandler+0x63a>
      return;
 8005f00:	46c0      	nop			; (mov r8, r8)
 8005f02:	e006      	b.n	8005f12 <HAL_UART_IRQHandler+0x63a>
    return;
 8005f04:	46c0      	nop			; (mov r8, r8)
 8005f06:	e004      	b.n	8005f12 <HAL_UART_IRQHandler+0x63a>
      return;
 8005f08:	46c0      	nop			; (mov r8, r8)
 8005f0a:	e002      	b.n	8005f12 <HAL_UART_IRQHandler+0x63a>
      return;
 8005f0c:	46c0      	nop			; (mov r8, r8)
 8005f0e:	e000      	b.n	8005f12 <HAL_UART_IRQHandler+0x63a>
    return;
 8005f10:	46c0      	nop			; (mov r8, r8)
  }
}
 8005f12:	46bd      	mov	sp, r7
 8005f14:	b02a      	add	sp, #168	; 0xa8
 8005f16:	bdb0      	pop	{r4, r5, r7, pc}
 8005f18:	fffffeff 	.word	0xfffffeff
 8005f1c:	fffffedf 	.word	0xfffffedf
 8005f20:	effffffe 	.word	0xeffffffe

08005f24 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b082      	sub	sp, #8
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005f2c:	46c0      	nop			; (mov r8, r8)
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	b002      	add	sp, #8
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b082      	sub	sp, #8
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005f3c:	46c0      	nop			; (mov r8, r8)
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	b002      	add	sp, #8
 8005f42:	bd80      	pop	{r7, pc}

08005f44 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b082      	sub	sp, #8
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005f4c:	46c0      	nop			; (mov r8, r8)
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	b002      	add	sp, #8
 8005f52:	bd80      	pop	{r7, pc}

08005f54 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b082      	sub	sp, #8
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005f5c:	46c0      	nop			; (mov r8, r8)
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	b002      	add	sp, #8
 8005f62:	bd80      	pop	{r7, pc}

08005f64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f64:	b5b0      	push	{r4, r5, r7, lr}
 8005f66:	b090      	sub	sp, #64	; 0x40
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f6c:	231a      	movs	r3, #26
 8005f6e:	2220      	movs	r2, #32
 8005f70:	189b      	adds	r3, r3, r2
 8005f72:	19db      	adds	r3, r3, r7
 8005f74:	2200      	movs	r2, #0
 8005f76:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7a:	689a      	ldr	r2, [r3, #8]
 8005f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7e:	691b      	ldr	r3, [r3, #16]
 8005f80:	431a      	orrs	r2, r3
 8005f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f84:	695b      	ldr	r3, [r3, #20]
 8005f86:	431a      	orrs	r2, r3
 8005f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8a:	69db      	ldr	r3, [r3, #28]
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4ac4      	ldr	r2, [pc, #784]	; (80062a8 <UART_SetConfig+0x344>)
 8005f98:	4013      	ands	r3, r2
 8005f9a:	0019      	movs	r1, r3
 8005f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fa2:	430b      	orrs	r3, r1
 8005fa4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	4abf      	ldr	r2, [pc, #764]	; (80062ac <UART_SetConfig+0x348>)
 8005fae:	4013      	ands	r3, r2
 8005fb0:	0018      	movs	r0, r3
 8005fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb4:	68d9      	ldr	r1, [r3, #12]
 8005fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	0003      	movs	r3, r0
 8005fbc:	430b      	orrs	r3, r1
 8005fbe:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc2:	699b      	ldr	r3, [r3, #24]
 8005fc4:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4ab9      	ldr	r2, [pc, #740]	; (80062b0 <UART_SetConfig+0x34c>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d004      	beq.n	8005fda <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd2:	6a1b      	ldr	r3, [r3, #32]
 8005fd4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	4ab4      	ldr	r2, [pc, #720]	; (80062b4 <UART_SetConfig+0x350>)
 8005fe2:	4013      	ands	r3, r2
 8005fe4:	0019      	movs	r1, r3
 8005fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fec:	430b      	orrs	r3, r1
 8005fee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff6:	220f      	movs	r2, #15
 8005ff8:	4393      	bics	r3, r2
 8005ffa:	0018      	movs	r0, r3
 8005ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffe:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	0003      	movs	r3, r0
 8006006:	430b      	orrs	r3, r1
 8006008:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800600a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4aaa      	ldr	r2, [pc, #680]	; (80062b8 <UART_SetConfig+0x354>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d131      	bne.n	8006078 <UART_SetConfig+0x114>
 8006014:	4ba9      	ldr	r3, [pc, #676]	; (80062bc <UART_SetConfig+0x358>)
 8006016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006018:	2203      	movs	r2, #3
 800601a:	4013      	ands	r3, r2
 800601c:	2b03      	cmp	r3, #3
 800601e:	d01d      	beq.n	800605c <UART_SetConfig+0xf8>
 8006020:	d823      	bhi.n	800606a <UART_SetConfig+0x106>
 8006022:	2b02      	cmp	r3, #2
 8006024:	d00c      	beq.n	8006040 <UART_SetConfig+0xdc>
 8006026:	d820      	bhi.n	800606a <UART_SetConfig+0x106>
 8006028:	2b00      	cmp	r3, #0
 800602a:	d002      	beq.n	8006032 <UART_SetConfig+0xce>
 800602c:	2b01      	cmp	r3, #1
 800602e:	d00e      	beq.n	800604e <UART_SetConfig+0xea>
 8006030:	e01b      	b.n	800606a <UART_SetConfig+0x106>
 8006032:	231b      	movs	r3, #27
 8006034:	2220      	movs	r2, #32
 8006036:	189b      	adds	r3, r3, r2
 8006038:	19db      	adds	r3, r3, r7
 800603a:	2200      	movs	r2, #0
 800603c:	701a      	strb	r2, [r3, #0]
 800603e:	e071      	b.n	8006124 <UART_SetConfig+0x1c0>
 8006040:	231b      	movs	r3, #27
 8006042:	2220      	movs	r2, #32
 8006044:	189b      	adds	r3, r3, r2
 8006046:	19db      	adds	r3, r3, r7
 8006048:	2202      	movs	r2, #2
 800604a:	701a      	strb	r2, [r3, #0]
 800604c:	e06a      	b.n	8006124 <UART_SetConfig+0x1c0>
 800604e:	231b      	movs	r3, #27
 8006050:	2220      	movs	r2, #32
 8006052:	189b      	adds	r3, r3, r2
 8006054:	19db      	adds	r3, r3, r7
 8006056:	2204      	movs	r2, #4
 8006058:	701a      	strb	r2, [r3, #0]
 800605a:	e063      	b.n	8006124 <UART_SetConfig+0x1c0>
 800605c:	231b      	movs	r3, #27
 800605e:	2220      	movs	r2, #32
 8006060:	189b      	adds	r3, r3, r2
 8006062:	19db      	adds	r3, r3, r7
 8006064:	2208      	movs	r2, #8
 8006066:	701a      	strb	r2, [r3, #0]
 8006068:	e05c      	b.n	8006124 <UART_SetConfig+0x1c0>
 800606a:	231b      	movs	r3, #27
 800606c:	2220      	movs	r2, #32
 800606e:	189b      	adds	r3, r3, r2
 8006070:	19db      	adds	r3, r3, r7
 8006072:	2210      	movs	r2, #16
 8006074:	701a      	strb	r2, [r3, #0]
 8006076:	e055      	b.n	8006124 <UART_SetConfig+0x1c0>
 8006078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a90      	ldr	r2, [pc, #576]	; (80062c0 <UART_SetConfig+0x35c>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d106      	bne.n	8006090 <UART_SetConfig+0x12c>
 8006082:	231b      	movs	r3, #27
 8006084:	2220      	movs	r2, #32
 8006086:	189b      	adds	r3, r3, r2
 8006088:	19db      	adds	r3, r3, r7
 800608a:	2200      	movs	r2, #0
 800608c:	701a      	strb	r2, [r3, #0]
 800608e:	e049      	b.n	8006124 <UART_SetConfig+0x1c0>
 8006090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a86      	ldr	r2, [pc, #536]	; (80062b0 <UART_SetConfig+0x34c>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d13e      	bne.n	8006118 <UART_SetConfig+0x1b4>
 800609a:	4b88      	ldr	r3, [pc, #544]	; (80062bc <UART_SetConfig+0x358>)
 800609c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800609e:	23c0      	movs	r3, #192	; 0xc0
 80060a0:	011b      	lsls	r3, r3, #4
 80060a2:	4013      	ands	r3, r2
 80060a4:	22c0      	movs	r2, #192	; 0xc0
 80060a6:	0112      	lsls	r2, r2, #4
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d027      	beq.n	80060fc <UART_SetConfig+0x198>
 80060ac:	22c0      	movs	r2, #192	; 0xc0
 80060ae:	0112      	lsls	r2, r2, #4
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d82a      	bhi.n	800610a <UART_SetConfig+0x1a6>
 80060b4:	2280      	movs	r2, #128	; 0x80
 80060b6:	0112      	lsls	r2, r2, #4
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d011      	beq.n	80060e0 <UART_SetConfig+0x17c>
 80060bc:	2280      	movs	r2, #128	; 0x80
 80060be:	0112      	lsls	r2, r2, #4
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d822      	bhi.n	800610a <UART_SetConfig+0x1a6>
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d004      	beq.n	80060d2 <UART_SetConfig+0x16e>
 80060c8:	2280      	movs	r2, #128	; 0x80
 80060ca:	00d2      	lsls	r2, r2, #3
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d00e      	beq.n	80060ee <UART_SetConfig+0x18a>
 80060d0:	e01b      	b.n	800610a <UART_SetConfig+0x1a6>
 80060d2:	231b      	movs	r3, #27
 80060d4:	2220      	movs	r2, #32
 80060d6:	189b      	adds	r3, r3, r2
 80060d8:	19db      	adds	r3, r3, r7
 80060da:	2200      	movs	r2, #0
 80060dc:	701a      	strb	r2, [r3, #0]
 80060de:	e021      	b.n	8006124 <UART_SetConfig+0x1c0>
 80060e0:	231b      	movs	r3, #27
 80060e2:	2220      	movs	r2, #32
 80060e4:	189b      	adds	r3, r3, r2
 80060e6:	19db      	adds	r3, r3, r7
 80060e8:	2202      	movs	r2, #2
 80060ea:	701a      	strb	r2, [r3, #0]
 80060ec:	e01a      	b.n	8006124 <UART_SetConfig+0x1c0>
 80060ee:	231b      	movs	r3, #27
 80060f0:	2220      	movs	r2, #32
 80060f2:	189b      	adds	r3, r3, r2
 80060f4:	19db      	adds	r3, r3, r7
 80060f6:	2204      	movs	r2, #4
 80060f8:	701a      	strb	r2, [r3, #0]
 80060fa:	e013      	b.n	8006124 <UART_SetConfig+0x1c0>
 80060fc:	231b      	movs	r3, #27
 80060fe:	2220      	movs	r2, #32
 8006100:	189b      	adds	r3, r3, r2
 8006102:	19db      	adds	r3, r3, r7
 8006104:	2208      	movs	r2, #8
 8006106:	701a      	strb	r2, [r3, #0]
 8006108:	e00c      	b.n	8006124 <UART_SetConfig+0x1c0>
 800610a:	231b      	movs	r3, #27
 800610c:	2220      	movs	r2, #32
 800610e:	189b      	adds	r3, r3, r2
 8006110:	19db      	adds	r3, r3, r7
 8006112:	2210      	movs	r2, #16
 8006114:	701a      	strb	r2, [r3, #0]
 8006116:	e005      	b.n	8006124 <UART_SetConfig+0x1c0>
 8006118:	231b      	movs	r3, #27
 800611a:	2220      	movs	r2, #32
 800611c:	189b      	adds	r3, r3, r2
 800611e:	19db      	adds	r3, r3, r7
 8006120:	2210      	movs	r2, #16
 8006122:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a61      	ldr	r2, [pc, #388]	; (80062b0 <UART_SetConfig+0x34c>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d000      	beq.n	8006130 <UART_SetConfig+0x1cc>
 800612e:	e092      	b.n	8006256 <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006130:	231b      	movs	r3, #27
 8006132:	2220      	movs	r2, #32
 8006134:	189b      	adds	r3, r3, r2
 8006136:	19db      	adds	r3, r3, r7
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	2b08      	cmp	r3, #8
 800613c:	d015      	beq.n	800616a <UART_SetConfig+0x206>
 800613e:	dc18      	bgt.n	8006172 <UART_SetConfig+0x20e>
 8006140:	2b04      	cmp	r3, #4
 8006142:	d00d      	beq.n	8006160 <UART_SetConfig+0x1fc>
 8006144:	dc15      	bgt.n	8006172 <UART_SetConfig+0x20e>
 8006146:	2b00      	cmp	r3, #0
 8006148:	d002      	beq.n	8006150 <UART_SetConfig+0x1ec>
 800614a:	2b02      	cmp	r3, #2
 800614c:	d005      	beq.n	800615a <UART_SetConfig+0x1f6>
 800614e:	e010      	b.n	8006172 <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006150:	f7fe fc76 	bl	8004a40 <HAL_RCC_GetPCLK1Freq>
 8006154:	0003      	movs	r3, r0
 8006156:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006158:	e014      	b.n	8006184 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800615a:	4b5a      	ldr	r3, [pc, #360]	; (80062c4 <UART_SetConfig+0x360>)
 800615c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800615e:	e011      	b.n	8006184 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006160:	f7fe fbe2 	bl	8004928 <HAL_RCC_GetSysClockFreq>
 8006164:	0003      	movs	r3, r0
 8006166:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006168:	e00c      	b.n	8006184 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800616a:	2380      	movs	r3, #128	; 0x80
 800616c:	021b      	lsls	r3, r3, #8
 800616e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006170:	e008      	b.n	8006184 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 8006172:	2300      	movs	r3, #0
 8006174:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8006176:	231a      	movs	r3, #26
 8006178:	2220      	movs	r2, #32
 800617a:	189b      	adds	r3, r3, r2
 800617c:	19db      	adds	r3, r3, r7
 800617e:	2201      	movs	r2, #1
 8006180:	701a      	strb	r2, [r3, #0]
        break;
 8006182:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006186:	2b00      	cmp	r3, #0
 8006188:	d100      	bne.n	800618c <UART_SetConfig+0x228>
 800618a:	e147      	b.n	800641c <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800618c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006190:	4b4d      	ldr	r3, [pc, #308]	; (80062c8 <UART_SetConfig+0x364>)
 8006192:	0052      	lsls	r2, r2, #1
 8006194:	5ad3      	ldrh	r3, [r2, r3]
 8006196:	0019      	movs	r1, r3
 8006198:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800619a:	f7f9 ffcf 	bl	800013c <__udivsi3>
 800619e:	0003      	movs	r3, r0
 80061a0:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80061a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a4:	685a      	ldr	r2, [r3, #4]
 80061a6:	0013      	movs	r3, r2
 80061a8:	005b      	lsls	r3, r3, #1
 80061aa:	189b      	adds	r3, r3, r2
 80061ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d305      	bcc.n	80061be <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80061b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80061b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d906      	bls.n	80061cc <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 80061be:	231a      	movs	r3, #26
 80061c0:	2220      	movs	r2, #32
 80061c2:	189b      	adds	r3, r3, r2
 80061c4:	19db      	adds	r3, r3, r7
 80061c6:	2201      	movs	r2, #1
 80061c8:	701a      	strb	r2, [r3, #0]
 80061ca:	e127      	b.n	800641c <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061ce:	61bb      	str	r3, [r7, #24]
 80061d0:	2300      	movs	r3, #0
 80061d2:	61fb      	str	r3, [r7, #28]
 80061d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80061d8:	4b3b      	ldr	r3, [pc, #236]	; (80062c8 <UART_SetConfig+0x364>)
 80061da:	0052      	lsls	r2, r2, #1
 80061dc:	5ad3      	ldrh	r3, [r2, r3]
 80061de:	613b      	str	r3, [r7, #16]
 80061e0:	2300      	movs	r3, #0
 80061e2:	617b      	str	r3, [r7, #20]
 80061e4:	693a      	ldr	r2, [r7, #16]
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	69b8      	ldr	r0, [r7, #24]
 80061ea:	69f9      	ldr	r1, [r7, #28]
 80061ec:	f7fa f994 	bl	8000518 <__aeabi_uldivmod>
 80061f0:	0002      	movs	r2, r0
 80061f2:	000b      	movs	r3, r1
 80061f4:	0e11      	lsrs	r1, r2, #24
 80061f6:	021d      	lsls	r5, r3, #8
 80061f8:	430d      	orrs	r5, r1
 80061fa:	0214      	lsls	r4, r2, #8
 80061fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	085b      	lsrs	r3, r3, #1
 8006202:	60bb      	str	r3, [r7, #8]
 8006204:	2300      	movs	r3, #0
 8006206:	60fb      	str	r3, [r7, #12]
 8006208:	68b8      	ldr	r0, [r7, #8]
 800620a:	68f9      	ldr	r1, [r7, #12]
 800620c:	1900      	adds	r0, r0, r4
 800620e:	4169      	adcs	r1, r5
 8006210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	603b      	str	r3, [r7, #0]
 8006216:	2300      	movs	r3, #0
 8006218:	607b      	str	r3, [r7, #4]
 800621a:	683a      	ldr	r2, [r7, #0]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f7fa f97b 	bl	8000518 <__aeabi_uldivmod>
 8006222:	0002      	movs	r2, r0
 8006224:	000b      	movs	r3, r1
 8006226:	0013      	movs	r3, r2
 8006228:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800622a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800622c:	23c0      	movs	r3, #192	; 0xc0
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	429a      	cmp	r2, r3
 8006232:	d309      	bcc.n	8006248 <UART_SetConfig+0x2e4>
 8006234:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006236:	2380      	movs	r3, #128	; 0x80
 8006238:	035b      	lsls	r3, r3, #13
 800623a:	429a      	cmp	r2, r3
 800623c:	d204      	bcs.n	8006248 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 800623e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006244:	60da      	str	r2, [r3, #12]
 8006246:	e0e9      	b.n	800641c <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8006248:	231a      	movs	r3, #26
 800624a:	2220      	movs	r2, #32
 800624c:	189b      	adds	r3, r3, r2
 800624e:	19db      	adds	r3, r3, r7
 8006250:	2201      	movs	r2, #1
 8006252:	701a      	strb	r2, [r3, #0]
 8006254:	e0e2      	b.n	800641c <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006258:	69da      	ldr	r2, [r3, #28]
 800625a:	2380      	movs	r3, #128	; 0x80
 800625c:	021b      	lsls	r3, r3, #8
 800625e:	429a      	cmp	r2, r3
 8006260:	d000      	beq.n	8006264 <UART_SetConfig+0x300>
 8006262:	e083      	b.n	800636c <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8006264:	231b      	movs	r3, #27
 8006266:	2220      	movs	r2, #32
 8006268:	189b      	adds	r3, r3, r2
 800626a:	19db      	adds	r3, r3, r7
 800626c:	781b      	ldrb	r3, [r3, #0]
 800626e:	2b08      	cmp	r3, #8
 8006270:	d015      	beq.n	800629e <UART_SetConfig+0x33a>
 8006272:	dc2b      	bgt.n	80062cc <UART_SetConfig+0x368>
 8006274:	2b04      	cmp	r3, #4
 8006276:	d00d      	beq.n	8006294 <UART_SetConfig+0x330>
 8006278:	dc28      	bgt.n	80062cc <UART_SetConfig+0x368>
 800627a:	2b00      	cmp	r3, #0
 800627c:	d002      	beq.n	8006284 <UART_SetConfig+0x320>
 800627e:	2b02      	cmp	r3, #2
 8006280:	d005      	beq.n	800628e <UART_SetConfig+0x32a>
 8006282:	e023      	b.n	80062cc <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006284:	f7fe fbdc 	bl	8004a40 <HAL_RCC_GetPCLK1Freq>
 8006288:	0003      	movs	r3, r0
 800628a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800628c:	e027      	b.n	80062de <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800628e:	4b0d      	ldr	r3, [pc, #52]	; (80062c4 <UART_SetConfig+0x360>)
 8006290:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006292:	e024      	b.n	80062de <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006294:	f7fe fb48 	bl	8004928 <HAL_RCC_GetSysClockFreq>
 8006298:	0003      	movs	r3, r0
 800629a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800629c:	e01f      	b.n	80062de <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800629e:	2380      	movs	r3, #128	; 0x80
 80062a0:	021b      	lsls	r3, r3, #8
 80062a2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80062a4:	e01b      	b.n	80062de <UART_SetConfig+0x37a>
 80062a6:	46c0      	nop			; (mov r8, r8)
 80062a8:	cfff69f3 	.word	0xcfff69f3
 80062ac:	ffffcfff 	.word	0xffffcfff
 80062b0:	40008000 	.word	0x40008000
 80062b4:	11fff4ff 	.word	0x11fff4ff
 80062b8:	40013800 	.word	0x40013800
 80062bc:	40021000 	.word	0x40021000
 80062c0:	40004400 	.word	0x40004400
 80062c4:	00f42400 	.word	0x00f42400
 80062c8:	0800a780 	.word	0x0800a780
      default:
        pclk = 0U;
 80062cc:	2300      	movs	r3, #0
 80062ce:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80062d0:	231a      	movs	r3, #26
 80062d2:	2220      	movs	r2, #32
 80062d4:	189b      	adds	r3, r3, r2
 80062d6:	19db      	adds	r3, r3, r7
 80062d8:	2201      	movs	r2, #1
 80062da:	701a      	strb	r2, [r3, #0]
        break;
 80062dc:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80062de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d100      	bne.n	80062e6 <UART_SetConfig+0x382>
 80062e4:	e09a      	b.n	800641c <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80062ea:	4b58      	ldr	r3, [pc, #352]	; (800644c <UART_SetConfig+0x4e8>)
 80062ec:	0052      	lsls	r2, r2, #1
 80062ee:	5ad3      	ldrh	r3, [r2, r3]
 80062f0:	0019      	movs	r1, r3
 80062f2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80062f4:	f7f9 ff22 	bl	800013c <__udivsi3>
 80062f8:	0003      	movs	r3, r0
 80062fa:	005a      	lsls	r2, r3, #1
 80062fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	085b      	lsrs	r3, r3, #1
 8006302:	18d2      	adds	r2, r2, r3
 8006304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	0019      	movs	r1, r3
 800630a:	0010      	movs	r0, r2
 800630c:	f7f9 ff16 	bl	800013c <__udivsi3>
 8006310:	0003      	movs	r3, r0
 8006312:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006316:	2b0f      	cmp	r3, #15
 8006318:	d921      	bls.n	800635e <UART_SetConfig+0x3fa>
 800631a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800631c:	2380      	movs	r3, #128	; 0x80
 800631e:	025b      	lsls	r3, r3, #9
 8006320:	429a      	cmp	r2, r3
 8006322:	d21c      	bcs.n	800635e <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006326:	b29a      	uxth	r2, r3
 8006328:	200e      	movs	r0, #14
 800632a:	2420      	movs	r4, #32
 800632c:	1903      	adds	r3, r0, r4
 800632e:	19db      	adds	r3, r3, r7
 8006330:	210f      	movs	r1, #15
 8006332:	438a      	bics	r2, r1
 8006334:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006338:	085b      	lsrs	r3, r3, #1
 800633a:	b29b      	uxth	r3, r3
 800633c:	2207      	movs	r2, #7
 800633e:	4013      	ands	r3, r2
 8006340:	b299      	uxth	r1, r3
 8006342:	1903      	adds	r3, r0, r4
 8006344:	19db      	adds	r3, r3, r7
 8006346:	1902      	adds	r2, r0, r4
 8006348:	19d2      	adds	r2, r2, r7
 800634a:	8812      	ldrh	r2, [r2, #0]
 800634c:	430a      	orrs	r2, r1
 800634e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	1902      	adds	r2, r0, r4
 8006356:	19d2      	adds	r2, r2, r7
 8006358:	8812      	ldrh	r2, [r2, #0]
 800635a:	60da      	str	r2, [r3, #12]
 800635c:	e05e      	b.n	800641c <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 800635e:	231a      	movs	r3, #26
 8006360:	2220      	movs	r2, #32
 8006362:	189b      	adds	r3, r3, r2
 8006364:	19db      	adds	r3, r3, r7
 8006366:	2201      	movs	r2, #1
 8006368:	701a      	strb	r2, [r3, #0]
 800636a:	e057      	b.n	800641c <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800636c:	231b      	movs	r3, #27
 800636e:	2220      	movs	r2, #32
 8006370:	189b      	adds	r3, r3, r2
 8006372:	19db      	adds	r3, r3, r7
 8006374:	781b      	ldrb	r3, [r3, #0]
 8006376:	2b08      	cmp	r3, #8
 8006378:	d015      	beq.n	80063a6 <UART_SetConfig+0x442>
 800637a:	dc18      	bgt.n	80063ae <UART_SetConfig+0x44a>
 800637c:	2b04      	cmp	r3, #4
 800637e:	d00d      	beq.n	800639c <UART_SetConfig+0x438>
 8006380:	dc15      	bgt.n	80063ae <UART_SetConfig+0x44a>
 8006382:	2b00      	cmp	r3, #0
 8006384:	d002      	beq.n	800638c <UART_SetConfig+0x428>
 8006386:	2b02      	cmp	r3, #2
 8006388:	d005      	beq.n	8006396 <UART_SetConfig+0x432>
 800638a:	e010      	b.n	80063ae <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800638c:	f7fe fb58 	bl	8004a40 <HAL_RCC_GetPCLK1Freq>
 8006390:	0003      	movs	r3, r0
 8006392:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006394:	e014      	b.n	80063c0 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006396:	4b2e      	ldr	r3, [pc, #184]	; (8006450 <UART_SetConfig+0x4ec>)
 8006398:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800639a:	e011      	b.n	80063c0 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800639c:	f7fe fac4 	bl	8004928 <HAL_RCC_GetSysClockFreq>
 80063a0:	0003      	movs	r3, r0
 80063a2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80063a4:	e00c      	b.n	80063c0 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063a6:	2380      	movs	r3, #128	; 0x80
 80063a8:	021b      	lsls	r3, r3, #8
 80063aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80063ac:	e008      	b.n	80063c0 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 80063ae:	2300      	movs	r3, #0
 80063b0:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80063b2:	231a      	movs	r3, #26
 80063b4:	2220      	movs	r2, #32
 80063b6:	189b      	adds	r3, r3, r2
 80063b8:	19db      	adds	r3, r3, r7
 80063ba:	2201      	movs	r2, #1
 80063bc:	701a      	strb	r2, [r3, #0]
        break;
 80063be:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80063c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d02a      	beq.n	800641c <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80063ca:	4b20      	ldr	r3, [pc, #128]	; (800644c <UART_SetConfig+0x4e8>)
 80063cc:	0052      	lsls	r2, r2, #1
 80063ce:	5ad3      	ldrh	r3, [r2, r3]
 80063d0:	0019      	movs	r1, r3
 80063d2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80063d4:	f7f9 feb2 	bl	800013c <__udivsi3>
 80063d8:	0003      	movs	r3, r0
 80063da:	001a      	movs	r2, r3
 80063dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	085b      	lsrs	r3, r3, #1
 80063e2:	18d2      	adds	r2, r2, r3
 80063e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	0019      	movs	r1, r3
 80063ea:	0010      	movs	r0, r2
 80063ec:	f7f9 fea6 	bl	800013c <__udivsi3>
 80063f0:	0003      	movs	r3, r0
 80063f2:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f6:	2b0f      	cmp	r3, #15
 80063f8:	d90a      	bls.n	8006410 <UART_SetConfig+0x4ac>
 80063fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063fc:	2380      	movs	r3, #128	; 0x80
 80063fe:	025b      	lsls	r3, r3, #9
 8006400:	429a      	cmp	r2, r3
 8006402:	d205      	bcs.n	8006410 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006406:	b29a      	uxth	r2, r3
 8006408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	60da      	str	r2, [r3, #12]
 800640e:	e005      	b.n	800641c <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8006410:	231a      	movs	r3, #26
 8006412:	2220      	movs	r2, #32
 8006414:	189b      	adds	r3, r3, r2
 8006416:	19db      	adds	r3, r3, r7
 8006418:	2201      	movs	r2, #1
 800641a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800641c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641e:	226a      	movs	r2, #106	; 0x6a
 8006420:	2101      	movs	r1, #1
 8006422:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8006424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006426:	2268      	movs	r2, #104	; 0x68
 8006428:	2101      	movs	r1, #1
 800642a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800642c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642e:	2200      	movs	r2, #0
 8006430:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006434:	2200      	movs	r2, #0
 8006436:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006438:	231a      	movs	r3, #26
 800643a:	2220      	movs	r2, #32
 800643c:	189b      	adds	r3, r3, r2
 800643e:	19db      	adds	r3, r3, r7
 8006440:	781b      	ldrb	r3, [r3, #0]
}
 8006442:	0018      	movs	r0, r3
 8006444:	46bd      	mov	sp, r7
 8006446:	b010      	add	sp, #64	; 0x40
 8006448:	bdb0      	pop	{r4, r5, r7, pc}
 800644a:	46c0      	nop			; (mov r8, r8)
 800644c:	0800a780 	.word	0x0800a780
 8006450:	00f42400 	.word	0x00f42400

08006454 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b082      	sub	sp, #8
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006460:	2201      	movs	r2, #1
 8006462:	4013      	ands	r3, r2
 8006464:	d00b      	beq.n	800647e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	4a4a      	ldr	r2, [pc, #296]	; (8006598 <UART_AdvFeatureConfig+0x144>)
 800646e:	4013      	ands	r3, r2
 8006470:	0019      	movs	r1, r3
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	430a      	orrs	r2, r1
 800647c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006482:	2202      	movs	r2, #2
 8006484:	4013      	ands	r3, r2
 8006486:	d00b      	beq.n	80064a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	4a43      	ldr	r2, [pc, #268]	; (800659c <UART_AdvFeatureConfig+0x148>)
 8006490:	4013      	ands	r3, r2
 8006492:	0019      	movs	r1, r3
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	430a      	orrs	r2, r1
 800649e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064a4:	2204      	movs	r2, #4
 80064a6:	4013      	ands	r3, r2
 80064a8:	d00b      	beq.n	80064c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	4a3b      	ldr	r2, [pc, #236]	; (80065a0 <UART_AdvFeatureConfig+0x14c>)
 80064b2:	4013      	ands	r3, r2
 80064b4:	0019      	movs	r1, r3
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	430a      	orrs	r2, r1
 80064c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064c6:	2208      	movs	r2, #8
 80064c8:	4013      	ands	r3, r2
 80064ca:	d00b      	beq.n	80064e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	4a34      	ldr	r2, [pc, #208]	; (80065a4 <UART_AdvFeatureConfig+0x150>)
 80064d4:	4013      	ands	r3, r2
 80064d6:	0019      	movs	r1, r3
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	430a      	orrs	r2, r1
 80064e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e8:	2210      	movs	r2, #16
 80064ea:	4013      	ands	r3, r2
 80064ec:	d00b      	beq.n	8006506 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	4a2c      	ldr	r2, [pc, #176]	; (80065a8 <UART_AdvFeatureConfig+0x154>)
 80064f6:	4013      	ands	r3, r2
 80064f8:	0019      	movs	r1, r3
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	430a      	orrs	r2, r1
 8006504:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800650a:	2220      	movs	r2, #32
 800650c:	4013      	ands	r3, r2
 800650e:	d00b      	beq.n	8006528 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	4a25      	ldr	r2, [pc, #148]	; (80065ac <UART_AdvFeatureConfig+0x158>)
 8006518:	4013      	ands	r3, r2
 800651a:	0019      	movs	r1, r3
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	430a      	orrs	r2, r1
 8006526:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800652c:	2240      	movs	r2, #64	; 0x40
 800652e:	4013      	ands	r3, r2
 8006530:	d01d      	beq.n	800656e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	4a1d      	ldr	r2, [pc, #116]	; (80065b0 <UART_AdvFeatureConfig+0x15c>)
 800653a:	4013      	ands	r3, r2
 800653c:	0019      	movs	r1, r3
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	430a      	orrs	r2, r1
 8006548:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800654e:	2380      	movs	r3, #128	; 0x80
 8006550:	035b      	lsls	r3, r3, #13
 8006552:	429a      	cmp	r2, r3
 8006554:	d10b      	bne.n	800656e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	4a15      	ldr	r2, [pc, #84]	; (80065b4 <UART_AdvFeatureConfig+0x160>)
 800655e:	4013      	ands	r3, r2
 8006560:	0019      	movs	r1, r3
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	430a      	orrs	r2, r1
 800656c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006572:	2280      	movs	r2, #128	; 0x80
 8006574:	4013      	ands	r3, r2
 8006576:	d00b      	beq.n	8006590 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	4a0e      	ldr	r2, [pc, #56]	; (80065b8 <UART_AdvFeatureConfig+0x164>)
 8006580:	4013      	ands	r3, r2
 8006582:	0019      	movs	r1, r3
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	430a      	orrs	r2, r1
 800658e:	605a      	str	r2, [r3, #4]
  }
}
 8006590:	46c0      	nop			; (mov r8, r8)
 8006592:	46bd      	mov	sp, r7
 8006594:	b002      	add	sp, #8
 8006596:	bd80      	pop	{r7, pc}
 8006598:	fffdffff 	.word	0xfffdffff
 800659c:	fffeffff 	.word	0xfffeffff
 80065a0:	fffbffff 	.word	0xfffbffff
 80065a4:	ffff7fff 	.word	0xffff7fff
 80065a8:	ffffefff 	.word	0xffffefff
 80065ac:	ffffdfff 	.word	0xffffdfff
 80065b0:	ffefffff 	.word	0xffefffff
 80065b4:	ff9fffff 	.word	0xff9fffff
 80065b8:	fff7ffff 	.word	0xfff7ffff

080065bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b086      	sub	sp, #24
 80065c0:	af02      	add	r7, sp, #8
 80065c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2290      	movs	r2, #144	; 0x90
 80065c8:	2100      	movs	r1, #0
 80065ca:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80065cc:	f7fc ff4c 	bl	8003468 <HAL_GetTick>
 80065d0:	0003      	movs	r3, r0
 80065d2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	2208      	movs	r2, #8
 80065dc:	4013      	ands	r3, r2
 80065de:	2b08      	cmp	r3, #8
 80065e0:	d10c      	bne.n	80065fc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2280      	movs	r2, #128	; 0x80
 80065e6:	0391      	lsls	r1, r2, #14
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	4a1a      	ldr	r2, [pc, #104]	; (8006654 <UART_CheckIdleState+0x98>)
 80065ec:	9200      	str	r2, [sp, #0]
 80065ee:	2200      	movs	r2, #0
 80065f0:	f000 f832 	bl	8006658 <UART_WaitOnFlagUntilTimeout>
 80065f4:	1e03      	subs	r3, r0, #0
 80065f6:	d001      	beq.n	80065fc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065f8:	2303      	movs	r3, #3
 80065fa:	e026      	b.n	800664a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	2204      	movs	r2, #4
 8006604:	4013      	ands	r3, r2
 8006606:	2b04      	cmp	r3, #4
 8006608:	d10c      	bne.n	8006624 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2280      	movs	r2, #128	; 0x80
 800660e:	03d1      	lsls	r1, r2, #15
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	4a10      	ldr	r2, [pc, #64]	; (8006654 <UART_CheckIdleState+0x98>)
 8006614:	9200      	str	r2, [sp, #0]
 8006616:	2200      	movs	r2, #0
 8006618:	f000 f81e 	bl	8006658 <UART_WaitOnFlagUntilTimeout>
 800661c:	1e03      	subs	r3, r0, #0
 800661e:	d001      	beq.n	8006624 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006620:	2303      	movs	r3, #3
 8006622:	e012      	b.n	800664a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2288      	movs	r2, #136	; 0x88
 8006628:	2120      	movs	r1, #32
 800662a:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	228c      	movs	r2, #140	; 0x8c
 8006630:	2120      	movs	r1, #32
 8006632:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2200      	movs	r2, #0
 8006638:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2200      	movs	r2, #0
 800663e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2284      	movs	r2, #132	; 0x84
 8006644:	2100      	movs	r1, #0
 8006646:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006648:	2300      	movs	r3, #0
}
 800664a:	0018      	movs	r0, r3
 800664c:	46bd      	mov	sp, r7
 800664e:	b004      	add	sp, #16
 8006650:	bd80      	pop	{r7, pc}
 8006652:	46c0      	nop			; (mov r8, r8)
 8006654:	01ffffff 	.word	0x01ffffff

08006658 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b094      	sub	sp, #80	; 0x50
 800665c:	af00      	add	r7, sp, #0
 800665e:	60f8      	str	r0, [r7, #12]
 8006660:	60b9      	str	r1, [r7, #8]
 8006662:	603b      	str	r3, [r7, #0]
 8006664:	1dfb      	adds	r3, r7, #7
 8006666:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006668:	e0a7      	b.n	80067ba <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800666a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800666c:	3301      	adds	r3, #1
 800666e:	d100      	bne.n	8006672 <UART_WaitOnFlagUntilTimeout+0x1a>
 8006670:	e0a3      	b.n	80067ba <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006672:	f7fc fef9 	bl	8003468 <HAL_GetTick>
 8006676:	0002      	movs	r2, r0
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	1ad3      	subs	r3, r2, r3
 800667c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800667e:	429a      	cmp	r2, r3
 8006680:	d302      	bcc.n	8006688 <UART_WaitOnFlagUntilTimeout+0x30>
 8006682:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006684:	2b00      	cmp	r3, #0
 8006686:	d13f      	bne.n	8006708 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006688:	f3ef 8310 	mrs	r3, PRIMASK
 800668c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800668e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006690:	647b      	str	r3, [r7, #68]	; 0x44
 8006692:	2301      	movs	r3, #1
 8006694:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006698:	f383 8810 	msr	PRIMASK, r3
}
 800669c:	46c0      	nop			; (mov r8, r8)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	494e      	ldr	r1, [pc, #312]	; (80067e4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80066aa:	400a      	ands	r2, r1
 80066ac:	601a      	str	r2, [r3, #0]
 80066ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066b0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b4:	f383 8810 	msr	PRIMASK, r3
}
 80066b8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066ba:	f3ef 8310 	mrs	r3, PRIMASK
 80066be:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80066c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066c2:	643b      	str	r3, [r7, #64]	; 0x40
 80066c4:	2301      	movs	r3, #1
 80066c6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ca:	f383 8810 	msr	PRIMASK, r3
}
 80066ce:	46c0      	nop			; (mov r8, r8)
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	689a      	ldr	r2, [r3, #8]
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	2101      	movs	r1, #1
 80066dc:	438a      	bics	r2, r1
 80066de:	609a      	str	r2, [r3, #8]
 80066e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066e6:	f383 8810 	msr	PRIMASK, r3
}
 80066ea:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2288      	movs	r2, #136	; 0x88
 80066f0:	2120      	movs	r1, #32
 80066f2:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	228c      	movs	r2, #140	; 0x8c
 80066f8:	2120      	movs	r1, #32
 80066fa:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2284      	movs	r2, #132	; 0x84
 8006700:	2100      	movs	r1, #0
 8006702:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006704:	2303      	movs	r3, #3
 8006706:	e069      	b.n	80067dc <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	2204      	movs	r2, #4
 8006710:	4013      	ands	r3, r2
 8006712:	d052      	beq.n	80067ba <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	69da      	ldr	r2, [r3, #28]
 800671a:	2380      	movs	r3, #128	; 0x80
 800671c:	011b      	lsls	r3, r3, #4
 800671e:	401a      	ands	r2, r3
 8006720:	2380      	movs	r3, #128	; 0x80
 8006722:	011b      	lsls	r3, r3, #4
 8006724:	429a      	cmp	r2, r3
 8006726:	d148      	bne.n	80067ba <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	2280      	movs	r2, #128	; 0x80
 800672e:	0112      	lsls	r2, r2, #4
 8006730:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006732:	f3ef 8310 	mrs	r3, PRIMASK
 8006736:	613b      	str	r3, [r7, #16]
  return(result);
 8006738:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800673a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800673c:	2301      	movs	r3, #1
 800673e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	f383 8810 	msr	PRIMASK, r3
}
 8006746:	46c0      	nop			; (mov r8, r8)
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4924      	ldr	r1, [pc, #144]	; (80067e4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8006754:	400a      	ands	r2, r1
 8006756:	601a      	str	r2, [r3, #0]
 8006758:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800675a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800675c:	69bb      	ldr	r3, [r7, #24]
 800675e:	f383 8810 	msr	PRIMASK, r3
}
 8006762:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006764:	f3ef 8310 	mrs	r3, PRIMASK
 8006768:	61fb      	str	r3, [r7, #28]
  return(result);
 800676a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800676c:	64bb      	str	r3, [r7, #72]	; 0x48
 800676e:	2301      	movs	r3, #1
 8006770:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006772:	6a3b      	ldr	r3, [r7, #32]
 8006774:	f383 8810 	msr	PRIMASK, r3
}
 8006778:	46c0      	nop			; (mov r8, r8)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	689a      	ldr	r2, [r3, #8]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	2101      	movs	r1, #1
 8006786:	438a      	bics	r2, r1
 8006788:	609a      	str	r2, [r3, #8]
 800678a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800678c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800678e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006790:	f383 8810 	msr	PRIMASK, r3
}
 8006794:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2288      	movs	r2, #136	; 0x88
 800679a:	2120      	movs	r1, #32
 800679c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	228c      	movs	r2, #140	; 0x8c
 80067a2:	2120      	movs	r1, #32
 80067a4:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2290      	movs	r2, #144	; 0x90
 80067aa:	2120      	movs	r1, #32
 80067ac:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2284      	movs	r2, #132	; 0x84
 80067b2:	2100      	movs	r1, #0
 80067b4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80067b6:	2303      	movs	r3, #3
 80067b8:	e010      	b.n	80067dc <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	69db      	ldr	r3, [r3, #28]
 80067c0:	68ba      	ldr	r2, [r7, #8]
 80067c2:	4013      	ands	r3, r2
 80067c4:	68ba      	ldr	r2, [r7, #8]
 80067c6:	1ad3      	subs	r3, r2, r3
 80067c8:	425a      	negs	r2, r3
 80067ca:	4153      	adcs	r3, r2
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	001a      	movs	r2, r3
 80067d0:	1dfb      	adds	r3, r7, #7
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d100      	bne.n	80067da <UART_WaitOnFlagUntilTimeout+0x182>
 80067d8:	e747      	b.n	800666a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80067da:	2300      	movs	r3, #0
}
 80067dc:	0018      	movs	r0, r3
 80067de:	46bd      	mov	sp, r7
 80067e0:	b014      	add	sp, #80	; 0x50
 80067e2:	bd80      	pop	{r7, pc}
 80067e4:	fffffe5f 	.word	0xfffffe5f

080067e8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b090      	sub	sp, #64	; 0x40
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	60f8      	str	r0, [r7, #12]
 80067f0:	60b9      	str	r1, [r7, #8]
 80067f2:	1dbb      	adds	r3, r7, #6
 80067f4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	68ba      	ldr	r2, [r7, #8]
 80067fa:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	1dba      	adds	r2, r7, #6
 8006800:	215c      	movs	r1, #92	; 0x5c
 8006802:	8812      	ldrh	r2, [r2, #0]
 8006804:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2290      	movs	r2, #144	; 0x90
 800680a:	2100      	movs	r1, #0
 800680c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	228c      	movs	r2, #140	; 0x8c
 8006812:	2122      	movs	r1, #34	; 0x22
 8006814:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2280      	movs	r2, #128	; 0x80
 800681a:	589b      	ldr	r3, [r3, r2]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d02d      	beq.n	800687c <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2280      	movs	r2, #128	; 0x80
 8006824:	589b      	ldr	r3, [r3, r2]
 8006826:	4a40      	ldr	r2, [pc, #256]	; (8006928 <UART_Start_Receive_DMA+0x140>)
 8006828:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2280      	movs	r2, #128	; 0x80
 800682e:	589b      	ldr	r3, [r3, r2]
 8006830:	4a3e      	ldr	r2, [pc, #248]	; (800692c <UART_Start_Receive_DMA+0x144>)
 8006832:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2280      	movs	r2, #128	; 0x80
 8006838:	589b      	ldr	r3, [r3, r2]
 800683a:	4a3d      	ldr	r2, [pc, #244]	; (8006930 <UART_Start_Receive_DMA+0x148>)
 800683c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2280      	movs	r2, #128	; 0x80
 8006842:	589b      	ldr	r3, [r3, r2]
 8006844:	2200      	movs	r2, #0
 8006846:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2280      	movs	r2, #128	; 0x80
 800684c:	5898      	ldr	r0, [r3, r2]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	3324      	adds	r3, #36	; 0x24
 8006854:	0019      	movs	r1, r3
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800685a:	001a      	movs	r2, r3
 800685c:	1dbb      	adds	r3, r7, #6
 800685e:	881b      	ldrh	r3, [r3, #0]
 8006860:	f7fc ff98 	bl	8003794 <HAL_DMA_Start_IT>
 8006864:	1e03      	subs	r3, r0, #0
 8006866:	d009      	beq.n	800687c <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2290      	movs	r2, #144	; 0x90
 800686c:	2110      	movs	r1, #16
 800686e:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	228c      	movs	r2, #140	; 0x8c
 8006874:	2120      	movs	r1, #32
 8006876:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8006878:	2301      	movs	r3, #1
 800687a:	e050      	b.n	800691e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	691b      	ldr	r3, [r3, #16]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d019      	beq.n	80068b8 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006884:	f3ef 8310 	mrs	r3, PRIMASK
 8006888:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800688a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800688c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800688e:	2301      	movs	r3, #1
 8006890:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006894:	f383 8810 	msr	PRIMASK, r3
}
 8006898:	46c0      	nop			; (mov r8, r8)
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	2180      	movs	r1, #128	; 0x80
 80068a6:	0049      	lsls	r1, r1, #1
 80068a8:	430a      	orrs	r2, r1
 80068aa:	601a      	str	r2, [r3, #0]
 80068ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068ae:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b2:	f383 8810 	msr	PRIMASK, r3
}
 80068b6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068b8:	f3ef 8310 	mrs	r3, PRIMASK
 80068bc:	613b      	str	r3, [r7, #16]
  return(result);
 80068be:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80068c2:	2301      	movs	r3, #1
 80068c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	f383 8810 	msr	PRIMASK, r3
}
 80068cc:	46c0      	nop			; (mov r8, r8)
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	689a      	ldr	r2, [r3, #8]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	2101      	movs	r1, #1
 80068da:	430a      	orrs	r2, r1
 80068dc:	609a      	str	r2, [r3, #8]
 80068de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068e0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068e2:	69bb      	ldr	r3, [r7, #24]
 80068e4:	f383 8810 	msr	PRIMASK, r3
}
 80068e8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068ea:	f3ef 8310 	mrs	r3, PRIMASK
 80068ee:	61fb      	str	r3, [r7, #28]
  return(result);
 80068f0:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068f2:	637b      	str	r3, [r7, #52]	; 0x34
 80068f4:	2301      	movs	r3, #1
 80068f6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068f8:	6a3b      	ldr	r3, [r7, #32]
 80068fa:	f383 8810 	msr	PRIMASK, r3
}
 80068fe:	46c0      	nop			; (mov r8, r8)
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	689a      	ldr	r2, [r3, #8]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	2140      	movs	r1, #64	; 0x40
 800690c:	430a      	orrs	r2, r1
 800690e:	609a      	str	r2, [r3, #8]
 8006910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006912:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006916:	f383 8810 	msr	PRIMASK, r3
}
 800691a:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 800691c:	2300      	movs	r3, #0
}
 800691e:	0018      	movs	r0, r3
 8006920:	46bd      	mov	sp, r7
 8006922:	b010      	add	sp, #64	; 0x40
 8006924:	bd80      	pop	{r7, pc}
 8006926:	46c0      	nop			; (mov r8, r8)
 8006928:	08006a81 	.word	0x08006a81
 800692c:	08006bb1 	.word	0x08006bb1
 8006930:	08006bf3 	.word	0x08006bf3

08006934 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b08a      	sub	sp, #40	; 0x28
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800693c:	f3ef 8310 	mrs	r3, PRIMASK
 8006940:	60bb      	str	r3, [r7, #8]
  return(result);
 8006942:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006944:	627b      	str	r3, [r7, #36]	; 0x24
 8006946:	2301      	movs	r3, #1
 8006948:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f383 8810 	msr	PRIMASK, r3
}
 8006950:	46c0      	nop			; (mov r8, r8)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	21c0      	movs	r1, #192	; 0xc0
 800695e:	438a      	bics	r2, r1
 8006960:	601a      	str	r2, [r3, #0]
 8006962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006964:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	f383 8810 	msr	PRIMASK, r3
}
 800696c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800696e:	f3ef 8310 	mrs	r3, PRIMASK
 8006972:	617b      	str	r3, [r7, #20]
  return(result);
 8006974:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006976:	623b      	str	r3, [r7, #32]
 8006978:	2301      	movs	r3, #1
 800697a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800697c:	69bb      	ldr	r3, [r7, #24]
 800697e:	f383 8810 	msr	PRIMASK, r3
}
 8006982:	46c0      	nop			; (mov r8, r8)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	689a      	ldr	r2, [r3, #8]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4908      	ldr	r1, [pc, #32]	; (80069b0 <UART_EndTxTransfer+0x7c>)
 8006990:	400a      	ands	r2, r1
 8006992:	609a      	str	r2, [r3, #8]
 8006994:	6a3b      	ldr	r3, [r7, #32]
 8006996:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006998:	69fb      	ldr	r3, [r7, #28]
 800699a:	f383 8810 	msr	PRIMASK, r3
}
 800699e:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2288      	movs	r2, #136	; 0x88
 80069a4:	2120      	movs	r1, #32
 80069a6:	5099      	str	r1, [r3, r2]
}
 80069a8:	46c0      	nop			; (mov r8, r8)
 80069aa:	46bd      	mov	sp, r7
 80069ac:	b00a      	add	sp, #40	; 0x28
 80069ae:	bd80      	pop	{r7, pc}
 80069b0:	ff7fffff 	.word	0xff7fffff

080069b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b08e      	sub	sp, #56	; 0x38
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069bc:	f3ef 8310 	mrs	r3, PRIMASK
 80069c0:	617b      	str	r3, [r7, #20]
  return(result);
 80069c2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80069c4:	637b      	str	r3, [r7, #52]	; 0x34
 80069c6:	2301      	movs	r3, #1
 80069c8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069ca:	69bb      	ldr	r3, [r7, #24]
 80069cc:	f383 8810 	msr	PRIMASK, r3
}
 80069d0:	46c0      	nop			; (mov r8, r8)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	681a      	ldr	r2, [r3, #0]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4926      	ldr	r1, [pc, #152]	; (8006a78 <UART_EndRxTransfer+0xc4>)
 80069de:	400a      	ands	r2, r1
 80069e0:	601a      	str	r2, [r3, #0]
 80069e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069e6:	69fb      	ldr	r3, [r7, #28]
 80069e8:	f383 8810 	msr	PRIMASK, r3
}
 80069ec:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069ee:	f3ef 8310 	mrs	r3, PRIMASK
 80069f2:	623b      	str	r3, [r7, #32]
  return(result);
 80069f4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80069f6:	633b      	str	r3, [r7, #48]	; 0x30
 80069f8:	2301      	movs	r3, #1
 80069fa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fe:	f383 8810 	msr	PRIMASK, r3
}
 8006a02:	46c0      	nop			; (mov r8, r8)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	689a      	ldr	r2, [r3, #8]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	491b      	ldr	r1, [pc, #108]	; (8006a7c <UART_EndRxTransfer+0xc8>)
 8006a10:	400a      	ands	r2, r1
 8006a12:	609a      	str	r2, [r3, #8]
 8006a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a16:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a1a:	f383 8810 	msr	PRIMASK, r3
}
 8006a1e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d118      	bne.n	8006a5a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a28:	f3ef 8310 	mrs	r3, PRIMASK
 8006a2c:	60bb      	str	r3, [r7, #8]
  return(result);
 8006a2e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a32:	2301      	movs	r3, #1
 8006a34:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	f383 8810 	msr	PRIMASK, r3
}
 8006a3c:	46c0      	nop			; (mov r8, r8)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	2110      	movs	r1, #16
 8006a4a:	438a      	bics	r2, r1
 8006a4c:	601a      	str	r2, [r3, #0]
 8006a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a50:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	f383 8810 	msr	PRIMASK, r3
}
 8006a58:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	228c      	movs	r2, #140	; 0x8c
 8006a5e:	2120      	movs	r1, #32
 8006a60:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2200      	movs	r2, #0
 8006a66:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006a6e:	46c0      	nop			; (mov r8, r8)
 8006a70:	46bd      	mov	sp, r7
 8006a72:	b00e      	add	sp, #56	; 0x38
 8006a74:	bd80      	pop	{r7, pc}
 8006a76:	46c0      	nop			; (mov r8, r8)
 8006a78:	fffffedf 	.word	0xfffffedf
 8006a7c:	effffffe 	.word	0xeffffffe

08006a80 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b094      	sub	sp, #80	; 0x50
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a8c:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	2220      	movs	r2, #32
 8006a96:	4013      	ands	r3, r2
 8006a98:	d16f      	bne.n	8006b7a <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8006a9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a9c:	225e      	movs	r2, #94	; 0x5e
 8006a9e:	2100      	movs	r1, #0
 8006aa0:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006aa2:	f3ef 8310 	mrs	r3, PRIMASK
 8006aa6:	61bb      	str	r3, [r7, #24]
  return(result);
 8006aa8:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006aaa:	64bb      	str	r3, [r7, #72]	; 0x48
 8006aac:	2301      	movs	r3, #1
 8006aae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ab0:	69fb      	ldr	r3, [r7, #28]
 8006ab2:	f383 8810 	msr	PRIMASK, r3
}
 8006ab6:	46c0      	nop			; (mov r8, r8)
 8006ab8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	681a      	ldr	r2, [r3, #0]
 8006abe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	493a      	ldr	r1, [pc, #232]	; (8006bac <UART_DMAReceiveCplt+0x12c>)
 8006ac4:	400a      	ands	r2, r1
 8006ac6:	601a      	str	r2, [r3, #0]
 8006ac8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006aca:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006acc:	6a3b      	ldr	r3, [r7, #32]
 8006ace:	f383 8810 	msr	PRIMASK, r3
}
 8006ad2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ad4:	f3ef 8310 	mrs	r3, PRIMASK
 8006ad8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006adc:	647b      	str	r3, [r7, #68]	; 0x44
 8006ade:	2301      	movs	r3, #1
 8006ae0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae4:	f383 8810 	msr	PRIMASK, r3
}
 8006ae8:	46c0      	nop			; (mov r8, r8)
 8006aea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	689a      	ldr	r2, [r3, #8]
 8006af0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	2101      	movs	r1, #1
 8006af6:	438a      	bics	r2, r1
 8006af8:	609a      	str	r2, [r3, #8]
 8006afa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006afc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b00:	f383 8810 	msr	PRIMASK, r3
}
 8006b04:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b06:	f3ef 8310 	mrs	r3, PRIMASK
 8006b0a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8006b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b0e:	643b      	str	r3, [r7, #64]	; 0x40
 8006b10:	2301      	movs	r3, #1
 8006b12:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b16:	f383 8810 	msr	PRIMASK, r3
}
 8006b1a:	46c0      	nop			; (mov r8, r8)
 8006b1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	689a      	ldr	r2, [r3, #8]
 8006b22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	2140      	movs	r1, #64	; 0x40
 8006b28:	438a      	bics	r2, r1
 8006b2a:	609a      	str	r2, [r3, #8]
 8006b2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b2e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b32:	f383 8810 	msr	PRIMASK, r3
}
 8006b36:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006b38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b3a:	228c      	movs	r2, #140	; 0x8c
 8006b3c:	2120      	movs	r1, #32
 8006b3e:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d118      	bne.n	8006b7a <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b48:	f3ef 8310 	mrs	r3, PRIMASK
 8006b4c:	60fb      	str	r3, [r7, #12]
  return(result);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b52:	2301      	movs	r3, #1
 8006b54:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	f383 8810 	msr	PRIMASK, r3
}
 8006b5c:	46c0      	nop			; (mov r8, r8)
 8006b5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	681a      	ldr	r2, [r3, #0]
 8006b64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	2110      	movs	r1, #16
 8006b6a:	438a      	bics	r2, r1
 8006b6c:	601a      	str	r2, [r3, #0]
 8006b6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b70:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	f383 8810 	msr	PRIMASK, r3
}
 8006b78:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d108      	bne.n	8006b9a <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b8a:	225c      	movs	r2, #92	; 0x5c
 8006b8c:	5a9a      	ldrh	r2, [r3, r2]
 8006b8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b90:	0011      	movs	r1, r2
 8006b92:	0018      	movs	r0, r3
 8006b94:	f7fc f944 	bl	8002e20 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006b98:	e003      	b.n	8006ba2 <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8006b9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b9c:	0018      	movs	r0, r3
 8006b9e:	f7ff f9c9 	bl	8005f34 <HAL_UART_RxCpltCallback>
}
 8006ba2:	46c0      	nop			; (mov r8, r8)
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	b014      	add	sp, #80	; 0x50
 8006ba8:	bd80      	pop	{r7, pc}
 8006baa:	46c0      	nop			; (mov r8, r8)
 8006bac:	fffffeff 	.word	0xfffffeff

08006bb0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b084      	sub	sp, #16
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bbc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d10a      	bne.n	8006be2 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	225c      	movs	r2, #92	; 0x5c
 8006bd0:	5a9b      	ldrh	r3, [r3, r2]
 8006bd2:	085b      	lsrs	r3, r3, #1
 8006bd4:	b29a      	uxth	r2, r3
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	0011      	movs	r1, r2
 8006bda:	0018      	movs	r0, r3
 8006bdc:	f7fc f920 	bl	8002e20 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006be0:	e003      	b.n	8006bea <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	0018      	movs	r0, r3
 8006be6:	f7ff f9ad 	bl	8005f44 <HAL_UART_RxHalfCpltCallback>
}
 8006bea:	46c0      	nop			; (mov r8, r8)
 8006bec:	46bd      	mov	sp, r7
 8006bee:	b004      	add	sp, #16
 8006bf0:	bd80      	pop	{r7, pc}

08006bf2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006bf2:	b580      	push	{r7, lr}
 8006bf4:	b086      	sub	sp, #24
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bfe:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	2288      	movs	r2, #136	; 0x88
 8006c04:	589b      	ldr	r3, [r3, r2]
 8006c06:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	228c      	movs	r2, #140	; 0x8c
 8006c0c:	589b      	ldr	r3, [r3, r2]
 8006c0e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	2280      	movs	r2, #128	; 0x80
 8006c18:	4013      	ands	r3, r2
 8006c1a:	2b80      	cmp	r3, #128	; 0x80
 8006c1c:	d10a      	bne.n	8006c34 <UART_DMAError+0x42>
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	2b21      	cmp	r3, #33	; 0x21
 8006c22:	d107      	bne.n	8006c34 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	2256      	movs	r2, #86	; 0x56
 8006c28:	2100      	movs	r1, #0
 8006c2a:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	0018      	movs	r0, r3
 8006c30:	f7ff fe80 	bl	8006934 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	2240      	movs	r2, #64	; 0x40
 8006c3c:	4013      	ands	r3, r2
 8006c3e:	2b40      	cmp	r3, #64	; 0x40
 8006c40:	d10a      	bne.n	8006c58 <UART_DMAError+0x66>
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2b22      	cmp	r3, #34	; 0x22
 8006c46:	d107      	bne.n	8006c58 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	225e      	movs	r2, #94	; 0x5e
 8006c4c:	2100      	movs	r1, #0
 8006c4e:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	0018      	movs	r0, r3
 8006c54:	f7ff feae 	bl	80069b4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	2290      	movs	r2, #144	; 0x90
 8006c5c:	589b      	ldr	r3, [r3, r2]
 8006c5e:	2210      	movs	r2, #16
 8006c60:	431a      	orrs	r2, r3
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	2190      	movs	r1, #144	; 0x90
 8006c66:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	0018      	movs	r0, r3
 8006c6c:	f7ff f972 	bl	8005f54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c70:	46c0      	nop			; (mov r8, r8)
 8006c72:	46bd      	mov	sp, r7
 8006c74:	b006      	add	sp, #24
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b084      	sub	sp, #16
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c84:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	225e      	movs	r2, #94	; 0x5e
 8006c8a:	2100      	movs	r1, #0
 8006c8c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2256      	movs	r2, #86	; 0x56
 8006c92:	2100      	movs	r1, #0
 8006c94:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	0018      	movs	r0, r3
 8006c9a:	f7ff f95b 	bl	8005f54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c9e:	46c0      	nop			; (mov r8, r8)
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	b004      	add	sp, #16
 8006ca4:	bd80      	pop	{r7, pc}

08006ca6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006ca6:	b580      	push	{r7, lr}
 8006ca8:	b086      	sub	sp, #24
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006cae:	f3ef 8310 	mrs	r3, PRIMASK
 8006cb2:	60bb      	str	r3, [r7, #8]
  return(result);
 8006cb4:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006cb6:	617b      	str	r3, [r7, #20]
 8006cb8:	2301      	movs	r3, #1
 8006cba:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f383 8810 	msr	PRIMASK, r3
}
 8006cc2:	46c0      	nop			; (mov r8, r8)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	2140      	movs	r1, #64	; 0x40
 8006cd0:	438a      	bics	r2, r1
 8006cd2:	601a      	str	r2, [r3, #0]
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	f383 8810 	msr	PRIMASK, r3
}
 8006cde:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2288      	movs	r2, #136	; 0x88
 8006ce4:	2120      	movs	r1, #32
 8006ce6:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	0018      	movs	r0, r3
 8006cf2:	f7ff f917 	bl	8005f24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006cf6:	46c0      	nop			; (mov r8, r8)
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	b006      	add	sp, #24
 8006cfc:	bd80      	pop	{r7, pc}

08006cfe <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006cfe:	b580      	push	{r7, lr}
 8006d00:	b082      	sub	sp, #8
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006d06:	46c0      	nop			; (mov r8, r8)
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	b002      	add	sp, #8
 8006d0c:	bd80      	pop	{r7, pc}

08006d0e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006d0e:	b580      	push	{r7, lr}
 8006d10:	b082      	sub	sp, #8
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006d16:	46c0      	nop			; (mov r8, r8)
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	b002      	add	sp, #8
 8006d1c:	bd80      	pop	{r7, pc}

08006d1e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006d1e:	b580      	push	{r7, lr}
 8006d20:	b082      	sub	sp, #8
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006d26:	46c0      	nop			; (mov r8, r8)
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	b002      	add	sp, #8
 8006d2c:	bd80      	pop	{r7, pc}
	...

08006d30 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2284      	movs	r2, #132	; 0x84
 8006d3c:	5c9b      	ldrb	r3, [r3, r2]
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d101      	bne.n	8006d46 <HAL_UARTEx_DisableFifoMode+0x16>
 8006d42:	2302      	movs	r3, #2
 8006d44:	e027      	b.n	8006d96 <HAL_UARTEx_DisableFifoMode+0x66>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2284      	movs	r2, #132	; 0x84
 8006d4a:	2101      	movs	r1, #1
 8006d4c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2288      	movs	r2, #136	; 0x88
 8006d52:	2124      	movs	r1, #36	; 0x24
 8006d54:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	2101      	movs	r1, #1
 8006d6a:	438a      	bics	r2, r1
 8006d6c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	4a0b      	ldr	r2, [pc, #44]	; (8006da0 <HAL_UARTEx_DisableFifoMode+0x70>)
 8006d72:	4013      	ands	r3, r2
 8006d74:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	68fa      	ldr	r2, [r7, #12]
 8006d82:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2288      	movs	r2, #136	; 0x88
 8006d88:	2120      	movs	r1, #32
 8006d8a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2284      	movs	r2, #132	; 0x84
 8006d90:	2100      	movs	r1, #0
 8006d92:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006d94:	2300      	movs	r3, #0
}
 8006d96:	0018      	movs	r0, r3
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	b004      	add	sp, #16
 8006d9c:	bd80      	pop	{r7, pc}
 8006d9e:	46c0      	nop			; (mov r8, r8)
 8006da0:	dfffffff 	.word	0xdfffffff

08006da4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b084      	sub	sp, #16
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2284      	movs	r2, #132	; 0x84
 8006db2:	5c9b      	ldrb	r3, [r3, r2]
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d101      	bne.n	8006dbc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006db8:	2302      	movs	r3, #2
 8006dba:	e02e      	b.n	8006e1a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2284      	movs	r2, #132	; 0x84
 8006dc0:	2101      	movs	r1, #1
 8006dc2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2288      	movs	r2, #136	; 0x88
 8006dc8:	2124      	movs	r1, #36	; 0x24
 8006dca:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	681a      	ldr	r2, [r3, #0]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	2101      	movs	r1, #1
 8006de0:	438a      	bics	r2, r1
 8006de2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	00db      	lsls	r3, r3, #3
 8006dec:	08d9      	lsrs	r1, r3, #3
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	683a      	ldr	r2, [r7, #0]
 8006df4:	430a      	orrs	r2, r1
 8006df6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	0018      	movs	r0, r3
 8006dfc:	f000 f8bc 	bl	8006f78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	68fa      	ldr	r2, [r7, #12]
 8006e06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2288      	movs	r2, #136	; 0x88
 8006e0c:	2120      	movs	r1, #32
 8006e0e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2284      	movs	r2, #132	; 0x84
 8006e14:	2100      	movs	r1, #0
 8006e16:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006e18:	2300      	movs	r3, #0
}
 8006e1a:	0018      	movs	r0, r3
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	b004      	add	sp, #16
 8006e20:	bd80      	pop	{r7, pc}
	...

08006e24 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b084      	sub	sp, #16
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2284      	movs	r2, #132	; 0x84
 8006e32:	5c9b      	ldrb	r3, [r3, r2]
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d101      	bne.n	8006e3c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006e38:	2302      	movs	r3, #2
 8006e3a:	e02f      	b.n	8006e9c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2284      	movs	r2, #132	; 0x84
 8006e40:	2101      	movs	r1, #1
 8006e42:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2288      	movs	r2, #136	; 0x88
 8006e48:	2124      	movs	r1, #36	; 0x24
 8006e4a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	2101      	movs	r1, #1
 8006e60:	438a      	bics	r2, r1
 8006e62:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	4a0e      	ldr	r2, [pc, #56]	; (8006ea4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8006e6c:	4013      	ands	r3, r2
 8006e6e:	0019      	movs	r1, r3
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	683a      	ldr	r2, [r7, #0]
 8006e76:	430a      	orrs	r2, r1
 8006e78:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	0018      	movs	r0, r3
 8006e7e:	f000 f87b 	bl	8006f78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	68fa      	ldr	r2, [r7, #12]
 8006e88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2288      	movs	r2, #136	; 0x88
 8006e8e:	2120      	movs	r1, #32
 8006e90:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2284      	movs	r2, #132	; 0x84
 8006e96:	2100      	movs	r1, #0
 8006e98:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006e9a:	2300      	movs	r3, #0
}
 8006e9c:	0018      	movs	r0, r3
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	b004      	add	sp, #16
 8006ea2:	bd80      	pop	{r7, pc}
 8006ea4:	f1ffffff 	.word	0xf1ffffff

08006ea8 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ea8:	b5b0      	push	{r4, r5, r7, lr}
 8006eaa:	b08a      	sub	sp, #40	; 0x28
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	1dbb      	adds	r3, r7, #6
 8006eb4:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	228c      	movs	r2, #140	; 0x8c
 8006eba:	589b      	ldr	r3, [r3, r2]
 8006ebc:	2b20      	cmp	r3, #32
 8006ebe:	d156      	bne.n	8006f6e <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d003      	beq.n	8006ece <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8006ec6:	1dbb      	adds	r3, r7, #6
 8006ec8:	881b      	ldrh	r3, [r3, #0]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d101      	bne.n	8006ed2 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	e04e      	b.n	8006f70 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	689a      	ldr	r2, [r3, #8]
 8006ed6:	2380      	movs	r3, #128	; 0x80
 8006ed8:	015b      	lsls	r3, r3, #5
 8006eda:	429a      	cmp	r2, r3
 8006edc:	d109      	bne.n	8006ef2 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	691b      	ldr	r3, [r3, #16]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d105      	bne.n	8006ef2 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	2201      	movs	r2, #1
 8006eea:	4013      	ands	r3, r2
 8006eec:	d001      	beq.n	8006ef2 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	e03e      	b.n	8006f70 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2200      	movs	r2, #0
 8006efc:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8006efe:	2527      	movs	r5, #39	; 0x27
 8006f00:	197c      	adds	r4, r7, r5
 8006f02:	1dbb      	adds	r3, r7, #6
 8006f04:	881a      	ldrh	r2, [r3, #0]
 8006f06:	68b9      	ldr	r1, [r7, #8]
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	0018      	movs	r0, r3
 8006f0c:	f7ff fc6c 	bl	80067e8 <UART_Start_Receive_DMA>
 8006f10:	0003      	movs	r3, r0
 8006f12:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8006f14:	197b      	adds	r3, r7, r5
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d124      	bne.n	8006f66 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d11c      	bne.n	8006f5e <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	2210      	movs	r2, #16
 8006f2a:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f2c:	f3ef 8310 	mrs	r3, PRIMASK
 8006f30:	617b      	str	r3, [r7, #20]
  return(result);
 8006f32:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f34:	623b      	str	r3, [r7, #32]
 8006f36:	2301      	movs	r3, #1
 8006f38:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f3a:	69bb      	ldr	r3, [r7, #24]
 8006f3c:	f383 8810 	msr	PRIMASK, r3
}
 8006f40:	46c0      	nop			; (mov r8, r8)
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	681a      	ldr	r2, [r3, #0]
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	2110      	movs	r1, #16
 8006f4e:	430a      	orrs	r2, r1
 8006f50:	601a      	str	r2, [r3, #0]
 8006f52:	6a3b      	ldr	r3, [r7, #32]
 8006f54:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f56:	69fb      	ldr	r3, [r7, #28]
 8006f58:	f383 8810 	msr	PRIMASK, r3
}
 8006f5c:	e003      	b.n	8006f66 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8006f5e:	2327      	movs	r3, #39	; 0x27
 8006f60:	18fb      	adds	r3, r7, r3
 8006f62:	2201      	movs	r2, #1
 8006f64:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 8006f66:	2327      	movs	r3, #39	; 0x27
 8006f68:	18fb      	adds	r3, r7, r3
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	e000      	b.n	8006f70 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 8006f6e:	2302      	movs	r3, #2
  }
}
 8006f70:	0018      	movs	r0, r3
 8006f72:	46bd      	mov	sp, r7
 8006f74:	b00a      	add	sp, #40	; 0x28
 8006f76:	bdb0      	pop	{r4, r5, r7, pc}

08006f78 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006f78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f7a:	b085      	sub	sp, #20
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d108      	bne.n	8006f9a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	226a      	movs	r2, #106	; 0x6a
 8006f8c:	2101      	movs	r1, #1
 8006f8e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2268      	movs	r2, #104	; 0x68
 8006f94:	2101      	movs	r1, #1
 8006f96:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006f98:	e043      	b.n	8007022 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006f9a:	260f      	movs	r6, #15
 8006f9c:	19bb      	adds	r3, r7, r6
 8006f9e:	2208      	movs	r2, #8
 8006fa0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006fa2:	200e      	movs	r0, #14
 8006fa4:	183b      	adds	r3, r7, r0
 8006fa6:	2208      	movs	r2, #8
 8006fa8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	0e5b      	lsrs	r3, r3, #25
 8006fb2:	b2da      	uxtb	r2, r3
 8006fb4:	240d      	movs	r4, #13
 8006fb6:	193b      	adds	r3, r7, r4
 8006fb8:	2107      	movs	r1, #7
 8006fba:	400a      	ands	r2, r1
 8006fbc:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	0f5b      	lsrs	r3, r3, #29
 8006fc6:	b2da      	uxtb	r2, r3
 8006fc8:	250c      	movs	r5, #12
 8006fca:	197b      	adds	r3, r7, r5
 8006fcc:	2107      	movs	r1, #7
 8006fce:	400a      	ands	r2, r1
 8006fd0:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006fd2:	183b      	adds	r3, r7, r0
 8006fd4:	781b      	ldrb	r3, [r3, #0]
 8006fd6:	197a      	adds	r2, r7, r5
 8006fd8:	7812      	ldrb	r2, [r2, #0]
 8006fda:	4914      	ldr	r1, [pc, #80]	; (800702c <UARTEx_SetNbDataToProcess+0xb4>)
 8006fdc:	5c8a      	ldrb	r2, [r1, r2]
 8006fde:	435a      	muls	r2, r3
 8006fe0:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8006fe2:	197b      	adds	r3, r7, r5
 8006fe4:	781b      	ldrb	r3, [r3, #0]
 8006fe6:	4a12      	ldr	r2, [pc, #72]	; (8007030 <UARTEx_SetNbDataToProcess+0xb8>)
 8006fe8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006fea:	0019      	movs	r1, r3
 8006fec:	f7f9 f930 	bl	8000250 <__divsi3>
 8006ff0:	0003      	movs	r3, r0
 8006ff2:	b299      	uxth	r1, r3
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	226a      	movs	r2, #106	; 0x6a
 8006ff8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006ffa:	19bb      	adds	r3, r7, r6
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	193a      	adds	r2, r7, r4
 8007000:	7812      	ldrb	r2, [r2, #0]
 8007002:	490a      	ldr	r1, [pc, #40]	; (800702c <UARTEx_SetNbDataToProcess+0xb4>)
 8007004:	5c8a      	ldrb	r2, [r1, r2]
 8007006:	435a      	muls	r2, r3
 8007008:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800700a:	193b      	adds	r3, r7, r4
 800700c:	781b      	ldrb	r3, [r3, #0]
 800700e:	4a08      	ldr	r2, [pc, #32]	; (8007030 <UARTEx_SetNbDataToProcess+0xb8>)
 8007010:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007012:	0019      	movs	r1, r3
 8007014:	f7f9 f91c 	bl	8000250 <__divsi3>
 8007018:	0003      	movs	r3, r0
 800701a:	b299      	uxth	r1, r3
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2268      	movs	r2, #104	; 0x68
 8007020:	5299      	strh	r1, [r3, r2]
}
 8007022:	46c0      	nop			; (mov r8, r8)
 8007024:	46bd      	mov	sp, r7
 8007026:	b005      	add	sp, #20
 8007028:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800702a:	46c0      	nop			; (mov r8, r8)
 800702c:	0800a798 	.word	0x0800a798
 8007030:	0800a7a0 	.word	0x0800a7a0

08007034 <__errno>:
 8007034:	4b01      	ldr	r3, [pc, #4]	; (800703c <__errno+0x8>)
 8007036:	6818      	ldr	r0, [r3, #0]
 8007038:	4770      	bx	lr
 800703a:	46c0      	nop			; (mov r8, r8)
 800703c:	2000007c 	.word	0x2000007c

08007040 <__libc_init_array>:
 8007040:	b570      	push	{r4, r5, r6, lr}
 8007042:	2600      	movs	r6, #0
 8007044:	4d0c      	ldr	r5, [pc, #48]	; (8007078 <__libc_init_array+0x38>)
 8007046:	4c0d      	ldr	r4, [pc, #52]	; (800707c <__libc_init_array+0x3c>)
 8007048:	1b64      	subs	r4, r4, r5
 800704a:	10a4      	asrs	r4, r4, #2
 800704c:	42a6      	cmp	r6, r4
 800704e:	d109      	bne.n	8007064 <__libc_init_array+0x24>
 8007050:	2600      	movs	r6, #0
 8007052:	f003 fa7b 	bl	800a54c <_init>
 8007056:	4d0a      	ldr	r5, [pc, #40]	; (8007080 <__libc_init_array+0x40>)
 8007058:	4c0a      	ldr	r4, [pc, #40]	; (8007084 <__libc_init_array+0x44>)
 800705a:	1b64      	subs	r4, r4, r5
 800705c:	10a4      	asrs	r4, r4, #2
 800705e:	42a6      	cmp	r6, r4
 8007060:	d105      	bne.n	800706e <__libc_init_array+0x2e>
 8007062:	bd70      	pop	{r4, r5, r6, pc}
 8007064:	00b3      	lsls	r3, r6, #2
 8007066:	58eb      	ldr	r3, [r5, r3]
 8007068:	4798      	blx	r3
 800706a:	3601      	adds	r6, #1
 800706c:	e7ee      	b.n	800704c <__libc_init_array+0xc>
 800706e:	00b3      	lsls	r3, r6, #2
 8007070:	58eb      	ldr	r3, [r5, r3]
 8007072:	4798      	blx	r3
 8007074:	3601      	adds	r6, #1
 8007076:	e7f2      	b.n	800705e <__libc_init_array+0x1e>
 8007078:	0800ac38 	.word	0x0800ac38
 800707c:	0800ac38 	.word	0x0800ac38
 8007080:	0800ac38 	.word	0x0800ac38
 8007084:	0800ac3c 	.word	0x0800ac3c

08007088 <memcpy>:
 8007088:	2300      	movs	r3, #0
 800708a:	b510      	push	{r4, lr}
 800708c:	429a      	cmp	r2, r3
 800708e:	d100      	bne.n	8007092 <memcpy+0xa>
 8007090:	bd10      	pop	{r4, pc}
 8007092:	5ccc      	ldrb	r4, [r1, r3]
 8007094:	54c4      	strb	r4, [r0, r3]
 8007096:	3301      	adds	r3, #1
 8007098:	e7f8      	b.n	800708c <memcpy+0x4>

0800709a <memset>:
 800709a:	0003      	movs	r3, r0
 800709c:	1882      	adds	r2, r0, r2
 800709e:	4293      	cmp	r3, r2
 80070a0:	d100      	bne.n	80070a4 <memset+0xa>
 80070a2:	4770      	bx	lr
 80070a4:	7019      	strb	r1, [r3, #0]
 80070a6:	3301      	adds	r3, #1
 80070a8:	e7f9      	b.n	800709e <memset+0x4>
	...

080070ac <siprintf>:
 80070ac:	b40e      	push	{r1, r2, r3}
 80070ae:	b500      	push	{lr}
 80070b0:	490b      	ldr	r1, [pc, #44]	; (80070e0 <siprintf+0x34>)
 80070b2:	b09c      	sub	sp, #112	; 0x70
 80070b4:	ab1d      	add	r3, sp, #116	; 0x74
 80070b6:	9002      	str	r0, [sp, #8]
 80070b8:	9006      	str	r0, [sp, #24]
 80070ba:	9107      	str	r1, [sp, #28]
 80070bc:	9104      	str	r1, [sp, #16]
 80070be:	4809      	ldr	r0, [pc, #36]	; (80070e4 <siprintf+0x38>)
 80070c0:	4909      	ldr	r1, [pc, #36]	; (80070e8 <siprintf+0x3c>)
 80070c2:	cb04      	ldmia	r3!, {r2}
 80070c4:	9105      	str	r1, [sp, #20]
 80070c6:	6800      	ldr	r0, [r0, #0]
 80070c8:	a902      	add	r1, sp, #8
 80070ca:	9301      	str	r3, [sp, #4]
 80070cc:	f002 f9ae 	bl	800942c <_svfiprintf_r>
 80070d0:	2300      	movs	r3, #0
 80070d2:	9a02      	ldr	r2, [sp, #8]
 80070d4:	7013      	strb	r3, [r2, #0]
 80070d6:	b01c      	add	sp, #112	; 0x70
 80070d8:	bc08      	pop	{r3}
 80070da:	b003      	add	sp, #12
 80070dc:	4718      	bx	r3
 80070de:	46c0      	nop			; (mov r8, r8)
 80070e0:	7fffffff 	.word	0x7fffffff
 80070e4:	2000007c 	.word	0x2000007c
 80070e8:	ffff0208 	.word	0xffff0208

080070ec <strncmp>:
 80070ec:	b530      	push	{r4, r5, lr}
 80070ee:	0005      	movs	r5, r0
 80070f0:	1e10      	subs	r0, r2, #0
 80070f2:	d008      	beq.n	8007106 <strncmp+0x1a>
 80070f4:	2400      	movs	r4, #0
 80070f6:	3a01      	subs	r2, #1
 80070f8:	5d2b      	ldrb	r3, [r5, r4]
 80070fa:	5d08      	ldrb	r0, [r1, r4]
 80070fc:	4283      	cmp	r3, r0
 80070fe:	d101      	bne.n	8007104 <strncmp+0x18>
 8007100:	4294      	cmp	r4, r2
 8007102:	d101      	bne.n	8007108 <strncmp+0x1c>
 8007104:	1a18      	subs	r0, r3, r0
 8007106:	bd30      	pop	{r4, r5, pc}
 8007108:	3401      	adds	r4, #1
 800710a:	2b00      	cmp	r3, #0
 800710c:	d1f4      	bne.n	80070f8 <strncmp+0xc>
 800710e:	e7f9      	b.n	8007104 <strncmp+0x18>

08007110 <strstr>:
 8007110:	780a      	ldrb	r2, [r1, #0]
 8007112:	b530      	push	{r4, r5, lr}
 8007114:	2a00      	cmp	r2, #0
 8007116:	d10c      	bne.n	8007132 <strstr+0x22>
 8007118:	bd30      	pop	{r4, r5, pc}
 800711a:	429a      	cmp	r2, r3
 800711c:	d108      	bne.n	8007130 <strstr+0x20>
 800711e:	2301      	movs	r3, #1
 8007120:	5ccc      	ldrb	r4, [r1, r3]
 8007122:	2c00      	cmp	r4, #0
 8007124:	d0f8      	beq.n	8007118 <strstr+0x8>
 8007126:	5cc5      	ldrb	r5, [r0, r3]
 8007128:	42a5      	cmp	r5, r4
 800712a:	d101      	bne.n	8007130 <strstr+0x20>
 800712c:	3301      	adds	r3, #1
 800712e:	e7f7      	b.n	8007120 <strstr+0x10>
 8007130:	3001      	adds	r0, #1
 8007132:	7803      	ldrb	r3, [r0, #0]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d1f0      	bne.n	800711a <strstr+0xa>
 8007138:	0018      	movs	r0, r3
 800713a:	e7ed      	b.n	8007118 <strstr+0x8>

0800713c <sulp>:
 800713c:	b570      	push	{r4, r5, r6, lr}
 800713e:	0016      	movs	r6, r2
 8007140:	000d      	movs	r5, r1
 8007142:	f001 febd 	bl	8008ec0 <__ulp>
 8007146:	2e00      	cmp	r6, #0
 8007148:	d00d      	beq.n	8007166 <sulp+0x2a>
 800714a:	236b      	movs	r3, #107	; 0x6b
 800714c:	006a      	lsls	r2, r5, #1
 800714e:	0d52      	lsrs	r2, r2, #21
 8007150:	1a9b      	subs	r3, r3, r2
 8007152:	2b00      	cmp	r3, #0
 8007154:	dd07      	ble.n	8007166 <sulp+0x2a>
 8007156:	2400      	movs	r4, #0
 8007158:	4a03      	ldr	r2, [pc, #12]	; (8007168 <sulp+0x2c>)
 800715a:	051b      	lsls	r3, r3, #20
 800715c:	189d      	adds	r5, r3, r2
 800715e:	002b      	movs	r3, r5
 8007160:	0022      	movs	r2, r4
 8007162:	f7fa fb39 	bl	80017d8 <__aeabi_dmul>
 8007166:	bd70      	pop	{r4, r5, r6, pc}
 8007168:	3ff00000 	.word	0x3ff00000

0800716c <_strtod_l>:
 800716c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800716e:	001d      	movs	r5, r3
 8007170:	2300      	movs	r3, #0
 8007172:	b0a5      	sub	sp, #148	; 0x94
 8007174:	9320      	str	r3, [sp, #128]	; 0x80
 8007176:	4bac      	ldr	r3, [pc, #688]	; (8007428 <_strtod_l+0x2bc>)
 8007178:	9005      	str	r0, [sp, #20]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	9108      	str	r1, [sp, #32]
 800717e:	0018      	movs	r0, r3
 8007180:	9307      	str	r3, [sp, #28]
 8007182:	921b      	str	r2, [sp, #108]	; 0x6c
 8007184:	f7f8 ffbe 	bl	8000104 <strlen>
 8007188:	2600      	movs	r6, #0
 800718a:	0004      	movs	r4, r0
 800718c:	2700      	movs	r7, #0
 800718e:	9b08      	ldr	r3, [sp, #32]
 8007190:	931f      	str	r3, [sp, #124]	; 0x7c
 8007192:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007194:	7813      	ldrb	r3, [r2, #0]
 8007196:	2b2b      	cmp	r3, #43	; 0x2b
 8007198:	d058      	beq.n	800724c <_strtod_l+0xe0>
 800719a:	d844      	bhi.n	8007226 <_strtod_l+0xba>
 800719c:	2b0d      	cmp	r3, #13
 800719e:	d83d      	bhi.n	800721c <_strtod_l+0xb0>
 80071a0:	2b08      	cmp	r3, #8
 80071a2:	d83d      	bhi.n	8007220 <_strtod_l+0xb4>
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d047      	beq.n	8007238 <_strtod_l+0xcc>
 80071a8:	2300      	movs	r3, #0
 80071aa:	930e      	str	r3, [sp, #56]	; 0x38
 80071ac:	2200      	movs	r2, #0
 80071ae:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80071b0:	920a      	str	r2, [sp, #40]	; 0x28
 80071b2:	9306      	str	r3, [sp, #24]
 80071b4:	781b      	ldrb	r3, [r3, #0]
 80071b6:	2b30      	cmp	r3, #48	; 0x30
 80071b8:	d000      	beq.n	80071bc <_strtod_l+0x50>
 80071ba:	e07f      	b.n	80072bc <_strtod_l+0x150>
 80071bc:	9b06      	ldr	r3, [sp, #24]
 80071be:	3220      	adds	r2, #32
 80071c0:	785b      	ldrb	r3, [r3, #1]
 80071c2:	4393      	bics	r3, r2
 80071c4:	2b58      	cmp	r3, #88	; 0x58
 80071c6:	d000      	beq.n	80071ca <_strtod_l+0x5e>
 80071c8:	e06e      	b.n	80072a8 <_strtod_l+0x13c>
 80071ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80071cc:	9502      	str	r5, [sp, #8]
 80071ce:	9301      	str	r3, [sp, #4]
 80071d0:	ab20      	add	r3, sp, #128	; 0x80
 80071d2:	9300      	str	r3, [sp, #0]
 80071d4:	4a95      	ldr	r2, [pc, #596]	; (800742c <_strtod_l+0x2c0>)
 80071d6:	ab21      	add	r3, sp, #132	; 0x84
 80071d8:	9805      	ldr	r0, [sp, #20]
 80071da:	a91f      	add	r1, sp, #124	; 0x7c
 80071dc:	f000 ffc6 	bl	800816c <__gethex>
 80071e0:	2307      	movs	r3, #7
 80071e2:	0005      	movs	r5, r0
 80071e4:	0004      	movs	r4, r0
 80071e6:	401d      	ands	r5, r3
 80071e8:	4218      	tst	r0, r3
 80071ea:	d006      	beq.n	80071fa <_strtod_l+0x8e>
 80071ec:	2d06      	cmp	r5, #6
 80071ee:	d12f      	bne.n	8007250 <_strtod_l+0xe4>
 80071f0:	9b06      	ldr	r3, [sp, #24]
 80071f2:	3301      	adds	r3, #1
 80071f4:	931f      	str	r3, [sp, #124]	; 0x7c
 80071f6:	2300      	movs	r3, #0
 80071f8:	930e      	str	r3, [sp, #56]	; 0x38
 80071fa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d002      	beq.n	8007206 <_strtod_l+0x9a>
 8007200:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007202:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007204:	601a      	str	r2, [r3, #0]
 8007206:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007208:	2b00      	cmp	r3, #0
 800720a:	d01c      	beq.n	8007246 <_strtod_l+0xda>
 800720c:	2380      	movs	r3, #128	; 0x80
 800720e:	0032      	movs	r2, r6
 8007210:	061b      	lsls	r3, r3, #24
 8007212:	18fb      	adds	r3, r7, r3
 8007214:	0010      	movs	r0, r2
 8007216:	0019      	movs	r1, r3
 8007218:	b025      	add	sp, #148	; 0x94
 800721a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800721c:	2b20      	cmp	r3, #32
 800721e:	d1c3      	bne.n	80071a8 <_strtod_l+0x3c>
 8007220:	3201      	adds	r2, #1
 8007222:	921f      	str	r2, [sp, #124]	; 0x7c
 8007224:	e7b5      	b.n	8007192 <_strtod_l+0x26>
 8007226:	2b2d      	cmp	r3, #45	; 0x2d
 8007228:	d1be      	bne.n	80071a8 <_strtod_l+0x3c>
 800722a:	3b2c      	subs	r3, #44	; 0x2c
 800722c:	930e      	str	r3, [sp, #56]	; 0x38
 800722e:	1c53      	adds	r3, r2, #1
 8007230:	931f      	str	r3, [sp, #124]	; 0x7c
 8007232:	7853      	ldrb	r3, [r2, #1]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d1b9      	bne.n	80071ac <_strtod_l+0x40>
 8007238:	9b08      	ldr	r3, [sp, #32]
 800723a:	931f      	str	r3, [sp, #124]	; 0x7c
 800723c:	2300      	movs	r3, #0
 800723e:	930e      	str	r3, [sp, #56]	; 0x38
 8007240:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007242:	2b00      	cmp	r3, #0
 8007244:	d1dc      	bne.n	8007200 <_strtod_l+0x94>
 8007246:	0032      	movs	r2, r6
 8007248:	003b      	movs	r3, r7
 800724a:	e7e3      	b.n	8007214 <_strtod_l+0xa8>
 800724c:	2300      	movs	r3, #0
 800724e:	e7ed      	b.n	800722c <_strtod_l+0xc0>
 8007250:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007252:	2a00      	cmp	r2, #0
 8007254:	d007      	beq.n	8007266 <_strtod_l+0xfa>
 8007256:	2135      	movs	r1, #53	; 0x35
 8007258:	a822      	add	r0, sp, #136	; 0x88
 800725a:	f001 ff32 	bl	80090c2 <__copybits>
 800725e:	9920      	ldr	r1, [sp, #128]	; 0x80
 8007260:	9805      	ldr	r0, [sp, #20]
 8007262:	f001 faed 	bl	8008840 <_Bfree>
 8007266:	1e68      	subs	r0, r5, #1
 8007268:	2804      	cmp	r0, #4
 800726a:	d806      	bhi.n	800727a <_strtod_l+0x10e>
 800726c:	f7f8 ff52 	bl	8000114 <__gnu_thumb1_case_uqi>
 8007270:	1816030b 	.word	0x1816030b
 8007274:	0b          	.byte	0x0b
 8007275:	00          	.byte	0x00
 8007276:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8007278:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 800727a:	0723      	lsls	r3, r4, #28
 800727c:	d5bd      	bpl.n	80071fa <_strtod_l+0x8e>
 800727e:	2380      	movs	r3, #128	; 0x80
 8007280:	061b      	lsls	r3, r3, #24
 8007282:	431f      	orrs	r7, r3
 8007284:	e7b9      	b.n	80071fa <_strtod_l+0x8e>
 8007286:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007288:	4a69      	ldr	r2, [pc, #420]	; (8007430 <_strtod_l+0x2c4>)
 800728a:	496a      	ldr	r1, [pc, #424]	; (8007434 <_strtod_l+0x2c8>)
 800728c:	401a      	ands	r2, r3
 800728e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007290:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8007292:	185b      	adds	r3, r3, r1
 8007294:	051b      	lsls	r3, r3, #20
 8007296:	431a      	orrs	r2, r3
 8007298:	0017      	movs	r7, r2
 800729a:	e7ee      	b.n	800727a <_strtod_l+0x10e>
 800729c:	4f66      	ldr	r7, [pc, #408]	; (8007438 <_strtod_l+0x2cc>)
 800729e:	e7ec      	b.n	800727a <_strtod_l+0x10e>
 80072a0:	2601      	movs	r6, #1
 80072a2:	4f66      	ldr	r7, [pc, #408]	; (800743c <_strtod_l+0x2d0>)
 80072a4:	4276      	negs	r6, r6
 80072a6:	e7e8      	b.n	800727a <_strtod_l+0x10e>
 80072a8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80072aa:	1c5a      	adds	r2, r3, #1
 80072ac:	921f      	str	r2, [sp, #124]	; 0x7c
 80072ae:	785b      	ldrb	r3, [r3, #1]
 80072b0:	2b30      	cmp	r3, #48	; 0x30
 80072b2:	d0f9      	beq.n	80072a8 <_strtod_l+0x13c>
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d0a0      	beq.n	80071fa <_strtod_l+0x8e>
 80072b8:	2301      	movs	r3, #1
 80072ba:	930a      	str	r3, [sp, #40]	; 0x28
 80072bc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80072be:	220a      	movs	r2, #10
 80072c0:	9310      	str	r3, [sp, #64]	; 0x40
 80072c2:	2300      	movs	r3, #0
 80072c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80072c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80072c8:	9309      	str	r3, [sp, #36]	; 0x24
 80072ca:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80072cc:	7805      	ldrb	r5, [r0, #0]
 80072ce:	002b      	movs	r3, r5
 80072d0:	3b30      	subs	r3, #48	; 0x30
 80072d2:	b2d9      	uxtb	r1, r3
 80072d4:	2909      	cmp	r1, #9
 80072d6:	d927      	bls.n	8007328 <_strtod_l+0x1bc>
 80072d8:	0022      	movs	r2, r4
 80072da:	9907      	ldr	r1, [sp, #28]
 80072dc:	f7ff ff06 	bl	80070ec <strncmp>
 80072e0:	2800      	cmp	r0, #0
 80072e2:	d033      	beq.n	800734c <_strtod_l+0x1e0>
 80072e4:	2000      	movs	r0, #0
 80072e6:	002b      	movs	r3, r5
 80072e8:	4684      	mov	ip, r0
 80072ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072ec:	900c      	str	r0, [sp, #48]	; 0x30
 80072ee:	9206      	str	r2, [sp, #24]
 80072f0:	2220      	movs	r2, #32
 80072f2:	0019      	movs	r1, r3
 80072f4:	4391      	bics	r1, r2
 80072f6:	000a      	movs	r2, r1
 80072f8:	2100      	movs	r1, #0
 80072fa:	9107      	str	r1, [sp, #28]
 80072fc:	2a45      	cmp	r2, #69	; 0x45
 80072fe:	d000      	beq.n	8007302 <_strtod_l+0x196>
 8007300:	e0c5      	b.n	800748e <_strtod_l+0x322>
 8007302:	9b06      	ldr	r3, [sp, #24]
 8007304:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007306:	4303      	orrs	r3, r0
 8007308:	4313      	orrs	r3, r2
 800730a:	428b      	cmp	r3, r1
 800730c:	d094      	beq.n	8007238 <_strtod_l+0xcc>
 800730e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007310:	9308      	str	r3, [sp, #32]
 8007312:	3301      	adds	r3, #1
 8007314:	931f      	str	r3, [sp, #124]	; 0x7c
 8007316:	9b08      	ldr	r3, [sp, #32]
 8007318:	785b      	ldrb	r3, [r3, #1]
 800731a:	2b2b      	cmp	r3, #43	; 0x2b
 800731c:	d076      	beq.n	800740c <_strtod_l+0x2a0>
 800731e:	000c      	movs	r4, r1
 8007320:	2b2d      	cmp	r3, #45	; 0x2d
 8007322:	d179      	bne.n	8007418 <_strtod_l+0x2ac>
 8007324:	2401      	movs	r4, #1
 8007326:	e072      	b.n	800740e <_strtod_l+0x2a2>
 8007328:	9909      	ldr	r1, [sp, #36]	; 0x24
 800732a:	2908      	cmp	r1, #8
 800732c:	dc09      	bgt.n	8007342 <_strtod_l+0x1d6>
 800732e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007330:	4351      	muls	r1, r2
 8007332:	185b      	adds	r3, r3, r1
 8007334:	930b      	str	r3, [sp, #44]	; 0x2c
 8007336:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007338:	3001      	adds	r0, #1
 800733a:	3301      	adds	r3, #1
 800733c:	9309      	str	r3, [sp, #36]	; 0x24
 800733e:	901f      	str	r0, [sp, #124]	; 0x7c
 8007340:	e7c3      	b.n	80072ca <_strtod_l+0x15e>
 8007342:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007344:	4351      	muls	r1, r2
 8007346:	185b      	adds	r3, r3, r1
 8007348:	930f      	str	r3, [sp, #60]	; 0x3c
 800734a:	e7f4      	b.n	8007336 <_strtod_l+0x1ca>
 800734c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800734e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007350:	191c      	adds	r4, r3, r4
 8007352:	941f      	str	r4, [sp, #124]	; 0x7c
 8007354:	7823      	ldrb	r3, [r4, #0]
 8007356:	2a00      	cmp	r2, #0
 8007358:	d039      	beq.n	80073ce <_strtod_l+0x262>
 800735a:	900c      	str	r0, [sp, #48]	; 0x30
 800735c:	9206      	str	r2, [sp, #24]
 800735e:	001a      	movs	r2, r3
 8007360:	3a30      	subs	r2, #48	; 0x30
 8007362:	2a09      	cmp	r2, #9
 8007364:	d912      	bls.n	800738c <_strtod_l+0x220>
 8007366:	2201      	movs	r2, #1
 8007368:	4694      	mov	ip, r2
 800736a:	e7c1      	b.n	80072f0 <_strtod_l+0x184>
 800736c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800736e:	3001      	adds	r0, #1
 8007370:	1c5a      	adds	r2, r3, #1
 8007372:	921f      	str	r2, [sp, #124]	; 0x7c
 8007374:	785b      	ldrb	r3, [r3, #1]
 8007376:	2b30      	cmp	r3, #48	; 0x30
 8007378:	d0f8      	beq.n	800736c <_strtod_l+0x200>
 800737a:	001a      	movs	r2, r3
 800737c:	3a31      	subs	r2, #49	; 0x31
 800737e:	2a08      	cmp	r2, #8
 8007380:	d83f      	bhi.n	8007402 <_strtod_l+0x296>
 8007382:	900c      	str	r0, [sp, #48]	; 0x30
 8007384:	2000      	movs	r0, #0
 8007386:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007388:	9006      	str	r0, [sp, #24]
 800738a:	9210      	str	r2, [sp, #64]	; 0x40
 800738c:	001a      	movs	r2, r3
 800738e:	1c41      	adds	r1, r0, #1
 8007390:	3a30      	subs	r2, #48	; 0x30
 8007392:	2b30      	cmp	r3, #48	; 0x30
 8007394:	d015      	beq.n	80073c2 <_strtod_l+0x256>
 8007396:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007398:	185b      	adds	r3, r3, r1
 800739a:	210a      	movs	r1, #10
 800739c:	930c      	str	r3, [sp, #48]	; 0x30
 800739e:	9b06      	ldr	r3, [sp, #24]
 80073a0:	18c4      	adds	r4, r0, r3
 80073a2:	42a3      	cmp	r3, r4
 80073a4:	d115      	bne.n	80073d2 <_strtod_l+0x266>
 80073a6:	9906      	ldr	r1, [sp, #24]
 80073a8:	9b06      	ldr	r3, [sp, #24]
 80073aa:	3101      	adds	r1, #1
 80073ac:	1809      	adds	r1, r1, r0
 80073ae:	181b      	adds	r3, r3, r0
 80073b0:	9106      	str	r1, [sp, #24]
 80073b2:	2b08      	cmp	r3, #8
 80073b4:	dc1b      	bgt.n	80073ee <_strtod_l+0x282>
 80073b6:	230a      	movs	r3, #10
 80073b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80073ba:	434b      	muls	r3, r1
 80073bc:	2100      	movs	r1, #0
 80073be:	18d3      	adds	r3, r2, r3
 80073c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80073c2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80073c4:	0008      	movs	r0, r1
 80073c6:	1c5a      	adds	r2, r3, #1
 80073c8:	921f      	str	r2, [sp, #124]	; 0x7c
 80073ca:	785b      	ldrb	r3, [r3, #1]
 80073cc:	e7c7      	b.n	800735e <_strtod_l+0x1f2>
 80073ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073d0:	e7d1      	b.n	8007376 <_strtod_l+0x20a>
 80073d2:	2b08      	cmp	r3, #8
 80073d4:	dc04      	bgt.n	80073e0 <_strtod_l+0x274>
 80073d6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80073d8:	434d      	muls	r5, r1
 80073da:	950b      	str	r5, [sp, #44]	; 0x2c
 80073dc:	3301      	adds	r3, #1
 80073de:	e7e0      	b.n	80073a2 <_strtod_l+0x236>
 80073e0:	1c5d      	adds	r5, r3, #1
 80073e2:	2d10      	cmp	r5, #16
 80073e4:	dcfa      	bgt.n	80073dc <_strtod_l+0x270>
 80073e6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80073e8:	434d      	muls	r5, r1
 80073ea:	950f      	str	r5, [sp, #60]	; 0x3c
 80073ec:	e7f6      	b.n	80073dc <_strtod_l+0x270>
 80073ee:	9b06      	ldr	r3, [sp, #24]
 80073f0:	2100      	movs	r1, #0
 80073f2:	2b10      	cmp	r3, #16
 80073f4:	dce5      	bgt.n	80073c2 <_strtod_l+0x256>
 80073f6:	230a      	movs	r3, #10
 80073f8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80073fa:	4343      	muls	r3, r0
 80073fc:	18d3      	adds	r3, r2, r3
 80073fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8007400:	e7df      	b.n	80073c2 <_strtod_l+0x256>
 8007402:	2200      	movs	r2, #0
 8007404:	920c      	str	r2, [sp, #48]	; 0x30
 8007406:	9206      	str	r2, [sp, #24]
 8007408:	3201      	adds	r2, #1
 800740a:	e7ad      	b.n	8007368 <_strtod_l+0x1fc>
 800740c:	2400      	movs	r4, #0
 800740e:	9b08      	ldr	r3, [sp, #32]
 8007410:	3302      	adds	r3, #2
 8007412:	931f      	str	r3, [sp, #124]	; 0x7c
 8007414:	9b08      	ldr	r3, [sp, #32]
 8007416:	789b      	ldrb	r3, [r3, #2]
 8007418:	001a      	movs	r2, r3
 800741a:	3a30      	subs	r2, #48	; 0x30
 800741c:	2a09      	cmp	r2, #9
 800741e:	d913      	bls.n	8007448 <_strtod_l+0x2dc>
 8007420:	9a08      	ldr	r2, [sp, #32]
 8007422:	921f      	str	r2, [sp, #124]	; 0x7c
 8007424:	2200      	movs	r2, #0
 8007426:	e031      	b.n	800748c <_strtod_l+0x320>
 8007428:	0800aa30 	.word	0x0800aa30
 800742c:	0800a7b8 	.word	0x0800a7b8
 8007430:	ffefffff 	.word	0xffefffff
 8007434:	00000433 	.word	0x00000433
 8007438:	7ff00000 	.word	0x7ff00000
 800743c:	7fffffff 	.word	0x7fffffff
 8007440:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007442:	1c5a      	adds	r2, r3, #1
 8007444:	921f      	str	r2, [sp, #124]	; 0x7c
 8007446:	785b      	ldrb	r3, [r3, #1]
 8007448:	2b30      	cmp	r3, #48	; 0x30
 800744a:	d0f9      	beq.n	8007440 <_strtod_l+0x2d4>
 800744c:	2200      	movs	r2, #0
 800744e:	9207      	str	r2, [sp, #28]
 8007450:	001a      	movs	r2, r3
 8007452:	3a31      	subs	r2, #49	; 0x31
 8007454:	2a08      	cmp	r2, #8
 8007456:	d81a      	bhi.n	800748e <_strtod_l+0x322>
 8007458:	3b30      	subs	r3, #48	; 0x30
 800745a:	001a      	movs	r2, r3
 800745c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800745e:	9307      	str	r3, [sp, #28]
 8007460:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007462:	1c59      	adds	r1, r3, #1
 8007464:	911f      	str	r1, [sp, #124]	; 0x7c
 8007466:	785b      	ldrb	r3, [r3, #1]
 8007468:	001d      	movs	r5, r3
 800746a:	3d30      	subs	r5, #48	; 0x30
 800746c:	2d09      	cmp	r5, #9
 800746e:	d939      	bls.n	80074e4 <_strtod_l+0x378>
 8007470:	9d07      	ldr	r5, [sp, #28]
 8007472:	1b49      	subs	r1, r1, r5
 8007474:	4db0      	ldr	r5, [pc, #704]	; (8007738 <_strtod_l+0x5cc>)
 8007476:	9507      	str	r5, [sp, #28]
 8007478:	2908      	cmp	r1, #8
 800747a:	dc03      	bgt.n	8007484 <_strtod_l+0x318>
 800747c:	9207      	str	r2, [sp, #28]
 800747e:	42aa      	cmp	r2, r5
 8007480:	dd00      	ble.n	8007484 <_strtod_l+0x318>
 8007482:	9507      	str	r5, [sp, #28]
 8007484:	2c00      	cmp	r4, #0
 8007486:	d002      	beq.n	800748e <_strtod_l+0x322>
 8007488:	9a07      	ldr	r2, [sp, #28]
 800748a:	4252      	negs	r2, r2
 800748c:	9207      	str	r2, [sp, #28]
 800748e:	9a06      	ldr	r2, [sp, #24]
 8007490:	2a00      	cmp	r2, #0
 8007492:	d14b      	bne.n	800752c <_strtod_l+0x3c0>
 8007494:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007496:	4310      	orrs	r0, r2
 8007498:	d000      	beq.n	800749c <_strtod_l+0x330>
 800749a:	e6ae      	b.n	80071fa <_strtod_l+0x8e>
 800749c:	4662      	mov	r2, ip
 800749e:	2a00      	cmp	r2, #0
 80074a0:	d000      	beq.n	80074a4 <_strtod_l+0x338>
 80074a2:	e6c9      	b.n	8007238 <_strtod_l+0xcc>
 80074a4:	2b69      	cmp	r3, #105	; 0x69
 80074a6:	d025      	beq.n	80074f4 <_strtod_l+0x388>
 80074a8:	dc21      	bgt.n	80074ee <_strtod_l+0x382>
 80074aa:	2b49      	cmp	r3, #73	; 0x49
 80074ac:	d022      	beq.n	80074f4 <_strtod_l+0x388>
 80074ae:	2b4e      	cmp	r3, #78	; 0x4e
 80074b0:	d000      	beq.n	80074b4 <_strtod_l+0x348>
 80074b2:	e6c1      	b.n	8007238 <_strtod_l+0xcc>
 80074b4:	49a1      	ldr	r1, [pc, #644]	; (800773c <_strtod_l+0x5d0>)
 80074b6:	a81f      	add	r0, sp, #124	; 0x7c
 80074b8:	f001 f8a6 	bl	8008608 <__match>
 80074bc:	2800      	cmp	r0, #0
 80074be:	d100      	bne.n	80074c2 <_strtod_l+0x356>
 80074c0:	e6ba      	b.n	8007238 <_strtod_l+0xcc>
 80074c2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	2b28      	cmp	r3, #40	; 0x28
 80074c8:	d12a      	bne.n	8007520 <_strtod_l+0x3b4>
 80074ca:	499d      	ldr	r1, [pc, #628]	; (8007740 <_strtod_l+0x5d4>)
 80074cc:	aa22      	add	r2, sp, #136	; 0x88
 80074ce:	a81f      	add	r0, sp, #124	; 0x7c
 80074d0:	f001 f8ae 	bl	8008630 <__hexnan>
 80074d4:	2805      	cmp	r0, #5
 80074d6:	d123      	bne.n	8007520 <_strtod_l+0x3b4>
 80074d8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80074da:	4a9a      	ldr	r2, [pc, #616]	; (8007744 <_strtod_l+0x5d8>)
 80074dc:	9e22      	ldr	r6, [sp, #136]	; 0x88
 80074de:	431a      	orrs	r2, r3
 80074e0:	0017      	movs	r7, r2
 80074e2:	e68a      	b.n	80071fa <_strtod_l+0x8e>
 80074e4:	210a      	movs	r1, #10
 80074e6:	434a      	muls	r2, r1
 80074e8:	18d2      	adds	r2, r2, r3
 80074ea:	3a30      	subs	r2, #48	; 0x30
 80074ec:	e7b8      	b.n	8007460 <_strtod_l+0x2f4>
 80074ee:	2b6e      	cmp	r3, #110	; 0x6e
 80074f0:	d0e0      	beq.n	80074b4 <_strtod_l+0x348>
 80074f2:	e6a1      	b.n	8007238 <_strtod_l+0xcc>
 80074f4:	4994      	ldr	r1, [pc, #592]	; (8007748 <_strtod_l+0x5dc>)
 80074f6:	a81f      	add	r0, sp, #124	; 0x7c
 80074f8:	f001 f886 	bl	8008608 <__match>
 80074fc:	2800      	cmp	r0, #0
 80074fe:	d100      	bne.n	8007502 <_strtod_l+0x396>
 8007500:	e69a      	b.n	8007238 <_strtod_l+0xcc>
 8007502:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007504:	4991      	ldr	r1, [pc, #580]	; (800774c <_strtod_l+0x5e0>)
 8007506:	3b01      	subs	r3, #1
 8007508:	a81f      	add	r0, sp, #124	; 0x7c
 800750a:	931f      	str	r3, [sp, #124]	; 0x7c
 800750c:	f001 f87c 	bl	8008608 <__match>
 8007510:	2800      	cmp	r0, #0
 8007512:	d102      	bne.n	800751a <_strtod_l+0x3ae>
 8007514:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007516:	3301      	adds	r3, #1
 8007518:	931f      	str	r3, [sp, #124]	; 0x7c
 800751a:	2600      	movs	r6, #0
 800751c:	4f89      	ldr	r7, [pc, #548]	; (8007744 <_strtod_l+0x5d8>)
 800751e:	e66c      	b.n	80071fa <_strtod_l+0x8e>
 8007520:	488b      	ldr	r0, [pc, #556]	; (8007750 <_strtod_l+0x5e4>)
 8007522:	f002 fb67 	bl	8009bf4 <nan>
 8007526:	0006      	movs	r6, r0
 8007528:	000f      	movs	r7, r1
 800752a:	e666      	b.n	80071fa <_strtod_l+0x8e>
 800752c:	9b07      	ldr	r3, [sp, #28]
 800752e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007530:	1a9b      	subs	r3, r3, r2
 8007532:	930a      	str	r3, [sp, #40]	; 0x28
 8007534:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007536:	2b00      	cmp	r3, #0
 8007538:	d101      	bne.n	800753e <_strtod_l+0x3d2>
 800753a:	9b06      	ldr	r3, [sp, #24]
 800753c:	9309      	str	r3, [sp, #36]	; 0x24
 800753e:	9c06      	ldr	r4, [sp, #24]
 8007540:	2c10      	cmp	r4, #16
 8007542:	dd00      	ble.n	8007546 <_strtod_l+0x3da>
 8007544:	2410      	movs	r4, #16
 8007546:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007548:	f7fa ffc8 	bl	80024dc <__aeabi_ui2d>
 800754c:	9b06      	ldr	r3, [sp, #24]
 800754e:	0006      	movs	r6, r0
 8007550:	000f      	movs	r7, r1
 8007552:	2b09      	cmp	r3, #9
 8007554:	dd15      	ble.n	8007582 <_strtod_l+0x416>
 8007556:	0022      	movs	r2, r4
 8007558:	4b7e      	ldr	r3, [pc, #504]	; (8007754 <_strtod_l+0x5e8>)
 800755a:	3a09      	subs	r2, #9
 800755c:	00d2      	lsls	r2, r2, #3
 800755e:	189b      	adds	r3, r3, r2
 8007560:	681a      	ldr	r2, [r3, #0]
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	f7fa f938 	bl	80017d8 <__aeabi_dmul>
 8007568:	0006      	movs	r6, r0
 800756a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800756c:	000f      	movs	r7, r1
 800756e:	f7fa ffb5 	bl	80024dc <__aeabi_ui2d>
 8007572:	0002      	movs	r2, r0
 8007574:	000b      	movs	r3, r1
 8007576:	0030      	movs	r0, r6
 8007578:	0039      	movs	r1, r7
 800757a:	f7f9 f9ef 	bl	800095c <__aeabi_dadd>
 800757e:	0006      	movs	r6, r0
 8007580:	000f      	movs	r7, r1
 8007582:	9b06      	ldr	r3, [sp, #24]
 8007584:	2b0f      	cmp	r3, #15
 8007586:	dc39      	bgt.n	80075fc <_strtod_l+0x490>
 8007588:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800758a:	2b00      	cmp	r3, #0
 800758c:	d100      	bne.n	8007590 <_strtod_l+0x424>
 800758e:	e634      	b.n	80071fa <_strtod_l+0x8e>
 8007590:	dd24      	ble.n	80075dc <_strtod_l+0x470>
 8007592:	2b16      	cmp	r3, #22
 8007594:	dc09      	bgt.n	80075aa <_strtod_l+0x43e>
 8007596:	496f      	ldr	r1, [pc, #444]	; (8007754 <_strtod_l+0x5e8>)
 8007598:	00db      	lsls	r3, r3, #3
 800759a:	18c9      	adds	r1, r1, r3
 800759c:	0032      	movs	r2, r6
 800759e:	6808      	ldr	r0, [r1, #0]
 80075a0:	6849      	ldr	r1, [r1, #4]
 80075a2:	003b      	movs	r3, r7
 80075a4:	f7fa f918 	bl	80017d8 <__aeabi_dmul>
 80075a8:	e7bd      	b.n	8007526 <_strtod_l+0x3ba>
 80075aa:	2325      	movs	r3, #37	; 0x25
 80075ac:	9a06      	ldr	r2, [sp, #24]
 80075ae:	1a9b      	subs	r3, r3, r2
 80075b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075b2:	4293      	cmp	r3, r2
 80075b4:	db22      	blt.n	80075fc <_strtod_l+0x490>
 80075b6:	240f      	movs	r4, #15
 80075b8:	9b06      	ldr	r3, [sp, #24]
 80075ba:	4d66      	ldr	r5, [pc, #408]	; (8007754 <_strtod_l+0x5e8>)
 80075bc:	1ae4      	subs	r4, r4, r3
 80075be:	00e1      	lsls	r1, r4, #3
 80075c0:	1869      	adds	r1, r5, r1
 80075c2:	0032      	movs	r2, r6
 80075c4:	6808      	ldr	r0, [r1, #0]
 80075c6:	6849      	ldr	r1, [r1, #4]
 80075c8:	003b      	movs	r3, r7
 80075ca:	f7fa f905 	bl	80017d8 <__aeabi_dmul>
 80075ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075d0:	1b1c      	subs	r4, r3, r4
 80075d2:	00e4      	lsls	r4, r4, #3
 80075d4:	192c      	adds	r4, r5, r4
 80075d6:	6822      	ldr	r2, [r4, #0]
 80075d8:	6863      	ldr	r3, [r4, #4]
 80075da:	e7e3      	b.n	80075a4 <_strtod_l+0x438>
 80075dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075de:	3316      	adds	r3, #22
 80075e0:	db0c      	blt.n	80075fc <_strtod_l+0x490>
 80075e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80075e4:	9a07      	ldr	r2, [sp, #28]
 80075e6:	0030      	movs	r0, r6
 80075e8:	1a9a      	subs	r2, r3, r2
 80075ea:	4b5a      	ldr	r3, [pc, #360]	; (8007754 <_strtod_l+0x5e8>)
 80075ec:	00d2      	lsls	r2, r2, #3
 80075ee:	189b      	adds	r3, r3, r2
 80075f0:	0039      	movs	r1, r7
 80075f2:	681a      	ldr	r2, [r3, #0]
 80075f4:	685b      	ldr	r3, [r3, #4]
 80075f6:	f7f9 fced 	bl	8000fd4 <__aeabi_ddiv>
 80075fa:	e794      	b.n	8007526 <_strtod_l+0x3ba>
 80075fc:	9b06      	ldr	r3, [sp, #24]
 80075fe:	1b1c      	subs	r4, r3, r4
 8007600:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007602:	18e4      	adds	r4, r4, r3
 8007604:	2c00      	cmp	r4, #0
 8007606:	dd72      	ble.n	80076ee <_strtod_l+0x582>
 8007608:	230f      	movs	r3, #15
 800760a:	0021      	movs	r1, r4
 800760c:	4019      	ands	r1, r3
 800760e:	421c      	tst	r4, r3
 8007610:	d00a      	beq.n	8007628 <_strtod_l+0x4bc>
 8007612:	00cb      	lsls	r3, r1, #3
 8007614:	494f      	ldr	r1, [pc, #316]	; (8007754 <_strtod_l+0x5e8>)
 8007616:	0032      	movs	r2, r6
 8007618:	18c9      	adds	r1, r1, r3
 800761a:	6808      	ldr	r0, [r1, #0]
 800761c:	6849      	ldr	r1, [r1, #4]
 800761e:	003b      	movs	r3, r7
 8007620:	f7fa f8da 	bl	80017d8 <__aeabi_dmul>
 8007624:	0006      	movs	r6, r0
 8007626:	000f      	movs	r7, r1
 8007628:	230f      	movs	r3, #15
 800762a:	439c      	bics	r4, r3
 800762c:	d04a      	beq.n	80076c4 <_strtod_l+0x558>
 800762e:	3326      	adds	r3, #38	; 0x26
 8007630:	33ff      	adds	r3, #255	; 0xff
 8007632:	429c      	cmp	r4, r3
 8007634:	dd22      	ble.n	800767c <_strtod_l+0x510>
 8007636:	2300      	movs	r3, #0
 8007638:	9306      	str	r3, [sp, #24]
 800763a:	9307      	str	r3, [sp, #28]
 800763c:	930b      	str	r3, [sp, #44]	; 0x2c
 800763e:	9309      	str	r3, [sp, #36]	; 0x24
 8007640:	2322      	movs	r3, #34	; 0x22
 8007642:	2600      	movs	r6, #0
 8007644:	9a05      	ldr	r2, [sp, #20]
 8007646:	4f3f      	ldr	r7, [pc, #252]	; (8007744 <_strtod_l+0x5d8>)
 8007648:	6013      	str	r3, [r2, #0]
 800764a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800764c:	42b3      	cmp	r3, r6
 800764e:	d100      	bne.n	8007652 <_strtod_l+0x4e6>
 8007650:	e5d3      	b.n	80071fa <_strtod_l+0x8e>
 8007652:	9920      	ldr	r1, [sp, #128]	; 0x80
 8007654:	9805      	ldr	r0, [sp, #20]
 8007656:	f001 f8f3 	bl	8008840 <_Bfree>
 800765a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800765c:	9805      	ldr	r0, [sp, #20]
 800765e:	f001 f8ef 	bl	8008840 <_Bfree>
 8007662:	9907      	ldr	r1, [sp, #28]
 8007664:	9805      	ldr	r0, [sp, #20]
 8007666:	f001 f8eb 	bl	8008840 <_Bfree>
 800766a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800766c:	9805      	ldr	r0, [sp, #20]
 800766e:	f001 f8e7 	bl	8008840 <_Bfree>
 8007672:	9906      	ldr	r1, [sp, #24]
 8007674:	9805      	ldr	r0, [sp, #20]
 8007676:	f001 f8e3 	bl	8008840 <_Bfree>
 800767a:	e5be      	b.n	80071fa <_strtod_l+0x8e>
 800767c:	2300      	movs	r3, #0
 800767e:	0030      	movs	r0, r6
 8007680:	0039      	movs	r1, r7
 8007682:	4d35      	ldr	r5, [pc, #212]	; (8007758 <_strtod_l+0x5ec>)
 8007684:	1124      	asrs	r4, r4, #4
 8007686:	9308      	str	r3, [sp, #32]
 8007688:	2c01      	cmp	r4, #1
 800768a:	dc1e      	bgt.n	80076ca <_strtod_l+0x55e>
 800768c:	2b00      	cmp	r3, #0
 800768e:	d001      	beq.n	8007694 <_strtod_l+0x528>
 8007690:	0006      	movs	r6, r0
 8007692:	000f      	movs	r7, r1
 8007694:	4b31      	ldr	r3, [pc, #196]	; (800775c <_strtod_l+0x5f0>)
 8007696:	0032      	movs	r2, r6
 8007698:	18ff      	adds	r7, r7, r3
 800769a:	9b08      	ldr	r3, [sp, #32]
 800769c:	00dd      	lsls	r5, r3, #3
 800769e:	4b2e      	ldr	r3, [pc, #184]	; (8007758 <_strtod_l+0x5ec>)
 80076a0:	195d      	adds	r5, r3, r5
 80076a2:	6828      	ldr	r0, [r5, #0]
 80076a4:	6869      	ldr	r1, [r5, #4]
 80076a6:	003b      	movs	r3, r7
 80076a8:	f7fa f896 	bl	80017d8 <__aeabi_dmul>
 80076ac:	4b25      	ldr	r3, [pc, #148]	; (8007744 <_strtod_l+0x5d8>)
 80076ae:	4a2c      	ldr	r2, [pc, #176]	; (8007760 <_strtod_l+0x5f4>)
 80076b0:	0006      	movs	r6, r0
 80076b2:	400b      	ands	r3, r1
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d8be      	bhi.n	8007636 <_strtod_l+0x4ca>
 80076b8:	4a2a      	ldr	r2, [pc, #168]	; (8007764 <_strtod_l+0x5f8>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d913      	bls.n	80076e6 <_strtod_l+0x57a>
 80076be:	2601      	movs	r6, #1
 80076c0:	4f29      	ldr	r7, [pc, #164]	; (8007768 <_strtod_l+0x5fc>)
 80076c2:	4276      	negs	r6, r6
 80076c4:	2300      	movs	r3, #0
 80076c6:	9308      	str	r3, [sp, #32]
 80076c8:	e087      	b.n	80077da <_strtod_l+0x66e>
 80076ca:	2201      	movs	r2, #1
 80076cc:	4214      	tst	r4, r2
 80076ce:	d004      	beq.n	80076da <_strtod_l+0x56e>
 80076d0:	682a      	ldr	r2, [r5, #0]
 80076d2:	686b      	ldr	r3, [r5, #4]
 80076d4:	f7fa f880 	bl	80017d8 <__aeabi_dmul>
 80076d8:	2301      	movs	r3, #1
 80076da:	9a08      	ldr	r2, [sp, #32]
 80076dc:	1064      	asrs	r4, r4, #1
 80076de:	3201      	adds	r2, #1
 80076e0:	9208      	str	r2, [sp, #32]
 80076e2:	3508      	adds	r5, #8
 80076e4:	e7d0      	b.n	8007688 <_strtod_l+0x51c>
 80076e6:	23d4      	movs	r3, #212	; 0xd4
 80076e8:	049b      	lsls	r3, r3, #18
 80076ea:	18cf      	adds	r7, r1, r3
 80076ec:	e7ea      	b.n	80076c4 <_strtod_l+0x558>
 80076ee:	2c00      	cmp	r4, #0
 80076f0:	d0e8      	beq.n	80076c4 <_strtod_l+0x558>
 80076f2:	4264      	negs	r4, r4
 80076f4:	220f      	movs	r2, #15
 80076f6:	0023      	movs	r3, r4
 80076f8:	4013      	ands	r3, r2
 80076fa:	4214      	tst	r4, r2
 80076fc:	d00a      	beq.n	8007714 <_strtod_l+0x5a8>
 80076fe:	00da      	lsls	r2, r3, #3
 8007700:	4b14      	ldr	r3, [pc, #80]	; (8007754 <_strtod_l+0x5e8>)
 8007702:	0030      	movs	r0, r6
 8007704:	189b      	adds	r3, r3, r2
 8007706:	0039      	movs	r1, r7
 8007708:	681a      	ldr	r2, [r3, #0]
 800770a:	685b      	ldr	r3, [r3, #4]
 800770c:	f7f9 fc62 	bl	8000fd4 <__aeabi_ddiv>
 8007710:	0006      	movs	r6, r0
 8007712:	000f      	movs	r7, r1
 8007714:	1124      	asrs	r4, r4, #4
 8007716:	d0d5      	beq.n	80076c4 <_strtod_l+0x558>
 8007718:	2c1f      	cmp	r4, #31
 800771a:	dd27      	ble.n	800776c <_strtod_l+0x600>
 800771c:	2300      	movs	r3, #0
 800771e:	9306      	str	r3, [sp, #24]
 8007720:	9307      	str	r3, [sp, #28]
 8007722:	930b      	str	r3, [sp, #44]	; 0x2c
 8007724:	9309      	str	r3, [sp, #36]	; 0x24
 8007726:	2322      	movs	r3, #34	; 0x22
 8007728:	9a05      	ldr	r2, [sp, #20]
 800772a:	2600      	movs	r6, #0
 800772c:	6013      	str	r3, [r2, #0]
 800772e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007730:	2700      	movs	r7, #0
 8007732:	2b00      	cmp	r3, #0
 8007734:	d18d      	bne.n	8007652 <_strtod_l+0x4e6>
 8007736:	e560      	b.n	80071fa <_strtod_l+0x8e>
 8007738:	00004e1f 	.word	0x00004e1f
 800773c:	0800a7b5 	.word	0x0800a7b5
 8007740:	0800a7cc 	.word	0x0800a7cc
 8007744:	7ff00000 	.word	0x7ff00000
 8007748:	0800a7ac 	.word	0x0800a7ac
 800774c:	0800a7af 	.word	0x0800a7af
 8007750:	0800a8b7 	.word	0x0800a8b7
 8007754:	0800aac8 	.word	0x0800aac8
 8007758:	0800aaa0 	.word	0x0800aaa0
 800775c:	fcb00000 	.word	0xfcb00000
 8007760:	7ca00000 	.word	0x7ca00000
 8007764:	7c900000 	.word	0x7c900000
 8007768:	7fefffff 	.word	0x7fefffff
 800776c:	2310      	movs	r3, #16
 800776e:	0022      	movs	r2, r4
 8007770:	401a      	ands	r2, r3
 8007772:	9208      	str	r2, [sp, #32]
 8007774:	421c      	tst	r4, r3
 8007776:	d001      	beq.n	800777c <_strtod_l+0x610>
 8007778:	335a      	adds	r3, #90	; 0x5a
 800777a:	9308      	str	r3, [sp, #32]
 800777c:	0030      	movs	r0, r6
 800777e:	0039      	movs	r1, r7
 8007780:	2300      	movs	r3, #0
 8007782:	4dc5      	ldr	r5, [pc, #788]	; (8007a98 <_strtod_l+0x92c>)
 8007784:	2201      	movs	r2, #1
 8007786:	4214      	tst	r4, r2
 8007788:	d004      	beq.n	8007794 <_strtod_l+0x628>
 800778a:	682a      	ldr	r2, [r5, #0]
 800778c:	686b      	ldr	r3, [r5, #4]
 800778e:	f7fa f823 	bl	80017d8 <__aeabi_dmul>
 8007792:	2301      	movs	r3, #1
 8007794:	1064      	asrs	r4, r4, #1
 8007796:	3508      	adds	r5, #8
 8007798:	2c00      	cmp	r4, #0
 800779a:	d1f3      	bne.n	8007784 <_strtod_l+0x618>
 800779c:	2b00      	cmp	r3, #0
 800779e:	d001      	beq.n	80077a4 <_strtod_l+0x638>
 80077a0:	0006      	movs	r6, r0
 80077a2:	000f      	movs	r7, r1
 80077a4:	9b08      	ldr	r3, [sp, #32]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d00f      	beq.n	80077ca <_strtod_l+0x65e>
 80077aa:	236b      	movs	r3, #107	; 0x6b
 80077ac:	007a      	lsls	r2, r7, #1
 80077ae:	0d52      	lsrs	r2, r2, #21
 80077b0:	0039      	movs	r1, r7
 80077b2:	1a9b      	subs	r3, r3, r2
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	dd08      	ble.n	80077ca <_strtod_l+0x65e>
 80077b8:	2b1f      	cmp	r3, #31
 80077ba:	dc00      	bgt.n	80077be <_strtod_l+0x652>
 80077bc:	e124      	b.n	8007a08 <_strtod_l+0x89c>
 80077be:	2600      	movs	r6, #0
 80077c0:	2b34      	cmp	r3, #52	; 0x34
 80077c2:	dc00      	bgt.n	80077c6 <_strtod_l+0x65a>
 80077c4:	e119      	b.n	80079fa <_strtod_l+0x88e>
 80077c6:	27dc      	movs	r7, #220	; 0xdc
 80077c8:	04bf      	lsls	r7, r7, #18
 80077ca:	2200      	movs	r2, #0
 80077cc:	2300      	movs	r3, #0
 80077ce:	0030      	movs	r0, r6
 80077d0:	0039      	movs	r1, r7
 80077d2:	f7f8 fe39 	bl	8000448 <__aeabi_dcmpeq>
 80077d6:	2800      	cmp	r0, #0
 80077d8:	d1a0      	bne.n	800771c <_strtod_l+0x5b0>
 80077da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077de:	9300      	str	r3, [sp, #0]
 80077e0:	9910      	ldr	r1, [sp, #64]	; 0x40
 80077e2:	9b06      	ldr	r3, [sp, #24]
 80077e4:	9805      	ldr	r0, [sp, #20]
 80077e6:	f001 f893 	bl	8008910 <__s2b>
 80077ea:	900b      	str	r0, [sp, #44]	; 0x2c
 80077ec:	2800      	cmp	r0, #0
 80077ee:	d100      	bne.n	80077f2 <_strtod_l+0x686>
 80077f0:	e721      	b.n	8007636 <_strtod_l+0x4ca>
 80077f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077f4:	9907      	ldr	r1, [sp, #28]
 80077f6:	17da      	asrs	r2, r3, #31
 80077f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80077fa:	1a5b      	subs	r3, r3, r1
 80077fc:	401a      	ands	r2, r3
 80077fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007800:	9215      	str	r2, [sp, #84]	; 0x54
 8007802:	43db      	mvns	r3, r3
 8007804:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007806:	17db      	asrs	r3, r3, #31
 8007808:	401a      	ands	r2, r3
 800780a:	2300      	movs	r3, #0
 800780c:	921a      	str	r2, [sp, #104]	; 0x68
 800780e:	9306      	str	r3, [sp, #24]
 8007810:	9307      	str	r3, [sp, #28]
 8007812:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007814:	9805      	ldr	r0, [sp, #20]
 8007816:	6859      	ldr	r1, [r3, #4]
 8007818:	f000 ffce 	bl	80087b8 <_Balloc>
 800781c:	9009      	str	r0, [sp, #36]	; 0x24
 800781e:	2800      	cmp	r0, #0
 8007820:	d100      	bne.n	8007824 <_strtod_l+0x6b8>
 8007822:	e70d      	b.n	8007640 <_strtod_l+0x4d4>
 8007824:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007826:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007828:	691b      	ldr	r3, [r3, #16]
 800782a:	310c      	adds	r1, #12
 800782c:	1c9a      	adds	r2, r3, #2
 800782e:	0092      	lsls	r2, r2, #2
 8007830:	300c      	adds	r0, #12
 8007832:	930c      	str	r3, [sp, #48]	; 0x30
 8007834:	f7ff fc28 	bl	8007088 <memcpy>
 8007838:	ab22      	add	r3, sp, #136	; 0x88
 800783a:	9301      	str	r3, [sp, #4]
 800783c:	ab21      	add	r3, sp, #132	; 0x84
 800783e:	9300      	str	r3, [sp, #0]
 8007840:	0032      	movs	r2, r6
 8007842:	003b      	movs	r3, r7
 8007844:	9805      	ldr	r0, [sp, #20]
 8007846:	9612      	str	r6, [sp, #72]	; 0x48
 8007848:	9713      	str	r7, [sp, #76]	; 0x4c
 800784a:	f001 fbad 	bl	8008fa8 <__d2b>
 800784e:	9020      	str	r0, [sp, #128]	; 0x80
 8007850:	2800      	cmp	r0, #0
 8007852:	d100      	bne.n	8007856 <_strtod_l+0x6ea>
 8007854:	e6f4      	b.n	8007640 <_strtod_l+0x4d4>
 8007856:	2101      	movs	r1, #1
 8007858:	9805      	ldr	r0, [sp, #20]
 800785a:	f001 f8ed 	bl	8008a38 <__i2b>
 800785e:	9007      	str	r0, [sp, #28]
 8007860:	2800      	cmp	r0, #0
 8007862:	d100      	bne.n	8007866 <_strtod_l+0x6fa>
 8007864:	e6ec      	b.n	8007640 <_strtod_l+0x4d4>
 8007866:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007868:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800786a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800786c:	1ad4      	subs	r4, r2, r3
 800786e:	2b00      	cmp	r3, #0
 8007870:	db01      	blt.n	8007876 <_strtod_l+0x70a>
 8007872:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8007874:	195d      	adds	r5, r3, r5
 8007876:	9908      	ldr	r1, [sp, #32]
 8007878:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800787a:	1a5b      	subs	r3, r3, r1
 800787c:	2136      	movs	r1, #54	; 0x36
 800787e:	189b      	adds	r3, r3, r2
 8007880:	1a8a      	subs	r2, r1, r2
 8007882:	4986      	ldr	r1, [pc, #536]	; (8007a9c <_strtod_l+0x930>)
 8007884:	2001      	movs	r0, #1
 8007886:	468c      	mov	ip, r1
 8007888:	2100      	movs	r1, #0
 800788a:	3b01      	subs	r3, #1
 800788c:	9110      	str	r1, [sp, #64]	; 0x40
 800788e:	9014      	str	r0, [sp, #80]	; 0x50
 8007890:	4563      	cmp	r3, ip
 8007892:	da07      	bge.n	80078a4 <_strtod_l+0x738>
 8007894:	4661      	mov	r1, ip
 8007896:	1ac9      	subs	r1, r1, r3
 8007898:	1a52      	subs	r2, r2, r1
 800789a:	291f      	cmp	r1, #31
 800789c:	dd00      	ble.n	80078a0 <_strtod_l+0x734>
 800789e:	e0b8      	b.n	8007a12 <_strtod_l+0x8a6>
 80078a0:	4088      	lsls	r0, r1
 80078a2:	9014      	str	r0, [sp, #80]	; 0x50
 80078a4:	18ab      	adds	r3, r5, r2
 80078a6:	930c      	str	r3, [sp, #48]	; 0x30
 80078a8:	18a4      	adds	r4, r4, r2
 80078aa:	9b08      	ldr	r3, [sp, #32]
 80078ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80078ae:	191c      	adds	r4, r3, r4
 80078b0:	002b      	movs	r3, r5
 80078b2:	4295      	cmp	r5, r2
 80078b4:	dd00      	ble.n	80078b8 <_strtod_l+0x74c>
 80078b6:	0013      	movs	r3, r2
 80078b8:	42a3      	cmp	r3, r4
 80078ba:	dd00      	ble.n	80078be <_strtod_l+0x752>
 80078bc:	0023      	movs	r3, r4
 80078be:	2b00      	cmp	r3, #0
 80078c0:	dd04      	ble.n	80078cc <_strtod_l+0x760>
 80078c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80078c4:	1ae4      	subs	r4, r4, r3
 80078c6:	1ad2      	subs	r2, r2, r3
 80078c8:	920c      	str	r2, [sp, #48]	; 0x30
 80078ca:	1aed      	subs	r5, r5, r3
 80078cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	dd17      	ble.n	8007902 <_strtod_l+0x796>
 80078d2:	001a      	movs	r2, r3
 80078d4:	9907      	ldr	r1, [sp, #28]
 80078d6:	9805      	ldr	r0, [sp, #20]
 80078d8:	f001 f974 	bl	8008bc4 <__pow5mult>
 80078dc:	9007      	str	r0, [sp, #28]
 80078de:	2800      	cmp	r0, #0
 80078e0:	d100      	bne.n	80078e4 <_strtod_l+0x778>
 80078e2:	e6ad      	b.n	8007640 <_strtod_l+0x4d4>
 80078e4:	0001      	movs	r1, r0
 80078e6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80078e8:	9805      	ldr	r0, [sp, #20]
 80078ea:	f001 f8bb 	bl	8008a64 <__multiply>
 80078ee:	900f      	str	r0, [sp, #60]	; 0x3c
 80078f0:	2800      	cmp	r0, #0
 80078f2:	d100      	bne.n	80078f6 <_strtod_l+0x78a>
 80078f4:	e6a4      	b.n	8007640 <_strtod_l+0x4d4>
 80078f6:	9920      	ldr	r1, [sp, #128]	; 0x80
 80078f8:	9805      	ldr	r0, [sp, #20]
 80078fa:	f000 ffa1 	bl	8008840 <_Bfree>
 80078fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007900:	9320      	str	r3, [sp, #128]	; 0x80
 8007902:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007904:	2b00      	cmp	r3, #0
 8007906:	dd00      	ble.n	800790a <_strtod_l+0x79e>
 8007908:	e089      	b.n	8007a1e <_strtod_l+0x8b2>
 800790a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800790c:	2b00      	cmp	r3, #0
 800790e:	dd08      	ble.n	8007922 <_strtod_l+0x7b6>
 8007910:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007912:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007914:	9805      	ldr	r0, [sp, #20]
 8007916:	f001 f955 	bl	8008bc4 <__pow5mult>
 800791a:	9009      	str	r0, [sp, #36]	; 0x24
 800791c:	2800      	cmp	r0, #0
 800791e:	d100      	bne.n	8007922 <_strtod_l+0x7b6>
 8007920:	e68e      	b.n	8007640 <_strtod_l+0x4d4>
 8007922:	2c00      	cmp	r4, #0
 8007924:	dd08      	ble.n	8007938 <_strtod_l+0x7cc>
 8007926:	0022      	movs	r2, r4
 8007928:	9909      	ldr	r1, [sp, #36]	; 0x24
 800792a:	9805      	ldr	r0, [sp, #20]
 800792c:	f001 f9a6 	bl	8008c7c <__lshift>
 8007930:	9009      	str	r0, [sp, #36]	; 0x24
 8007932:	2800      	cmp	r0, #0
 8007934:	d100      	bne.n	8007938 <_strtod_l+0x7cc>
 8007936:	e683      	b.n	8007640 <_strtod_l+0x4d4>
 8007938:	2d00      	cmp	r5, #0
 800793a:	dd08      	ble.n	800794e <_strtod_l+0x7e2>
 800793c:	002a      	movs	r2, r5
 800793e:	9907      	ldr	r1, [sp, #28]
 8007940:	9805      	ldr	r0, [sp, #20]
 8007942:	f001 f99b 	bl	8008c7c <__lshift>
 8007946:	9007      	str	r0, [sp, #28]
 8007948:	2800      	cmp	r0, #0
 800794a:	d100      	bne.n	800794e <_strtod_l+0x7e2>
 800794c:	e678      	b.n	8007640 <_strtod_l+0x4d4>
 800794e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007950:	9920      	ldr	r1, [sp, #128]	; 0x80
 8007952:	9805      	ldr	r0, [sp, #20]
 8007954:	f001 fa1c 	bl	8008d90 <__mdiff>
 8007958:	9006      	str	r0, [sp, #24]
 800795a:	2800      	cmp	r0, #0
 800795c:	d100      	bne.n	8007960 <_strtod_l+0x7f4>
 800795e:	e66f      	b.n	8007640 <_strtod_l+0x4d4>
 8007960:	2200      	movs	r2, #0
 8007962:	68c3      	ldr	r3, [r0, #12]
 8007964:	9907      	ldr	r1, [sp, #28]
 8007966:	60c2      	str	r2, [r0, #12]
 8007968:	930f      	str	r3, [sp, #60]	; 0x3c
 800796a:	f001 f9f5 	bl	8008d58 <__mcmp>
 800796e:	2800      	cmp	r0, #0
 8007970:	da5f      	bge.n	8007a32 <_strtod_l+0x8c6>
 8007972:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007974:	4333      	orrs	r3, r6
 8007976:	d000      	beq.n	800797a <_strtod_l+0x80e>
 8007978:	e08a      	b.n	8007a90 <_strtod_l+0x924>
 800797a:	033b      	lsls	r3, r7, #12
 800797c:	d000      	beq.n	8007980 <_strtod_l+0x814>
 800797e:	e087      	b.n	8007a90 <_strtod_l+0x924>
 8007980:	22d6      	movs	r2, #214	; 0xd6
 8007982:	4b47      	ldr	r3, [pc, #284]	; (8007aa0 <_strtod_l+0x934>)
 8007984:	04d2      	lsls	r2, r2, #19
 8007986:	403b      	ands	r3, r7
 8007988:	4293      	cmp	r3, r2
 800798a:	d800      	bhi.n	800798e <_strtod_l+0x822>
 800798c:	e080      	b.n	8007a90 <_strtod_l+0x924>
 800798e:	9b06      	ldr	r3, [sp, #24]
 8007990:	695b      	ldr	r3, [r3, #20]
 8007992:	930a      	str	r3, [sp, #40]	; 0x28
 8007994:	2b00      	cmp	r3, #0
 8007996:	d104      	bne.n	80079a2 <_strtod_l+0x836>
 8007998:	9b06      	ldr	r3, [sp, #24]
 800799a:	691b      	ldr	r3, [r3, #16]
 800799c:	930a      	str	r3, [sp, #40]	; 0x28
 800799e:	2b01      	cmp	r3, #1
 80079a0:	dd76      	ble.n	8007a90 <_strtod_l+0x924>
 80079a2:	9906      	ldr	r1, [sp, #24]
 80079a4:	2201      	movs	r2, #1
 80079a6:	9805      	ldr	r0, [sp, #20]
 80079a8:	f001 f968 	bl	8008c7c <__lshift>
 80079ac:	9907      	ldr	r1, [sp, #28]
 80079ae:	9006      	str	r0, [sp, #24]
 80079b0:	f001 f9d2 	bl	8008d58 <__mcmp>
 80079b4:	2800      	cmp	r0, #0
 80079b6:	dd6b      	ble.n	8007a90 <_strtod_l+0x924>
 80079b8:	9908      	ldr	r1, [sp, #32]
 80079ba:	003b      	movs	r3, r7
 80079bc:	4a38      	ldr	r2, [pc, #224]	; (8007aa0 <_strtod_l+0x934>)
 80079be:	2900      	cmp	r1, #0
 80079c0:	d100      	bne.n	80079c4 <_strtod_l+0x858>
 80079c2:	e092      	b.n	8007aea <_strtod_l+0x97e>
 80079c4:	0011      	movs	r1, r2
 80079c6:	20d6      	movs	r0, #214	; 0xd6
 80079c8:	4039      	ands	r1, r7
 80079ca:	04c0      	lsls	r0, r0, #19
 80079cc:	4281      	cmp	r1, r0
 80079ce:	dd00      	ble.n	80079d2 <_strtod_l+0x866>
 80079d0:	e08b      	b.n	8007aea <_strtod_l+0x97e>
 80079d2:	23dc      	movs	r3, #220	; 0xdc
 80079d4:	049b      	lsls	r3, r3, #18
 80079d6:	4299      	cmp	r1, r3
 80079d8:	dc00      	bgt.n	80079dc <_strtod_l+0x870>
 80079da:	e6a4      	b.n	8007726 <_strtod_l+0x5ba>
 80079dc:	0030      	movs	r0, r6
 80079de:	0039      	movs	r1, r7
 80079e0:	2200      	movs	r2, #0
 80079e2:	4b30      	ldr	r3, [pc, #192]	; (8007aa4 <_strtod_l+0x938>)
 80079e4:	f7f9 fef8 	bl	80017d8 <__aeabi_dmul>
 80079e8:	0006      	movs	r6, r0
 80079ea:	000f      	movs	r7, r1
 80079ec:	4308      	orrs	r0, r1
 80079ee:	d000      	beq.n	80079f2 <_strtod_l+0x886>
 80079f0:	e62f      	b.n	8007652 <_strtod_l+0x4e6>
 80079f2:	2322      	movs	r3, #34	; 0x22
 80079f4:	9a05      	ldr	r2, [sp, #20]
 80079f6:	6013      	str	r3, [r2, #0]
 80079f8:	e62b      	b.n	8007652 <_strtod_l+0x4e6>
 80079fa:	234b      	movs	r3, #75	; 0x4b
 80079fc:	1a9a      	subs	r2, r3, r2
 80079fe:	3b4c      	subs	r3, #76	; 0x4c
 8007a00:	4093      	lsls	r3, r2
 8007a02:	4019      	ands	r1, r3
 8007a04:	000f      	movs	r7, r1
 8007a06:	e6e0      	b.n	80077ca <_strtod_l+0x65e>
 8007a08:	2201      	movs	r2, #1
 8007a0a:	4252      	negs	r2, r2
 8007a0c:	409a      	lsls	r2, r3
 8007a0e:	4016      	ands	r6, r2
 8007a10:	e6db      	b.n	80077ca <_strtod_l+0x65e>
 8007a12:	4925      	ldr	r1, [pc, #148]	; (8007aa8 <_strtod_l+0x93c>)
 8007a14:	1acb      	subs	r3, r1, r3
 8007a16:	0001      	movs	r1, r0
 8007a18:	4099      	lsls	r1, r3
 8007a1a:	9110      	str	r1, [sp, #64]	; 0x40
 8007a1c:	e741      	b.n	80078a2 <_strtod_l+0x736>
 8007a1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007a20:	9920      	ldr	r1, [sp, #128]	; 0x80
 8007a22:	9805      	ldr	r0, [sp, #20]
 8007a24:	f001 f92a 	bl	8008c7c <__lshift>
 8007a28:	9020      	str	r0, [sp, #128]	; 0x80
 8007a2a:	2800      	cmp	r0, #0
 8007a2c:	d000      	beq.n	8007a30 <_strtod_l+0x8c4>
 8007a2e:	e76c      	b.n	800790a <_strtod_l+0x79e>
 8007a30:	e606      	b.n	8007640 <_strtod_l+0x4d4>
 8007a32:	970c      	str	r7, [sp, #48]	; 0x30
 8007a34:	2800      	cmp	r0, #0
 8007a36:	d176      	bne.n	8007b26 <_strtod_l+0x9ba>
 8007a38:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007a3a:	033b      	lsls	r3, r7, #12
 8007a3c:	0b1b      	lsrs	r3, r3, #12
 8007a3e:	2a00      	cmp	r2, #0
 8007a40:	d038      	beq.n	8007ab4 <_strtod_l+0x948>
 8007a42:	4a1a      	ldr	r2, [pc, #104]	; (8007aac <_strtod_l+0x940>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d138      	bne.n	8007aba <_strtod_l+0x94e>
 8007a48:	2201      	movs	r2, #1
 8007a4a:	9b08      	ldr	r3, [sp, #32]
 8007a4c:	4252      	negs	r2, r2
 8007a4e:	0031      	movs	r1, r6
 8007a50:	0010      	movs	r0, r2
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d00b      	beq.n	8007a6e <_strtod_l+0x902>
 8007a56:	24d4      	movs	r4, #212	; 0xd4
 8007a58:	4b11      	ldr	r3, [pc, #68]	; (8007aa0 <_strtod_l+0x934>)
 8007a5a:	0010      	movs	r0, r2
 8007a5c:	403b      	ands	r3, r7
 8007a5e:	04e4      	lsls	r4, r4, #19
 8007a60:	42a3      	cmp	r3, r4
 8007a62:	d804      	bhi.n	8007a6e <_strtod_l+0x902>
 8007a64:	306c      	adds	r0, #108	; 0x6c
 8007a66:	0d1b      	lsrs	r3, r3, #20
 8007a68:	1ac3      	subs	r3, r0, r3
 8007a6a:	409a      	lsls	r2, r3
 8007a6c:	0010      	movs	r0, r2
 8007a6e:	4281      	cmp	r1, r0
 8007a70:	d123      	bne.n	8007aba <_strtod_l+0x94e>
 8007a72:	4b0f      	ldr	r3, [pc, #60]	; (8007ab0 <_strtod_l+0x944>)
 8007a74:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d102      	bne.n	8007a80 <_strtod_l+0x914>
 8007a7a:	1c4b      	adds	r3, r1, #1
 8007a7c:	d100      	bne.n	8007a80 <_strtod_l+0x914>
 8007a7e:	e5df      	b.n	8007640 <_strtod_l+0x4d4>
 8007a80:	4b07      	ldr	r3, [pc, #28]	; (8007aa0 <_strtod_l+0x934>)
 8007a82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007a84:	2600      	movs	r6, #0
 8007a86:	401a      	ands	r2, r3
 8007a88:	0013      	movs	r3, r2
 8007a8a:	2280      	movs	r2, #128	; 0x80
 8007a8c:	0352      	lsls	r2, r2, #13
 8007a8e:	189f      	adds	r7, r3, r2
 8007a90:	9b08      	ldr	r3, [sp, #32]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d1a2      	bne.n	80079dc <_strtod_l+0x870>
 8007a96:	e5dc      	b.n	8007652 <_strtod_l+0x4e6>
 8007a98:	0800a7e0 	.word	0x0800a7e0
 8007a9c:	fffffc02 	.word	0xfffffc02
 8007aa0:	7ff00000 	.word	0x7ff00000
 8007aa4:	39500000 	.word	0x39500000
 8007aa8:	fffffbe2 	.word	0xfffffbe2
 8007aac:	000fffff 	.word	0x000fffff
 8007ab0:	7fefffff 	.word	0x7fefffff
 8007ab4:	4333      	orrs	r3, r6
 8007ab6:	d100      	bne.n	8007aba <_strtod_l+0x94e>
 8007ab8:	e77e      	b.n	80079b8 <_strtod_l+0x84c>
 8007aba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d01d      	beq.n	8007afc <_strtod_l+0x990>
 8007ac0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ac2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007ac4:	4213      	tst	r3, r2
 8007ac6:	d0e3      	beq.n	8007a90 <_strtod_l+0x924>
 8007ac8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007aca:	0030      	movs	r0, r6
 8007acc:	0039      	movs	r1, r7
 8007ace:	9a08      	ldr	r2, [sp, #32]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d017      	beq.n	8007b04 <_strtod_l+0x998>
 8007ad4:	f7ff fb32 	bl	800713c <sulp>
 8007ad8:	0002      	movs	r2, r0
 8007ada:	000b      	movs	r3, r1
 8007adc:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007ade:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007ae0:	f7f8 ff3c 	bl	800095c <__aeabi_dadd>
 8007ae4:	0006      	movs	r6, r0
 8007ae6:	000f      	movs	r7, r1
 8007ae8:	e7d2      	b.n	8007a90 <_strtod_l+0x924>
 8007aea:	2601      	movs	r6, #1
 8007aec:	4013      	ands	r3, r2
 8007aee:	4a99      	ldr	r2, [pc, #612]	; (8007d54 <_strtod_l+0xbe8>)
 8007af0:	4276      	negs	r6, r6
 8007af2:	189b      	adds	r3, r3, r2
 8007af4:	4a98      	ldr	r2, [pc, #608]	; (8007d58 <_strtod_l+0xbec>)
 8007af6:	431a      	orrs	r2, r3
 8007af8:	0017      	movs	r7, r2
 8007afa:	e7c9      	b.n	8007a90 <_strtod_l+0x924>
 8007afc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007afe:	4233      	tst	r3, r6
 8007b00:	d0c6      	beq.n	8007a90 <_strtod_l+0x924>
 8007b02:	e7e1      	b.n	8007ac8 <_strtod_l+0x95c>
 8007b04:	f7ff fb1a 	bl	800713c <sulp>
 8007b08:	0002      	movs	r2, r0
 8007b0a:	000b      	movs	r3, r1
 8007b0c:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007b0e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007b10:	f7fa f8ce 	bl	8001cb0 <__aeabi_dsub>
 8007b14:	2200      	movs	r2, #0
 8007b16:	2300      	movs	r3, #0
 8007b18:	0006      	movs	r6, r0
 8007b1a:	000f      	movs	r7, r1
 8007b1c:	f7f8 fc94 	bl	8000448 <__aeabi_dcmpeq>
 8007b20:	2800      	cmp	r0, #0
 8007b22:	d0b5      	beq.n	8007a90 <_strtod_l+0x924>
 8007b24:	e5ff      	b.n	8007726 <_strtod_l+0x5ba>
 8007b26:	9907      	ldr	r1, [sp, #28]
 8007b28:	9806      	ldr	r0, [sp, #24]
 8007b2a:	f001 faa1 	bl	8009070 <__ratio>
 8007b2e:	2380      	movs	r3, #128	; 0x80
 8007b30:	2200      	movs	r2, #0
 8007b32:	05db      	lsls	r3, r3, #23
 8007b34:	0004      	movs	r4, r0
 8007b36:	000d      	movs	r5, r1
 8007b38:	f7f8 fc96 	bl	8000468 <__aeabi_dcmple>
 8007b3c:	2800      	cmp	r0, #0
 8007b3e:	d075      	beq.n	8007c2c <_strtod_l+0xac0>
 8007b40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d047      	beq.n	8007bd6 <_strtod_l+0xa6a>
 8007b46:	2300      	movs	r3, #0
 8007b48:	4c84      	ldr	r4, [pc, #528]	; (8007d5c <_strtod_l+0xbf0>)
 8007b4a:	2500      	movs	r5, #0
 8007b4c:	9310      	str	r3, [sp, #64]	; 0x40
 8007b4e:	9411      	str	r4, [sp, #68]	; 0x44
 8007b50:	4c82      	ldr	r4, [pc, #520]	; (8007d5c <_strtod_l+0xbf0>)
 8007b52:	4a83      	ldr	r2, [pc, #524]	; (8007d60 <_strtod_l+0xbf4>)
 8007b54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b56:	4013      	ands	r3, r2
 8007b58:	9314      	str	r3, [sp, #80]	; 0x50
 8007b5a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007b5c:	4b81      	ldr	r3, [pc, #516]	; (8007d64 <_strtod_l+0xbf8>)
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	d000      	beq.n	8007b64 <_strtod_l+0x9f8>
 8007b62:	e0ac      	b.n	8007cbe <_strtod_l+0xb52>
 8007b64:	4a80      	ldr	r2, [pc, #512]	; (8007d68 <_strtod_l+0xbfc>)
 8007b66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b68:	4694      	mov	ip, r2
 8007b6a:	4463      	add	r3, ip
 8007b6c:	001f      	movs	r7, r3
 8007b6e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007b70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007b72:	0030      	movs	r0, r6
 8007b74:	0039      	movs	r1, r7
 8007b76:	920c      	str	r2, [sp, #48]	; 0x30
 8007b78:	930d      	str	r3, [sp, #52]	; 0x34
 8007b7a:	f001 f9a1 	bl	8008ec0 <__ulp>
 8007b7e:	0002      	movs	r2, r0
 8007b80:	000b      	movs	r3, r1
 8007b82:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007b84:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007b86:	f7f9 fe27 	bl	80017d8 <__aeabi_dmul>
 8007b8a:	0032      	movs	r2, r6
 8007b8c:	003b      	movs	r3, r7
 8007b8e:	f7f8 fee5 	bl	800095c <__aeabi_dadd>
 8007b92:	4a73      	ldr	r2, [pc, #460]	; (8007d60 <_strtod_l+0xbf4>)
 8007b94:	4b75      	ldr	r3, [pc, #468]	; (8007d6c <_strtod_l+0xc00>)
 8007b96:	0006      	movs	r6, r0
 8007b98:	400a      	ands	r2, r1
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d95e      	bls.n	8007c5c <_strtod_l+0xaf0>
 8007b9e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007ba0:	4b73      	ldr	r3, [pc, #460]	; (8007d70 <_strtod_l+0xc04>)
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d103      	bne.n	8007bae <_strtod_l+0xa42>
 8007ba6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007ba8:	3301      	adds	r3, #1
 8007baa:	d100      	bne.n	8007bae <_strtod_l+0xa42>
 8007bac:	e548      	b.n	8007640 <_strtod_l+0x4d4>
 8007bae:	2601      	movs	r6, #1
 8007bb0:	4f6f      	ldr	r7, [pc, #444]	; (8007d70 <_strtod_l+0xc04>)
 8007bb2:	4276      	negs	r6, r6
 8007bb4:	9920      	ldr	r1, [sp, #128]	; 0x80
 8007bb6:	9805      	ldr	r0, [sp, #20]
 8007bb8:	f000 fe42 	bl	8008840 <_Bfree>
 8007bbc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007bbe:	9805      	ldr	r0, [sp, #20]
 8007bc0:	f000 fe3e 	bl	8008840 <_Bfree>
 8007bc4:	9907      	ldr	r1, [sp, #28]
 8007bc6:	9805      	ldr	r0, [sp, #20]
 8007bc8:	f000 fe3a 	bl	8008840 <_Bfree>
 8007bcc:	9906      	ldr	r1, [sp, #24]
 8007bce:	9805      	ldr	r0, [sp, #20]
 8007bd0:	f000 fe36 	bl	8008840 <_Bfree>
 8007bd4:	e61d      	b.n	8007812 <_strtod_l+0x6a6>
 8007bd6:	2e00      	cmp	r6, #0
 8007bd8:	d11c      	bne.n	8007c14 <_strtod_l+0xaa8>
 8007bda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007bdc:	031b      	lsls	r3, r3, #12
 8007bde:	d11f      	bne.n	8007c20 <_strtod_l+0xab4>
 8007be0:	2200      	movs	r2, #0
 8007be2:	0020      	movs	r0, r4
 8007be4:	0029      	movs	r1, r5
 8007be6:	4b5d      	ldr	r3, [pc, #372]	; (8007d5c <_strtod_l+0xbf0>)
 8007be8:	f7f8 fc34 	bl	8000454 <__aeabi_dcmplt>
 8007bec:	2800      	cmp	r0, #0
 8007bee:	d11a      	bne.n	8007c26 <_strtod_l+0xaba>
 8007bf0:	0020      	movs	r0, r4
 8007bf2:	0029      	movs	r1, r5
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	4b5f      	ldr	r3, [pc, #380]	; (8007d74 <_strtod_l+0xc08>)
 8007bf8:	f7f9 fdee 	bl	80017d8 <__aeabi_dmul>
 8007bfc:	0005      	movs	r5, r0
 8007bfe:	000c      	movs	r4, r1
 8007c00:	2380      	movs	r3, #128	; 0x80
 8007c02:	061b      	lsls	r3, r3, #24
 8007c04:	18e3      	adds	r3, r4, r3
 8007c06:	951c      	str	r5, [sp, #112]	; 0x70
 8007c08:	931d      	str	r3, [sp, #116]	; 0x74
 8007c0a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007c0c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007c0e:	9210      	str	r2, [sp, #64]	; 0x40
 8007c10:	9311      	str	r3, [sp, #68]	; 0x44
 8007c12:	e79e      	b.n	8007b52 <_strtod_l+0x9e6>
 8007c14:	2e01      	cmp	r6, #1
 8007c16:	d103      	bne.n	8007c20 <_strtod_l+0xab4>
 8007c18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d100      	bne.n	8007c20 <_strtod_l+0xab4>
 8007c1e:	e582      	b.n	8007726 <_strtod_l+0x5ba>
 8007c20:	2300      	movs	r3, #0
 8007c22:	4c55      	ldr	r4, [pc, #340]	; (8007d78 <_strtod_l+0xc0c>)
 8007c24:	e791      	b.n	8007b4a <_strtod_l+0x9de>
 8007c26:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007c28:	4c52      	ldr	r4, [pc, #328]	; (8007d74 <_strtod_l+0xc08>)
 8007c2a:	e7e9      	b.n	8007c00 <_strtod_l+0xa94>
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	0020      	movs	r0, r4
 8007c30:	0029      	movs	r1, r5
 8007c32:	4b50      	ldr	r3, [pc, #320]	; (8007d74 <_strtod_l+0xc08>)
 8007c34:	f7f9 fdd0 	bl	80017d8 <__aeabi_dmul>
 8007c38:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007c3a:	0005      	movs	r5, r0
 8007c3c:	000b      	movs	r3, r1
 8007c3e:	000c      	movs	r4, r1
 8007c40:	2a00      	cmp	r2, #0
 8007c42:	d107      	bne.n	8007c54 <_strtod_l+0xae8>
 8007c44:	2280      	movs	r2, #128	; 0x80
 8007c46:	0612      	lsls	r2, r2, #24
 8007c48:	188b      	adds	r3, r1, r2
 8007c4a:	9016      	str	r0, [sp, #88]	; 0x58
 8007c4c:	9317      	str	r3, [sp, #92]	; 0x5c
 8007c4e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007c50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007c52:	e7dc      	b.n	8007c0e <_strtod_l+0xaa2>
 8007c54:	0002      	movs	r2, r0
 8007c56:	9216      	str	r2, [sp, #88]	; 0x58
 8007c58:	9317      	str	r3, [sp, #92]	; 0x5c
 8007c5a:	e7f8      	b.n	8007c4e <_strtod_l+0xae2>
 8007c5c:	23d4      	movs	r3, #212	; 0xd4
 8007c5e:	049b      	lsls	r3, r3, #18
 8007c60:	18cf      	adds	r7, r1, r3
 8007c62:	9b08      	ldr	r3, [sp, #32]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d1a5      	bne.n	8007bb4 <_strtod_l+0xa48>
 8007c68:	4b3d      	ldr	r3, [pc, #244]	; (8007d60 <_strtod_l+0xbf4>)
 8007c6a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007c6c:	403b      	ands	r3, r7
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d1a0      	bne.n	8007bb4 <_strtod_l+0xa48>
 8007c72:	0028      	movs	r0, r5
 8007c74:	0021      	movs	r1, r4
 8007c76:	f7f8 fc8d 	bl	8000594 <__aeabi_d2lz>
 8007c7a:	f7f8 fcc7 	bl	800060c <__aeabi_l2d>
 8007c7e:	0002      	movs	r2, r0
 8007c80:	000b      	movs	r3, r1
 8007c82:	0028      	movs	r0, r5
 8007c84:	0021      	movs	r1, r4
 8007c86:	f7fa f813 	bl	8001cb0 <__aeabi_dsub>
 8007c8a:	033b      	lsls	r3, r7, #12
 8007c8c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007c8e:	0b1b      	lsrs	r3, r3, #12
 8007c90:	4333      	orrs	r3, r6
 8007c92:	4313      	orrs	r3, r2
 8007c94:	0004      	movs	r4, r0
 8007c96:	000d      	movs	r5, r1
 8007c98:	4a38      	ldr	r2, [pc, #224]	; (8007d7c <_strtod_l+0xc10>)
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d055      	beq.n	8007d4a <_strtod_l+0xbde>
 8007c9e:	4b38      	ldr	r3, [pc, #224]	; (8007d80 <_strtod_l+0xc14>)
 8007ca0:	f7f8 fbd8 	bl	8000454 <__aeabi_dcmplt>
 8007ca4:	2800      	cmp	r0, #0
 8007ca6:	d000      	beq.n	8007caa <_strtod_l+0xb3e>
 8007ca8:	e4d3      	b.n	8007652 <_strtod_l+0x4e6>
 8007caa:	0020      	movs	r0, r4
 8007cac:	0029      	movs	r1, r5
 8007cae:	4a35      	ldr	r2, [pc, #212]	; (8007d84 <_strtod_l+0xc18>)
 8007cb0:	4b30      	ldr	r3, [pc, #192]	; (8007d74 <_strtod_l+0xc08>)
 8007cb2:	f7f8 fbe3 	bl	800047c <__aeabi_dcmpgt>
 8007cb6:	2800      	cmp	r0, #0
 8007cb8:	d100      	bne.n	8007cbc <_strtod_l+0xb50>
 8007cba:	e77b      	b.n	8007bb4 <_strtod_l+0xa48>
 8007cbc:	e4c9      	b.n	8007652 <_strtod_l+0x4e6>
 8007cbe:	9b08      	ldr	r3, [sp, #32]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d02b      	beq.n	8007d1c <_strtod_l+0xbb0>
 8007cc4:	23d4      	movs	r3, #212	; 0xd4
 8007cc6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007cc8:	04db      	lsls	r3, r3, #19
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	d826      	bhi.n	8007d1c <_strtod_l+0xbb0>
 8007cce:	0028      	movs	r0, r5
 8007cd0:	0021      	movs	r1, r4
 8007cd2:	4a2d      	ldr	r2, [pc, #180]	; (8007d88 <_strtod_l+0xc1c>)
 8007cd4:	4b2d      	ldr	r3, [pc, #180]	; (8007d8c <_strtod_l+0xc20>)
 8007cd6:	f7f8 fbc7 	bl	8000468 <__aeabi_dcmple>
 8007cda:	2800      	cmp	r0, #0
 8007cdc:	d017      	beq.n	8007d0e <_strtod_l+0xba2>
 8007cde:	0028      	movs	r0, r5
 8007ce0:	0021      	movs	r1, r4
 8007ce2:	f7f8 fc39 	bl	8000558 <__aeabi_d2uiz>
 8007ce6:	2800      	cmp	r0, #0
 8007ce8:	d100      	bne.n	8007cec <_strtod_l+0xb80>
 8007cea:	3001      	adds	r0, #1
 8007cec:	f7fa fbf6 	bl	80024dc <__aeabi_ui2d>
 8007cf0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007cf2:	0005      	movs	r5, r0
 8007cf4:	000b      	movs	r3, r1
 8007cf6:	000c      	movs	r4, r1
 8007cf8:	2a00      	cmp	r2, #0
 8007cfa:	d122      	bne.n	8007d42 <_strtod_l+0xbd6>
 8007cfc:	2280      	movs	r2, #128	; 0x80
 8007cfe:	0612      	lsls	r2, r2, #24
 8007d00:	188b      	adds	r3, r1, r2
 8007d02:	9018      	str	r0, [sp, #96]	; 0x60
 8007d04:	9319      	str	r3, [sp, #100]	; 0x64
 8007d06:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007d08:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007d0a:	9210      	str	r2, [sp, #64]	; 0x40
 8007d0c:	9311      	str	r3, [sp, #68]	; 0x44
 8007d0e:	22d6      	movs	r2, #214	; 0xd6
 8007d10:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007d12:	04d2      	lsls	r2, r2, #19
 8007d14:	189b      	adds	r3, r3, r2
 8007d16:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007d18:	1a9b      	subs	r3, r3, r2
 8007d1a:	9311      	str	r3, [sp, #68]	; 0x44
 8007d1c:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007d1e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007d20:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8007d22:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8007d24:	f001 f8cc 	bl	8008ec0 <__ulp>
 8007d28:	0002      	movs	r2, r0
 8007d2a:	000b      	movs	r3, r1
 8007d2c:	0030      	movs	r0, r6
 8007d2e:	0039      	movs	r1, r7
 8007d30:	f7f9 fd52 	bl	80017d8 <__aeabi_dmul>
 8007d34:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007d36:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007d38:	f7f8 fe10 	bl	800095c <__aeabi_dadd>
 8007d3c:	0006      	movs	r6, r0
 8007d3e:	000f      	movs	r7, r1
 8007d40:	e78f      	b.n	8007c62 <_strtod_l+0xaf6>
 8007d42:	0002      	movs	r2, r0
 8007d44:	9218      	str	r2, [sp, #96]	; 0x60
 8007d46:	9319      	str	r3, [sp, #100]	; 0x64
 8007d48:	e7dd      	b.n	8007d06 <_strtod_l+0xb9a>
 8007d4a:	4b11      	ldr	r3, [pc, #68]	; (8007d90 <_strtod_l+0xc24>)
 8007d4c:	f7f8 fb82 	bl	8000454 <__aeabi_dcmplt>
 8007d50:	e7b1      	b.n	8007cb6 <_strtod_l+0xb4a>
 8007d52:	46c0      	nop			; (mov r8, r8)
 8007d54:	fff00000 	.word	0xfff00000
 8007d58:	000fffff 	.word	0x000fffff
 8007d5c:	3ff00000 	.word	0x3ff00000
 8007d60:	7ff00000 	.word	0x7ff00000
 8007d64:	7fe00000 	.word	0x7fe00000
 8007d68:	fcb00000 	.word	0xfcb00000
 8007d6c:	7c9fffff 	.word	0x7c9fffff
 8007d70:	7fefffff 	.word	0x7fefffff
 8007d74:	3fe00000 	.word	0x3fe00000
 8007d78:	bff00000 	.word	0xbff00000
 8007d7c:	94a03595 	.word	0x94a03595
 8007d80:	3fdfffff 	.word	0x3fdfffff
 8007d84:	35afe535 	.word	0x35afe535
 8007d88:	ffc00000 	.word	0xffc00000
 8007d8c:	41dfffff 	.word	0x41dfffff
 8007d90:	3fcfffff 	.word	0x3fcfffff

08007d94 <strtof>:
 8007d94:	000a      	movs	r2, r1
 8007d96:	0001      	movs	r1, r0
 8007d98:	4824      	ldr	r0, [pc, #144]	; (8007e2c <strtof+0x98>)
 8007d9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d9c:	6800      	ldr	r0, [r0, #0]
 8007d9e:	4b24      	ldr	r3, [pc, #144]	; (8007e30 <strtof+0x9c>)
 8007da0:	f7ff f9e4 	bl	800716c <_strtod_l>
 8007da4:	0006      	movs	r6, r0
 8007da6:	000c      	movs	r4, r1
 8007da8:	0002      	movs	r2, r0
 8007daa:	000b      	movs	r3, r1
 8007dac:	0030      	movs	r0, r6
 8007dae:	0021      	movs	r1, r4
 8007db0:	f7fa fb10 	bl	80023d4 <__aeabi_dcmpun>
 8007db4:	2800      	cmp	r0, #0
 8007db6:	d00d      	beq.n	8007dd4 <strtof+0x40>
 8007db8:	481e      	ldr	r0, [pc, #120]	; (8007e34 <strtof+0xa0>)
 8007dba:	2c00      	cmp	r4, #0
 8007dbc:	da06      	bge.n	8007dcc <strtof+0x38>
 8007dbe:	f001 ff31 	bl	8009c24 <nanf>
 8007dc2:	2380      	movs	r3, #128	; 0x80
 8007dc4:	061b      	lsls	r3, r3, #24
 8007dc6:	18c5      	adds	r5, r0, r3
 8007dc8:	1c28      	adds	r0, r5, #0
 8007dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007dcc:	f001 ff2a 	bl	8009c24 <nanf>
 8007dd0:	1c05      	adds	r5, r0, #0
 8007dd2:	e7f9      	b.n	8007dc8 <strtof+0x34>
 8007dd4:	0021      	movs	r1, r4
 8007dd6:	0030      	movs	r0, r6
 8007dd8:	f7fa fba6 	bl	8002528 <__aeabi_d2f>
 8007ddc:	0047      	lsls	r7, r0, #1
 8007dde:	087f      	lsrs	r7, r7, #1
 8007de0:	1c05      	adds	r5, r0, #0
 8007de2:	4915      	ldr	r1, [pc, #84]	; (8007e38 <strtof+0xa4>)
 8007de4:	1c38      	adds	r0, r7, #0
 8007de6:	f7f8 fda3 	bl	8000930 <__aeabi_fcmpun>
 8007dea:	2800      	cmp	r0, #0
 8007dec:	d1ec      	bne.n	8007dc8 <strtof+0x34>
 8007dee:	4912      	ldr	r1, [pc, #72]	; (8007e38 <strtof+0xa4>)
 8007df0:	1c38      	adds	r0, r7, #0
 8007df2:	f7f8 fb73 	bl	80004dc <__aeabi_fcmple>
 8007df6:	2800      	cmp	r0, #0
 8007df8:	d1e6      	bne.n	8007dc8 <strtof+0x34>
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	0064      	lsls	r4, r4, #1
 8007dfe:	0864      	lsrs	r4, r4, #1
 8007e00:	0030      	movs	r0, r6
 8007e02:	0021      	movs	r1, r4
 8007e04:	4b0d      	ldr	r3, [pc, #52]	; (8007e3c <strtof+0xa8>)
 8007e06:	4252      	negs	r2, r2
 8007e08:	f7fa fae4 	bl	80023d4 <__aeabi_dcmpun>
 8007e0c:	2800      	cmp	r0, #0
 8007e0e:	d108      	bne.n	8007e22 <strtof+0x8e>
 8007e10:	2201      	movs	r2, #1
 8007e12:	0030      	movs	r0, r6
 8007e14:	0021      	movs	r1, r4
 8007e16:	4b09      	ldr	r3, [pc, #36]	; (8007e3c <strtof+0xa8>)
 8007e18:	4252      	negs	r2, r2
 8007e1a:	f7f8 fb25 	bl	8000468 <__aeabi_dcmple>
 8007e1e:	2800      	cmp	r0, #0
 8007e20:	d0d2      	beq.n	8007dc8 <strtof+0x34>
 8007e22:	2222      	movs	r2, #34	; 0x22
 8007e24:	4b01      	ldr	r3, [pc, #4]	; (8007e2c <strtof+0x98>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	601a      	str	r2, [r3, #0]
 8007e2a:	e7cd      	b.n	8007dc8 <strtof+0x34>
 8007e2c:	2000007c 	.word	0x2000007c
 8007e30:	200000e4 	.word	0x200000e4
 8007e34:	0800a8b7 	.word	0x0800a8b7
 8007e38:	7f7fffff 	.word	0x7f7fffff
 8007e3c:	7fefffff 	.word	0x7fefffff

08007e40 <strtok>:
 8007e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e42:	4b16      	ldr	r3, [pc, #88]	; (8007e9c <strtok+0x5c>)
 8007e44:	0005      	movs	r5, r0
 8007e46:	681f      	ldr	r7, [r3, #0]
 8007e48:	000e      	movs	r6, r1
 8007e4a:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8007e4c:	2c00      	cmp	r4, #0
 8007e4e:	d11d      	bne.n	8007e8c <strtok+0x4c>
 8007e50:	2050      	movs	r0, #80	; 0x50
 8007e52:	f000 fc95 	bl	8008780 <malloc>
 8007e56:	1e02      	subs	r2, r0, #0
 8007e58:	65b8      	str	r0, [r7, #88]	; 0x58
 8007e5a:	d104      	bne.n	8007e66 <strtok+0x26>
 8007e5c:	2157      	movs	r1, #87	; 0x57
 8007e5e:	4b10      	ldr	r3, [pc, #64]	; (8007ea0 <strtok+0x60>)
 8007e60:	4810      	ldr	r0, [pc, #64]	; (8007ea4 <strtok+0x64>)
 8007e62:	f000 f8eb 	bl	800803c <__assert_func>
 8007e66:	6004      	str	r4, [r0, #0]
 8007e68:	6044      	str	r4, [r0, #4]
 8007e6a:	6084      	str	r4, [r0, #8]
 8007e6c:	60c4      	str	r4, [r0, #12]
 8007e6e:	6104      	str	r4, [r0, #16]
 8007e70:	6144      	str	r4, [r0, #20]
 8007e72:	6184      	str	r4, [r0, #24]
 8007e74:	6284      	str	r4, [r0, #40]	; 0x28
 8007e76:	62c4      	str	r4, [r0, #44]	; 0x2c
 8007e78:	6304      	str	r4, [r0, #48]	; 0x30
 8007e7a:	6344      	str	r4, [r0, #52]	; 0x34
 8007e7c:	6384      	str	r4, [r0, #56]	; 0x38
 8007e7e:	63c4      	str	r4, [r0, #60]	; 0x3c
 8007e80:	6404      	str	r4, [r0, #64]	; 0x40
 8007e82:	6444      	str	r4, [r0, #68]	; 0x44
 8007e84:	6484      	str	r4, [r0, #72]	; 0x48
 8007e86:	64c4      	str	r4, [r0, #76]	; 0x4c
 8007e88:	7704      	strb	r4, [r0, #28]
 8007e8a:	6244      	str	r4, [r0, #36]	; 0x24
 8007e8c:	0031      	movs	r1, r6
 8007e8e:	0028      	movs	r0, r5
 8007e90:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007e92:	2301      	movs	r3, #1
 8007e94:	f000 f808 	bl	8007ea8 <__strtok_r>
 8007e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e9a:	46c0      	nop			; (mov r8, r8)
 8007e9c:	2000007c 	.word	0x2000007c
 8007ea0:	0800a808 	.word	0x0800a808
 8007ea4:	0800a81f 	.word	0x0800a81f

08007ea8 <__strtok_r>:
 8007ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007eaa:	2800      	cmp	r0, #0
 8007eac:	d102      	bne.n	8007eb4 <__strtok_r+0xc>
 8007eae:	6810      	ldr	r0, [r2, #0]
 8007eb0:	2800      	cmp	r0, #0
 8007eb2:	d013      	beq.n	8007edc <__strtok_r+0x34>
 8007eb4:	0004      	movs	r4, r0
 8007eb6:	0020      	movs	r0, r4
 8007eb8:	000e      	movs	r6, r1
 8007eba:	7805      	ldrb	r5, [r0, #0]
 8007ebc:	3401      	adds	r4, #1
 8007ebe:	7837      	ldrb	r7, [r6, #0]
 8007ec0:	2f00      	cmp	r7, #0
 8007ec2:	d104      	bne.n	8007ece <__strtok_r+0x26>
 8007ec4:	2d00      	cmp	r5, #0
 8007ec6:	d10f      	bne.n	8007ee8 <__strtok_r+0x40>
 8007ec8:	0028      	movs	r0, r5
 8007eca:	6015      	str	r5, [r2, #0]
 8007ecc:	e006      	b.n	8007edc <__strtok_r+0x34>
 8007ece:	3601      	adds	r6, #1
 8007ed0:	42bd      	cmp	r5, r7
 8007ed2:	d1f4      	bne.n	8007ebe <__strtok_r+0x16>
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d1ee      	bne.n	8007eb6 <__strtok_r+0xe>
 8007ed8:	6014      	str	r4, [r2, #0]
 8007eda:	7003      	strb	r3, [r0, #0]
 8007edc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ede:	002f      	movs	r7, r5
 8007ee0:	e00f      	b.n	8007f02 <__strtok_r+0x5a>
 8007ee2:	3301      	adds	r3, #1
 8007ee4:	2e00      	cmp	r6, #0
 8007ee6:	d104      	bne.n	8007ef2 <__strtok_r+0x4a>
 8007ee8:	0023      	movs	r3, r4
 8007eea:	3401      	adds	r4, #1
 8007eec:	781d      	ldrb	r5, [r3, #0]
 8007eee:	0027      	movs	r7, r4
 8007ef0:	000b      	movs	r3, r1
 8007ef2:	781e      	ldrb	r6, [r3, #0]
 8007ef4:	42b5      	cmp	r5, r6
 8007ef6:	d1f4      	bne.n	8007ee2 <__strtok_r+0x3a>
 8007ef8:	2d00      	cmp	r5, #0
 8007efa:	d0f0      	beq.n	8007ede <__strtok_r+0x36>
 8007efc:	2300      	movs	r3, #0
 8007efe:	3c01      	subs	r4, #1
 8007f00:	7023      	strb	r3, [r4, #0]
 8007f02:	6017      	str	r7, [r2, #0]
 8007f04:	e7ea      	b.n	8007edc <__strtok_r+0x34>
	...

08007f08 <_strtol_l.constprop.0>:
 8007f08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f0a:	b087      	sub	sp, #28
 8007f0c:	001e      	movs	r6, r3
 8007f0e:	9005      	str	r0, [sp, #20]
 8007f10:	9101      	str	r1, [sp, #4]
 8007f12:	9202      	str	r2, [sp, #8]
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	d045      	beq.n	8007fa4 <_strtol_l.constprop.0+0x9c>
 8007f18:	000b      	movs	r3, r1
 8007f1a:	2e24      	cmp	r6, #36	; 0x24
 8007f1c:	d842      	bhi.n	8007fa4 <_strtol_l.constprop.0+0x9c>
 8007f1e:	4a3f      	ldr	r2, [pc, #252]	; (800801c <_strtol_l.constprop.0+0x114>)
 8007f20:	2108      	movs	r1, #8
 8007f22:	4694      	mov	ip, r2
 8007f24:	001a      	movs	r2, r3
 8007f26:	4660      	mov	r0, ip
 8007f28:	7814      	ldrb	r4, [r2, #0]
 8007f2a:	3301      	adds	r3, #1
 8007f2c:	5d00      	ldrb	r0, [r0, r4]
 8007f2e:	001d      	movs	r5, r3
 8007f30:	0007      	movs	r7, r0
 8007f32:	400f      	ands	r7, r1
 8007f34:	4208      	tst	r0, r1
 8007f36:	d1f5      	bne.n	8007f24 <_strtol_l.constprop.0+0x1c>
 8007f38:	2c2d      	cmp	r4, #45	; 0x2d
 8007f3a:	d13a      	bne.n	8007fb2 <_strtol_l.constprop.0+0xaa>
 8007f3c:	2701      	movs	r7, #1
 8007f3e:	781c      	ldrb	r4, [r3, #0]
 8007f40:	1c95      	adds	r5, r2, #2
 8007f42:	2e00      	cmp	r6, #0
 8007f44:	d065      	beq.n	8008012 <_strtol_l.constprop.0+0x10a>
 8007f46:	2e10      	cmp	r6, #16
 8007f48:	d109      	bne.n	8007f5e <_strtol_l.constprop.0+0x56>
 8007f4a:	2c30      	cmp	r4, #48	; 0x30
 8007f4c:	d107      	bne.n	8007f5e <_strtol_l.constprop.0+0x56>
 8007f4e:	2220      	movs	r2, #32
 8007f50:	782b      	ldrb	r3, [r5, #0]
 8007f52:	4393      	bics	r3, r2
 8007f54:	2b58      	cmp	r3, #88	; 0x58
 8007f56:	d157      	bne.n	8008008 <_strtol_l.constprop.0+0x100>
 8007f58:	2610      	movs	r6, #16
 8007f5a:	786c      	ldrb	r4, [r5, #1]
 8007f5c:	3502      	adds	r5, #2
 8007f5e:	4b30      	ldr	r3, [pc, #192]	; (8008020 <_strtol_l.constprop.0+0x118>)
 8007f60:	0031      	movs	r1, r6
 8007f62:	18fb      	adds	r3, r7, r3
 8007f64:	0018      	movs	r0, r3
 8007f66:	9303      	str	r3, [sp, #12]
 8007f68:	f7f8 f96e 	bl	8000248 <__aeabi_uidivmod>
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	2201      	movs	r2, #1
 8007f70:	4684      	mov	ip, r0
 8007f72:	0018      	movs	r0, r3
 8007f74:	9104      	str	r1, [sp, #16]
 8007f76:	4252      	negs	r2, r2
 8007f78:	0021      	movs	r1, r4
 8007f7a:	3930      	subs	r1, #48	; 0x30
 8007f7c:	2909      	cmp	r1, #9
 8007f7e:	d81d      	bhi.n	8007fbc <_strtol_l.constprop.0+0xb4>
 8007f80:	000c      	movs	r4, r1
 8007f82:	42a6      	cmp	r6, r4
 8007f84:	dd28      	ble.n	8007fd8 <_strtol_l.constprop.0+0xd0>
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	db24      	blt.n	8007fd4 <_strtol_l.constprop.0+0xcc>
 8007f8a:	0013      	movs	r3, r2
 8007f8c:	4584      	cmp	ip, r0
 8007f8e:	d306      	bcc.n	8007f9e <_strtol_l.constprop.0+0x96>
 8007f90:	d102      	bne.n	8007f98 <_strtol_l.constprop.0+0x90>
 8007f92:	9904      	ldr	r1, [sp, #16]
 8007f94:	42a1      	cmp	r1, r4
 8007f96:	db02      	blt.n	8007f9e <_strtol_l.constprop.0+0x96>
 8007f98:	2301      	movs	r3, #1
 8007f9a:	4370      	muls	r0, r6
 8007f9c:	1820      	adds	r0, r4, r0
 8007f9e:	782c      	ldrb	r4, [r5, #0]
 8007fa0:	3501      	adds	r5, #1
 8007fa2:	e7e9      	b.n	8007f78 <_strtol_l.constprop.0+0x70>
 8007fa4:	f7ff f846 	bl	8007034 <__errno>
 8007fa8:	2316      	movs	r3, #22
 8007faa:	6003      	str	r3, [r0, #0]
 8007fac:	2000      	movs	r0, #0
 8007fae:	b007      	add	sp, #28
 8007fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fb2:	2c2b      	cmp	r4, #43	; 0x2b
 8007fb4:	d1c5      	bne.n	8007f42 <_strtol_l.constprop.0+0x3a>
 8007fb6:	781c      	ldrb	r4, [r3, #0]
 8007fb8:	1c95      	adds	r5, r2, #2
 8007fba:	e7c2      	b.n	8007f42 <_strtol_l.constprop.0+0x3a>
 8007fbc:	0021      	movs	r1, r4
 8007fbe:	3941      	subs	r1, #65	; 0x41
 8007fc0:	2919      	cmp	r1, #25
 8007fc2:	d801      	bhi.n	8007fc8 <_strtol_l.constprop.0+0xc0>
 8007fc4:	3c37      	subs	r4, #55	; 0x37
 8007fc6:	e7dc      	b.n	8007f82 <_strtol_l.constprop.0+0x7a>
 8007fc8:	0021      	movs	r1, r4
 8007fca:	3961      	subs	r1, #97	; 0x61
 8007fcc:	2919      	cmp	r1, #25
 8007fce:	d803      	bhi.n	8007fd8 <_strtol_l.constprop.0+0xd0>
 8007fd0:	3c57      	subs	r4, #87	; 0x57
 8007fd2:	e7d6      	b.n	8007f82 <_strtol_l.constprop.0+0x7a>
 8007fd4:	0013      	movs	r3, r2
 8007fd6:	e7e2      	b.n	8007f9e <_strtol_l.constprop.0+0x96>
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	da09      	bge.n	8007ff0 <_strtol_l.constprop.0+0xe8>
 8007fdc:	2322      	movs	r3, #34	; 0x22
 8007fde:	9a05      	ldr	r2, [sp, #20]
 8007fe0:	9803      	ldr	r0, [sp, #12]
 8007fe2:	6013      	str	r3, [r2, #0]
 8007fe4:	9b02      	ldr	r3, [sp, #8]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d0e1      	beq.n	8007fae <_strtol_l.constprop.0+0xa6>
 8007fea:	1e6b      	subs	r3, r5, #1
 8007fec:	9301      	str	r3, [sp, #4]
 8007fee:	e007      	b.n	8008000 <_strtol_l.constprop.0+0xf8>
 8007ff0:	2f00      	cmp	r7, #0
 8007ff2:	d000      	beq.n	8007ff6 <_strtol_l.constprop.0+0xee>
 8007ff4:	4240      	negs	r0, r0
 8007ff6:	9a02      	ldr	r2, [sp, #8]
 8007ff8:	2a00      	cmp	r2, #0
 8007ffa:	d0d8      	beq.n	8007fae <_strtol_l.constprop.0+0xa6>
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d1f4      	bne.n	8007fea <_strtol_l.constprop.0+0xe2>
 8008000:	9b02      	ldr	r3, [sp, #8]
 8008002:	9a01      	ldr	r2, [sp, #4]
 8008004:	601a      	str	r2, [r3, #0]
 8008006:	e7d2      	b.n	8007fae <_strtol_l.constprop.0+0xa6>
 8008008:	2430      	movs	r4, #48	; 0x30
 800800a:	2e00      	cmp	r6, #0
 800800c:	d1a7      	bne.n	8007f5e <_strtol_l.constprop.0+0x56>
 800800e:	3608      	adds	r6, #8
 8008010:	e7a5      	b.n	8007f5e <_strtol_l.constprop.0+0x56>
 8008012:	2c30      	cmp	r4, #48	; 0x30
 8008014:	d09b      	beq.n	8007f4e <_strtol_l.constprop.0+0x46>
 8008016:	260a      	movs	r6, #10
 8008018:	e7a1      	b.n	8007f5e <_strtol_l.constprop.0+0x56>
 800801a:	46c0      	nop			; (mov r8, r8)
 800801c:	0800a8b9 	.word	0x0800a8b9
 8008020:	7fffffff 	.word	0x7fffffff

08008024 <strtol>:
 8008024:	b510      	push	{r4, lr}
 8008026:	0013      	movs	r3, r2
 8008028:	000a      	movs	r2, r1
 800802a:	0001      	movs	r1, r0
 800802c:	4802      	ldr	r0, [pc, #8]	; (8008038 <strtol+0x14>)
 800802e:	6800      	ldr	r0, [r0, #0]
 8008030:	f7ff ff6a 	bl	8007f08 <_strtol_l.constprop.0>
 8008034:	bd10      	pop	{r4, pc}
 8008036:	46c0      	nop			; (mov r8, r8)
 8008038:	2000007c 	.word	0x2000007c

0800803c <__assert_func>:
 800803c:	b530      	push	{r4, r5, lr}
 800803e:	0014      	movs	r4, r2
 8008040:	001a      	movs	r2, r3
 8008042:	4b09      	ldr	r3, [pc, #36]	; (8008068 <__assert_func+0x2c>)
 8008044:	0005      	movs	r5, r0
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	b085      	sub	sp, #20
 800804a:	68d8      	ldr	r0, [r3, #12]
 800804c:	4b07      	ldr	r3, [pc, #28]	; (800806c <__assert_func+0x30>)
 800804e:	2c00      	cmp	r4, #0
 8008050:	d101      	bne.n	8008056 <__assert_func+0x1a>
 8008052:	4b07      	ldr	r3, [pc, #28]	; (8008070 <__assert_func+0x34>)
 8008054:	001c      	movs	r4, r3
 8008056:	9301      	str	r3, [sp, #4]
 8008058:	9100      	str	r1, [sp, #0]
 800805a:	002b      	movs	r3, r5
 800805c:	4905      	ldr	r1, [pc, #20]	; (8008074 <__assert_func+0x38>)
 800805e:	9402      	str	r4, [sp, #8]
 8008060:	f000 f80a 	bl	8008078 <fiprintf>
 8008064:	f001 febe 	bl	8009de4 <abort>
 8008068:	2000007c 	.word	0x2000007c
 800806c:	0800a87c 	.word	0x0800a87c
 8008070:	0800a8b7 	.word	0x0800a8b7
 8008074:	0800a889 	.word	0x0800a889

08008078 <fiprintf>:
 8008078:	b40e      	push	{r1, r2, r3}
 800807a:	b503      	push	{r0, r1, lr}
 800807c:	0001      	movs	r1, r0
 800807e:	ab03      	add	r3, sp, #12
 8008080:	4804      	ldr	r0, [pc, #16]	; (8008094 <fiprintf+0x1c>)
 8008082:	cb04      	ldmia	r3!, {r2}
 8008084:	6800      	ldr	r0, [r0, #0]
 8008086:	9301      	str	r3, [sp, #4]
 8008088:	f001 faf8 	bl	800967c <_vfiprintf_r>
 800808c:	b002      	add	sp, #8
 800808e:	bc08      	pop	{r3}
 8008090:	b003      	add	sp, #12
 8008092:	4718      	bx	r3
 8008094:	2000007c 	.word	0x2000007c

08008098 <rshift>:
 8008098:	0002      	movs	r2, r0
 800809a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800809c:	6904      	ldr	r4, [r0, #16]
 800809e:	3214      	adds	r2, #20
 80080a0:	0013      	movs	r3, r2
 80080a2:	b085      	sub	sp, #20
 80080a4:	114f      	asrs	r7, r1, #5
 80080a6:	42bc      	cmp	r4, r7
 80080a8:	dd31      	ble.n	800810e <rshift+0x76>
 80080aa:	00bb      	lsls	r3, r7, #2
 80080ac:	18d3      	adds	r3, r2, r3
 80080ae:	261f      	movs	r6, #31
 80080b0:	9301      	str	r3, [sp, #4]
 80080b2:	000b      	movs	r3, r1
 80080b4:	00a5      	lsls	r5, r4, #2
 80080b6:	4033      	ands	r3, r6
 80080b8:	1955      	adds	r5, r2, r5
 80080ba:	9302      	str	r3, [sp, #8]
 80080bc:	4231      	tst	r1, r6
 80080be:	d10c      	bne.n	80080da <rshift+0x42>
 80080c0:	0016      	movs	r6, r2
 80080c2:	9901      	ldr	r1, [sp, #4]
 80080c4:	428d      	cmp	r5, r1
 80080c6:	d838      	bhi.n	800813a <rshift+0xa2>
 80080c8:	9901      	ldr	r1, [sp, #4]
 80080ca:	2300      	movs	r3, #0
 80080cc:	3903      	subs	r1, #3
 80080ce:	428d      	cmp	r5, r1
 80080d0:	d301      	bcc.n	80080d6 <rshift+0x3e>
 80080d2:	1be3      	subs	r3, r4, r7
 80080d4:	009b      	lsls	r3, r3, #2
 80080d6:	18d3      	adds	r3, r2, r3
 80080d8:	e019      	b.n	800810e <rshift+0x76>
 80080da:	2120      	movs	r1, #32
 80080dc:	9b02      	ldr	r3, [sp, #8]
 80080de:	9e01      	ldr	r6, [sp, #4]
 80080e0:	1acb      	subs	r3, r1, r3
 80080e2:	9303      	str	r3, [sp, #12]
 80080e4:	ce02      	ldmia	r6!, {r1}
 80080e6:	9b02      	ldr	r3, [sp, #8]
 80080e8:	4694      	mov	ip, r2
 80080ea:	40d9      	lsrs	r1, r3
 80080ec:	9100      	str	r1, [sp, #0]
 80080ee:	42b5      	cmp	r5, r6
 80080f0:	d816      	bhi.n	8008120 <rshift+0x88>
 80080f2:	9e01      	ldr	r6, [sp, #4]
 80080f4:	2300      	movs	r3, #0
 80080f6:	3601      	adds	r6, #1
 80080f8:	42b5      	cmp	r5, r6
 80080fa:	d302      	bcc.n	8008102 <rshift+0x6a>
 80080fc:	1be3      	subs	r3, r4, r7
 80080fe:	009b      	lsls	r3, r3, #2
 8008100:	3b04      	subs	r3, #4
 8008102:	9900      	ldr	r1, [sp, #0]
 8008104:	18d3      	adds	r3, r2, r3
 8008106:	6019      	str	r1, [r3, #0]
 8008108:	2900      	cmp	r1, #0
 800810a:	d000      	beq.n	800810e <rshift+0x76>
 800810c:	3304      	adds	r3, #4
 800810e:	1a99      	subs	r1, r3, r2
 8008110:	1089      	asrs	r1, r1, #2
 8008112:	6101      	str	r1, [r0, #16]
 8008114:	4293      	cmp	r3, r2
 8008116:	d101      	bne.n	800811c <rshift+0x84>
 8008118:	2300      	movs	r3, #0
 800811a:	6143      	str	r3, [r0, #20]
 800811c:	b005      	add	sp, #20
 800811e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008120:	6833      	ldr	r3, [r6, #0]
 8008122:	9903      	ldr	r1, [sp, #12]
 8008124:	408b      	lsls	r3, r1
 8008126:	9900      	ldr	r1, [sp, #0]
 8008128:	4319      	orrs	r1, r3
 800812a:	4663      	mov	r3, ip
 800812c:	c302      	stmia	r3!, {r1}
 800812e:	469c      	mov	ip, r3
 8008130:	ce02      	ldmia	r6!, {r1}
 8008132:	9b02      	ldr	r3, [sp, #8]
 8008134:	40d9      	lsrs	r1, r3
 8008136:	9100      	str	r1, [sp, #0]
 8008138:	e7d9      	b.n	80080ee <rshift+0x56>
 800813a:	c908      	ldmia	r1!, {r3}
 800813c:	c608      	stmia	r6!, {r3}
 800813e:	e7c1      	b.n	80080c4 <rshift+0x2c>

08008140 <__hexdig_fun>:
 8008140:	0002      	movs	r2, r0
 8008142:	3a30      	subs	r2, #48	; 0x30
 8008144:	0003      	movs	r3, r0
 8008146:	2a09      	cmp	r2, #9
 8008148:	d802      	bhi.n	8008150 <__hexdig_fun+0x10>
 800814a:	3b20      	subs	r3, #32
 800814c:	b2d8      	uxtb	r0, r3
 800814e:	4770      	bx	lr
 8008150:	0002      	movs	r2, r0
 8008152:	3a61      	subs	r2, #97	; 0x61
 8008154:	2a05      	cmp	r2, #5
 8008156:	d801      	bhi.n	800815c <__hexdig_fun+0x1c>
 8008158:	3b47      	subs	r3, #71	; 0x47
 800815a:	e7f7      	b.n	800814c <__hexdig_fun+0xc>
 800815c:	001a      	movs	r2, r3
 800815e:	3a41      	subs	r2, #65	; 0x41
 8008160:	2000      	movs	r0, #0
 8008162:	2a05      	cmp	r2, #5
 8008164:	d8f3      	bhi.n	800814e <__hexdig_fun+0xe>
 8008166:	3b27      	subs	r3, #39	; 0x27
 8008168:	e7f0      	b.n	800814c <__hexdig_fun+0xc>
	...

0800816c <__gethex>:
 800816c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800816e:	b08d      	sub	sp, #52	; 0x34
 8008170:	930a      	str	r3, [sp, #40]	; 0x28
 8008172:	4bbf      	ldr	r3, [pc, #764]	; (8008470 <__gethex+0x304>)
 8008174:	9005      	str	r0, [sp, #20]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	9109      	str	r1, [sp, #36]	; 0x24
 800817a:	0018      	movs	r0, r3
 800817c:	9202      	str	r2, [sp, #8]
 800817e:	9307      	str	r3, [sp, #28]
 8008180:	f7f7 ffc0 	bl	8000104 <strlen>
 8008184:	2202      	movs	r2, #2
 8008186:	9b07      	ldr	r3, [sp, #28]
 8008188:	4252      	negs	r2, r2
 800818a:	181b      	adds	r3, r3, r0
 800818c:	3b01      	subs	r3, #1
 800818e:	781b      	ldrb	r3, [r3, #0]
 8008190:	9003      	str	r0, [sp, #12]
 8008192:	930b      	str	r3, [sp, #44]	; 0x2c
 8008194:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008196:	6819      	ldr	r1, [r3, #0]
 8008198:	1c8b      	adds	r3, r1, #2
 800819a:	1a52      	subs	r2, r2, r1
 800819c:	18d1      	adds	r1, r2, r3
 800819e:	9301      	str	r3, [sp, #4]
 80081a0:	9108      	str	r1, [sp, #32]
 80081a2:	9901      	ldr	r1, [sp, #4]
 80081a4:	3301      	adds	r3, #1
 80081a6:	7808      	ldrb	r0, [r1, #0]
 80081a8:	2830      	cmp	r0, #48	; 0x30
 80081aa:	d0f7      	beq.n	800819c <__gethex+0x30>
 80081ac:	f7ff ffc8 	bl	8008140 <__hexdig_fun>
 80081b0:	2300      	movs	r3, #0
 80081b2:	001c      	movs	r4, r3
 80081b4:	9304      	str	r3, [sp, #16]
 80081b6:	4298      	cmp	r0, r3
 80081b8:	d11f      	bne.n	80081fa <__gethex+0x8e>
 80081ba:	9a03      	ldr	r2, [sp, #12]
 80081bc:	9907      	ldr	r1, [sp, #28]
 80081be:	9801      	ldr	r0, [sp, #4]
 80081c0:	f7fe ff94 	bl	80070ec <strncmp>
 80081c4:	0007      	movs	r7, r0
 80081c6:	42a0      	cmp	r0, r4
 80081c8:	d000      	beq.n	80081cc <__gethex+0x60>
 80081ca:	e06b      	b.n	80082a4 <__gethex+0x138>
 80081cc:	9b01      	ldr	r3, [sp, #4]
 80081ce:	9a03      	ldr	r2, [sp, #12]
 80081d0:	5c98      	ldrb	r0, [r3, r2]
 80081d2:	189d      	adds	r5, r3, r2
 80081d4:	f7ff ffb4 	bl	8008140 <__hexdig_fun>
 80081d8:	2301      	movs	r3, #1
 80081da:	9304      	str	r3, [sp, #16]
 80081dc:	42a0      	cmp	r0, r4
 80081de:	d030      	beq.n	8008242 <__gethex+0xd6>
 80081e0:	9501      	str	r5, [sp, #4]
 80081e2:	9b01      	ldr	r3, [sp, #4]
 80081e4:	7818      	ldrb	r0, [r3, #0]
 80081e6:	2830      	cmp	r0, #48	; 0x30
 80081e8:	d009      	beq.n	80081fe <__gethex+0x92>
 80081ea:	f7ff ffa9 	bl	8008140 <__hexdig_fun>
 80081ee:	4242      	negs	r2, r0
 80081f0:	4142      	adcs	r2, r0
 80081f2:	2301      	movs	r3, #1
 80081f4:	002c      	movs	r4, r5
 80081f6:	9204      	str	r2, [sp, #16]
 80081f8:	9308      	str	r3, [sp, #32]
 80081fa:	9d01      	ldr	r5, [sp, #4]
 80081fc:	e004      	b.n	8008208 <__gethex+0x9c>
 80081fe:	9b01      	ldr	r3, [sp, #4]
 8008200:	3301      	adds	r3, #1
 8008202:	9301      	str	r3, [sp, #4]
 8008204:	e7ed      	b.n	80081e2 <__gethex+0x76>
 8008206:	3501      	adds	r5, #1
 8008208:	7828      	ldrb	r0, [r5, #0]
 800820a:	f7ff ff99 	bl	8008140 <__hexdig_fun>
 800820e:	1e07      	subs	r7, r0, #0
 8008210:	d1f9      	bne.n	8008206 <__gethex+0x9a>
 8008212:	0028      	movs	r0, r5
 8008214:	9a03      	ldr	r2, [sp, #12]
 8008216:	9907      	ldr	r1, [sp, #28]
 8008218:	f7fe ff68 	bl	80070ec <strncmp>
 800821c:	2800      	cmp	r0, #0
 800821e:	d10e      	bne.n	800823e <__gethex+0xd2>
 8008220:	2c00      	cmp	r4, #0
 8008222:	d107      	bne.n	8008234 <__gethex+0xc8>
 8008224:	9b03      	ldr	r3, [sp, #12]
 8008226:	18ed      	adds	r5, r5, r3
 8008228:	002c      	movs	r4, r5
 800822a:	7828      	ldrb	r0, [r5, #0]
 800822c:	f7ff ff88 	bl	8008140 <__hexdig_fun>
 8008230:	2800      	cmp	r0, #0
 8008232:	d102      	bne.n	800823a <__gethex+0xce>
 8008234:	1b64      	subs	r4, r4, r5
 8008236:	00a7      	lsls	r7, r4, #2
 8008238:	e003      	b.n	8008242 <__gethex+0xd6>
 800823a:	3501      	adds	r5, #1
 800823c:	e7f5      	b.n	800822a <__gethex+0xbe>
 800823e:	2c00      	cmp	r4, #0
 8008240:	d1f8      	bne.n	8008234 <__gethex+0xc8>
 8008242:	2220      	movs	r2, #32
 8008244:	782b      	ldrb	r3, [r5, #0]
 8008246:	002e      	movs	r6, r5
 8008248:	4393      	bics	r3, r2
 800824a:	2b50      	cmp	r3, #80	; 0x50
 800824c:	d11d      	bne.n	800828a <__gethex+0x11e>
 800824e:	786b      	ldrb	r3, [r5, #1]
 8008250:	2b2b      	cmp	r3, #43	; 0x2b
 8008252:	d02c      	beq.n	80082ae <__gethex+0x142>
 8008254:	2b2d      	cmp	r3, #45	; 0x2d
 8008256:	d02e      	beq.n	80082b6 <__gethex+0x14a>
 8008258:	2300      	movs	r3, #0
 800825a:	1c6e      	adds	r6, r5, #1
 800825c:	9306      	str	r3, [sp, #24]
 800825e:	7830      	ldrb	r0, [r6, #0]
 8008260:	f7ff ff6e 	bl	8008140 <__hexdig_fun>
 8008264:	1e43      	subs	r3, r0, #1
 8008266:	b2db      	uxtb	r3, r3
 8008268:	2b18      	cmp	r3, #24
 800826a:	d82b      	bhi.n	80082c4 <__gethex+0x158>
 800826c:	3810      	subs	r0, #16
 800826e:	0004      	movs	r4, r0
 8008270:	7870      	ldrb	r0, [r6, #1]
 8008272:	f7ff ff65 	bl	8008140 <__hexdig_fun>
 8008276:	1e43      	subs	r3, r0, #1
 8008278:	b2db      	uxtb	r3, r3
 800827a:	3601      	adds	r6, #1
 800827c:	2b18      	cmp	r3, #24
 800827e:	d91c      	bls.n	80082ba <__gethex+0x14e>
 8008280:	9b06      	ldr	r3, [sp, #24]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d000      	beq.n	8008288 <__gethex+0x11c>
 8008286:	4264      	negs	r4, r4
 8008288:	193f      	adds	r7, r7, r4
 800828a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800828c:	601e      	str	r6, [r3, #0]
 800828e:	9b04      	ldr	r3, [sp, #16]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d019      	beq.n	80082c8 <__gethex+0x15c>
 8008294:	2600      	movs	r6, #0
 8008296:	9b08      	ldr	r3, [sp, #32]
 8008298:	42b3      	cmp	r3, r6
 800829a:	d100      	bne.n	800829e <__gethex+0x132>
 800829c:	3606      	adds	r6, #6
 800829e:	0030      	movs	r0, r6
 80082a0:	b00d      	add	sp, #52	; 0x34
 80082a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082a4:	2301      	movs	r3, #1
 80082a6:	2700      	movs	r7, #0
 80082a8:	9d01      	ldr	r5, [sp, #4]
 80082aa:	9304      	str	r3, [sp, #16]
 80082ac:	e7c9      	b.n	8008242 <__gethex+0xd6>
 80082ae:	2300      	movs	r3, #0
 80082b0:	9306      	str	r3, [sp, #24]
 80082b2:	1cae      	adds	r6, r5, #2
 80082b4:	e7d3      	b.n	800825e <__gethex+0xf2>
 80082b6:	2301      	movs	r3, #1
 80082b8:	e7fa      	b.n	80082b0 <__gethex+0x144>
 80082ba:	230a      	movs	r3, #10
 80082bc:	435c      	muls	r4, r3
 80082be:	1824      	adds	r4, r4, r0
 80082c0:	3c10      	subs	r4, #16
 80082c2:	e7d5      	b.n	8008270 <__gethex+0x104>
 80082c4:	002e      	movs	r6, r5
 80082c6:	e7e0      	b.n	800828a <__gethex+0x11e>
 80082c8:	9b01      	ldr	r3, [sp, #4]
 80082ca:	9904      	ldr	r1, [sp, #16]
 80082cc:	1aeb      	subs	r3, r5, r3
 80082ce:	3b01      	subs	r3, #1
 80082d0:	2b07      	cmp	r3, #7
 80082d2:	dc0a      	bgt.n	80082ea <__gethex+0x17e>
 80082d4:	9805      	ldr	r0, [sp, #20]
 80082d6:	f000 fa6f 	bl	80087b8 <_Balloc>
 80082da:	1e04      	subs	r4, r0, #0
 80082dc:	d108      	bne.n	80082f0 <__gethex+0x184>
 80082de:	0002      	movs	r2, r0
 80082e0:	21de      	movs	r1, #222	; 0xde
 80082e2:	4b64      	ldr	r3, [pc, #400]	; (8008474 <__gethex+0x308>)
 80082e4:	4864      	ldr	r0, [pc, #400]	; (8008478 <__gethex+0x30c>)
 80082e6:	f7ff fea9 	bl	800803c <__assert_func>
 80082ea:	3101      	adds	r1, #1
 80082ec:	105b      	asrs	r3, r3, #1
 80082ee:	e7ef      	b.n	80082d0 <__gethex+0x164>
 80082f0:	0003      	movs	r3, r0
 80082f2:	3314      	adds	r3, #20
 80082f4:	9304      	str	r3, [sp, #16]
 80082f6:	9309      	str	r3, [sp, #36]	; 0x24
 80082f8:	2300      	movs	r3, #0
 80082fa:	001e      	movs	r6, r3
 80082fc:	9306      	str	r3, [sp, #24]
 80082fe:	9b01      	ldr	r3, [sp, #4]
 8008300:	42ab      	cmp	r3, r5
 8008302:	d340      	bcc.n	8008386 <__gethex+0x21a>
 8008304:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008306:	9b04      	ldr	r3, [sp, #16]
 8008308:	c540      	stmia	r5!, {r6}
 800830a:	1aed      	subs	r5, r5, r3
 800830c:	10ad      	asrs	r5, r5, #2
 800830e:	0030      	movs	r0, r6
 8008310:	6125      	str	r5, [r4, #16]
 8008312:	f000 fb49 	bl	80089a8 <__hi0bits>
 8008316:	9b02      	ldr	r3, [sp, #8]
 8008318:	016d      	lsls	r5, r5, #5
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	1a2e      	subs	r6, r5, r0
 800831e:	9301      	str	r3, [sp, #4]
 8008320:	429e      	cmp	r6, r3
 8008322:	dd5a      	ble.n	80083da <__gethex+0x26e>
 8008324:	1af6      	subs	r6, r6, r3
 8008326:	0031      	movs	r1, r6
 8008328:	0020      	movs	r0, r4
 800832a:	f000 feeb 	bl	8009104 <__any_on>
 800832e:	1e05      	subs	r5, r0, #0
 8008330:	d016      	beq.n	8008360 <__gethex+0x1f4>
 8008332:	2501      	movs	r5, #1
 8008334:	211f      	movs	r1, #31
 8008336:	0028      	movs	r0, r5
 8008338:	1e73      	subs	r3, r6, #1
 800833a:	4019      	ands	r1, r3
 800833c:	4088      	lsls	r0, r1
 800833e:	0001      	movs	r1, r0
 8008340:	115a      	asrs	r2, r3, #5
 8008342:	9804      	ldr	r0, [sp, #16]
 8008344:	0092      	lsls	r2, r2, #2
 8008346:	5812      	ldr	r2, [r2, r0]
 8008348:	420a      	tst	r2, r1
 800834a:	d009      	beq.n	8008360 <__gethex+0x1f4>
 800834c:	42ab      	cmp	r3, r5
 800834e:	dd06      	ble.n	800835e <__gethex+0x1f2>
 8008350:	0020      	movs	r0, r4
 8008352:	1eb1      	subs	r1, r6, #2
 8008354:	f000 fed6 	bl	8009104 <__any_on>
 8008358:	3502      	adds	r5, #2
 800835a:	2800      	cmp	r0, #0
 800835c:	d100      	bne.n	8008360 <__gethex+0x1f4>
 800835e:	2502      	movs	r5, #2
 8008360:	0031      	movs	r1, r6
 8008362:	0020      	movs	r0, r4
 8008364:	f7ff fe98 	bl	8008098 <rshift>
 8008368:	19bf      	adds	r7, r7, r6
 800836a:	9b02      	ldr	r3, [sp, #8]
 800836c:	689b      	ldr	r3, [r3, #8]
 800836e:	9303      	str	r3, [sp, #12]
 8008370:	42bb      	cmp	r3, r7
 8008372:	da42      	bge.n	80083fa <__gethex+0x28e>
 8008374:	0021      	movs	r1, r4
 8008376:	9805      	ldr	r0, [sp, #20]
 8008378:	f000 fa62 	bl	8008840 <_Bfree>
 800837c:	2300      	movs	r3, #0
 800837e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008380:	26a3      	movs	r6, #163	; 0xa3
 8008382:	6013      	str	r3, [r2, #0]
 8008384:	e78b      	b.n	800829e <__gethex+0x132>
 8008386:	1e6b      	subs	r3, r5, #1
 8008388:	9308      	str	r3, [sp, #32]
 800838a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800838c:	781b      	ldrb	r3, [r3, #0]
 800838e:	4293      	cmp	r3, r2
 8008390:	d014      	beq.n	80083bc <__gethex+0x250>
 8008392:	9b06      	ldr	r3, [sp, #24]
 8008394:	2b20      	cmp	r3, #32
 8008396:	d104      	bne.n	80083a2 <__gethex+0x236>
 8008398:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800839a:	c340      	stmia	r3!, {r6}
 800839c:	2600      	movs	r6, #0
 800839e:	9309      	str	r3, [sp, #36]	; 0x24
 80083a0:	9606      	str	r6, [sp, #24]
 80083a2:	9b08      	ldr	r3, [sp, #32]
 80083a4:	7818      	ldrb	r0, [r3, #0]
 80083a6:	f7ff fecb 	bl	8008140 <__hexdig_fun>
 80083aa:	230f      	movs	r3, #15
 80083ac:	4018      	ands	r0, r3
 80083ae:	9b06      	ldr	r3, [sp, #24]
 80083b0:	9d08      	ldr	r5, [sp, #32]
 80083b2:	4098      	lsls	r0, r3
 80083b4:	3304      	adds	r3, #4
 80083b6:	4306      	orrs	r6, r0
 80083b8:	9306      	str	r3, [sp, #24]
 80083ba:	e7a0      	b.n	80082fe <__gethex+0x192>
 80083bc:	2301      	movs	r3, #1
 80083be:	9a03      	ldr	r2, [sp, #12]
 80083c0:	1a9d      	subs	r5, r3, r2
 80083c2:	9b08      	ldr	r3, [sp, #32]
 80083c4:	195d      	adds	r5, r3, r5
 80083c6:	9b01      	ldr	r3, [sp, #4]
 80083c8:	429d      	cmp	r5, r3
 80083ca:	d3e2      	bcc.n	8008392 <__gethex+0x226>
 80083cc:	0028      	movs	r0, r5
 80083ce:	9907      	ldr	r1, [sp, #28]
 80083d0:	f7fe fe8c 	bl	80070ec <strncmp>
 80083d4:	2800      	cmp	r0, #0
 80083d6:	d1dc      	bne.n	8008392 <__gethex+0x226>
 80083d8:	e791      	b.n	80082fe <__gethex+0x192>
 80083da:	9b01      	ldr	r3, [sp, #4]
 80083dc:	2500      	movs	r5, #0
 80083de:	429e      	cmp	r6, r3
 80083e0:	dac3      	bge.n	800836a <__gethex+0x1fe>
 80083e2:	1b9e      	subs	r6, r3, r6
 80083e4:	0021      	movs	r1, r4
 80083e6:	0032      	movs	r2, r6
 80083e8:	9805      	ldr	r0, [sp, #20]
 80083ea:	f000 fc47 	bl	8008c7c <__lshift>
 80083ee:	0003      	movs	r3, r0
 80083f0:	3314      	adds	r3, #20
 80083f2:	0004      	movs	r4, r0
 80083f4:	1bbf      	subs	r7, r7, r6
 80083f6:	9304      	str	r3, [sp, #16]
 80083f8:	e7b7      	b.n	800836a <__gethex+0x1fe>
 80083fa:	9b02      	ldr	r3, [sp, #8]
 80083fc:	685e      	ldr	r6, [r3, #4]
 80083fe:	42be      	cmp	r6, r7
 8008400:	dd71      	ble.n	80084e6 <__gethex+0x37a>
 8008402:	9b01      	ldr	r3, [sp, #4]
 8008404:	1bf6      	subs	r6, r6, r7
 8008406:	42b3      	cmp	r3, r6
 8008408:	dc38      	bgt.n	800847c <__gethex+0x310>
 800840a:	9b02      	ldr	r3, [sp, #8]
 800840c:	68db      	ldr	r3, [r3, #12]
 800840e:	2b02      	cmp	r3, #2
 8008410:	d026      	beq.n	8008460 <__gethex+0x2f4>
 8008412:	2b03      	cmp	r3, #3
 8008414:	d028      	beq.n	8008468 <__gethex+0x2fc>
 8008416:	2b01      	cmp	r3, #1
 8008418:	d119      	bne.n	800844e <__gethex+0x2e2>
 800841a:	9b01      	ldr	r3, [sp, #4]
 800841c:	42b3      	cmp	r3, r6
 800841e:	d116      	bne.n	800844e <__gethex+0x2e2>
 8008420:	2b01      	cmp	r3, #1
 8008422:	d10d      	bne.n	8008440 <__gethex+0x2d4>
 8008424:	9b02      	ldr	r3, [sp, #8]
 8008426:	2662      	movs	r6, #98	; 0x62
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	9301      	str	r3, [sp, #4]
 800842c:	9a01      	ldr	r2, [sp, #4]
 800842e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008430:	601a      	str	r2, [r3, #0]
 8008432:	2301      	movs	r3, #1
 8008434:	9a04      	ldr	r2, [sp, #16]
 8008436:	6123      	str	r3, [r4, #16]
 8008438:	6013      	str	r3, [r2, #0]
 800843a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800843c:	601c      	str	r4, [r3, #0]
 800843e:	e72e      	b.n	800829e <__gethex+0x132>
 8008440:	9901      	ldr	r1, [sp, #4]
 8008442:	0020      	movs	r0, r4
 8008444:	3901      	subs	r1, #1
 8008446:	f000 fe5d 	bl	8009104 <__any_on>
 800844a:	2800      	cmp	r0, #0
 800844c:	d1ea      	bne.n	8008424 <__gethex+0x2b8>
 800844e:	0021      	movs	r1, r4
 8008450:	9805      	ldr	r0, [sp, #20]
 8008452:	f000 f9f5 	bl	8008840 <_Bfree>
 8008456:	2300      	movs	r3, #0
 8008458:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800845a:	2650      	movs	r6, #80	; 0x50
 800845c:	6013      	str	r3, [r2, #0]
 800845e:	e71e      	b.n	800829e <__gethex+0x132>
 8008460:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008462:	2b00      	cmp	r3, #0
 8008464:	d1f3      	bne.n	800844e <__gethex+0x2e2>
 8008466:	e7dd      	b.n	8008424 <__gethex+0x2b8>
 8008468:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800846a:	2b00      	cmp	r3, #0
 800846c:	d1da      	bne.n	8008424 <__gethex+0x2b8>
 800846e:	e7ee      	b.n	800844e <__gethex+0x2e2>
 8008470:	0800aa30 	.word	0x0800aa30
 8008474:	0800a9b9 	.word	0x0800a9b9
 8008478:	0800a9ca 	.word	0x0800a9ca
 800847c:	1e77      	subs	r7, r6, #1
 800847e:	2d00      	cmp	r5, #0
 8008480:	d12f      	bne.n	80084e2 <__gethex+0x376>
 8008482:	2f00      	cmp	r7, #0
 8008484:	d004      	beq.n	8008490 <__gethex+0x324>
 8008486:	0039      	movs	r1, r7
 8008488:	0020      	movs	r0, r4
 800848a:	f000 fe3b 	bl	8009104 <__any_on>
 800848e:	0005      	movs	r5, r0
 8008490:	231f      	movs	r3, #31
 8008492:	117a      	asrs	r2, r7, #5
 8008494:	401f      	ands	r7, r3
 8008496:	3b1e      	subs	r3, #30
 8008498:	40bb      	lsls	r3, r7
 800849a:	9904      	ldr	r1, [sp, #16]
 800849c:	0092      	lsls	r2, r2, #2
 800849e:	5852      	ldr	r2, [r2, r1]
 80084a0:	421a      	tst	r2, r3
 80084a2:	d001      	beq.n	80084a8 <__gethex+0x33c>
 80084a4:	2302      	movs	r3, #2
 80084a6:	431d      	orrs	r5, r3
 80084a8:	9b01      	ldr	r3, [sp, #4]
 80084aa:	0031      	movs	r1, r6
 80084ac:	1b9b      	subs	r3, r3, r6
 80084ae:	2602      	movs	r6, #2
 80084b0:	0020      	movs	r0, r4
 80084b2:	9301      	str	r3, [sp, #4]
 80084b4:	f7ff fdf0 	bl	8008098 <rshift>
 80084b8:	9b02      	ldr	r3, [sp, #8]
 80084ba:	685f      	ldr	r7, [r3, #4]
 80084bc:	2d00      	cmp	r5, #0
 80084be:	d041      	beq.n	8008544 <__gethex+0x3d8>
 80084c0:	9b02      	ldr	r3, [sp, #8]
 80084c2:	68db      	ldr	r3, [r3, #12]
 80084c4:	2b02      	cmp	r3, #2
 80084c6:	d010      	beq.n	80084ea <__gethex+0x37e>
 80084c8:	2b03      	cmp	r3, #3
 80084ca:	d012      	beq.n	80084f2 <__gethex+0x386>
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	d106      	bne.n	80084de <__gethex+0x372>
 80084d0:	07aa      	lsls	r2, r5, #30
 80084d2:	d504      	bpl.n	80084de <__gethex+0x372>
 80084d4:	9a04      	ldr	r2, [sp, #16]
 80084d6:	6810      	ldr	r0, [r2, #0]
 80084d8:	4305      	orrs	r5, r0
 80084da:	421d      	tst	r5, r3
 80084dc:	d10c      	bne.n	80084f8 <__gethex+0x38c>
 80084de:	2310      	movs	r3, #16
 80084e0:	e02f      	b.n	8008542 <__gethex+0x3d6>
 80084e2:	2501      	movs	r5, #1
 80084e4:	e7d4      	b.n	8008490 <__gethex+0x324>
 80084e6:	2601      	movs	r6, #1
 80084e8:	e7e8      	b.n	80084bc <__gethex+0x350>
 80084ea:	2301      	movs	r3, #1
 80084ec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80084ee:	1a9b      	subs	r3, r3, r2
 80084f0:	9313      	str	r3, [sp, #76]	; 0x4c
 80084f2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d0f2      	beq.n	80084de <__gethex+0x372>
 80084f8:	6923      	ldr	r3, [r4, #16]
 80084fa:	2000      	movs	r0, #0
 80084fc:	9303      	str	r3, [sp, #12]
 80084fe:	009b      	lsls	r3, r3, #2
 8008500:	9304      	str	r3, [sp, #16]
 8008502:	0023      	movs	r3, r4
 8008504:	9a04      	ldr	r2, [sp, #16]
 8008506:	3314      	adds	r3, #20
 8008508:	1899      	adds	r1, r3, r2
 800850a:	681a      	ldr	r2, [r3, #0]
 800850c:	1c55      	adds	r5, r2, #1
 800850e:	d01e      	beq.n	800854e <__gethex+0x3e2>
 8008510:	3201      	adds	r2, #1
 8008512:	601a      	str	r2, [r3, #0]
 8008514:	0023      	movs	r3, r4
 8008516:	3314      	adds	r3, #20
 8008518:	2e02      	cmp	r6, #2
 800851a:	d140      	bne.n	800859e <__gethex+0x432>
 800851c:	9a02      	ldr	r2, [sp, #8]
 800851e:	9901      	ldr	r1, [sp, #4]
 8008520:	6812      	ldr	r2, [r2, #0]
 8008522:	3a01      	subs	r2, #1
 8008524:	428a      	cmp	r2, r1
 8008526:	d10b      	bne.n	8008540 <__gethex+0x3d4>
 8008528:	114a      	asrs	r2, r1, #5
 800852a:	211f      	movs	r1, #31
 800852c:	9801      	ldr	r0, [sp, #4]
 800852e:	0092      	lsls	r2, r2, #2
 8008530:	4001      	ands	r1, r0
 8008532:	2001      	movs	r0, #1
 8008534:	0005      	movs	r5, r0
 8008536:	408d      	lsls	r5, r1
 8008538:	58d3      	ldr	r3, [r2, r3]
 800853a:	422b      	tst	r3, r5
 800853c:	d000      	beq.n	8008540 <__gethex+0x3d4>
 800853e:	2601      	movs	r6, #1
 8008540:	2320      	movs	r3, #32
 8008542:	431e      	orrs	r6, r3
 8008544:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008546:	601c      	str	r4, [r3, #0]
 8008548:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800854a:	601f      	str	r7, [r3, #0]
 800854c:	e6a7      	b.n	800829e <__gethex+0x132>
 800854e:	c301      	stmia	r3!, {r0}
 8008550:	4299      	cmp	r1, r3
 8008552:	d8da      	bhi.n	800850a <__gethex+0x39e>
 8008554:	9b03      	ldr	r3, [sp, #12]
 8008556:	68a2      	ldr	r2, [r4, #8]
 8008558:	4293      	cmp	r3, r2
 800855a:	db17      	blt.n	800858c <__gethex+0x420>
 800855c:	6863      	ldr	r3, [r4, #4]
 800855e:	9805      	ldr	r0, [sp, #20]
 8008560:	1c59      	adds	r1, r3, #1
 8008562:	f000 f929 	bl	80087b8 <_Balloc>
 8008566:	1e05      	subs	r5, r0, #0
 8008568:	d103      	bne.n	8008572 <__gethex+0x406>
 800856a:	0002      	movs	r2, r0
 800856c:	2184      	movs	r1, #132	; 0x84
 800856e:	4b1c      	ldr	r3, [pc, #112]	; (80085e0 <__gethex+0x474>)
 8008570:	e6b8      	b.n	80082e4 <__gethex+0x178>
 8008572:	0021      	movs	r1, r4
 8008574:	6923      	ldr	r3, [r4, #16]
 8008576:	310c      	adds	r1, #12
 8008578:	1c9a      	adds	r2, r3, #2
 800857a:	0092      	lsls	r2, r2, #2
 800857c:	300c      	adds	r0, #12
 800857e:	f7fe fd83 	bl	8007088 <memcpy>
 8008582:	0021      	movs	r1, r4
 8008584:	9805      	ldr	r0, [sp, #20]
 8008586:	f000 f95b 	bl	8008840 <_Bfree>
 800858a:	002c      	movs	r4, r5
 800858c:	6923      	ldr	r3, [r4, #16]
 800858e:	1c5a      	adds	r2, r3, #1
 8008590:	6122      	str	r2, [r4, #16]
 8008592:	2201      	movs	r2, #1
 8008594:	3304      	adds	r3, #4
 8008596:	009b      	lsls	r3, r3, #2
 8008598:	18e3      	adds	r3, r4, r3
 800859a:	605a      	str	r2, [r3, #4]
 800859c:	e7ba      	b.n	8008514 <__gethex+0x3a8>
 800859e:	6922      	ldr	r2, [r4, #16]
 80085a0:	9903      	ldr	r1, [sp, #12]
 80085a2:	428a      	cmp	r2, r1
 80085a4:	dd09      	ble.n	80085ba <__gethex+0x44e>
 80085a6:	2101      	movs	r1, #1
 80085a8:	0020      	movs	r0, r4
 80085aa:	f7ff fd75 	bl	8008098 <rshift>
 80085ae:	9b02      	ldr	r3, [sp, #8]
 80085b0:	3701      	adds	r7, #1
 80085b2:	689b      	ldr	r3, [r3, #8]
 80085b4:	42bb      	cmp	r3, r7
 80085b6:	dac2      	bge.n	800853e <__gethex+0x3d2>
 80085b8:	e6dc      	b.n	8008374 <__gethex+0x208>
 80085ba:	221f      	movs	r2, #31
 80085bc:	9d01      	ldr	r5, [sp, #4]
 80085be:	9901      	ldr	r1, [sp, #4]
 80085c0:	2601      	movs	r6, #1
 80085c2:	4015      	ands	r5, r2
 80085c4:	4211      	tst	r1, r2
 80085c6:	d0bb      	beq.n	8008540 <__gethex+0x3d4>
 80085c8:	9a04      	ldr	r2, [sp, #16]
 80085ca:	189b      	adds	r3, r3, r2
 80085cc:	3b04      	subs	r3, #4
 80085ce:	6818      	ldr	r0, [r3, #0]
 80085d0:	f000 f9ea 	bl	80089a8 <__hi0bits>
 80085d4:	2320      	movs	r3, #32
 80085d6:	1b5d      	subs	r5, r3, r5
 80085d8:	42a8      	cmp	r0, r5
 80085da:	dbe4      	blt.n	80085a6 <__gethex+0x43a>
 80085dc:	e7b0      	b.n	8008540 <__gethex+0x3d4>
 80085de:	46c0      	nop			; (mov r8, r8)
 80085e0:	0800a9b9 	.word	0x0800a9b9

080085e4 <L_shift>:
 80085e4:	2308      	movs	r3, #8
 80085e6:	b570      	push	{r4, r5, r6, lr}
 80085e8:	2520      	movs	r5, #32
 80085ea:	1a9a      	subs	r2, r3, r2
 80085ec:	0092      	lsls	r2, r2, #2
 80085ee:	1aad      	subs	r5, r5, r2
 80085f0:	6843      	ldr	r3, [r0, #4]
 80085f2:	6806      	ldr	r6, [r0, #0]
 80085f4:	001c      	movs	r4, r3
 80085f6:	40ac      	lsls	r4, r5
 80085f8:	40d3      	lsrs	r3, r2
 80085fa:	4334      	orrs	r4, r6
 80085fc:	6004      	str	r4, [r0, #0]
 80085fe:	6043      	str	r3, [r0, #4]
 8008600:	3004      	adds	r0, #4
 8008602:	4288      	cmp	r0, r1
 8008604:	d3f4      	bcc.n	80085f0 <L_shift+0xc>
 8008606:	bd70      	pop	{r4, r5, r6, pc}

08008608 <__match>:
 8008608:	b530      	push	{r4, r5, lr}
 800860a:	6803      	ldr	r3, [r0, #0]
 800860c:	780c      	ldrb	r4, [r1, #0]
 800860e:	3301      	adds	r3, #1
 8008610:	2c00      	cmp	r4, #0
 8008612:	d102      	bne.n	800861a <__match+0x12>
 8008614:	6003      	str	r3, [r0, #0]
 8008616:	2001      	movs	r0, #1
 8008618:	bd30      	pop	{r4, r5, pc}
 800861a:	781a      	ldrb	r2, [r3, #0]
 800861c:	0015      	movs	r5, r2
 800861e:	3d41      	subs	r5, #65	; 0x41
 8008620:	2d19      	cmp	r5, #25
 8008622:	d800      	bhi.n	8008626 <__match+0x1e>
 8008624:	3220      	adds	r2, #32
 8008626:	3101      	adds	r1, #1
 8008628:	42a2      	cmp	r2, r4
 800862a:	d0ef      	beq.n	800860c <__match+0x4>
 800862c:	2000      	movs	r0, #0
 800862e:	e7f3      	b.n	8008618 <__match+0x10>

08008630 <__hexnan>:
 8008630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008632:	680b      	ldr	r3, [r1, #0]
 8008634:	b08b      	sub	sp, #44	; 0x2c
 8008636:	9201      	str	r2, [sp, #4]
 8008638:	9901      	ldr	r1, [sp, #4]
 800863a:	115a      	asrs	r2, r3, #5
 800863c:	0092      	lsls	r2, r2, #2
 800863e:	188a      	adds	r2, r1, r2
 8008640:	9202      	str	r2, [sp, #8]
 8008642:	0019      	movs	r1, r3
 8008644:	221f      	movs	r2, #31
 8008646:	4011      	ands	r1, r2
 8008648:	9008      	str	r0, [sp, #32]
 800864a:	9106      	str	r1, [sp, #24]
 800864c:	4213      	tst	r3, r2
 800864e:	d002      	beq.n	8008656 <__hexnan+0x26>
 8008650:	9b02      	ldr	r3, [sp, #8]
 8008652:	3304      	adds	r3, #4
 8008654:	9302      	str	r3, [sp, #8]
 8008656:	9b02      	ldr	r3, [sp, #8]
 8008658:	2500      	movs	r5, #0
 800865a:	1f1e      	subs	r6, r3, #4
 800865c:	0037      	movs	r7, r6
 800865e:	0034      	movs	r4, r6
 8008660:	9b08      	ldr	r3, [sp, #32]
 8008662:	6035      	str	r5, [r6, #0]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	9507      	str	r5, [sp, #28]
 8008668:	9305      	str	r3, [sp, #20]
 800866a:	9503      	str	r5, [sp, #12]
 800866c:	9b05      	ldr	r3, [sp, #20]
 800866e:	3301      	adds	r3, #1
 8008670:	9309      	str	r3, [sp, #36]	; 0x24
 8008672:	9b05      	ldr	r3, [sp, #20]
 8008674:	785b      	ldrb	r3, [r3, #1]
 8008676:	9304      	str	r3, [sp, #16]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d028      	beq.n	80086ce <__hexnan+0x9e>
 800867c:	9804      	ldr	r0, [sp, #16]
 800867e:	f7ff fd5f 	bl	8008140 <__hexdig_fun>
 8008682:	2800      	cmp	r0, #0
 8008684:	d154      	bne.n	8008730 <__hexnan+0x100>
 8008686:	9b04      	ldr	r3, [sp, #16]
 8008688:	2b20      	cmp	r3, #32
 800868a:	d819      	bhi.n	80086c0 <__hexnan+0x90>
 800868c:	9b03      	ldr	r3, [sp, #12]
 800868e:	9a07      	ldr	r2, [sp, #28]
 8008690:	4293      	cmp	r3, r2
 8008692:	dd12      	ble.n	80086ba <__hexnan+0x8a>
 8008694:	42bc      	cmp	r4, r7
 8008696:	d206      	bcs.n	80086a6 <__hexnan+0x76>
 8008698:	2d07      	cmp	r5, #7
 800869a:	dc04      	bgt.n	80086a6 <__hexnan+0x76>
 800869c:	002a      	movs	r2, r5
 800869e:	0039      	movs	r1, r7
 80086a0:	0020      	movs	r0, r4
 80086a2:	f7ff ff9f 	bl	80085e4 <L_shift>
 80086a6:	9b01      	ldr	r3, [sp, #4]
 80086a8:	2508      	movs	r5, #8
 80086aa:	429c      	cmp	r4, r3
 80086ac:	d905      	bls.n	80086ba <__hexnan+0x8a>
 80086ae:	1f27      	subs	r7, r4, #4
 80086b0:	2500      	movs	r5, #0
 80086b2:	003c      	movs	r4, r7
 80086b4:	9b03      	ldr	r3, [sp, #12]
 80086b6:	603d      	str	r5, [r7, #0]
 80086b8:	9307      	str	r3, [sp, #28]
 80086ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086bc:	9305      	str	r3, [sp, #20]
 80086be:	e7d5      	b.n	800866c <__hexnan+0x3c>
 80086c0:	9b04      	ldr	r3, [sp, #16]
 80086c2:	2b29      	cmp	r3, #41	; 0x29
 80086c4:	d159      	bne.n	800877a <__hexnan+0x14a>
 80086c6:	9b05      	ldr	r3, [sp, #20]
 80086c8:	9a08      	ldr	r2, [sp, #32]
 80086ca:	3302      	adds	r3, #2
 80086cc:	6013      	str	r3, [r2, #0]
 80086ce:	9b03      	ldr	r3, [sp, #12]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d052      	beq.n	800877a <__hexnan+0x14a>
 80086d4:	42bc      	cmp	r4, r7
 80086d6:	d206      	bcs.n	80086e6 <__hexnan+0xb6>
 80086d8:	2d07      	cmp	r5, #7
 80086da:	dc04      	bgt.n	80086e6 <__hexnan+0xb6>
 80086dc:	002a      	movs	r2, r5
 80086de:	0039      	movs	r1, r7
 80086e0:	0020      	movs	r0, r4
 80086e2:	f7ff ff7f 	bl	80085e4 <L_shift>
 80086e6:	9b01      	ldr	r3, [sp, #4]
 80086e8:	429c      	cmp	r4, r3
 80086ea:	d935      	bls.n	8008758 <__hexnan+0x128>
 80086ec:	001a      	movs	r2, r3
 80086ee:	0023      	movs	r3, r4
 80086f0:	cb02      	ldmia	r3!, {r1}
 80086f2:	c202      	stmia	r2!, {r1}
 80086f4:	429e      	cmp	r6, r3
 80086f6:	d2fb      	bcs.n	80086f0 <__hexnan+0xc0>
 80086f8:	9b02      	ldr	r3, [sp, #8]
 80086fa:	1c61      	adds	r1, r4, #1
 80086fc:	1eda      	subs	r2, r3, #3
 80086fe:	2304      	movs	r3, #4
 8008700:	4291      	cmp	r1, r2
 8008702:	d805      	bhi.n	8008710 <__hexnan+0xe0>
 8008704:	9b02      	ldr	r3, [sp, #8]
 8008706:	3b04      	subs	r3, #4
 8008708:	1b1b      	subs	r3, r3, r4
 800870a:	089b      	lsrs	r3, r3, #2
 800870c:	3301      	adds	r3, #1
 800870e:	009b      	lsls	r3, r3, #2
 8008710:	9a01      	ldr	r2, [sp, #4]
 8008712:	18d3      	adds	r3, r2, r3
 8008714:	2200      	movs	r2, #0
 8008716:	c304      	stmia	r3!, {r2}
 8008718:	429e      	cmp	r6, r3
 800871a:	d2fc      	bcs.n	8008716 <__hexnan+0xe6>
 800871c:	6833      	ldr	r3, [r6, #0]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d104      	bne.n	800872c <__hexnan+0xfc>
 8008722:	9b01      	ldr	r3, [sp, #4]
 8008724:	429e      	cmp	r6, r3
 8008726:	d126      	bne.n	8008776 <__hexnan+0x146>
 8008728:	2301      	movs	r3, #1
 800872a:	6033      	str	r3, [r6, #0]
 800872c:	2005      	movs	r0, #5
 800872e:	e025      	b.n	800877c <__hexnan+0x14c>
 8008730:	9b03      	ldr	r3, [sp, #12]
 8008732:	3501      	adds	r5, #1
 8008734:	3301      	adds	r3, #1
 8008736:	9303      	str	r3, [sp, #12]
 8008738:	2d08      	cmp	r5, #8
 800873a:	dd06      	ble.n	800874a <__hexnan+0x11a>
 800873c:	9b01      	ldr	r3, [sp, #4]
 800873e:	429c      	cmp	r4, r3
 8008740:	d9bb      	bls.n	80086ba <__hexnan+0x8a>
 8008742:	2300      	movs	r3, #0
 8008744:	2501      	movs	r5, #1
 8008746:	3c04      	subs	r4, #4
 8008748:	6023      	str	r3, [r4, #0]
 800874a:	220f      	movs	r2, #15
 800874c:	6823      	ldr	r3, [r4, #0]
 800874e:	4010      	ands	r0, r2
 8008750:	011b      	lsls	r3, r3, #4
 8008752:	4318      	orrs	r0, r3
 8008754:	6020      	str	r0, [r4, #0]
 8008756:	e7b0      	b.n	80086ba <__hexnan+0x8a>
 8008758:	9b06      	ldr	r3, [sp, #24]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d0de      	beq.n	800871c <__hexnan+0xec>
 800875e:	2120      	movs	r1, #32
 8008760:	9a06      	ldr	r2, [sp, #24]
 8008762:	9b02      	ldr	r3, [sp, #8]
 8008764:	1a89      	subs	r1, r1, r2
 8008766:	2201      	movs	r2, #1
 8008768:	4252      	negs	r2, r2
 800876a:	40ca      	lsrs	r2, r1
 800876c:	3b04      	subs	r3, #4
 800876e:	6819      	ldr	r1, [r3, #0]
 8008770:	400a      	ands	r2, r1
 8008772:	601a      	str	r2, [r3, #0]
 8008774:	e7d2      	b.n	800871c <__hexnan+0xec>
 8008776:	3e04      	subs	r6, #4
 8008778:	e7d0      	b.n	800871c <__hexnan+0xec>
 800877a:	2004      	movs	r0, #4
 800877c:	b00b      	add	sp, #44	; 0x2c
 800877e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008780 <malloc>:
 8008780:	b510      	push	{r4, lr}
 8008782:	4b03      	ldr	r3, [pc, #12]	; (8008790 <malloc+0x10>)
 8008784:	0001      	movs	r1, r0
 8008786:	6818      	ldr	r0, [r3, #0]
 8008788:	f000 fd78 	bl	800927c <_malloc_r>
 800878c:	bd10      	pop	{r4, pc}
 800878e:	46c0      	nop			; (mov r8, r8)
 8008790:	2000007c 	.word	0x2000007c

08008794 <__ascii_mbtowc>:
 8008794:	b082      	sub	sp, #8
 8008796:	2900      	cmp	r1, #0
 8008798:	d100      	bne.n	800879c <__ascii_mbtowc+0x8>
 800879a:	a901      	add	r1, sp, #4
 800879c:	1e10      	subs	r0, r2, #0
 800879e:	d006      	beq.n	80087ae <__ascii_mbtowc+0x1a>
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d006      	beq.n	80087b2 <__ascii_mbtowc+0x1e>
 80087a4:	7813      	ldrb	r3, [r2, #0]
 80087a6:	600b      	str	r3, [r1, #0]
 80087a8:	7810      	ldrb	r0, [r2, #0]
 80087aa:	1e43      	subs	r3, r0, #1
 80087ac:	4198      	sbcs	r0, r3
 80087ae:	b002      	add	sp, #8
 80087b0:	4770      	bx	lr
 80087b2:	2002      	movs	r0, #2
 80087b4:	4240      	negs	r0, r0
 80087b6:	e7fa      	b.n	80087ae <__ascii_mbtowc+0x1a>

080087b8 <_Balloc>:
 80087b8:	b570      	push	{r4, r5, r6, lr}
 80087ba:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80087bc:	0006      	movs	r6, r0
 80087be:	000c      	movs	r4, r1
 80087c0:	2d00      	cmp	r5, #0
 80087c2:	d10e      	bne.n	80087e2 <_Balloc+0x2a>
 80087c4:	2010      	movs	r0, #16
 80087c6:	f7ff ffdb 	bl	8008780 <malloc>
 80087ca:	1e02      	subs	r2, r0, #0
 80087cc:	6270      	str	r0, [r6, #36]	; 0x24
 80087ce:	d104      	bne.n	80087da <_Balloc+0x22>
 80087d0:	2166      	movs	r1, #102	; 0x66
 80087d2:	4b19      	ldr	r3, [pc, #100]	; (8008838 <_Balloc+0x80>)
 80087d4:	4819      	ldr	r0, [pc, #100]	; (800883c <_Balloc+0x84>)
 80087d6:	f7ff fc31 	bl	800803c <__assert_func>
 80087da:	6045      	str	r5, [r0, #4]
 80087dc:	6085      	str	r5, [r0, #8]
 80087de:	6005      	str	r5, [r0, #0]
 80087e0:	60c5      	str	r5, [r0, #12]
 80087e2:	6a75      	ldr	r5, [r6, #36]	; 0x24
 80087e4:	68eb      	ldr	r3, [r5, #12]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d013      	beq.n	8008812 <_Balloc+0x5a>
 80087ea:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80087ec:	00a2      	lsls	r2, r4, #2
 80087ee:	68db      	ldr	r3, [r3, #12]
 80087f0:	189b      	adds	r3, r3, r2
 80087f2:	6818      	ldr	r0, [r3, #0]
 80087f4:	2800      	cmp	r0, #0
 80087f6:	d118      	bne.n	800882a <_Balloc+0x72>
 80087f8:	2101      	movs	r1, #1
 80087fa:	000d      	movs	r5, r1
 80087fc:	40a5      	lsls	r5, r4
 80087fe:	1d6a      	adds	r2, r5, #5
 8008800:	0030      	movs	r0, r6
 8008802:	0092      	lsls	r2, r2, #2
 8008804:	f000 fca1 	bl	800914a <_calloc_r>
 8008808:	2800      	cmp	r0, #0
 800880a:	d00c      	beq.n	8008826 <_Balloc+0x6e>
 800880c:	6044      	str	r4, [r0, #4]
 800880e:	6085      	str	r5, [r0, #8]
 8008810:	e00d      	b.n	800882e <_Balloc+0x76>
 8008812:	2221      	movs	r2, #33	; 0x21
 8008814:	2104      	movs	r1, #4
 8008816:	0030      	movs	r0, r6
 8008818:	f000 fc97 	bl	800914a <_calloc_r>
 800881c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800881e:	60e8      	str	r0, [r5, #12]
 8008820:	68db      	ldr	r3, [r3, #12]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d1e1      	bne.n	80087ea <_Balloc+0x32>
 8008826:	2000      	movs	r0, #0
 8008828:	bd70      	pop	{r4, r5, r6, pc}
 800882a:	6802      	ldr	r2, [r0, #0]
 800882c:	601a      	str	r2, [r3, #0]
 800882e:	2300      	movs	r3, #0
 8008830:	6103      	str	r3, [r0, #16]
 8008832:	60c3      	str	r3, [r0, #12]
 8008834:	e7f8      	b.n	8008828 <_Balloc+0x70>
 8008836:	46c0      	nop			; (mov r8, r8)
 8008838:	0800a808 	.word	0x0800a808
 800883c:	0800aa44 	.word	0x0800aa44

08008840 <_Bfree>:
 8008840:	b570      	push	{r4, r5, r6, lr}
 8008842:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008844:	0005      	movs	r5, r0
 8008846:	000c      	movs	r4, r1
 8008848:	2e00      	cmp	r6, #0
 800884a:	d10e      	bne.n	800886a <_Bfree+0x2a>
 800884c:	2010      	movs	r0, #16
 800884e:	f7ff ff97 	bl	8008780 <malloc>
 8008852:	1e02      	subs	r2, r0, #0
 8008854:	6268      	str	r0, [r5, #36]	; 0x24
 8008856:	d104      	bne.n	8008862 <_Bfree+0x22>
 8008858:	218a      	movs	r1, #138	; 0x8a
 800885a:	4b09      	ldr	r3, [pc, #36]	; (8008880 <_Bfree+0x40>)
 800885c:	4809      	ldr	r0, [pc, #36]	; (8008884 <_Bfree+0x44>)
 800885e:	f7ff fbed 	bl	800803c <__assert_func>
 8008862:	6046      	str	r6, [r0, #4]
 8008864:	6086      	str	r6, [r0, #8]
 8008866:	6006      	str	r6, [r0, #0]
 8008868:	60c6      	str	r6, [r0, #12]
 800886a:	2c00      	cmp	r4, #0
 800886c:	d007      	beq.n	800887e <_Bfree+0x3e>
 800886e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008870:	6862      	ldr	r2, [r4, #4]
 8008872:	68db      	ldr	r3, [r3, #12]
 8008874:	0092      	lsls	r2, r2, #2
 8008876:	189b      	adds	r3, r3, r2
 8008878:	681a      	ldr	r2, [r3, #0]
 800887a:	6022      	str	r2, [r4, #0]
 800887c:	601c      	str	r4, [r3, #0]
 800887e:	bd70      	pop	{r4, r5, r6, pc}
 8008880:	0800a808 	.word	0x0800a808
 8008884:	0800aa44 	.word	0x0800aa44

08008888 <__multadd>:
 8008888:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800888a:	000e      	movs	r6, r1
 800888c:	9001      	str	r0, [sp, #4]
 800888e:	000c      	movs	r4, r1
 8008890:	001d      	movs	r5, r3
 8008892:	2000      	movs	r0, #0
 8008894:	690f      	ldr	r7, [r1, #16]
 8008896:	3614      	adds	r6, #20
 8008898:	6833      	ldr	r3, [r6, #0]
 800889a:	3001      	adds	r0, #1
 800889c:	b299      	uxth	r1, r3
 800889e:	4351      	muls	r1, r2
 80088a0:	0c1b      	lsrs	r3, r3, #16
 80088a2:	4353      	muls	r3, r2
 80088a4:	1949      	adds	r1, r1, r5
 80088a6:	0c0d      	lsrs	r5, r1, #16
 80088a8:	195b      	adds	r3, r3, r5
 80088aa:	0c1d      	lsrs	r5, r3, #16
 80088ac:	b289      	uxth	r1, r1
 80088ae:	041b      	lsls	r3, r3, #16
 80088b0:	185b      	adds	r3, r3, r1
 80088b2:	c608      	stmia	r6!, {r3}
 80088b4:	4287      	cmp	r7, r0
 80088b6:	dcef      	bgt.n	8008898 <__multadd+0x10>
 80088b8:	2d00      	cmp	r5, #0
 80088ba:	d022      	beq.n	8008902 <__multadd+0x7a>
 80088bc:	68a3      	ldr	r3, [r4, #8]
 80088be:	42bb      	cmp	r3, r7
 80088c0:	dc19      	bgt.n	80088f6 <__multadd+0x6e>
 80088c2:	6863      	ldr	r3, [r4, #4]
 80088c4:	9801      	ldr	r0, [sp, #4]
 80088c6:	1c59      	adds	r1, r3, #1
 80088c8:	f7ff ff76 	bl	80087b8 <_Balloc>
 80088cc:	1e06      	subs	r6, r0, #0
 80088ce:	d105      	bne.n	80088dc <__multadd+0x54>
 80088d0:	0002      	movs	r2, r0
 80088d2:	21b5      	movs	r1, #181	; 0xb5
 80088d4:	4b0c      	ldr	r3, [pc, #48]	; (8008908 <__multadd+0x80>)
 80088d6:	480d      	ldr	r0, [pc, #52]	; (800890c <__multadd+0x84>)
 80088d8:	f7ff fbb0 	bl	800803c <__assert_func>
 80088dc:	0021      	movs	r1, r4
 80088de:	6923      	ldr	r3, [r4, #16]
 80088e0:	310c      	adds	r1, #12
 80088e2:	1c9a      	adds	r2, r3, #2
 80088e4:	0092      	lsls	r2, r2, #2
 80088e6:	300c      	adds	r0, #12
 80088e8:	f7fe fbce 	bl	8007088 <memcpy>
 80088ec:	0021      	movs	r1, r4
 80088ee:	9801      	ldr	r0, [sp, #4]
 80088f0:	f7ff ffa6 	bl	8008840 <_Bfree>
 80088f4:	0034      	movs	r4, r6
 80088f6:	1d3b      	adds	r3, r7, #4
 80088f8:	009b      	lsls	r3, r3, #2
 80088fa:	18e3      	adds	r3, r4, r3
 80088fc:	605d      	str	r5, [r3, #4]
 80088fe:	1c7b      	adds	r3, r7, #1
 8008900:	6123      	str	r3, [r4, #16]
 8008902:	0020      	movs	r0, r4
 8008904:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008906:	46c0      	nop			; (mov r8, r8)
 8008908:	0800a9b9 	.word	0x0800a9b9
 800890c:	0800aa44 	.word	0x0800aa44

08008910 <__s2b>:
 8008910:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008912:	0006      	movs	r6, r0
 8008914:	0018      	movs	r0, r3
 8008916:	000c      	movs	r4, r1
 8008918:	3008      	adds	r0, #8
 800891a:	2109      	movs	r1, #9
 800891c:	9301      	str	r3, [sp, #4]
 800891e:	0015      	movs	r5, r2
 8008920:	f7f7 fc96 	bl	8000250 <__divsi3>
 8008924:	2301      	movs	r3, #1
 8008926:	2100      	movs	r1, #0
 8008928:	4283      	cmp	r3, r0
 800892a:	db0a      	blt.n	8008942 <__s2b+0x32>
 800892c:	0030      	movs	r0, r6
 800892e:	f7ff ff43 	bl	80087b8 <_Balloc>
 8008932:	1e01      	subs	r1, r0, #0
 8008934:	d108      	bne.n	8008948 <__s2b+0x38>
 8008936:	0002      	movs	r2, r0
 8008938:	4b19      	ldr	r3, [pc, #100]	; (80089a0 <__s2b+0x90>)
 800893a:	481a      	ldr	r0, [pc, #104]	; (80089a4 <__s2b+0x94>)
 800893c:	31ce      	adds	r1, #206	; 0xce
 800893e:	f7ff fb7d 	bl	800803c <__assert_func>
 8008942:	005b      	lsls	r3, r3, #1
 8008944:	3101      	adds	r1, #1
 8008946:	e7ef      	b.n	8008928 <__s2b+0x18>
 8008948:	9b08      	ldr	r3, [sp, #32]
 800894a:	6143      	str	r3, [r0, #20]
 800894c:	2301      	movs	r3, #1
 800894e:	6103      	str	r3, [r0, #16]
 8008950:	2d09      	cmp	r5, #9
 8008952:	dd18      	ble.n	8008986 <__s2b+0x76>
 8008954:	0023      	movs	r3, r4
 8008956:	3309      	adds	r3, #9
 8008958:	001f      	movs	r7, r3
 800895a:	9300      	str	r3, [sp, #0]
 800895c:	1964      	adds	r4, r4, r5
 800895e:	783b      	ldrb	r3, [r7, #0]
 8008960:	220a      	movs	r2, #10
 8008962:	0030      	movs	r0, r6
 8008964:	3b30      	subs	r3, #48	; 0x30
 8008966:	f7ff ff8f 	bl	8008888 <__multadd>
 800896a:	3701      	adds	r7, #1
 800896c:	0001      	movs	r1, r0
 800896e:	42a7      	cmp	r7, r4
 8008970:	d1f5      	bne.n	800895e <__s2b+0x4e>
 8008972:	002c      	movs	r4, r5
 8008974:	9b00      	ldr	r3, [sp, #0]
 8008976:	3c08      	subs	r4, #8
 8008978:	191c      	adds	r4, r3, r4
 800897a:	002f      	movs	r7, r5
 800897c:	9b01      	ldr	r3, [sp, #4]
 800897e:	429f      	cmp	r7, r3
 8008980:	db04      	blt.n	800898c <__s2b+0x7c>
 8008982:	0008      	movs	r0, r1
 8008984:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008986:	2509      	movs	r5, #9
 8008988:	340a      	adds	r4, #10
 800898a:	e7f6      	b.n	800897a <__s2b+0x6a>
 800898c:	1b63      	subs	r3, r4, r5
 800898e:	5ddb      	ldrb	r3, [r3, r7]
 8008990:	220a      	movs	r2, #10
 8008992:	0030      	movs	r0, r6
 8008994:	3b30      	subs	r3, #48	; 0x30
 8008996:	f7ff ff77 	bl	8008888 <__multadd>
 800899a:	3701      	adds	r7, #1
 800899c:	0001      	movs	r1, r0
 800899e:	e7ed      	b.n	800897c <__s2b+0x6c>
 80089a0:	0800a9b9 	.word	0x0800a9b9
 80089a4:	0800aa44 	.word	0x0800aa44

080089a8 <__hi0bits>:
 80089a8:	0003      	movs	r3, r0
 80089aa:	0c02      	lsrs	r2, r0, #16
 80089ac:	2000      	movs	r0, #0
 80089ae:	4282      	cmp	r2, r0
 80089b0:	d101      	bne.n	80089b6 <__hi0bits+0xe>
 80089b2:	041b      	lsls	r3, r3, #16
 80089b4:	3010      	adds	r0, #16
 80089b6:	0e1a      	lsrs	r2, r3, #24
 80089b8:	d101      	bne.n	80089be <__hi0bits+0x16>
 80089ba:	3008      	adds	r0, #8
 80089bc:	021b      	lsls	r3, r3, #8
 80089be:	0f1a      	lsrs	r2, r3, #28
 80089c0:	d101      	bne.n	80089c6 <__hi0bits+0x1e>
 80089c2:	3004      	adds	r0, #4
 80089c4:	011b      	lsls	r3, r3, #4
 80089c6:	0f9a      	lsrs	r2, r3, #30
 80089c8:	d101      	bne.n	80089ce <__hi0bits+0x26>
 80089ca:	3002      	adds	r0, #2
 80089cc:	009b      	lsls	r3, r3, #2
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	db03      	blt.n	80089da <__hi0bits+0x32>
 80089d2:	3001      	adds	r0, #1
 80089d4:	005b      	lsls	r3, r3, #1
 80089d6:	d400      	bmi.n	80089da <__hi0bits+0x32>
 80089d8:	2020      	movs	r0, #32
 80089da:	4770      	bx	lr

080089dc <__lo0bits>:
 80089dc:	6803      	ldr	r3, [r0, #0]
 80089de:	0002      	movs	r2, r0
 80089e0:	2107      	movs	r1, #7
 80089e2:	0018      	movs	r0, r3
 80089e4:	4008      	ands	r0, r1
 80089e6:	420b      	tst	r3, r1
 80089e8:	d00d      	beq.n	8008a06 <__lo0bits+0x2a>
 80089ea:	3906      	subs	r1, #6
 80089ec:	2000      	movs	r0, #0
 80089ee:	420b      	tst	r3, r1
 80089f0:	d105      	bne.n	80089fe <__lo0bits+0x22>
 80089f2:	3002      	adds	r0, #2
 80089f4:	4203      	tst	r3, r0
 80089f6:	d003      	beq.n	8008a00 <__lo0bits+0x24>
 80089f8:	40cb      	lsrs	r3, r1
 80089fa:	0008      	movs	r0, r1
 80089fc:	6013      	str	r3, [r2, #0]
 80089fe:	4770      	bx	lr
 8008a00:	089b      	lsrs	r3, r3, #2
 8008a02:	6013      	str	r3, [r2, #0]
 8008a04:	e7fb      	b.n	80089fe <__lo0bits+0x22>
 8008a06:	b299      	uxth	r1, r3
 8008a08:	2900      	cmp	r1, #0
 8008a0a:	d101      	bne.n	8008a10 <__lo0bits+0x34>
 8008a0c:	2010      	movs	r0, #16
 8008a0e:	0c1b      	lsrs	r3, r3, #16
 8008a10:	b2d9      	uxtb	r1, r3
 8008a12:	2900      	cmp	r1, #0
 8008a14:	d101      	bne.n	8008a1a <__lo0bits+0x3e>
 8008a16:	3008      	adds	r0, #8
 8008a18:	0a1b      	lsrs	r3, r3, #8
 8008a1a:	0719      	lsls	r1, r3, #28
 8008a1c:	d101      	bne.n	8008a22 <__lo0bits+0x46>
 8008a1e:	3004      	adds	r0, #4
 8008a20:	091b      	lsrs	r3, r3, #4
 8008a22:	0799      	lsls	r1, r3, #30
 8008a24:	d101      	bne.n	8008a2a <__lo0bits+0x4e>
 8008a26:	3002      	adds	r0, #2
 8008a28:	089b      	lsrs	r3, r3, #2
 8008a2a:	07d9      	lsls	r1, r3, #31
 8008a2c:	d4e9      	bmi.n	8008a02 <__lo0bits+0x26>
 8008a2e:	3001      	adds	r0, #1
 8008a30:	085b      	lsrs	r3, r3, #1
 8008a32:	d1e6      	bne.n	8008a02 <__lo0bits+0x26>
 8008a34:	2020      	movs	r0, #32
 8008a36:	e7e2      	b.n	80089fe <__lo0bits+0x22>

08008a38 <__i2b>:
 8008a38:	b510      	push	{r4, lr}
 8008a3a:	000c      	movs	r4, r1
 8008a3c:	2101      	movs	r1, #1
 8008a3e:	f7ff febb 	bl	80087b8 <_Balloc>
 8008a42:	2800      	cmp	r0, #0
 8008a44:	d106      	bne.n	8008a54 <__i2b+0x1c>
 8008a46:	21a0      	movs	r1, #160	; 0xa0
 8008a48:	0002      	movs	r2, r0
 8008a4a:	4b04      	ldr	r3, [pc, #16]	; (8008a5c <__i2b+0x24>)
 8008a4c:	4804      	ldr	r0, [pc, #16]	; (8008a60 <__i2b+0x28>)
 8008a4e:	0049      	lsls	r1, r1, #1
 8008a50:	f7ff faf4 	bl	800803c <__assert_func>
 8008a54:	2301      	movs	r3, #1
 8008a56:	6144      	str	r4, [r0, #20]
 8008a58:	6103      	str	r3, [r0, #16]
 8008a5a:	bd10      	pop	{r4, pc}
 8008a5c:	0800a9b9 	.word	0x0800a9b9
 8008a60:	0800aa44 	.word	0x0800aa44

08008a64 <__multiply>:
 8008a64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a66:	690b      	ldr	r3, [r1, #16]
 8008a68:	0014      	movs	r4, r2
 8008a6a:	6912      	ldr	r2, [r2, #16]
 8008a6c:	000d      	movs	r5, r1
 8008a6e:	b089      	sub	sp, #36	; 0x24
 8008a70:	4293      	cmp	r3, r2
 8008a72:	da01      	bge.n	8008a78 <__multiply+0x14>
 8008a74:	0025      	movs	r5, r4
 8008a76:	000c      	movs	r4, r1
 8008a78:	692f      	ldr	r7, [r5, #16]
 8008a7a:	6926      	ldr	r6, [r4, #16]
 8008a7c:	6869      	ldr	r1, [r5, #4]
 8008a7e:	19bb      	adds	r3, r7, r6
 8008a80:	9302      	str	r3, [sp, #8]
 8008a82:	68ab      	ldr	r3, [r5, #8]
 8008a84:	19ba      	adds	r2, r7, r6
 8008a86:	4293      	cmp	r3, r2
 8008a88:	da00      	bge.n	8008a8c <__multiply+0x28>
 8008a8a:	3101      	adds	r1, #1
 8008a8c:	f7ff fe94 	bl	80087b8 <_Balloc>
 8008a90:	9001      	str	r0, [sp, #4]
 8008a92:	2800      	cmp	r0, #0
 8008a94:	d106      	bne.n	8008aa4 <__multiply+0x40>
 8008a96:	215e      	movs	r1, #94	; 0x5e
 8008a98:	0002      	movs	r2, r0
 8008a9a:	4b48      	ldr	r3, [pc, #288]	; (8008bbc <__multiply+0x158>)
 8008a9c:	4848      	ldr	r0, [pc, #288]	; (8008bc0 <__multiply+0x15c>)
 8008a9e:	31ff      	adds	r1, #255	; 0xff
 8008aa0:	f7ff facc 	bl	800803c <__assert_func>
 8008aa4:	9b01      	ldr	r3, [sp, #4]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	3314      	adds	r3, #20
 8008aaa:	469c      	mov	ip, r3
 8008aac:	19bb      	adds	r3, r7, r6
 8008aae:	009b      	lsls	r3, r3, #2
 8008ab0:	4463      	add	r3, ip
 8008ab2:	9303      	str	r3, [sp, #12]
 8008ab4:	4663      	mov	r3, ip
 8008ab6:	9903      	ldr	r1, [sp, #12]
 8008ab8:	428b      	cmp	r3, r1
 8008aba:	d32c      	bcc.n	8008b16 <__multiply+0xb2>
 8008abc:	002b      	movs	r3, r5
 8008abe:	0022      	movs	r2, r4
 8008ac0:	3314      	adds	r3, #20
 8008ac2:	00bf      	lsls	r7, r7, #2
 8008ac4:	3214      	adds	r2, #20
 8008ac6:	9306      	str	r3, [sp, #24]
 8008ac8:	00b6      	lsls	r6, r6, #2
 8008aca:	19db      	adds	r3, r3, r7
 8008acc:	9304      	str	r3, [sp, #16]
 8008ace:	1993      	adds	r3, r2, r6
 8008ad0:	9307      	str	r3, [sp, #28]
 8008ad2:	2304      	movs	r3, #4
 8008ad4:	9305      	str	r3, [sp, #20]
 8008ad6:	002b      	movs	r3, r5
 8008ad8:	9904      	ldr	r1, [sp, #16]
 8008ada:	3315      	adds	r3, #21
 8008adc:	9200      	str	r2, [sp, #0]
 8008ade:	4299      	cmp	r1, r3
 8008ae0:	d305      	bcc.n	8008aee <__multiply+0x8a>
 8008ae2:	1b4b      	subs	r3, r1, r5
 8008ae4:	3b15      	subs	r3, #21
 8008ae6:	089b      	lsrs	r3, r3, #2
 8008ae8:	3301      	adds	r3, #1
 8008aea:	009b      	lsls	r3, r3, #2
 8008aec:	9305      	str	r3, [sp, #20]
 8008aee:	9b07      	ldr	r3, [sp, #28]
 8008af0:	9a00      	ldr	r2, [sp, #0]
 8008af2:	429a      	cmp	r2, r3
 8008af4:	d311      	bcc.n	8008b1a <__multiply+0xb6>
 8008af6:	9b02      	ldr	r3, [sp, #8]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	dd06      	ble.n	8008b0a <__multiply+0xa6>
 8008afc:	9b03      	ldr	r3, [sp, #12]
 8008afe:	3b04      	subs	r3, #4
 8008b00:	9303      	str	r3, [sp, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	9300      	str	r3, [sp, #0]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d053      	beq.n	8008bb2 <__multiply+0x14e>
 8008b0a:	9b01      	ldr	r3, [sp, #4]
 8008b0c:	9a02      	ldr	r2, [sp, #8]
 8008b0e:	0018      	movs	r0, r3
 8008b10:	611a      	str	r2, [r3, #16]
 8008b12:	b009      	add	sp, #36	; 0x24
 8008b14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b16:	c304      	stmia	r3!, {r2}
 8008b18:	e7cd      	b.n	8008ab6 <__multiply+0x52>
 8008b1a:	9b00      	ldr	r3, [sp, #0]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	b298      	uxth	r0, r3
 8008b20:	2800      	cmp	r0, #0
 8008b22:	d01b      	beq.n	8008b5c <__multiply+0xf8>
 8008b24:	4667      	mov	r7, ip
 8008b26:	2400      	movs	r4, #0
 8008b28:	9e06      	ldr	r6, [sp, #24]
 8008b2a:	ce02      	ldmia	r6!, {r1}
 8008b2c:	683a      	ldr	r2, [r7, #0]
 8008b2e:	b28b      	uxth	r3, r1
 8008b30:	4343      	muls	r3, r0
 8008b32:	b292      	uxth	r2, r2
 8008b34:	189b      	adds	r3, r3, r2
 8008b36:	191b      	adds	r3, r3, r4
 8008b38:	0c0c      	lsrs	r4, r1, #16
 8008b3a:	4344      	muls	r4, r0
 8008b3c:	683a      	ldr	r2, [r7, #0]
 8008b3e:	0c11      	lsrs	r1, r2, #16
 8008b40:	1861      	adds	r1, r4, r1
 8008b42:	0c1c      	lsrs	r4, r3, #16
 8008b44:	1909      	adds	r1, r1, r4
 8008b46:	0c0c      	lsrs	r4, r1, #16
 8008b48:	b29b      	uxth	r3, r3
 8008b4a:	0409      	lsls	r1, r1, #16
 8008b4c:	430b      	orrs	r3, r1
 8008b4e:	c708      	stmia	r7!, {r3}
 8008b50:	9b04      	ldr	r3, [sp, #16]
 8008b52:	42b3      	cmp	r3, r6
 8008b54:	d8e9      	bhi.n	8008b2a <__multiply+0xc6>
 8008b56:	4663      	mov	r3, ip
 8008b58:	9a05      	ldr	r2, [sp, #20]
 8008b5a:	509c      	str	r4, [r3, r2]
 8008b5c:	9b00      	ldr	r3, [sp, #0]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	0c1e      	lsrs	r6, r3, #16
 8008b62:	d020      	beq.n	8008ba6 <__multiply+0x142>
 8008b64:	4663      	mov	r3, ip
 8008b66:	002c      	movs	r4, r5
 8008b68:	4660      	mov	r0, ip
 8008b6a:	2700      	movs	r7, #0
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	3414      	adds	r4, #20
 8008b70:	6822      	ldr	r2, [r4, #0]
 8008b72:	b29b      	uxth	r3, r3
 8008b74:	b291      	uxth	r1, r2
 8008b76:	4371      	muls	r1, r6
 8008b78:	6802      	ldr	r2, [r0, #0]
 8008b7a:	0c12      	lsrs	r2, r2, #16
 8008b7c:	1889      	adds	r1, r1, r2
 8008b7e:	19cf      	adds	r7, r1, r7
 8008b80:	0439      	lsls	r1, r7, #16
 8008b82:	430b      	orrs	r3, r1
 8008b84:	6003      	str	r3, [r0, #0]
 8008b86:	cc02      	ldmia	r4!, {r1}
 8008b88:	6843      	ldr	r3, [r0, #4]
 8008b8a:	0c09      	lsrs	r1, r1, #16
 8008b8c:	4371      	muls	r1, r6
 8008b8e:	b29b      	uxth	r3, r3
 8008b90:	0c3f      	lsrs	r7, r7, #16
 8008b92:	18cb      	adds	r3, r1, r3
 8008b94:	9a04      	ldr	r2, [sp, #16]
 8008b96:	19db      	adds	r3, r3, r7
 8008b98:	0c1f      	lsrs	r7, r3, #16
 8008b9a:	3004      	adds	r0, #4
 8008b9c:	42a2      	cmp	r2, r4
 8008b9e:	d8e7      	bhi.n	8008b70 <__multiply+0x10c>
 8008ba0:	4662      	mov	r2, ip
 8008ba2:	9905      	ldr	r1, [sp, #20]
 8008ba4:	5053      	str	r3, [r2, r1]
 8008ba6:	9b00      	ldr	r3, [sp, #0]
 8008ba8:	3304      	adds	r3, #4
 8008baa:	9300      	str	r3, [sp, #0]
 8008bac:	2304      	movs	r3, #4
 8008bae:	449c      	add	ip, r3
 8008bb0:	e79d      	b.n	8008aee <__multiply+0x8a>
 8008bb2:	9b02      	ldr	r3, [sp, #8]
 8008bb4:	3b01      	subs	r3, #1
 8008bb6:	9302      	str	r3, [sp, #8]
 8008bb8:	e79d      	b.n	8008af6 <__multiply+0x92>
 8008bba:	46c0      	nop			; (mov r8, r8)
 8008bbc:	0800a9b9 	.word	0x0800a9b9
 8008bc0:	0800aa44 	.word	0x0800aa44

08008bc4 <__pow5mult>:
 8008bc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008bc6:	2303      	movs	r3, #3
 8008bc8:	0015      	movs	r5, r2
 8008bca:	0007      	movs	r7, r0
 8008bcc:	000e      	movs	r6, r1
 8008bce:	401a      	ands	r2, r3
 8008bd0:	421d      	tst	r5, r3
 8008bd2:	d008      	beq.n	8008be6 <__pow5mult+0x22>
 8008bd4:	4925      	ldr	r1, [pc, #148]	; (8008c6c <__pow5mult+0xa8>)
 8008bd6:	3a01      	subs	r2, #1
 8008bd8:	0092      	lsls	r2, r2, #2
 8008bda:	5852      	ldr	r2, [r2, r1]
 8008bdc:	2300      	movs	r3, #0
 8008bde:	0031      	movs	r1, r6
 8008be0:	f7ff fe52 	bl	8008888 <__multadd>
 8008be4:	0006      	movs	r6, r0
 8008be6:	10ad      	asrs	r5, r5, #2
 8008be8:	d03d      	beq.n	8008c66 <__pow5mult+0xa2>
 8008bea:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8008bec:	2c00      	cmp	r4, #0
 8008bee:	d10f      	bne.n	8008c10 <__pow5mult+0x4c>
 8008bf0:	2010      	movs	r0, #16
 8008bf2:	f7ff fdc5 	bl	8008780 <malloc>
 8008bf6:	1e02      	subs	r2, r0, #0
 8008bf8:	6278      	str	r0, [r7, #36]	; 0x24
 8008bfa:	d105      	bne.n	8008c08 <__pow5mult+0x44>
 8008bfc:	21d7      	movs	r1, #215	; 0xd7
 8008bfe:	4b1c      	ldr	r3, [pc, #112]	; (8008c70 <__pow5mult+0xac>)
 8008c00:	481c      	ldr	r0, [pc, #112]	; (8008c74 <__pow5mult+0xb0>)
 8008c02:	0049      	lsls	r1, r1, #1
 8008c04:	f7ff fa1a 	bl	800803c <__assert_func>
 8008c08:	6044      	str	r4, [r0, #4]
 8008c0a:	6084      	str	r4, [r0, #8]
 8008c0c:	6004      	str	r4, [r0, #0]
 8008c0e:	60c4      	str	r4, [r0, #12]
 8008c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c12:	689c      	ldr	r4, [r3, #8]
 8008c14:	9301      	str	r3, [sp, #4]
 8008c16:	2c00      	cmp	r4, #0
 8008c18:	d108      	bne.n	8008c2c <__pow5mult+0x68>
 8008c1a:	0038      	movs	r0, r7
 8008c1c:	4916      	ldr	r1, [pc, #88]	; (8008c78 <__pow5mult+0xb4>)
 8008c1e:	f7ff ff0b 	bl	8008a38 <__i2b>
 8008c22:	9b01      	ldr	r3, [sp, #4]
 8008c24:	0004      	movs	r4, r0
 8008c26:	6098      	str	r0, [r3, #8]
 8008c28:	2300      	movs	r3, #0
 8008c2a:	6003      	str	r3, [r0, #0]
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	421d      	tst	r5, r3
 8008c30:	d00a      	beq.n	8008c48 <__pow5mult+0x84>
 8008c32:	0031      	movs	r1, r6
 8008c34:	0022      	movs	r2, r4
 8008c36:	0038      	movs	r0, r7
 8008c38:	f7ff ff14 	bl	8008a64 <__multiply>
 8008c3c:	0031      	movs	r1, r6
 8008c3e:	9001      	str	r0, [sp, #4]
 8008c40:	0038      	movs	r0, r7
 8008c42:	f7ff fdfd 	bl	8008840 <_Bfree>
 8008c46:	9e01      	ldr	r6, [sp, #4]
 8008c48:	106d      	asrs	r5, r5, #1
 8008c4a:	d00c      	beq.n	8008c66 <__pow5mult+0xa2>
 8008c4c:	6820      	ldr	r0, [r4, #0]
 8008c4e:	2800      	cmp	r0, #0
 8008c50:	d107      	bne.n	8008c62 <__pow5mult+0x9e>
 8008c52:	0022      	movs	r2, r4
 8008c54:	0021      	movs	r1, r4
 8008c56:	0038      	movs	r0, r7
 8008c58:	f7ff ff04 	bl	8008a64 <__multiply>
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	6020      	str	r0, [r4, #0]
 8008c60:	6003      	str	r3, [r0, #0]
 8008c62:	0004      	movs	r4, r0
 8008c64:	e7e2      	b.n	8008c2c <__pow5mult+0x68>
 8008c66:	0030      	movs	r0, r6
 8008c68:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008c6a:	46c0      	nop			; (mov r8, r8)
 8008c6c:	0800ab90 	.word	0x0800ab90
 8008c70:	0800a808 	.word	0x0800a808
 8008c74:	0800aa44 	.word	0x0800aa44
 8008c78:	00000271 	.word	0x00000271

08008c7c <__lshift>:
 8008c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c7e:	000c      	movs	r4, r1
 8008c80:	0017      	movs	r7, r2
 8008c82:	6923      	ldr	r3, [r4, #16]
 8008c84:	1155      	asrs	r5, r2, #5
 8008c86:	b087      	sub	sp, #28
 8008c88:	18eb      	adds	r3, r5, r3
 8008c8a:	9302      	str	r3, [sp, #8]
 8008c8c:	3301      	adds	r3, #1
 8008c8e:	9301      	str	r3, [sp, #4]
 8008c90:	6849      	ldr	r1, [r1, #4]
 8008c92:	68a3      	ldr	r3, [r4, #8]
 8008c94:	9004      	str	r0, [sp, #16]
 8008c96:	9a01      	ldr	r2, [sp, #4]
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	db10      	blt.n	8008cbe <__lshift+0x42>
 8008c9c:	9804      	ldr	r0, [sp, #16]
 8008c9e:	f7ff fd8b 	bl	80087b8 <_Balloc>
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	0002      	movs	r2, r0
 8008ca6:	0006      	movs	r6, r0
 8008ca8:	0019      	movs	r1, r3
 8008caa:	3214      	adds	r2, #20
 8008cac:	4298      	cmp	r0, r3
 8008cae:	d10c      	bne.n	8008cca <__lshift+0x4e>
 8008cb0:	21da      	movs	r1, #218	; 0xda
 8008cb2:	0002      	movs	r2, r0
 8008cb4:	4b26      	ldr	r3, [pc, #152]	; (8008d50 <__lshift+0xd4>)
 8008cb6:	4827      	ldr	r0, [pc, #156]	; (8008d54 <__lshift+0xd8>)
 8008cb8:	31ff      	adds	r1, #255	; 0xff
 8008cba:	f7ff f9bf 	bl	800803c <__assert_func>
 8008cbe:	3101      	adds	r1, #1
 8008cc0:	005b      	lsls	r3, r3, #1
 8008cc2:	e7e8      	b.n	8008c96 <__lshift+0x1a>
 8008cc4:	0098      	lsls	r0, r3, #2
 8008cc6:	5011      	str	r1, [r2, r0]
 8008cc8:	3301      	adds	r3, #1
 8008cca:	42ab      	cmp	r3, r5
 8008ccc:	dbfa      	blt.n	8008cc4 <__lshift+0x48>
 8008cce:	43eb      	mvns	r3, r5
 8008cd0:	17db      	asrs	r3, r3, #31
 8008cd2:	401d      	ands	r5, r3
 8008cd4:	211f      	movs	r1, #31
 8008cd6:	0023      	movs	r3, r4
 8008cd8:	0038      	movs	r0, r7
 8008cda:	00ad      	lsls	r5, r5, #2
 8008cdc:	1955      	adds	r5, r2, r5
 8008cde:	6922      	ldr	r2, [r4, #16]
 8008ce0:	3314      	adds	r3, #20
 8008ce2:	0092      	lsls	r2, r2, #2
 8008ce4:	4008      	ands	r0, r1
 8008ce6:	4684      	mov	ip, r0
 8008ce8:	189a      	adds	r2, r3, r2
 8008cea:	420f      	tst	r7, r1
 8008cec:	d02a      	beq.n	8008d44 <__lshift+0xc8>
 8008cee:	3101      	adds	r1, #1
 8008cf0:	1a09      	subs	r1, r1, r0
 8008cf2:	9105      	str	r1, [sp, #20]
 8008cf4:	2100      	movs	r1, #0
 8008cf6:	9503      	str	r5, [sp, #12]
 8008cf8:	4667      	mov	r7, ip
 8008cfa:	6818      	ldr	r0, [r3, #0]
 8008cfc:	40b8      	lsls	r0, r7
 8008cfe:	4301      	orrs	r1, r0
 8008d00:	9803      	ldr	r0, [sp, #12]
 8008d02:	c002      	stmia	r0!, {r1}
 8008d04:	cb02      	ldmia	r3!, {r1}
 8008d06:	9003      	str	r0, [sp, #12]
 8008d08:	9805      	ldr	r0, [sp, #20]
 8008d0a:	40c1      	lsrs	r1, r0
 8008d0c:	429a      	cmp	r2, r3
 8008d0e:	d8f3      	bhi.n	8008cf8 <__lshift+0x7c>
 8008d10:	0020      	movs	r0, r4
 8008d12:	3015      	adds	r0, #21
 8008d14:	2304      	movs	r3, #4
 8008d16:	4282      	cmp	r2, r0
 8008d18:	d304      	bcc.n	8008d24 <__lshift+0xa8>
 8008d1a:	1b13      	subs	r3, r2, r4
 8008d1c:	3b15      	subs	r3, #21
 8008d1e:	089b      	lsrs	r3, r3, #2
 8008d20:	3301      	adds	r3, #1
 8008d22:	009b      	lsls	r3, r3, #2
 8008d24:	50e9      	str	r1, [r5, r3]
 8008d26:	2900      	cmp	r1, #0
 8008d28:	d002      	beq.n	8008d30 <__lshift+0xb4>
 8008d2a:	9b02      	ldr	r3, [sp, #8]
 8008d2c:	3302      	adds	r3, #2
 8008d2e:	9301      	str	r3, [sp, #4]
 8008d30:	9b01      	ldr	r3, [sp, #4]
 8008d32:	9804      	ldr	r0, [sp, #16]
 8008d34:	3b01      	subs	r3, #1
 8008d36:	0021      	movs	r1, r4
 8008d38:	6133      	str	r3, [r6, #16]
 8008d3a:	f7ff fd81 	bl	8008840 <_Bfree>
 8008d3e:	0030      	movs	r0, r6
 8008d40:	b007      	add	sp, #28
 8008d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d44:	cb02      	ldmia	r3!, {r1}
 8008d46:	c502      	stmia	r5!, {r1}
 8008d48:	429a      	cmp	r2, r3
 8008d4a:	d8fb      	bhi.n	8008d44 <__lshift+0xc8>
 8008d4c:	e7f0      	b.n	8008d30 <__lshift+0xb4>
 8008d4e:	46c0      	nop			; (mov r8, r8)
 8008d50:	0800a9b9 	.word	0x0800a9b9
 8008d54:	0800aa44 	.word	0x0800aa44

08008d58 <__mcmp>:
 8008d58:	6902      	ldr	r2, [r0, #16]
 8008d5a:	690b      	ldr	r3, [r1, #16]
 8008d5c:	b530      	push	{r4, r5, lr}
 8008d5e:	0004      	movs	r4, r0
 8008d60:	1ad0      	subs	r0, r2, r3
 8008d62:	429a      	cmp	r2, r3
 8008d64:	d10d      	bne.n	8008d82 <__mcmp+0x2a>
 8008d66:	009b      	lsls	r3, r3, #2
 8008d68:	3414      	adds	r4, #20
 8008d6a:	3114      	adds	r1, #20
 8008d6c:	18e2      	adds	r2, r4, r3
 8008d6e:	18c9      	adds	r1, r1, r3
 8008d70:	3a04      	subs	r2, #4
 8008d72:	3904      	subs	r1, #4
 8008d74:	6815      	ldr	r5, [r2, #0]
 8008d76:	680b      	ldr	r3, [r1, #0]
 8008d78:	429d      	cmp	r5, r3
 8008d7a:	d003      	beq.n	8008d84 <__mcmp+0x2c>
 8008d7c:	2001      	movs	r0, #1
 8008d7e:	429d      	cmp	r5, r3
 8008d80:	d303      	bcc.n	8008d8a <__mcmp+0x32>
 8008d82:	bd30      	pop	{r4, r5, pc}
 8008d84:	4294      	cmp	r4, r2
 8008d86:	d3f3      	bcc.n	8008d70 <__mcmp+0x18>
 8008d88:	e7fb      	b.n	8008d82 <__mcmp+0x2a>
 8008d8a:	4240      	negs	r0, r0
 8008d8c:	e7f9      	b.n	8008d82 <__mcmp+0x2a>
	...

08008d90 <__mdiff>:
 8008d90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d92:	000e      	movs	r6, r1
 8008d94:	0007      	movs	r7, r0
 8008d96:	0011      	movs	r1, r2
 8008d98:	0030      	movs	r0, r6
 8008d9a:	b087      	sub	sp, #28
 8008d9c:	0014      	movs	r4, r2
 8008d9e:	f7ff ffdb 	bl	8008d58 <__mcmp>
 8008da2:	1e05      	subs	r5, r0, #0
 8008da4:	d110      	bne.n	8008dc8 <__mdiff+0x38>
 8008da6:	0001      	movs	r1, r0
 8008da8:	0038      	movs	r0, r7
 8008daa:	f7ff fd05 	bl	80087b8 <_Balloc>
 8008dae:	1e02      	subs	r2, r0, #0
 8008db0:	d104      	bne.n	8008dbc <__mdiff+0x2c>
 8008db2:	4b40      	ldr	r3, [pc, #256]	; (8008eb4 <__mdiff+0x124>)
 8008db4:	4940      	ldr	r1, [pc, #256]	; (8008eb8 <__mdiff+0x128>)
 8008db6:	4841      	ldr	r0, [pc, #260]	; (8008ebc <__mdiff+0x12c>)
 8008db8:	f7ff f940 	bl	800803c <__assert_func>
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	6145      	str	r5, [r0, #20]
 8008dc0:	6103      	str	r3, [r0, #16]
 8008dc2:	0010      	movs	r0, r2
 8008dc4:	b007      	add	sp, #28
 8008dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008dc8:	2301      	movs	r3, #1
 8008dca:	9301      	str	r3, [sp, #4]
 8008dcc:	2800      	cmp	r0, #0
 8008dce:	db04      	blt.n	8008dda <__mdiff+0x4a>
 8008dd0:	0023      	movs	r3, r4
 8008dd2:	0034      	movs	r4, r6
 8008dd4:	001e      	movs	r6, r3
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	9301      	str	r3, [sp, #4]
 8008dda:	0038      	movs	r0, r7
 8008ddc:	6861      	ldr	r1, [r4, #4]
 8008dde:	f7ff fceb 	bl	80087b8 <_Balloc>
 8008de2:	1e02      	subs	r2, r0, #0
 8008de4:	d103      	bne.n	8008dee <__mdiff+0x5e>
 8008de6:	2190      	movs	r1, #144	; 0x90
 8008de8:	4b32      	ldr	r3, [pc, #200]	; (8008eb4 <__mdiff+0x124>)
 8008dea:	0089      	lsls	r1, r1, #2
 8008dec:	e7e3      	b.n	8008db6 <__mdiff+0x26>
 8008dee:	9b01      	ldr	r3, [sp, #4]
 8008df0:	2700      	movs	r7, #0
 8008df2:	60c3      	str	r3, [r0, #12]
 8008df4:	6920      	ldr	r0, [r4, #16]
 8008df6:	3414      	adds	r4, #20
 8008df8:	9401      	str	r4, [sp, #4]
 8008dfa:	9b01      	ldr	r3, [sp, #4]
 8008dfc:	0084      	lsls	r4, r0, #2
 8008dfe:	191b      	adds	r3, r3, r4
 8008e00:	0034      	movs	r4, r6
 8008e02:	9302      	str	r3, [sp, #8]
 8008e04:	6933      	ldr	r3, [r6, #16]
 8008e06:	3414      	adds	r4, #20
 8008e08:	0099      	lsls	r1, r3, #2
 8008e0a:	1863      	adds	r3, r4, r1
 8008e0c:	9303      	str	r3, [sp, #12]
 8008e0e:	0013      	movs	r3, r2
 8008e10:	3314      	adds	r3, #20
 8008e12:	469c      	mov	ip, r3
 8008e14:	9305      	str	r3, [sp, #20]
 8008e16:	9b01      	ldr	r3, [sp, #4]
 8008e18:	9304      	str	r3, [sp, #16]
 8008e1a:	9b04      	ldr	r3, [sp, #16]
 8008e1c:	cc02      	ldmia	r4!, {r1}
 8008e1e:	cb20      	ldmia	r3!, {r5}
 8008e20:	9304      	str	r3, [sp, #16]
 8008e22:	b2ab      	uxth	r3, r5
 8008e24:	19df      	adds	r7, r3, r7
 8008e26:	b28b      	uxth	r3, r1
 8008e28:	1afb      	subs	r3, r7, r3
 8008e2a:	0c09      	lsrs	r1, r1, #16
 8008e2c:	0c2d      	lsrs	r5, r5, #16
 8008e2e:	1a6d      	subs	r5, r5, r1
 8008e30:	1419      	asrs	r1, r3, #16
 8008e32:	186d      	adds	r5, r5, r1
 8008e34:	4661      	mov	r1, ip
 8008e36:	142f      	asrs	r7, r5, #16
 8008e38:	b29b      	uxth	r3, r3
 8008e3a:	042d      	lsls	r5, r5, #16
 8008e3c:	432b      	orrs	r3, r5
 8008e3e:	c108      	stmia	r1!, {r3}
 8008e40:	9b03      	ldr	r3, [sp, #12]
 8008e42:	468c      	mov	ip, r1
 8008e44:	42a3      	cmp	r3, r4
 8008e46:	d8e8      	bhi.n	8008e1a <__mdiff+0x8a>
 8008e48:	0031      	movs	r1, r6
 8008e4a:	9c03      	ldr	r4, [sp, #12]
 8008e4c:	3115      	adds	r1, #21
 8008e4e:	2304      	movs	r3, #4
 8008e50:	428c      	cmp	r4, r1
 8008e52:	d304      	bcc.n	8008e5e <__mdiff+0xce>
 8008e54:	1ba3      	subs	r3, r4, r6
 8008e56:	3b15      	subs	r3, #21
 8008e58:	089b      	lsrs	r3, r3, #2
 8008e5a:	3301      	adds	r3, #1
 8008e5c:	009b      	lsls	r3, r3, #2
 8008e5e:	9901      	ldr	r1, [sp, #4]
 8008e60:	18cc      	adds	r4, r1, r3
 8008e62:	9905      	ldr	r1, [sp, #20]
 8008e64:	0026      	movs	r6, r4
 8008e66:	18cb      	adds	r3, r1, r3
 8008e68:	469c      	mov	ip, r3
 8008e6a:	9902      	ldr	r1, [sp, #8]
 8008e6c:	428e      	cmp	r6, r1
 8008e6e:	d310      	bcc.n	8008e92 <__mdiff+0x102>
 8008e70:	9e02      	ldr	r6, [sp, #8]
 8008e72:	1ee1      	subs	r1, r4, #3
 8008e74:	2500      	movs	r5, #0
 8008e76:	428e      	cmp	r6, r1
 8008e78:	d304      	bcc.n	8008e84 <__mdiff+0xf4>
 8008e7a:	0031      	movs	r1, r6
 8008e7c:	3103      	adds	r1, #3
 8008e7e:	1b0c      	subs	r4, r1, r4
 8008e80:	08a4      	lsrs	r4, r4, #2
 8008e82:	00a5      	lsls	r5, r4, #2
 8008e84:	195b      	adds	r3, r3, r5
 8008e86:	3b04      	subs	r3, #4
 8008e88:	6819      	ldr	r1, [r3, #0]
 8008e8a:	2900      	cmp	r1, #0
 8008e8c:	d00f      	beq.n	8008eae <__mdiff+0x11e>
 8008e8e:	6110      	str	r0, [r2, #16]
 8008e90:	e797      	b.n	8008dc2 <__mdiff+0x32>
 8008e92:	ce02      	ldmia	r6!, {r1}
 8008e94:	b28d      	uxth	r5, r1
 8008e96:	19ed      	adds	r5, r5, r7
 8008e98:	0c0f      	lsrs	r7, r1, #16
 8008e9a:	1429      	asrs	r1, r5, #16
 8008e9c:	1879      	adds	r1, r7, r1
 8008e9e:	140f      	asrs	r7, r1, #16
 8008ea0:	b2ad      	uxth	r5, r5
 8008ea2:	0409      	lsls	r1, r1, #16
 8008ea4:	430d      	orrs	r5, r1
 8008ea6:	4661      	mov	r1, ip
 8008ea8:	c120      	stmia	r1!, {r5}
 8008eaa:	468c      	mov	ip, r1
 8008eac:	e7dd      	b.n	8008e6a <__mdiff+0xda>
 8008eae:	3801      	subs	r0, #1
 8008eb0:	e7e9      	b.n	8008e86 <__mdiff+0xf6>
 8008eb2:	46c0      	nop			; (mov r8, r8)
 8008eb4:	0800a9b9 	.word	0x0800a9b9
 8008eb8:	00000232 	.word	0x00000232
 8008ebc:	0800aa44 	.word	0x0800aa44

08008ec0 <__ulp>:
 8008ec0:	4b0f      	ldr	r3, [pc, #60]	; (8008f00 <__ulp+0x40>)
 8008ec2:	4019      	ands	r1, r3
 8008ec4:	4b0f      	ldr	r3, [pc, #60]	; (8008f04 <__ulp+0x44>)
 8008ec6:	18c9      	adds	r1, r1, r3
 8008ec8:	2900      	cmp	r1, #0
 8008eca:	dd04      	ble.n	8008ed6 <__ulp+0x16>
 8008ecc:	2200      	movs	r2, #0
 8008ece:	000b      	movs	r3, r1
 8008ed0:	0010      	movs	r0, r2
 8008ed2:	0019      	movs	r1, r3
 8008ed4:	4770      	bx	lr
 8008ed6:	4249      	negs	r1, r1
 8008ed8:	2200      	movs	r2, #0
 8008eda:	2300      	movs	r3, #0
 8008edc:	1509      	asrs	r1, r1, #20
 8008ede:	2913      	cmp	r1, #19
 8008ee0:	dc04      	bgt.n	8008eec <__ulp+0x2c>
 8008ee2:	2080      	movs	r0, #128	; 0x80
 8008ee4:	0300      	lsls	r0, r0, #12
 8008ee6:	4108      	asrs	r0, r1
 8008ee8:	0003      	movs	r3, r0
 8008eea:	e7f1      	b.n	8008ed0 <__ulp+0x10>
 8008eec:	3914      	subs	r1, #20
 8008eee:	2001      	movs	r0, #1
 8008ef0:	291e      	cmp	r1, #30
 8008ef2:	dc02      	bgt.n	8008efa <__ulp+0x3a>
 8008ef4:	2080      	movs	r0, #128	; 0x80
 8008ef6:	0600      	lsls	r0, r0, #24
 8008ef8:	40c8      	lsrs	r0, r1
 8008efa:	0002      	movs	r2, r0
 8008efc:	e7e8      	b.n	8008ed0 <__ulp+0x10>
 8008efe:	46c0      	nop			; (mov r8, r8)
 8008f00:	7ff00000 	.word	0x7ff00000
 8008f04:	fcc00000 	.word	0xfcc00000

08008f08 <__b2d>:
 8008f08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f0a:	0006      	movs	r6, r0
 8008f0c:	6903      	ldr	r3, [r0, #16]
 8008f0e:	3614      	adds	r6, #20
 8008f10:	009b      	lsls	r3, r3, #2
 8008f12:	18f3      	adds	r3, r6, r3
 8008f14:	1f1d      	subs	r5, r3, #4
 8008f16:	682c      	ldr	r4, [r5, #0]
 8008f18:	000f      	movs	r7, r1
 8008f1a:	0020      	movs	r0, r4
 8008f1c:	9301      	str	r3, [sp, #4]
 8008f1e:	f7ff fd43 	bl	80089a8 <__hi0bits>
 8008f22:	2320      	movs	r3, #32
 8008f24:	1a1b      	subs	r3, r3, r0
 8008f26:	491f      	ldr	r1, [pc, #124]	; (8008fa4 <__b2d+0x9c>)
 8008f28:	603b      	str	r3, [r7, #0]
 8008f2a:	280a      	cmp	r0, #10
 8008f2c:	dc16      	bgt.n	8008f5c <__b2d+0x54>
 8008f2e:	230b      	movs	r3, #11
 8008f30:	0027      	movs	r7, r4
 8008f32:	1a1b      	subs	r3, r3, r0
 8008f34:	40df      	lsrs	r7, r3
 8008f36:	4339      	orrs	r1, r7
 8008f38:	469c      	mov	ip, r3
 8008f3a:	000b      	movs	r3, r1
 8008f3c:	2100      	movs	r1, #0
 8008f3e:	42ae      	cmp	r6, r5
 8008f40:	d202      	bcs.n	8008f48 <__b2d+0x40>
 8008f42:	9901      	ldr	r1, [sp, #4]
 8008f44:	3908      	subs	r1, #8
 8008f46:	6809      	ldr	r1, [r1, #0]
 8008f48:	3015      	adds	r0, #21
 8008f4a:	4084      	lsls	r4, r0
 8008f4c:	4660      	mov	r0, ip
 8008f4e:	40c1      	lsrs	r1, r0
 8008f50:	430c      	orrs	r4, r1
 8008f52:	0022      	movs	r2, r4
 8008f54:	0010      	movs	r0, r2
 8008f56:	0019      	movs	r1, r3
 8008f58:	b003      	add	sp, #12
 8008f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f5c:	2700      	movs	r7, #0
 8008f5e:	42ae      	cmp	r6, r5
 8008f60:	d202      	bcs.n	8008f68 <__b2d+0x60>
 8008f62:	9d01      	ldr	r5, [sp, #4]
 8008f64:	3d08      	subs	r5, #8
 8008f66:	682f      	ldr	r7, [r5, #0]
 8008f68:	230b      	movs	r3, #11
 8008f6a:	425b      	negs	r3, r3
 8008f6c:	469c      	mov	ip, r3
 8008f6e:	4484      	add	ip, r0
 8008f70:	280b      	cmp	r0, #11
 8008f72:	d013      	beq.n	8008f9c <__b2d+0x94>
 8008f74:	4663      	mov	r3, ip
 8008f76:	2020      	movs	r0, #32
 8008f78:	409c      	lsls	r4, r3
 8008f7a:	1ac0      	subs	r0, r0, r3
 8008f7c:	003b      	movs	r3, r7
 8008f7e:	40c3      	lsrs	r3, r0
 8008f80:	431c      	orrs	r4, r3
 8008f82:	4321      	orrs	r1, r4
 8008f84:	000b      	movs	r3, r1
 8008f86:	2100      	movs	r1, #0
 8008f88:	42b5      	cmp	r5, r6
 8008f8a:	d901      	bls.n	8008f90 <__b2d+0x88>
 8008f8c:	3d04      	subs	r5, #4
 8008f8e:	6829      	ldr	r1, [r5, #0]
 8008f90:	4664      	mov	r4, ip
 8008f92:	40c1      	lsrs	r1, r0
 8008f94:	40a7      	lsls	r7, r4
 8008f96:	430f      	orrs	r7, r1
 8008f98:	003a      	movs	r2, r7
 8008f9a:	e7db      	b.n	8008f54 <__b2d+0x4c>
 8008f9c:	4321      	orrs	r1, r4
 8008f9e:	000b      	movs	r3, r1
 8008fa0:	e7fa      	b.n	8008f98 <__b2d+0x90>
 8008fa2:	46c0      	nop			; (mov r8, r8)
 8008fa4:	3ff00000 	.word	0x3ff00000

08008fa8 <__d2b>:
 8008fa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008faa:	2101      	movs	r1, #1
 8008fac:	0014      	movs	r4, r2
 8008fae:	001e      	movs	r6, r3
 8008fb0:	9f08      	ldr	r7, [sp, #32]
 8008fb2:	f7ff fc01 	bl	80087b8 <_Balloc>
 8008fb6:	1e05      	subs	r5, r0, #0
 8008fb8:	d105      	bne.n	8008fc6 <__d2b+0x1e>
 8008fba:	0002      	movs	r2, r0
 8008fbc:	4b26      	ldr	r3, [pc, #152]	; (8009058 <__d2b+0xb0>)
 8008fbe:	4927      	ldr	r1, [pc, #156]	; (800905c <__d2b+0xb4>)
 8008fc0:	4827      	ldr	r0, [pc, #156]	; (8009060 <__d2b+0xb8>)
 8008fc2:	f7ff f83b 	bl	800803c <__assert_func>
 8008fc6:	0333      	lsls	r3, r6, #12
 8008fc8:	0076      	lsls	r6, r6, #1
 8008fca:	0b1b      	lsrs	r3, r3, #12
 8008fcc:	0d76      	lsrs	r6, r6, #21
 8008fce:	d124      	bne.n	800901a <__d2b+0x72>
 8008fd0:	9301      	str	r3, [sp, #4]
 8008fd2:	2c00      	cmp	r4, #0
 8008fd4:	d027      	beq.n	8009026 <__d2b+0x7e>
 8008fd6:	4668      	mov	r0, sp
 8008fd8:	9400      	str	r4, [sp, #0]
 8008fda:	f7ff fcff 	bl	80089dc <__lo0bits>
 8008fde:	9c00      	ldr	r4, [sp, #0]
 8008fe0:	2800      	cmp	r0, #0
 8008fe2:	d01e      	beq.n	8009022 <__d2b+0x7a>
 8008fe4:	9b01      	ldr	r3, [sp, #4]
 8008fe6:	2120      	movs	r1, #32
 8008fe8:	001a      	movs	r2, r3
 8008fea:	1a09      	subs	r1, r1, r0
 8008fec:	408a      	lsls	r2, r1
 8008fee:	40c3      	lsrs	r3, r0
 8008ff0:	4322      	orrs	r2, r4
 8008ff2:	616a      	str	r2, [r5, #20]
 8008ff4:	9301      	str	r3, [sp, #4]
 8008ff6:	9c01      	ldr	r4, [sp, #4]
 8008ff8:	61ac      	str	r4, [r5, #24]
 8008ffa:	1e63      	subs	r3, r4, #1
 8008ffc:	419c      	sbcs	r4, r3
 8008ffe:	3401      	adds	r4, #1
 8009000:	612c      	str	r4, [r5, #16]
 8009002:	2e00      	cmp	r6, #0
 8009004:	d018      	beq.n	8009038 <__d2b+0x90>
 8009006:	4b17      	ldr	r3, [pc, #92]	; (8009064 <__d2b+0xbc>)
 8009008:	18f6      	adds	r6, r6, r3
 800900a:	2335      	movs	r3, #53	; 0x35
 800900c:	1836      	adds	r6, r6, r0
 800900e:	1a18      	subs	r0, r3, r0
 8009010:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009012:	603e      	str	r6, [r7, #0]
 8009014:	6018      	str	r0, [r3, #0]
 8009016:	0028      	movs	r0, r5
 8009018:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800901a:	2280      	movs	r2, #128	; 0x80
 800901c:	0352      	lsls	r2, r2, #13
 800901e:	4313      	orrs	r3, r2
 8009020:	e7d6      	b.n	8008fd0 <__d2b+0x28>
 8009022:	616c      	str	r4, [r5, #20]
 8009024:	e7e7      	b.n	8008ff6 <__d2b+0x4e>
 8009026:	a801      	add	r0, sp, #4
 8009028:	f7ff fcd8 	bl	80089dc <__lo0bits>
 800902c:	2401      	movs	r4, #1
 800902e:	9b01      	ldr	r3, [sp, #4]
 8009030:	612c      	str	r4, [r5, #16]
 8009032:	616b      	str	r3, [r5, #20]
 8009034:	3020      	adds	r0, #32
 8009036:	e7e4      	b.n	8009002 <__d2b+0x5a>
 8009038:	4b0b      	ldr	r3, [pc, #44]	; (8009068 <__d2b+0xc0>)
 800903a:	18c0      	adds	r0, r0, r3
 800903c:	4b0b      	ldr	r3, [pc, #44]	; (800906c <__d2b+0xc4>)
 800903e:	6038      	str	r0, [r7, #0]
 8009040:	18e3      	adds	r3, r4, r3
 8009042:	009b      	lsls	r3, r3, #2
 8009044:	18eb      	adds	r3, r5, r3
 8009046:	6958      	ldr	r0, [r3, #20]
 8009048:	f7ff fcae 	bl	80089a8 <__hi0bits>
 800904c:	0164      	lsls	r4, r4, #5
 800904e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009050:	1a24      	subs	r4, r4, r0
 8009052:	601c      	str	r4, [r3, #0]
 8009054:	e7df      	b.n	8009016 <__d2b+0x6e>
 8009056:	46c0      	nop			; (mov r8, r8)
 8009058:	0800a9b9 	.word	0x0800a9b9
 800905c:	0000030a 	.word	0x0000030a
 8009060:	0800aa44 	.word	0x0800aa44
 8009064:	fffffbcd 	.word	0xfffffbcd
 8009068:	fffffbce 	.word	0xfffffbce
 800906c:	3fffffff 	.word	0x3fffffff

08009070 <__ratio>:
 8009070:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009072:	b087      	sub	sp, #28
 8009074:	000f      	movs	r7, r1
 8009076:	a904      	add	r1, sp, #16
 8009078:	0006      	movs	r6, r0
 800907a:	f7ff ff45 	bl	8008f08 <__b2d>
 800907e:	9000      	str	r0, [sp, #0]
 8009080:	9101      	str	r1, [sp, #4]
 8009082:	9c00      	ldr	r4, [sp, #0]
 8009084:	9d01      	ldr	r5, [sp, #4]
 8009086:	0038      	movs	r0, r7
 8009088:	a905      	add	r1, sp, #20
 800908a:	f7ff ff3d 	bl	8008f08 <__b2d>
 800908e:	9002      	str	r0, [sp, #8]
 8009090:	9103      	str	r1, [sp, #12]
 8009092:	9a02      	ldr	r2, [sp, #8]
 8009094:	9b03      	ldr	r3, [sp, #12]
 8009096:	6931      	ldr	r1, [r6, #16]
 8009098:	6938      	ldr	r0, [r7, #16]
 800909a:	9e05      	ldr	r6, [sp, #20]
 800909c:	1a08      	subs	r0, r1, r0
 800909e:	9904      	ldr	r1, [sp, #16]
 80090a0:	0140      	lsls	r0, r0, #5
 80090a2:	1b89      	subs	r1, r1, r6
 80090a4:	1841      	adds	r1, r0, r1
 80090a6:	0508      	lsls	r0, r1, #20
 80090a8:	2900      	cmp	r1, #0
 80090aa:	dd07      	ble.n	80090bc <__ratio+0x4c>
 80090ac:	9901      	ldr	r1, [sp, #4]
 80090ae:	1845      	adds	r5, r0, r1
 80090b0:	0020      	movs	r0, r4
 80090b2:	0029      	movs	r1, r5
 80090b4:	f7f7 ff8e 	bl	8000fd4 <__aeabi_ddiv>
 80090b8:	b007      	add	sp, #28
 80090ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090bc:	9903      	ldr	r1, [sp, #12]
 80090be:	1a0b      	subs	r3, r1, r0
 80090c0:	e7f6      	b.n	80090b0 <__ratio+0x40>

080090c2 <__copybits>:
 80090c2:	b570      	push	{r4, r5, r6, lr}
 80090c4:	0014      	movs	r4, r2
 80090c6:	0005      	movs	r5, r0
 80090c8:	3901      	subs	r1, #1
 80090ca:	6913      	ldr	r3, [r2, #16]
 80090cc:	1149      	asrs	r1, r1, #5
 80090ce:	3101      	adds	r1, #1
 80090d0:	0089      	lsls	r1, r1, #2
 80090d2:	3414      	adds	r4, #20
 80090d4:	009b      	lsls	r3, r3, #2
 80090d6:	1841      	adds	r1, r0, r1
 80090d8:	18e3      	adds	r3, r4, r3
 80090da:	42a3      	cmp	r3, r4
 80090dc:	d80d      	bhi.n	80090fa <__copybits+0x38>
 80090de:	0014      	movs	r4, r2
 80090e0:	3411      	adds	r4, #17
 80090e2:	2500      	movs	r5, #0
 80090e4:	429c      	cmp	r4, r3
 80090e6:	d803      	bhi.n	80090f0 <__copybits+0x2e>
 80090e8:	1a9b      	subs	r3, r3, r2
 80090ea:	3b11      	subs	r3, #17
 80090ec:	089b      	lsrs	r3, r3, #2
 80090ee:	009d      	lsls	r5, r3, #2
 80090f0:	2300      	movs	r3, #0
 80090f2:	1940      	adds	r0, r0, r5
 80090f4:	4281      	cmp	r1, r0
 80090f6:	d803      	bhi.n	8009100 <__copybits+0x3e>
 80090f8:	bd70      	pop	{r4, r5, r6, pc}
 80090fa:	cc40      	ldmia	r4!, {r6}
 80090fc:	c540      	stmia	r5!, {r6}
 80090fe:	e7ec      	b.n	80090da <__copybits+0x18>
 8009100:	c008      	stmia	r0!, {r3}
 8009102:	e7f7      	b.n	80090f4 <__copybits+0x32>

08009104 <__any_on>:
 8009104:	0002      	movs	r2, r0
 8009106:	6900      	ldr	r0, [r0, #16]
 8009108:	b510      	push	{r4, lr}
 800910a:	3214      	adds	r2, #20
 800910c:	114b      	asrs	r3, r1, #5
 800910e:	4298      	cmp	r0, r3
 8009110:	db13      	blt.n	800913a <__any_on+0x36>
 8009112:	dd0c      	ble.n	800912e <__any_on+0x2a>
 8009114:	241f      	movs	r4, #31
 8009116:	0008      	movs	r0, r1
 8009118:	4020      	ands	r0, r4
 800911a:	4221      	tst	r1, r4
 800911c:	d007      	beq.n	800912e <__any_on+0x2a>
 800911e:	0099      	lsls	r1, r3, #2
 8009120:	588c      	ldr	r4, [r1, r2]
 8009122:	0021      	movs	r1, r4
 8009124:	40c1      	lsrs	r1, r0
 8009126:	4081      	lsls	r1, r0
 8009128:	2001      	movs	r0, #1
 800912a:	428c      	cmp	r4, r1
 800912c:	d104      	bne.n	8009138 <__any_on+0x34>
 800912e:	009b      	lsls	r3, r3, #2
 8009130:	18d3      	adds	r3, r2, r3
 8009132:	4293      	cmp	r3, r2
 8009134:	d803      	bhi.n	800913e <__any_on+0x3a>
 8009136:	2000      	movs	r0, #0
 8009138:	bd10      	pop	{r4, pc}
 800913a:	0003      	movs	r3, r0
 800913c:	e7f7      	b.n	800912e <__any_on+0x2a>
 800913e:	3b04      	subs	r3, #4
 8009140:	6819      	ldr	r1, [r3, #0]
 8009142:	2900      	cmp	r1, #0
 8009144:	d0f5      	beq.n	8009132 <__any_on+0x2e>
 8009146:	2001      	movs	r0, #1
 8009148:	e7f6      	b.n	8009138 <__any_on+0x34>

0800914a <_calloc_r>:
 800914a:	b570      	push	{r4, r5, r6, lr}
 800914c:	0c13      	lsrs	r3, r2, #16
 800914e:	0c0d      	lsrs	r5, r1, #16
 8009150:	d11e      	bne.n	8009190 <_calloc_r+0x46>
 8009152:	2b00      	cmp	r3, #0
 8009154:	d10c      	bne.n	8009170 <_calloc_r+0x26>
 8009156:	b289      	uxth	r1, r1
 8009158:	b294      	uxth	r4, r2
 800915a:	434c      	muls	r4, r1
 800915c:	0021      	movs	r1, r4
 800915e:	f000 f88d 	bl	800927c <_malloc_r>
 8009162:	1e05      	subs	r5, r0, #0
 8009164:	d01b      	beq.n	800919e <_calloc_r+0x54>
 8009166:	0022      	movs	r2, r4
 8009168:	2100      	movs	r1, #0
 800916a:	f7fd ff96 	bl	800709a <memset>
 800916e:	e016      	b.n	800919e <_calloc_r+0x54>
 8009170:	1c1d      	adds	r5, r3, #0
 8009172:	1c0b      	adds	r3, r1, #0
 8009174:	b292      	uxth	r2, r2
 8009176:	b289      	uxth	r1, r1
 8009178:	b29c      	uxth	r4, r3
 800917a:	4351      	muls	r1, r2
 800917c:	b2ab      	uxth	r3, r5
 800917e:	4363      	muls	r3, r4
 8009180:	0c0c      	lsrs	r4, r1, #16
 8009182:	191c      	adds	r4, r3, r4
 8009184:	0c22      	lsrs	r2, r4, #16
 8009186:	d107      	bne.n	8009198 <_calloc_r+0x4e>
 8009188:	0424      	lsls	r4, r4, #16
 800918a:	b289      	uxth	r1, r1
 800918c:	430c      	orrs	r4, r1
 800918e:	e7e5      	b.n	800915c <_calloc_r+0x12>
 8009190:	2b00      	cmp	r3, #0
 8009192:	d101      	bne.n	8009198 <_calloc_r+0x4e>
 8009194:	1c13      	adds	r3, r2, #0
 8009196:	e7ed      	b.n	8009174 <_calloc_r+0x2a>
 8009198:	230c      	movs	r3, #12
 800919a:	2500      	movs	r5, #0
 800919c:	6003      	str	r3, [r0, #0]
 800919e:	0028      	movs	r0, r5
 80091a0:	bd70      	pop	{r4, r5, r6, pc}
	...

080091a4 <_free_r>:
 80091a4:	b570      	push	{r4, r5, r6, lr}
 80091a6:	0005      	movs	r5, r0
 80091a8:	2900      	cmp	r1, #0
 80091aa:	d010      	beq.n	80091ce <_free_r+0x2a>
 80091ac:	1f0c      	subs	r4, r1, #4
 80091ae:	6823      	ldr	r3, [r4, #0]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	da00      	bge.n	80091b6 <_free_r+0x12>
 80091b4:	18e4      	adds	r4, r4, r3
 80091b6:	0028      	movs	r0, r5
 80091b8:	f001 f878 	bl	800a2ac <__malloc_lock>
 80091bc:	4a1d      	ldr	r2, [pc, #116]	; (8009234 <_free_r+0x90>)
 80091be:	6813      	ldr	r3, [r2, #0]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d105      	bne.n	80091d0 <_free_r+0x2c>
 80091c4:	6063      	str	r3, [r4, #4]
 80091c6:	6014      	str	r4, [r2, #0]
 80091c8:	0028      	movs	r0, r5
 80091ca:	f001 f877 	bl	800a2bc <__malloc_unlock>
 80091ce:	bd70      	pop	{r4, r5, r6, pc}
 80091d0:	42a3      	cmp	r3, r4
 80091d2:	d908      	bls.n	80091e6 <_free_r+0x42>
 80091d4:	6821      	ldr	r1, [r4, #0]
 80091d6:	1860      	adds	r0, r4, r1
 80091d8:	4283      	cmp	r3, r0
 80091da:	d1f3      	bne.n	80091c4 <_free_r+0x20>
 80091dc:	6818      	ldr	r0, [r3, #0]
 80091de:	685b      	ldr	r3, [r3, #4]
 80091e0:	1841      	adds	r1, r0, r1
 80091e2:	6021      	str	r1, [r4, #0]
 80091e4:	e7ee      	b.n	80091c4 <_free_r+0x20>
 80091e6:	001a      	movs	r2, r3
 80091e8:	685b      	ldr	r3, [r3, #4]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d001      	beq.n	80091f2 <_free_r+0x4e>
 80091ee:	42a3      	cmp	r3, r4
 80091f0:	d9f9      	bls.n	80091e6 <_free_r+0x42>
 80091f2:	6811      	ldr	r1, [r2, #0]
 80091f4:	1850      	adds	r0, r2, r1
 80091f6:	42a0      	cmp	r0, r4
 80091f8:	d10b      	bne.n	8009212 <_free_r+0x6e>
 80091fa:	6820      	ldr	r0, [r4, #0]
 80091fc:	1809      	adds	r1, r1, r0
 80091fe:	1850      	adds	r0, r2, r1
 8009200:	6011      	str	r1, [r2, #0]
 8009202:	4283      	cmp	r3, r0
 8009204:	d1e0      	bne.n	80091c8 <_free_r+0x24>
 8009206:	6818      	ldr	r0, [r3, #0]
 8009208:	685b      	ldr	r3, [r3, #4]
 800920a:	1841      	adds	r1, r0, r1
 800920c:	6011      	str	r1, [r2, #0]
 800920e:	6053      	str	r3, [r2, #4]
 8009210:	e7da      	b.n	80091c8 <_free_r+0x24>
 8009212:	42a0      	cmp	r0, r4
 8009214:	d902      	bls.n	800921c <_free_r+0x78>
 8009216:	230c      	movs	r3, #12
 8009218:	602b      	str	r3, [r5, #0]
 800921a:	e7d5      	b.n	80091c8 <_free_r+0x24>
 800921c:	6821      	ldr	r1, [r4, #0]
 800921e:	1860      	adds	r0, r4, r1
 8009220:	4283      	cmp	r3, r0
 8009222:	d103      	bne.n	800922c <_free_r+0x88>
 8009224:	6818      	ldr	r0, [r3, #0]
 8009226:	685b      	ldr	r3, [r3, #4]
 8009228:	1841      	adds	r1, r0, r1
 800922a:	6021      	str	r1, [r4, #0]
 800922c:	6063      	str	r3, [r4, #4]
 800922e:	6054      	str	r4, [r2, #4]
 8009230:	e7ca      	b.n	80091c8 <_free_r+0x24>
 8009232:	46c0      	nop			; (mov r8, r8)
 8009234:	200005ac 	.word	0x200005ac

08009238 <sbrk_aligned>:
 8009238:	b570      	push	{r4, r5, r6, lr}
 800923a:	4e0f      	ldr	r6, [pc, #60]	; (8009278 <sbrk_aligned+0x40>)
 800923c:	000d      	movs	r5, r1
 800923e:	6831      	ldr	r1, [r6, #0]
 8009240:	0004      	movs	r4, r0
 8009242:	2900      	cmp	r1, #0
 8009244:	d102      	bne.n	800924c <sbrk_aligned+0x14>
 8009246:	f000 fcdb 	bl	8009c00 <_sbrk_r>
 800924a:	6030      	str	r0, [r6, #0]
 800924c:	0029      	movs	r1, r5
 800924e:	0020      	movs	r0, r4
 8009250:	f000 fcd6 	bl	8009c00 <_sbrk_r>
 8009254:	1c43      	adds	r3, r0, #1
 8009256:	d00a      	beq.n	800926e <sbrk_aligned+0x36>
 8009258:	2303      	movs	r3, #3
 800925a:	1cc5      	adds	r5, r0, #3
 800925c:	439d      	bics	r5, r3
 800925e:	42a8      	cmp	r0, r5
 8009260:	d007      	beq.n	8009272 <sbrk_aligned+0x3a>
 8009262:	1a29      	subs	r1, r5, r0
 8009264:	0020      	movs	r0, r4
 8009266:	f000 fccb 	bl	8009c00 <_sbrk_r>
 800926a:	1c43      	adds	r3, r0, #1
 800926c:	d101      	bne.n	8009272 <sbrk_aligned+0x3a>
 800926e:	2501      	movs	r5, #1
 8009270:	426d      	negs	r5, r5
 8009272:	0028      	movs	r0, r5
 8009274:	bd70      	pop	{r4, r5, r6, pc}
 8009276:	46c0      	nop			; (mov r8, r8)
 8009278:	200005b0 	.word	0x200005b0

0800927c <_malloc_r>:
 800927c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800927e:	2203      	movs	r2, #3
 8009280:	1ccb      	adds	r3, r1, #3
 8009282:	4393      	bics	r3, r2
 8009284:	3308      	adds	r3, #8
 8009286:	0006      	movs	r6, r0
 8009288:	001f      	movs	r7, r3
 800928a:	2b0c      	cmp	r3, #12
 800928c:	d232      	bcs.n	80092f4 <_malloc_r+0x78>
 800928e:	270c      	movs	r7, #12
 8009290:	42b9      	cmp	r1, r7
 8009292:	d831      	bhi.n	80092f8 <_malloc_r+0x7c>
 8009294:	0030      	movs	r0, r6
 8009296:	f001 f809 	bl	800a2ac <__malloc_lock>
 800929a:	4d32      	ldr	r5, [pc, #200]	; (8009364 <_malloc_r+0xe8>)
 800929c:	682b      	ldr	r3, [r5, #0]
 800929e:	001c      	movs	r4, r3
 80092a0:	2c00      	cmp	r4, #0
 80092a2:	d12e      	bne.n	8009302 <_malloc_r+0x86>
 80092a4:	0039      	movs	r1, r7
 80092a6:	0030      	movs	r0, r6
 80092a8:	f7ff ffc6 	bl	8009238 <sbrk_aligned>
 80092ac:	0004      	movs	r4, r0
 80092ae:	1c43      	adds	r3, r0, #1
 80092b0:	d11e      	bne.n	80092f0 <_malloc_r+0x74>
 80092b2:	682c      	ldr	r4, [r5, #0]
 80092b4:	0025      	movs	r5, r4
 80092b6:	2d00      	cmp	r5, #0
 80092b8:	d14a      	bne.n	8009350 <_malloc_r+0xd4>
 80092ba:	6823      	ldr	r3, [r4, #0]
 80092bc:	0029      	movs	r1, r5
 80092be:	18e3      	adds	r3, r4, r3
 80092c0:	0030      	movs	r0, r6
 80092c2:	9301      	str	r3, [sp, #4]
 80092c4:	f000 fc9c 	bl	8009c00 <_sbrk_r>
 80092c8:	9b01      	ldr	r3, [sp, #4]
 80092ca:	4283      	cmp	r3, r0
 80092cc:	d143      	bne.n	8009356 <_malloc_r+0xda>
 80092ce:	6823      	ldr	r3, [r4, #0]
 80092d0:	3703      	adds	r7, #3
 80092d2:	1aff      	subs	r7, r7, r3
 80092d4:	2303      	movs	r3, #3
 80092d6:	439f      	bics	r7, r3
 80092d8:	3708      	adds	r7, #8
 80092da:	2f0c      	cmp	r7, #12
 80092dc:	d200      	bcs.n	80092e0 <_malloc_r+0x64>
 80092de:	270c      	movs	r7, #12
 80092e0:	0039      	movs	r1, r7
 80092e2:	0030      	movs	r0, r6
 80092e4:	f7ff ffa8 	bl	8009238 <sbrk_aligned>
 80092e8:	1c43      	adds	r3, r0, #1
 80092ea:	d034      	beq.n	8009356 <_malloc_r+0xda>
 80092ec:	6823      	ldr	r3, [r4, #0]
 80092ee:	19df      	adds	r7, r3, r7
 80092f0:	6027      	str	r7, [r4, #0]
 80092f2:	e013      	b.n	800931c <_malloc_r+0xa0>
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	dacb      	bge.n	8009290 <_malloc_r+0x14>
 80092f8:	230c      	movs	r3, #12
 80092fa:	2500      	movs	r5, #0
 80092fc:	6033      	str	r3, [r6, #0]
 80092fe:	0028      	movs	r0, r5
 8009300:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009302:	6822      	ldr	r2, [r4, #0]
 8009304:	1bd1      	subs	r1, r2, r7
 8009306:	d420      	bmi.n	800934a <_malloc_r+0xce>
 8009308:	290b      	cmp	r1, #11
 800930a:	d917      	bls.n	800933c <_malloc_r+0xc0>
 800930c:	19e2      	adds	r2, r4, r7
 800930e:	6027      	str	r7, [r4, #0]
 8009310:	42a3      	cmp	r3, r4
 8009312:	d111      	bne.n	8009338 <_malloc_r+0xbc>
 8009314:	602a      	str	r2, [r5, #0]
 8009316:	6863      	ldr	r3, [r4, #4]
 8009318:	6011      	str	r1, [r2, #0]
 800931a:	6053      	str	r3, [r2, #4]
 800931c:	0030      	movs	r0, r6
 800931e:	0025      	movs	r5, r4
 8009320:	f000 ffcc 	bl	800a2bc <__malloc_unlock>
 8009324:	2207      	movs	r2, #7
 8009326:	350b      	adds	r5, #11
 8009328:	1d23      	adds	r3, r4, #4
 800932a:	4395      	bics	r5, r2
 800932c:	1aea      	subs	r2, r5, r3
 800932e:	429d      	cmp	r5, r3
 8009330:	d0e5      	beq.n	80092fe <_malloc_r+0x82>
 8009332:	1b5b      	subs	r3, r3, r5
 8009334:	50a3      	str	r3, [r4, r2]
 8009336:	e7e2      	b.n	80092fe <_malloc_r+0x82>
 8009338:	605a      	str	r2, [r3, #4]
 800933a:	e7ec      	b.n	8009316 <_malloc_r+0x9a>
 800933c:	6862      	ldr	r2, [r4, #4]
 800933e:	42a3      	cmp	r3, r4
 8009340:	d101      	bne.n	8009346 <_malloc_r+0xca>
 8009342:	602a      	str	r2, [r5, #0]
 8009344:	e7ea      	b.n	800931c <_malloc_r+0xa0>
 8009346:	605a      	str	r2, [r3, #4]
 8009348:	e7e8      	b.n	800931c <_malloc_r+0xa0>
 800934a:	0023      	movs	r3, r4
 800934c:	6864      	ldr	r4, [r4, #4]
 800934e:	e7a7      	b.n	80092a0 <_malloc_r+0x24>
 8009350:	002c      	movs	r4, r5
 8009352:	686d      	ldr	r5, [r5, #4]
 8009354:	e7af      	b.n	80092b6 <_malloc_r+0x3a>
 8009356:	230c      	movs	r3, #12
 8009358:	0030      	movs	r0, r6
 800935a:	6033      	str	r3, [r6, #0]
 800935c:	f000 ffae 	bl	800a2bc <__malloc_unlock>
 8009360:	e7cd      	b.n	80092fe <_malloc_r+0x82>
 8009362:	46c0      	nop			; (mov r8, r8)
 8009364:	200005ac 	.word	0x200005ac

08009368 <__ssputs_r>:
 8009368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800936a:	688e      	ldr	r6, [r1, #8]
 800936c:	b085      	sub	sp, #20
 800936e:	0007      	movs	r7, r0
 8009370:	000c      	movs	r4, r1
 8009372:	9203      	str	r2, [sp, #12]
 8009374:	9301      	str	r3, [sp, #4]
 8009376:	429e      	cmp	r6, r3
 8009378:	d83c      	bhi.n	80093f4 <__ssputs_r+0x8c>
 800937a:	2390      	movs	r3, #144	; 0x90
 800937c:	898a      	ldrh	r2, [r1, #12]
 800937e:	00db      	lsls	r3, r3, #3
 8009380:	421a      	tst	r2, r3
 8009382:	d034      	beq.n	80093ee <__ssputs_r+0x86>
 8009384:	6909      	ldr	r1, [r1, #16]
 8009386:	6823      	ldr	r3, [r4, #0]
 8009388:	6960      	ldr	r0, [r4, #20]
 800938a:	1a5b      	subs	r3, r3, r1
 800938c:	9302      	str	r3, [sp, #8]
 800938e:	2303      	movs	r3, #3
 8009390:	4343      	muls	r3, r0
 8009392:	0fdd      	lsrs	r5, r3, #31
 8009394:	18ed      	adds	r5, r5, r3
 8009396:	9b01      	ldr	r3, [sp, #4]
 8009398:	9802      	ldr	r0, [sp, #8]
 800939a:	3301      	adds	r3, #1
 800939c:	181b      	adds	r3, r3, r0
 800939e:	106d      	asrs	r5, r5, #1
 80093a0:	42ab      	cmp	r3, r5
 80093a2:	d900      	bls.n	80093a6 <__ssputs_r+0x3e>
 80093a4:	001d      	movs	r5, r3
 80093a6:	0553      	lsls	r3, r2, #21
 80093a8:	d532      	bpl.n	8009410 <__ssputs_r+0xa8>
 80093aa:	0029      	movs	r1, r5
 80093ac:	0038      	movs	r0, r7
 80093ae:	f7ff ff65 	bl	800927c <_malloc_r>
 80093b2:	1e06      	subs	r6, r0, #0
 80093b4:	d109      	bne.n	80093ca <__ssputs_r+0x62>
 80093b6:	230c      	movs	r3, #12
 80093b8:	603b      	str	r3, [r7, #0]
 80093ba:	2340      	movs	r3, #64	; 0x40
 80093bc:	2001      	movs	r0, #1
 80093be:	89a2      	ldrh	r2, [r4, #12]
 80093c0:	4240      	negs	r0, r0
 80093c2:	4313      	orrs	r3, r2
 80093c4:	81a3      	strh	r3, [r4, #12]
 80093c6:	b005      	add	sp, #20
 80093c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093ca:	9a02      	ldr	r2, [sp, #8]
 80093cc:	6921      	ldr	r1, [r4, #16]
 80093ce:	f7fd fe5b 	bl	8007088 <memcpy>
 80093d2:	89a3      	ldrh	r3, [r4, #12]
 80093d4:	4a14      	ldr	r2, [pc, #80]	; (8009428 <__ssputs_r+0xc0>)
 80093d6:	401a      	ands	r2, r3
 80093d8:	2380      	movs	r3, #128	; 0x80
 80093da:	4313      	orrs	r3, r2
 80093dc:	81a3      	strh	r3, [r4, #12]
 80093de:	9b02      	ldr	r3, [sp, #8]
 80093e0:	6126      	str	r6, [r4, #16]
 80093e2:	18f6      	adds	r6, r6, r3
 80093e4:	6026      	str	r6, [r4, #0]
 80093e6:	6165      	str	r5, [r4, #20]
 80093e8:	9e01      	ldr	r6, [sp, #4]
 80093ea:	1aed      	subs	r5, r5, r3
 80093ec:	60a5      	str	r5, [r4, #8]
 80093ee:	9b01      	ldr	r3, [sp, #4]
 80093f0:	429e      	cmp	r6, r3
 80093f2:	d900      	bls.n	80093f6 <__ssputs_r+0x8e>
 80093f4:	9e01      	ldr	r6, [sp, #4]
 80093f6:	0032      	movs	r2, r6
 80093f8:	9903      	ldr	r1, [sp, #12]
 80093fa:	6820      	ldr	r0, [r4, #0]
 80093fc:	f000 ff43 	bl	800a286 <memmove>
 8009400:	68a3      	ldr	r3, [r4, #8]
 8009402:	2000      	movs	r0, #0
 8009404:	1b9b      	subs	r3, r3, r6
 8009406:	60a3      	str	r3, [r4, #8]
 8009408:	6823      	ldr	r3, [r4, #0]
 800940a:	199e      	adds	r6, r3, r6
 800940c:	6026      	str	r6, [r4, #0]
 800940e:	e7da      	b.n	80093c6 <__ssputs_r+0x5e>
 8009410:	002a      	movs	r2, r5
 8009412:	0038      	movs	r0, r7
 8009414:	f000 ff5a 	bl	800a2cc <_realloc_r>
 8009418:	1e06      	subs	r6, r0, #0
 800941a:	d1e0      	bne.n	80093de <__ssputs_r+0x76>
 800941c:	0038      	movs	r0, r7
 800941e:	6921      	ldr	r1, [r4, #16]
 8009420:	f7ff fec0 	bl	80091a4 <_free_r>
 8009424:	e7c7      	b.n	80093b6 <__ssputs_r+0x4e>
 8009426:	46c0      	nop			; (mov r8, r8)
 8009428:	fffffb7f 	.word	0xfffffb7f

0800942c <_svfiprintf_r>:
 800942c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800942e:	b0a1      	sub	sp, #132	; 0x84
 8009430:	9003      	str	r0, [sp, #12]
 8009432:	001d      	movs	r5, r3
 8009434:	898b      	ldrh	r3, [r1, #12]
 8009436:	000f      	movs	r7, r1
 8009438:	0016      	movs	r6, r2
 800943a:	061b      	lsls	r3, r3, #24
 800943c:	d511      	bpl.n	8009462 <_svfiprintf_r+0x36>
 800943e:	690b      	ldr	r3, [r1, #16]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d10e      	bne.n	8009462 <_svfiprintf_r+0x36>
 8009444:	2140      	movs	r1, #64	; 0x40
 8009446:	f7ff ff19 	bl	800927c <_malloc_r>
 800944a:	6038      	str	r0, [r7, #0]
 800944c:	6138      	str	r0, [r7, #16]
 800944e:	2800      	cmp	r0, #0
 8009450:	d105      	bne.n	800945e <_svfiprintf_r+0x32>
 8009452:	230c      	movs	r3, #12
 8009454:	9a03      	ldr	r2, [sp, #12]
 8009456:	3801      	subs	r0, #1
 8009458:	6013      	str	r3, [r2, #0]
 800945a:	b021      	add	sp, #132	; 0x84
 800945c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800945e:	2340      	movs	r3, #64	; 0x40
 8009460:	617b      	str	r3, [r7, #20]
 8009462:	2300      	movs	r3, #0
 8009464:	ac08      	add	r4, sp, #32
 8009466:	6163      	str	r3, [r4, #20]
 8009468:	3320      	adds	r3, #32
 800946a:	7663      	strb	r3, [r4, #25]
 800946c:	3310      	adds	r3, #16
 800946e:	76a3      	strb	r3, [r4, #26]
 8009470:	9507      	str	r5, [sp, #28]
 8009472:	0035      	movs	r5, r6
 8009474:	782b      	ldrb	r3, [r5, #0]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d001      	beq.n	800947e <_svfiprintf_r+0x52>
 800947a:	2b25      	cmp	r3, #37	; 0x25
 800947c:	d147      	bne.n	800950e <_svfiprintf_r+0xe2>
 800947e:	1bab      	subs	r3, r5, r6
 8009480:	9305      	str	r3, [sp, #20]
 8009482:	42b5      	cmp	r5, r6
 8009484:	d00c      	beq.n	80094a0 <_svfiprintf_r+0x74>
 8009486:	0032      	movs	r2, r6
 8009488:	0039      	movs	r1, r7
 800948a:	9803      	ldr	r0, [sp, #12]
 800948c:	f7ff ff6c 	bl	8009368 <__ssputs_r>
 8009490:	1c43      	adds	r3, r0, #1
 8009492:	d100      	bne.n	8009496 <_svfiprintf_r+0x6a>
 8009494:	e0ae      	b.n	80095f4 <_svfiprintf_r+0x1c8>
 8009496:	6962      	ldr	r2, [r4, #20]
 8009498:	9b05      	ldr	r3, [sp, #20]
 800949a:	4694      	mov	ip, r2
 800949c:	4463      	add	r3, ip
 800949e:	6163      	str	r3, [r4, #20]
 80094a0:	782b      	ldrb	r3, [r5, #0]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d100      	bne.n	80094a8 <_svfiprintf_r+0x7c>
 80094a6:	e0a5      	b.n	80095f4 <_svfiprintf_r+0x1c8>
 80094a8:	2201      	movs	r2, #1
 80094aa:	2300      	movs	r3, #0
 80094ac:	4252      	negs	r2, r2
 80094ae:	6062      	str	r2, [r4, #4]
 80094b0:	a904      	add	r1, sp, #16
 80094b2:	3254      	adds	r2, #84	; 0x54
 80094b4:	1852      	adds	r2, r2, r1
 80094b6:	1c6e      	adds	r6, r5, #1
 80094b8:	6023      	str	r3, [r4, #0]
 80094ba:	60e3      	str	r3, [r4, #12]
 80094bc:	60a3      	str	r3, [r4, #8]
 80094be:	7013      	strb	r3, [r2, #0]
 80094c0:	65a3      	str	r3, [r4, #88]	; 0x58
 80094c2:	2205      	movs	r2, #5
 80094c4:	7831      	ldrb	r1, [r6, #0]
 80094c6:	4854      	ldr	r0, [pc, #336]	; (8009618 <_svfiprintf_r+0x1ec>)
 80094c8:	f000 fed2 	bl	800a270 <memchr>
 80094cc:	1c75      	adds	r5, r6, #1
 80094ce:	2800      	cmp	r0, #0
 80094d0:	d11f      	bne.n	8009512 <_svfiprintf_r+0xe6>
 80094d2:	6822      	ldr	r2, [r4, #0]
 80094d4:	06d3      	lsls	r3, r2, #27
 80094d6:	d504      	bpl.n	80094e2 <_svfiprintf_r+0xb6>
 80094d8:	2353      	movs	r3, #83	; 0x53
 80094da:	a904      	add	r1, sp, #16
 80094dc:	185b      	adds	r3, r3, r1
 80094de:	2120      	movs	r1, #32
 80094e0:	7019      	strb	r1, [r3, #0]
 80094e2:	0713      	lsls	r3, r2, #28
 80094e4:	d504      	bpl.n	80094f0 <_svfiprintf_r+0xc4>
 80094e6:	2353      	movs	r3, #83	; 0x53
 80094e8:	a904      	add	r1, sp, #16
 80094ea:	185b      	adds	r3, r3, r1
 80094ec:	212b      	movs	r1, #43	; 0x2b
 80094ee:	7019      	strb	r1, [r3, #0]
 80094f0:	7833      	ldrb	r3, [r6, #0]
 80094f2:	2b2a      	cmp	r3, #42	; 0x2a
 80094f4:	d016      	beq.n	8009524 <_svfiprintf_r+0xf8>
 80094f6:	0035      	movs	r5, r6
 80094f8:	2100      	movs	r1, #0
 80094fa:	200a      	movs	r0, #10
 80094fc:	68e3      	ldr	r3, [r4, #12]
 80094fe:	782a      	ldrb	r2, [r5, #0]
 8009500:	1c6e      	adds	r6, r5, #1
 8009502:	3a30      	subs	r2, #48	; 0x30
 8009504:	2a09      	cmp	r2, #9
 8009506:	d94e      	bls.n	80095a6 <_svfiprintf_r+0x17a>
 8009508:	2900      	cmp	r1, #0
 800950a:	d111      	bne.n	8009530 <_svfiprintf_r+0x104>
 800950c:	e017      	b.n	800953e <_svfiprintf_r+0x112>
 800950e:	3501      	adds	r5, #1
 8009510:	e7b0      	b.n	8009474 <_svfiprintf_r+0x48>
 8009512:	4b41      	ldr	r3, [pc, #260]	; (8009618 <_svfiprintf_r+0x1ec>)
 8009514:	6822      	ldr	r2, [r4, #0]
 8009516:	1ac0      	subs	r0, r0, r3
 8009518:	2301      	movs	r3, #1
 800951a:	4083      	lsls	r3, r0
 800951c:	4313      	orrs	r3, r2
 800951e:	002e      	movs	r6, r5
 8009520:	6023      	str	r3, [r4, #0]
 8009522:	e7ce      	b.n	80094c2 <_svfiprintf_r+0x96>
 8009524:	9b07      	ldr	r3, [sp, #28]
 8009526:	1d19      	adds	r1, r3, #4
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	9107      	str	r1, [sp, #28]
 800952c:	2b00      	cmp	r3, #0
 800952e:	db01      	blt.n	8009534 <_svfiprintf_r+0x108>
 8009530:	930b      	str	r3, [sp, #44]	; 0x2c
 8009532:	e004      	b.n	800953e <_svfiprintf_r+0x112>
 8009534:	425b      	negs	r3, r3
 8009536:	60e3      	str	r3, [r4, #12]
 8009538:	2302      	movs	r3, #2
 800953a:	4313      	orrs	r3, r2
 800953c:	6023      	str	r3, [r4, #0]
 800953e:	782b      	ldrb	r3, [r5, #0]
 8009540:	2b2e      	cmp	r3, #46	; 0x2e
 8009542:	d10a      	bne.n	800955a <_svfiprintf_r+0x12e>
 8009544:	786b      	ldrb	r3, [r5, #1]
 8009546:	2b2a      	cmp	r3, #42	; 0x2a
 8009548:	d135      	bne.n	80095b6 <_svfiprintf_r+0x18a>
 800954a:	9b07      	ldr	r3, [sp, #28]
 800954c:	3502      	adds	r5, #2
 800954e:	1d1a      	adds	r2, r3, #4
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	9207      	str	r2, [sp, #28]
 8009554:	2b00      	cmp	r3, #0
 8009556:	db2b      	blt.n	80095b0 <_svfiprintf_r+0x184>
 8009558:	9309      	str	r3, [sp, #36]	; 0x24
 800955a:	4e30      	ldr	r6, [pc, #192]	; (800961c <_svfiprintf_r+0x1f0>)
 800955c:	2203      	movs	r2, #3
 800955e:	0030      	movs	r0, r6
 8009560:	7829      	ldrb	r1, [r5, #0]
 8009562:	f000 fe85 	bl	800a270 <memchr>
 8009566:	2800      	cmp	r0, #0
 8009568:	d006      	beq.n	8009578 <_svfiprintf_r+0x14c>
 800956a:	2340      	movs	r3, #64	; 0x40
 800956c:	1b80      	subs	r0, r0, r6
 800956e:	4083      	lsls	r3, r0
 8009570:	6822      	ldr	r2, [r4, #0]
 8009572:	3501      	adds	r5, #1
 8009574:	4313      	orrs	r3, r2
 8009576:	6023      	str	r3, [r4, #0]
 8009578:	7829      	ldrb	r1, [r5, #0]
 800957a:	2206      	movs	r2, #6
 800957c:	4828      	ldr	r0, [pc, #160]	; (8009620 <_svfiprintf_r+0x1f4>)
 800957e:	1c6e      	adds	r6, r5, #1
 8009580:	7621      	strb	r1, [r4, #24]
 8009582:	f000 fe75 	bl	800a270 <memchr>
 8009586:	2800      	cmp	r0, #0
 8009588:	d03c      	beq.n	8009604 <_svfiprintf_r+0x1d8>
 800958a:	4b26      	ldr	r3, [pc, #152]	; (8009624 <_svfiprintf_r+0x1f8>)
 800958c:	2b00      	cmp	r3, #0
 800958e:	d125      	bne.n	80095dc <_svfiprintf_r+0x1b0>
 8009590:	2207      	movs	r2, #7
 8009592:	9b07      	ldr	r3, [sp, #28]
 8009594:	3307      	adds	r3, #7
 8009596:	4393      	bics	r3, r2
 8009598:	3308      	adds	r3, #8
 800959a:	9307      	str	r3, [sp, #28]
 800959c:	6963      	ldr	r3, [r4, #20]
 800959e:	9a04      	ldr	r2, [sp, #16]
 80095a0:	189b      	adds	r3, r3, r2
 80095a2:	6163      	str	r3, [r4, #20]
 80095a4:	e765      	b.n	8009472 <_svfiprintf_r+0x46>
 80095a6:	4343      	muls	r3, r0
 80095a8:	0035      	movs	r5, r6
 80095aa:	2101      	movs	r1, #1
 80095ac:	189b      	adds	r3, r3, r2
 80095ae:	e7a6      	b.n	80094fe <_svfiprintf_r+0xd2>
 80095b0:	2301      	movs	r3, #1
 80095b2:	425b      	negs	r3, r3
 80095b4:	e7d0      	b.n	8009558 <_svfiprintf_r+0x12c>
 80095b6:	2300      	movs	r3, #0
 80095b8:	200a      	movs	r0, #10
 80095ba:	001a      	movs	r2, r3
 80095bc:	3501      	adds	r5, #1
 80095be:	6063      	str	r3, [r4, #4]
 80095c0:	7829      	ldrb	r1, [r5, #0]
 80095c2:	1c6e      	adds	r6, r5, #1
 80095c4:	3930      	subs	r1, #48	; 0x30
 80095c6:	2909      	cmp	r1, #9
 80095c8:	d903      	bls.n	80095d2 <_svfiprintf_r+0x1a6>
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d0c5      	beq.n	800955a <_svfiprintf_r+0x12e>
 80095ce:	9209      	str	r2, [sp, #36]	; 0x24
 80095d0:	e7c3      	b.n	800955a <_svfiprintf_r+0x12e>
 80095d2:	4342      	muls	r2, r0
 80095d4:	0035      	movs	r5, r6
 80095d6:	2301      	movs	r3, #1
 80095d8:	1852      	adds	r2, r2, r1
 80095da:	e7f1      	b.n	80095c0 <_svfiprintf_r+0x194>
 80095dc:	ab07      	add	r3, sp, #28
 80095de:	9300      	str	r3, [sp, #0]
 80095e0:	003a      	movs	r2, r7
 80095e2:	0021      	movs	r1, r4
 80095e4:	4b10      	ldr	r3, [pc, #64]	; (8009628 <_svfiprintf_r+0x1fc>)
 80095e6:	9803      	ldr	r0, [sp, #12]
 80095e8:	e000      	b.n	80095ec <_svfiprintf_r+0x1c0>
 80095ea:	bf00      	nop
 80095ec:	9004      	str	r0, [sp, #16]
 80095ee:	9b04      	ldr	r3, [sp, #16]
 80095f0:	3301      	adds	r3, #1
 80095f2:	d1d3      	bne.n	800959c <_svfiprintf_r+0x170>
 80095f4:	89bb      	ldrh	r3, [r7, #12]
 80095f6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80095f8:	065b      	lsls	r3, r3, #25
 80095fa:	d400      	bmi.n	80095fe <_svfiprintf_r+0x1d2>
 80095fc:	e72d      	b.n	800945a <_svfiprintf_r+0x2e>
 80095fe:	2001      	movs	r0, #1
 8009600:	4240      	negs	r0, r0
 8009602:	e72a      	b.n	800945a <_svfiprintf_r+0x2e>
 8009604:	ab07      	add	r3, sp, #28
 8009606:	9300      	str	r3, [sp, #0]
 8009608:	003a      	movs	r2, r7
 800960a:	0021      	movs	r1, r4
 800960c:	4b06      	ldr	r3, [pc, #24]	; (8009628 <_svfiprintf_r+0x1fc>)
 800960e:	9803      	ldr	r0, [sp, #12]
 8009610:	f000 f9de 	bl	80099d0 <_printf_i>
 8009614:	e7ea      	b.n	80095ec <_svfiprintf_r+0x1c0>
 8009616:	46c0      	nop			; (mov r8, r8)
 8009618:	0800ab9c 	.word	0x0800ab9c
 800961c:	0800aba2 	.word	0x0800aba2
 8009620:	0800aba6 	.word	0x0800aba6
 8009624:	00000000 	.word	0x00000000
 8009628:	08009369 	.word	0x08009369

0800962c <__sfputc_r>:
 800962c:	6893      	ldr	r3, [r2, #8]
 800962e:	b510      	push	{r4, lr}
 8009630:	3b01      	subs	r3, #1
 8009632:	6093      	str	r3, [r2, #8]
 8009634:	2b00      	cmp	r3, #0
 8009636:	da04      	bge.n	8009642 <__sfputc_r+0x16>
 8009638:	6994      	ldr	r4, [r2, #24]
 800963a:	42a3      	cmp	r3, r4
 800963c:	db07      	blt.n	800964e <__sfputc_r+0x22>
 800963e:	290a      	cmp	r1, #10
 8009640:	d005      	beq.n	800964e <__sfputc_r+0x22>
 8009642:	6813      	ldr	r3, [r2, #0]
 8009644:	1c58      	adds	r0, r3, #1
 8009646:	6010      	str	r0, [r2, #0]
 8009648:	7019      	strb	r1, [r3, #0]
 800964a:	0008      	movs	r0, r1
 800964c:	bd10      	pop	{r4, pc}
 800964e:	f000 faed 	bl	8009c2c <__swbuf_r>
 8009652:	0001      	movs	r1, r0
 8009654:	e7f9      	b.n	800964a <__sfputc_r+0x1e>

08009656 <__sfputs_r>:
 8009656:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009658:	0006      	movs	r6, r0
 800965a:	000f      	movs	r7, r1
 800965c:	0014      	movs	r4, r2
 800965e:	18d5      	adds	r5, r2, r3
 8009660:	42ac      	cmp	r4, r5
 8009662:	d101      	bne.n	8009668 <__sfputs_r+0x12>
 8009664:	2000      	movs	r0, #0
 8009666:	e007      	b.n	8009678 <__sfputs_r+0x22>
 8009668:	7821      	ldrb	r1, [r4, #0]
 800966a:	003a      	movs	r2, r7
 800966c:	0030      	movs	r0, r6
 800966e:	f7ff ffdd 	bl	800962c <__sfputc_r>
 8009672:	3401      	adds	r4, #1
 8009674:	1c43      	adds	r3, r0, #1
 8009676:	d1f3      	bne.n	8009660 <__sfputs_r+0xa>
 8009678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800967c <_vfiprintf_r>:
 800967c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800967e:	b0a1      	sub	sp, #132	; 0x84
 8009680:	0006      	movs	r6, r0
 8009682:	000c      	movs	r4, r1
 8009684:	001f      	movs	r7, r3
 8009686:	9203      	str	r2, [sp, #12]
 8009688:	2800      	cmp	r0, #0
 800968a:	d004      	beq.n	8009696 <_vfiprintf_r+0x1a>
 800968c:	6983      	ldr	r3, [r0, #24]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d101      	bne.n	8009696 <_vfiprintf_r+0x1a>
 8009692:	f000 fcdd 	bl	800a050 <__sinit>
 8009696:	4b8e      	ldr	r3, [pc, #568]	; (80098d0 <_vfiprintf_r+0x254>)
 8009698:	429c      	cmp	r4, r3
 800969a:	d11c      	bne.n	80096d6 <_vfiprintf_r+0x5a>
 800969c:	6874      	ldr	r4, [r6, #4]
 800969e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80096a0:	07db      	lsls	r3, r3, #31
 80096a2:	d405      	bmi.n	80096b0 <_vfiprintf_r+0x34>
 80096a4:	89a3      	ldrh	r3, [r4, #12]
 80096a6:	059b      	lsls	r3, r3, #22
 80096a8:	d402      	bmi.n	80096b0 <_vfiprintf_r+0x34>
 80096aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80096ac:	f000 fd71 	bl	800a192 <__retarget_lock_acquire_recursive>
 80096b0:	89a3      	ldrh	r3, [r4, #12]
 80096b2:	071b      	lsls	r3, r3, #28
 80096b4:	d502      	bpl.n	80096bc <_vfiprintf_r+0x40>
 80096b6:	6923      	ldr	r3, [r4, #16]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d11d      	bne.n	80096f8 <_vfiprintf_r+0x7c>
 80096bc:	0021      	movs	r1, r4
 80096be:	0030      	movs	r0, r6
 80096c0:	f000 fb18 	bl	8009cf4 <__swsetup_r>
 80096c4:	2800      	cmp	r0, #0
 80096c6:	d017      	beq.n	80096f8 <_vfiprintf_r+0x7c>
 80096c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80096ca:	07db      	lsls	r3, r3, #31
 80096cc:	d50d      	bpl.n	80096ea <_vfiprintf_r+0x6e>
 80096ce:	2001      	movs	r0, #1
 80096d0:	4240      	negs	r0, r0
 80096d2:	b021      	add	sp, #132	; 0x84
 80096d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096d6:	4b7f      	ldr	r3, [pc, #508]	; (80098d4 <_vfiprintf_r+0x258>)
 80096d8:	429c      	cmp	r4, r3
 80096da:	d101      	bne.n	80096e0 <_vfiprintf_r+0x64>
 80096dc:	68b4      	ldr	r4, [r6, #8]
 80096de:	e7de      	b.n	800969e <_vfiprintf_r+0x22>
 80096e0:	4b7d      	ldr	r3, [pc, #500]	; (80098d8 <_vfiprintf_r+0x25c>)
 80096e2:	429c      	cmp	r4, r3
 80096e4:	d1db      	bne.n	800969e <_vfiprintf_r+0x22>
 80096e6:	68f4      	ldr	r4, [r6, #12]
 80096e8:	e7d9      	b.n	800969e <_vfiprintf_r+0x22>
 80096ea:	89a3      	ldrh	r3, [r4, #12]
 80096ec:	059b      	lsls	r3, r3, #22
 80096ee:	d4ee      	bmi.n	80096ce <_vfiprintf_r+0x52>
 80096f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80096f2:	f000 fd4f 	bl	800a194 <__retarget_lock_release_recursive>
 80096f6:	e7ea      	b.n	80096ce <_vfiprintf_r+0x52>
 80096f8:	2300      	movs	r3, #0
 80096fa:	ad08      	add	r5, sp, #32
 80096fc:	616b      	str	r3, [r5, #20]
 80096fe:	3320      	adds	r3, #32
 8009700:	766b      	strb	r3, [r5, #25]
 8009702:	3310      	adds	r3, #16
 8009704:	76ab      	strb	r3, [r5, #26]
 8009706:	9707      	str	r7, [sp, #28]
 8009708:	9f03      	ldr	r7, [sp, #12]
 800970a:	783b      	ldrb	r3, [r7, #0]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d001      	beq.n	8009714 <_vfiprintf_r+0x98>
 8009710:	2b25      	cmp	r3, #37	; 0x25
 8009712:	d14e      	bne.n	80097b2 <_vfiprintf_r+0x136>
 8009714:	9b03      	ldr	r3, [sp, #12]
 8009716:	1afb      	subs	r3, r7, r3
 8009718:	9305      	str	r3, [sp, #20]
 800971a:	9b03      	ldr	r3, [sp, #12]
 800971c:	429f      	cmp	r7, r3
 800971e:	d00d      	beq.n	800973c <_vfiprintf_r+0xc0>
 8009720:	9b05      	ldr	r3, [sp, #20]
 8009722:	0021      	movs	r1, r4
 8009724:	0030      	movs	r0, r6
 8009726:	9a03      	ldr	r2, [sp, #12]
 8009728:	f7ff ff95 	bl	8009656 <__sfputs_r>
 800972c:	1c43      	adds	r3, r0, #1
 800972e:	d100      	bne.n	8009732 <_vfiprintf_r+0xb6>
 8009730:	e0b5      	b.n	800989e <_vfiprintf_r+0x222>
 8009732:	696a      	ldr	r2, [r5, #20]
 8009734:	9b05      	ldr	r3, [sp, #20]
 8009736:	4694      	mov	ip, r2
 8009738:	4463      	add	r3, ip
 800973a:	616b      	str	r3, [r5, #20]
 800973c:	783b      	ldrb	r3, [r7, #0]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d100      	bne.n	8009744 <_vfiprintf_r+0xc8>
 8009742:	e0ac      	b.n	800989e <_vfiprintf_r+0x222>
 8009744:	2201      	movs	r2, #1
 8009746:	1c7b      	adds	r3, r7, #1
 8009748:	9303      	str	r3, [sp, #12]
 800974a:	2300      	movs	r3, #0
 800974c:	4252      	negs	r2, r2
 800974e:	606a      	str	r2, [r5, #4]
 8009750:	a904      	add	r1, sp, #16
 8009752:	3254      	adds	r2, #84	; 0x54
 8009754:	1852      	adds	r2, r2, r1
 8009756:	602b      	str	r3, [r5, #0]
 8009758:	60eb      	str	r3, [r5, #12]
 800975a:	60ab      	str	r3, [r5, #8]
 800975c:	7013      	strb	r3, [r2, #0]
 800975e:	65ab      	str	r3, [r5, #88]	; 0x58
 8009760:	9b03      	ldr	r3, [sp, #12]
 8009762:	2205      	movs	r2, #5
 8009764:	7819      	ldrb	r1, [r3, #0]
 8009766:	485d      	ldr	r0, [pc, #372]	; (80098dc <_vfiprintf_r+0x260>)
 8009768:	f000 fd82 	bl	800a270 <memchr>
 800976c:	9b03      	ldr	r3, [sp, #12]
 800976e:	1c5f      	adds	r7, r3, #1
 8009770:	2800      	cmp	r0, #0
 8009772:	d120      	bne.n	80097b6 <_vfiprintf_r+0x13a>
 8009774:	682a      	ldr	r2, [r5, #0]
 8009776:	06d3      	lsls	r3, r2, #27
 8009778:	d504      	bpl.n	8009784 <_vfiprintf_r+0x108>
 800977a:	2353      	movs	r3, #83	; 0x53
 800977c:	a904      	add	r1, sp, #16
 800977e:	185b      	adds	r3, r3, r1
 8009780:	2120      	movs	r1, #32
 8009782:	7019      	strb	r1, [r3, #0]
 8009784:	0713      	lsls	r3, r2, #28
 8009786:	d504      	bpl.n	8009792 <_vfiprintf_r+0x116>
 8009788:	2353      	movs	r3, #83	; 0x53
 800978a:	a904      	add	r1, sp, #16
 800978c:	185b      	adds	r3, r3, r1
 800978e:	212b      	movs	r1, #43	; 0x2b
 8009790:	7019      	strb	r1, [r3, #0]
 8009792:	9b03      	ldr	r3, [sp, #12]
 8009794:	781b      	ldrb	r3, [r3, #0]
 8009796:	2b2a      	cmp	r3, #42	; 0x2a
 8009798:	d016      	beq.n	80097c8 <_vfiprintf_r+0x14c>
 800979a:	2100      	movs	r1, #0
 800979c:	68eb      	ldr	r3, [r5, #12]
 800979e:	9f03      	ldr	r7, [sp, #12]
 80097a0:	783a      	ldrb	r2, [r7, #0]
 80097a2:	1c78      	adds	r0, r7, #1
 80097a4:	3a30      	subs	r2, #48	; 0x30
 80097a6:	4684      	mov	ip, r0
 80097a8:	2a09      	cmp	r2, #9
 80097aa:	d94f      	bls.n	800984c <_vfiprintf_r+0x1d0>
 80097ac:	2900      	cmp	r1, #0
 80097ae:	d111      	bne.n	80097d4 <_vfiprintf_r+0x158>
 80097b0:	e017      	b.n	80097e2 <_vfiprintf_r+0x166>
 80097b2:	3701      	adds	r7, #1
 80097b4:	e7a9      	b.n	800970a <_vfiprintf_r+0x8e>
 80097b6:	4b49      	ldr	r3, [pc, #292]	; (80098dc <_vfiprintf_r+0x260>)
 80097b8:	682a      	ldr	r2, [r5, #0]
 80097ba:	1ac0      	subs	r0, r0, r3
 80097bc:	2301      	movs	r3, #1
 80097be:	4083      	lsls	r3, r0
 80097c0:	4313      	orrs	r3, r2
 80097c2:	602b      	str	r3, [r5, #0]
 80097c4:	9703      	str	r7, [sp, #12]
 80097c6:	e7cb      	b.n	8009760 <_vfiprintf_r+0xe4>
 80097c8:	9b07      	ldr	r3, [sp, #28]
 80097ca:	1d19      	adds	r1, r3, #4
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	9107      	str	r1, [sp, #28]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	db01      	blt.n	80097d8 <_vfiprintf_r+0x15c>
 80097d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80097d6:	e004      	b.n	80097e2 <_vfiprintf_r+0x166>
 80097d8:	425b      	negs	r3, r3
 80097da:	60eb      	str	r3, [r5, #12]
 80097dc:	2302      	movs	r3, #2
 80097de:	4313      	orrs	r3, r2
 80097e0:	602b      	str	r3, [r5, #0]
 80097e2:	783b      	ldrb	r3, [r7, #0]
 80097e4:	2b2e      	cmp	r3, #46	; 0x2e
 80097e6:	d10a      	bne.n	80097fe <_vfiprintf_r+0x182>
 80097e8:	787b      	ldrb	r3, [r7, #1]
 80097ea:	2b2a      	cmp	r3, #42	; 0x2a
 80097ec:	d137      	bne.n	800985e <_vfiprintf_r+0x1e2>
 80097ee:	9b07      	ldr	r3, [sp, #28]
 80097f0:	3702      	adds	r7, #2
 80097f2:	1d1a      	adds	r2, r3, #4
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	9207      	str	r2, [sp, #28]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	db2d      	blt.n	8009858 <_vfiprintf_r+0x1dc>
 80097fc:	9309      	str	r3, [sp, #36]	; 0x24
 80097fe:	2203      	movs	r2, #3
 8009800:	7839      	ldrb	r1, [r7, #0]
 8009802:	4837      	ldr	r0, [pc, #220]	; (80098e0 <_vfiprintf_r+0x264>)
 8009804:	f000 fd34 	bl	800a270 <memchr>
 8009808:	2800      	cmp	r0, #0
 800980a:	d007      	beq.n	800981c <_vfiprintf_r+0x1a0>
 800980c:	4b34      	ldr	r3, [pc, #208]	; (80098e0 <_vfiprintf_r+0x264>)
 800980e:	682a      	ldr	r2, [r5, #0]
 8009810:	1ac0      	subs	r0, r0, r3
 8009812:	2340      	movs	r3, #64	; 0x40
 8009814:	4083      	lsls	r3, r0
 8009816:	4313      	orrs	r3, r2
 8009818:	3701      	adds	r7, #1
 800981a:	602b      	str	r3, [r5, #0]
 800981c:	7839      	ldrb	r1, [r7, #0]
 800981e:	1c7b      	adds	r3, r7, #1
 8009820:	2206      	movs	r2, #6
 8009822:	4830      	ldr	r0, [pc, #192]	; (80098e4 <_vfiprintf_r+0x268>)
 8009824:	9303      	str	r3, [sp, #12]
 8009826:	7629      	strb	r1, [r5, #24]
 8009828:	f000 fd22 	bl	800a270 <memchr>
 800982c:	2800      	cmp	r0, #0
 800982e:	d045      	beq.n	80098bc <_vfiprintf_r+0x240>
 8009830:	4b2d      	ldr	r3, [pc, #180]	; (80098e8 <_vfiprintf_r+0x26c>)
 8009832:	2b00      	cmp	r3, #0
 8009834:	d127      	bne.n	8009886 <_vfiprintf_r+0x20a>
 8009836:	2207      	movs	r2, #7
 8009838:	9b07      	ldr	r3, [sp, #28]
 800983a:	3307      	adds	r3, #7
 800983c:	4393      	bics	r3, r2
 800983e:	3308      	adds	r3, #8
 8009840:	9307      	str	r3, [sp, #28]
 8009842:	696b      	ldr	r3, [r5, #20]
 8009844:	9a04      	ldr	r2, [sp, #16]
 8009846:	189b      	adds	r3, r3, r2
 8009848:	616b      	str	r3, [r5, #20]
 800984a:	e75d      	b.n	8009708 <_vfiprintf_r+0x8c>
 800984c:	210a      	movs	r1, #10
 800984e:	434b      	muls	r3, r1
 8009850:	4667      	mov	r7, ip
 8009852:	189b      	adds	r3, r3, r2
 8009854:	3909      	subs	r1, #9
 8009856:	e7a3      	b.n	80097a0 <_vfiprintf_r+0x124>
 8009858:	2301      	movs	r3, #1
 800985a:	425b      	negs	r3, r3
 800985c:	e7ce      	b.n	80097fc <_vfiprintf_r+0x180>
 800985e:	2300      	movs	r3, #0
 8009860:	001a      	movs	r2, r3
 8009862:	3701      	adds	r7, #1
 8009864:	606b      	str	r3, [r5, #4]
 8009866:	7839      	ldrb	r1, [r7, #0]
 8009868:	1c78      	adds	r0, r7, #1
 800986a:	3930      	subs	r1, #48	; 0x30
 800986c:	4684      	mov	ip, r0
 800986e:	2909      	cmp	r1, #9
 8009870:	d903      	bls.n	800987a <_vfiprintf_r+0x1fe>
 8009872:	2b00      	cmp	r3, #0
 8009874:	d0c3      	beq.n	80097fe <_vfiprintf_r+0x182>
 8009876:	9209      	str	r2, [sp, #36]	; 0x24
 8009878:	e7c1      	b.n	80097fe <_vfiprintf_r+0x182>
 800987a:	230a      	movs	r3, #10
 800987c:	435a      	muls	r2, r3
 800987e:	4667      	mov	r7, ip
 8009880:	1852      	adds	r2, r2, r1
 8009882:	3b09      	subs	r3, #9
 8009884:	e7ef      	b.n	8009866 <_vfiprintf_r+0x1ea>
 8009886:	ab07      	add	r3, sp, #28
 8009888:	9300      	str	r3, [sp, #0]
 800988a:	0022      	movs	r2, r4
 800988c:	0029      	movs	r1, r5
 800988e:	0030      	movs	r0, r6
 8009890:	4b16      	ldr	r3, [pc, #88]	; (80098ec <_vfiprintf_r+0x270>)
 8009892:	e000      	b.n	8009896 <_vfiprintf_r+0x21a>
 8009894:	bf00      	nop
 8009896:	9004      	str	r0, [sp, #16]
 8009898:	9b04      	ldr	r3, [sp, #16]
 800989a:	3301      	adds	r3, #1
 800989c:	d1d1      	bne.n	8009842 <_vfiprintf_r+0x1c6>
 800989e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80098a0:	07db      	lsls	r3, r3, #31
 80098a2:	d405      	bmi.n	80098b0 <_vfiprintf_r+0x234>
 80098a4:	89a3      	ldrh	r3, [r4, #12]
 80098a6:	059b      	lsls	r3, r3, #22
 80098a8:	d402      	bmi.n	80098b0 <_vfiprintf_r+0x234>
 80098aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80098ac:	f000 fc72 	bl	800a194 <__retarget_lock_release_recursive>
 80098b0:	89a3      	ldrh	r3, [r4, #12]
 80098b2:	065b      	lsls	r3, r3, #25
 80098b4:	d500      	bpl.n	80098b8 <_vfiprintf_r+0x23c>
 80098b6:	e70a      	b.n	80096ce <_vfiprintf_r+0x52>
 80098b8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80098ba:	e70a      	b.n	80096d2 <_vfiprintf_r+0x56>
 80098bc:	ab07      	add	r3, sp, #28
 80098be:	9300      	str	r3, [sp, #0]
 80098c0:	0022      	movs	r2, r4
 80098c2:	0029      	movs	r1, r5
 80098c4:	0030      	movs	r0, r6
 80098c6:	4b09      	ldr	r3, [pc, #36]	; (80098ec <_vfiprintf_r+0x270>)
 80098c8:	f000 f882 	bl	80099d0 <_printf_i>
 80098cc:	e7e3      	b.n	8009896 <_vfiprintf_r+0x21a>
 80098ce:	46c0      	nop			; (mov r8, r8)
 80098d0:	0800abf0 	.word	0x0800abf0
 80098d4:	0800ac10 	.word	0x0800ac10
 80098d8:	0800abd0 	.word	0x0800abd0
 80098dc:	0800ab9c 	.word	0x0800ab9c
 80098e0:	0800aba2 	.word	0x0800aba2
 80098e4:	0800aba6 	.word	0x0800aba6
 80098e8:	00000000 	.word	0x00000000
 80098ec:	08009657 	.word	0x08009657

080098f0 <_printf_common>:
 80098f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80098f2:	0015      	movs	r5, r2
 80098f4:	9301      	str	r3, [sp, #4]
 80098f6:	688a      	ldr	r2, [r1, #8]
 80098f8:	690b      	ldr	r3, [r1, #16]
 80098fa:	000c      	movs	r4, r1
 80098fc:	9000      	str	r0, [sp, #0]
 80098fe:	4293      	cmp	r3, r2
 8009900:	da00      	bge.n	8009904 <_printf_common+0x14>
 8009902:	0013      	movs	r3, r2
 8009904:	0022      	movs	r2, r4
 8009906:	602b      	str	r3, [r5, #0]
 8009908:	3243      	adds	r2, #67	; 0x43
 800990a:	7812      	ldrb	r2, [r2, #0]
 800990c:	2a00      	cmp	r2, #0
 800990e:	d001      	beq.n	8009914 <_printf_common+0x24>
 8009910:	3301      	adds	r3, #1
 8009912:	602b      	str	r3, [r5, #0]
 8009914:	6823      	ldr	r3, [r4, #0]
 8009916:	069b      	lsls	r3, r3, #26
 8009918:	d502      	bpl.n	8009920 <_printf_common+0x30>
 800991a:	682b      	ldr	r3, [r5, #0]
 800991c:	3302      	adds	r3, #2
 800991e:	602b      	str	r3, [r5, #0]
 8009920:	6822      	ldr	r2, [r4, #0]
 8009922:	2306      	movs	r3, #6
 8009924:	0017      	movs	r7, r2
 8009926:	401f      	ands	r7, r3
 8009928:	421a      	tst	r2, r3
 800992a:	d027      	beq.n	800997c <_printf_common+0x8c>
 800992c:	0023      	movs	r3, r4
 800992e:	3343      	adds	r3, #67	; 0x43
 8009930:	781b      	ldrb	r3, [r3, #0]
 8009932:	1e5a      	subs	r2, r3, #1
 8009934:	4193      	sbcs	r3, r2
 8009936:	6822      	ldr	r2, [r4, #0]
 8009938:	0692      	lsls	r2, r2, #26
 800993a:	d430      	bmi.n	800999e <_printf_common+0xae>
 800993c:	0022      	movs	r2, r4
 800993e:	9901      	ldr	r1, [sp, #4]
 8009940:	9800      	ldr	r0, [sp, #0]
 8009942:	9e08      	ldr	r6, [sp, #32]
 8009944:	3243      	adds	r2, #67	; 0x43
 8009946:	47b0      	blx	r6
 8009948:	1c43      	adds	r3, r0, #1
 800994a:	d025      	beq.n	8009998 <_printf_common+0xa8>
 800994c:	2306      	movs	r3, #6
 800994e:	6820      	ldr	r0, [r4, #0]
 8009950:	682a      	ldr	r2, [r5, #0]
 8009952:	68e1      	ldr	r1, [r4, #12]
 8009954:	2500      	movs	r5, #0
 8009956:	4003      	ands	r3, r0
 8009958:	2b04      	cmp	r3, #4
 800995a:	d103      	bne.n	8009964 <_printf_common+0x74>
 800995c:	1a8d      	subs	r5, r1, r2
 800995e:	43eb      	mvns	r3, r5
 8009960:	17db      	asrs	r3, r3, #31
 8009962:	401d      	ands	r5, r3
 8009964:	68a3      	ldr	r3, [r4, #8]
 8009966:	6922      	ldr	r2, [r4, #16]
 8009968:	4293      	cmp	r3, r2
 800996a:	dd01      	ble.n	8009970 <_printf_common+0x80>
 800996c:	1a9b      	subs	r3, r3, r2
 800996e:	18ed      	adds	r5, r5, r3
 8009970:	2700      	movs	r7, #0
 8009972:	42bd      	cmp	r5, r7
 8009974:	d120      	bne.n	80099b8 <_printf_common+0xc8>
 8009976:	2000      	movs	r0, #0
 8009978:	e010      	b.n	800999c <_printf_common+0xac>
 800997a:	3701      	adds	r7, #1
 800997c:	68e3      	ldr	r3, [r4, #12]
 800997e:	682a      	ldr	r2, [r5, #0]
 8009980:	1a9b      	subs	r3, r3, r2
 8009982:	42bb      	cmp	r3, r7
 8009984:	ddd2      	ble.n	800992c <_printf_common+0x3c>
 8009986:	0022      	movs	r2, r4
 8009988:	2301      	movs	r3, #1
 800998a:	9901      	ldr	r1, [sp, #4]
 800998c:	9800      	ldr	r0, [sp, #0]
 800998e:	9e08      	ldr	r6, [sp, #32]
 8009990:	3219      	adds	r2, #25
 8009992:	47b0      	blx	r6
 8009994:	1c43      	adds	r3, r0, #1
 8009996:	d1f0      	bne.n	800997a <_printf_common+0x8a>
 8009998:	2001      	movs	r0, #1
 800999a:	4240      	negs	r0, r0
 800999c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800999e:	2030      	movs	r0, #48	; 0x30
 80099a0:	18e1      	adds	r1, r4, r3
 80099a2:	3143      	adds	r1, #67	; 0x43
 80099a4:	7008      	strb	r0, [r1, #0]
 80099a6:	0021      	movs	r1, r4
 80099a8:	1c5a      	adds	r2, r3, #1
 80099aa:	3145      	adds	r1, #69	; 0x45
 80099ac:	7809      	ldrb	r1, [r1, #0]
 80099ae:	18a2      	adds	r2, r4, r2
 80099b0:	3243      	adds	r2, #67	; 0x43
 80099b2:	3302      	adds	r3, #2
 80099b4:	7011      	strb	r1, [r2, #0]
 80099b6:	e7c1      	b.n	800993c <_printf_common+0x4c>
 80099b8:	0022      	movs	r2, r4
 80099ba:	2301      	movs	r3, #1
 80099bc:	9901      	ldr	r1, [sp, #4]
 80099be:	9800      	ldr	r0, [sp, #0]
 80099c0:	9e08      	ldr	r6, [sp, #32]
 80099c2:	321a      	adds	r2, #26
 80099c4:	47b0      	blx	r6
 80099c6:	1c43      	adds	r3, r0, #1
 80099c8:	d0e6      	beq.n	8009998 <_printf_common+0xa8>
 80099ca:	3701      	adds	r7, #1
 80099cc:	e7d1      	b.n	8009972 <_printf_common+0x82>
	...

080099d0 <_printf_i>:
 80099d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099d2:	b08b      	sub	sp, #44	; 0x2c
 80099d4:	9206      	str	r2, [sp, #24]
 80099d6:	000a      	movs	r2, r1
 80099d8:	3243      	adds	r2, #67	; 0x43
 80099da:	9307      	str	r3, [sp, #28]
 80099dc:	9005      	str	r0, [sp, #20]
 80099de:	9204      	str	r2, [sp, #16]
 80099e0:	7e0a      	ldrb	r2, [r1, #24]
 80099e2:	000c      	movs	r4, r1
 80099e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80099e6:	2a78      	cmp	r2, #120	; 0x78
 80099e8:	d807      	bhi.n	80099fa <_printf_i+0x2a>
 80099ea:	2a62      	cmp	r2, #98	; 0x62
 80099ec:	d809      	bhi.n	8009a02 <_printf_i+0x32>
 80099ee:	2a00      	cmp	r2, #0
 80099f0:	d100      	bne.n	80099f4 <_printf_i+0x24>
 80099f2:	e0c1      	b.n	8009b78 <_printf_i+0x1a8>
 80099f4:	2a58      	cmp	r2, #88	; 0x58
 80099f6:	d100      	bne.n	80099fa <_printf_i+0x2a>
 80099f8:	e08c      	b.n	8009b14 <_printf_i+0x144>
 80099fa:	0026      	movs	r6, r4
 80099fc:	3642      	adds	r6, #66	; 0x42
 80099fe:	7032      	strb	r2, [r6, #0]
 8009a00:	e022      	b.n	8009a48 <_printf_i+0x78>
 8009a02:	0010      	movs	r0, r2
 8009a04:	3863      	subs	r0, #99	; 0x63
 8009a06:	2815      	cmp	r0, #21
 8009a08:	d8f7      	bhi.n	80099fa <_printf_i+0x2a>
 8009a0a:	f7f6 fb8d 	bl	8000128 <__gnu_thumb1_case_shi>
 8009a0e:	0016      	.short	0x0016
 8009a10:	fff6001f 	.word	0xfff6001f
 8009a14:	fff6fff6 	.word	0xfff6fff6
 8009a18:	001ffff6 	.word	0x001ffff6
 8009a1c:	fff6fff6 	.word	0xfff6fff6
 8009a20:	fff6fff6 	.word	0xfff6fff6
 8009a24:	003600a8 	.word	0x003600a8
 8009a28:	fff6009a 	.word	0xfff6009a
 8009a2c:	00b9fff6 	.word	0x00b9fff6
 8009a30:	0036fff6 	.word	0x0036fff6
 8009a34:	fff6fff6 	.word	0xfff6fff6
 8009a38:	009e      	.short	0x009e
 8009a3a:	0026      	movs	r6, r4
 8009a3c:	681a      	ldr	r2, [r3, #0]
 8009a3e:	3642      	adds	r6, #66	; 0x42
 8009a40:	1d11      	adds	r1, r2, #4
 8009a42:	6019      	str	r1, [r3, #0]
 8009a44:	6813      	ldr	r3, [r2, #0]
 8009a46:	7033      	strb	r3, [r6, #0]
 8009a48:	2301      	movs	r3, #1
 8009a4a:	e0a7      	b.n	8009b9c <_printf_i+0x1cc>
 8009a4c:	6808      	ldr	r0, [r1, #0]
 8009a4e:	6819      	ldr	r1, [r3, #0]
 8009a50:	1d0a      	adds	r2, r1, #4
 8009a52:	0605      	lsls	r5, r0, #24
 8009a54:	d50b      	bpl.n	8009a6e <_printf_i+0x9e>
 8009a56:	680d      	ldr	r5, [r1, #0]
 8009a58:	601a      	str	r2, [r3, #0]
 8009a5a:	2d00      	cmp	r5, #0
 8009a5c:	da03      	bge.n	8009a66 <_printf_i+0x96>
 8009a5e:	232d      	movs	r3, #45	; 0x2d
 8009a60:	9a04      	ldr	r2, [sp, #16]
 8009a62:	426d      	negs	r5, r5
 8009a64:	7013      	strb	r3, [r2, #0]
 8009a66:	4b61      	ldr	r3, [pc, #388]	; (8009bec <_printf_i+0x21c>)
 8009a68:	270a      	movs	r7, #10
 8009a6a:	9303      	str	r3, [sp, #12]
 8009a6c:	e01b      	b.n	8009aa6 <_printf_i+0xd6>
 8009a6e:	680d      	ldr	r5, [r1, #0]
 8009a70:	601a      	str	r2, [r3, #0]
 8009a72:	0641      	lsls	r1, r0, #25
 8009a74:	d5f1      	bpl.n	8009a5a <_printf_i+0x8a>
 8009a76:	b22d      	sxth	r5, r5
 8009a78:	e7ef      	b.n	8009a5a <_printf_i+0x8a>
 8009a7a:	680d      	ldr	r5, [r1, #0]
 8009a7c:	6819      	ldr	r1, [r3, #0]
 8009a7e:	1d08      	adds	r0, r1, #4
 8009a80:	6018      	str	r0, [r3, #0]
 8009a82:	062e      	lsls	r6, r5, #24
 8009a84:	d501      	bpl.n	8009a8a <_printf_i+0xba>
 8009a86:	680d      	ldr	r5, [r1, #0]
 8009a88:	e003      	b.n	8009a92 <_printf_i+0xc2>
 8009a8a:	066d      	lsls	r5, r5, #25
 8009a8c:	d5fb      	bpl.n	8009a86 <_printf_i+0xb6>
 8009a8e:	680d      	ldr	r5, [r1, #0]
 8009a90:	b2ad      	uxth	r5, r5
 8009a92:	4b56      	ldr	r3, [pc, #344]	; (8009bec <_printf_i+0x21c>)
 8009a94:	2708      	movs	r7, #8
 8009a96:	9303      	str	r3, [sp, #12]
 8009a98:	2a6f      	cmp	r2, #111	; 0x6f
 8009a9a:	d000      	beq.n	8009a9e <_printf_i+0xce>
 8009a9c:	3702      	adds	r7, #2
 8009a9e:	0023      	movs	r3, r4
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	3343      	adds	r3, #67	; 0x43
 8009aa4:	701a      	strb	r2, [r3, #0]
 8009aa6:	6863      	ldr	r3, [r4, #4]
 8009aa8:	60a3      	str	r3, [r4, #8]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	db03      	blt.n	8009ab6 <_printf_i+0xe6>
 8009aae:	2204      	movs	r2, #4
 8009ab0:	6821      	ldr	r1, [r4, #0]
 8009ab2:	4391      	bics	r1, r2
 8009ab4:	6021      	str	r1, [r4, #0]
 8009ab6:	2d00      	cmp	r5, #0
 8009ab8:	d102      	bne.n	8009ac0 <_printf_i+0xf0>
 8009aba:	9e04      	ldr	r6, [sp, #16]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d00c      	beq.n	8009ada <_printf_i+0x10a>
 8009ac0:	9e04      	ldr	r6, [sp, #16]
 8009ac2:	0028      	movs	r0, r5
 8009ac4:	0039      	movs	r1, r7
 8009ac6:	f7f6 fbbf 	bl	8000248 <__aeabi_uidivmod>
 8009aca:	9b03      	ldr	r3, [sp, #12]
 8009acc:	3e01      	subs	r6, #1
 8009ace:	5c5b      	ldrb	r3, [r3, r1]
 8009ad0:	7033      	strb	r3, [r6, #0]
 8009ad2:	002b      	movs	r3, r5
 8009ad4:	0005      	movs	r5, r0
 8009ad6:	429f      	cmp	r7, r3
 8009ad8:	d9f3      	bls.n	8009ac2 <_printf_i+0xf2>
 8009ada:	2f08      	cmp	r7, #8
 8009adc:	d109      	bne.n	8009af2 <_printf_i+0x122>
 8009ade:	6823      	ldr	r3, [r4, #0]
 8009ae0:	07db      	lsls	r3, r3, #31
 8009ae2:	d506      	bpl.n	8009af2 <_printf_i+0x122>
 8009ae4:	6863      	ldr	r3, [r4, #4]
 8009ae6:	6922      	ldr	r2, [r4, #16]
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	dc02      	bgt.n	8009af2 <_printf_i+0x122>
 8009aec:	2330      	movs	r3, #48	; 0x30
 8009aee:	3e01      	subs	r6, #1
 8009af0:	7033      	strb	r3, [r6, #0]
 8009af2:	9b04      	ldr	r3, [sp, #16]
 8009af4:	1b9b      	subs	r3, r3, r6
 8009af6:	6123      	str	r3, [r4, #16]
 8009af8:	9b07      	ldr	r3, [sp, #28]
 8009afa:	0021      	movs	r1, r4
 8009afc:	9300      	str	r3, [sp, #0]
 8009afe:	9805      	ldr	r0, [sp, #20]
 8009b00:	9b06      	ldr	r3, [sp, #24]
 8009b02:	aa09      	add	r2, sp, #36	; 0x24
 8009b04:	f7ff fef4 	bl	80098f0 <_printf_common>
 8009b08:	1c43      	adds	r3, r0, #1
 8009b0a:	d14c      	bne.n	8009ba6 <_printf_i+0x1d6>
 8009b0c:	2001      	movs	r0, #1
 8009b0e:	4240      	negs	r0, r0
 8009b10:	b00b      	add	sp, #44	; 0x2c
 8009b12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b14:	3145      	adds	r1, #69	; 0x45
 8009b16:	700a      	strb	r2, [r1, #0]
 8009b18:	4a34      	ldr	r2, [pc, #208]	; (8009bec <_printf_i+0x21c>)
 8009b1a:	9203      	str	r2, [sp, #12]
 8009b1c:	681a      	ldr	r2, [r3, #0]
 8009b1e:	6821      	ldr	r1, [r4, #0]
 8009b20:	ca20      	ldmia	r2!, {r5}
 8009b22:	601a      	str	r2, [r3, #0]
 8009b24:	0608      	lsls	r0, r1, #24
 8009b26:	d516      	bpl.n	8009b56 <_printf_i+0x186>
 8009b28:	07cb      	lsls	r3, r1, #31
 8009b2a:	d502      	bpl.n	8009b32 <_printf_i+0x162>
 8009b2c:	2320      	movs	r3, #32
 8009b2e:	4319      	orrs	r1, r3
 8009b30:	6021      	str	r1, [r4, #0]
 8009b32:	2710      	movs	r7, #16
 8009b34:	2d00      	cmp	r5, #0
 8009b36:	d1b2      	bne.n	8009a9e <_printf_i+0xce>
 8009b38:	2320      	movs	r3, #32
 8009b3a:	6822      	ldr	r2, [r4, #0]
 8009b3c:	439a      	bics	r2, r3
 8009b3e:	6022      	str	r2, [r4, #0]
 8009b40:	e7ad      	b.n	8009a9e <_printf_i+0xce>
 8009b42:	2220      	movs	r2, #32
 8009b44:	6809      	ldr	r1, [r1, #0]
 8009b46:	430a      	orrs	r2, r1
 8009b48:	6022      	str	r2, [r4, #0]
 8009b4a:	0022      	movs	r2, r4
 8009b4c:	2178      	movs	r1, #120	; 0x78
 8009b4e:	3245      	adds	r2, #69	; 0x45
 8009b50:	7011      	strb	r1, [r2, #0]
 8009b52:	4a27      	ldr	r2, [pc, #156]	; (8009bf0 <_printf_i+0x220>)
 8009b54:	e7e1      	b.n	8009b1a <_printf_i+0x14a>
 8009b56:	0648      	lsls	r0, r1, #25
 8009b58:	d5e6      	bpl.n	8009b28 <_printf_i+0x158>
 8009b5a:	b2ad      	uxth	r5, r5
 8009b5c:	e7e4      	b.n	8009b28 <_printf_i+0x158>
 8009b5e:	681a      	ldr	r2, [r3, #0]
 8009b60:	680d      	ldr	r5, [r1, #0]
 8009b62:	1d10      	adds	r0, r2, #4
 8009b64:	6949      	ldr	r1, [r1, #20]
 8009b66:	6018      	str	r0, [r3, #0]
 8009b68:	6813      	ldr	r3, [r2, #0]
 8009b6a:	062e      	lsls	r6, r5, #24
 8009b6c:	d501      	bpl.n	8009b72 <_printf_i+0x1a2>
 8009b6e:	6019      	str	r1, [r3, #0]
 8009b70:	e002      	b.n	8009b78 <_printf_i+0x1a8>
 8009b72:	066d      	lsls	r5, r5, #25
 8009b74:	d5fb      	bpl.n	8009b6e <_printf_i+0x19e>
 8009b76:	8019      	strh	r1, [r3, #0]
 8009b78:	2300      	movs	r3, #0
 8009b7a:	9e04      	ldr	r6, [sp, #16]
 8009b7c:	6123      	str	r3, [r4, #16]
 8009b7e:	e7bb      	b.n	8009af8 <_printf_i+0x128>
 8009b80:	681a      	ldr	r2, [r3, #0]
 8009b82:	1d11      	adds	r1, r2, #4
 8009b84:	6019      	str	r1, [r3, #0]
 8009b86:	6816      	ldr	r6, [r2, #0]
 8009b88:	2100      	movs	r1, #0
 8009b8a:	0030      	movs	r0, r6
 8009b8c:	6862      	ldr	r2, [r4, #4]
 8009b8e:	f000 fb6f 	bl	800a270 <memchr>
 8009b92:	2800      	cmp	r0, #0
 8009b94:	d001      	beq.n	8009b9a <_printf_i+0x1ca>
 8009b96:	1b80      	subs	r0, r0, r6
 8009b98:	6060      	str	r0, [r4, #4]
 8009b9a:	6863      	ldr	r3, [r4, #4]
 8009b9c:	6123      	str	r3, [r4, #16]
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	9a04      	ldr	r2, [sp, #16]
 8009ba2:	7013      	strb	r3, [r2, #0]
 8009ba4:	e7a8      	b.n	8009af8 <_printf_i+0x128>
 8009ba6:	6923      	ldr	r3, [r4, #16]
 8009ba8:	0032      	movs	r2, r6
 8009baa:	9906      	ldr	r1, [sp, #24]
 8009bac:	9805      	ldr	r0, [sp, #20]
 8009bae:	9d07      	ldr	r5, [sp, #28]
 8009bb0:	47a8      	blx	r5
 8009bb2:	1c43      	adds	r3, r0, #1
 8009bb4:	d0aa      	beq.n	8009b0c <_printf_i+0x13c>
 8009bb6:	6823      	ldr	r3, [r4, #0]
 8009bb8:	079b      	lsls	r3, r3, #30
 8009bba:	d415      	bmi.n	8009be8 <_printf_i+0x218>
 8009bbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bbe:	68e0      	ldr	r0, [r4, #12]
 8009bc0:	4298      	cmp	r0, r3
 8009bc2:	daa5      	bge.n	8009b10 <_printf_i+0x140>
 8009bc4:	0018      	movs	r0, r3
 8009bc6:	e7a3      	b.n	8009b10 <_printf_i+0x140>
 8009bc8:	0022      	movs	r2, r4
 8009bca:	2301      	movs	r3, #1
 8009bcc:	9906      	ldr	r1, [sp, #24]
 8009bce:	9805      	ldr	r0, [sp, #20]
 8009bd0:	9e07      	ldr	r6, [sp, #28]
 8009bd2:	3219      	adds	r2, #25
 8009bd4:	47b0      	blx	r6
 8009bd6:	1c43      	adds	r3, r0, #1
 8009bd8:	d098      	beq.n	8009b0c <_printf_i+0x13c>
 8009bda:	3501      	adds	r5, #1
 8009bdc:	68e3      	ldr	r3, [r4, #12]
 8009bde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009be0:	1a9b      	subs	r3, r3, r2
 8009be2:	42ab      	cmp	r3, r5
 8009be4:	dcf0      	bgt.n	8009bc8 <_printf_i+0x1f8>
 8009be6:	e7e9      	b.n	8009bbc <_printf_i+0x1ec>
 8009be8:	2500      	movs	r5, #0
 8009bea:	e7f7      	b.n	8009bdc <_printf_i+0x20c>
 8009bec:	0800abad 	.word	0x0800abad
 8009bf0:	0800abbe 	.word	0x0800abbe

08009bf4 <nan>:
 8009bf4:	2000      	movs	r0, #0
 8009bf6:	4901      	ldr	r1, [pc, #4]	; (8009bfc <nan+0x8>)
 8009bf8:	4770      	bx	lr
 8009bfa:	46c0      	nop			; (mov r8, r8)
 8009bfc:	7ff80000 	.word	0x7ff80000

08009c00 <_sbrk_r>:
 8009c00:	2300      	movs	r3, #0
 8009c02:	b570      	push	{r4, r5, r6, lr}
 8009c04:	4d06      	ldr	r5, [pc, #24]	; (8009c20 <_sbrk_r+0x20>)
 8009c06:	0004      	movs	r4, r0
 8009c08:	0008      	movs	r0, r1
 8009c0a:	602b      	str	r3, [r5, #0]
 8009c0c:	f7f9 fb4a 	bl	80032a4 <_sbrk>
 8009c10:	1c43      	adds	r3, r0, #1
 8009c12:	d103      	bne.n	8009c1c <_sbrk_r+0x1c>
 8009c14:	682b      	ldr	r3, [r5, #0]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d000      	beq.n	8009c1c <_sbrk_r+0x1c>
 8009c1a:	6023      	str	r3, [r4, #0]
 8009c1c:	bd70      	pop	{r4, r5, r6, pc}
 8009c1e:	46c0      	nop			; (mov r8, r8)
 8009c20:	200005b8 	.word	0x200005b8

08009c24 <nanf>:
 8009c24:	4800      	ldr	r0, [pc, #0]	; (8009c28 <nanf+0x4>)
 8009c26:	4770      	bx	lr
 8009c28:	7fc00000 	.word	0x7fc00000

08009c2c <__swbuf_r>:
 8009c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c2e:	0005      	movs	r5, r0
 8009c30:	000e      	movs	r6, r1
 8009c32:	0014      	movs	r4, r2
 8009c34:	2800      	cmp	r0, #0
 8009c36:	d004      	beq.n	8009c42 <__swbuf_r+0x16>
 8009c38:	6983      	ldr	r3, [r0, #24]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d101      	bne.n	8009c42 <__swbuf_r+0x16>
 8009c3e:	f000 fa07 	bl	800a050 <__sinit>
 8009c42:	4b22      	ldr	r3, [pc, #136]	; (8009ccc <__swbuf_r+0xa0>)
 8009c44:	429c      	cmp	r4, r3
 8009c46:	d12e      	bne.n	8009ca6 <__swbuf_r+0x7a>
 8009c48:	686c      	ldr	r4, [r5, #4]
 8009c4a:	69a3      	ldr	r3, [r4, #24]
 8009c4c:	60a3      	str	r3, [r4, #8]
 8009c4e:	89a3      	ldrh	r3, [r4, #12]
 8009c50:	071b      	lsls	r3, r3, #28
 8009c52:	d532      	bpl.n	8009cba <__swbuf_r+0x8e>
 8009c54:	6923      	ldr	r3, [r4, #16]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d02f      	beq.n	8009cba <__swbuf_r+0x8e>
 8009c5a:	6823      	ldr	r3, [r4, #0]
 8009c5c:	6922      	ldr	r2, [r4, #16]
 8009c5e:	b2f7      	uxtb	r7, r6
 8009c60:	1a98      	subs	r0, r3, r2
 8009c62:	6963      	ldr	r3, [r4, #20]
 8009c64:	b2f6      	uxtb	r6, r6
 8009c66:	4283      	cmp	r3, r0
 8009c68:	dc05      	bgt.n	8009c76 <__swbuf_r+0x4a>
 8009c6a:	0021      	movs	r1, r4
 8009c6c:	0028      	movs	r0, r5
 8009c6e:	f000 f94d 	bl	8009f0c <_fflush_r>
 8009c72:	2800      	cmp	r0, #0
 8009c74:	d127      	bne.n	8009cc6 <__swbuf_r+0x9a>
 8009c76:	68a3      	ldr	r3, [r4, #8]
 8009c78:	3001      	adds	r0, #1
 8009c7a:	3b01      	subs	r3, #1
 8009c7c:	60a3      	str	r3, [r4, #8]
 8009c7e:	6823      	ldr	r3, [r4, #0]
 8009c80:	1c5a      	adds	r2, r3, #1
 8009c82:	6022      	str	r2, [r4, #0]
 8009c84:	701f      	strb	r7, [r3, #0]
 8009c86:	6963      	ldr	r3, [r4, #20]
 8009c88:	4283      	cmp	r3, r0
 8009c8a:	d004      	beq.n	8009c96 <__swbuf_r+0x6a>
 8009c8c:	89a3      	ldrh	r3, [r4, #12]
 8009c8e:	07db      	lsls	r3, r3, #31
 8009c90:	d507      	bpl.n	8009ca2 <__swbuf_r+0x76>
 8009c92:	2e0a      	cmp	r6, #10
 8009c94:	d105      	bne.n	8009ca2 <__swbuf_r+0x76>
 8009c96:	0021      	movs	r1, r4
 8009c98:	0028      	movs	r0, r5
 8009c9a:	f000 f937 	bl	8009f0c <_fflush_r>
 8009c9e:	2800      	cmp	r0, #0
 8009ca0:	d111      	bne.n	8009cc6 <__swbuf_r+0x9a>
 8009ca2:	0030      	movs	r0, r6
 8009ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ca6:	4b0a      	ldr	r3, [pc, #40]	; (8009cd0 <__swbuf_r+0xa4>)
 8009ca8:	429c      	cmp	r4, r3
 8009caa:	d101      	bne.n	8009cb0 <__swbuf_r+0x84>
 8009cac:	68ac      	ldr	r4, [r5, #8]
 8009cae:	e7cc      	b.n	8009c4a <__swbuf_r+0x1e>
 8009cb0:	4b08      	ldr	r3, [pc, #32]	; (8009cd4 <__swbuf_r+0xa8>)
 8009cb2:	429c      	cmp	r4, r3
 8009cb4:	d1c9      	bne.n	8009c4a <__swbuf_r+0x1e>
 8009cb6:	68ec      	ldr	r4, [r5, #12]
 8009cb8:	e7c7      	b.n	8009c4a <__swbuf_r+0x1e>
 8009cba:	0021      	movs	r1, r4
 8009cbc:	0028      	movs	r0, r5
 8009cbe:	f000 f819 	bl	8009cf4 <__swsetup_r>
 8009cc2:	2800      	cmp	r0, #0
 8009cc4:	d0c9      	beq.n	8009c5a <__swbuf_r+0x2e>
 8009cc6:	2601      	movs	r6, #1
 8009cc8:	4276      	negs	r6, r6
 8009cca:	e7ea      	b.n	8009ca2 <__swbuf_r+0x76>
 8009ccc:	0800abf0 	.word	0x0800abf0
 8009cd0:	0800ac10 	.word	0x0800ac10
 8009cd4:	0800abd0 	.word	0x0800abd0

08009cd8 <__ascii_wctomb>:
 8009cd8:	0003      	movs	r3, r0
 8009cda:	1e08      	subs	r0, r1, #0
 8009cdc:	d005      	beq.n	8009cea <__ascii_wctomb+0x12>
 8009cde:	2aff      	cmp	r2, #255	; 0xff
 8009ce0:	d904      	bls.n	8009cec <__ascii_wctomb+0x14>
 8009ce2:	228a      	movs	r2, #138	; 0x8a
 8009ce4:	2001      	movs	r0, #1
 8009ce6:	601a      	str	r2, [r3, #0]
 8009ce8:	4240      	negs	r0, r0
 8009cea:	4770      	bx	lr
 8009cec:	2001      	movs	r0, #1
 8009cee:	700a      	strb	r2, [r1, #0]
 8009cf0:	e7fb      	b.n	8009cea <__ascii_wctomb+0x12>
	...

08009cf4 <__swsetup_r>:
 8009cf4:	4b37      	ldr	r3, [pc, #220]	; (8009dd4 <__swsetup_r+0xe0>)
 8009cf6:	b570      	push	{r4, r5, r6, lr}
 8009cf8:	681d      	ldr	r5, [r3, #0]
 8009cfa:	0006      	movs	r6, r0
 8009cfc:	000c      	movs	r4, r1
 8009cfe:	2d00      	cmp	r5, #0
 8009d00:	d005      	beq.n	8009d0e <__swsetup_r+0x1a>
 8009d02:	69ab      	ldr	r3, [r5, #24]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d102      	bne.n	8009d0e <__swsetup_r+0x1a>
 8009d08:	0028      	movs	r0, r5
 8009d0a:	f000 f9a1 	bl	800a050 <__sinit>
 8009d0e:	4b32      	ldr	r3, [pc, #200]	; (8009dd8 <__swsetup_r+0xe4>)
 8009d10:	429c      	cmp	r4, r3
 8009d12:	d10f      	bne.n	8009d34 <__swsetup_r+0x40>
 8009d14:	686c      	ldr	r4, [r5, #4]
 8009d16:	230c      	movs	r3, #12
 8009d18:	5ee2      	ldrsh	r2, [r4, r3]
 8009d1a:	b293      	uxth	r3, r2
 8009d1c:	0711      	lsls	r1, r2, #28
 8009d1e:	d42d      	bmi.n	8009d7c <__swsetup_r+0x88>
 8009d20:	06d9      	lsls	r1, r3, #27
 8009d22:	d411      	bmi.n	8009d48 <__swsetup_r+0x54>
 8009d24:	2309      	movs	r3, #9
 8009d26:	2001      	movs	r0, #1
 8009d28:	6033      	str	r3, [r6, #0]
 8009d2a:	3337      	adds	r3, #55	; 0x37
 8009d2c:	4313      	orrs	r3, r2
 8009d2e:	81a3      	strh	r3, [r4, #12]
 8009d30:	4240      	negs	r0, r0
 8009d32:	bd70      	pop	{r4, r5, r6, pc}
 8009d34:	4b29      	ldr	r3, [pc, #164]	; (8009ddc <__swsetup_r+0xe8>)
 8009d36:	429c      	cmp	r4, r3
 8009d38:	d101      	bne.n	8009d3e <__swsetup_r+0x4a>
 8009d3a:	68ac      	ldr	r4, [r5, #8]
 8009d3c:	e7eb      	b.n	8009d16 <__swsetup_r+0x22>
 8009d3e:	4b28      	ldr	r3, [pc, #160]	; (8009de0 <__swsetup_r+0xec>)
 8009d40:	429c      	cmp	r4, r3
 8009d42:	d1e8      	bne.n	8009d16 <__swsetup_r+0x22>
 8009d44:	68ec      	ldr	r4, [r5, #12]
 8009d46:	e7e6      	b.n	8009d16 <__swsetup_r+0x22>
 8009d48:	075b      	lsls	r3, r3, #29
 8009d4a:	d513      	bpl.n	8009d74 <__swsetup_r+0x80>
 8009d4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d4e:	2900      	cmp	r1, #0
 8009d50:	d008      	beq.n	8009d64 <__swsetup_r+0x70>
 8009d52:	0023      	movs	r3, r4
 8009d54:	3344      	adds	r3, #68	; 0x44
 8009d56:	4299      	cmp	r1, r3
 8009d58:	d002      	beq.n	8009d60 <__swsetup_r+0x6c>
 8009d5a:	0030      	movs	r0, r6
 8009d5c:	f7ff fa22 	bl	80091a4 <_free_r>
 8009d60:	2300      	movs	r3, #0
 8009d62:	6363      	str	r3, [r4, #52]	; 0x34
 8009d64:	2224      	movs	r2, #36	; 0x24
 8009d66:	89a3      	ldrh	r3, [r4, #12]
 8009d68:	4393      	bics	r3, r2
 8009d6a:	81a3      	strh	r3, [r4, #12]
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	6063      	str	r3, [r4, #4]
 8009d70:	6923      	ldr	r3, [r4, #16]
 8009d72:	6023      	str	r3, [r4, #0]
 8009d74:	2308      	movs	r3, #8
 8009d76:	89a2      	ldrh	r2, [r4, #12]
 8009d78:	4313      	orrs	r3, r2
 8009d7a:	81a3      	strh	r3, [r4, #12]
 8009d7c:	6923      	ldr	r3, [r4, #16]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d10b      	bne.n	8009d9a <__swsetup_r+0xa6>
 8009d82:	21a0      	movs	r1, #160	; 0xa0
 8009d84:	2280      	movs	r2, #128	; 0x80
 8009d86:	89a3      	ldrh	r3, [r4, #12]
 8009d88:	0089      	lsls	r1, r1, #2
 8009d8a:	0092      	lsls	r2, r2, #2
 8009d8c:	400b      	ands	r3, r1
 8009d8e:	4293      	cmp	r3, r2
 8009d90:	d003      	beq.n	8009d9a <__swsetup_r+0xa6>
 8009d92:	0021      	movs	r1, r4
 8009d94:	0030      	movs	r0, r6
 8009d96:	f000 fa27 	bl	800a1e8 <__smakebuf_r>
 8009d9a:	220c      	movs	r2, #12
 8009d9c:	5ea3      	ldrsh	r3, [r4, r2]
 8009d9e:	2001      	movs	r0, #1
 8009da0:	001a      	movs	r2, r3
 8009da2:	b299      	uxth	r1, r3
 8009da4:	4002      	ands	r2, r0
 8009da6:	4203      	tst	r3, r0
 8009da8:	d00f      	beq.n	8009dca <__swsetup_r+0xd6>
 8009daa:	2200      	movs	r2, #0
 8009dac:	60a2      	str	r2, [r4, #8]
 8009dae:	6962      	ldr	r2, [r4, #20]
 8009db0:	4252      	negs	r2, r2
 8009db2:	61a2      	str	r2, [r4, #24]
 8009db4:	2000      	movs	r0, #0
 8009db6:	6922      	ldr	r2, [r4, #16]
 8009db8:	4282      	cmp	r2, r0
 8009dba:	d1ba      	bne.n	8009d32 <__swsetup_r+0x3e>
 8009dbc:	060a      	lsls	r2, r1, #24
 8009dbe:	d5b8      	bpl.n	8009d32 <__swsetup_r+0x3e>
 8009dc0:	2240      	movs	r2, #64	; 0x40
 8009dc2:	4313      	orrs	r3, r2
 8009dc4:	81a3      	strh	r3, [r4, #12]
 8009dc6:	3801      	subs	r0, #1
 8009dc8:	e7b3      	b.n	8009d32 <__swsetup_r+0x3e>
 8009dca:	0788      	lsls	r0, r1, #30
 8009dcc:	d400      	bmi.n	8009dd0 <__swsetup_r+0xdc>
 8009dce:	6962      	ldr	r2, [r4, #20]
 8009dd0:	60a2      	str	r2, [r4, #8]
 8009dd2:	e7ef      	b.n	8009db4 <__swsetup_r+0xc0>
 8009dd4:	2000007c 	.word	0x2000007c
 8009dd8:	0800abf0 	.word	0x0800abf0
 8009ddc:	0800ac10 	.word	0x0800ac10
 8009de0:	0800abd0 	.word	0x0800abd0

08009de4 <abort>:
 8009de4:	2006      	movs	r0, #6
 8009de6:	b510      	push	{r4, lr}
 8009de8:	f000 faca 	bl	800a380 <raise>
 8009dec:	2001      	movs	r0, #1
 8009dee:	f7f9 f9e7 	bl	80031c0 <_exit>
	...

08009df4 <__sflush_r>:
 8009df4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009df6:	898b      	ldrh	r3, [r1, #12]
 8009df8:	0005      	movs	r5, r0
 8009dfa:	000c      	movs	r4, r1
 8009dfc:	071a      	lsls	r2, r3, #28
 8009dfe:	d45f      	bmi.n	8009ec0 <__sflush_r+0xcc>
 8009e00:	684a      	ldr	r2, [r1, #4]
 8009e02:	2a00      	cmp	r2, #0
 8009e04:	dc04      	bgt.n	8009e10 <__sflush_r+0x1c>
 8009e06:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8009e08:	2a00      	cmp	r2, #0
 8009e0a:	dc01      	bgt.n	8009e10 <__sflush_r+0x1c>
 8009e0c:	2000      	movs	r0, #0
 8009e0e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009e10:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8009e12:	2f00      	cmp	r7, #0
 8009e14:	d0fa      	beq.n	8009e0c <__sflush_r+0x18>
 8009e16:	2200      	movs	r2, #0
 8009e18:	2180      	movs	r1, #128	; 0x80
 8009e1a:	682e      	ldr	r6, [r5, #0]
 8009e1c:	602a      	str	r2, [r5, #0]
 8009e1e:	001a      	movs	r2, r3
 8009e20:	0149      	lsls	r1, r1, #5
 8009e22:	400a      	ands	r2, r1
 8009e24:	420b      	tst	r3, r1
 8009e26:	d034      	beq.n	8009e92 <__sflush_r+0x9e>
 8009e28:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009e2a:	89a3      	ldrh	r3, [r4, #12]
 8009e2c:	075b      	lsls	r3, r3, #29
 8009e2e:	d506      	bpl.n	8009e3e <__sflush_r+0x4a>
 8009e30:	6863      	ldr	r3, [r4, #4]
 8009e32:	1ac0      	subs	r0, r0, r3
 8009e34:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d001      	beq.n	8009e3e <__sflush_r+0x4a>
 8009e3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009e3c:	1ac0      	subs	r0, r0, r3
 8009e3e:	0002      	movs	r2, r0
 8009e40:	6a21      	ldr	r1, [r4, #32]
 8009e42:	2300      	movs	r3, #0
 8009e44:	0028      	movs	r0, r5
 8009e46:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8009e48:	47b8      	blx	r7
 8009e4a:	89a1      	ldrh	r1, [r4, #12]
 8009e4c:	1c43      	adds	r3, r0, #1
 8009e4e:	d106      	bne.n	8009e5e <__sflush_r+0x6a>
 8009e50:	682b      	ldr	r3, [r5, #0]
 8009e52:	2b1d      	cmp	r3, #29
 8009e54:	d831      	bhi.n	8009eba <__sflush_r+0xc6>
 8009e56:	4a2c      	ldr	r2, [pc, #176]	; (8009f08 <__sflush_r+0x114>)
 8009e58:	40da      	lsrs	r2, r3
 8009e5a:	07d3      	lsls	r3, r2, #31
 8009e5c:	d52d      	bpl.n	8009eba <__sflush_r+0xc6>
 8009e5e:	2300      	movs	r3, #0
 8009e60:	6063      	str	r3, [r4, #4]
 8009e62:	6923      	ldr	r3, [r4, #16]
 8009e64:	6023      	str	r3, [r4, #0]
 8009e66:	04cb      	lsls	r3, r1, #19
 8009e68:	d505      	bpl.n	8009e76 <__sflush_r+0x82>
 8009e6a:	1c43      	adds	r3, r0, #1
 8009e6c:	d102      	bne.n	8009e74 <__sflush_r+0x80>
 8009e6e:	682b      	ldr	r3, [r5, #0]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d100      	bne.n	8009e76 <__sflush_r+0x82>
 8009e74:	6560      	str	r0, [r4, #84]	; 0x54
 8009e76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e78:	602e      	str	r6, [r5, #0]
 8009e7a:	2900      	cmp	r1, #0
 8009e7c:	d0c6      	beq.n	8009e0c <__sflush_r+0x18>
 8009e7e:	0023      	movs	r3, r4
 8009e80:	3344      	adds	r3, #68	; 0x44
 8009e82:	4299      	cmp	r1, r3
 8009e84:	d002      	beq.n	8009e8c <__sflush_r+0x98>
 8009e86:	0028      	movs	r0, r5
 8009e88:	f7ff f98c 	bl	80091a4 <_free_r>
 8009e8c:	2000      	movs	r0, #0
 8009e8e:	6360      	str	r0, [r4, #52]	; 0x34
 8009e90:	e7bd      	b.n	8009e0e <__sflush_r+0x1a>
 8009e92:	2301      	movs	r3, #1
 8009e94:	0028      	movs	r0, r5
 8009e96:	6a21      	ldr	r1, [r4, #32]
 8009e98:	47b8      	blx	r7
 8009e9a:	1c43      	adds	r3, r0, #1
 8009e9c:	d1c5      	bne.n	8009e2a <__sflush_r+0x36>
 8009e9e:	682b      	ldr	r3, [r5, #0]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d0c2      	beq.n	8009e2a <__sflush_r+0x36>
 8009ea4:	2b1d      	cmp	r3, #29
 8009ea6:	d001      	beq.n	8009eac <__sflush_r+0xb8>
 8009ea8:	2b16      	cmp	r3, #22
 8009eaa:	d101      	bne.n	8009eb0 <__sflush_r+0xbc>
 8009eac:	602e      	str	r6, [r5, #0]
 8009eae:	e7ad      	b.n	8009e0c <__sflush_r+0x18>
 8009eb0:	2340      	movs	r3, #64	; 0x40
 8009eb2:	89a2      	ldrh	r2, [r4, #12]
 8009eb4:	4313      	orrs	r3, r2
 8009eb6:	81a3      	strh	r3, [r4, #12]
 8009eb8:	e7a9      	b.n	8009e0e <__sflush_r+0x1a>
 8009eba:	2340      	movs	r3, #64	; 0x40
 8009ebc:	430b      	orrs	r3, r1
 8009ebe:	e7fa      	b.n	8009eb6 <__sflush_r+0xc2>
 8009ec0:	690f      	ldr	r7, [r1, #16]
 8009ec2:	2f00      	cmp	r7, #0
 8009ec4:	d0a2      	beq.n	8009e0c <__sflush_r+0x18>
 8009ec6:	680a      	ldr	r2, [r1, #0]
 8009ec8:	600f      	str	r7, [r1, #0]
 8009eca:	1bd2      	subs	r2, r2, r7
 8009ecc:	9201      	str	r2, [sp, #4]
 8009ece:	2200      	movs	r2, #0
 8009ed0:	079b      	lsls	r3, r3, #30
 8009ed2:	d100      	bne.n	8009ed6 <__sflush_r+0xe2>
 8009ed4:	694a      	ldr	r2, [r1, #20]
 8009ed6:	60a2      	str	r2, [r4, #8]
 8009ed8:	9b01      	ldr	r3, [sp, #4]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	dc00      	bgt.n	8009ee0 <__sflush_r+0xec>
 8009ede:	e795      	b.n	8009e0c <__sflush_r+0x18>
 8009ee0:	003a      	movs	r2, r7
 8009ee2:	0028      	movs	r0, r5
 8009ee4:	9b01      	ldr	r3, [sp, #4]
 8009ee6:	6a21      	ldr	r1, [r4, #32]
 8009ee8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009eea:	47b0      	blx	r6
 8009eec:	2800      	cmp	r0, #0
 8009eee:	dc06      	bgt.n	8009efe <__sflush_r+0x10a>
 8009ef0:	2340      	movs	r3, #64	; 0x40
 8009ef2:	2001      	movs	r0, #1
 8009ef4:	89a2      	ldrh	r2, [r4, #12]
 8009ef6:	4240      	negs	r0, r0
 8009ef8:	4313      	orrs	r3, r2
 8009efa:	81a3      	strh	r3, [r4, #12]
 8009efc:	e787      	b.n	8009e0e <__sflush_r+0x1a>
 8009efe:	9b01      	ldr	r3, [sp, #4]
 8009f00:	183f      	adds	r7, r7, r0
 8009f02:	1a1b      	subs	r3, r3, r0
 8009f04:	9301      	str	r3, [sp, #4]
 8009f06:	e7e7      	b.n	8009ed8 <__sflush_r+0xe4>
 8009f08:	20400001 	.word	0x20400001

08009f0c <_fflush_r>:
 8009f0c:	690b      	ldr	r3, [r1, #16]
 8009f0e:	b570      	push	{r4, r5, r6, lr}
 8009f10:	0005      	movs	r5, r0
 8009f12:	000c      	movs	r4, r1
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d102      	bne.n	8009f1e <_fflush_r+0x12>
 8009f18:	2500      	movs	r5, #0
 8009f1a:	0028      	movs	r0, r5
 8009f1c:	bd70      	pop	{r4, r5, r6, pc}
 8009f1e:	2800      	cmp	r0, #0
 8009f20:	d004      	beq.n	8009f2c <_fflush_r+0x20>
 8009f22:	6983      	ldr	r3, [r0, #24]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d101      	bne.n	8009f2c <_fflush_r+0x20>
 8009f28:	f000 f892 	bl	800a050 <__sinit>
 8009f2c:	4b14      	ldr	r3, [pc, #80]	; (8009f80 <_fflush_r+0x74>)
 8009f2e:	429c      	cmp	r4, r3
 8009f30:	d11b      	bne.n	8009f6a <_fflush_r+0x5e>
 8009f32:	686c      	ldr	r4, [r5, #4]
 8009f34:	220c      	movs	r2, #12
 8009f36:	5ea3      	ldrsh	r3, [r4, r2]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d0ed      	beq.n	8009f18 <_fflush_r+0xc>
 8009f3c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009f3e:	07d2      	lsls	r2, r2, #31
 8009f40:	d404      	bmi.n	8009f4c <_fflush_r+0x40>
 8009f42:	059b      	lsls	r3, r3, #22
 8009f44:	d402      	bmi.n	8009f4c <_fflush_r+0x40>
 8009f46:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f48:	f000 f923 	bl	800a192 <__retarget_lock_acquire_recursive>
 8009f4c:	0028      	movs	r0, r5
 8009f4e:	0021      	movs	r1, r4
 8009f50:	f7ff ff50 	bl	8009df4 <__sflush_r>
 8009f54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f56:	0005      	movs	r5, r0
 8009f58:	07db      	lsls	r3, r3, #31
 8009f5a:	d4de      	bmi.n	8009f1a <_fflush_r+0xe>
 8009f5c:	89a3      	ldrh	r3, [r4, #12]
 8009f5e:	059b      	lsls	r3, r3, #22
 8009f60:	d4db      	bmi.n	8009f1a <_fflush_r+0xe>
 8009f62:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f64:	f000 f916 	bl	800a194 <__retarget_lock_release_recursive>
 8009f68:	e7d7      	b.n	8009f1a <_fflush_r+0xe>
 8009f6a:	4b06      	ldr	r3, [pc, #24]	; (8009f84 <_fflush_r+0x78>)
 8009f6c:	429c      	cmp	r4, r3
 8009f6e:	d101      	bne.n	8009f74 <_fflush_r+0x68>
 8009f70:	68ac      	ldr	r4, [r5, #8]
 8009f72:	e7df      	b.n	8009f34 <_fflush_r+0x28>
 8009f74:	4b04      	ldr	r3, [pc, #16]	; (8009f88 <_fflush_r+0x7c>)
 8009f76:	429c      	cmp	r4, r3
 8009f78:	d1dc      	bne.n	8009f34 <_fflush_r+0x28>
 8009f7a:	68ec      	ldr	r4, [r5, #12]
 8009f7c:	e7da      	b.n	8009f34 <_fflush_r+0x28>
 8009f7e:	46c0      	nop			; (mov r8, r8)
 8009f80:	0800abf0 	.word	0x0800abf0
 8009f84:	0800ac10 	.word	0x0800ac10
 8009f88:	0800abd0 	.word	0x0800abd0

08009f8c <std>:
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	b510      	push	{r4, lr}
 8009f90:	0004      	movs	r4, r0
 8009f92:	6003      	str	r3, [r0, #0]
 8009f94:	6043      	str	r3, [r0, #4]
 8009f96:	6083      	str	r3, [r0, #8]
 8009f98:	8181      	strh	r1, [r0, #12]
 8009f9a:	6643      	str	r3, [r0, #100]	; 0x64
 8009f9c:	0019      	movs	r1, r3
 8009f9e:	81c2      	strh	r2, [r0, #14]
 8009fa0:	6103      	str	r3, [r0, #16]
 8009fa2:	6143      	str	r3, [r0, #20]
 8009fa4:	6183      	str	r3, [r0, #24]
 8009fa6:	2208      	movs	r2, #8
 8009fa8:	305c      	adds	r0, #92	; 0x5c
 8009faa:	f7fd f876 	bl	800709a <memset>
 8009fae:	4b05      	ldr	r3, [pc, #20]	; (8009fc4 <std+0x38>)
 8009fb0:	6224      	str	r4, [r4, #32]
 8009fb2:	6263      	str	r3, [r4, #36]	; 0x24
 8009fb4:	4b04      	ldr	r3, [pc, #16]	; (8009fc8 <std+0x3c>)
 8009fb6:	62a3      	str	r3, [r4, #40]	; 0x28
 8009fb8:	4b04      	ldr	r3, [pc, #16]	; (8009fcc <std+0x40>)
 8009fba:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009fbc:	4b04      	ldr	r3, [pc, #16]	; (8009fd0 <std+0x44>)
 8009fbe:	6323      	str	r3, [r4, #48]	; 0x30
 8009fc0:	bd10      	pop	{r4, pc}
 8009fc2:	46c0      	nop			; (mov r8, r8)
 8009fc4:	0800a3c1 	.word	0x0800a3c1
 8009fc8:	0800a3e9 	.word	0x0800a3e9
 8009fcc:	0800a421 	.word	0x0800a421
 8009fd0:	0800a44d 	.word	0x0800a44d

08009fd4 <_cleanup_r>:
 8009fd4:	b510      	push	{r4, lr}
 8009fd6:	4902      	ldr	r1, [pc, #8]	; (8009fe0 <_cleanup_r+0xc>)
 8009fd8:	f000 f8ba 	bl	800a150 <_fwalk_reent>
 8009fdc:	bd10      	pop	{r4, pc}
 8009fde:	46c0      	nop			; (mov r8, r8)
 8009fe0:	08009f0d 	.word	0x08009f0d

08009fe4 <__sfmoreglue>:
 8009fe4:	b570      	push	{r4, r5, r6, lr}
 8009fe6:	2568      	movs	r5, #104	; 0x68
 8009fe8:	1e4a      	subs	r2, r1, #1
 8009fea:	4355      	muls	r5, r2
 8009fec:	000e      	movs	r6, r1
 8009fee:	0029      	movs	r1, r5
 8009ff0:	3174      	adds	r1, #116	; 0x74
 8009ff2:	f7ff f943 	bl	800927c <_malloc_r>
 8009ff6:	1e04      	subs	r4, r0, #0
 8009ff8:	d008      	beq.n	800a00c <__sfmoreglue+0x28>
 8009ffa:	2100      	movs	r1, #0
 8009ffc:	002a      	movs	r2, r5
 8009ffe:	6001      	str	r1, [r0, #0]
 800a000:	6046      	str	r6, [r0, #4]
 800a002:	300c      	adds	r0, #12
 800a004:	60a0      	str	r0, [r4, #8]
 800a006:	3268      	adds	r2, #104	; 0x68
 800a008:	f7fd f847 	bl	800709a <memset>
 800a00c:	0020      	movs	r0, r4
 800a00e:	bd70      	pop	{r4, r5, r6, pc}

0800a010 <__sfp_lock_acquire>:
 800a010:	b510      	push	{r4, lr}
 800a012:	4802      	ldr	r0, [pc, #8]	; (800a01c <__sfp_lock_acquire+0xc>)
 800a014:	f000 f8bd 	bl	800a192 <__retarget_lock_acquire_recursive>
 800a018:	bd10      	pop	{r4, pc}
 800a01a:	46c0      	nop			; (mov r8, r8)
 800a01c:	200005b5 	.word	0x200005b5

0800a020 <__sfp_lock_release>:
 800a020:	b510      	push	{r4, lr}
 800a022:	4802      	ldr	r0, [pc, #8]	; (800a02c <__sfp_lock_release+0xc>)
 800a024:	f000 f8b6 	bl	800a194 <__retarget_lock_release_recursive>
 800a028:	bd10      	pop	{r4, pc}
 800a02a:	46c0      	nop			; (mov r8, r8)
 800a02c:	200005b5 	.word	0x200005b5

0800a030 <__sinit_lock_acquire>:
 800a030:	b510      	push	{r4, lr}
 800a032:	4802      	ldr	r0, [pc, #8]	; (800a03c <__sinit_lock_acquire+0xc>)
 800a034:	f000 f8ad 	bl	800a192 <__retarget_lock_acquire_recursive>
 800a038:	bd10      	pop	{r4, pc}
 800a03a:	46c0      	nop			; (mov r8, r8)
 800a03c:	200005b6 	.word	0x200005b6

0800a040 <__sinit_lock_release>:
 800a040:	b510      	push	{r4, lr}
 800a042:	4802      	ldr	r0, [pc, #8]	; (800a04c <__sinit_lock_release+0xc>)
 800a044:	f000 f8a6 	bl	800a194 <__retarget_lock_release_recursive>
 800a048:	bd10      	pop	{r4, pc}
 800a04a:	46c0      	nop			; (mov r8, r8)
 800a04c:	200005b6 	.word	0x200005b6

0800a050 <__sinit>:
 800a050:	b513      	push	{r0, r1, r4, lr}
 800a052:	0004      	movs	r4, r0
 800a054:	f7ff ffec 	bl	800a030 <__sinit_lock_acquire>
 800a058:	69a3      	ldr	r3, [r4, #24]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d002      	beq.n	800a064 <__sinit+0x14>
 800a05e:	f7ff ffef 	bl	800a040 <__sinit_lock_release>
 800a062:	bd13      	pop	{r0, r1, r4, pc}
 800a064:	64a3      	str	r3, [r4, #72]	; 0x48
 800a066:	64e3      	str	r3, [r4, #76]	; 0x4c
 800a068:	6523      	str	r3, [r4, #80]	; 0x50
 800a06a:	4b13      	ldr	r3, [pc, #76]	; (800a0b8 <__sinit+0x68>)
 800a06c:	4a13      	ldr	r2, [pc, #76]	; (800a0bc <__sinit+0x6c>)
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	62a2      	str	r2, [r4, #40]	; 0x28
 800a072:	9301      	str	r3, [sp, #4]
 800a074:	42a3      	cmp	r3, r4
 800a076:	d101      	bne.n	800a07c <__sinit+0x2c>
 800a078:	2301      	movs	r3, #1
 800a07a:	61a3      	str	r3, [r4, #24]
 800a07c:	0020      	movs	r0, r4
 800a07e:	f000 f81f 	bl	800a0c0 <__sfp>
 800a082:	6060      	str	r0, [r4, #4]
 800a084:	0020      	movs	r0, r4
 800a086:	f000 f81b 	bl	800a0c0 <__sfp>
 800a08a:	60a0      	str	r0, [r4, #8]
 800a08c:	0020      	movs	r0, r4
 800a08e:	f000 f817 	bl	800a0c0 <__sfp>
 800a092:	2200      	movs	r2, #0
 800a094:	2104      	movs	r1, #4
 800a096:	60e0      	str	r0, [r4, #12]
 800a098:	6860      	ldr	r0, [r4, #4]
 800a09a:	f7ff ff77 	bl	8009f8c <std>
 800a09e:	2201      	movs	r2, #1
 800a0a0:	2109      	movs	r1, #9
 800a0a2:	68a0      	ldr	r0, [r4, #8]
 800a0a4:	f7ff ff72 	bl	8009f8c <std>
 800a0a8:	2202      	movs	r2, #2
 800a0aa:	2112      	movs	r1, #18
 800a0ac:	68e0      	ldr	r0, [r4, #12]
 800a0ae:	f7ff ff6d 	bl	8009f8c <std>
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	61a3      	str	r3, [r4, #24]
 800a0b6:	e7d2      	b.n	800a05e <__sinit+0xe>
 800a0b8:	0800a7a8 	.word	0x0800a7a8
 800a0bc:	08009fd5 	.word	0x08009fd5

0800a0c0 <__sfp>:
 800a0c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0c2:	0007      	movs	r7, r0
 800a0c4:	f7ff ffa4 	bl	800a010 <__sfp_lock_acquire>
 800a0c8:	4b1f      	ldr	r3, [pc, #124]	; (800a148 <__sfp+0x88>)
 800a0ca:	681e      	ldr	r6, [r3, #0]
 800a0cc:	69b3      	ldr	r3, [r6, #24]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d102      	bne.n	800a0d8 <__sfp+0x18>
 800a0d2:	0030      	movs	r0, r6
 800a0d4:	f7ff ffbc 	bl	800a050 <__sinit>
 800a0d8:	3648      	adds	r6, #72	; 0x48
 800a0da:	68b4      	ldr	r4, [r6, #8]
 800a0dc:	6873      	ldr	r3, [r6, #4]
 800a0de:	3b01      	subs	r3, #1
 800a0e0:	d504      	bpl.n	800a0ec <__sfp+0x2c>
 800a0e2:	6833      	ldr	r3, [r6, #0]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d022      	beq.n	800a12e <__sfp+0x6e>
 800a0e8:	6836      	ldr	r6, [r6, #0]
 800a0ea:	e7f6      	b.n	800a0da <__sfp+0x1a>
 800a0ec:	220c      	movs	r2, #12
 800a0ee:	5ea5      	ldrsh	r5, [r4, r2]
 800a0f0:	2d00      	cmp	r5, #0
 800a0f2:	d11a      	bne.n	800a12a <__sfp+0x6a>
 800a0f4:	0020      	movs	r0, r4
 800a0f6:	4b15      	ldr	r3, [pc, #84]	; (800a14c <__sfp+0x8c>)
 800a0f8:	3058      	adds	r0, #88	; 0x58
 800a0fa:	60e3      	str	r3, [r4, #12]
 800a0fc:	6665      	str	r5, [r4, #100]	; 0x64
 800a0fe:	f000 f847 	bl	800a190 <__retarget_lock_init_recursive>
 800a102:	f7ff ff8d 	bl	800a020 <__sfp_lock_release>
 800a106:	0020      	movs	r0, r4
 800a108:	2208      	movs	r2, #8
 800a10a:	0029      	movs	r1, r5
 800a10c:	6025      	str	r5, [r4, #0]
 800a10e:	60a5      	str	r5, [r4, #8]
 800a110:	6065      	str	r5, [r4, #4]
 800a112:	6125      	str	r5, [r4, #16]
 800a114:	6165      	str	r5, [r4, #20]
 800a116:	61a5      	str	r5, [r4, #24]
 800a118:	305c      	adds	r0, #92	; 0x5c
 800a11a:	f7fc ffbe 	bl	800709a <memset>
 800a11e:	6365      	str	r5, [r4, #52]	; 0x34
 800a120:	63a5      	str	r5, [r4, #56]	; 0x38
 800a122:	64a5      	str	r5, [r4, #72]	; 0x48
 800a124:	64e5      	str	r5, [r4, #76]	; 0x4c
 800a126:	0020      	movs	r0, r4
 800a128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a12a:	3468      	adds	r4, #104	; 0x68
 800a12c:	e7d7      	b.n	800a0de <__sfp+0x1e>
 800a12e:	2104      	movs	r1, #4
 800a130:	0038      	movs	r0, r7
 800a132:	f7ff ff57 	bl	8009fe4 <__sfmoreglue>
 800a136:	1e04      	subs	r4, r0, #0
 800a138:	6030      	str	r0, [r6, #0]
 800a13a:	d1d5      	bne.n	800a0e8 <__sfp+0x28>
 800a13c:	f7ff ff70 	bl	800a020 <__sfp_lock_release>
 800a140:	230c      	movs	r3, #12
 800a142:	603b      	str	r3, [r7, #0]
 800a144:	e7ef      	b.n	800a126 <__sfp+0x66>
 800a146:	46c0      	nop			; (mov r8, r8)
 800a148:	0800a7a8 	.word	0x0800a7a8
 800a14c:	ffff0001 	.word	0xffff0001

0800a150 <_fwalk_reent>:
 800a150:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a152:	0004      	movs	r4, r0
 800a154:	0006      	movs	r6, r0
 800a156:	2700      	movs	r7, #0
 800a158:	9101      	str	r1, [sp, #4]
 800a15a:	3448      	adds	r4, #72	; 0x48
 800a15c:	6863      	ldr	r3, [r4, #4]
 800a15e:	68a5      	ldr	r5, [r4, #8]
 800a160:	9300      	str	r3, [sp, #0]
 800a162:	9b00      	ldr	r3, [sp, #0]
 800a164:	3b01      	subs	r3, #1
 800a166:	9300      	str	r3, [sp, #0]
 800a168:	d504      	bpl.n	800a174 <_fwalk_reent+0x24>
 800a16a:	6824      	ldr	r4, [r4, #0]
 800a16c:	2c00      	cmp	r4, #0
 800a16e:	d1f5      	bne.n	800a15c <_fwalk_reent+0xc>
 800a170:	0038      	movs	r0, r7
 800a172:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a174:	89ab      	ldrh	r3, [r5, #12]
 800a176:	2b01      	cmp	r3, #1
 800a178:	d908      	bls.n	800a18c <_fwalk_reent+0x3c>
 800a17a:	220e      	movs	r2, #14
 800a17c:	5eab      	ldrsh	r3, [r5, r2]
 800a17e:	3301      	adds	r3, #1
 800a180:	d004      	beq.n	800a18c <_fwalk_reent+0x3c>
 800a182:	0029      	movs	r1, r5
 800a184:	0030      	movs	r0, r6
 800a186:	9b01      	ldr	r3, [sp, #4]
 800a188:	4798      	blx	r3
 800a18a:	4307      	orrs	r7, r0
 800a18c:	3568      	adds	r5, #104	; 0x68
 800a18e:	e7e8      	b.n	800a162 <_fwalk_reent+0x12>

0800a190 <__retarget_lock_init_recursive>:
 800a190:	4770      	bx	lr

0800a192 <__retarget_lock_acquire_recursive>:
 800a192:	4770      	bx	lr

0800a194 <__retarget_lock_release_recursive>:
 800a194:	4770      	bx	lr
	...

0800a198 <__swhatbuf_r>:
 800a198:	b570      	push	{r4, r5, r6, lr}
 800a19a:	000e      	movs	r6, r1
 800a19c:	001d      	movs	r5, r3
 800a19e:	230e      	movs	r3, #14
 800a1a0:	5ec9      	ldrsh	r1, [r1, r3]
 800a1a2:	0014      	movs	r4, r2
 800a1a4:	b096      	sub	sp, #88	; 0x58
 800a1a6:	2900      	cmp	r1, #0
 800a1a8:	da08      	bge.n	800a1bc <__swhatbuf_r+0x24>
 800a1aa:	220c      	movs	r2, #12
 800a1ac:	5eb3      	ldrsh	r3, [r6, r2]
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	602a      	str	r2, [r5, #0]
 800a1b2:	061b      	lsls	r3, r3, #24
 800a1b4:	d411      	bmi.n	800a1da <__swhatbuf_r+0x42>
 800a1b6:	2380      	movs	r3, #128	; 0x80
 800a1b8:	00db      	lsls	r3, r3, #3
 800a1ba:	e00f      	b.n	800a1dc <__swhatbuf_r+0x44>
 800a1bc:	466a      	mov	r2, sp
 800a1be:	f000 f971 	bl	800a4a4 <_fstat_r>
 800a1c2:	2800      	cmp	r0, #0
 800a1c4:	dbf1      	blt.n	800a1aa <__swhatbuf_r+0x12>
 800a1c6:	23f0      	movs	r3, #240	; 0xf0
 800a1c8:	9901      	ldr	r1, [sp, #4]
 800a1ca:	021b      	lsls	r3, r3, #8
 800a1cc:	4019      	ands	r1, r3
 800a1ce:	4b05      	ldr	r3, [pc, #20]	; (800a1e4 <__swhatbuf_r+0x4c>)
 800a1d0:	18c9      	adds	r1, r1, r3
 800a1d2:	424b      	negs	r3, r1
 800a1d4:	4159      	adcs	r1, r3
 800a1d6:	6029      	str	r1, [r5, #0]
 800a1d8:	e7ed      	b.n	800a1b6 <__swhatbuf_r+0x1e>
 800a1da:	2340      	movs	r3, #64	; 0x40
 800a1dc:	2000      	movs	r0, #0
 800a1de:	6023      	str	r3, [r4, #0]
 800a1e0:	b016      	add	sp, #88	; 0x58
 800a1e2:	bd70      	pop	{r4, r5, r6, pc}
 800a1e4:	ffffe000 	.word	0xffffe000

0800a1e8 <__smakebuf_r>:
 800a1e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a1ea:	2602      	movs	r6, #2
 800a1ec:	898b      	ldrh	r3, [r1, #12]
 800a1ee:	0005      	movs	r5, r0
 800a1f0:	000c      	movs	r4, r1
 800a1f2:	4233      	tst	r3, r6
 800a1f4:	d006      	beq.n	800a204 <__smakebuf_r+0x1c>
 800a1f6:	0023      	movs	r3, r4
 800a1f8:	3347      	adds	r3, #71	; 0x47
 800a1fa:	6023      	str	r3, [r4, #0]
 800a1fc:	6123      	str	r3, [r4, #16]
 800a1fe:	2301      	movs	r3, #1
 800a200:	6163      	str	r3, [r4, #20]
 800a202:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800a204:	466a      	mov	r2, sp
 800a206:	ab01      	add	r3, sp, #4
 800a208:	f7ff ffc6 	bl	800a198 <__swhatbuf_r>
 800a20c:	9900      	ldr	r1, [sp, #0]
 800a20e:	0007      	movs	r7, r0
 800a210:	0028      	movs	r0, r5
 800a212:	f7ff f833 	bl	800927c <_malloc_r>
 800a216:	2800      	cmp	r0, #0
 800a218:	d108      	bne.n	800a22c <__smakebuf_r+0x44>
 800a21a:	220c      	movs	r2, #12
 800a21c:	5ea3      	ldrsh	r3, [r4, r2]
 800a21e:	059a      	lsls	r2, r3, #22
 800a220:	d4ef      	bmi.n	800a202 <__smakebuf_r+0x1a>
 800a222:	2203      	movs	r2, #3
 800a224:	4393      	bics	r3, r2
 800a226:	431e      	orrs	r6, r3
 800a228:	81a6      	strh	r6, [r4, #12]
 800a22a:	e7e4      	b.n	800a1f6 <__smakebuf_r+0xe>
 800a22c:	4b0f      	ldr	r3, [pc, #60]	; (800a26c <__smakebuf_r+0x84>)
 800a22e:	62ab      	str	r3, [r5, #40]	; 0x28
 800a230:	2380      	movs	r3, #128	; 0x80
 800a232:	89a2      	ldrh	r2, [r4, #12]
 800a234:	6020      	str	r0, [r4, #0]
 800a236:	4313      	orrs	r3, r2
 800a238:	81a3      	strh	r3, [r4, #12]
 800a23a:	9b00      	ldr	r3, [sp, #0]
 800a23c:	6120      	str	r0, [r4, #16]
 800a23e:	6163      	str	r3, [r4, #20]
 800a240:	9b01      	ldr	r3, [sp, #4]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d00d      	beq.n	800a262 <__smakebuf_r+0x7a>
 800a246:	0028      	movs	r0, r5
 800a248:	230e      	movs	r3, #14
 800a24a:	5ee1      	ldrsh	r1, [r4, r3]
 800a24c:	f000 f93c 	bl	800a4c8 <_isatty_r>
 800a250:	2800      	cmp	r0, #0
 800a252:	d006      	beq.n	800a262 <__smakebuf_r+0x7a>
 800a254:	2203      	movs	r2, #3
 800a256:	89a3      	ldrh	r3, [r4, #12]
 800a258:	4393      	bics	r3, r2
 800a25a:	001a      	movs	r2, r3
 800a25c:	2301      	movs	r3, #1
 800a25e:	4313      	orrs	r3, r2
 800a260:	81a3      	strh	r3, [r4, #12]
 800a262:	89a0      	ldrh	r0, [r4, #12]
 800a264:	4307      	orrs	r7, r0
 800a266:	81a7      	strh	r7, [r4, #12]
 800a268:	e7cb      	b.n	800a202 <__smakebuf_r+0x1a>
 800a26a:	46c0      	nop			; (mov r8, r8)
 800a26c:	08009fd5 	.word	0x08009fd5

0800a270 <memchr>:
 800a270:	b2c9      	uxtb	r1, r1
 800a272:	1882      	adds	r2, r0, r2
 800a274:	4290      	cmp	r0, r2
 800a276:	d101      	bne.n	800a27c <memchr+0xc>
 800a278:	2000      	movs	r0, #0
 800a27a:	4770      	bx	lr
 800a27c:	7803      	ldrb	r3, [r0, #0]
 800a27e:	428b      	cmp	r3, r1
 800a280:	d0fb      	beq.n	800a27a <memchr+0xa>
 800a282:	3001      	adds	r0, #1
 800a284:	e7f6      	b.n	800a274 <memchr+0x4>

0800a286 <memmove>:
 800a286:	b510      	push	{r4, lr}
 800a288:	4288      	cmp	r0, r1
 800a28a:	d902      	bls.n	800a292 <memmove+0xc>
 800a28c:	188b      	adds	r3, r1, r2
 800a28e:	4298      	cmp	r0, r3
 800a290:	d303      	bcc.n	800a29a <memmove+0x14>
 800a292:	2300      	movs	r3, #0
 800a294:	e007      	b.n	800a2a6 <memmove+0x20>
 800a296:	5c8b      	ldrb	r3, [r1, r2]
 800a298:	5483      	strb	r3, [r0, r2]
 800a29a:	3a01      	subs	r2, #1
 800a29c:	d2fb      	bcs.n	800a296 <memmove+0x10>
 800a29e:	bd10      	pop	{r4, pc}
 800a2a0:	5ccc      	ldrb	r4, [r1, r3]
 800a2a2:	54c4      	strb	r4, [r0, r3]
 800a2a4:	3301      	adds	r3, #1
 800a2a6:	429a      	cmp	r2, r3
 800a2a8:	d1fa      	bne.n	800a2a0 <memmove+0x1a>
 800a2aa:	e7f8      	b.n	800a29e <memmove+0x18>

0800a2ac <__malloc_lock>:
 800a2ac:	b510      	push	{r4, lr}
 800a2ae:	4802      	ldr	r0, [pc, #8]	; (800a2b8 <__malloc_lock+0xc>)
 800a2b0:	f7ff ff6f 	bl	800a192 <__retarget_lock_acquire_recursive>
 800a2b4:	bd10      	pop	{r4, pc}
 800a2b6:	46c0      	nop			; (mov r8, r8)
 800a2b8:	200005b4 	.word	0x200005b4

0800a2bc <__malloc_unlock>:
 800a2bc:	b510      	push	{r4, lr}
 800a2be:	4802      	ldr	r0, [pc, #8]	; (800a2c8 <__malloc_unlock+0xc>)
 800a2c0:	f7ff ff68 	bl	800a194 <__retarget_lock_release_recursive>
 800a2c4:	bd10      	pop	{r4, pc}
 800a2c6:	46c0      	nop			; (mov r8, r8)
 800a2c8:	200005b4 	.word	0x200005b4

0800a2cc <_realloc_r>:
 800a2cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a2ce:	0007      	movs	r7, r0
 800a2d0:	000e      	movs	r6, r1
 800a2d2:	0014      	movs	r4, r2
 800a2d4:	2900      	cmp	r1, #0
 800a2d6:	d105      	bne.n	800a2e4 <_realloc_r+0x18>
 800a2d8:	0011      	movs	r1, r2
 800a2da:	f7fe ffcf 	bl	800927c <_malloc_r>
 800a2de:	0005      	movs	r5, r0
 800a2e0:	0028      	movs	r0, r5
 800a2e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a2e4:	2a00      	cmp	r2, #0
 800a2e6:	d103      	bne.n	800a2f0 <_realloc_r+0x24>
 800a2e8:	f7fe ff5c 	bl	80091a4 <_free_r>
 800a2ec:	0025      	movs	r5, r4
 800a2ee:	e7f7      	b.n	800a2e0 <_realloc_r+0x14>
 800a2f0:	f000 f910 	bl	800a514 <_malloc_usable_size_r>
 800a2f4:	9001      	str	r0, [sp, #4]
 800a2f6:	4284      	cmp	r4, r0
 800a2f8:	d803      	bhi.n	800a302 <_realloc_r+0x36>
 800a2fa:	0035      	movs	r5, r6
 800a2fc:	0843      	lsrs	r3, r0, #1
 800a2fe:	42a3      	cmp	r3, r4
 800a300:	d3ee      	bcc.n	800a2e0 <_realloc_r+0x14>
 800a302:	0021      	movs	r1, r4
 800a304:	0038      	movs	r0, r7
 800a306:	f7fe ffb9 	bl	800927c <_malloc_r>
 800a30a:	1e05      	subs	r5, r0, #0
 800a30c:	d0e8      	beq.n	800a2e0 <_realloc_r+0x14>
 800a30e:	9b01      	ldr	r3, [sp, #4]
 800a310:	0022      	movs	r2, r4
 800a312:	429c      	cmp	r4, r3
 800a314:	d900      	bls.n	800a318 <_realloc_r+0x4c>
 800a316:	001a      	movs	r2, r3
 800a318:	0031      	movs	r1, r6
 800a31a:	0028      	movs	r0, r5
 800a31c:	f7fc feb4 	bl	8007088 <memcpy>
 800a320:	0031      	movs	r1, r6
 800a322:	0038      	movs	r0, r7
 800a324:	f7fe ff3e 	bl	80091a4 <_free_r>
 800a328:	e7da      	b.n	800a2e0 <_realloc_r+0x14>

0800a32a <_raise_r>:
 800a32a:	b570      	push	{r4, r5, r6, lr}
 800a32c:	0004      	movs	r4, r0
 800a32e:	000d      	movs	r5, r1
 800a330:	291f      	cmp	r1, #31
 800a332:	d904      	bls.n	800a33e <_raise_r+0x14>
 800a334:	2316      	movs	r3, #22
 800a336:	6003      	str	r3, [r0, #0]
 800a338:	2001      	movs	r0, #1
 800a33a:	4240      	negs	r0, r0
 800a33c:	bd70      	pop	{r4, r5, r6, pc}
 800a33e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800a340:	2b00      	cmp	r3, #0
 800a342:	d004      	beq.n	800a34e <_raise_r+0x24>
 800a344:	008a      	lsls	r2, r1, #2
 800a346:	189b      	adds	r3, r3, r2
 800a348:	681a      	ldr	r2, [r3, #0]
 800a34a:	2a00      	cmp	r2, #0
 800a34c:	d108      	bne.n	800a360 <_raise_r+0x36>
 800a34e:	0020      	movs	r0, r4
 800a350:	f000 f832 	bl	800a3b8 <_getpid_r>
 800a354:	002a      	movs	r2, r5
 800a356:	0001      	movs	r1, r0
 800a358:	0020      	movs	r0, r4
 800a35a:	f000 f81b 	bl	800a394 <_kill_r>
 800a35e:	e7ed      	b.n	800a33c <_raise_r+0x12>
 800a360:	2000      	movs	r0, #0
 800a362:	2a01      	cmp	r2, #1
 800a364:	d0ea      	beq.n	800a33c <_raise_r+0x12>
 800a366:	1c51      	adds	r1, r2, #1
 800a368:	d103      	bne.n	800a372 <_raise_r+0x48>
 800a36a:	2316      	movs	r3, #22
 800a36c:	3001      	adds	r0, #1
 800a36e:	6023      	str	r3, [r4, #0]
 800a370:	e7e4      	b.n	800a33c <_raise_r+0x12>
 800a372:	2400      	movs	r4, #0
 800a374:	0028      	movs	r0, r5
 800a376:	601c      	str	r4, [r3, #0]
 800a378:	4790      	blx	r2
 800a37a:	0020      	movs	r0, r4
 800a37c:	e7de      	b.n	800a33c <_raise_r+0x12>
	...

0800a380 <raise>:
 800a380:	b510      	push	{r4, lr}
 800a382:	4b03      	ldr	r3, [pc, #12]	; (800a390 <raise+0x10>)
 800a384:	0001      	movs	r1, r0
 800a386:	6818      	ldr	r0, [r3, #0]
 800a388:	f7ff ffcf 	bl	800a32a <_raise_r>
 800a38c:	bd10      	pop	{r4, pc}
 800a38e:	46c0      	nop			; (mov r8, r8)
 800a390:	2000007c 	.word	0x2000007c

0800a394 <_kill_r>:
 800a394:	2300      	movs	r3, #0
 800a396:	b570      	push	{r4, r5, r6, lr}
 800a398:	4d06      	ldr	r5, [pc, #24]	; (800a3b4 <_kill_r+0x20>)
 800a39a:	0004      	movs	r4, r0
 800a39c:	0008      	movs	r0, r1
 800a39e:	0011      	movs	r1, r2
 800a3a0:	602b      	str	r3, [r5, #0]
 800a3a2:	f7f8 fefd 	bl	80031a0 <_kill>
 800a3a6:	1c43      	adds	r3, r0, #1
 800a3a8:	d103      	bne.n	800a3b2 <_kill_r+0x1e>
 800a3aa:	682b      	ldr	r3, [r5, #0]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d000      	beq.n	800a3b2 <_kill_r+0x1e>
 800a3b0:	6023      	str	r3, [r4, #0]
 800a3b2:	bd70      	pop	{r4, r5, r6, pc}
 800a3b4:	200005b8 	.word	0x200005b8

0800a3b8 <_getpid_r>:
 800a3b8:	b510      	push	{r4, lr}
 800a3ba:	f7f8 feeb 	bl	8003194 <_getpid>
 800a3be:	bd10      	pop	{r4, pc}

0800a3c0 <__sread>:
 800a3c0:	b570      	push	{r4, r5, r6, lr}
 800a3c2:	000c      	movs	r4, r1
 800a3c4:	250e      	movs	r5, #14
 800a3c6:	5f49      	ldrsh	r1, [r1, r5]
 800a3c8:	f000 f8ac 	bl	800a524 <_read_r>
 800a3cc:	2800      	cmp	r0, #0
 800a3ce:	db03      	blt.n	800a3d8 <__sread+0x18>
 800a3d0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a3d2:	181b      	adds	r3, r3, r0
 800a3d4:	6563      	str	r3, [r4, #84]	; 0x54
 800a3d6:	bd70      	pop	{r4, r5, r6, pc}
 800a3d8:	89a3      	ldrh	r3, [r4, #12]
 800a3da:	4a02      	ldr	r2, [pc, #8]	; (800a3e4 <__sread+0x24>)
 800a3dc:	4013      	ands	r3, r2
 800a3de:	81a3      	strh	r3, [r4, #12]
 800a3e0:	e7f9      	b.n	800a3d6 <__sread+0x16>
 800a3e2:	46c0      	nop			; (mov r8, r8)
 800a3e4:	ffffefff 	.word	0xffffefff

0800a3e8 <__swrite>:
 800a3e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3ea:	001f      	movs	r7, r3
 800a3ec:	898b      	ldrh	r3, [r1, #12]
 800a3ee:	0005      	movs	r5, r0
 800a3f0:	000c      	movs	r4, r1
 800a3f2:	0016      	movs	r6, r2
 800a3f4:	05db      	lsls	r3, r3, #23
 800a3f6:	d505      	bpl.n	800a404 <__swrite+0x1c>
 800a3f8:	230e      	movs	r3, #14
 800a3fa:	5ec9      	ldrsh	r1, [r1, r3]
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	2302      	movs	r3, #2
 800a400:	f000 f874 	bl	800a4ec <_lseek_r>
 800a404:	89a3      	ldrh	r3, [r4, #12]
 800a406:	4a05      	ldr	r2, [pc, #20]	; (800a41c <__swrite+0x34>)
 800a408:	0028      	movs	r0, r5
 800a40a:	4013      	ands	r3, r2
 800a40c:	81a3      	strh	r3, [r4, #12]
 800a40e:	0032      	movs	r2, r6
 800a410:	230e      	movs	r3, #14
 800a412:	5ee1      	ldrsh	r1, [r4, r3]
 800a414:	003b      	movs	r3, r7
 800a416:	f000 f81f 	bl	800a458 <_write_r>
 800a41a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a41c:	ffffefff 	.word	0xffffefff

0800a420 <__sseek>:
 800a420:	b570      	push	{r4, r5, r6, lr}
 800a422:	000c      	movs	r4, r1
 800a424:	250e      	movs	r5, #14
 800a426:	5f49      	ldrsh	r1, [r1, r5]
 800a428:	f000 f860 	bl	800a4ec <_lseek_r>
 800a42c:	89a3      	ldrh	r3, [r4, #12]
 800a42e:	1c42      	adds	r2, r0, #1
 800a430:	d103      	bne.n	800a43a <__sseek+0x1a>
 800a432:	4a05      	ldr	r2, [pc, #20]	; (800a448 <__sseek+0x28>)
 800a434:	4013      	ands	r3, r2
 800a436:	81a3      	strh	r3, [r4, #12]
 800a438:	bd70      	pop	{r4, r5, r6, pc}
 800a43a:	2280      	movs	r2, #128	; 0x80
 800a43c:	0152      	lsls	r2, r2, #5
 800a43e:	4313      	orrs	r3, r2
 800a440:	81a3      	strh	r3, [r4, #12]
 800a442:	6560      	str	r0, [r4, #84]	; 0x54
 800a444:	e7f8      	b.n	800a438 <__sseek+0x18>
 800a446:	46c0      	nop			; (mov r8, r8)
 800a448:	ffffefff 	.word	0xffffefff

0800a44c <__sclose>:
 800a44c:	b510      	push	{r4, lr}
 800a44e:	230e      	movs	r3, #14
 800a450:	5ec9      	ldrsh	r1, [r1, r3]
 800a452:	f000 f815 	bl	800a480 <_close_r>
 800a456:	bd10      	pop	{r4, pc}

0800a458 <_write_r>:
 800a458:	b570      	push	{r4, r5, r6, lr}
 800a45a:	0004      	movs	r4, r0
 800a45c:	0008      	movs	r0, r1
 800a45e:	0011      	movs	r1, r2
 800a460:	001a      	movs	r2, r3
 800a462:	2300      	movs	r3, #0
 800a464:	4d05      	ldr	r5, [pc, #20]	; (800a47c <_write_r+0x24>)
 800a466:	602b      	str	r3, [r5, #0]
 800a468:	f7f8 fed3 	bl	8003212 <_write>
 800a46c:	1c43      	adds	r3, r0, #1
 800a46e:	d103      	bne.n	800a478 <_write_r+0x20>
 800a470:	682b      	ldr	r3, [r5, #0]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d000      	beq.n	800a478 <_write_r+0x20>
 800a476:	6023      	str	r3, [r4, #0]
 800a478:	bd70      	pop	{r4, r5, r6, pc}
 800a47a:	46c0      	nop			; (mov r8, r8)
 800a47c:	200005b8 	.word	0x200005b8

0800a480 <_close_r>:
 800a480:	2300      	movs	r3, #0
 800a482:	b570      	push	{r4, r5, r6, lr}
 800a484:	4d06      	ldr	r5, [pc, #24]	; (800a4a0 <_close_r+0x20>)
 800a486:	0004      	movs	r4, r0
 800a488:	0008      	movs	r0, r1
 800a48a:	602b      	str	r3, [r5, #0]
 800a48c:	f7f8 fedd 	bl	800324a <_close>
 800a490:	1c43      	adds	r3, r0, #1
 800a492:	d103      	bne.n	800a49c <_close_r+0x1c>
 800a494:	682b      	ldr	r3, [r5, #0]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d000      	beq.n	800a49c <_close_r+0x1c>
 800a49a:	6023      	str	r3, [r4, #0]
 800a49c:	bd70      	pop	{r4, r5, r6, pc}
 800a49e:	46c0      	nop			; (mov r8, r8)
 800a4a0:	200005b8 	.word	0x200005b8

0800a4a4 <_fstat_r>:
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	b570      	push	{r4, r5, r6, lr}
 800a4a8:	4d06      	ldr	r5, [pc, #24]	; (800a4c4 <_fstat_r+0x20>)
 800a4aa:	0004      	movs	r4, r0
 800a4ac:	0008      	movs	r0, r1
 800a4ae:	0011      	movs	r1, r2
 800a4b0:	602b      	str	r3, [r5, #0]
 800a4b2:	f7f8 fed4 	bl	800325e <_fstat>
 800a4b6:	1c43      	adds	r3, r0, #1
 800a4b8:	d103      	bne.n	800a4c2 <_fstat_r+0x1e>
 800a4ba:	682b      	ldr	r3, [r5, #0]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d000      	beq.n	800a4c2 <_fstat_r+0x1e>
 800a4c0:	6023      	str	r3, [r4, #0]
 800a4c2:	bd70      	pop	{r4, r5, r6, pc}
 800a4c4:	200005b8 	.word	0x200005b8

0800a4c8 <_isatty_r>:
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	b570      	push	{r4, r5, r6, lr}
 800a4cc:	4d06      	ldr	r5, [pc, #24]	; (800a4e8 <_isatty_r+0x20>)
 800a4ce:	0004      	movs	r4, r0
 800a4d0:	0008      	movs	r0, r1
 800a4d2:	602b      	str	r3, [r5, #0]
 800a4d4:	f7f8 fed1 	bl	800327a <_isatty>
 800a4d8:	1c43      	adds	r3, r0, #1
 800a4da:	d103      	bne.n	800a4e4 <_isatty_r+0x1c>
 800a4dc:	682b      	ldr	r3, [r5, #0]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d000      	beq.n	800a4e4 <_isatty_r+0x1c>
 800a4e2:	6023      	str	r3, [r4, #0]
 800a4e4:	bd70      	pop	{r4, r5, r6, pc}
 800a4e6:	46c0      	nop			; (mov r8, r8)
 800a4e8:	200005b8 	.word	0x200005b8

0800a4ec <_lseek_r>:
 800a4ec:	b570      	push	{r4, r5, r6, lr}
 800a4ee:	0004      	movs	r4, r0
 800a4f0:	0008      	movs	r0, r1
 800a4f2:	0011      	movs	r1, r2
 800a4f4:	001a      	movs	r2, r3
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	4d05      	ldr	r5, [pc, #20]	; (800a510 <_lseek_r+0x24>)
 800a4fa:	602b      	str	r3, [r5, #0]
 800a4fc:	f7f8 fec6 	bl	800328c <_lseek>
 800a500:	1c43      	adds	r3, r0, #1
 800a502:	d103      	bne.n	800a50c <_lseek_r+0x20>
 800a504:	682b      	ldr	r3, [r5, #0]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d000      	beq.n	800a50c <_lseek_r+0x20>
 800a50a:	6023      	str	r3, [r4, #0]
 800a50c:	bd70      	pop	{r4, r5, r6, pc}
 800a50e:	46c0      	nop			; (mov r8, r8)
 800a510:	200005b8 	.word	0x200005b8

0800a514 <_malloc_usable_size_r>:
 800a514:	1f0b      	subs	r3, r1, #4
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	1f18      	subs	r0, r3, #4
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	da01      	bge.n	800a522 <_malloc_usable_size_r+0xe>
 800a51e:	580b      	ldr	r3, [r1, r0]
 800a520:	18c0      	adds	r0, r0, r3
 800a522:	4770      	bx	lr

0800a524 <_read_r>:
 800a524:	b570      	push	{r4, r5, r6, lr}
 800a526:	0004      	movs	r4, r0
 800a528:	0008      	movs	r0, r1
 800a52a:	0011      	movs	r1, r2
 800a52c:	001a      	movs	r2, r3
 800a52e:	2300      	movs	r3, #0
 800a530:	4d05      	ldr	r5, [pc, #20]	; (800a548 <_read_r+0x24>)
 800a532:	602b      	str	r3, [r5, #0]
 800a534:	f7f8 fe50 	bl	80031d8 <_read>
 800a538:	1c43      	adds	r3, r0, #1
 800a53a:	d103      	bne.n	800a544 <_read_r+0x20>
 800a53c:	682b      	ldr	r3, [r5, #0]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d000      	beq.n	800a544 <_read_r+0x20>
 800a542:	6023      	str	r3, [r4, #0]
 800a544:	bd70      	pop	{r4, r5, r6, pc}
 800a546:	46c0      	nop			; (mov r8, r8)
 800a548:	200005b8 	.word	0x200005b8

0800a54c <_init>:
 800a54c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a54e:	46c0      	nop			; (mov r8, r8)
 800a550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a552:	bc08      	pop	{r3}
 800a554:	469e      	mov	lr, r3
 800a556:	4770      	bx	lr

0800a558 <_fini>:
 800a558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a55a:	46c0      	nop			; (mov r8, r8)
 800a55c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a55e:	bc08      	pop	{r3}
 800a560:	469e      	mov	lr, r3
 800a562:	4770      	bx	lr
