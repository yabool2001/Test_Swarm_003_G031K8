
Test_Swarm_003_G031K8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006318  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000031c  080063d4  080063d4  000163d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066f0  080066f0  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080066f0  080066f0  000166f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066f8  080066f8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066f8  080066f8  000166f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066fc  080066fc  000166fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006700  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000398  20000078  08006778  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000410  08006778  00020410  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014999  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029ae  00000000  00000000  00034a39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d0  00000000  00000000  000373e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010c8  00000000  00000000  000385b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000186ba  00000000  00000000  00039680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014636  00000000  00000000  00051d3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009af3c  00000000  00000000  00066370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001012ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d18  00000000  00000000  001012fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000078 	.word	0x20000078
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080063bc 	.word	0x080063bc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000007c 	.word	0x2000007c
 8000100:	080063bc 	.word	0x080063bc

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	0008      	movs	r0, r1
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	; (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	; (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8ba 	bl	80005ec <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8b5 	bl	80005ec <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	469b      	mov	fp, r3
 800048a:	d433      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048c:	465a      	mov	r2, fp
 800048e:	4653      	mov	r3, sl
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83a      	bhi.n	8000516 <__udivmoddi4+0xc2>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e078      	b.n	8000598 <__udivmoddi4+0x144>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e075      	b.n	800059e <__udivmoddi4+0x14a>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e028      	b.n	800051e <__udivmoddi4+0xca>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	2320      	movs	r3, #32
 80004f8:	1a9b      	subs	r3, r3, r2
 80004fa:	4652      	mov	r2, sl
 80004fc:	40da      	lsrs	r2, r3
 80004fe:	4641      	mov	r1, r8
 8000500:	0013      	movs	r3, r2
 8000502:	464a      	mov	r2, r9
 8000504:	408a      	lsls	r2, r1
 8000506:	0017      	movs	r7, r2
 8000508:	4642      	mov	r2, r8
 800050a:	431f      	orrs	r7, r3
 800050c:	4653      	mov	r3, sl
 800050e:	4093      	lsls	r3, r2
 8000510:	001e      	movs	r6, r3
 8000512:	42af      	cmp	r7, r5
 8000514:	d9c4      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000516:	2200      	movs	r2, #0
 8000518:	2300      	movs	r3, #0
 800051a:	9200      	str	r2, [sp, #0]
 800051c:	9301      	str	r3, [sp, #4]
 800051e:	4643      	mov	r3, r8
 8000520:	2b00      	cmp	r3, #0
 8000522:	d0d9      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000524:	07fb      	lsls	r3, r7, #31
 8000526:	0872      	lsrs	r2, r6, #1
 8000528:	431a      	orrs	r2, r3
 800052a:	4646      	mov	r6, r8
 800052c:	087b      	lsrs	r3, r7, #1
 800052e:	e00e      	b.n	800054e <__udivmoddi4+0xfa>
 8000530:	42ab      	cmp	r3, r5
 8000532:	d101      	bne.n	8000538 <__udivmoddi4+0xe4>
 8000534:	42a2      	cmp	r2, r4
 8000536:	d80c      	bhi.n	8000552 <__udivmoddi4+0xfe>
 8000538:	1aa4      	subs	r4, r4, r2
 800053a:	419d      	sbcs	r5, r3
 800053c:	2001      	movs	r0, #1
 800053e:	1924      	adds	r4, r4, r4
 8000540:	416d      	adcs	r5, r5
 8000542:	2100      	movs	r1, #0
 8000544:	3e01      	subs	r6, #1
 8000546:	1824      	adds	r4, r4, r0
 8000548:	414d      	adcs	r5, r1
 800054a:	2e00      	cmp	r6, #0
 800054c:	d006      	beq.n	800055c <__udivmoddi4+0x108>
 800054e:	42ab      	cmp	r3, r5
 8000550:	d9ee      	bls.n	8000530 <__udivmoddi4+0xdc>
 8000552:	3e01      	subs	r6, #1
 8000554:	1924      	adds	r4, r4, r4
 8000556:	416d      	adcs	r5, r5
 8000558:	2e00      	cmp	r6, #0
 800055a:	d1f8      	bne.n	800054e <__udivmoddi4+0xfa>
 800055c:	9800      	ldr	r0, [sp, #0]
 800055e:	9901      	ldr	r1, [sp, #4]
 8000560:	465b      	mov	r3, fp
 8000562:	1900      	adds	r0, r0, r4
 8000564:	4169      	adcs	r1, r5
 8000566:	2b00      	cmp	r3, #0
 8000568:	db24      	blt.n	80005b4 <__udivmoddi4+0x160>
 800056a:	002b      	movs	r3, r5
 800056c:	465a      	mov	r2, fp
 800056e:	4644      	mov	r4, r8
 8000570:	40d3      	lsrs	r3, r2
 8000572:	002a      	movs	r2, r5
 8000574:	40e2      	lsrs	r2, r4
 8000576:	001c      	movs	r4, r3
 8000578:	465b      	mov	r3, fp
 800057a:	0015      	movs	r5, r2
 800057c:	2b00      	cmp	r3, #0
 800057e:	db2a      	blt.n	80005d6 <__udivmoddi4+0x182>
 8000580:	0026      	movs	r6, r4
 8000582:	409e      	lsls	r6, r3
 8000584:	0033      	movs	r3, r6
 8000586:	0026      	movs	r6, r4
 8000588:	4647      	mov	r7, r8
 800058a:	40be      	lsls	r6, r7
 800058c:	0032      	movs	r2, r6
 800058e:	1a80      	subs	r0, r0, r2
 8000590:	4199      	sbcs	r1, r3
 8000592:	9000      	str	r0, [sp, #0]
 8000594:	9101      	str	r1, [sp, #4]
 8000596:	e79f      	b.n	80004d8 <__udivmoddi4+0x84>
 8000598:	42a3      	cmp	r3, r4
 800059a:	d8bc      	bhi.n	8000516 <__udivmoddi4+0xc2>
 800059c:	e783      	b.n	80004a6 <__udivmoddi4+0x52>
 800059e:	4642      	mov	r2, r8
 80005a0:	2320      	movs	r3, #32
 80005a2:	2100      	movs	r1, #0
 80005a4:	1a9b      	subs	r3, r3, r2
 80005a6:	2200      	movs	r2, #0
 80005a8:	9100      	str	r1, [sp, #0]
 80005aa:	9201      	str	r2, [sp, #4]
 80005ac:	2201      	movs	r2, #1
 80005ae:	40da      	lsrs	r2, r3
 80005b0:	9201      	str	r2, [sp, #4]
 80005b2:	e786      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	2320      	movs	r3, #32
 80005b8:	1a9b      	subs	r3, r3, r2
 80005ba:	002a      	movs	r2, r5
 80005bc:	4646      	mov	r6, r8
 80005be:	409a      	lsls	r2, r3
 80005c0:	0023      	movs	r3, r4
 80005c2:	40f3      	lsrs	r3, r6
 80005c4:	4644      	mov	r4, r8
 80005c6:	4313      	orrs	r3, r2
 80005c8:	002a      	movs	r2, r5
 80005ca:	40e2      	lsrs	r2, r4
 80005cc:	001c      	movs	r4, r3
 80005ce:	465b      	mov	r3, fp
 80005d0:	0015      	movs	r5, r2
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	dad4      	bge.n	8000580 <__udivmoddi4+0x12c>
 80005d6:	4642      	mov	r2, r8
 80005d8:	002f      	movs	r7, r5
 80005da:	2320      	movs	r3, #32
 80005dc:	0026      	movs	r6, r4
 80005de:	4097      	lsls	r7, r2
 80005e0:	1a9b      	subs	r3, r3, r2
 80005e2:	40de      	lsrs	r6, r3
 80005e4:	003b      	movs	r3, r7
 80005e6:	4333      	orrs	r3, r6
 80005e8:	e7cd      	b.n	8000586 <__udivmoddi4+0x132>
 80005ea:	46c0      	nop			; (mov r8, r8)

080005ec <__clzdi2>:
 80005ec:	b510      	push	{r4, lr}
 80005ee:	2900      	cmp	r1, #0
 80005f0:	d103      	bne.n	80005fa <__clzdi2+0xe>
 80005f2:	f000 f807 	bl	8000604 <__clzsi2>
 80005f6:	3020      	adds	r0, #32
 80005f8:	e002      	b.n	8000600 <__clzdi2+0x14>
 80005fa:	0008      	movs	r0, r1
 80005fc:	f000 f802 	bl	8000604 <__clzsi2>
 8000600:	bd10      	pop	{r4, pc}
 8000602:	46c0      	nop			; (mov r8, r8)

08000604 <__clzsi2>:
 8000604:	211c      	movs	r1, #28
 8000606:	2301      	movs	r3, #1
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0xe>
 800060e:	0c00      	lsrs	r0, r0, #16
 8000610:	3910      	subs	r1, #16
 8000612:	0a1b      	lsrs	r3, r3, #8
 8000614:	4298      	cmp	r0, r3
 8000616:	d301      	bcc.n	800061c <__clzsi2+0x18>
 8000618:	0a00      	lsrs	r0, r0, #8
 800061a:	3908      	subs	r1, #8
 800061c:	091b      	lsrs	r3, r3, #4
 800061e:	4298      	cmp	r0, r3
 8000620:	d301      	bcc.n	8000626 <__clzsi2+0x22>
 8000622:	0900      	lsrs	r0, r0, #4
 8000624:	3904      	subs	r1, #4
 8000626:	a202      	add	r2, pc, #8	; (adr r2, 8000630 <__clzsi2+0x2c>)
 8000628:	5c10      	ldrb	r0, [r2, r0]
 800062a:	1840      	adds	r0, r0, r1
 800062c:	4770      	bx	lr
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	02020304 	.word	0x02020304
 8000634:	01010101 	.word	0x01010101
	...

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000644:	f000 fd4c 	bl	80010e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000648:	f000 f828 	bl	800069c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064c:	f000 f93e 	bl	80008cc <MX_GPIO_Init>
  MX_DMA_Init();
 8000650:	f000 f91e 	bl	8000890 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000654:	f000 f8ce 	bl	80007f4 <MX_USART1_UART_Init>
  MX_RTC_Init();
 8000658:	f000 f86c 	bl	8000734 <MX_RTC_Init>
  MX_TIM14_Init();
 800065c:	f000 f8a2 	bl	80007a4 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  __HAL_TIM_CLEAR_IT ( &htim14 , TIM_IT_UPDATE ) ;
 8000660:	4b0a      	ldr	r3, [pc, #40]	; (800068c <main+0x4c>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	2202      	movs	r2, #2
 8000666:	4252      	negs	r2, r2
 8000668:	611a      	str	r2, [r3, #16]
  HAL_UARTEx_ReceiveToIdle_DMA ( SWARM_UART_HANDLER , (uint8_t*) swarm_uart_rx_buff , SWARM_UART_RX_MAX_BUFF_SIZE ) ;
 800066a:	4909      	ldr	r1, [pc, #36]	; (8000690 <main+0x50>)
 800066c:	4b09      	ldr	r3, [pc, #36]	; (8000694 <main+0x54>)
 800066e:	22fa      	movs	r2, #250	; 0xfa
 8000670:	0018      	movs	r0, r3
 8000672:	f004 fa67 	bl	8004b44 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT ( &hdma_usart1_rx, DMA_IT_HT ) ; //Disable Half Transfer interrupt.
 8000676:	4b08      	ldr	r3, [pc, #32]	; (8000698 <main+0x58>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	681a      	ldr	r2, [r3, #0]
 800067c:	4b06      	ldr	r3, [pc, #24]	; (8000698 <main+0x58>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	2104      	movs	r1, #4
 8000682:	438a      	bics	r2, r1
 8000684:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  m138_init () ;
 8000686:	f000 f983 	bl	8000990 <m138_init>
  while (1)
 800068a:	e7fe      	b.n	800068a <main+0x4a>
 800068c:	200000c0 	.word	0x200000c0
 8000690:	200001fc 	.word	0x200001fc
 8000694:	2000010c 	.word	0x2000010c
 8000698:	200001a0 	.word	0x200001a0

0800069c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800069c:	b590      	push	{r4, r7, lr}
 800069e:	b093      	sub	sp, #76	; 0x4c
 80006a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a2:	2410      	movs	r4, #16
 80006a4:	193b      	adds	r3, r7, r4
 80006a6:	0018      	movs	r0, r3
 80006a8:	2338      	movs	r3, #56	; 0x38
 80006aa:	001a      	movs	r2, r3
 80006ac:	2100      	movs	r1, #0
 80006ae:	f004 fb4d 	bl	8004d4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b2:	003b      	movs	r3, r7
 80006b4:	0018      	movs	r0, r3
 80006b6:	2310      	movs	r3, #16
 80006b8:	001a      	movs	r2, r3
 80006ba:	2100      	movs	r1, #0
 80006bc:	f004 fb46 	bl	8004d4c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c0:	2380      	movs	r3, #128	; 0x80
 80006c2:	009b      	lsls	r3, r3, #2
 80006c4:	0018      	movs	r0, r3
 80006c6:	f001 fb0f 	bl	8001ce8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80006ca:	193b      	adds	r3, r7, r4
 80006cc:	220a      	movs	r2, #10
 80006ce:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d0:	193b      	adds	r3, r7, r4
 80006d2:	2280      	movs	r2, #128	; 0x80
 80006d4:	0052      	lsls	r2, r2, #1
 80006d6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006d8:	0021      	movs	r1, r4
 80006da:	187b      	adds	r3, r7, r1
 80006dc:	2200      	movs	r2, #0
 80006de:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e0:	187b      	adds	r3, r7, r1
 80006e2:	2240      	movs	r2, #64	; 0x40
 80006e4:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006e6:	187b      	adds	r3, r7, r1
 80006e8:	2201      	movs	r2, #1
 80006ea:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006ec:	187b      	adds	r3, r7, r1
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f2:	187b      	adds	r3, r7, r1
 80006f4:	0018      	movs	r0, r3
 80006f6:	f001 fb43 	bl	8001d80 <HAL_RCC_OscConfig>
 80006fa:	1e03      	subs	r3, r0, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80006fe:	f000 fa89 	bl	8000c14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000702:	003b      	movs	r3, r7
 8000704:	2207      	movs	r2, #7
 8000706:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000708:	003b      	movs	r3, r7
 800070a:	2200      	movs	r2, #0
 800070c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800070e:	003b      	movs	r3, r7
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000714:	003b      	movs	r3, r7
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800071a:	003b      	movs	r3, r7
 800071c:	2100      	movs	r1, #0
 800071e:	0018      	movs	r0, r3
 8000720:	f001 fe48 	bl	80023b4 <HAL_RCC_ClockConfig>
 8000724:	1e03      	subs	r3, r0, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000728:	f000 fa74 	bl	8000c14 <Error_Handler>
  }
}
 800072c:	46c0      	nop			; (mov r8, r8)
 800072e:	46bd      	mov	sp, r7
 8000730:	b013      	add	sp, #76	; 0x4c
 8000732:	bd90      	pop	{r4, r7, pc}

08000734 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000738:	4b18      	ldr	r3, [pc, #96]	; (800079c <MX_RTC_Init+0x68>)
 800073a:	4a19      	ldr	r2, [pc, #100]	; (80007a0 <MX_RTC_Init+0x6c>)
 800073c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800073e:	4b17      	ldr	r3, [pc, #92]	; (800079c <MX_RTC_Init+0x68>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8000744:	4b15      	ldr	r3, [pc, #84]	; (800079c <MX_RTC_Init+0x68>)
 8000746:	227f      	movs	r2, #127	; 0x7f
 8000748:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 800074a:	4b14      	ldr	r3, [pc, #80]	; (800079c <MX_RTC_Init+0x68>)
 800074c:	22ff      	movs	r2, #255	; 0xff
 800074e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000750:	4b12      	ldr	r3, [pc, #72]	; (800079c <MX_RTC_Init+0x68>)
 8000752:	2200      	movs	r2, #0
 8000754:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000756:	4b11      	ldr	r3, [pc, #68]	; (800079c <MX_RTC_Init+0x68>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800075c:	4b0f      	ldr	r3, [pc, #60]	; (800079c <MX_RTC_Init+0x68>)
 800075e:	2200      	movs	r2, #0
 8000760:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000762:	4b0e      	ldr	r3, [pc, #56]	; (800079c <MX_RTC_Init+0x68>)
 8000764:	2280      	movs	r2, #128	; 0x80
 8000766:	05d2      	lsls	r2, r2, #23
 8000768:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800076a:	4b0c      	ldr	r3, [pc, #48]	; (800079c <MX_RTC_Init+0x68>)
 800076c:	2200      	movs	r2, #0
 800076e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000770:	4b0a      	ldr	r3, [pc, #40]	; (800079c <MX_RTC_Init+0x68>)
 8000772:	0018      	movs	r0, r3
 8000774:	f002 f942 	bl	80029fc <HAL_RTC_Init>
 8000778:	1e03      	subs	r3, r0, #0
 800077a:	d001      	beq.n	8000780 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 800077c:	f000 fa4a 	bl	8000c14 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 30, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8000780:	4b06      	ldr	r3, [pc, #24]	; (800079c <MX_RTC_Init+0x68>)
 8000782:	2204      	movs	r2, #4
 8000784:	211e      	movs	r1, #30
 8000786:	0018      	movs	r0, r3
 8000788:	f002 fa88 	bl	8002c9c <HAL_RTCEx_SetWakeUpTimer_IT>
 800078c:	1e03      	subs	r3, r0, #0
 800078e:	d001      	beq.n	8000794 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000790:	f000 fa40 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000794:	46c0      	nop			; (mov r8, r8)
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	46c0      	nop			; (mov r8, r8)
 800079c:	20000094 	.word	0x20000094
 80007a0:	40002800 	.word	0x40002800

080007a4 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80007a8:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <MX_TIM14_Init+0x40>)
 80007aa:	4a0f      	ldr	r2, [pc, #60]	; (80007e8 <MX_TIM14_Init+0x44>)
 80007ac:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 16000-1;
 80007ae:	4b0d      	ldr	r3, [pc, #52]	; (80007e4 <MX_TIM14_Init+0x40>)
 80007b0:	4a0e      	ldr	r2, [pc, #56]	; (80007ec <MX_TIM14_Init+0x48>)
 80007b2:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b4:	4b0b      	ldr	r3, [pc, #44]	; (80007e4 <MX_TIM14_Init+0x40>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 2000-1;
 80007ba:	4b0a      	ldr	r3, [pc, #40]	; (80007e4 <MX_TIM14_Init+0x40>)
 80007bc:	4a0c      	ldr	r2, [pc, #48]	; (80007f0 <MX_TIM14_Init+0x4c>)
 80007be:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007c0:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <MX_TIM14_Init+0x40>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007c6:	4b07      	ldr	r3, [pc, #28]	; (80007e4 <MX_TIM14_Init+0x40>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80007cc:	4b05      	ldr	r3, [pc, #20]	; (80007e4 <MX_TIM14_Init+0x40>)
 80007ce:	0018      	movs	r0, r3
 80007d0:	f002 fb24 	bl	8002e1c <HAL_TIM_Base_Init>
 80007d4:	1e03      	subs	r3, r0, #0
 80007d6:	d001      	beq.n	80007dc <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 80007d8:	f000 fa1c 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80007dc:	46c0      	nop			; (mov r8, r8)
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	46c0      	nop			; (mov r8, r8)
 80007e4:	200000c0 	.word	0x200000c0
 80007e8:	40002000 	.word	0x40002000
 80007ec:	00003e7f 	.word	0x00003e7f
 80007f0:	000007cf 	.word	0x000007cf

080007f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007f8:	4b23      	ldr	r3, [pc, #140]	; (8000888 <MX_USART1_UART_Init+0x94>)
 80007fa:	4a24      	ldr	r2, [pc, #144]	; (800088c <MX_USART1_UART_Init+0x98>)
 80007fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007fe:	4b22      	ldr	r3, [pc, #136]	; (8000888 <MX_USART1_UART_Init+0x94>)
 8000800:	22e1      	movs	r2, #225	; 0xe1
 8000802:	0252      	lsls	r2, r2, #9
 8000804:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000806:	4b20      	ldr	r3, [pc, #128]	; (8000888 <MX_USART1_UART_Init+0x94>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800080c:	4b1e      	ldr	r3, [pc, #120]	; (8000888 <MX_USART1_UART_Init+0x94>)
 800080e:	2200      	movs	r2, #0
 8000810:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000812:	4b1d      	ldr	r3, [pc, #116]	; (8000888 <MX_USART1_UART_Init+0x94>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000818:	4b1b      	ldr	r3, [pc, #108]	; (8000888 <MX_USART1_UART_Init+0x94>)
 800081a:	220c      	movs	r2, #12
 800081c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800081e:	4b1a      	ldr	r3, [pc, #104]	; (8000888 <MX_USART1_UART_Init+0x94>)
 8000820:	2200      	movs	r2, #0
 8000822:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000824:	4b18      	ldr	r3, [pc, #96]	; (8000888 <MX_USART1_UART_Init+0x94>)
 8000826:	2200      	movs	r2, #0
 8000828:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800082a:	4b17      	ldr	r3, [pc, #92]	; (8000888 <MX_USART1_UART_Init+0x94>)
 800082c:	2200      	movs	r2, #0
 800082e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000830:	4b15      	ldr	r3, [pc, #84]	; (8000888 <MX_USART1_UART_Init+0x94>)
 8000832:	2200      	movs	r2, #0
 8000834:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000836:	4b14      	ldr	r3, [pc, #80]	; (8000888 <MX_USART1_UART_Init+0x94>)
 8000838:	2200      	movs	r2, #0
 800083a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800083c:	4b12      	ldr	r3, [pc, #72]	; (8000888 <MX_USART1_UART_Init+0x94>)
 800083e:	0018      	movs	r0, r3
 8000840:	f002 fda6 	bl	8003390 <HAL_UART_Init>
 8000844:	1e03      	subs	r3, r0, #0
 8000846:	d001      	beq.n	800084c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000848:	f000 f9e4 	bl	8000c14 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800084c:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <MX_USART1_UART_Init+0x94>)
 800084e:	2100      	movs	r1, #0
 8000850:	0018      	movs	r0, r3
 8000852:	f004 f8f5 	bl	8004a40 <HAL_UARTEx_SetTxFifoThreshold>
 8000856:	1e03      	subs	r3, r0, #0
 8000858:	d001      	beq.n	800085e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800085a:	f000 f9db 	bl	8000c14 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800085e:	4b0a      	ldr	r3, [pc, #40]	; (8000888 <MX_USART1_UART_Init+0x94>)
 8000860:	2100      	movs	r1, #0
 8000862:	0018      	movs	r0, r3
 8000864:	f004 f92c 	bl	8004ac0 <HAL_UARTEx_SetRxFifoThreshold>
 8000868:	1e03      	subs	r3, r0, #0
 800086a:	d001      	beq.n	8000870 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800086c:	f000 f9d2 	bl	8000c14 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000870:	4b05      	ldr	r3, [pc, #20]	; (8000888 <MX_USART1_UART_Init+0x94>)
 8000872:	0018      	movs	r0, r3
 8000874:	f004 f8aa 	bl	80049cc <HAL_UARTEx_DisableFifoMode>
 8000878:	1e03      	subs	r3, r0, #0
 800087a:	d001      	beq.n	8000880 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800087c:	f000 f9ca 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000880:	46c0      	nop			; (mov r8, r8)
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	46c0      	nop			; (mov r8, r8)
 8000888:	2000010c 	.word	0x2000010c
 800088c:	40013800 	.word	0x40013800

08000890 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000896:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <MX_DMA_Init+0x38>)
 8000898:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800089a:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <MX_DMA_Init+0x38>)
 800089c:	2101      	movs	r1, #1
 800089e:	430a      	orrs	r2, r1
 80008a0:	639a      	str	r2, [r3, #56]	; 0x38
 80008a2:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <MX_DMA_Init+0x38>)
 80008a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008a6:	2201      	movs	r2, #1
 80008a8:	4013      	ands	r3, r2
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2100      	movs	r1, #0
 80008b2:	2009      	movs	r0, #9
 80008b4:	f000 fd46 	bl	8001344 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80008b8:	2009      	movs	r0, #9
 80008ba:	f000 fd58 	bl	800136e <HAL_NVIC_EnableIRQ>

}
 80008be:	46c0      	nop			; (mov r8, r8)
 80008c0:	46bd      	mov	sp, r7
 80008c2:	b002      	add	sp, #8
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	46c0      	nop			; (mov r8, r8)
 80008c8:	40021000 	.word	0x40021000

080008cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008cc:	b590      	push	{r4, r7, lr}
 80008ce:	b089      	sub	sp, #36	; 0x24
 80008d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d2:	240c      	movs	r4, #12
 80008d4:	193b      	adds	r3, r7, r4
 80008d6:	0018      	movs	r0, r3
 80008d8:	2314      	movs	r3, #20
 80008da:	001a      	movs	r2, r3
 80008dc:	2100      	movs	r1, #0
 80008de:	f004 fa35 	bl	8004d4c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e2:	4b28      	ldr	r3, [pc, #160]	; (8000984 <MX_GPIO_Init+0xb8>)
 80008e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008e6:	4b27      	ldr	r3, [pc, #156]	; (8000984 <MX_GPIO_Init+0xb8>)
 80008e8:	2104      	movs	r1, #4
 80008ea:	430a      	orrs	r2, r1
 80008ec:	635a      	str	r2, [r3, #52]	; 0x34
 80008ee:	4b25      	ldr	r3, [pc, #148]	; (8000984 <MX_GPIO_Init+0xb8>)
 80008f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008f2:	2204      	movs	r2, #4
 80008f4:	4013      	ands	r3, r2
 80008f6:	60bb      	str	r3, [r7, #8]
 80008f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008fa:	4b22      	ldr	r3, [pc, #136]	; (8000984 <MX_GPIO_Init+0xb8>)
 80008fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008fe:	4b21      	ldr	r3, [pc, #132]	; (8000984 <MX_GPIO_Init+0xb8>)
 8000900:	2120      	movs	r1, #32
 8000902:	430a      	orrs	r2, r1
 8000904:	635a      	str	r2, [r3, #52]	; 0x34
 8000906:	4b1f      	ldr	r3, [pc, #124]	; (8000984 <MX_GPIO_Init+0xb8>)
 8000908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800090a:	2220      	movs	r2, #32
 800090c:	4013      	ands	r3, r2
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000912:	4b1c      	ldr	r3, [pc, #112]	; (8000984 <MX_GPIO_Init+0xb8>)
 8000914:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000916:	4b1b      	ldr	r3, [pc, #108]	; (8000984 <MX_GPIO_Init+0xb8>)
 8000918:	2101      	movs	r1, #1
 800091a:	430a      	orrs	r2, r1
 800091c:	635a      	str	r2, [r3, #52]	; 0x34
 800091e:	4b19      	ldr	r3, [pc, #100]	; (8000984 <MX_GPIO_Init+0xb8>)
 8000920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000922:	2201      	movs	r2, #1
 8000924:	4013      	ands	r3, r2
 8000926:	603b      	str	r3, [r7, #0]
 8000928:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, GPIO_PIN_RESET);
 800092a:	4b17      	ldr	r3, [pc, #92]	; (8000988 <MX_GPIO_Init+0xbc>)
 800092c:	2200      	movs	r2, #0
 800092e:	2140      	movs	r1, #64	; 0x40
 8000930:	0018      	movs	r0, r3
 8000932:	f001 f9bb 	bl	8001cac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : T_NRST_Pin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 8000936:	193b      	adds	r3, r7, r4
 8000938:	2204      	movs	r2, #4
 800093a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800093c:	193b      	adds	r3, r7, r4
 800093e:	2288      	movs	r2, #136	; 0x88
 8000940:	0352      	lsls	r2, r2, #13
 8000942:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	193b      	adds	r3, r7, r4
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 800094a:	193b      	adds	r3, r7, r4
 800094c:	4a0f      	ldr	r2, [pc, #60]	; (800098c <MX_GPIO_Init+0xc0>)
 800094e:	0019      	movs	r1, r3
 8000950:	0010      	movs	r0, r2
 8000952:	f001 f847 	bl	80019e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_Pin */
  GPIO_InitStruct.Pin = GREEN_Pin;
 8000956:	0021      	movs	r1, r4
 8000958:	187b      	adds	r3, r7, r1
 800095a:	2240      	movs	r2, #64	; 0x40
 800095c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095e:	187b      	adds	r3, r7, r1
 8000960:	2201      	movs	r2, #1
 8000962:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	187b      	adds	r3, r7, r1
 8000966:	2200      	movs	r2, #0
 8000968:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096a:	187b      	adds	r3, r7, r1
 800096c:	2200      	movs	r2, #0
 800096e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GREEN_GPIO_Port, &GPIO_InitStruct);
 8000970:	187b      	adds	r3, r7, r1
 8000972:	4a05      	ldr	r2, [pc, #20]	; (8000988 <MX_GPIO_Init+0xbc>)
 8000974:	0019      	movs	r1, r3
 8000976:	0010      	movs	r0, r2
 8000978:	f001 f834 	bl	80019e4 <HAL_GPIO_Init>

}
 800097c:	46c0      	nop			; (mov r8, r8)
 800097e:	46bd      	mov	sp, r7
 8000980:	b009      	add	sp, #36	; 0x24
 8000982:	bd90      	pop	{r4, r7, pc}
 8000984:	40021000 	.word	0x40021000
 8000988:	50000800 	.word	0x50000800
 800098c:	50001400 	.word	0x50001400

08000990 <m138_init>:

/* USER CODE BEGIN 4 */
void m138_init ()
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
	char* chunk = malloc ( 20 * sizeof (char) ) ;
 8000996:	2014      	movs	r0, #20
 8000998:	f004 f9c4 	bl	8004d24 <malloc>
 800099c:	0003      	movs	r3, r0
 800099e:	607b      	str	r3, [r7, #4]
	send_at_command_2_swarm ( cs_at , cs_answer , 1 ) ;
 80009a0:	4b16      	ldr	r3, [pc, #88]	; (80009fc <m138_init+0x6c>)
 80009a2:	6818      	ldr	r0, [r3, #0]
 80009a4:	4b16      	ldr	r3, [pc, #88]	; (8000a00 <m138_init+0x70>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2201      	movs	r2, #1
 80009aa:	0019      	movs	r1, r3
 80009ac:	f000 f834 	bl	8000a18 <send_at_command_2_swarm>
	if ( swarm_checklist == 1 )
 80009b0:	4b14      	ldr	r3, [pc, #80]	; (8000a04 <m138_init+0x74>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d118      	bne.n	80009ea <m138_init+0x5a>
	{
		chunk = strtok ( (char*) swarm_uart_rx_buff , "=" ) ;
 80009b8:	4a13      	ldr	r2, [pc, #76]	; (8000a08 <m138_init+0x78>)
 80009ba:	4b14      	ldr	r3, [pc, #80]	; (8000a0c <m138_init+0x7c>)
 80009bc:	0011      	movs	r1, r2
 80009be:	0018      	movs	r0, r3
 80009c0:	f004 fb00 	bl	8004fc4 <strtok>
 80009c4:	0003      	movs	r3, r0
 80009c6:	607b      	str	r3, [r7, #4]
		chunk = strtok ( NULL , "," ) ;
 80009c8:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <m138_init+0x80>)
 80009ca:	0019      	movs	r1, r3
 80009cc:	2000      	movs	r0, #0
 80009ce:	f004 faf9 	bl	8004fc4 <strtok>
 80009d2:	0003      	movs	r3, r0
 80009d4:	607b      	str	r3, [r7, #4]
		swarm_dev_id = (uint32_t) strtol ( chunk , NULL , 16 ) ;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	2210      	movs	r2, #16
 80009da:	2100      	movs	r1, #0
 80009dc:	0018      	movs	r0, r3
 80009de:	f004 fbe3 	bl	80051a8 <strtol>
 80009e2:	0003      	movs	r3, r0
 80009e4:	001a      	movs	r2, r3
 80009e6:	4b0b      	ldr	r3, [pc, #44]	; (8000a14 <m138_init+0x84>)
 80009e8:	601a      	str	r2, [r3, #0]
	}
	free ( chunk ) ;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	0018      	movs	r0, r3
 80009ee:	f004 f9a3 	bl	8004d38 <free>
}
 80009f2:	46c0      	nop			; (mov r8, r8)
 80009f4:	46bd      	mov	sp, r7
 80009f6:	b002      	add	sp, #8
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	46c0      	nop			; (mov r8, r8)
 80009fc:	20000000 	.word	0x20000000
 8000a00:	20000004 	.word	0x20000004
 8000a04:	200003f3 	.word	0x200003f3
 8000a08:	0800640c 	.word	0x0800640c
 8000a0c:	200001fc 	.word	0x200001fc
 8000a10:	08006410 	.word	0x08006410
 8000a14:	200003f4 	.word	0x200003f4

08000a18 <send_at_command_2_swarm>:

void send_at_command_2_swarm ( const char* at_command , const char* answer , uint16_t step )
{
 8000a18:	b5b0      	push	{r4, r5, r7, lr}
 8000a1a:	b086      	sub	sp, #24
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	60f8      	str	r0, [r7, #12]
 8000a20:	60b9      	str	r1, [r7, #8]
 8000a22:	1dbb      	adds	r3, r7, #6
 8000a24:	801a      	strh	r2, [r3, #0]
	uint8_t cs = nmea_checksum ( at_command , strlen ( at_command ) ) ;
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	0018      	movs	r0, r3
 8000a2a:	f7ff fb6b 	bl	8000104 <strlen>
 8000a2e:	0002      	movs	r2, r0
 8000a30:	2517      	movs	r5, #23
 8000a32:	197c      	adds	r4, r7, r5
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	0011      	movs	r1, r2
 8000a38:	0018      	movs	r0, r3
 8000a3a:	f000 f86d 	bl	8000b18 <nmea_checksum>
 8000a3e:	0003      	movs	r3, r0
 8000a40:	7023      	strb	r3, [r4, #0]

	sprintf ( swarm_uart_tx_buff , "%s*%02x\n" , at_command , cs ) ;
 8000a42:	197b      	adds	r3, r7, r5
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	68fa      	ldr	r2, [r7, #12]
 8000a48:	491a      	ldr	r1, [pc, #104]	; (8000ab4 <send_at_command_2_swarm+0x9c>)
 8000a4a:	481b      	ldr	r0, [pc, #108]	; (8000ab8 <send_at_command_2_swarm+0xa0>)
 8000a4c:	f004 fa7a 	bl	8004f44 <siprintf>
	tim14_on = 1 ;
 8000a50:	4b1a      	ldr	r3, [pc, #104]	; (8000abc <send_at_command_2_swarm+0xa4>)
 8000a52:	2201      	movs	r2, #1
 8000a54:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start_IT ( &htim14 ) ;
 8000a56:	4b1a      	ldr	r3, [pc, #104]	; (8000ac0 <send_at_command_2_swarm+0xa8>)
 8000a58:	0018      	movs	r0, r3
 8000a5a:	f002 fa37 	bl	8002ecc <HAL_TIM_Base_Start_IT>
	HAL_UART_Transmit ( SWARM_UART_HANDLER , (uint8_t*) swarm_uart_tx_buff ,  strlen ( (char*) swarm_uart_tx_buff ) , SWARM_UART_UART_TX_TIMEOUT ) ;
 8000a5e:	4b16      	ldr	r3, [pc, #88]	; (8000ab8 <send_at_command_2_swarm+0xa0>)
 8000a60:	0018      	movs	r0, r3
 8000a62:	f7ff fb4f 	bl	8000104 <strlen>
 8000a66:	0003      	movs	r3, r0
 8000a68:	b29a      	uxth	r2, r3
 8000a6a:	4913      	ldr	r1, [pc, #76]	; (8000ab8 <send_at_command_2_swarm+0xa0>)
 8000a6c:	4815      	ldr	r0, [pc, #84]	; (8000ac4 <send_at_command_2_swarm+0xac>)
 8000a6e:	2364      	movs	r3, #100	; 0x64
 8000a70:	f002 fce4 	bl	800343c <HAL_UART_Transmit>
	while ( tim14_on )
 8000a74:	e011      	b.n	8000a9a <send_at_command_2_swarm+0x82>
		if ( strncmp ( (char*) swarm_uart_rx_buff , answer , strlen ( answer ) ) == 0 )
 8000a76:	68bb      	ldr	r3, [r7, #8]
 8000a78:	0018      	movs	r0, r3
 8000a7a:	f7ff fb43 	bl	8000104 <strlen>
 8000a7e:	0002      	movs	r2, r0
 8000a80:	68b9      	ldr	r1, [r7, #8]
 8000a82:	4b11      	ldr	r3, [pc, #68]	; (8000ac8 <send_at_command_2_swarm+0xb0>)
 8000a84:	0018      	movs	r0, r3
 8000a86:	f004 fa8a 	bl	8004f9e <strncmp>
 8000a8a:	1e03      	subs	r3, r0, #0
 8000a8c:	d105      	bne.n	8000a9a <send_at_command_2_swarm+0x82>
		{
			swarm_checklist = step ;
 8000a8e:	1dbb      	adds	r3, r7, #6
 8000a90:	881b      	ldrh	r3, [r3, #0]
 8000a92:	b2da      	uxtb	r2, r3
 8000a94:	4b0d      	ldr	r3, [pc, #52]	; (8000acc <send_at_command_2_swarm+0xb4>)
 8000a96:	701a      	strb	r2, [r3, #0]
			break ;
 8000a98:	e003      	b.n	8000aa2 <send_at_command_2_swarm+0x8a>
	while ( tim14_on )
 8000a9a:	4b08      	ldr	r3, [pc, #32]	; (8000abc <send_at_command_2_swarm+0xa4>)
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d1e9      	bne.n	8000a76 <send_at_command_2_swarm+0x5e>
		}
	clean_array ( swarm_uart_tx_buff , SWARM_UART_TX_MAX_BUFF_SIZE ) ;
 8000aa2:	4b05      	ldr	r3, [pc, #20]	; (8000ab8 <send_at_command_2_swarm+0xa0>)
 8000aa4:	21fa      	movs	r1, #250	; 0xfa
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	f000 f812 	bl	8000ad0 <clean_array>
}
 8000aac:	46c0      	nop			; (mov r8, r8)
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	b006      	add	sp, #24
 8000ab2:	bdb0      	pop	{r4, r5, r7, pc}
 8000ab4:	08006414 	.word	0x08006414
 8000ab8:	200002f8 	.word	0x200002f8
 8000abc:	200003f2 	.word	0x200003f2
 8000ac0:	200000c0 	.word	0x200000c0
 8000ac4:	2000010c 	.word	0x2000010c
 8000ac8:	200001fc 	.word	0x200001fc
 8000acc:	200003f3 	.word	0x200003f3

08000ad0 <clean_array>:

void clean_array ( char* array , uint16_t array_max_size )
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	000a      	movs	r2, r1
 8000ada:	1cbb      	adds	r3, r7, #2
 8000adc:	801a      	strh	r2, [r3, #0]
	uint16_t i ;
	for ( i = 0 ; i < array_max_size ; i++ )
 8000ade:	230e      	movs	r3, #14
 8000ae0:	18fb      	adds	r3, r7, r3
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	801a      	strh	r2, [r3, #0]
 8000ae6:	e00b      	b.n	8000b00 <clean_array+0x30>
		array[i] = 0 ;
 8000ae8:	210e      	movs	r1, #14
 8000aea:	187b      	adds	r3, r7, r1
 8000aec:	881b      	ldrh	r3, [r3, #0]
 8000aee:	687a      	ldr	r2, [r7, #4]
 8000af0:	18d3      	adds	r3, r2, r3
 8000af2:	2200      	movs	r2, #0
 8000af4:	701a      	strb	r2, [r3, #0]
	for ( i = 0 ; i < array_max_size ; i++ )
 8000af6:	187b      	adds	r3, r7, r1
 8000af8:	881a      	ldrh	r2, [r3, #0]
 8000afa:	187b      	adds	r3, r7, r1
 8000afc:	3201      	adds	r2, #1
 8000afe:	801a      	strh	r2, [r3, #0]
 8000b00:	230e      	movs	r3, #14
 8000b02:	18fa      	adds	r2, r7, r3
 8000b04:	1cbb      	adds	r3, r7, #2
 8000b06:	8812      	ldrh	r2, [r2, #0]
 8000b08:	881b      	ldrh	r3, [r3, #0]
 8000b0a:	429a      	cmp	r2, r3
 8000b0c:	d3ec      	bcc.n	8000ae8 <clean_array+0x18>
}
 8000b0e:	46c0      	nop			; (mov r8, r8)
 8000b10:	46c0      	nop			; (mov r8, r8)
 8000b12:	46bd      	mov	sp, r7
 8000b14:	b004      	add	sp, #16
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <nmea_checksum>:

uint8_t nmea_checksum ( const char *message , size_t len )
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	6039      	str	r1, [r7, #0]
	size_t i = 0 ;
 8000b22:	2300      	movs	r3, #0
 8000b24:	60fb      	str	r3, [r7, #12]
	uint8_t cs ;
	if ( message [0] == '$' )
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	2b24      	cmp	r3, #36	; 0x24
 8000b2c:	d102      	bne.n	8000b34 <nmea_checksum+0x1c>
		i++ ;
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	3301      	adds	r3, #1
 8000b32:	60fb      	str	r3, [r7, #12]
	for ( cs = 0 ; ( i < len ) && message [i] ; i++ )
 8000b34:	230b      	movs	r3, #11
 8000b36:	18fb      	adds	r3, r7, r3
 8000b38:	2200      	movs	r2, #0
 8000b3a:	701a      	strb	r2, [r3, #0]
 8000b3c:	e00c      	b.n	8000b58 <nmea_checksum+0x40>
		cs ^= ( (uint8_t) message [i] ) ;
 8000b3e:	687a      	ldr	r2, [r7, #4]
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	18d3      	adds	r3, r2, r3
 8000b44:	7819      	ldrb	r1, [r3, #0]
 8000b46:	220b      	movs	r2, #11
 8000b48:	18bb      	adds	r3, r7, r2
 8000b4a:	18ba      	adds	r2, r7, r2
 8000b4c:	7812      	ldrb	r2, [r2, #0]
 8000b4e:	404a      	eors	r2, r1
 8000b50:	701a      	strb	r2, [r3, #0]
	for ( cs = 0 ; ( i < len ) && message [i] ; i++ )
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	3301      	adds	r3, #1
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68fa      	ldr	r2, [r7, #12]
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d205      	bcs.n	8000b6c <nmea_checksum+0x54>
 8000b60:	687a      	ldr	r2, [r7, #4]
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	18d3      	adds	r3, r2, r3
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d1e8      	bne.n	8000b3e <nmea_checksum+0x26>
	return cs;
 8000b6c:	230b      	movs	r3, #11
 8000b6e:	18fb      	adds	r3, r7, r3
 8000b70:	781b      	ldrb	r3, [r3, #0]
}
 8000b72:	0018      	movs	r0, r3
 8000b74:	46bd      	mov	sp, r7
 8000b76:	b004      	add	sp, #16
 8000b78:	bd80      	pop	{r7, pc}
	...

08000b7c <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback ( UART_HandleTypeDef *huart , uint16_t Size )
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	000a      	movs	r2, r1
 8000b86:	1cbb      	adds	r3, r7, #2
 8000b88:	801a      	strh	r2, [r3, #0]
	const char* z = 0 ;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60fb      	str	r3, [r7, #12]
    if ( huart->Instance == USART1 )
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a0f      	ldr	r2, [pc, #60]	; (8000bd0 <HAL_UARTEx_RxEventCallback+0x54>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d117      	bne.n	8000bc8 <HAL_UARTEx_RxEventCallback+0x4c>
    {
    	if ( swarm_uart_rx_buff[0] != 0 ) // to avoid doublet because of 2 INTs
 8000b98:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <HAL_UARTEx_RxEventCallback+0x58>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d005      	beq.n	8000bac <HAL_UARTEx_RxEventCallback+0x30>
    		strcat ( (char *) swarm_uart_rx_buff , z ) ; // to avoid debris after '\n' of original message
 8000ba0:	68fa      	ldr	r2, [r7, #12]
 8000ba2:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <HAL_UARTEx_RxEventCallback+0x58>)
 8000ba4:	0011      	movs	r1, r2
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	f004 f9ec 	bl	8004f84 <strcat>
    	HAL_UARTEx_ReceiveToIdle_DMA ( SWARM_UART_HANDLER , (uint8_t *) swarm_uart_rx_buff , SWARM_UART_RX_MAX_BUFF_SIZE ) ;
 8000bac:	4909      	ldr	r1, [pc, #36]	; (8000bd4 <HAL_UARTEx_RxEventCallback+0x58>)
 8000bae:	4b0a      	ldr	r3, [pc, #40]	; (8000bd8 <HAL_UARTEx_RxEventCallback+0x5c>)
 8000bb0:	22fa      	movs	r2, #250	; 0xfa
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	f003 ffc6 	bl	8004b44 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT ( &hdma_usart1_rx, DMA_IT_HT ) ; //Disable Half Transfer interrupt.
 8000bb8:	4b08      	ldr	r3, [pc, #32]	; (8000bdc <HAL_UARTEx_RxEventCallback+0x60>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	4b07      	ldr	r3, [pc, #28]	; (8000bdc <HAL_UARTEx_RxEventCallback+0x60>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	2104      	movs	r1, #4
 8000bc4:	438a      	bics	r2, r1
 8000bc6:	601a      	str	r2, [r3, #0]
    }
}
 8000bc8:	46c0      	nop			; (mov r8, r8)
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	b004      	add	sp, #16
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40013800 	.word	0x40013800
 8000bd4:	200001fc 	.word	0x200001fc
 8000bd8:	2000010c 	.word	0x2000010c
 8000bdc:	200001a0 	.word	0x200001a0

08000be0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
	if ( htim->Instance == TIM14 )
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a06      	ldr	r2, [pc, #24]	; (8000c08 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d106      	bne.n	8000c00 <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		tim14_on = 0 ;
 8000bf2:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT ( &htim14 ) ;
 8000bf8:	4b05      	ldr	r3, [pc, #20]	; (8000c10 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f002 f9ba 	bl	8002f74 <HAL_TIM_Base_Stop_IT>
	}
}
 8000c00:	46c0      	nop			; (mov r8, r8)
 8000c02:	46bd      	mov	sp, r7
 8000c04:	b002      	add	sp, #8
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	40002000 	.word	0x40002000
 8000c0c:	200003f2 	.word	0x200003f2
 8000c10:	200000c0 	.word	0x200000c0

08000c14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c18:	b672      	cpsid	i
}
 8000c1a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c1c:	e7fe      	b.n	8000c1c <Error_Handler+0x8>
	...

08000c20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c26:	4b0f      	ldr	r3, [pc, #60]	; (8000c64 <HAL_MspInit+0x44>)
 8000c28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c2a:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <HAL_MspInit+0x44>)
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	430a      	orrs	r2, r1
 8000c30:	641a      	str	r2, [r3, #64]	; 0x40
 8000c32:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <HAL_MspInit+0x44>)
 8000c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c36:	2201      	movs	r2, #1
 8000c38:	4013      	ands	r3, r2
 8000c3a:	607b      	str	r3, [r7, #4]
 8000c3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c3e:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <HAL_MspInit+0x44>)
 8000c40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c42:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <HAL_MspInit+0x44>)
 8000c44:	2180      	movs	r1, #128	; 0x80
 8000c46:	0549      	lsls	r1, r1, #21
 8000c48:	430a      	orrs	r2, r1
 8000c4a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c4c:	4b05      	ldr	r3, [pc, #20]	; (8000c64 <HAL_MspInit+0x44>)
 8000c4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c50:	2380      	movs	r3, #128	; 0x80
 8000c52:	055b      	lsls	r3, r3, #21
 8000c54:	4013      	ands	r3, r2
 8000c56:	603b      	str	r3, [r7, #0]
 8000c58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c5a:	46c0      	nop			; (mov r8, r8)
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	b002      	add	sp, #8
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	46c0      	nop			; (mov r8, r8)
 8000c64:	40021000 	.word	0x40021000

08000c68 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000c68:	b590      	push	{r4, r7, lr}
 8000c6a:	b08f      	sub	sp, #60	; 0x3c
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c70:	2410      	movs	r4, #16
 8000c72:	193b      	adds	r3, r7, r4
 8000c74:	0018      	movs	r0, r3
 8000c76:	2328      	movs	r3, #40	; 0x28
 8000c78:	001a      	movs	r2, r3
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	f004 f866 	bl	8004d4c <memset>
  if(hrtc->Instance==RTC)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a19      	ldr	r2, [pc, #100]	; (8000cec <HAL_RTC_MspInit+0x84>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d12c      	bne.n	8000ce4 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000c8a:	193b      	adds	r3, r7, r4
 8000c8c:	2280      	movs	r2, #128	; 0x80
 8000c8e:	0292      	lsls	r2, r2, #10
 8000c90:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000c92:	193b      	adds	r3, r7, r4
 8000c94:	2280      	movs	r2, #128	; 0x80
 8000c96:	0092      	lsls	r2, r2, #2
 8000c98:	625a      	str	r2, [r3, #36]	; 0x24

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c9a:	193b      	adds	r3, r7, r4
 8000c9c:	0018      	movs	r0, r3
 8000c9e:	f001 fd33 	bl	8002708 <HAL_RCCEx_PeriphCLKConfig>
 8000ca2:	1e03      	subs	r3, r0, #0
 8000ca4:	d001      	beq.n	8000caa <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000ca6:	f7ff ffb5 	bl	8000c14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000caa:	4b11      	ldr	r3, [pc, #68]	; (8000cf0 <HAL_RTC_MspInit+0x88>)
 8000cac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000cae:	4b10      	ldr	r3, [pc, #64]	; (8000cf0 <HAL_RTC_MspInit+0x88>)
 8000cb0:	2180      	movs	r1, #128	; 0x80
 8000cb2:	0209      	lsls	r1, r1, #8
 8000cb4:	430a      	orrs	r2, r1
 8000cb6:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000cb8:	4b0d      	ldr	r3, [pc, #52]	; (8000cf0 <HAL_RTC_MspInit+0x88>)
 8000cba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000cbc:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <HAL_RTC_MspInit+0x88>)
 8000cbe:	2180      	movs	r1, #128	; 0x80
 8000cc0:	00c9      	lsls	r1, r1, #3
 8000cc2:	430a      	orrs	r2, r1
 8000cc4:	63da      	str	r2, [r3, #60]	; 0x3c
 8000cc6:	4b0a      	ldr	r3, [pc, #40]	; (8000cf0 <HAL_RTC_MspInit+0x88>)
 8000cc8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000cca:	2380      	movs	r3, #128	; 0x80
 8000ccc:	00db      	lsls	r3, r3, #3
 8000cce:	4013      	ands	r3, r2
 8000cd0:	60fb      	str	r3, [r7, #12]
 8000cd2:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	2002      	movs	r0, #2
 8000cda:	f000 fb33 	bl	8001344 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8000cde:	2002      	movs	r0, #2
 8000ce0:	f000 fb45 	bl	800136e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000ce4:	46c0      	nop			; (mov r8, r8)
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	b00f      	add	sp, #60	; 0x3c
 8000cea:	bd90      	pop	{r4, r7, pc}
 8000cec:	40002800 	.word	0x40002800
 8000cf0:	40021000 	.word	0x40021000

08000cf4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a0e      	ldr	r2, [pc, #56]	; (8000d3c <HAL_TIM_Base_MspInit+0x48>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d115      	bne.n	8000d32 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000d06:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <HAL_TIM_Base_MspInit+0x4c>)
 8000d08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d0a:	4b0d      	ldr	r3, [pc, #52]	; (8000d40 <HAL_TIM_Base_MspInit+0x4c>)
 8000d0c:	2180      	movs	r1, #128	; 0x80
 8000d0e:	0209      	lsls	r1, r1, #8
 8000d10:	430a      	orrs	r2, r1
 8000d12:	641a      	str	r2, [r3, #64]	; 0x40
 8000d14:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <HAL_TIM_Base_MspInit+0x4c>)
 8000d16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d18:	2380      	movs	r3, #128	; 0x80
 8000d1a:	021b      	lsls	r3, r3, #8
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8000d22:	2200      	movs	r2, #0
 8000d24:	2100      	movs	r1, #0
 8000d26:	2013      	movs	r0, #19
 8000d28:	f000 fb0c 	bl	8001344 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8000d2c:	2013      	movs	r0, #19
 8000d2e:	f000 fb1e 	bl	800136e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000d32:	46c0      	nop			; (mov r8, r8)
 8000d34:	46bd      	mov	sp, r7
 8000d36:	b004      	add	sp, #16
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	46c0      	nop			; (mov r8, r8)
 8000d3c:	40002000 	.word	0x40002000
 8000d40:	40021000 	.word	0x40021000

08000d44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d44:	b590      	push	{r4, r7, lr}
 8000d46:	b095      	sub	sp, #84	; 0x54
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4c:	233c      	movs	r3, #60	; 0x3c
 8000d4e:	18fb      	adds	r3, r7, r3
 8000d50:	0018      	movs	r0, r3
 8000d52:	2314      	movs	r3, #20
 8000d54:	001a      	movs	r2, r3
 8000d56:	2100      	movs	r1, #0
 8000d58:	f003 fff8 	bl	8004d4c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d5c:	2414      	movs	r4, #20
 8000d5e:	193b      	adds	r3, r7, r4
 8000d60:	0018      	movs	r0, r3
 8000d62:	2328      	movs	r3, #40	; 0x28
 8000d64:	001a      	movs	r2, r3
 8000d66:	2100      	movs	r1, #0
 8000d68:	f003 fff0 	bl	8004d4c <memset>
  if(huart->Instance==USART1)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a3c      	ldr	r2, [pc, #240]	; (8000e64 <HAL_UART_MspInit+0x120>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d171      	bne.n	8000e5a <HAL_UART_MspInit+0x116>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d76:	193b      	adds	r3, r7, r4
 8000d78:	2201      	movs	r2, #1
 8000d7a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000d7c:	193b      	adds	r3, r7, r4
 8000d7e:	2200      	movs	r2, #0
 8000d80:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d82:	193b      	adds	r3, r7, r4
 8000d84:	0018      	movs	r0, r3
 8000d86:	f001 fcbf 	bl	8002708 <HAL_RCCEx_PeriphCLKConfig>
 8000d8a:	1e03      	subs	r3, r0, #0
 8000d8c:	d001      	beq.n	8000d92 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d8e:	f7ff ff41 	bl	8000c14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d92:	4b35      	ldr	r3, [pc, #212]	; (8000e68 <HAL_UART_MspInit+0x124>)
 8000d94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d96:	4b34      	ldr	r3, [pc, #208]	; (8000e68 <HAL_UART_MspInit+0x124>)
 8000d98:	2180      	movs	r1, #128	; 0x80
 8000d9a:	01c9      	lsls	r1, r1, #7
 8000d9c:	430a      	orrs	r2, r1
 8000d9e:	641a      	str	r2, [r3, #64]	; 0x40
 8000da0:	4b31      	ldr	r3, [pc, #196]	; (8000e68 <HAL_UART_MspInit+0x124>)
 8000da2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000da4:	2380      	movs	r3, #128	; 0x80
 8000da6:	01db      	lsls	r3, r3, #7
 8000da8:	4013      	ands	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]
 8000dac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dae:	4b2e      	ldr	r3, [pc, #184]	; (8000e68 <HAL_UART_MspInit+0x124>)
 8000db0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000db2:	4b2d      	ldr	r3, [pc, #180]	; (8000e68 <HAL_UART_MspInit+0x124>)
 8000db4:	2101      	movs	r1, #1
 8000db6:	430a      	orrs	r2, r1
 8000db8:	635a      	str	r2, [r3, #52]	; 0x34
 8000dba:	4b2b      	ldr	r3, [pc, #172]	; (8000e68 <HAL_UART_MspInit+0x124>)
 8000dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000dc6:	213c      	movs	r1, #60	; 0x3c
 8000dc8:	187b      	adds	r3, r7, r1
 8000dca:	22c0      	movs	r2, #192	; 0xc0
 8000dcc:	00d2      	lsls	r2, r2, #3
 8000dce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd0:	187b      	adds	r3, r7, r1
 8000dd2:	2202      	movs	r2, #2
 8000dd4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	187b      	adds	r3, r7, r1
 8000dd8:	2200      	movs	r2, #0
 8000dda:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ddc:	187b      	adds	r3, r7, r1
 8000dde:	2200      	movs	r2, #0
 8000de0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000de2:	187b      	adds	r3, r7, r1
 8000de4:	2201      	movs	r2, #1
 8000de6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de8:	187a      	adds	r2, r7, r1
 8000dea:	23a0      	movs	r3, #160	; 0xa0
 8000dec:	05db      	lsls	r3, r3, #23
 8000dee:	0011      	movs	r1, r2
 8000df0:	0018      	movs	r0, r3
 8000df2:	f000 fdf7 	bl	80019e4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8000df6:	4b1d      	ldr	r3, [pc, #116]	; (8000e6c <HAL_UART_MspInit+0x128>)
 8000df8:	4a1d      	ldr	r2, [pc, #116]	; (8000e70 <HAL_UART_MspInit+0x12c>)
 8000dfa:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8000dfc:	4b1b      	ldr	r3, [pc, #108]	; (8000e6c <HAL_UART_MspInit+0x128>)
 8000dfe:	2232      	movs	r2, #50	; 0x32
 8000e00:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e02:	4b1a      	ldr	r3, [pc, #104]	; (8000e6c <HAL_UART_MspInit+0x128>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e08:	4b18      	ldr	r3, [pc, #96]	; (8000e6c <HAL_UART_MspInit+0x128>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e0e:	4b17      	ldr	r3, [pc, #92]	; (8000e6c <HAL_UART_MspInit+0x128>)
 8000e10:	2280      	movs	r2, #128	; 0x80
 8000e12:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e14:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <HAL_UART_MspInit+0x128>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e1a:	4b14      	ldr	r3, [pc, #80]	; (8000e6c <HAL_UART_MspInit+0x128>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000e20:	4b12      	ldr	r3, [pc, #72]	; (8000e6c <HAL_UART_MspInit+0x128>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e26:	4b11      	ldr	r3, [pc, #68]	; (8000e6c <HAL_UART_MspInit+0x128>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000e2c:	4b0f      	ldr	r3, [pc, #60]	; (8000e6c <HAL_UART_MspInit+0x128>)
 8000e2e:	0018      	movs	r0, r3
 8000e30:	f000 faba 	bl	80013a8 <HAL_DMA_Init>
 8000e34:	1e03      	subs	r3, r0, #0
 8000e36:	d001      	beq.n	8000e3c <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 8000e38:	f7ff feec 	bl	8000c14 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2180      	movs	r1, #128	; 0x80
 8000e40:	4a0a      	ldr	r2, [pc, #40]	; (8000e6c <HAL_UART_MspInit+0x128>)
 8000e42:	505a      	str	r2, [r3, r1]
 8000e44:	4b09      	ldr	r3, [pc, #36]	; (8000e6c <HAL_UART_MspInit+0x128>)
 8000e46:	687a      	ldr	r2, [r7, #4]
 8000e48:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	201b      	movs	r0, #27
 8000e50:	f000 fa78 	bl	8001344 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e54:	201b      	movs	r0, #27
 8000e56:	f000 fa8a 	bl	800136e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e5a:	46c0      	nop			; (mov r8, r8)
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	b015      	add	sp, #84	; 0x54
 8000e60:	bd90      	pop	{r4, r7, pc}
 8000e62:	46c0      	nop			; (mov r8, r8)
 8000e64:	40013800 	.word	0x40013800
 8000e68:	40021000 	.word	0x40021000
 8000e6c:	200001a0 	.word	0x200001a0
 8000e70:	40020008 	.word	0x40020008

08000e74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e78:	e7fe      	b.n	8000e78 <NMI_Handler+0x4>

08000e7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e7e:	e7fe      	b.n	8000e7e <HardFault_Handler+0x4>

08000e80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e84:	46c0      	nop			; (mov r8, r8)
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e8e:	46c0      	nop			; (mov r8, r8)
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e98:	f000 f98c 	bl	80011b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e9c:	46c0      	nop			; (mov r8, r8)
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
	...

08000ea4 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8000ea8:	4b03      	ldr	r3, [pc, #12]	; (8000eb8 <RTC_TAMP_IRQHandler+0x14>)
 8000eaa:	0018      	movs	r0, r3
 8000eac:	f001 ff90 	bl	8002dd0 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8000eb0:	46c0      	nop			; (mov r8, r8)
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	46c0      	nop			; (mov r8, r8)
 8000eb8:	20000094 	.word	0x20000094

08000ebc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000ec0:	4b03      	ldr	r3, [pc, #12]	; (8000ed0 <DMA1_Channel1_IRQHandler+0x14>)
 8000ec2:	0018      	movs	r0, r3
 8000ec4:	f000 fc4c 	bl	8001760 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000ec8:	46c0      	nop			; (mov r8, r8)
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	46c0      	nop			; (mov r8, r8)
 8000ed0:	200001a0 	.word	0x200001a0

08000ed4 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000ed8:	4b03      	ldr	r3, [pc, #12]	; (8000ee8 <TIM14_IRQHandler+0x14>)
 8000eda:	0018      	movs	r0, r3
 8000edc:	f002 f878 	bl	8002fd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8000ee0:	46c0      	nop			; (mov r8, r8)
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	46c0      	nop			; (mov r8, r8)
 8000ee8:	200000c0 	.word	0x200000c0

08000eec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ef0:	4b03      	ldr	r3, [pc, #12]	; (8000f00 <USART1_IRQHandler+0x14>)
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	f002 fb3e 	bl	8003574 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ef8:	46c0      	nop			; (mov r8, r8)
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	46c0      	nop			; (mov r8, r8)
 8000f00:	2000010c 	.word	0x2000010c

08000f04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
	return 1;
 8000f08:	2301      	movs	r3, #1
}
 8000f0a:	0018      	movs	r0, r3
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <_kill>:

int _kill(int pid, int sig)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000f1a:	f003 fed9 	bl	8004cd0 <__errno>
 8000f1e:	0003      	movs	r3, r0
 8000f20:	2216      	movs	r2, #22
 8000f22:	601a      	str	r2, [r3, #0]
	return -1;
 8000f24:	2301      	movs	r3, #1
 8000f26:	425b      	negs	r3, r3
}
 8000f28:	0018      	movs	r0, r3
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	b002      	add	sp, #8
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <_exit>:

void _exit (int status)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000f38:	2301      	movs	r3, #1
 8000f3a:	425a      	negs	r2, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	0011      	movs	r1, r2
 8000f40:	0018      	movs	r0, r3
 8000f42:	f7ff ffe5 	bl	8000f10 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000f46:	e7fe      	b.n	8000f46 <_exit+0x16>

08000f48 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f54:	2300      	movs	r3, #0
 8000f56:	617b      	str	r3, [r7, #20]
 8000f58:	e00a      	b.n	8000f70 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f5a:	e000      	b.n	8000f5e <_read+0x16>
 8000f5c:	bf00      	nop
 8000f5e:	0001      	movs	r1, r0
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	1c5a      	adds	r2, r3, #1
 8000f64:	60ba      	str	r2, [r7, #8]
 8000f66:	b2ca      	uxtb	r2, r1
 8000f68:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	617b      	str	r3, [r7, #20]
 8000f70:	697a      	ldr	r2, [r7, #20]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	dbf0      	blt.n	8000f5a <_read+0x12>
	}

return len;
 8000f78:	687b      	ldr	r3, [r7, #4]
}
 8000f7a:	0018      	movs	r0, r3
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	b006      	add	sp, #24
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b086      	sub	sp, #24
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	60f8      	str	r0, [r7, #12]
 8000f8a:	60b9      	str	r1, [r7, #8]
 8000f8c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f8e:	2300      	movs	r3, #0
 8000f90:	617b      	str	r3, [r7, #20]
 8000f92:	e009      	b.n	8000fa8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	1c5a      	adds	r2, r3, #1
 8000f98:	60ba      	str	r2, [r7, #8]
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	e000      	b.n	8000fa2 <_write+0x20>
 8000fa0:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	617b      	str	r3, [r7, #20]
 8000fa8:	697a      	ldr	r2, [r7, #20]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	dbf1      	blt.n	8000f94 <_write+0x12>
	}
	return len;
 8000fb0:	687b      	ldr	r3, [r7, #4]
}
 8000fb2:	0018      	movs	r0, r3
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	b006      	add	sp, #24
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <_close>:

int _close(int file)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b082      	sub	sp, #8
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
	return -1;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	425b      	negs	r3, r3
}
 8000fc6:	0018      	movs	r0, r3
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	b002      	add	sp, #8
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b082      	sub	sp, #8
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
 8000fd6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	2280      	movs	r2, #128	; 0x80
 8000fdc:	0192      	lsls	r2, r2, #6
 8000fde:	605a      	str	r2, [r3, #4]
	return 0;
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	b002      	add	sp, #8
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <_isatty>:

int _isatty(int file)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b082      	sub	sp, #8
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
	return 1;
 8000ff2:	2301      	movs	r3, #1
}
 8000ff4:	0018      	movs	r0, r3
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	b002      	add	sp, #8
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
	return 0;
 8001008:	2300      	movs	r3, #0
}
 800100a:	0018      	movs	r0, r3
 800100c:	46bd      	mov	sp, r7
 800100e:	b004      	add	sp, #16
 8001010:	bd80      	pop	{r7, pc}
	...

08001014 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800101c:	4a14      	ldr	r2, [pc, #80]	; (8001070 <_sbrk+0x5c>)
 800101e:	4b15      	ldr	r3, [pc, #84]	; (8001074 <_sbrk+0x60>)
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001028:	4b13      	ldr	r3, [pc, #76]	; (8001078 <_sbrk+0x64>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d102      	bne.n	8001036 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001030:	4b11      	ldr	r3, [pc, #68]	; (8001078 <_sbrk+0x64>)
 8001032:	4a12      	ldr	r2, [pc, #72]	; (800107c <_sbrk+0x68>)
 8001034:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001036:	4b10      	ldr	r3, [pc, #64]	; (8001078 <_sbrk+0x64>)
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	18d3      	adds	r3, r2, r3
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	429a      	cmp	r2, r3
 8001042:	d207      	bcs.n	8001054 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001044:	f003 fe44 	bl	8004cd0 <__errno>
 8001048:	0003      	movs	r3, r0
 800104a:	220c      	movs	r2, #12
 800104c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800104e:	2301      	movs	r3, #1
 8001050:	425b      	negs	r3, r3
 8001052:	e009      	b.n	8001068 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001054:	4b08      	ldr	r3, [pc, #32]	; (8001078 <_sbrk+0x64>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800105a:	4b07      	ldr	r3, [pc, #28]	; (8001078 <_sbrk+0x64>)
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	18d2      	adds	r2, r2, r3
 8001062:	4b05      	ldr	r3, [pc, #20]	; (8001078 <_sbrk+0x64>)
 8001064:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001066:	68fb      	ldr	r3, [r7, #12]
}
 8001068:	0018      	movs	r0, r3
 800106a:	46bd      	mov	sp, r7
 800106c:	b006      	add	sp, #24
 800106e:	bd80      	pop	{r7, pc}
 8001070:	20002000 	.word	0x20002000
 8001074:	00000400 	.word	0x00000400
 8001078:	200003f8 	.word	0x200003f8
 800107c:	20000410 	.word	0x20000410

08001080 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001084:	46c0      	nop			; (mov r8, r8)
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
	...

0800108c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800108c:	480d      	ldr	r0, [pc, #52]	; (80010c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800108e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001090:	f7ff fff6 	bl	8001080 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001094:	480c      	ldr	r0, [pc, #48]	; (80010c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001096:	490d      	ldr	r1, [pc, #52]	; (80010cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001098:	4a0d      	ldr	r2, [pc, #52]	; (80010d0 <LoopForever+0xe>)
  movs r3, #0
 800109a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800109c:	e002      	b.n	80010a4 <LoopCopyDataInit>

0800109e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800109e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010a2:	3304      	adds	r3, #4

080010a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010a8:	d3f9      	bcc.n	800109e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010aa:	4a0a      	ldr	r2, [pc, #40]	; (80010d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010ac:	4c0a      	ldr	r4, [pc, #40]	; (80010d8 <LoopForever+0x16>)
  movs r3, #0
 80010ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010b0:	e001      	b.n	80010b6 <LoopFillZerobss>

080010b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010b4:	3204      	adds	r2, #4

080010b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010b8:	d3fb      	bcc.n	80010b2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80010ba:	f003 fe0f 	bl	8004cdc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80010be:	f7ff fabf 	bl	8000640 <main>

080010c2 <LoopForever>:

LoopForever:
  b LoopForever
 80010c2:	e7fe      	b.n	80010c2 <LoopForever>
  ldr   r0, =_estack
 80010c4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80010c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010cc:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80010d0:	08006700 	.word	0x08006700
  ldr r2, =_sbss
 80010d4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80010d8:	20000410 	.word	0x20000410

080010dc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010dc:	e7fe      	b.n	80010dc <ADC1_IRQHandler>
	...

080010e0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010e6:	1dfb      	adds	r3, r7, #7
 80010e8:	2200      	movs	r2, #0
 80010ea:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010ec:	4b0b      	ldr	r3, [pc, #44]	; (800111c <HAL_Init+0x3c>)
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	4b0a      	ldr	r3, [pc, #40]	; (800111c <HAL_Init+0x3c>)
 80010f2:	2180      	movs	r1, #128	; 0x80
 80010f4:	0049      	lsls	r1, r1, #1
 80010f6:	430a      	orrs	r2, r1
 80010f8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010fa:	2000      	movs	r0, #0
 80010fc:	f000 f810 	bl	8001120 <HAL_InitTick>
 8001100:	1e03      	subs	r3, r0, #0
 8001102:	d003      	beq.n	800110c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001104:	1dfb      	adds	r3, r7, #7
 8001106:	2201      	movs	r2, #1
 8001108:	701a      	strb	r2, [r3, #0]
 800110a:	e001      	b.n	8001110 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800110c:	f7ff fd88 	bl	8000c20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001110:	1dfb      	adds	r3, r7, #7
 8001112:	781b      	ldrb	r3, [r3, #0]
}
 8001114:	0018      	movs	r0, r3
 8001116:	46bd      	mov	sp, r7
 8001118:	b002      	add	sp, #8
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40022000 	.word	0x40022000

08001120 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001120:	b590      	push	{r4, r7, lr}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001128:	230f      	movs	r3, #15
 800112a:	18fb      	adds	r3, r7, r3
 800112c:	2200      	movs	r2, #0
 800112e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001130:	4b1d      	ldr	r3, [pc, #116]	; (80011a8 <HAL_InitTick+0x88>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d02b      	beq.n	8001190 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001138:	4b1c      	ldr	r3, [pc, #112]	; (80011ac <HAL_InitTick+0x8c>)
 800113a:	681c      	ldr	r4, [r3, #0]
 800113c:	4b1a      	ldr	r3, [pc, #104]	; (80011a8 <HAL_InitTick+0x88>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	0019      	movs	r1, r3
 8001142:	23fa      	movs	r3, #250	; 0xfa
 8001144:	0098      	lsls	r0, r3, #2
 8001146:	f7fe ffef 	bl	8000128 <__udivsi3>
 800114a:	0003      	movs	r3, r0
 800114c:	0019      	movs	r1, r3
 800114e:	0020      	movs	r0, r4
 8001150:	f7fe ffea 	bl	8000128 <__udivsi3>
 8001154:	0003      	movs	r3, r0
 8001156:	0018      	movs	r0, r3
 8001158:	f000 f919 	bl	800138e <HAL_SYSTICK_Config>
 800115c:	1e03      	subs	r3, r0, #0
 800115e:	d112      	bne.n	8001186 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2b03      	cmp	r3, #3
 8001164:	d80a      	bhi.n	800117c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001166:	6879      	ldr	r1, [r7, #4]
 8001168:	2301      	movs	r3, #1
 800116a:	425b      	negs	r3, r3
 800116c:	2200      	movs	r2, #0
 800116e:	0018      	movs	r0, r3
 8001170:	f000 f8e8 	bl	8001344 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001174:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <HAL_InitTick+0x90>)
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	e00d      	b.n	8001198 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800117c:	230f      	movs	r3, #15
 800117e:	18fb      	adds	r3, r7, r3
 8001180:	2201      	movs	r2, #1
 8001182:	701a      	strb	r2, [r3, #0]
 8001184:	e008      	b.n	8001198 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001186:	230f      	movs	r3, #15
 8001188:	18fb      	adds	r3, r7, r3
 800118a:	2201      	movs	r2, #1
 800118c:	701a      	strb	r2, [r3, #0]
 800118e:	e003      	b.n	8001198 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001190:	230f      	movs	r3, #15
 8001192:	18fb      	adds	r3, r7, r3
 8001194:	2201      	movs	r2, #1
 8001196:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001198:	230f      	movs	r3, #15
 800119a:	18fb      	adds	r3, r7, r3
 800119c:	781b      	ldrb	r3, [r3, #0]
}
 800119e:	0018      	movs	r0, r3
 80011a0:	46bd      	mov	sp, r7
 80011a2:	b005      	add	sp, #20
 80011a4:	bd90      	pop	{r4, r7, pc}
 80011a6:	46c0      	nop			; (mov r8, r8)
 80011a8:	20000010 	.word	0x20000010
 80011ac:	20000008 	.word	0x20000008
 80011b0:	2000000c 	.word	0x2000000c

080011b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011b8:	4b05      	ldr	r3, [pc, #20]	; (80011d0 <HAL_IncTick+0x1c>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	001a      	movs	r2, r3
 80011be:	4b05      	ldr	r3, [pc, #20]	; (80011d4 <HAL_IncTick+0x20>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	18d2      	adds	r2, r2, r3
 80011c4:	4b03      	ldr	r3, [pc, #12]	; (80011d4 <HAL_IncTick+0x20>)
 80011c6:	601a      	str	r2, [r3, #0]
}
 80011c8:	46c0      	nop			; (mov r8, r8)
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	46c0      	nop			; (mov r8, r8)
 80011d0:	20000010 	.word	0x20000010
 80011d4:	200003fc 	.word	0x200003fc

080011d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  return uwTick;
 80011dc:	4b02      	ldr	r3, [pc, #8]	; (80011e8 <HAL_GetTick+0x10>)
 80011de:	681b      	ldr	r3, [r3, #0]
}
 80011e0:	0018      	movs	r0, r3
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	200003fc 	.word	0x200003fc

080011ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	0002      	movs	r2, r0
 80011f4:	1dfb      	adds	r3, r7, #7
 80011f6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80011f8:	1dfb      	adds	r3, r7, #7
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	2b7f      	cmp	r3, #127	; 0x7f
 80011fe:	d809      	bhi.n	8001214 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001200:	1dfb      	adds	r3, r7, #7
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	001a      	movs	r2, r3
 8001206:	231f      	movs	r3, #31
 8001208:	401a      	ands	r2, r3
 800120a:	4b04      	ldr	r3, [pc, #16]	; (800121c <__NVIC_EnableIRQ+0x30>)
 800120c:	2101      	movs	r1, #1
 800120e:	4091      	lsls	r1, r2
 8001210:	000a      	movs	r2, r1
 8001212:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001214:	46c0      	nop			; (mov r8, r8)
 8001216:	46bd      	mov	sp, r7
 8001218:	b002      	add	sp, #8
 800121a:	bd80      	pop	{r7, pc}
 800121c:	e000e100 	.word	0xe000e100

08001220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001220:	b590      	push	{r4, r7, lr}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	0002      	movs	r2, r0
 8001228:	6039      	str	r1, [r7, #0]
 800122a:	1dfb      	adds	r3, r7, #7
 800122c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800122e:	1dfb      	adds	r3, r7, #7
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	2b7f      	cmp	r3, #127	; 0x7f
 8001234:	d828      	bhi.n	8001288 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001236:	4a2f      	ldr	r2, [pc, #188]	; (80012f4 <__NVIC_SetPriority+0xd4>)
 8001238:	1dfb      	adds	r3, r7, #7
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	b25b      	sxtb	r3, r3
 800123e:	089b      	lsrs	r3, r3, #2
 8001240:	33c0      	adds	r3, #192	; 0xc0
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	589b      	ldr	r3, [r3, r2]
 8001246:	1dfa      	adds	r2, r7, #7
 8001248:	7812      	ldrb	r2, [r2, #0]
 800124a:	0011      	movs	r1, r2
 800124c:	2203      	movs	r2, #3
 800124e:	400a      	ands	r2, r1
 8001250:	00d2      	lsls	r2, r2, #3
 8001252:	21ff      	movs	r1, #255	; 0xff
 8001254:	4091      	lsls	r1, r2
 8001256:	000a      	movs	r2, r1
 8001258:	43d2      	mvns	r2, r2
 800125a:	401a      	ands	r2, r3
 800125c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	019b      	lsls	r3, r3, #6
 8001262:	22ff      	movs	r2, #255	; 0xff
 8001264:	401a      	ands	r2, r3
 8001266:	1dfb      	adds	r3, r7, #7
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	0018      	movs	r0, r3
 800126c:	2303      	movs	r3, #3
 800126e:	4003      	ands	r3, r0
 8001270:	00db      	lsls	r3, r3, #3
 8001272:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001274:	481f      	ldr	r0, [pc, #124]	; (80012f4 <__NVIC_SetPriority+0xd4>)
 8001276:	1dfb      	adds	r3, r7, #7
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	b25b      	sxtb	r3, r3
 800127c:	089b      	lsrs	r3, r3, #2
 800127e:	430a      	orrs	r2, r1
 8001280:	33c0      	adds	r3, #192	; 0xc0
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001286:	e031      	b.n	80012ec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001288:	4a1b      	ldr	r2, [pc, #108]	; (80012f8 <__NVIC_SetPriority+0xd8>)
 800128a:	1dfb      	adds	r3, r7, #7
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	0019      	movs	r1, r3
 8001290:	230f      	movs	r3, #15
 8001292:	400b      	ands	r3, r1
 8001294:	3b08      	subs	r3, #8
 8001296:	089b      	lsrs	r3, r3, #2
 8001298:	3306      	adds	r3, #6
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	18d3      	adds	r3, r2, r3
 800129e:	3304      	adds	r3, #4
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	1dfa      	adds	r2, r7, #7
 80012a4:	7812      	ldrb	r2, [r2, #0]
 80012a6:	0011      	movs	r1, r2
 80012a8:	2203      	movs	r2, #3
 80012aa:	400a      	ands	r2, r1
 80012ac:	00d2      	lsls	r2, r2, #3
 80012ae:	21ff      	movs	r1, #255	; 0xff
 80012b0:	4091      	lsls	r1, r2
 80012b2:	000a      	movs	r2, r1
 80012b4:	43d2      	mvns	r2, r2
 80012b6:	401a      	ands	r2, r3
 80012b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	019b      	lsls	r3, r3, #6
 80012be:	22ff      	movs	r2, #255	; 0xff
 80012c0:	401a      	ands	r2, r3
 80012c2:	1dfb      	adds	r3, r7, #7
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	0018      	movs	r0, r3
 80012c8:	2303      	movs	r3, #3
 80012ca:	4003      	ands	r3, r0
 80012cc:	00db      	lsls	r3, r3, #3
 80012ce:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012d0:	4809      	ldr	r0, [pc, #36]	; (80012f8 <__NVIC_SetPriority+0xd8>)
 80012d2:	1dfb      	adds	r3, r7, #7
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	001c      	movs	r4, r3
 80012d8:	230f      	movs	r3, #15
 80012da:	4023      	ands	r3, r4
 80012dc:	3b08      	subs	r3, #8
 80012de:	089b      	lsrs	r3, r3, #2
 80012e0:	430a      	orrs	r2, r1
 80012e2:	3306      	adds	r3, #6
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	18c3      	adds	r3, r0, r3
 80012e8:	3304      	adds	r3, #4
 80012ea:	601a      	str	r2, [r3, #0]
}
 80012ec:	46c0      	nop			; (mov r8, r8)
 80012ee:	46bd      	mov	sp, r7
 80012f0:	b003      	add	sp, #12
 80012f2:	bd90      	pop	{r4, r7, pc}
 80012f4:	e000e100 	.word	0xe000e100
 80012f8:	e000ed00 	.word	0xe000ed00

080012fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	1e5a      	subs	r2, r3, #1
 8001308:	2380      	movs	r3, #128	; 0x80
 800130a:	045b      	lsls	r3, r3, #17
 800130c:	429a      	cmp	r2, r3
 800130e:	d301      	bcc.n	8001314 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001310:	2301      	movs	r3, #1
 8001312:	e010      	b.n	8001336 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001314:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <SysTick_Config+0x44>)
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	3a01      	subs	r2, #1
 800131a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800131c:	2301      	movs	r3, #1
 800131e:	425b      	negs	r3, r3
 8001320:	2103      	movs	r1, #3
 8001322:	0018      	movs	r0, r3
 8001324:	f7ff ff7c 	bl	8001220 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001328:	4b05      	ldr	r3, [pc, #20]	; (8001340 <SysTick_Config+0x44>)
 800132a:	2200      	movs	r2, #0
 800132c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800132e:	4b04      	ldr	r3, [pc, #16]	; (8001340 <SysTick_Config+0x44>)
 8001330:	2207      	movs	r2, #7
 8001332:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001334:	2300      	movs	r3, #0
}
 8001336:	0018      	movs	r0, r3
 8001338:	46bd      	mov	sp, r7
 800133a:	b002      	add	sp, #8
 800133c:	bd80      	pop	{r7, pc}
 800133e:	46c0      	nop			; (mov r8, r8)
 8001340:	e000e010 	.word	0xe000e010

08001344 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	60b9      	str	r1, [r7, #8]
 800134c:	607a      	str	r2, [r7, #4]
 800134e:	210f      	movs	r1, #15
 8001350:	187b      	adds	r3, r7, r1
 8001352:	1c02      	adds	r2, r0, #0
 8001354:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001356:	68ba      	ldr	r2, [r7, #8]
 8001358:	187b      	adds	r3, r7, r1
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	b25b      	sxtb	r3, r3
 800135e:	0011      	movs	r1, r2
 8001360:	0018      	movs	r0, r3
 8001362:	f7ff ff5d 	bl	8001220 <__NVIC_SetPriority>
}
 8001366:	46c0      	nop			; (mov r8, r8)
 8001368:	46bd      	mov	sp, r7
 800136a:	b004      	add	sp, #16
 800136c:	bd80      	pop	{r7, pc}

0800136e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b082      	sub	sp, #8
 8001372:	af00      	add	r7, sp, #0
 8001374:	0002      	movs	r2, r0
 8001376:	1dfb      	adds	r3, r7, #7
 8001378:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800137a:	1dfb      	adds	r3, r7, #7
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	b25b      	sxtb	r3, r3
 8001380:	0018      	movs	r0, r3
 8001382:	f7ff ff33 	bl	80011ec <__NVIC_EnableIRQ>
}
 8001386:	46c0      	nop			; (mov r8, r8)
 8001388:	46bd      	mov	sp, r7
 800138a:	b002      	add	sp, #8
 800138c:	bd80      	pop	{r7, pc}

0800138e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b082      	sub	sp, #8
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	0018      	movs	r0, r3
 800139a:	f7ff ffaf 	bl	80012fc <SysTick_Config>
 800139e:	0003      	movs	r3, r0
}
 80013a0:	0018      	movs	r0, r3
 80013a2:	46bd      	mov	sp, r7
 80013a4:	b002      	add	sp, #8
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d101      	bne.n	80013ba <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e077      	b.n	80014aa <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a3d      	ldr	r2, [pc, #244]	; (80014b4 <HAL_DMA_Init+0x10c>)
 80013c0:	4694      	mov	ip, r2
 80013c2:	4463      	add	r3, ip
 80013c4:	2114      	movs	r1, #20
 80013c6:	0018      	movs	r0, r3
 80013c8:	f7fe feae 	bl	8000128 <__udivsi3>
 80013cc:	0003      	movs	r3, r0
 80013ce:	009a      	lsls	r2, r3, #2
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2225      	movs	r2, #37	; 0x25
 80013d8:	2102      	movs	r1, #2
 80013da:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4934      	ldr	r1, [pc, #208]	; (80014b8 <HAL_DMA_Init+0x110>)
 80013e8:	400a      	ands	r2, r1
 80013ea:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	6819      	ldr	r1, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	689a      	ldr	r2, [r3, #8]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	68db      	ldr	r3, [r3, #12]
 80013fa:	431a      	orrs	r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	691b      	ldr	r3, [r3, #16]
 8001400:	431a      	orrs	r2, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	695b      	ldr	r3, [r3, #20]
 8001406:	431a      	orrs	r2, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	431a      	orrs	r2, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	69db      	ldr	r3, [r3, #28]
 8001412:	431a      	orrs	r2, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6a1b      	ldr	r3, [r3, #32]
 8001418:	431a      	orrs	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	430a      	orrs	r2, r1
 8001420:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	0018      	movs	r0, r3
 8001426:	f000 fa8d 	bl	8001944 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	689a      	ldr	r2, [r3, #8]
 800142e:	2380      	movs	r3, #128	; 0x80
 8001430:	01db      	lsls	r3, r3, #7
 8001432:	429a      	cmp	r2, r3
 8001434:	d102      	bne.n	800143c <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2200      	movs	r2, #0
 800143a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685a      	ldr	r2, [r3, #4]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001444:	213f      	movs	r1, #63	; 0x3f
 8001446:	400a      	ands	r2, r1
 8001448:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001452:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d011      	beq.n	8001480 <HAL_DMA_Init+0xd8>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	2b04      	cmp	r3, #4
 8001462:	d80d      	bhi.n	8001480 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	0018      	movs	r0, r3
 8001468:	f000 fa98 	bl	800199c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	e008      	b.n	8001492 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2200      	movs	r2, #0
 800148a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2200      	movs	r2, #0
 8001490:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2200      	movs	r2, #0
 8001496:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2225      	movs	r2, #37	; 0x25
 800149c:	2101      	movs	r1, #1
 800149e:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2224      	movs	r2, #36	; 0x24
 80014a4:	2100      	movs	r1, #0
 80014a6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	0018      	movs	r0, r3
 80014ac:	46bd      	mov	sp, r7
 80014ae:	b002      	add	sp, #8
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	46c0      	nop			; (mov r8, r8)
 80014b4:	bffdfff8 	.word	0xbffdfff8
 80014b8:	ffff800f 	.word	0xffff800f

080014bc <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	607a      	str	r2, [r7, #4]
 80014c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80014ca:	2317      	movs	r3, #23
 80014cc:	18fb      	adds	r3, r7, r3
 80014ce:	2200      	movs	r2, #0
 80014d0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	2224      	movs	r2, #36	; 0x24
 80014d6:	5c9b      	ldrb	r3, [r3, r2]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d101      	bne.n	80014e0 <HAL_DMA_Start_IT+0x24>
 80014dc:	2302      	movs	r3, #2
 80014de:	e06f      	b.n	80015c0 <HAL_DMA_Start_IT+0x104>
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	2224      	movs	r2, #36	; 0x24
 80014e4:	2101      	movs	r1, #1
 80014e6:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	2225      	movs	r2, #37	; 0x25
 80014ec:	5c9b      	ldrb	r3, [r3, r2]
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d157      	bne.n	80015a4 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2225      	movs	r2, #37	; 0x25
 80014f8:	2102      	movs	r1, #2
 80014fa:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	2200      	movs	r2, #0
 8001500:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2101      	movs	r1, #1
 800150e:	438a      	bics	r2, r1
 8001510:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	68b9      	ldr	r1, [r7, #8]
 8001518:	68f8      	ldr	r0, [r7, #12]
 800151a:	f000 f9d3 	bl	80018c4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	2b00      	cmp	r3, #0
 8001524:	d008      	beq.n	8001538 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	210e      	movs	r1, #14
 8001532:	430a      	orrs	r2, r1
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	e00f      	b.n	8001558 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2104      	movs	r1, #4
 8001544:	438a      	bics	r2, r1
 8001546:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	210a      	movs	r1, #10
 8001554:	430a      	orrs	r2, r1
 8001556:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	2380      	movs	r3, #128	; 0x80
 8001560:	025b      	lsls	r3, r3, #9
 8001562:	4013      	ands	r3, r2
 8001564:	d008      	beq.n	8001578 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001570:	2180      	movs	r1, #128	; 0x80
 8001572:	0049      	lsls	r1, r1, #1
 8001574:	430a      	orrs	r2, r1
 8001576:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800157c:	2b00      	cmp	r3, #0
 800157e:	d008      	beq.n	8001592 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800158a:	2180      	movs	r1, #128	; 0x80
 800158c:	0049      	lsls	r1, r1, #1
 800158e:	430a      	orrs	r2, r1
 8001590:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2101      	movs	r1, #1
 800159e:	430a      	orrs	r2, r1
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	e00a      	b.n	80015ba <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	2280      	movs	r2, #128	; 0x80
 80015a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	2224      	movs	r2, #36	; 0x24
 80015ae:	2100      	movs	r1, #0
 80015b0:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 80015b2:	2317      	movs	r3, #23
 80015b4:	18fb      	adds	r3, r7, r3
 80015b6:	2201      	movs	r2, #1
 80015b8:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80015ba:	2317      	movs	r3, #23
 80015bc:	18fb      	adds	r3, r7, r3
 80015be:	781b      	ldrb	r3, [r3, #0]
}
 80015c0:	0018      	movs	r0, r3
 80015c2:	46bd      	mov	sp, r7
 80015c4:	b006      	add	sp, #24
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d101      	bne.n	80015da <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e050      	b.n	800167c <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2225      	movs	r2, #37	; 0x25
 80015de:	5c9b      	ldrb	r3, [r3, r2]
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d008      	beq.n	80015f8 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2204      	movs	r2, #4
 80015ea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2224      	movs	r2, #36	; 0x24
 80015f0:	2100      	movs	r1, #0
 80015f2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e041      	b.n	800167c <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	210e      	movs	r1, #14
 8001604:	438a      	bics	r2, r1
 8001606:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001612:	491c      	ldr	r1, [pc, #112]	; (8001684 <HAL_DMA_Abort+0xbc>)
 8001614:	400a      	ands	r2, r1
 8001616:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2101      	movs	r1, #1
 8001624:	438a      	bics	r2, r1
 8001626:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8001628:	4b17      	ldr	r3, [pc, #92]	; (8001688 <HAL_DMA_Abort+0xc0>)
 800162a:	6859      	ldr	r1, [r3, #4]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001630:	221c      	movs	r2, #28
 8001632:	4013      	ands	r3, r2
 8001634:	2201      	movs	r2, #1
 8001636:	409a      	lsls	r2, r3
 8001638:	4b13      	ldr	r3, [pc, #76]	; (8001688 <HAL_DMA_Abort+0xc0>)
 800163a:	430a      	orrs	r2, r1
 800163c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001646:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800164c:	2b00      	cmp	r3, #0
 800164e:	d00c      	beq.n	800166a <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800165a:	490a      	ldr	r1, [pc, #40]	; (8001684 <HAL_DMA_Abort+0xbc>)
 800165c:	400a      	ands	r2, r1
 800165e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001668:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2225      	movs	r2, #37	; 0x25
 800166e:	2101      	movs	r1, #1
 8001670:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2224      	movs	r2, #36	; 0x24
 8001676:	2100      	movs	r1, #0
 8001678:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800167a:	2300      	movs	r3, #0
}
 800167c:	0018      	movs	r0, r3
 800167e:	46bd      	mov	sp, r7
 8001680:	b002      	add	sp, #8
 8001682:	bd80      	pop	{r7, pc}
 8001684:	fffffeff 	.word	0xfffffeff
 8001688:	40020000 	.word	0x40020000

0800168c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001694:	210f      	movs	r1, #15
 8001696:	187b      	adds	r3, r7, r1
 8001698:	2200      	movs	r2, #0
 800169a:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2225      	movs	r2, #37	; 0x25
 80016a0:	5c9b      	ldrb	r3, [r3, r2]
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d006      	beq.n	80016b6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2204      	movs	r2, #4
 80016ac:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80016ae:	187b      	adds	r3, r7, r1
 80016b0:	2201      	movs	r2, #1
 80016b2:	701a      	strb	r2, [r3, #0]
 80016b4:	e049      	b.n	800174a <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	210e      	movs	r1, #14
 80016c2:	438a      	bics	r2, r1
 80016c4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2101      	movs	r1, #1
 80016d2:	438a      	bics	r2, r1
 80016d4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e0:	491d      	ldr	r1, [pc, #116]	; (8001758 <HAL_DMA_Abort_IT+0xcc>)
 80016e2:	400a      	ands	r2, r1
 80016e4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80016e6:	4b1d      	ldr	r3, [pc, #116]	; (800175c <HAL_DMA_Abort_IT+0xd0>)
 80016e8:	6859      	ldr	r1, [r3, #4]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	221c      	movs	r2, #28
 80016f0:	4013      	ands	r3, r2
 80016f2:	2201      	movs	r2, #1
 80016f4:	409a      	lsls	r2, r3
 80016f6:	4b19      	ldr	r3, [pc, #100]	; (800175c <HAL_DMA_Abort_IT+0xd0>)
 80016f8:	430a      	orrs	r2, r1
 80016fa:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001704:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800170a:	2b00      	cmp	r3, #0
 800170c:	d00c      	beq.n	8001728 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001718:	490f      	ldr	r1, [pc, #60]	; (8001758 <HAL_DMA_Abort_IT+0xcc>)
 800171a:	400a      	ands	r2, r1
 800171c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001726:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2225      	movs	r2, #37	; 0x25
 800172c:	2101      	movs	r1, #1
 800172e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2224      	movs	r2, #36	; 0x24
 8001734:	2100      	movs	r1, #0
 8001736:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800173c:	2b00      	cmp	r3, #0
 800173e:	d004      	beq.n	800174a <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	0010      	movs	r0, r2
 8001748:	4798      	blx	r3
    }
  }
  return status;
 800174a:	230f      	movs	r3, #15
 800174c:	18fb      	adds	r3, r7, r3
 800174e:	781b      	ldrb	r3, [r3, #0]
}
 8001750:	0018      	movs	r0, r3
 8001752:	46bd      	mov	sp, r7
 8001754:	b004      	add	sp, #16
 8001756:	bd80      	pop	{r7, pc}
 8001758:	fffffeff 	.word	0xfffffeff
 800175c:	40020000 	.word	0x40020000

08001760 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8001768:	4b55      	ldr	r3, [pc, #340]	; (80018c0 <HAL_DMA_IRQHandler+0x160>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177a:	221c      	movs	r2, #28
 800177c:	4013      	ands	r3, r2
 800177e:	2204      	movs	r2, #4
 8001780:	409a      	lsls	r2, r3
 8001782:	0013      	movs	r3, r2
 8001784:	68fa      	ldr	r2, [r7, #12]
 8001786:	4013      	ands	r3, r2
 8001788:	d027      	beq.n	80017da <HAL_DMA_IRQHandler+0x7a>
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	2204      	movs	r2, #4
 800178e:	4013      	ands	r3, r2
 8001790:	d023      	beq.n	80017da <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2220      	movs	r2, #32
 800179a:	4013      	ands	r3, r2
 800179c:	d107      	bne.n	80017ae <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2104      	movs	r1, #4
 80017aa:	438a      	bics	r2, r1
 80017ac:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80017ae:	4b44      	ldr	r3, [pc, #272]	; (80018c0 <HAL_DMA_IRQHandler+0x160>)
 80017b0:	6859      	ldr	r1, [r3, #4]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	221c      	movs	r2, #28
 80017b8:	4013      	ands	r3, r2
 80017ba:	2204      	movs	r2, #4
 80017bc:	409a      	lsls	r2, r3
 80017be:	4b40      	ldr	r3, [pc, #256]	; (80018c0 <HAL_DMA_IRQHandler+0x160>)
 80017c0:	430a      	orrs	r2, r1
 80017c2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d100      	bne.n	80017ce <HAL_DMA_IRQHandler+0x6e>
 80017cc:	e073      	b.n	80018b6 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	0010      	movs	r0, r2
 80017d6:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80017d8:	e06d      	b.n	80018b6 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017de:	221c      	movs	r2, #28
 80017e0:	4013      	ands	r3, r2
 80017e2:	2202      	movs	r2, #2
 80017e4:	409a      	lsls	r2, r3
 80017e6:	0013      	movs	r3, r2
 80017e8:	68fa      	ldr	r2, [r7, #12]
 80017ea:	4013      	ands	r3, r2
 80017ec:	d02e      	beq.n	800184c <HAL_DMA_IRQHandler+0xec>
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	2202      	movs	r2, #2
 80017f2:	4013      	ands	r3, r2
 80017f4:	d02a      	beq.n	800184c <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2220      	movs	r2, #32
 80017fe:	4013      	ands	r3, r2
 8001800:	d10b      	bne.n	800181a <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	210a      	movs	r1, #10
 800180e:	438a      	bics	r2, r1
 8001810:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2225      	movs	r2, #37	; 0x25
 8001816:	2101      	movs	r1, #1
 8001818:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800181a:	4b29      	ldr	r3, [pc, #164]	; (80018c0 <HAL_DMA_IRQHandler+0x160>)
 800181c:	6859      	ldr	r1, [r3, #4]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001822:	221c      	movs	r2, #28
 8001824:	4013      	ands	r3, r2
 8001826:	2202      	movs	r2, #2
 8001828:	409a      	lsls	r2, r3
 800182a:	4b25      	ldr	r3, [pc, #148]	; (80018c0 <HAL_DMA_IRQHandler+0x160>)
 800182c:	430a      	orrs	r2, r1
 800182e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2224      	movs	r2, #36	; 0x24
 8001834:	2100      	movs	r1, #0
 8001836:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800183c:	2b00      	cmp	r3, #0
 800183e:	d03a      	beq.n	80018b6 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	0010      	movs	r0, r2
 8001848:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800184a:	e034      	b.n	80018b6 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001850:	221c      	movs	r2, #28
 8001852:	4013      	ands	r3, r2
 8001854:	2208      	movs	r2, #8
 8001856:	409a      	lsls	r2, r3
 8001858:	0013      	movs	r3, r2
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	4013      	ands	r3, r2
 800185e:	d02b      	beq.n	80018b8 <HAL_DMA_IRQHandler+0x158>
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	2208      	movs	r2, #8
 8001864:	4013      	ands	r3, r2
 8001866:	d027      	beq.n	80018b8 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	210e      	movs	r1, #14
 8001874:	438a      	bics	r2, r1
 8001876:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001878:	4b11      	ldr	r3, [pc, #68]	; (80018c0 <HAL_DMA_IRQHandler+0x160>)
 800187a:	6859      	ldr	r1, [r3, #4]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001880:	221c      	movs	r2, #28
 8001882:	4013      	ands	r3, r2
 8001884:	2201      	movs	r2, #1
 8001886:	409a      	lsls	r2, r3
 8001888:	4b0d      	ldr	r3, [pc, #52]	; (80018c0 <HAL_DMA_IRQHandler+0x160>)
 800188a:	430a      	orrs	r2, r1
 800188c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2201      	movs	r2, #1
 8001892:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2225      	movs	r2, #37	; 0x25
 8001898:	2101      	movs	r1, #1
 800189a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2224      	movs	r2, #36	; 0x24
 80018a0:	2100      	movs	r1, #0
 80018a2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d005      	beq.n	80018b8 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	0010      	movs	r0, r2
 80018b4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80018b6:	46c0      	nop			; (mov r8, r8)
 80018b8:	46c0      	nop			; (mov r8, r8)
}
 80018ba:	46bd      	mov	sp, r7
 80018bc:	b004      	add	sp, #16
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40020000 	.word	0x40020000

080018c4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	60f8      	str	r0, [r7, #12]
 80018cc:	60b9      	str	r1, [r7, #8]
 80018ce:	607a      	str	r2, [r7, #4]
 80018d0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018d6:	68fa      	ldr	r2, [r7, #12]
 80018d8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80018da:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d004      	beq.n	80018ee <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018e8:	68fa      	ldr	r2, [r7, #12]
 80018ea:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80018ec:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80018ee:	4b14      	ldr	r3, [pc, #80]	; (8001940 <DMA_SetConfig+0x7c>)
 80018f0:	6859      	ldr	r1, [r3, #4]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f6:	221c      	movs	r2, #28
 80018f8:	4013      	ands	r3, r2
 80018fa:	2201      	movs	r2, #1
 80018fc:	409a      	lsls	r2, r3
 80018fe:	4b10      	ldr	r3, [pc, #64]	; (8001940 <DMA_SetConfig+0x7c>)
 8001900:	430a      	orrs	r2, r1
 8001902:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	683a      	ldr	r2, [r7, #0]
 800190a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	2b10      	cmp	r3, #16
 8001912:	d108      	bne.n	8001926 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	68ba      	ldr	r2, [r7, #8]
 8001922:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001924:	e007      	b.n	8001936 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	68ba      	ldr	r2, [r7, #8]
 800192c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	60da      	str	r2, [r3, #12]
}
 8001936:	46c0      	nop			; (mov r8, r8)
 8001938:	46bd      	mov	sp, r7
 800193a:	b004      	add	sp, #16
 800193c:	bd80      	pop	{r7, pc}
 800193e:	46c0      	nop			; (mov r8, r8)
 8001940:	40020000 	.word	0x40020000

08001944 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001950:	089b      	lsrs	r3, r3, #2
 8001952:	4a10      	ldr	r2, [pc, #64]	; (8001994 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8001954:	4694      	mov	ip, r2
 8001956:	4463      	add	r3, ip
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	001a      	movs	r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	001a      	movs	r2, r3
 8001966:	23ff      	movs	r3, #255	; 0xff
 8001968:	4013      	ands	r3, r2
 800196a:	3b08      	subs	r3, #8
 800196c:	2114      	movs	r1, #20
 800196e:	0018      	movs	r0, r3
 8001970:	f7fe fbda 	bl	8000128 <__udivsi3>
 8001974:	0003      	movs	r3, r0
 8001976:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	4a07      	ldr	r2, [pc, #28]	; (8001998 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 800197c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	221f      	movs	r2, #31
 8001982:	4013      	ands	r3, r2
 8001984:	2201      	movs	r2, #1
 8001986:	409a      	lsls	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800198c:	46c0      	nop			; (mov r8, r8)
 800198e:	46bd      	mov	sp, r7
 8001990:	b004      	add	sp, #16
 8001992:	bd80      	pop	{r7, pc}
 8001994:	10008200 	.word	0x10008200
 8001998:	40020880 	.word	0x40020880

0800199c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	223f      	movs	r2, #63	; 0x3f
 80019aa:	4013      	ands	r3, r2
 80019ac:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	4a0a      	ldr	r2, [pc, #40]	; (80019dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80019b2:	4694      	mov	ip, r2
 80019b4:	4463      	add	r3, ip
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	001a      	movs	r2, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a07      	ldr	r2, [pc, #28]	; (80019e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80019c2:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	3b01      	subs	r3, #1
 80019c8:	2203      	movs	r2, #3
 80019ca:	4013      	ands	r3, r2
 80019cc:	2201      	movs	r2, #1
 80019ce:	409a      	lsls	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	659a      	str	r2, [r3, #88]	; 0x58
}
 80019d4:	46c0      	nop			; (mov r8, r8)
 80019d6:	46bd      	mov	sp, r7
 80019d8:	b004      	add	sp, #16
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	1000823f 	.word	0x1000823f
 80019e0:	40020940 	.word	0x40020940

080019e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019ee:	2300      	movs	r3, #0
 80019f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019f2:	e147      	b.n	8001c84 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2101      	movs	r1, #1
 80019fa:	697a      	ldr	r2, [r7, #20]
 80019fc:	4091      	lsls	r1, r2
 80019fe:	000a      	movs	r2, r1
 8001a00:	4013      	ands	r3, r2
 8001a02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d100      	bne.n	8001a0c <HAL_GPIO_Init+0x28>
 8001a0a:	e138      	b.n	8001c7e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	2203      	movs	r2, #3
 8001a12:	4013      	ands	r3, r2
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d005      	beq.n	8001a24 <HAL_GPIO_Init+0x40>
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	2203      	movs	r2, #3
 8001a1e:	4013      	ands	r3, r2
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d130      	bne.n	8001a86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	2203      	movs	r2, #3
 8001a30:	409a      	lsls	r2, r3
 8001a32:	0013      	movs	r3, r2
 8001a34:	43da      	mvns	r2, r3
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	68da      	ldr	r2, [r3, #12]
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	409a      	lsls	r2, r3
 8001a46:	0013      	movs	r3, r2
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	693a      	ldr	r2, [r7, #16]
 8001a52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	409a      	lsls	r2, r3
 8001a60:	0013      	movs	r3, r2
 8001a62:	43da      	mvns	r2, r3
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	4013      	ands	r3, r2
 8001a68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	091b      	lsrs	r3, r3, #4
 8001a70:	2201      	movs	r2, #1
 8001a72:	401a      	ands	r2, r3
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	409a      	lsls	r2, r3
 8001a78:	0013      	movs	r3, r2
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	2203      	movs	r2, #3
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	2b03      	cmp	r3, #3
 8001a90:	d017      	beq.n	8001ac2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	2203      	movs	r2, #3
 8001a9e:	409a      	lsls	r2, r3
 8001aa0:	0013      	movs	r3, r2
 8001aa2:	43da      	mvns	r2, r3
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	689a      	ldr	r2, [r3, #8]
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	409a      	lsls	r2, r3
 8001ab4:	0013      	movs	r3, r2
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	2203      	movs	r2, #3
 8001ac8:	4013      	ands	r3, r2
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d123      	bne.n	8001b16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	08da      	lsrs	r2, r3, #3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	3208      	adds	r2, #8
 8001ad6:	0092      	lsls	r2, r2, #2
 8001ad8:	58d3      	ldr	r3, [r2, r3]
 8001ada:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	2207      	movs	r2, #7
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	220f      	movs	r2, #15
 8001ae6:	409a      	lsls	r2, r3
 8001ae8:	0013      	movs	r3, r2
 8001aea:	43da      	mvns	r2, r3
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	4013      	ands	r3, r2
 8001af0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	691a      	ldr	r2, [r3, #16]
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	2107      	movs	r1, #7
 8001afa:	400b      	ands	r3, r1
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	409a      	lsls	r2, r3
 8001b00:	0013      	movs	r3, r2
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	08da      	lsrs	r2, r3, #3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	3208      	adds	r2, #8
 8001b10:	0092      	lsls	r2, r2, #2
 8001b12:	6939      	ldr	r1, [r7, #16]
 8001b14:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	2203      	movs	r2, #3
 8001b22:	409a      	lsls	r2, r3
 8001b24:	0013      	movs	r3, r2
 8001b26:	43da      	mvns	r2, r3
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	2203      	movs	r2, #3
 8001b34:	401a      	ands	r2, r3
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	409a      	lsls	r2, r3
 8001b3c:	0013      	movs	r3, r2
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685a      	ldr	r2, [r3, #4]
 8001b4e:	23c0      	movs	r3, #192	; 0xc0
 8001b50:	029b      	lsls	r3, r3, #10
 8001b52:	4013      	ands	r3, r2
 8001b54:	d100      	bne.n	8001b58 <HAL_GPIO_Init+0x174>
 8001b56:	e092      	b.n	8001c7e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001b58:	4a50      	ldr	r2, [pc, #320]	; (8001c9c <HAL_GPIO_Init+0x2b8>)
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	089b      	lsrs	r3, r3, #2
 8001b5e:	3318      	adds	r3, #24
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	589b      	ldr	r3, [r3, r2]
 8001b64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	2203      	movs	r2, #3
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	00db      	lsls	r3, r3, #3
 8001b6e:	220f      	movs	r2, #15
 8001b70:	409a      	lsls	r2, r3
 8001b72:	0013      	movs	r3, r2
 8001b74:	43da      	mvns	r2, r3
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	23a0      	movs	r3, #160	; 0xa0
 8001b80:	05db      	lsls	r3, r3, #23
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d013      	beq.n	8001bae <HAL_GPIO_Init+0x1ca>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a45      	ldr	r2, [pc, #276]	; (8001ca0 <HAL_GPIO_Init+0x2bc>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d00d      	beq.n	8001baa <HAL_GPIO_Init+0x1c6>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a44      	ldr	r2, [pc, #272]	; (8001ca4 <HAL_GPIO_Init+0x2c0>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d007      	beq.n	8001ba6 <HAL_GPIO_Init+0x1c2>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a43      	ldr	r2, [pc, #268]	; (8001ca8 <HAL_GPIO_Init+0x2c4>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d101      	bne.n	8001ba2 <HAL_GPIO_Init+0x1be>
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e006      	b.n	8001bb0 <HAL_GPIO_Init+0x1cc>
 8001ba2:	2305      	movs	r3, #5
 8001ba4:	e004      	b.n	8001bb0 <HAL_GPIO_Init+0x1cc>
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	e002      	b.n	8001bb0 <HAL_GPIO_Init+0x1cc>
 8001baa:	2301      	movs	r3, #1
 8001bac:	e000      	b.n	8001bb0 <HAL_GPIO_Init+0x1cc>
 8001bae:	2300      	movs	r3, #0
 8001bb0:	697a      	ldr	r2, [r7, #20]
 8001bb2:	2103      	movs	r1, #3
 8001bb4:	400a      	ands	r2, r1
 8001bb6:	00d2      	lsls	r2, r2, #3
 8001bb8:	4093      	lsls	r3, r2
 8001bba:	693a      	ldr	r2, [r7, #16]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001bc0:	4936      	ldr	r1, [pc, #216]	; (8001c9c <HAL_GPIO_Init+0x2b8>)
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	089b      	lsrs	r3, r3, #2
 8001bc6:	3318      	adds	r3, #24
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001bce:	4b33      	ldr	r3, [pc, #204]	; (8001c9c <HAL_GPIO_Init+0x2b8>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	43da      	mvns	r2, r3
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685a      	ldr	r2, [r3, #4]
 8001be2:	2380      	movs	r3, #128	; 0x80
 8001be4:	035b      	lsls	r3, r3, #13
 8001be6:	4013      	ands	r3, r2
 8001be8:	d003      	beq.n	8001bf2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001bf2:	4b2a      	ldr	r3, [pc, #168]	; (8001c9c <HAL_GPIO_Init+0x2b8>)
 8001bf4:	693a      	ldr	r2, [r7, #16]
 8001bf6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001bf8:	4b28      	ldr	r3, [pc, #160]	; (8001c9c <HAL_GPIO_Init+0x2b8>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	43da      	mvns	r2, r3
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	4013      	ands	r3, r2
 8001c06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685a      	ldr	r2, [r3, #4]
 8001c0c:	2380      	movs	r3, #128	; 0x80
 8001c0e:	039b      	lsls	r3, r3, #14
 8001c10:	4013      	ands	r3, r2
 8001c12:	d003      	beq.n	8001c1c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c1c:	4b1f      	ldr	r3, [pc, #124]	; (8001c9c <HAL_GPIO_Init+0x2b8>)
 8001c1e:	693a      	ldr	r2, [r7, #16]
 8001c20:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001c22:	4a1e      	ldr	r2, [pc, #120]	; (8001c9c <HAL_GPIO_Init+0x2b8>)
 8001c24:	2384      	movs	r3, #132	; 0x84
 8001c26:	58d3      	ldr	r3, [r2, r3]
 8001c28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	43da      	mvns	r2, r3
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	4013      	ands	r3, r2
 8001c32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685a      	ldr	r2, [r3, #4]
 8001c38:	2380      	movs	r3, #128	; 0x80
 8001c3a:	029b      	lsls	r3, r3, #10
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	d003      	beq.n	8001c48 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001c40:	693a      	ldr	r2, [r7, #16]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c48:	4914      	ldr	r1, [pc, #80]	; (8001c9c <HAL_GPIO_Init+0x2b8>)
 8001c4a:	2284      	movs	r2, #132	; 0x84
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001c50:	4a12      	ldr	r2, [pc, #72]	; (8001c9c <HAL_GPIO_Init+0x2b8>)
 8001c52:	2380      	movs	r3, #128	; 0x80
 8001c54:	58d3      	ldr	r3, [r2, r3]
 8001c56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	43da      	mvns	r2, r3
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685a      	ldr	r2, [r3, #4]
 8001c66:	2380      	movs	r3, #128	; 0x80
 8001c68:	025b      	lsls	r3, r3, #9
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	d003      	beq.n	8001c76 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c76:	4909      	ldr	r1, [pc, #36]	; (8001c9c <HAL_GPIO_Init+0x2b8>)
 8001c78:	2280      	movs	r2, #128	; 0x80
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	3301      	adds	r3, #1
 8001c82:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	40da      	lsrs	r2, r3
 8001c8c:	1e13      	subs	r3, r2, #0
 8001c8e:	d000      	beq.n	8001c92 <HAL_GPIO_Init+0x2ae>
 8001c90:	e6b0      	b.n	80019f4 <HAL_GPIO_Init+0x10>
  }
}
 8001c92:	46c0      	nop			; (mov r8, r8)
 8001c94:	46c0      	nop			; (mov r8, r8)
 8001c96:	46bd      	mov	sp, r7
 8001c98:	b006      	add	sp, #24
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40021800 	.word	0x40021800
 8001ca0:	50000400 	.word	0x50000400
 8001ca4:	50000800 	.word	0x50000800
 8001ca8:	50000c00 	.word	0x50000c00

08001cac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	0008      	movs	r0, r1
 8001cb6:	0011      	movs	r1, r2
 8001cb8:	1cbb      	adds	r3, r7, #2
 8001cba:	1c02      	adds	r2, r0, #0
 8001cbc:	801a      	strh	r2, [r3, #0]
 8001cbe:	1c7b      	adds	r3, r7, #1
 8001cc0:	1c0a      	adds	r2, r1, #0
 8001cc2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cc4:	1c7b      	adds	r3, r7, #1
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d004      	beq.n	8001cd6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ccc:	1cbb      	adds	r3, r7, #2
 8001cce:	881a      	ldrh	r2, [r3, #0]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001cd4:	e003      	b.n	8001cde <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001cd6:	1cbb      	adds	r3, r7, #2
 8001cd8:	881a      	ldrh	r2, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001cde:	46c0      	nop			; (mov r8, r8)
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	b002      	add	sp, #8
 8001ce4:	bd80      	pop	{r7, pc}
	...

08001ce8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001cf0:	4b19      	ldr	r3, [pc, #100]	; (8001d58 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a19      	ldr	r2, [pc, #100]	; (8001d5c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	0019      	movs	r1, r3
 8001cfa:	4b17      	ldr	r3, [pc, #92]	; (8001d58 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	2380      	movs	r3, #128	; 0x80
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d11f      	bne.n	8001d4c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001d0c:	4b14      	ldr	r3, [pc, #80]	; (8001d60 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	0013      	movs	r3, r2
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	189b      	adds	r3, r3, r2
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	4912      	ldr	r1, [pc, #72]	; (8001d64 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001d1a:	0018      	movs	r0, r3
 8001d1c:	f7fe fa04 	bl	8000128 <__udivsi3>
 8001d20:	0003      	movs	r3, r0
 8001d22:	3301      	adds	r3, #1
 8001d24:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d26:	e008      	b.n	8001d3a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d003      	beq.n	8001d36 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	3b01      	subs	r3, #1
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	e001      	b.n	8001d3a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e009      	b.n	8001d4e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d3a:	4b07      	ldr	r3, [pc, #28]	; (8001d58 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001d3c:	695a      	ldr	r2, [r3, #20]
 8001d3e:	2380      	movs	r3, #128	; 0x80
 8001d40:	00db      	lsls	r3, r3, #3
 8001d42:	401a      	ands	r2, r3
 8001d44:	2380      	movs	r3, #128	; 0x80
 8001d46:	00db      	lsls	r3, r3, #3
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d0ed      	beq.n	8001d28 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	0018      	movs	r0, r3
 8001d50:	46bd      	mov	sp, r7
 8001d52:	b004      	add	sp, #16
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	46c0      	nop			; (mov r8, r8)
 8001d58:	40007000 	.word	0x40007000
 8001d5c:	fffff9ff 	.word	0xfffff9ff
 8001d60:	20000008 	.word	0x20000008
 8001d64:	000f4240 	.word	0x000f4240

08001d68 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001d6c:	4b03      	ldr	r3, [pc, #12]	; (8001d7c <LL_RCC_GetAPB1Prescaler+0x14>)
 8001d6e:	689a      	ldr	r2, [r3, #8]
 8001d70:	23e0      	movs	r3, #224	; 0xe0
 8001d72:	01db      	lsls	r3, r3, #7
 8001d74:	4013      	ands	r3, r2
}
 8001d76:	0018      	movs	r0, r3
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40021000 	.word	0x40021000

08001d80 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b088      	sub	sp, #32
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d101      	bne.n	8001d92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e2fe      	b.n	8002390 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2201      	movs	r2, #1
 8001d98:	4013      	ands	r3, r2
 8001d9a:	d100      	bne.n	8001d9e <HAL_RCC_OscConfig+0x1e>
 8001d9c:	e07c      	b.n	8001e98 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d9e:	4bc3      	ldr	r3, [pc, #780]	; (80020ac <HAL_RCC_OscConfig+0x32c>)
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	2238      	movs	r2, #56	; 0x38
 8001da4:	4013      	ands	r3, r2
 8001da6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001da8:	4bc0      	ldr	r3, [pc, #768]	; (80020ac <HAL_RCC_OscConfig+0x32c>)
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	2203      	movs	r2, #3
 8001dae:	4013      	ands	r3, r2
 8001db0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	2b10      	cmp	r3, #16
 8001db6:	d102      	bne.n	8001dbe <HAL_RCC_OscConfig+0x3e>
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	2b03      	cmp	r3, #3
 8001dbc:	d002      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	2b08      	cmp	r3, #8
 8001dc2:	d10b      	bne.n	8001ddc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dc4:	4bb9      	ldr	r3, [pc, #740]	; (80020ac <HAL_RCC_OscConfig+0x32c>)
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	2380      	movs	r3, #128	; 0x80
 8001dca:	029b      	lsls	r3, r3, #10
 8001dcc:	4013      	ands	r3, r2
 8001dce:	d062      	beq.n	8001e96 <HAL_RCC_OscConfig+0x116>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d15e      	bne.n	8001e96 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e2d9      	b.n	8002390 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685a      	ldr	r2, [r3, #4]
 8001de0:	2380      	movs	r3, #128	; 0x80
 8001de2:	025b      	lsls	r3, r3, #9
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d107      	bne.n	8001df8 <HAL_RCC_OscConfig+0x78>
 8001de8:	4bb0      	ldr	r3, [pc, #704]	; (80020ac <HAL_RCC_OscConfig+0x32c>)
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	4baf      	ldr	r3, [pc, #700]	; (80020ac <HAL_RCC_OscConfig+0x32c>)
 8001dee:	2180      	movs	r1, #128	; 0x80
 8001df0:	0249      	lsls	r1, r1, #9
 8001df2:	430a      	orrs	r2, r1
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	e020      	b.n	8001e3a <HAL_RCC_OscConfig+0xba>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685a      	ldr	r2, [r3, #4]
 8001dfc:	23a0      	movs	r3, #160	; 0xa0
 8001dfe:	02db      	lsls	r3, r3, #11
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d10e      	bne.n	8001e22 <HAL_RCC_OscConfig+0xa2>
 8001e04:	4ba9      	ldr	r3, [pc, #676]	; (80020ac <HAL_RCC_OscConfig+0x32c>)
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	4ba8      	ldr	r3, [pc, #672]	; (80020ac <HAL_RCC_OscConfig+0x32c>)
 8001e0a:	2180      	movs	r1, #128	; 0x80
 8001e0c:	02c9      	lsls	r1, r1, #11
 8001e0e:	430a      	orrs	r2, r1
 8001e10:	601a      	str	r2, [r3, #0]
 8001e12:	4ba6      	ldr	r3, [pc, #664]	; (80020ac <HAL_RCC_OscConfig+0x32c>)
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	4ba5      	ldr	r3, [pc, #660]	; (80020ac <HAL_RCC_OscConfig+0x32c>)
 8001e18:	2180      	movs	r1, #128	; 0x80
 8001e1a:	0249      	lsls	r1, r1, #9
 8001e1c:	430a      	orrs	r2, r1
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	e00b      	b.n	8001e3a <HAL_RCC_OscConfig+0xba>
 8001e22:	4ba2      	ldr	r3, [pc, #648]	; (80020ac <HAL_RCC_OscConfig+0x32c>)
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	4ba1      	ldr	r3, [pc, #644]	; (80020ac <HAL_RCC_OscConfig+0x32c>)
 8001e28:	49a1      	ldr	r1, [pc, #644]	; (80020b0 <HAL_RCC_OscConfig+0x330>)
 8001e2a:	400a      	ands	r2, r1
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	4b9f      	ldr	r3, [pc, #636]	; (80020ac <HAL_RCC_OscConfig+0x32c>)
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	4b9e      	ldr	r3, [pc, #632]	; (80020ac <HAL_RCC_OscConfig+0x32c>)
 8001e34:	499f      	ldr	r1, [pc, #636]	; (80020b4 <HAL_RCC_OscConfig+0x334>)
 8001e36:	400a      	ands	r2, r1
 8001e38:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d014      	beq.n	8001e6c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e42:	f7ff f9c9 	bl	80011d8 <HAL_GetTick>
 8001e46:	0003      	movs	r3, r0
 8001e48:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e4a:	e008      	b.n	8001e5e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e4c:	f7ff f9c4 	bl	80011d8 <HAL_GetTick>
 8001e50:	0002      	movs	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b64      	cmp	r3, #100	; 0x64
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e298      	b.n	8002390 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e5e:	4b93      	ldr	r3, [pc, #588]	; (80020ac <HAL_RCC_OscConfig+0x32c>)
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	2380      	movs	r3, #128	; 0x80
 8001e64:	029b      	lsls	r3, r3, #10
 8001e66:	4013      	ands	r3, r2
 8001e68:	d0f0      	beq.n	8001e4c <HAL_RCC_OscConfig+0xcc>
 8001e6a:	e015      	b.n	8001e98 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6c:	f7ff f9b4 	bl	80011d8 <HAL_GetTick>
 8001e70:	0003      	movs	r3, r0
 8001e72:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e74:	e008      	b.n	8001e88 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e76:	f7ff f9af 	bl	80011d8 <HAL_GetTick>
 8001e7a:	0002      	movs	r2, r0
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b64      	cmp	r3, #100	; 0x64
 8001e82:	d901      	bls.n	8001e88 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e283      	b.n	8002390 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e88:	4b88      	ldr	r3, [pc, #544]	; (80020ac <HAL_RCC_OscConfig+0x32c>)
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	2380      	movs	r3, #128	; 0x80
 8001e8e:	029b      	lsls	r3, r3, #10
 8001e90:	4013      	ands	r3, r2
 8001e92:	d1f0      	bne.n	8001e76 <HAL_RCC_OscConfig+0xf6>
 8001e94:	e000      	b.n	8001e98 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e96:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2202      	movs	r2, #2
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	d100      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x124>
 8001ea2:	e099      	b.n	8001fd8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ea4:	4b81      	ldr	r3, [pc, #516]	; (80020ac <HAL_RCC_OscConfig+0x32c>)
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	2238      	movs	r2, #56	; 0x38
 8001eaa:	4013      	ands	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001eae:	4b7f      	ldr	r3, [pc, #508]	; (80020ac <HAL_RCC_OscConfig+0x32c>)
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	2203      	movs	r2, #3
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	2b10      	cmp	r3, #16
 8001ebc:	d102      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x144>
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d002      	beq.n	8001eca <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d135      	bne.n	8001f36 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001eca:	4b78      	ldr	r3, [pc, #480]	; (80020ac <HAL_RCC_OscConfig+0x32c>)
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	2380      	movs	r3, #128	; 0x80
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	d005      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x162>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d101      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e256      	b.n	8002390 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ee2:	4b72      	ldr	r3, [pc, #456]	; (80020ac <HAL_RCC_OscConfig+0x32c>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	4a74      	ldr	r2, [pc, #464]	; (80020b8 <HAL_RCC_OscConfig+0x338>)
 8001ee8:	4013      	ands	r3, r2
 8001eea:	0019      	movs	r1, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	695b      	ldr	r3, [r3, #20]
 8001ef0:	021a      	lsls	r2, r3, #8
 8001ef2:	4b6e      	ldr	r3, [pc, #440]	; (80020ac <HAL_RCC_OscConfig+0x32c>)
 8001ef4:	430a      	orrs	r2, r1
 8001ef6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d112      	bne.n	8001f24 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001efe:	4b6b      	ldr	r3, [pc, #428]	; (80020ac <HAL_RCC_OscConfig+0x32c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a6e      	ldr	r2, [pc, #440]	; (80020bc <HAL_RCC_OscConfig+0x33c>)
 8001f04:	4013      	ands	r3, r2
 8001f06:	0019      	movs	r1, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	691a      	ldr	r2, [r3, #16]
 8001f0c:	4b67      	ldr	r3, [pc, #412]	; (80020ac <HAL_RCC_OscConfig+0x32c>)
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001f12:	4b66      	ldr	r3, [pc, #408]	; (80020ac <HAL_RCC_OscConfig+0x32c>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	0adb      	lsrs	r3, r3, #11
 8001f18:	2207      	movs	r2, #7
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	4a68      	ldr	r2, [pc, #416]	; (80020c0 <HAL_RCC_OscConfig+0x340>)
 8001f1e:	40da      	lsrs	r2, r3
 8001f20:	4b68      	ldr	r3, [pc, #416]	; (80020c4 <HAL_RCC_OscConfig+0x344>)
 8001f22:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001f24:	4b68      	ldr	r3, [pc, #416]	; (80020c8 <HAL_RCC_OscConfig+0x348>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	0018      	movs	r0, r3
 8001f2a:	f7ff f8f9 	bl	8001120 <HAL_InitTick>
 8001f2e:	1e03      	subs	r3, r0, #0
 8001f30:	d051      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e22c      	b.n	8002390 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d030      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001f3e:	4b5b      	ldr	r3, [pc, #364]	; (80020ac <HAL_RCC_OscConfig+0x32c>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a5e      	ldr	r2, [pc, #376]	; (80020bc <HAL_RCC_OscConfig+0x33c>)
 8001f44:	4013      	ands	r3, r2
 8001f46:	0019      	movs	r1, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	691a      	ldr	r2, [r3, #16]
 8001f4c:	4b57      	ldr	r3, [pc, #348]	; (80020ac <HAL_RCC_OscConfig+0x32c>)
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001f52:	4b56      	ldr	r3, [pc, #344]	; (80020ac <HAL_RCC_OscConfig+0x32c>)
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	4b55      	ldr	r3, [pc, #340]	; (80020ac <HAL_RCC_OscConfig+0x32c>)
 8001f58:	2180      	movs	r1, #128	; 0x80
 8001f5a:	0049      	lsls	r1, r1, #1
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f60:	f7ff f93a 	bl	80011d8 <HAL_GetTick>
 8001f64:	0003      	movs	r3, r0
 8001f66:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f68:	e008      	b.n	8001f7c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f6a:	f7ff f935 	bl	80011d8 <HAL_GetTick>
 8001f6e:	0002      	movs	r2, r0
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e209      	b.n	8002390 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f7c:	4b4b      	ldr	r3, [pc, #300]	; (80020ac <HAL_RCC_OscConfig+0x32c>)
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	2380      	movs	r3, #128	; 0x80
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	4013      	ands	r3, r2
 8001f86:	d0f0      	beq.n	8001f6a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f88:	4b48      	ldr	r3, [pc, #288]	; (80020ac <HAL_RCC_OscConfig+0x32c>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	4a4a      	ldr	r2, [pc, #296]	; (80020b8 <HAL_RCC_OscConfig+0x338>)
 8001f8e:	4013      	ands	r3, r2
 8001f90:	0019      	movs	r1, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	695b      	ldr	r3, [r3, #20]
 8001f96:	021a      	lsls	r2, r3, #8
 8001f98:	4b44      	ldr	r3, [pc, #272]	; (80020ac <HAL_RCC_OscConfig+0x32c>)
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	605a      	str	r2, [r3, #4]
 8001f9e:	e01b      	b.n	8001fd8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001fa0:	4b42      	ldr	r3, [pc, #264]	; (80020ac <HAL_RCC_OscConfig+0x32c>)
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	4b41      	ldr	r3, [pc, #260]	; (80020ac <HAL_RCC_OscConfig+0x32c>)
 8001fa6:	4949      	ldr	r1, [pc, #292]	; (80020cc <HAL_RCC_OscConfig+0x34c>)
 8001fa8:	400a      	ands	r2, r1
 8001faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fac:	f7ff f914 	bl	80011d8 <HAL_GetTick>
 8001fb0:	0003      	movs	r3, r0
 8001fb2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fb4:	e008      	b.n	8001fc8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fb6:	f7ff f90f 	bl	80011d8 <HAL_GetTick>
 8001fba:	0002      	movs	r2, r0
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d901      	bls.n	8001fc8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e1e3      	b.n	8002390 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fc8:	4b38      	ldr	r3, [pc, #224]	; (80020ac <HAL_RCC_OscConfig+0x32c>)
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	2380      	movs	r3, #128	; 0x80
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	d1f0      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x236>
 8001fd4:	e000      	b.n	8001fd8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fd6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2208      	movs	r2, #8
 8001fde:	4013      	ands	r3, r2
 8001fe0:	d047      	beq.n	8002072 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001fe2:	4b32      	ldr	r3, [pc, #200]	; (80020ac <HAL_RCC_OscConfig+0x32c>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	2238      	movs	r2, #56	; 0x38
 8001fe8:	4013      	ands	r3, r2
 8001fea:	2b18      	cmp	r3, #24
 8001fec:	d10a      	bne.n	8002004 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001fee:	4b2f      	ldr	r3, [pc, #188]	; (80020ac <HAL_RCC_OscConfig+0x32c>)
 8001ff0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ff2:	2202      	movs	r2, #2
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	d03c      	beq.n	8002072 <HAL_RCC_OscConfig+0x2f2>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d138      	bne.n	8002072 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e1c5      	b.n	8002390 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	699b      	ldr	r3, [r3, #24]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d019      	beq.n	8002040 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800200c:	4b27      	ldr	r3, [pc, #156]	; (80020ac <HAL_RCC_OscConfig+0x32c>)
 800200e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002010:	4b26      	ldr	r3, [pc, #152]	; (80020ac <HAL_RCC_OscConfig+0x32c>)
 8002012:	2101      	movs	r1, #1
 8002014:	430a      	orrs	r2, r1
 8002016:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002018:	f7ff f8de 	bl	80011d8 <HAL_GetTick>
 800201c:	0003      	movs	r3, r0
 800201e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002020:	e008      	b.n	8002034 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002022:	f7ff f8d9 	bl	80011d8 <HAL_GetTick>
 8002026:	0002      	movs	r2, r0
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	2b02      	cmp	r3, #2
 800202e:	d901      	bls.n	8002034 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e1ad      	b.n	8002390 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002034:	4b1d      	ldr	r3, [pc, #116]	; (80020ac <HAL_RCC_OscConfig+0x32c>)
 8002036:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002038:	2202      	movs	r2, #2
 800203a:	4013      	ands	r3, r2
 800203c:	d0f1      	beq.n	8002022 <HAL_RCC_OscConfig+0x2a2>
 800203e:	e018      	b.n	8002072 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002040:	4b1a      	ldr	r3, [pc, #104]	; (80020ac <HAL_RCC_OscConfig+0x32c>)
 8002042:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002044:	4b19      	ldr	r3, [pc, #100]	; (80020ac <HAL_RCC_OscConfig+0x32c>)
 8002046:	2101      	movs	r1, #1
 8002048:	438a      	bics	r2, r1
 800204a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800204c:	f7ff f8c4 	bl	80011d8 <HAL_GetTick>
 8002050:	0003      	movs	r3, r0
 8002052:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002054:	e008      	b.n	8002068 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002056:	f7ff f8bf 	bl	80011d8 <HAL_GetTick>
 800205a:	0002      	movs	r2, r0
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	2b02      	cmp	r3, #2
 8002062:	d901      	bls.n	8002068 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e193      	b.n	8002390 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002068:	4b10      	ldr	r3, [pc, #64]	; (80020ac <HAL_RCC_OscConfig+0x32c>)
 800206a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800206c:	2202      	movs	r2, #2
 800206e:	4013      	ands	r3, r2
 8002070:	d1f1      	bne.n	8002056 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2204      	movs	r2, #4
 8002078:	4013      	ands	r3, r2
 800207a:	d100      	bne.n	800207e <HAL_RCC_OscConfig+0x2fe>
 800207c:	e0c6      	b.n	800220c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800207e:	231f      	movs	r3, #31
 8002080:	18fb      	adds	r3, r7, r3
 8002082:	2200      	movs	r2, #0
 8002084:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002086:	4b09      	ldr	r3, [pc, #36]	; (80020ac <HAL_RCC_OscConfig+0x32c>)
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	2238      	movs	r2, #56	; 0x38
 800208c:	4013      	ands	r3, r2
 800208e:	2b20      	cmp	r3, #32
 8002090:	d11e      	bne.n	80020d0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002092:	4b06      	ldr	r3, [pc, #24]	; (80020ac <HAL_RCC_OscConfig+0x32c>)
 8002094:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002096:	2202      	movs	r2, #2
 8002098:	4013      	ands	r3, r2
 800209a:	d100      	bne.n	800209e <HAL_RCC_OscConfig+0x31e>
 800209c:	e0b6      	b.n	800220c <HAL_RCC_OscConfig+0x48c>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d000      	beq.n	80020a8 <HAL_RCC_OscConfig+0x328>
 80020a6:	e0b1      	b.n	800220c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e171      	b.n	8002390 <HAL_RCC_OscConfig+0x610>
 80020ac:	40021000 	.word	0x40021000
 80020b0:	fffeffff 	.word	0xfffeffff
 80020b4:	fffbffff 	.word	0xfffbffff
 80020b8:	ffff80ff 	.word	0xffff80ff
 80020bc:	ffffc7ff 	.word	0xffffc7ff
 80020c0:	00f42400 	.word	0x00f42400
 80020c4:	20000008 	.word	0x20000008
 80020c8:	2000000c 	.word	0x2000000c
 80020cc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80020d0:	4bb1      	ldr	r3, [pc, #708]	; (8002398 <HAL_RCC_OscConfig+0x618>)
 80020d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020d4:	2380      	movs	r3, #128	; 0x80
 80020d6:	055b      	lsls	r3, r3, #21
 80020d8:	4013      	ands	r3, r2
 80020da:	d101      	bne.n	80020e0 <HAL_RCC_OscConfig+0x360>
 80020dc:	2301      	movs	r3, #1
 80020de:	e000      	b.n	80020e2 <HAL_RCC_OscConfig+0x362>
 80020e0:	2300      	movs	r3, #0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d011      	beq.n	800210a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80020e6:	4bac      	ldr	r3, [pc, #688]	; (8002398 <HAL_RCC_OscConfig+0x618>)
 80020e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020ea:	4bab      	ldr	r3, [pc, #684]	; (8002398 <HAL_RCC_OscConfig+0x618>)
 80020ec:	2180      	movs	r1, #128	; 0x80
 80020ee:	0549      	lsls	r1, r1, #21
 80020f0:	430a      	orrs	r2, r1
 80020f2:	63da      	str	r2, [r3, #60]	; 0x3c
 80020f4:	4ba8      	ldr	r3, [pc, #672]	; (8002398 <HAL_RCC_OscConfig+0x618>)
 80020f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020f8:	2380      	movs	r3, #128	; 0x80
 80020fa:	055b      	lsls	r3, r3, #21
 80020fc:	4013      	ands	r3, r2
 80020fe:	60fb      	str	r3, [r7, #12]
 8002100:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002102:	231f      	movs	r3, #31
 8002104:	18fb      	adds	r3, r7, r3
 8002106:	2201      	movs	r2, #1
 8002108:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800210a:	4ba4      	ldr	r3, [pc, #656]	; (800239c <HAL_RCC_OscConfig+0x61c>)
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	2380      	movs	r3, #128	; 0x80
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	4013      	ands	r3, r2
 8002114:	d11a      	bne.n	800214c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002116:	4ba1      	ldr	r3, [pc, #644]	; (800239c <HAL_RCC_OscConfig+0x61c>)
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	4ba0      	ldr	r3, [pc, #640]	; (800239c <HAL_RCC_OscConfig+0x61c>)
 800211c:	2180      	movs	r1, #128	; 0x80
 800211e:	0049      	lsls	r1, r1, #1
 8002120:	430a      	orrs	r2, r1
 8002122:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002124:	f7ff f858 	bl	80011d8 <HAL_GetTick>
 8002128:	0003      	movs	r3, r0
 800212a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800212c:	e008      	b.n	8002140 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800212e:	f7ff f853 	bl	80011d8 <HAL_GetTick>
 8002132:	0002      	movs	r2, r0
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	2b02      	cmp	r3, #2
 800213a:	d901      	bls.n	8002140 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e127      	b.n	8002390 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002140:	4b96      	ldr	r3, [pc, #600]	; (800239c <HAL_RCC_OscConfig+0x61c>)
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	2380      	movs	r3, #128	; 0x80
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	4013      	ands	r3, r2
 800214a:	d0f0      	beq.n	800212e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d106      	bne.n	8002162 <HAL_RCC_OscConfig+0x3e2>
 8002154:	4b90      	ldr	r3, [pc, #576]	; (8002398 <HAL_RCC_OscConfig+0x618>)
 8002156:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002158:	4b8f      	ldr	r3, [pc, #572]	; (8002398 <HAL_RCC_OscConfig+0x618>)
 800215a:	2101      	movs	r1, #1
 800215c:	430a      	orrs	r2, r1
 800215e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002160:	e01c      	b.n	800219c <HAL_RCC_OscConfig+0x41c>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	2b05      	cmp	r3, #5
 8002168:	d10c      	bne.n	8002184 <HAL_RCC_OscConfig+0x404>
 800216a:	4b8b      	ldr	r3, [pc, #556]	; (8002398 <HAL_RCC_OscConfig+0x618>)
 800216c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800216e:	4b8a      	ldr	r3, [pc, #552]	; (8002398 <HAL_RCC_OscConfig+0x618>)
 8002170:	2104      	movs	r1, #4
 8002172:	430a      	orrs	r2, r1
 8002174:	65da      	str	r2, [r3, #92]	; 0x5c
 8002176:	4b88      	ldr	r3, [pc, #544]	; (8002398 <HAL_RCC_OscConfig+0x618>)
 8002178:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800217a:	4b87      	ldr	r3, [pc, #540]	; (8002398 <HAL_RCC_OscConfig+0x618>)
 800217c:	2101      	movs	r1, #1
 800217e:	430a      	orrs	r2, r1
 8002180:	65da      	str	r2, [r3, #92]	; 0x5c
 8002182:	e00b      	b.n	800219c <HAL_RCC_OscConfig+0x41c>
 8002184:	4b84      	ldr	r3, [pc, #528]	; (8002398 <HAL_RCC_OscConfig+0x618>)
 8002186:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002188:	4b83      	ldr	r3, [pc, #524]	; (8002398 <HAL_RCC_OscConfig+0x618>)
 800218a:	2101      	movs	r1, #1
 800218c:	438a      	bics	r2, r1
 800218e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002190:	4b81      	ldr	r3, [pc, #516]	; (8002398 <HAL_RCC_OscConfig+0x618>)
 8002192:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002194:	4b80      	ldr	r3, [pc, #512]	; (8002398 <HAL_RCC_OscConfig+0x618>)
 8002196:	2104      	movs	r1, #4
 8002198:	438a      	bics	r2, r1
 800219a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d014      	beq.n	80021ce <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a4:	f7ff f818 	bl	80011d8 <HAL_GetTick>
 80021a8:	0003      	movs	r3, r0
 80021aa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021ac:	e009      	b.n	80021c2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ae:	f7ff f813 	bl	80011d8 <HAL_GetTick>
 80021b2:	0002      	movs	r2, r0
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	4a79      	ldr	r2, [pc, #484]	; (80023a0 <HAL_RCC_OscConfig+0x620>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e0e6      	b.n	8002390 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021c2:	4b75      	ldr	r3, [pc, #468]	; (8002398 <HAL_RCC_OscConfig+0x618>)
 80021c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c6:	2202      	movs	r2, #2
 80021c8:	4013      	ands	r3, r2
 80021ca:	d0f0      	beq.n	80021ae <HAL_RCC_OscConfig+0x42e>
 80021cc:	e013      	b.n	80021f6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ce:	f7ff f803 	bl	80011d8 <HAL_GetTick>
 80021d2:	0003      	movs	r3, r0
 80021d4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021d6:	e009      	b.n	80021ec <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021d8:	f7fe fffe 	bl	80011d8 <HAL_GetTick>
 80021dc:	0002      	movs	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	4a6f      	ldr	r2, [pc, #444]	; (80023a0 <HAL_RCC_OscConfig+0x620>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d901      	bls.n	80021ec <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e0d1      	b.n	8002390 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021ec:	4b6a      	ldr	r3, [pc, #424]	; (8002398 <HAL_RCC_OscConfig+0x618>)
 80021ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f0:	2202      	movs	r2, #2
 80021f2:	4013      	ands	r3, r2
 80021f4:	d1f0      	bne.n	80021d8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80021f6:	231f      	movs	r3, #31
 80021f8:	18fb      	adds	r3, r7, r3
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d105      	bne.n	800220c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002200:	4b65      	ldr	r3, [pc, #404]	; (8002398 <HAL_RCC_OscConfig+0x618>)
 8002202:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002204:	4b64      	ldr	r3, [pc, #400]	; (8002398 <HAL_RCC_OscConfig+0x618>)
 8002206:	4967      	ldr	r1, [pc, #412]	; (80023a4 <HAL_RCC_OscConfig+0x624>)
 8002208:	400a      	ands	r2, r1
 800220a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	69db      	ldr	r3, [r3, #28]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d100      	bne.n	8002216 <HAL_RCC_OscConfig+0x496>
 8002214:	e0bb      	b.n	800238e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002216:	4b60      	ldr	r3, [pc, #384]	; (8002398 <HAL_RCC_OscConfig+0x618>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	2238      	movs	r2, #56	; 0x38
 800221c:	4013      	ands	r3, r2
 800221e:	2b10      	cmp	r3, #16
 8002220:	d100      	bne.n	8002224 <HAL_RCC_OscConfig+0x4a4>
 8002222:	e07b      	b.n	800231c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	69db      	ldr	r3, [r3, #28]
 8002228:	2b02      	cmp	r3, #2
 800222a:	d156      	bne.n	80022da <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800222c:	4b5a      	ldr	r3, [pc, #360]	; (8002398 <HAL_RCC_OscConfig+0x618>)
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	4b59      	ldr	r3, [pc, #356]	; (8002398 <HAL_RCC_OscConfig+0x618>)
 8002232:	495d      	ldr	r1, [pc, #372]	; (80023a8 <HAL_RCC_OscConfig+0x628>)
 8002234:	400a      	ands	r2, r1
 8002236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002238:	f7fe ffce 	bl	80011d8 <HAL_GetTick>
 800223c:	0003      	movs	r3, r0
 800223e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002240:	e008      	b.n	8002254 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002242:	f7fe ffc9 	bl	80011d8 <HAL_GetTick>
 8002246:	0002      	movs	r2, r0
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b02      	cmp	r3, #2
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e09d      	b.n	8002390 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002254:	4b50      	ldr	r3, [pc, #320]	; (8002398 <HAL_RCC_OscConfig+0x618>)
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	2380      	movs	r3, #128	; 0x80
 800225a:	049b      	lsls	r3, r3, #18
 800225c:	4013      	ands	r3, r2
 800225e:	d1f0      	bne.n	8002242 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002260:	4b4d      	ldr	r3, [pc, #308]	; (8002398 <HAL_RCC_OscConfig+0x618>)
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	4a51      	ldr	r2, [pc, #324]	; (80023ac <HAL_RCC_OscConfig+0x62c>)
 8002266:	4013      	ands	r3, r2
 8002268:	0019      	movs	r1, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a1a      	ldr	r2, [r3, #32]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002272:	431a      	orrs	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002278:	021b      	lsls	r3, r3, #8
 800227a:	431a      	orrs	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002280:	431a      	orrs	r2, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002286:	431a      	orrs	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800228c:	431a      	orrs	r2, r3
 800228e:	4b42      	ldr	r3, [pc, #264]	; (8002398 <HAL_RCC_OscConfig+0x618>)
 8002290:	430a      	orrs	r2, r1
 8002292:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002294:	4b40      	ldr	r3, [pc, #256]	; (8002398 <HAL_RCC_OscConfig+0x618>)
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	4b3f      	ldr	r3, [pc, #252]	; (8002398 <HAL_RCC_OscConfig+0x618>)
 800229a:	2180      	movs	r1, #128	; 0x80
 800229c:	0449      	lsls	r1, r1, #17
 800229e:	430a      	orrs	r2, r1
 80022a0:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80022a2:	4b3d      	ldr	r3, [pc, #244]	; (8002398 <HAL_RCC_OscConfig+0x618>)
 80022a4:	68da      	ldr	r2, [r3, #12]
 80022a6:	4b3c      	ldr	r3, [pc, #240]	; (8002398 <HAL_RCC_OscConfig+0x618>)
 80022a8:	2180      	movs	r1, #128	; 0x80
 80022aa:	0549      	lsls	r1, r1, #21
 80022ac:	430a      	orrs	r2, r1
 80022ae:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b0:	f7fe ff92 	bl	80011d8 <HAL_GetTick>
 80022b4:	0003      	movs	r3, r0
 80022b6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022b8:	e008      	b.n	80022cc <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ba:	f7fe ff8d 	bl	80011d8 <HAL_GetTick>
 80022be:	0002      	movs	r2, r0
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d901      	bls.n	80022cc <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e061      	b.n	8002390 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022cc:	4b32      	ldr	r3, [pc, #200]	; (8002398 <HAL_RCC_OscConfig+0x618>)
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	2380      	movs	r3, #128	; 0x80
 80022d2:	049b      	lsls	r3, r3, #18
 80022d4:	4013      	ands	r3, r2
 80022d6:	d0f0      	beq.n	80022ba <HAL_RCC_OscConfig+0x53a>
 80022d8:	e059      	b.n	800238e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022da:	4b2f      	ldr	r3, [pc, #188]	; (8002398 <HAL_RCC_OscConfig+0x618>)
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	4b2e      	ldr	r3, [pc, #184]	; (8002398 <HAL_RCC_OscConfig+0x618>)
 80022e0:	4931      	ldr	r1, [pc, #196]	; (80023a8 <HAL_RCC_OscConfig+0x628>)
 80022e2:	400a      	ands	r2, r1
 80022e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e6:	f7fe ff77 	bl	80011d8 <HAL_GetTick>
 80022ea:	0003      	movs	r3, r0
 80022ec:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022ee:	e008      	b.n	8002302 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022f0:	f7fe ff72 	bl	80011d8 <HAL_GetTick>
 80022f4:	0002      	movs	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e046      	b.n	8002390 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002302:	4b25      	ldr	r3, [pc, #148]	; (8002398 <HAL_RCC_OscConfig+0x618>)
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	2380      	movs	r3, #128	; 0x80
 8002308:	049b      	lsls	r3, r3, #18
 800230a:	4013      	ands	r3, r2
 800230c:	d1f0      	bne.n	80022f0 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800230e:	4b22      	ldr	r3, [pc, #136]	; (8002398 <HAL_RCC_OscConfig+0x618>)
 8002310:	68da      	ldr	r2, [r3, #12]
 8002312:	4b21      	ldr	r3, [pc, #132]	; (8002398 <HAL_RCC_OscConfig+0x618>)
 8002314:	4926      	ldr	r1, [pc, #152]	; (80023b0 <HAL_RCC_OscConfig+0x630>)
 8002316:	400a      	ands	r2, r1
 8002318:	60da      	str	r2, [r3, #12]
 800231a:	e038      	b.n	800238e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	69db      	ldr	r3, [r3, #28]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d101      	bne.n	8002328 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e033      	b.n	8002390 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002328:	4b1b      	ldr	r3, [pc, #108]	; (8002398 <HAL_RCC_OscConfig+0x618>)
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	2203      	movs	r2, #3
 8002332:	401a      	ands	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a1b      	ldr	r3, [r3, #32]
 8002338:	429a      	cmp	r2, r3
 800233a:	d126      	bne.n	800238a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	2270      	movs	r2, #112	; 0x70
 8002340:	401a      	ands	r2, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002346:	429a      	cmp	r2, r3
 8002348:	d11f      	bne.n	800238a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800234a:	697a      	ldr	r2, [r7, #20]
 800234c:	23fe      	movs	r3, #254	; 0xfe
 800234e:	01db      	lsls	r3, r3, #7
 8002350:	401a      	ands	r2, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002356:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002358:	429a      	cmp	r2, r3
 800235a:	d116      	bne.n	800238a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800235c:	697a      	ldr	r2, [r7, #20]
 800235e:	23f8      	movs	r3, #248	; 0xf8
 8002360:	039b      	lsls	r3, r3, #14
 8002362:	401a      	ands	r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002368:	429a      	cmp	r2, r3
 800236a:	d10e      	bne.n	800238a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800236c:	697a      	ldr	r2, [r7, #20]
 800236e:	23e0      	movs	r3, #224	; 0xe0
 8002370:	051b      	lsls	r3, r3, #20
 8002372:	401a      	ands	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002378:	429a      	cmp	r2, r3
 800237a:	d106      	bne.n	800238a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	0f5b      	lsrs	r3, r3, #29
 8002380:	075a      	lsls	r2, r3, #29
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002386:	429a      	cmp	r2, r3
 8002388:	d001      	beq.n	800238e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e000      	b.n	8002390 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800238e:	2300      	movs	r3, #0
}
 8002390:	0018      	movs	r0, r3
 8002392:	46bd      	mov	sp, r7
 8002394:	b008      	add	sp, #32
 8002396:	bd80      	pop	{r7, pc}
 8002398:	40021000 	.word	0x40021000
 800239c:	40007000 	.word	0x40007000
 80023a0:	00001388 	.word	0x00001388
 80023a4:	efffffff 	.word	0xefffffff
 80023a8:	feffffff 	.word	0xfeffffff
 80023ac:	11c1808c 	.word	0x11c1808c
 80023b0:	eefefffc 	.word	0xeefefffc

080023b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d101      	bne.n	80023c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e0e9      	b.n	800259c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023c8:	4b76      	ldr	r3, [pc, #472]	; (80025a4 <HAL_RCC_ClockConfig+0x1f0>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2207      	movs	r2, #7
 80023ce:	4013      	ands	r3, r2
 80023d0:	683a      	ldr	r2, [r7, #0]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d91e      	bls.n	8002414 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023d6:	4b73      	ldr	r3, [pc, #460]	; (80025a4 <HAL_RCC_ClockConfig+0x1f0>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2207      	movs	r2, #7
 80023dc:	4393      	bics	r3, r2
 80023de:	0019      	movs	r1, r3
 80023e0:	4b70      	ldr	r3, [pc, #448]	; (80025a4 <HAL_RCC_ClockConfig+0x1f0>)
 80023e2:	683a      	ldr	r2, [r7, #0]
 80023e4:	430a      	orrs	r2, r1
 80023e6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80023e8:	f7fe fef6 	bl	80011d8 <HAL_GetTick>
 80023ec:	0003      	movs	r3, r0
 80023ee:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80023f0:	e009      	b.n	8002406 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023f2:	f7fe fef1 	bl	80011d8 <HAL_GetTick>
 80023f6:	0002      	movs	r2, r0
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	4a6a      	ldr	r2, [pc, #424]	; (80025a8 <HAL_RCC_ClockConfig+0x1f4>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d901      	bls.n	8002406 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e0ca      	b.n	800259c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002406:	4b67      	ldr	r3, [pc, #412]	; (80025a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2207      	movs	r2, #7
 800240c:	4013      	ands	r3, r2
 800240e:	683a      	ldr	r2, [r7, #0]
 8002410:	429a      	cmp	r2, r3
 8002412:	d1ee      	bne.n	80023f2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2202      	movs	r2, #2
 800241a:	4013      	ands	r3, r2
 800241c:	d015      	beq.n	800244a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2204      	movs	r2, #4
 8002424:	4013      	ands	r3, r2
 8002426:	d006      	beq.n	8002436 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002428:	4b60      	ldr	r3, [pc, #384]	; (80025ac <HAL_RCC_ClockConfig+0x1f8>)
 800242a:	689a      	ldr	r2, [r3, #8]
 800242c:	4b5f      	ldr	r3, [pc, #380]	; (80025ac <HAL_RCC_ClockConfig+0x1f8>)
 800242e:	21e0      	movs	r1, #224	; 0xe0
 8002430:	01c9      	lsls	r1, r1, #7
 8002432:	430a      	orrs	r2, r1
 8002434:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002436:	4b5d      	ldr	r3, [pc, #372]	; (80025ac <HAL_RCC_ClockConfig+0x1f8>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	4a5d      	ldr	r2, [pc, #372]	; (80025b0 <HAL_RCC_ClockConfig+0x1fc>)
 800243c:	4013      	ands	r3, r2
 800243e:	0019      	movs	r1, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689a      	ldr	r2, [r3, #8]
 8002444:	4b59      	ldr	r3, [pc, #356]	; (80025ac <HAL_RCC_ClockConfig+0x1f8>)
 8002446:	430a      	orrs	r2, r1
 8002448:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2201      	movs	r2, #1
 8002450:	4013      	ands	r3, r2
 8002452:	d057      	beq.n	8002504 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d107      	bne.n	800246c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800245c:	4b53      	ldr	r3, [pc, #332]	; (80025ac <HAL_RCC_ClockConfig+0x1f8>)
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	2380      	movs	r3, #128	; 0x80
 8002462:	029b      	lsls	r3, r3, #10
 8002464:	4013      	ands	r3, r2
 8002466:	d12b      	bne.n	80024c0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e097      	b.n	800259c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	2b02      	cmp	r3, #2
 8002472:	d107      	bne.n	8002484 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002474:	4b4d      	ldr	r3, [pc, #308]	; (80025ac <HAL_RCC_ClockConfig+0x1f8>)
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	2380      	movs	r3, #128	; 0x80
 800247a:	049b      	lsls	r3, r3, #18
 800247c:	4013      	ands	r3, r2
 800247e:	d11f      	bne.n	80024c0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e08b      	b.n	800259c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d107      	bne.n	800249c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800248c:	4b47      	ldr	r3, [pc, #284]	; (80025ac <HAL_RCC_ClockConfig+0x1f8>)
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	2380      	movs	r3, #128	; 0x80
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	4013      	ands	r3, r2
 8002496:	d113      	bne.n	80024c0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e07f      	b.n	800259c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	2b03      	cmp	r3, #3
 80024a2:	d106      	bne.n	80024b2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024a4:	4b41      	ldr	r3, [pc, #260]	; (80025ac <HAL_RCC_ClockConfig+0x1f8>)
 80024a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024a8:	2202      	movs	r2, #2
 80024aa:	4013      	ands	r3, r2
 80024ac:	d108      	bne.n	80024c0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e074      	b.n	800259c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024b2:	4b3e      	ldr	r3, [pc, #248]	; (80025ac <HAL_RCC_ClockConfig+0x1f8>)
 80024b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b6:	2202      	movs	r2, #2
 80024b8:	4013      	ands	r3, r2
 80024ba:	d101      	bne.n	80024c0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e06d      	b.n	800259c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80024c0:	4b3a      	ldr	r3, [pc, #232]	; (80025ac <HAL_RCC_ClockConfig+0x1f8>)
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	2207      	movs	r2, #7
 80024c6:	4393      	bics	r3, r2
 80024c8:	0019      	movs	r1, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685a      	ldr	r2, [r3, #4]
 80024ce:	4b37      	ldr	r3, [pc, #220]	; (80025ac <HAL_RCC_ClockConfig+0x1f8>)
 80024d0:	430a      	orrs	r2, r1
 80024d2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024d4:	f7fe fe80 	bl	80011d8 <HAL_GetTick>
 80024d8:	0003      	movs	r3, r0
 80024da:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024dc:	e009      	b.n	80024f2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024de:	f7fe fe7b 	bl	80011d8 <HAL_GetTick>
 80024e2:	0002      	movs	r2, r0
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	4a2f      	ldr	r2, [pc, #188]	; (80025a8 <HAL_RCC_ClockConfig+0x1f4>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e054      	b.n	800259c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024f2:	4b2e      	ldr	r3, [pc, #184]	; (80025ac <HAL_RCC_ClockConfig+0x1f8>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	2238      	movs	r2, #56	; 0x38
 80024f8:	401a      	ands	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	00db      	lsls	r3, r3, #3
 8002500:	429a      	cmp	r2, r3
 8002502:	d1ec      	bne.n	80024de <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002504:	4b27      	ldr	r3, [pc, #156]	; (80025a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2207      	movs	r2, #7
 800250a:	4013      	ands	r3, r2
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	429a      	cmp	r2, r3
 8002510:	d21e      	bcs.n	8002550 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002512:	4b24      	ldr	r3, [pc, #144]	; (80025a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2207      	movs	r2, #7
 8002518:	4393      	bics	r3, r2
 800251a:	0019      	movs	r1, r3
 800251c:	4b21      	ldr	r3, [pc, #132]	; (80025a4 <HAL_RCC_ClockConfig+0x1f0>)
 800251e:	683a      	ldr	r2, [r7, #0]
 8002520:	430a      	orrs	r2, r1
 8002522:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002524:	f7fe fe58 	bl	80011d8 <HAL_GetTick>
 8002528:	0003      	movs	r3, r0
 800252a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800252c:	e009      	b.n	8002542 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800252e:	f7fe fe53 	bl	80011d8 <HAL_GetTick>
 8002532:	0002      	movs	r2, r0
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	4a1b      	ldr	r2, [pc, #108]	; (80025a8 <HAL_RCC_ClockConfig+0x1f4>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d901      	bls.n	8002542 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e02c      	b.n	800259c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002542:	4b18      	ldr	r3, [pc, #96]	; (80025a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2207      	movs	r2, #7
 8002548:	4013      	ands	r3, r2
 800254a:	683a      	ldr	r2, [r7, #0]
 800254c:	429a      	cmp	r2, r3
 800254e:	d1ee      	bne.n	800252e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2204      	movs	r2, #4
 8002556:	4013      	ands	r3, r2
 8002558:	d009      	beq.n	800256e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800255a:	4b14      	ldr	r3, [pc, #80]	; (80025ac <HAL_RCC_ClockConfig+0x1f8>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	4a15      	ldr	r2, [pc, #84]	; (80025b4 <HAL_RCC_ClockConfig+0x200>)
 8002560:	4013      	ands	r3, r2
 8002562:	0019      	movs	r1, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	68da      	ldr	r2, [r3, #12]
 8002568:	4b10      	ldr	r3, [pc, #64]	; (80025ac <HAL_RCC_ClockConfig+0x1f8>)
 800256a:	430a      	orrs	r2, r1
 800256c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800256e:	f000 f829 	bl	80025c4 <HAL_RCC_GetSysClockFreq>
 8002572:	0001      	movs	r1, r0
 8002574:	4b0d      	ldr	r3, [pc, #52]	; (80025ac <HAL_RCC_ClockConfig+0x1f8>)
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	0a1b      	lsrs	r3, r3, #8
 800257a:	220f      	movs	r2, #15
 800257c:	401a      	ands	r2, r3
 800257e:	4b0e      	ldr	r3, [pc, #56]	; (80025b8 <HAL_RCC_ClockConfig+0x204>)
 8002580:	0092      	lsls	r2, r2, #2
 8002582:	58d3      	ldr	r3, [r2, r3]
 8002584:	221f      	movs	r2, #31
 8002586:	4013      	ands	r3, r2
 8002588:	000a      	movs	r2, r1
 800258a:	40da      	lsrs	r2, r3
 800258c:	4b0b      	ldr	r3, [pc, #44]	; (80025bc <HAL_RCC_ClockConfig+0x208>)
 800258e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002590:	4b0b      	ldr	r3, [pc, #44]	; (80025c0 <HAL_RCC_ClockConfig+0x20c>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	0018      	movs	r0, r3
 8002596:	f7fe fdc3 	bl	8001120 <HAL_InitTick>
 800259a:	0003      	movs	r3, r0
}
 800259c:	0018      	movs	r0, r3
 800259e:	46bd      	mov	sp, r7
 80025a0:	b004      	add	sp, #16
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	40022000 	.word	0x40022000
 80025a8:	00001388 	.word	0x00001388
 80025ac:	40021000 	.word	0x40021000
 80025b0:	fffff0ff 	.word	0xfffff0ff
 80025b4:	ffff8fff 	.word	0xffff8fff
 80025b8:	08006420 	.word	0x08006420
 80025bc:	20000008 	.word	0x20000008
 80025c0:	2000000c 	.word	0x2000000c

080025c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b086      	sub	sp, #24
 80025c8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025ca:	4b3c      	ldr	r3, [pc, #240]	; (80026bc <HAL_RCC_GetSysClockFreq+0xf8>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	2238      	movs	r2, #56	; 0x38
 80025d0:	4013      	ands	r3, r2
 80025d2:	d10f      	bne.n	80025f4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80025d4:	4b39      	ldr	r3, [pc, #228]	; (80026bc <HAL_RCC_GetSysClockFreq+0xf8>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	0adb      	lsrs	r3, r3, #11
 80025da:	2207      	movs	r2, #7
 80025dc:	4013      	ands	r3, r2
 80025de:	2201      	movs	r2, #1
 80025e0:	409a      	lsls	r2, r3
 80025e2:	0013      	movs	r3, r2
 80025e4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80025e6:	6839      	ldr	r1, [r7, #0]
 80025e8:	4835      	ldr	r0, [pc, #212]	; (80026c0 <HAL_RCC_GetSysClockFreq+0xfc>)
 80025ea:	f7fd fd9d 	bl	8000128 <__udivsi3>
 80025ee:	0003      	movs	r3, r0
 80025f0:	613b      	str	r3, [r7, #16]
 80025f2:	e05d      	b.n	80026b0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025f4:	4b31      	ldr	r3, [pc, #196]	; (80026bc <HAL_RCC_GetSysClockFreq+0xf8>)
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	2238      	movs	r2, #56	; 0x38
 80025fa:	4013      	ands	r3, r2
 80025fc:	2b08      	cmp	r3, #8
 80025fe:	d102      	bne.n	8002606 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002600:	4b30      	ldr	r3, [pc, #192]	; (80026c4 <HAL_RCC_GetSysClockFreq+0x100>)
 8002602:	613b      	str	r3, [r7, #16]
 8002604:	e054      	b.n	80026b0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002606:	4b2d      	ldr	r3, [pc, #180]	; (80026bc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	2238      	movs	r2, #56	; 0x38
 800260c:	4013      	ands	r3, r2
 800260e:	2b10      	cmp	r3, #16
 8002610:	d138      	bne.n	8002684 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002612:	4b2a      	ldr	r3, [pc, #168]	; (80026bc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	2203      	movs	r2, #3
 8002618:	4013      	ands	r3, r2
 800261a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800261c:	4b27      	ldr	r3, [pc, #156]	; (80026bc <HAL_RCC_GetSysClockFreq+0xf8>)
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	091b      	lsrs	r3, r3, #4
 8002622:	2207      	movs	r2, #7
 8002624:	4013      	ands	r3, r2
 8002626:	3301      	adds	r3, #1
 8002628:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2b03      	cmp	r3, #3
 800262e:	d10d      	bne.n	800264c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002630:	68b9      	ldr	r1, [r7, #8]
 8002632:	4824      	ldr	r0, [pc, #144]	; (80026c4 <HAL_RCC_GetSysClockFreq+0x100>)
 8002634:	f7fd fd78 	bl	8000128 <__udivsi3>
 8002638:	0003      	movs	r3, r0
 800263a:	0019      	movs	r1, r3
 800263c:	4b1f      	ldr	r3, [pc, #124]	; (80026bc <HAL_RCC_GetSysClockFreq+0xf8>)
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	0a1b      	lsrs	r3, r3, #8
 8002642:	227f      	movs	r2, #127	; 0x7f
 8002644:	4013      	ands	r3, r2
 8002646:	434b      	muls	r3, r1
 8002648:	617b      	str	r3, [r7, #20]
        break;
 800264a:	e00d      	b.n	8002668 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800264c:	68b9      	ldr	r1, [r7, #8]
 800264e:	481c      	ldr	r0, [pc, #112]	; (80026c0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002650:	f7fd fd6a 	bl	8000128 <__udivsi3>
 8002654:	0003      	movs	r3, r0
 8002656:	0019      	movs	r1, r3
 8002658:	4b18      	ldr	r3, [pc, #96]	; (80026bc <HAL_RCC_GetSysClockFreq+0xf8>)
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	0a1b      	lsrs	r3, r3, #8
 800265e:	227f      	movs	r2, #127	; 0x7f
 8002660:	4013      	ands	r3, r2
 8002662:	434b      	muls	r3, r1
 8002664:	617b      	str	r3, [r7, #20]
        break;
 8002666:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002668:	4b14      	ldr	r3, [pc, #80]	; (80026bc <HAL_RCC_GetSysClockFreq+0xf8>)
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	0f5b      	lsrs	r3, r3, #29
 800266e:	2207      	movs	r2, #7
 8002670:	4013      	ands	r3, r2
 8002672:	3301      	adds	r3, #1
 8002674:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002676:	6879      	ldr	r1, [r7, #4]
 8002678:	6978      	ldr	r0, [r7, #20]
 800267a:	f7fd fd55 	bl	8000128 <__udivsi3>
 800267e:	0003      	movs	r3, r0
 8002680:	613b      	str	r3, [r7, #16]
 8002682:	e015      	b.n	80026b0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002684:	4b0d      	ldr	r3, [pc, #52]	; (80026bc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	2238      	movs	r2, #56	; 0x38
 800268a:	4013      	ands	r3, r2
 800268c:	2b20      	cmp	r3, #32
 800268e:	d103      	bne.n	8002698 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002690:	2380      	movs	r3, #128	; 0x80
 8002692:	021b      	lsls	r3, r3, #8
 8002694:	613b      	str	r3, [r7, #16]
 8002696:	e00b      	b.n	80026b0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002698:	4b08      	ldr	r3, [pc, #32]	; (80026bc <HAL_RCC_GetSysClockFreq+0xf8>)
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	2238      	movs	r2, #56	; 0x38
 800269e:	4013      	ands	r3, r2
 80026a0:	2b18      	cmp	r3, #24
 80026a2:	d103      	bne.n	80026ac <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80026a4:	23fa      	movs	r3, #250	; 0xfa
 80026a6:	01db      	lsls	r3, r3, #7
 80026a8:	613b      	str	r3, [r7, #16]
 80026aa:	e001      	b.n	80026b0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80026ac:	2300      	movs	r3, #0
 80026ae:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80026b0:	693b      	ldr	r3, [r7, #16]
}
 80026b2:	0018      	movs	r0, r3
 80026b4:	46bd      	mov	sp, r7
 80026b6:	b006      	add	sp, #24
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	46c0      	nop			; (mov r8, r8)
 80026bc:	40021000 	.word	0x40021000
 80026c0:	00f42400 	.word	0x00f42400
 80026c4:	007a1200 	.word	0x007a1200

080026c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026cc:	4b02      	ldr	r3, [pc, #8]	; (80026d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80026ce:	681b      	ldr	r3, [r3, #0]
}
 80026d0:	0018      	movs	r0, r3
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	46c0      	nop			; (mov r8, r8)
 80026d8:	20000008 	.word	0x20000008

080026dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026dc:	b5b0      	push	{r4, r5, r7, lr}
 80026de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80026e0:	f7ff fff2 	bl	80026c8 <HAL_RCC_GetHCLKFreq>
 80026e4:	0004      	movs	r4, r0
 80026e6:	f7ff fb3f 	bl	8001d68 <LL_RCC_GetAPB1Prescaler>
 80026ea:	0003      	movs	r3, r0
 80026ec:	0b1a      	lsrs	r2, r3, #12
 80026ee:	4b05      	ldr	r3, [pc, #20]	; (8002704 <HAL_RCC_GetPCLK1Freq+0x28>)
 80026f0:	0092      	lsls	r2, r2, #2
 80026f2:	58d3      	ldr	r3, [r2, r3]
 80026f4:	221f      	movs	r2, #31
 80026f6:	4013      	ands	r3, r2
 80026f8:	40dc      	lsrs	r4, r3
 80026fa:	0023      	movs	r3, r4
}
 80026fc:	0018      	movs	r0, r3
 80026fe:	46bd      	mov	sp, r7
 8002700:	bdb0      	pop	{r4, r5, r7, pc}
 8002702:	46c0      	nop			; (mov r8, r8)
 8002704:	08006460 	.word	0x08006460

08002708 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002710:	2313      	movs	r3, #19
 8002712:	18fb      	adds	r3, r7, r3
 8002714:	2200      	movs	r2, #0
 8002716:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002718:	2312      	movs	r3, #18
 800271a:	18fb      	adds	r3, r7, r3
 800271c:	2200      	movs	r2, #0
 800271e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	2380      	movs	r3, #128	; 0x80
 8002726:	029b      	lsls	r3, r3, #10
 8002728:	4013      	ands	r3, r2
 800272a:	d100      	bne.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800272c:	e0a3      	b.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800272e:	2011      	movs	r0, #17
 8002730:	183b      	adds	r3, r7, r0
 8002732:	2200      	movs	r2, #0
 8002734:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002736:	4ba5      	ldr	r3, [pc, #660]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002738:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800273a:	2380      	movs	r3, #128	; 0x80
 800273c:	055b      	lsls	r3, r3, #21
 800273e:	4013      	ands	r3, r2
 8002740:	d110      	bne.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002742:	4ba2      	ldr	r3, [pc, #648]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002744:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002746:	4ba1      	ldr	r3, [pc, #644]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002748:	2180      	movs	r1, #128	; 0x80
 800274a:	0549      	lsls	r1, r1, #21
 800274c:	430a      	orrs	r2, r1
 800274e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002750:	4b9e      	ldr	r3, [pc, #632]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002752:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002754:	2380      	movs	r3, #128	; 0x80
 8002756:	055b      	lsls	r3, r3, #21
 8002758:	4013      	ands	r3, r2
 800275a:	60bb      	str	r3, [r7, #8]
 800275c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800275e:	183b      	adds	r3, r7, r0
 8002760:	2201      	movs	r2, #1
 8002762:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002764:	4b9a      	ldr	r3, [pc, #616]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	4b99      	ldr	r3, [pc, #612]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800276a:	2180      	movs	r1, #128	; 0x80
 800276c:	0049      	lsls	r1, r1, #1
 800276e:	430a      	orrs	r2, r1
 8002770:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002772:	f7fe fd31 	bl	80011d8 <HAL_GetTick>
 8002776:	0003      	movs	r3, r0
 8002778:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800277a:	e00b      	b.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800277c:	f7fe fd2c 	bl	80011d8 <HAL_GetTick>
 8002780:	0002      	movs	r2, r0
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	2b02      	cmp	r3, #2
 8002788:	d904      	bls.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800278a:	2313      	movs	r3, #19
 800278c:	18fb      	adds	r3, r7, r3
 800278e:	2203      	movs	r2, #3
 8002790:	701a      	strb	r2, [r3, #0]
        break;
 8002792:	e005      	b.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002794:	4b8e      	ldr	r3, [pc, #568]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	2380      	movs	r3, #128	; 0x80
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	4013      	ands	r3, r2
 800279e:	d0ed      	beq.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80027a0:	2313      	movs	r3, #19
 80027a2:	18fb      	adds	r3, r7, r3
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d154      	bne.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80027aa:	4b88      	ldr	r3, [pc, #544]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80027ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80027ae:	23c0      	movs	r3, #192	; 0xc0
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	4013      	ands	r3, r2
 80027b4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d019      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c0:	697a      	ldr	r2, [r7, #20]
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d014      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80027c6:	4b81      	ldr	r3, [pc, #516]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80027c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ca:	4a82      	ldr	r2, [pc, #520]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80027cc:	4013      	ands	r3, r2
 80027ce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80027d0:	4b7e      	ldr	r3, [pc, #504]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80027d2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80027d4:	4b7d      	ldr	r3, [pc, #500]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80027d6:	2180      	movs	r1, #128	; 0x80
 80027d8:	0249      	lsls	r1, r1, #9
 80027da:	430a      	orrs	r2, r1
 80027dc:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027de:	4b7b      	ldr	r3, [pc, #492]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80027e0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80027e2:	4b7a      	ldr	r3, [pc, #488]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80027e4:	497c      	ldr	r1, [pc, #496]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80027e6:	400a      	ands	r2, r1
 80027e8:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80027ea:	4b78      	ldr	r3, [pc, #480]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80027ec:	697a      	ldr	r2, [r7, #20]
 80027ee:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	2201      	movs	r2, #1
 80027f4:	4013      	ands	r3, r2
 80027f6:	d016      	beq.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f8:	f7fe fcee 	bl	80011d8 <HAL_GetTick>
 80027fc:	0003      	movs	r3, r0
 80027fe:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002800:	e00c      	b.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002802:	f7fe fce9 	bl	80011d8 <HAL_GetTick>
 8002806:	0002      	movs	r2, r0
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	4a73      	ldr	r2, [pc, #460]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d904      	bls.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002812:	2313      	movs	r3, #19
 8002814:	18fb      	adds	r3, r7, r3
 8002816:	2203      	movs	r2, #3
 8002818:	701a      	strb	r2, [r3, #0]
            break;
 800281a:	e004      	b.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800281c:	4b6b      	ldr	r3, [pc, #428]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800281e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002820:	2202      	movs	r2, #2
 8002822:	4013      	ands	r3, r2
 8002824:	d0ed      	beq.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002826:	2313      	movs	r3, #19
 8002828:	18fb      	adds	r3, r7, r3
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d10a      	bne.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002830:	4b66      	ldr	r3, [pc, #408]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002834:	4a67      	ldr	r2, [pc, #412]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002836:	4013      	ands	r3, r2
 8002838:	0019      	movs	r1, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800283e:	4b63      	ldr	r3, [pc, #396]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002840:	430a      	orrs	r2, r1
 8002842:	65da      	str	r2, [r3, #92]	; 0x5c
 8002844:	e00c      	b.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002846:	2312      	movs	r3, #18
 8002848:	18fb      	adds	r3, r7, r3
 800284a:	2213      	movs	r2, #19
 800284c:	18ba      	adds	r2, r7, r2
 800284e:	7812      	ldrb	r2, [r2, #0]
 8002850:	701a      	strb	r2, [r3, #0]
 8002852:	e005      	b.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002854:	2312      	movs	r3, #18
 8002856:	18fb      	adds	r3, r7, r3
 8002858:	2213      	movs	r2, #19
 800285a:	18ba      	adds	r2, r7, r2
 800285c:	7812      	ldrb	r2, [r2, #0]
 800285e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002860:	2311      	movs	r3, #17
 8002862:	18fb      	adds	r3, r7, r3
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d105      	bne.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800286a:	4b58      	ldr	r3, [pc, #352]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800286c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800286e:	4b57      	ldr	r3, [pc, #348]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002870:	495b      	ldr	r1, [pc, #364]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002872:	400a      	ands	r2, r1
 8002874:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2201      	movs	r2, #1
 800287c:	4013      	ands	r3, r2
 800287e:	d009      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002880:	4b52      	ldr	r3, [pc, #328]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002884:	2203      	movs	r2, #3
 8002886:	4393      	bics	r3, r2
 8002888:	0019      	movs	r1, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685a      	ldr	r2, [r3, #4]
 800288e:	4b4f      	ldr	r3, [pc, #316]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002890:	430a      	orrs	r2, r1
 8002892:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2210      	movs	r2, #16
 800289a:	4013      	ands	r3, r2
 800289c:	d009      	beq.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800289e:	4b4b      	ldr	r3, [pc, #300]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80028a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a2:	4a50      	ldr	r2, [pc, #320]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80028a4:	4013      	ands	r3, r2
 80028a6:	0019      	movs	r1, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689a      	ldr	r2, [r3, #8]
 80028ac:	4b47      	ldr	r3, [pc, #284]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80028ae:	430a      	orrs	r2, r1
 80028b0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	2380      	movs	r3, #128	; 0x80
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	4013      	ands	r3, r2
 80028bc:	d009      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028be:	4b43      	ldr	r3, [pc, #268]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80028c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c2:	4a49      	ldr	r2, [pc, #292]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80028c4:	4013      	ands	r3, r2
 80028c6:	0019      	movs	r1, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	695a      	ldr	r2, [r3, #20]
 80028cc:	4b3f      	ldr	r3, [pc, #252]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80028ce:	430a      	orrs	r2, r1
 80028d0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	2380      	movs	r3, #128	; 0x80
 80028d8:	00db      	lsls	r3, r3, #3
 80028da:	4013      	ands	r3, r2
 80028dc:	d009      	beq.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80028de:	4b3b      	ldr	r3, [pc, #236]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80028e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028e2:	4a42      	ldr	r2, [pc, #264]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80028e4:	4013      	ands	r3, r2
 80028e6:	0019      	movs	r1, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	699a      	ldr	r2, [r3, #24]
 80028ec:	4b37      	ldr	r3, [pc, #220]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80028ee:	430a      	orrs	r2, r1
 80028f0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2220      	movs	r2, #32
 80028f8:	4013      	ands	r3, r2
 80028fa:	d009      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028fc:	4b33      	ldr	r3, [pc, #204]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80028fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002900:	4a3b      	ldr	r2, [pc, #236]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002902:	4013      	ands	r3, r2
 8002904:	0019      	movs	r1, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	68da      	ldr	r2, [r3, #12]
 800290a:	4b30      	ldr	r3, [pc, #192]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800290c:	430a      	orrs	r2, r1
 800290e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	2380      	movs	r3, #128	; 0x80
 8002916:	01db      	lsls	r3, r3, #7
 8002918:	4013      	ands	r3, r2
 800291a:	d015      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800291c:	4b2b      	ldr	r3, [pc, #172]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800291e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	0899      	lsrs	r1, r3, #2
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	69da      	ldr	r2, [r3, #28]
 8002928:	4b28      	ldr	r3, [pc, #160]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800292a:	430a      	orrs	r2, r1
 800292c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	69da      	ldr	r2, [r3, #28]
 8002932:	2380      	movs	r3, #128	; 0x80
 8002934:	05db      	lsls	r3, r3, #23
 8002936:	429a      	cmp	r2, r3
 8002938:	d106      	bne.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800293a:	4b24      	ldr	r3, [pc, #144]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800293c:	68da      	ldr	r2, [r3, #12]
 800293e:	4b23      	ldr	r3, [pc, #140]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002940:	2180      	movs	r1, #128	; 0x80
 8002942:	0249      	lsls	r1, r1, #9
 8002944:	430a      	orrs	r2, r1
 8002946:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	2380      	movs	r3, #128	; 0x80
 800294e:	039b      	lsls	r3, r3, #14
 8002950:	4013      	ands	r3, r2
 8002952:	d016      	beq.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002954:	4b1d      	ldr	r3, [pc, #116]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002958:	4a26      	ldr	r2, [pc, #152]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800295a:	4013      	ands	r3, r2
 800295c:	0019      	movs	r1, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a1a      	ldr	r2, [r3, #32]
 8002962:	4b1a      	ldr	r3, [pc, #104]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002964:	430a      	orrs	r2, r1
 8002966:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a1a      	ldr	r2, [r3, #32]
 800296c:	2380      	movs	r3, #128	; 0x80
 800296e:	03db      	lsls	r3, r3, #15
 8002970:	429a      	cmp	r2, r3
 8002972:	d106      	bne.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002974:	4b15      	ldr	r3, [pc, #84]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002976:	68da      	ldr	r2, [r3, #12]
 8002978:	4b14      	ldr	r3, [pc, #80]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800297a:	2180      	movs	r1, #128	; 0x80
 800297c:	0449      	lsls	r1, r1, #17
 800297e:	430a      	orrs	r2, r1
 8002980:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	2380      	movs	r3, #128	; 0x80
 8002988:	011b      	lsls	r3, r3, #4
 800298a:	4013      	ands	r3, r2
 800298c:	d016      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800298e:	4b0f      	ldr	r3, [pc, #60]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002992:	4a19      	ldr	r2, [pc, #100]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002994:	4013      	ands	r3, r2
 8002996:	0019      	movs	r1, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	691a      	ldr	r2, [r3, #16]
 800299c:	4b0b      	ldr	r3, [pc, #44]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800299e:	430a      	orrs	r2, r1
 80029a0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	691a      	ldr	r2, [r3, #16]
 80029a6:	2380      	movs	r3, #128	; 0x80
 80029a8:	01db      	lsls	r3, r3, #7
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d106      	bne.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80029ae:	4b07      	ldr	r3, [pc, #28]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80029b0:	68da      	ldr	r2, [r3, #12]
 80029b2:	4b06      	ldr	r3, [pc, #24]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80029b4:	2180      	movs	r1, #128	; 0x80
 80029b6:	0249      	lsls	r1, r1, #9
 80029b8:	430a      	orrs	r2, r1
 80029ba:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80029bc:	2312      	movs	r3, #18
 80029be:	18fb      	adds	r3, r7, r3
 80029c0:	781b      	ldrb	r3, [r3, #0]
}
 80029c2:	0018      	movs	r0, r3
 80029c4:	46bd      	mov	sp, r7
 80029c6:	b006      	add	sp, #24
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	46c0      	nop			; (mov r8, r8)
 80029cc:	40021000 	.word	0x40021000
 80029d0:	40007000 	.word	0x40007000
 80029d4:	fffffcff 	.word	0xfffffcff
 80029d8:	fffeffff 	.word	0xfffeffff
 80029dc:	00001388 	.word	0x00001388
 80029e0:	efffffff 	.word	0xefffffff
 80029e4:	fffff3ff 	.word	0xfffff3ff
 80029e8:	fff3ffff 	.word	0xfff3ffff
 80029ec:	ffcfffff 	.word	0xffcfffff
 80029f0:	ffffcfff 	.word	0xffffcfff
 80029f4:	ffbfffff 	.word	0xffbfffff
 80029f8:	ffff3fff 	.word	0xffff3fff

080029fc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80029fc:	b5b0      	push	{r4, r5, r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002a04:	230f      	movs	r3, #15
 8002a06:	18fb      	adds	r3, r7, r3
 8002a08:	2201      	movs	r2, #1
 8002a0a:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d100      	bne.n	8002a14 <HAL_RTC_Init+0x18>
 8002a12:	e08c      	b.n	8002b2e <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2229      	movs	r2, #41	; 0x29
 8002a18:	5c9b      	ldrb	r3, [r3, r2]
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d10b      	bne.n	8002a38 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2228      	movs	r2, #40	; 0x28
 8002a24:	2100      	movs	r1, #0
 8002a26:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2288      	movs	r2, #136	; 0x88
 8002a2c:	0212      	lsls	r2, r2, #8
 8002a2e:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	0018      	movs	r0, r3
 8002a34:	f7fe f918 	bl	8000c68 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2229      	movs	r2, #41	; 0x29
 8002a3c:	2102      	movs	r1, #2
 8002a3e:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	2210      	movs	r2, #16
 8002a48:	4013      	ands	r3, r2
 8002a4a:	2b10      	cmp	r3, #16
 8002a4c:	d062      	beq.n	8002b14 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	22ca      	movs	r2, #202	; 0xca
 8002a54:	625a      	str	r2, [r3, #36]	; 0x24
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2253      	movs	r2, #83	; 0x53
 8002a5c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8002a5e:	250f      	movs	r5, #15
 8002a60:	197c      	adds	r4, r7, r5
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	0018      	movs	r0, r3
 8002a66:	f000 f892 	bl	8002b8e <RTC_EnterInitMode>
 8002a6a:	0003      	movs	r3, r0
 8002a6c:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8002a6e:	0028      	movs	r0, r5
 8002a70:	183b      	adds	r3, r7, r0
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d12c      	bne.n	8002ad2 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	699a      	ldr	r2, [r3, #24]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	492e      	ldr	r1, [pc, #184]	; (8002b3c <HAL_RTC_Init+0x140>)
 8002a84:	400a      	ands	r2, r1
 8002a86:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	6999      	ldr	r1, [r3, #24]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	689a      	ldr	r2, [r3, #8]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	695b      	ldr	r3, [r3, #20]
 8002a96:	431a      	orrs	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	69db      	ldr	r3, [r3, #28]
 8002a9c:	431a      	orrs	r2, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	6912      	ldr	r2, [r2, #16]
 8002aae:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	6919      	ldr	r1, [r3, #16]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	041a      	lsls	r2, r3, #16
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	430a      	orrs	r2, r1
 8002ac2:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8002ac4:	183c      	adds	r4, r7, r0
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	0018      	movs	r0, r3
 8002aca:	f000 f8a3 	bl	8002c14 <RTC_ExitInitMode>
 8002ace:	0003      	movs	r3, r0
 8002ad0:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8002ad2:	230f      	movs	r3, #15
 8002ad4:	18fb      	adds	r3, r7, r3
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d116      	bne.n	8002b0a <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	699a      	ldr	r2, [r3, #24]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	00d2      	lsls	r2, r2, #3
 8002ae8:	08d2      	lsrs	r2, r2, #3
 8002aea:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	6999      	ldr	r1, [r3, #24]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a1b      	ldr	r3, [r3, #32]
 8002afa:	431a      	orrs	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	431a      	orrs	r2, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	430a      	orrs	r2, r1
 8002b08:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	22ff      	movs	r2, #255	; 0xff
 8002b10:	625a      	str	r2, [r3, #36]	; 0x24
 8002b12:	e003      	b.n	8002b1c <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8002b14:	230f      	movs	r3, #15
 8002b16:	18fb      	adds	r3, r7, r3
 8002b18:	2200      	movs	r2, #0
 8002b1a:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8002b1c:	230f      	movs	r3, #15
 8002b1e:	18fb      	adds	r3, r7, r3
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d103      	bne.n	8002b2e <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2229      	movs	r2, #41	; 0x29
 8002b2a:	2101      	movs	r1, #1
 8002b2c:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8002b2e:	230f      	movs	r3, #15
 8002b30:	18fb      	adds	r3, r7, r3
 8002b32:	781b      	ldrb	r3, [r3, #0]
}
 8002b34:	0018      	movs	r0, r3
 8002b36:	46bd      	mov	sp, r7
 8002b38:	b004      	add	sp, #16
 8002b3a:	bdb0      	pop	{r4, r5, r7, pc}
 8002b3c:	fb8fffbf 	.word	0xfb8fffbf

08002b40 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68da      	ldr	r2, [r3, #12]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	21a0      	movs	r1, #160	; 0xa0
 8002b54:	438a      	bics	r2, r1
 8002b56:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002b58:	f7fe fb3e 	bl	80011d8 <HAL_GetTick>
 8002b5c:	0003      	movs	r3, r0
 8002b5e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002b60:	e00a      	b.n	8002b78 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002b62:	f7fe fb39 	bl	80011d8 <HAL_GetTick>
 8002b66:	0002      	movs	r2, r0
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	1ad2      	subs	r2, r2, r3
 8002b6c:	23fa      	movs	r3, #250	; 0xfa
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d901      	bls.n	8002b78 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e006      	b.n	8002b86 <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	2220      	movs	r2, #32
 8002b80:	4013      	ands	r3, r2
 8002b82:	d0ee      	beq.n	8002b62 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	0018      	movs	r0, r3
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	b004      	add	sp, #16
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b084      	sub	sp, #16
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8002b96:	230f      	movs	r3, #15
 8002b98:	18fb      	adds	r3, r7, r3
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	2240      	movs	r2, #64	; 0x40
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	d12c      	bne.n	8002c04 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68da      	ldr	r2, [r3, #12]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2180      	movs	r1, #128	; 0x80
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002bba:	f7fe fb0d 	bl	80011d8 <HAL_GetTick>
 8002bbe:	0003      	movs	r3, r0
 8002bc0:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002bc2:	e014      	b.n	8002bee <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8002bc4:	f7fe fb08 	bl	80011d8 <HAL_GetTick>
 8002bc8:	0002      	movs	r2, r0
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	1ad2      	subs	r2, r2, r3
 8002bce:	200f      	movs	r0, #15
 8002bd0:	183b      	adds	r3, r7, r0
 8002bd2:	1839      	adds	r1, r7, r0
 8002bd4:	7809      	ldrb	r1, [r1, #0]
 8002bd6:	7019      	strb	r1, [r3, #0]
 8002bd8:	23fa      	movs	r3, #250	; 0xfa
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d906      	bls.n	8002bee <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8002be0:	183b      	adds	r3, r7, r0
 8002be2:	2203      	movs	r2, #3
 8002be4:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2229      	movs	r2, #41	; 0x29
 8002bea:	2103      	movs	r1, #3
 8002bec:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	2240      	movs	r2, #64	; 0x40
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	d104      	bne.n	8002c04 <RTC_EnterInitMode+0x76>
 8002bfa:	230f      	movs	r3, #15
 8002bfc:	18fb      	adds	r3, r7, r3
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	2b03      	cmp	r3, #3
 8002c02:	d1df      	bne.n	8002bc4 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002c04:	230f      	movs	r3, #15
 8002c06:	18fb      	adds	r3, r7, r3
 8002c08:	781b      	ldrb	r3, [r3, #0]
}
 8002c0a:	0018      	movs	r0, r3
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	b004      	add	sp, #16
 8002c10:	bd80      	pop	{r7, pc}
	...

08002c14 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002c14:	b590      	push	{r4, r7, lr}
 8002c16:	b085      	sub	sp, #20
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c1c:	240f      	movs	r4, #15
 8002c1e:	193b      	adds	r3, r7, r4
 8002c20:	2200      	movs	r2, #0
 8002c22:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8002c24:	4b1c      	ldr	r3, [pc, #112]	; (8002c98 <RTC_ExitInitMode+0x84>)
 8002c26:	68da      	ldr	r2, [r3, #12]
 8002c28:	4b1b      	ldr	r3, [pc, #108]	; (8002c98 <RTC_ExitInitMode+0x84>)
 8002c2a:	2180      	movs	r1, #128	; 0x80
 8002c2c:	438a      	bics	r2, r1
 8002c2e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002c30:	4b19      	ldr	r3, [pc, #100]	; (8002c98 <RTC_ExitInitMode+0x84>)
 8002c32:	699b      	ldr	r3, [r3, #24]
 8002c34:	2220      	movs	r2, #32
 8002c36:	4013      	ands	r3, r2
 8002c38:	d10d      	bne.n	8002c56 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	0018      	movs	r0, r3
 8002c3e:	f7ff ff7f 	bl	8002b40 <HAL_RTC_WaitForSynchro>
 8002c42:	1e03      	subs	r3, r0, #0
 8002c44:	d021      	beq.n	8002c8a <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2229      	movs	r2, #41	; 0x29
 8002c4a:	2103      	movs	r1, #3
 8002c4c:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8002c4e:	193b      	adds	r3, r7, r4
 8002c50:	2203      	movs	r2, #3
 8002c52:	701a      	strb	r2, [r3, #0]
 8002c54:	e019      	b.n	8002c8a <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002c56:	4b10      	ldr	r3, [pc, #64]	; (8002c98 <RTC_ExitInitMode+0x84>)
 8002c58:	699a      	ldr	r2, [r3, #24]
 8002c5a:	4b0f      	ldr	r3, [pc, #60]	; (8002c98 <RTC_ExitInitMode+0x84>)
 8002c5c:	2120      	movs	r1, #32
 8002c5e:	438a      	bics	r2, r1
 8002c60:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	0018      	movs	r0, r3
 8002c66:	f7ff ff6b 	bl	8002b40 <HAL_RTC_WaitForSynchro>
 8002c6a:	1e03      	subs	r3, r0, #0
 8002c6c:	d007      	beq.n	8002c7e <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2229      	movs	r2, #41	; 0x29
 8002c72:	2103      	movs	r1, #3
 8002c74:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8002c76:	230f      	movs	r3, #15
 8002c78:	18fb      	adds	r3, r7, r3
 8002c7a:	2203      	movs	r2, #3
 8002c7c:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002c7e:	4b06      	ldr	r3, [pc, #24]	; (8002c98 <RTC_ExitInitMode+0x84>)
 8002c80:	699a      	ldr	r2, [r3, #24]
 8002c82:	4b05      	ldr	r3, [pc, #20]	; (8002c98 <RTC_ExitInitMode+0x84>)
 8002c84:	2120      	movs	r1, #32
 8002c86:	430a      	orrs	r2, r1
 8002c88:	619a      	str	r2, [r3, #24]
  }

  return status;
 8002c8a:	230f      	movs	r3, #15
 8002c8c:	18fb      	adds	r3, r7, r3
 8002c8e:	781b      	ldrb	r3, [r3, #0]
}
 8002c90:	0018      	movs	r0, r3
 8002c92:	46bd      	mov	sp, r7
 8002c94:	b005      	add	sp, #20
 8002c96:	bd90      	pop	{r4, r7, pc}
 8002c98:	40002800 	.word	0x40002800

08002c9c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b086      	sub	sp, #24
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	60b9      	str	r1, [r7, #8]
 8002ca6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2228      	movs	r2, #40	; 0x28
 8002cac:	5c9b      	ldrb	r3, [r3, r2]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d101      	bne.n	8002cb6 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	e082      	b.n	8002dbc <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2228      	movs	r2, #40	; 0x28
 8002cba:	2101      	movs	r1, #1
 8002cbc:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2229      	movs	r2, #41	; 0x29
 8002cc2:	2102      	movs	r1, #2
 8002cc4:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	22ca      	movs	r2, #202	; 0xca
 8002ccc:	625a      	str	r2, [r3, #36]	; 0x24
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2253      	movs	r2, #83	; 0x53
 8002cd4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	699a      	ldr	r2, [r3, #24]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4938      	ldr	r1, [pc, #224]	; (8002dc4 <HAL_RTCEx_SetWakeUpTimer_IT+0x128>)
 8002ce2:	400a      	ands	r2, r1
 8002ce4:	619a      	str	r2, [r3, #24]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2104      	movs	r1, #4
 8002cf2:	430a      	orrs	r2, r1
 8002cf4:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8002cf6:	4b34      	ldr	r3, [pc, #208]	; (8002dc8 <HAL_RTCEx_SetWakeUpTimer_IT+0x12c>)
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	2240      	movs	r2, #64	; 0x40
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	d121      	bne.n	8002d44 <HAL_RTCEx_SetWakeUpTimer_IT+0xa8>
  {
    tickstart = HAL_GetTick();
 8002d00:	f7fe fa6a 	bl	80011d8 <HAL_GetTick>
 8002d04:	0003      	movs	r3, r0
 8002d06:	617b      	str	r3, [r7, #20]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8002d08:	e016      	b.n	8002d38 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002d0a:	f7fe fa65 	bl	80011d8 <HAL_GetTick>
 8002d0e:	0002      	movs	r2, r0
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	1ad2      	subs	r2, r2, r3
 8002d14:	23fa      	movs	r3, #250	; 0xfa
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d90d      	bls.n	8002d38 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	22ff      	movs	r2, #255	; 0xff
 8002d22:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2229      	movs	r2, #41	; 0x29
 8002d28:	2103      	movs	r1, #3
 8002d2a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2228      	movs	r2, #40	; 0x28
 8002d30:	2100      	movs	r1, #0
 8002d32:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e041      	b.n	8002dbc <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	2204      	movs	r2, #4
 8002d40:	4013      	ands	r3, r2
 8002d42:	d0e2      	beq.n	8002d0a <HAL_RTCEx_SetWakeUpTimer_IT+0x6e>
      }
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	68ba      	ldr	r2, [r7, #8]
 8002d4a:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	699a      	ldr	r2, [r3, #24]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2107      	movs	r1, #7
 8002d58:	438a      	bics	r2, r1
 8002d5a:	619a      	str	r2, [r3, #24]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	6999      	ldr	r1, [r3, #24]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	619a      	str	r2, [r3, #24]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8002d6c:	4a17      	ldr	r2, [pc, #92]	; (8002dcc <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 8002d6e:	2380      	movs	r3, #128	; 0x80
 8002d70:	58d3      	ldr	r3, [r2, r3]
 8002d72:	4916      	ldr	r1, [pc, #88]	; (8002dcc <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 8002d74:	2280      	movs	r2, #128	; 0x80
 8002d76:	0312      	lsls	r2, r2, #12
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	2280      	movs	r2, #128	; 0x80
 8002d7c:	508b      	str	r3, [r1, r2]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	699a      	ldr	r2, [r3, #24]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2180      	movs	r1, #128	; 0x80
 8002d8a:	01c9      	lsls	r1, r1, #7
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	619a      	str	r2, [r3, #24]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	699a      	ldr	r2, [r3, #24]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2180      	movs	r1, #128	; 0x80
 8002d9c:	00c9      	lsls	r1, r1, #3
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	22ff      	movs	r2, #255	; 0xff
 8002da8:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2229      	movs	r2, #41	; 0x29
 8002dae:	2101      	movs	r1, #1
 8002db0:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2228      	movs	r2, #40	; 0x28
 8002db6:	2100      	movs	r1, #0
 8002db8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	0018      	movs	r0, r3
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	b006      	add	sp, #24
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	fffffbff 	.word	0xfffffbff
 8002dc8:	40002800 	.word	0x40002800
 8002dcc:	40021800 	.word	0x40021800

08002dd0 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
    /* Get the pending status of the WAKEUPTIMER Interrupt */
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dde:	2204      	movs	r2, #4
 8002de0:	4013      	ands	r3, r2
 8002de2:	d00b      	beq.n	8002dfc <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>
    {
      /* Clear the WAKEUPTIMER interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2104      	movs	r1, #4
 8002df0:	430a      	orrs	r2, r1
 8002df2:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call WakeUpTimerEvent registered Callback */
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      /* WAKEUPTIMER callback */
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	0018      	movs	r0, r3
 8002df8:	f000 f808 	bl	8002e0c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2229      	movs	r2, #41	; 0x29
 8002e00:	2101      	movs	r1, #1
 8002e02:	5499      	strb	r1, [r3, r2]
}
 8002e04:	46c0      	nop			; (mov r8, r8)
 8002e06:	46bd      	mov	sp, r7
 8002e08:	b002      	add	sp, #8
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8002e14:	46c0      	nop			; (mov r8, r8)
 8002e16:	46bd      	mov	sp, r7
 8002e18:	b002      	add	sp, #8
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e04a      	b.n	8002ec4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	223d      	movs	r2, #61	; 0x3d
 8002e32:	5c9b      	ldrb	r3, [r3, r2]
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d107      	bne.n	8002e4a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	223c      	movs	r2, #60	; 0x3c
 8002e3e:	2100      	movs	r1, #0
 8002e40:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	0018      	movs	r0, r3
 8002e46:	f7fd ff55 	bl	8000cf4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	223d      	movs	r2, #61	; 0x3d
 8002e4e:	2102      	movs	r1, #2
 8002e50:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	3304      	adds	r3, #4
 8002e5a:	0019      	movs	r1, r3
 8002e5c:	0010      	movs	r0, r2
 8002e5e:	f000 fa09 	bl	8003274 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2248      	movs	r2, #72	; 0x48
 8002e66:	2101      	movs	r1, #1
 8002e68:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	223e      	movs	r2, #62	; 0x3e
 8002e6e:	2101      	movs	r1, #1
 8002e70:	5499      	strb	r1, [r3, r2]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	223f      	movs	r2, #63	; 0x3f
 8002e76:	2101      	movs	r1, #1
 8002e78:	5499      	strb	r1, [r3, r2]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2240      	movs	r2, #64	; 0x40
 8002e7e:	2101      	movs	r1, #1
 8002e80:	5499      	strb	r1, [r3, r2]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2241      	movs	r2, #65	; 0x41
 8002e86:	2101      	movs	r1, #1
 8002e88:	5499      	strb	r1, [r3, r2]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2242      	movs	r2, #66	; 0x42
 8002e8e:	2101      	movs	r1, #1
 8002e90:	5499      	strb	r1, [r3, r2]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2243      	movs	r2, #67	; 0x43
 8002e96:	2101      	movs	r1, #1
 8002e98:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2244      	movs	r2, #68	; 0x44
 8002e9e:	2101      	movs	r1, #1
 8002ea0:	5499      	strb	r1, [r3, r2]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2245      	movs	r2, #69	; 0x45
 8002ea6:	2101      	movs	r1, #1
 8002ea8:	5499      	strb	r1, [r3, r2]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2246      	movs	r2, #70	; 0x46
 8002eae:	2101      	movs	r1, #1
 8002eb0:	5499      	strb	r1, [r3, r2]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2247      	movs	r2, #71	; 0x47
 8002eb6:	2101      	movs	r1, #1
 8002eb8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	223d      	movs	r2, #61	; 0x3d
 8002ebe:	2101      	movs	r1, #1
 8002ec0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	0018      	movs	r0, r3
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	b002      	add	sp, #8
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	223d      	movs	r2, #61	; 0x3d
 8002ed8:	5c9b      	ldrb	r3, [r3, r2]
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d001      	beq.n	8002ee4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e03d      	b.n	8002f60 <HAL_TIM_Base_Start_IT+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	223d      	movs	r2, #61	; 0x3d
 8002ee8:	2102      	movs	r1, #2
 8002eea:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	68da      	ldr	r2, [r3, #12]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2101      	movs	r1, #1
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a19      	ldr	r2, [pc, #100]	; (8002f68 <HAL_TIM_Base_Start_IT+0x9c>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d00a      	beq.n	8002f1c <HAL_TIM_Base_Start_IT+0x50>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	2380      	movs	r3, #128	; 0x80
 8002f0c:	05db      	lsls	r3, r3, #23
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d004      	beq.n	8002f1c <HAL_TIM_Base_Start_IT+0x50>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a15      	ldr	r2, [pc, #84]	; (8002f6c <HAL_TIM_Base_Start_IT+0xa0>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d116      	bne.n	8002f4a <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	4a13      	ldr	r2, [pc, #76]	; (8002f70 <HAL_TIM_Base_Start_IT+0xa4>)
 8002f24:	4013      	ands	r3, r2
 8002f26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2b06      	cmp	r3, #6
 8002f2c:	d016      	beq.n	8002f5c <HAL_TIM_Base_Start_IT+0x90>
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	2380      	movs	r3, #128	; 0x80
 8002f32:	025b      	lsls	r3, r3, #9
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d011      	beq.n	8002f5c <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2101      	movs	r1, #1
 8002f44:	430a      	orrs	r2, r1
 8002f46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f48:	e008      	b.n	8002f5c <HAL_TIM_Base_Start_IT+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2101      	movs	r1, #1
 8002f56:	430a      	orrs	r2, r1
 8002f58:	601a      	str	r2, [r3, #0]
 8002f5a:	e000      	b.n	8002f5e <HAL_TIM_Base_Start_IT+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f5c:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	0018      	movs	r0, r3
 8002f62:	46bd      	mov	sp, r7
 8002f64:	b004      	add	sp, #16
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	40012c00 	.word	0x40012c00
 8002f6c:	40000400 	.word	0x40000400
 8002f70:	00010007 	.word	0x00010007

08002f74 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	68da      	ldr	r2, [r3, #12]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2101      	movs	r1, #1
 8002f88:	438a      	bics	r2, r1
 8002f8a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6a1b      	ldr	r3, [r3, #32]
 8002f92:	4a0d      	ldr	r2, [pc, #52]	; (8002fc8 <HAL_TIM_Base_Stop_IT+0x54>)
 8002f94:	4013      	ands	r3, r2
 8002f96:	d10d      	bne.n	8002fb4 <HAL_TIM_Base_Stop_IT+0x40>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	6a1b      	ldr	r3, [r3, #32]
 8002f9e:	4a0b      	ldr	r2, [pc, #44]	; (8002fcc <HAL_TIM_Base_Stop_IT+0x58>)
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	d107      	bne.n	8002fb4 <HAL_TIM_Base_Stop_IT+0x40>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2101      	movs	r1, #1
 8002fb0:	438a      	bics	r2, r1
 8002fb2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	223d      	movs	r2, #61	; 0x3d
 8002fb8:	2101      	movs	r1, #1
 8002fba:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	0018      	movs	r0, r3
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	b002      	add	sp, #8
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	46c0      	nop			; (mov r8, r8)
 8002fc8:	00001111 	.word	0x00001111
 8002fcc:	00000444 	.word	0x00000444

08002fd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	2202      	movs	r2, #2
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d124      	bne.n	8003030 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	2202      	movs	r2, #2
 8002fee:	4013      	ands	r3, r2
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d11d      	bne.n	8003030 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2203      	movs	r2, #3
 8002ffa:	4252      	negs	r2, r2
 8002ffc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2201      	movs	r2, #1
 8003002:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	2203      	movs	r2, #3
 800300c:	4013      	ands	r3, r2
 800300e:	d004      	beq.n	800301a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	0018      	movs	r0, r3
 8003014:	f000 f916 	bl	8003244 <HAL_TIM_IC_CaptureCallback>
 8003018:	e007      	b.n	800302a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	0018      	movs	r0, r3
 800301e:	f000 f909 	bl	8003234 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	0018      	movs	r0, r3
 8003026:	f000 f915 	bl	8003254 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	2204      	movs	r2, #4
 8003038:	4013      	ands	r3, r2
 800303a:	2b04      	cmp	r3, #4
 800303c:	d125      	bne.n	800308a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	2204      	movs	r2, #4
 8003046:	4013      	ands	r3, r2
 8003048:	2b04      	cmp	r3, #4
 800304a:	d11e      	bne.n	800308a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2205      	movs	r2, #5
 8003052:	4252      	negs	r2, r2
 8003054:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2202      	movs	r2, #2
 800305a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	699a      	ldr	r2, [r3, #24]
 8003062:	23c0      	movs	r3, #192	; 0xc0
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	4013      	ands	r3, r2
 8003068:	d004      	beq.n	8003074 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	0018      	movs	r0, r3
 800306e:	f000 f8e9 	bl	8003244 <HAL_TIM_IC_CaptureCallback>
 8003072:	e007      	b.n	8003084 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	0018      	movs	r0, r3
 8003078:	f000 f8dc 	bl	8003234 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	0018      	movs	r0, r3
 8003080:	f000 f8e8 	bl	8003254 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	691b      	ldr	r3, [r3, #16]
 8003090:	2208      	movs	r2, #8
 8003092:	4013      	ands	r3, r2
 8003094:	2b08      	cmp	r3, #8
 8003096:	d124      	bne.n	80030e2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	2208      	movs	r2, #8
 80030a0:	4013      	ands	r3, r2
 80030a2:	2b08      	cmp	r3, #8
 80030a4:	d11d      	bne.n	80030e2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2209      	movs	r2, #9
 80030ac:	4252      	negs	r2, r2
 80030ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2204      	movs	r2, #4
 80030b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	69db      	ldr	r3, [r3, #28]
 80030bc:	2203      	movs	r2, #3
 80030be:	4013      	ands	r3, r2
 80030c0:	d004      	beq.n	80030cc <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	0018      	movs	r0, r3
 80030c6:	f000 f8bd 	bl	8003244 <HAL_TIM_IC_CaptureCallback>
 80030ca:	e007      	b.n	80030dc <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	0018      	movs	r0, r3
 80030d0:	f000 f8b0 	bl	8003234 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	0018      	movs	r0, r3
 80030d8:	f000 f8bc 	bl	8003254 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	691b      	ldr	r3, [r3, #16]
 80030e8:	2210      	movs	r2, #16
 80030ea:	4013      	ands	r3, r2
 80030ec:	2b10      	cmp	r3, #16
 80030ee:	d125      	bne.n	800313c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	2210      	movs	r2, #16
 80030f8:	4013      	ands	r3, r2
 80030fa:	2b10      	cmp	r3, #16
 80030fc:	d11e      	bne.n	800313c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2211      	movs	r2, #17
 8003104:	4252      	negs	r2, r2
 8003106:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2208      	movs	r2, #8
 800310c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	69da      	ldr	r2, [r3, #28]
 8003114:	23c0      	movs	r3, #192	; 0xc0
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	4013      	ands	r3, r2
 800311a:	d004      	beq.n	8003126 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	0018      	movs	r0, r3
 8003120:	f000 f890 	bl	8003244 <HAL_TIM_IC_CaptureCallback>
 8003124:	e007      	b.n	8003136 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	0018      	movs	r0, r3
 800312a:	f000 f883 	bl	8003234 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	0018      	movs	r0, r3
 8003132:	f000 f88f 	bl	8003254 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	2201      	movs	r2, #1
 8003144:	4013      	ands	r3, r2
 8003146:	2b01      	cmp	r3, #1
 8003148:	d10f      	bne.n	800316a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	2201      	movs	r2, #1
 8003152:	4013      	ands	r3, r2
 8003154:	2b01      	cmp	r3, #1
 8003156:	d108      	bne.n	800316a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2202      	movs	r2, #2
 800315e:	4252      	negs	r2, r2
 8003160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	0018      	movs	r0, r3
 8003166:	f7fd fd3b 	bl	8000be0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	691b      	ldr	r3, [r3, #16]
 8003170:	2280      	movs	r2, #128	; 0x80
 8003172:	4013      	ands	r3, r2
 8003174:	2b80      	cmp	r3, #128	; 0x80
 8003176:	d10f      	bne.n	8003198 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	2280      	movs	r2, #128	; 0x80
 8003180:	4013      	ands	r3, r2
 8003182:	2b80      	cmp	r3, #128	; 0x80
 8003184:	d108      	bne.n	8003198 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2281      	movs	r2, #129	; 0x81
 800318c:	4252      	negs	r2, r2
 800318e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	0018      	movs	r0, r3
 8003194:	f000 f8ec 	bl	8003370 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	691a      	ldr	r2, [r3, #16]
 800319e:	2380      	movs	r3, #128	; 0x80
 80031a0:	005b      	lsls	r3, r3, #1
 80031a2:	401a      	ands	r2, r3
 80031a4:	2380      	movs	r3, #128	; 0x80
 80031a6:	005b      	lsls	r3, r3, #1
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d10e      	bne.n	80031ca <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	2280      	movs	r2, #128	; 0x80
 80031b4:	4013      	ands	r3, r2
 80031b6:	2b80      	cmp	r3, #128	; 0x80
 80031b8:	d107      	bne.n	80031ca <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a1c      	ldr	r2, [pc, #112]	; (8003230 <HAL_TIM_IRQHandler+0x260>)
 80031c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	0018      	movs	r0, r3
 80031c6:	f000 f8db 	bl	8003380 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	2240      	movs	r2, #64	; 0x40
 80031d2:	4013      	ands	r3, r2
 80031d4:	2b40      	cmp	r3, #64	; 0x40
 80031d6:	d10f      	bne.n	80031f8 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	2240      	movs	r2, #64	; 0x40
 80031e0:	4013      	ands	r3, r2
 80031e2:	2b40      	cmp	r3, #64	; 0x40
 80031e4:	d108      	bne.n	80031f8 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2241      	movs	r2, #65	; 0x41
 80031ec:	4252      	negs	r2, r2
 80031ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	0018      	movs	r0, r3
 80031f4:	f000 f836 	bl	8003264 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	2220      	movs	r2, #32
 8003200:	4013      	ands	r3, r2
 8003202:	2b20      	cmp	r3, #32
 8003204:	d10f      	bne.n	8003226 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	2220      	movs	r2, #32
 800320e:	4013      	ands	r3, r2
 8003210:	2b20      	cmp	r3, #32
 8003212:	d108      	bne.n	8003226 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2221      	movs	r2, #33	; 0x21
 800321a:	4252      	negs	r2, r2
 800321c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	0018      	movs	r0, r3
 8003222:	f000 f89d 	bl	8003360 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003226:	46c0      	nop			; (mov r8, r8)
 8003228:	46bd      	mov	sp, r7
 800322a:	b002      	add	sp, #8
 800322c:	bd80      	pop	{r7, pc}
 800322e:	46c0      	nop			; (mov r8, r8)
 8003230:	fffffeff 	.word	0xfffffeff

08003234 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800323c:	46c0      	nop			; (mov r8, r8)
 800323e:	46bd      	mov	sp, r7
 8003240:	b002      	add	sp, #8
 8003242:	bd80      	pop	{r7, pc}

08003244 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800324c:	46c0      	nop			; (mov r8, r8)
 800324e:	46bd      	mov	sp, r7
 8003250:	b002      	add	sp, #8
 8003252:	bd80      	pop	{r7, pc}

08003254 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800325c:	46c0      	nop			; (mov r8, r8)
 800325e:	46bd      	mov	sp, r7
 8003260:	b002      	add	sp, #8
 8003262:	bd80      	pop	{r7, pc}

08003264 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800326c:	46c0      	nop			; (mov r8, r8)
 800326e:	46bd      	mov	sp, r7
 8003270:	b002      	add	sp, #8
 8003272:	bd80      	pop	{r7, pc}

08003274 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a30      	ldr	r2, [pc, #192]	; (8003348 <TIM_Base_SetConfig+0xd4>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d008      	beq.n	800329e <TIM_Base_SetConfig+0x2a>
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	2380      	movs	r3, #128	; 0x80
 8003290:	05db      	lsls	r3, r3, #23
 8003292:	429a      	cmp	r2, r3
 8003294:	d003      	beq.n	800329e <TIM_Base_SetConfig+0x2a>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a2c      	ldr	r2, [pc, #176]	; (800334c <TIM_Base_SetConfig+0xd8>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d108      	bne.n	80032b0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2270      	movs	r2, #112	; 0x70
 80032a2:	4393      	bics	r3, r2
 80032a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4a25      	ldr	r2, [pc, #148]	; (8003348 <TIM_Base_SetConfig+0xd4>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d014      	beq.n	80032e2 <TIM_Base_SetConfig+0x6e>
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	2380      	movs	r3, #128	; 0x80
 80032bc:	05db      	lsls	r3, r3, #23
 80032be:	429a      	cmp	r2, r3
 80032c0:	d00f      	beq.n	80032e2 <TIM_Base_SetConfig+0x6e>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a21      	ldr	r2, [pc, #132]	; (800334c <TIM_Base_SetConfig+0xd8>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d00b      	beq.n	80032e2 <TIM_Base_SetConfig+0x6e>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a20      	ldr	r2, [pc, #128]	; (8003350 <TIM_Base_SetConfig+0xdc>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d007      	beq.n	80032e2 <TIM_Base_SetConfig+0x6e>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a1f      	ldr	r2, [pc, #124]	; (8003354 <TIM_Base_SetConfig+0xe0>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d003      	beq.n	80032e2 <TIM_Base_SetConfig+0x6e>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a1e      	ldr	r2, [pc, #120]	; (8003358 <TIM_Base_SetConfig+0xe4>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d108      	bne.n	80032f4 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	4a1d      	ldr	r2, [pc, #116]	; (800335c <TIM_Base_SetConfig+0xe8>)
 80032e6:	4013      	ands	r3, r2
 80032e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2280      	movs	r2, #128	; 0x80
 80032f8:	4393      	bics	r3, r2
 80032fa:	001a      	movs	r2, r3
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	695b      	ldr	r3, [r3, #20]
 8003300:	4313      	orrs	r3, r2
 8003302:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	689a      	ldr	r2, [r3, #8]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a0a      	ldr	r2, [pc, #40]	; (8003348 <TIM_Base_SetConfig+0xd4>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d007      	beq.n	8003332 <TIM_Base_SetConfig+0xbe>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a0b      	ldr	r2, [pc, #44]	; (8003354 <TIM_Base_SetConfig+0xe0>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d003      	beq.n	8003332 <TIM_Base_SetConfig+0xbe>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a0a      	ldr	r2, [pc, #40]	; (8003358 <TIM_Base_SetConfig+0xe4>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d103      	bne.n	800333a <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	691a      	ldr	r2, [r3, #16]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2201      	movs	r2, #1
 800333e:	615a      	str	r2, [r3, #20]
}
 8003340:	46c0      	nop			; (mov r8, r8)
 8003342:	46bd      	mov	sp, r7
 8003344:	b004      	add	sp, #16
 8003346:	bd80      	pop	{r7, pc}
 8003348:	40012c00 	.word	0x40012c00
 800334c:	40000400 	.word	0x40000400
 8003350:	40002000 	.word	0x40002000
 8003354:	40014400 	.word	0x40014400
 8003358:	40014800 	.word	0x40014800
 800335c:	fffffcff 	.word	0xfffffcff

08003360 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003368:	46c0      	nop			; (mov r8, r8)
 800336a:	46bd      	mov	sp, r7
 800336c:	b002      	add	sp, #8
 800336e:	bd80      	pop	{r7, pc}

08003370 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003378:	46c0      	nop			; (mov r8, r8)
 800337a:	46bd      	mov	sp, r7
 800337c:	b002      	add	sp, #8
 800337e:	bd80      	pop	{r7, pc}

08003380 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003388:	46c0      	nop			; (mov r8, r8)
 800338a:	46bd      	mov	sp, r7
 800338c:	b002      	add	sp, #8
 800338e:	bd80      	pop	{r7, pc}

08003390 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d101      	bne.n	80033a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e046      	b.n	8003430 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2288      	movs	r2, #136	; 0x88
 80033a6:	589b      	ldr	r3, [r3, r2]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d107      	bne.n	80033bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2284      	movs	r2, #132	; 0x84
 80033b0:	2100      	movs	r1, #0
 80033b2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	0018      	movs	r0, r3
 80033b8:	f7fd fcc4 	bl	8000d44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2288      	movs	r2, #136	; 0x88
 80033c0:	2124      	movs	r1, #36	; 0x24
 80033c2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2101      	movs	r1, #1
 80033d0:	438a      	bics	r2, r1
 80033d2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	0018      	movs	r0, r3
 80033d8:	f000 fc12 	bl	8003c00 <UART_SetConfig>
 80033dc:	0003      	movs	r3, r0
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d101      	bne.n	80033e6 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e024      	b.n	8003430 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d003      	beq.n	80033f6 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	0018      	movs	r0, r3
 80033f2:	f000 fe7d 	bl	80040f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	685a      	ldr	r2, [r3, #4]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	490d      	ldr	r1, [pc, #52]	; (8003438 <HAL_UART_Init+0xa8>)
 8003402:	400a      	ands	r2, r1
 8003404:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	689a      	ldr	r2, [r3, #8]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	212a      	movs	r1, #42	; 0x2a
 8003412:	438a      	bics	r2, r1
 8003414:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2101      	movs	r1, #1
 8003422:	430a      	orrs	r2, r1
 8003424:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	0018      	movs	r0, r3
 800342a:	f000 ff15 	bl	8004258 <UART_CheckIdleState>
 800342e:	0003      	movs	r3, r0
}
 8003430:	0018      	movs	r0, r3
 8003432:	46bd      	mov	sp, r7
 8003434:	b002      	add	sp, #8
 8003436:	bd80      	pop	{r7, pc}
 8003438:	ffffb7ff 	.word	0xffffb7ff

0800343c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b08a      	sub	sp, #40	; 0x28
 8003440:	af02      	add	r7, sp, #8
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	603b      	str	r3, [r7, #0]
 8003448:	1dbb      	adds	r3, r7, #6
 800344a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2288      	movs	r2, #136	; 0x88
 8003450:	589b      	ldr	r3, [r3, r2]
 8003452:	2b20      	cmp	r3, #32
 8003454:	d000      	beq.n	8003458 <HAL_UART_Transmit+0x1c>
 8003456:	e088      	b.n	800356a <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d003      	beq.n	8003466 <HAL_UART_Transmit+0x2a>
 800345e:	1dbb      	adds	r3, r7, #6
 8003460:	881b      	ldrh	r3, [r3, #0]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d101      	bne.n	800346a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e080      	b.n	800356c <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	689a      	ldr	r2, [r3, #8]
 800346e:	2380      	movs	r3, #128	; 0x80
 8003470:	015b      	lsls	r3, r3, #5
 8003472:	429a      	cmp	r2, r3
 8003474:	d109      	bne.n	800348a <HAL_UART_Transmit+0x4e>
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d105      	bne.n	800348a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	2201      	movs	r2, #1
 8003482:	4013      	ands	r3, r2
 8003484:	d001      	beq.n	800348a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e070      	b.n	800356c <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2290      	movs	r2, #144	; 0x90
 800348e:	2100      	movs	r1, #0
 8003490:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2288      	movs	r2, #136	; 0x88
 8003496:	2121      	movs	r1, #33	; 0x21
 8003498:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800349a:	f7fd fe9d 	bl	80011d8 <HAL_GetTick>
 800349e:	0003      	movs	r3, r0
 80034a0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	1dba      	adds	r2, r7, #6
 80034a6:	2154      	movs	r1, #84	; 0x54
 80034a8:	8812      	ldrh	r2, [r2, #0]
 80034aa:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	1dba      	adds	r2, r7, #6
 80034b0:	2156      	movs	r1, #86	; 0x56
 80034b2:	8812      	ldrh	r2, [r2, #0]
 80034b4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	689a      	ldr	r2, [r3, #8]
 80034ba:	2380      	movs	r3, #128	; 0x80
 80034bc:	015b      	lsls	r3, r3, #5
 80034be:	429a      	cmp	r2, r3
 80034c0:	d108      	bne.n	80034d4 <HAL_UART_Transmit+0x98>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d104      	bne.n	80034d4 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80034ca:	2300      	movs	r3, #0
 80034cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	61bb      	str	r3, [r7, #24]
 80034d2:	e003      	b.n	80034dc <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034d8:	2300      	movs	r3, #0
 80034da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80034dc:	e02c      	b.n	8003538 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034de:	697a      	ldr	r2, [r7, #20]
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	9300      	str	r3, [sp, #0]
 80034e6:	0013      	movs	r3, r2
 80034e8:	2200      	movs	r2, #0
 80034ea:	2180      	movs	r1, #128	; 0x80
 80034ec:	f000 ff02 	bl	80042f4 <UART_WaitOnFlagUntilTimeout>
 80034f0:	1e03      	subs	r3, r0, #0
 80034f2:	d001      	beq.n	80034f8 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e039      	b.n	800356c <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d10b      	bne.n	8003516 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	881b      	ldrh	r3, [r3, #0]
 8003502:	001a      	movs	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	05d2      	lsls	r2, r2, #23
 800350a:	0dd2      	lsrs	r2, r2, #23
 800350c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	3302      	adds	r3, #2
 8003512:	61bb      	str	r3, [r7, #24]
 8003514:	e007      	b.n	8003526 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	781a      	ldrb	r2, [r3, #0]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	3301      	adds	r3, #1
 8003524:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2256      	movs	r2, #86	; 0x56
 800352a:	5a9b      	ldrh	r3, [r3, r2]
 800352c:	b29b      	uxth	r3, r3
 800352e:	3b01      	subs	r3, #1
 8003530:	b299      	uxth	r1, r3
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2256      	movs	r2, #86	; 0x56
 8003536:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2256      	movs	r2, #86	; 0x56
 800353c:	5a9b      	ldrh	r3, [r3, r2]
 800353e:	b29b      	uxth	r3, r3
 8003540:	2b00      	cmp	r3, #0
 8003542:	d1cc      	bne.n	80034de <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003544:	697a      	ldr	r2, [r7, #20]
 8003546:	68f8      	ldr	r0, [r7, #12]
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	9300      	str	r3, [sp, #0]
 800354c:	0013      	movs	r3, r2
 800354e:	2200      	movs	r2, #0
 8003550:	2140      	movs	r1, #64	; 0x40
 8003552:	f000 fecf 	bl	80042f4 <UART_WaitOnFlagUntilTimeout>
 8003556:	1e03      	subs	r3, r0, #0
 8003558:	d001      	beq.n	800355e <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e006      	b.n	800356c <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2288      	movs	r2, #136	; 0x88
 8003562:	2120      	movs	r1, #32
 8003564:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003566:	2300      	movs	r3, #0
 8003568:	e000      	b.n	800356c <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 800356a:	2302      	movs	r3, #2
  }
}
 800356c:	0018      	movs	r0, r3
 800356e:	46bd      	mov	sp, r7
 8003570:	b008      	add	sp, #32
 8003572:	bd80      	pop	{r7, pc}

08003574 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003574:	b5b0      	push	{r4, r5, r7, lr}
 8003576:	b0aa      	sub	sp, #168	; 0xa8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	22a4      	movs	r2, #164	; 0xa4
 8003584:	18b9      	adds	r1, r7, r2
 8003586:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	20a0      	movs	r0, #160	; 0xa0
 8003590:	1839      	adds	r1, r7, r0
 8003592:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	249c      	movs	r4, #156	; 0x9c
 800359c:	1939      	adds	r1, r7, r4
 800359e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80035a0:	0011      	movs	r1, r2
 80035a2:	18bb      	adds	r3, r7, r2
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4aa2      	ldr	r2, [pc, #648]	; (8003830 <HAL_UART_IRQHandler+0x2bc>)
 80035a8:	4013      	ands	r3, r2
 80035aa:	2298      	movs	r2, #152	; 0x98
 80035ac:	18bd      	adds	r5, r7, r2
 80035ae:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80035b0:	18bb      	adds	r3, r7, r2
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d11a      	bne.n	80035ee <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80035b8:	187b      	adds	r3, r7, r1
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2220      	movs	r2, #32
 80035be:	4013      	ands	r3, r2
 80035c0:	d015      	beq.n	80035ee <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80035c2:	183b      	adds	r3, r7, r0
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2220      	movs	r2, #32
 80035c8:	4013      	ands	r3, r2
 80035ca:	d105      	bne.n	80035d8 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80035cc:	193b      	adds	r3, r7, r4
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	2380      	movs	r3, #128	; 0x80
 80035d2:	055b      	lsls	r3, r3, #21
 80035d4:	4013      	ands	r3, r2
 80035d6:	d00a      	beq.n	80035ee <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d100      	bne.n	80035e2 <HAL_UART_IRQHandler+0x6e>
 80035e0:	e2dc      	b.n	8003b9c <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	0010      	movs	r0, r2
 80035ea:	4798      	blx	r3
      }
      return;
 80035ec:	e2d6      	b.n	8003b9c <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80035ee:	2398      	movs	r3, #152	; 0x98
 80035f0:	18fb      	adds	r3, r7, r3
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d100      	bne.n	80035fa <HAL_UART_IRQHandler+0x86>
 80035f8:	e122      	b.n	8003840 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80035fa:	239c      	movs	r3, #156	; 0x9c
 80035fc:	18fb      	adds	r3, r7, r3
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a8c      	ldr	r2, [pc, #560]	; (8003834 <HAL_UART_IRQHandler+0x2c0>)
 8003602:	4013      	ands	r3, r2
 8003604:	d106      	bne.n	8003614 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003606:	23a0      	movs	r3, #160	; 0xa0
 8003608:	18fb      	adds	r3, r7, r3
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a8a      	ldr	r2, [pc, #552]	; (8003838 <HAL_UART_IRQHandler+0x2c4>)
 800360e:	4013      	ands	r3, r2
 8003610:	d100      	bne.n	8003614 <HAL_UART_IRQHandler+0xa0>
 8003612:	e115      	b.n	8003840 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003614:	23a4      	movs	r3, #164	; 0xa4
 8003616:	18fb      	adds	r3, r7, r3
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2201      	movs	r2, #1
 800361c:	4013      	ands	r3, r2
 800361e:	d012      	beq.n	8003646 <HAL_UART_IRQHandler+0xd2>
 8003620:	23a0      	movs	r3, #160	; 0xa0
 8003622:	18fb      	adds	r3, r7, r3
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	2380      	movs	r3, #128	; 0x80
 8003628:	005b      	lsls	r3, r3, #1
 800362a:	4013      	ands	r3, r2
 800362c:	d00b      	beq.n	8003646 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2201      	movs	r2, #1
 8003634:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2290      	movs	r2, #144	; 0x90
 800363a:	589b      	ldr	r3, [r3, r2]
 800363c:	2201      	movs	r2, #1
 800363e:	431a      	orrs	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2190      	movs	r1, #144	; 0x90
 8003644:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003646:	23a4      	movs	r3, #164	; 0xa4
 8003648:	18fb      	adds	r3, r7, r3
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2202      	movs	r2, #2
 800364e:	4013      	ands	r3, r2
 8003650:	d011      	beq.n	8003676 <HAL_UART_IRQHandler+0x102>
 8003652:	239c      	movs	r3, #156	; 0x9c
 8003654:	18fb      	adds	r3, r7, r3
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2201      	movs	r2, #1
 800365a:	4013      	ands	r3, r2
 800365c:	d00b      	beq.n	8003676 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2202      	movs	r2, #2
 8003664:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2290      	movs	r2, #144	; 0x90
 800366a:	589b      	ldr	r3, [r3, r2]
 800366c:	2204      	movs	r2, #4
 800366e:	431a      	orrs	r2, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2190      	movs	r1, #144	; 0x90
 8003674:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003676:	23a4      	movs	r3, #164	; 0xa4
 8003678:	18fb      	adds	r3, r7, r3
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2204      	movs	r2, #4
 800367e:	4013      	ands	r3, r2
 8003680:	d011      	beq.n	80036a6 <HAL_UART_IRQHandler+0x132>
 8003682:	239c      	movs	r3, #156	; 0x9c
 8003684:	18fb      	adds	r3, r7, r3
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2201      	movs	r2, #1
 800368a:	4013      	ands	r3, r2
 800368c:	d00b      	beq.n	80036a6 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2204      	movs	r2, #4
 8003694:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2290      	movs	r2, #144	; 0x90
 800369a:	589b      	ldr	r3, [r3, r2]
 800369c:	2202      	movs	r2, #2
 800369e:	431a      	orrs	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2190      	movs	r1, #144	; 0x90
 80036a4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80036a6:	23a4      	movs	r3, #164	; 0xa4
 80036a8:	18fb      	adds	r3, r7, r3
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2208      	movs	r2, #8
 80036ae:	4013      	ands	r3, r2
 80036b0:	d017      	beq.n	80036e2 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80036b2:	23a0      	movs	r3, #160	; 0xa0
 80036b4:	18fb      	adds	r3, r7, r3
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2220      	movs	r2, #32
 80036ba:	4013      	ands	r3, r2
 80036bc:	d105      	bne.n	80036ca <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80036be:	239c      	movs	r3, #156	; 0x9c
 80036c0:	18fb      	adds	r3, r7, r3
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a5b      	ldr	r2, [pc, #364]	; (8003834 <HAL_UART_IRQHandler+0x2c0>)
 80036c6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80036c8:	d00b      	beq.n	80036e2 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2208      	movs	r2, #8
 80036d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2290      	movs	r2, #144	; 0x90
 80036d6:	589b      	ldr	r3, [r3, r2]
 80036d8:	2208      	movs	r2, #8
 80036da:	431a      	orrs	r2, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2190      	movs	r1, #144	; 0x90
 80036e0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80036e2:	23a4      	movs	r3, #164	; 0xa4
 80036e4:	18fb      	adds	r3, r7, r3
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	2380      	movs	r3, #128	; 0x80
 80036ea:	011b      	lsls	r3, r3, #4
 80036ec:	4013      	ands	r3, r2
 80036ee:	d013      	beq.n	8003718 <HAL_UART_IRQHandler+0x1a4>
 80036f0:	23a0      	movs	r3, #160	; 0xa0
 80036f2:	18fb      	adds	r3, r7, r3
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	2380      	movs	r3, #128	; 0x80
 80036f8:	04db      	lsls	r3, r3, #19
 80036fa:	4013      	ands	r3, r2
 80036fc:	d00c      	beq.n	8003718 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2280      	movs	r2, #128	; 0x80
 8003704:	0112      	lsls	r2, r2, #4
 8003706:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2290      	movs	r2, #144	; 0x90
 800370c:	589b      	ldr	r3, [r3, r2]
 800370e:	2220      	movs	r2, #32
 8003710:	431a      	orrs	r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2190      	movs	r1, #144	; 0x90
 8003716:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2290      	movs	r2, #144	; 0x90
 800371c:	589b      	ldr	r3, [r3, r2]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d100      	bne.n	8003724 <HAL_UART_IRQHandler+0x1b0>
 8003722:	e23d      	b.n	8003ba0 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003724:	23a4      	movs	r3, #164	; 0xa4
 8003726:	18fb      	adds	r3, r7, r3
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2220      	movs	r2, #32
 800372c:	4013      	ands	r3, r2
 800372e:	d015      	beq.n	800375c <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003730:	23a0      	movs	r3, #160	; 0xa0
 8003732:	18fb      	adds	r3, r7, r3
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2220      	movs	r2, #32
 8003738:	4013      	ands	r3, r2
 800373a:	d106      	bne.n	800374a <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800373c:	239c      	movs	r3, #156	; 0x9c
 800373e:	18fb      	adds	r3, r7, r3
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	2380      	movs	r3, #128	; 0x80
 8003744:	055b      	lsls	r3, r3, #21
 8003746:	4013      	ands	r3, r2
 8003748:	d008      	beq.n	800375c <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800374e:	2b00      	cmp	r3, #0
 8003750:	d004      	beq.n	800375c <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	0010      	movs	r0, r2
 800375a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2290      	movs	r2, #144	; 0x90
 8003760:	589b      	ldr	r3, [r3, r2]
 8003762:	2194      	movs	r1, #148	; 0x94
 8003764:	187a      	adds	r2, r7, r1
 8003766:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	2240      	movs	r2, #64	; 0x40
 8003770:	4013      	ands	r3, r2
 8003772:	2b40      	cmp	r3, #64	; 0x40
 8003774:	d004      	beq.n	8003780 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003776:	187b      	adds	r3, r7, r1
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2228      	movs	r2, #40	; 0x28
 800377c:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800377e:	d04c      	beq.n	800381a <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	0018      	movs	r0, r3
 8003784:	f000 ff64 	bl	8004650 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	2240      	movs	r2, #64	; 0x40
 8003790:	4013      	ands	r3, r2
 8003792:	2b40      	cmp	r3, #64	; 0x40
 8003794:	d13c      	bne.n	8003810 <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003796:	f3ef 8310 	mrs	r3, PRIMASK
 800379a:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800379c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800379e:	2090      	movs	r0, #144	; 0x90
 80037a0:	183a      	adds	r2, r7, r0
 80037a2:	6013      	str	r3, [r2, #0]
 80037a4:	2301      	movs	r3, #1
 80037a6:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037aa:	f383 8810 	msr	PRIMASK, r3
}
 80037ae:	46c0      	nop			; (mov r8, r8)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	689a      	ldr	r2, [r3, #8]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2140      	movs	r1, #64	; 0x40
 80037bc:	438a      	bics	r2, r1
 80037be:	609a      	str	r2, [r3, #8]
 80037c0:	183b      	adds	r3, r7, r0
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80037c8:	f383 8810 	msr	PRIMASK, r3
}
 80037cc:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2280      	movs	r2, #128	; 0x80
 80037d2:	589b      	ldr	r3, [r3, r2]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d016      	beq.n	8003806 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2280      	movs	r2, #128	; 0x80
 80037dc:	589b      	ldr	r3, [r3, r2]
 80037de:	4a17      	ldr	r2, [pc, #92]	; (800383c <HAL_UART_IRQHandler+0x2c8>)
 80037e0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2280      	movs	r2, #128	; 0x80
 80037e6:	589b      	ldr	r3, [r3, r2]
 80037e8:	0018      	movs	r0, r3
 80037ea:	f7fd ff4f 	bl	800168c <HAL_DMA_Abort_IT>
 80037ee:	1e03      	subs	r3, r0, #0
 80037f0:	d01c      	beq.n	800382c <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2280      	movs	r2, #128	; 0x80
 80037f6:	589b      	ldr	r3, [r3, r2]
 80037f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	2180      	movs	r1, #128	; 0x80
 80037fe:	5852      	ldr	r2, [r2, r1]
 8003800:	0010      	movs	r0, r2
 8003802:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003804:	e012      	b.n	800382c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	0018      	movs	r0, r3
 800380a:	f000 f9f1 	bl	8003bf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800380e:	e00d      	b.n	800382c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	0018      	movs	r0, r3
 8003814:	f000 f9ec 	bl	8003bf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003818:	e008      	b.n	800382c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	0018      	movs	r0, r3
 800381e:	f000 f9e7 	bl	8003bf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2290      	movs	r2, #144	; 0x90
 8003826:	2100      	movs	r1, #0
 8003828:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800382a:	e1b9      	b.n	8003ba0 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800382c:	46c0      	nop			; (mov r8, r8)
    return;
 800382e:	e1b7      	b.n	8003ba0 <HAL_UART_IRQHandler+0x62c>
 8003830:	0000080f 	.word	0x0000080f
 8003834:	10000001 	.word	0x10000001
 8003838:	04000120 	.word	0x04000120
 800383c:	08004915 	.word	0x08004915

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003844:	2b01      	cmp	r3, #1
 8003846:	d000      	beq.n	800384a <HAL_UART_IRQHandler+0x2d6>
 8003848:	e13e      	b.n	8003ac8 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800384a:	23a4      	movs	r3, #164	; 0xa4
 800384c:	18fb      	adds	r3, r7, r3
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2210      	movs	r2, #16
 8003852:	4013      	ands	r3, r2
 8003854:	d100      	bne.n	8003858 <HAL_UART_IRQHandler+0x2e4>
 8003856:	e137      	b.n	8003ac8 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003858:	23a0      	movs	r3, #160	; 0xa0
 800385a:	18fb      	adds	r3, r7, r3
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2210      	movs	r2, #16
 8003860:	4013      	ands	r3, r2
 8003862:	d100      	bne.n	8003866 <HAL_UART_IRQHandler+0x2f2>
 8003864:	e130      	b.n	8003ac8 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2210      	movs	r2, #16
 800386c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	2240      	movs	r2, #64	; 0x40
 8003876:	4013      	ands	r3, r2
 8003878:	2b40      	cmp	r3, #64	; 0x40
 800387a:	d000      	beq.n	800387e <HAL_UART_IRQHandler+0x30a>
 800387c:	e0a4      	b.n	80039c8 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2280      	movs	r2, #128	; 0x80
 8003882:	589b      	ldr	r3, [r3, r2]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	685a      	ldr	r2, [r3, #4]
 8003888:	217e      	movs	r1, #126	; 0x7e
 800388a:	187b      	adds	r3, r7, r1
 800388c:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800388e:	187b      	adds	r3, r7, r1
 8003890:	881b      	ldrh	r3, [r3, #0]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d100      	bne.n	8003898 <HAL_UART_IRQHandler+0x324>
 8003896:	e185      	b.n	8003ba4 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	225c      	movs	r2, #92	; 0x5c
 800389c:	5a9b      	ldrh	r3, [r3, r2]
 800389e:	187a      	adds	r2, r7, r1
 80038a0:	8812      	ldrh	r2, [r2, #0]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d300      	bcc.n	80038a8 <HAL_UART_IRQHandler+0x334>
 80038a6:	e17d      	b.n	8003ba4 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	187a      	adds	r2, r7, r1
 80038ac:	215e      	movs	r1, #94	; 0x5e
 80038ae:	8812      	ldrh	r2, [r2, #0]
 80038b0:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2280      	movs	r2, #128	; 0x80
 80038b6:	589b      	ldr	r3, [r3, r2]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2220      	movs	r2, #32
 80038be:	4013      	ands	r3, r2
 80038c0:	d170      	bne.n	80039a4 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038c2:	f3ef 8310 	mrs	r3, PRIMASK
 80038c6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80038c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038ca:	67bb      	str	r3, [r7, #120]	; 0x78
 80038cc:	2301      	movs	r3, #1
 80038ce:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038d2:	f383 8810 	msr	PRIMASK, r3
}
 80038d6:	46c0      	nop			; (mov r8, r8)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	49b4      	ldr	r1, [pc, #720]	; (8003bb4 <HAL_UART_IRQHandler+0x640>)
 80038e4:	400a      	ands	r2, r1
 80038e6:	601a      	str	r2, [r3, #0]
 80038e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038ea:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ee:	f383 8810 	msr	PRIMASK, r3
}
 80038f2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038f4:	f3ef 8310 	mrs	r3, PRIMASK
 80038f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80038fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038fc:	677b      	str	r3, [r7, #116]	; 0x74
 80038fe:	2301      	movs	r3, #1
 8003900:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003902:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003904:	f383 8810 	msr	PRIMASK, r3
}
 8003908:	46c0      	nop			; (mov r8, r8)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	689a      	ldr	r2, [r3, #8]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2101      	movs	r1, #1
 8003916:	438a      	bics	r2, r1
 8003918:	609a      	str	r2, [r3, #8]
 800391a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800391c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800391e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003920:	f383 8810 	msr	PRIMASK, r3
}
 8003924:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003926:	f3ef 8310 	mrs	r3, PRIMASK
 800392a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800392c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800392e:	673b      	str	r3, [r7, #112]	; 0x70
 8003930:	2301      	movs	r3, #1
 8003932:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003934:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003936:	f383 8810 	msr	PRIMASK, r3
}
 800393a:	46c0      	nop			; (mov r8, r8)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	689a      	ldr	r2, [r3, #8]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2140      	movs	r1, #64	; 0x40
 8003948:	438a      	bics	r2, r1
 800394a:	609a      	str	r2, [r3, #8]
 800394c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800394e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003950:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003952:	f383 8810 	msr	PRIMASK, r3
}
 8003956:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	228c      	movs	r2, #140	; 0x8c
 800395c:	2120      	movs	r1, #32
 800395e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003966:	f3ef 8310 	mrs	r3, PRIMASK
 800396a:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800396c:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800396e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003970:	2301      	movs	r3, #1
 8003972:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003974:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003976:	f383 8810 	msr	PRIMASK, r3
}
 800397a:	46c0      	nop			; (mov r8, r8)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2110      	movs	r1, #16
 8003988:	438a      	bics	r2, r1
 800398a:	601a      	str	r2, [r3, #0]
 800398c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800398e:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003990:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003992:	f383 8810 	msr	PRIMASK, r3
}
 8003996:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2280      	movs	r2, #128	; 0x80
 800399c:	589b      	ldr	r3, [r3, r2]
 800399e:	0018      	movs	r0, r3
 80039a0:	f7fd fe12 	bl	80015c8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2202      	movs	r2, #2
 80039a8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	225c      	movs	r2, #92	; 0x5c
 80039ae:	5a9a      	ldrh	r2, [r3, r2]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	215e      	movs	r1, #94	; 0x5e
 80039b4:	5a5b      	ldrh	r3, [r3, r1]
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	b29a      	uxth	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	0011      	movs	r1, r2
 80039c0:	0018      	movs	r0, r3
 80039c2:	f7fd f8db 	bl	8000b7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80039c6:	e0ed      	b.n	8003ba4 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	225c      	movs	r2, #92	; 0x5c
 80039cc:	5a99      	ldrh	r1, [r3, r2]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	225e      	movs	r2, #94	; 0x5e
 80039d2:	5a9b      	ldrh	r3, [r3, r2]
 80039d4:	b29a      	uxth	r2, r3
 80039d6:	208e      	movs	r0, #142	; 0x8e
 80039d8:	183b      	adds	r3, r7, r0
 80039da:	1a8a      	subs	r2, r1, r2
 80039dc:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	225e      	movs	r2, #94	; 0x5e
 80039e2:	5a9b      	ldrh	r3, [r3, r2]
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d100      	bne.n	80039ec <HAL_UART_IRQHandler+0x478>
 80039ea:	e0dd      	b.n	8003ba8 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 80039ec:	183b      	adds	r3, r7, r0
 80039ee:	881b      	ldrh	r3, [r3, #0]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d100      	bne.n	80039f6 <HAL_UART_IRQHandler+0x482>
 80039f4:	e0d8      	b.n	8003ba8 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039f6:	f3ef 8310 	mrs	r3, PRIMASK
 80039fa:	60fb      	str	r3, [r7, #12]
  return(result);
 80039fc:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80039fe:	2488      	movs	r4, #136	; 0x88
 8003a00:	193a      	adds	r2, r7, r4
 8003a02:	6013      	str	r3, [r2, #0]
 8003a04:	2301      	movs	r3, #1
 8003a06:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	f383 8810 	msr	PRIMASK, r3
}
 8003a0e:	46c0      	nop			; (mov r8, r8)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4967      	ldr	r1, [pc, #412]	; (8003bb8 <HAL_UART_IRQHandler+0x644>)
 8003a1c:	400a      	ands	r2, r1
 8003a1e:	601a      	str	r2, [r3, #0]
 8003a20:	193b      	adds	r3, r7, r4
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	f383 8810 	msr	PRIMASK, r3
}
 8003a2c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a2e:	f3ef 8310 	mrs	r3, PRIMASK
 8003a32:	61bb      	str	r3, [r7, #24]
  return(result);
 8003a34:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003a36:	2484      	movs	r4, #132	; 0x84
 8003a38:	193a      	adds	r2, r7, r4
 8003a3a:	6013      	str	r3, [r2, #0]
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	f383 8810 	msr	PRIMASK, r3
}
 8003a46:	46c0      	nop			; (mov r8, r8)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	689a      	ldr	r2, [r3, #8]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	495a      	ldr	r1, [pc, #360]	; (8003bbc <HAL_UART_IRQHandler+0x648>)
 8003a54:	400a      	ands	r2, r1
 8003a56:	609a      	str	r2, [r3, #8]
 8003a58:	193b      	adds	r3, r7, r4
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a5e:	6a3b      	ldr	r3, [r7, #32]
 8003a60:	f383 8810 	msr	PRIMASK, r3
}
 8003a64:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	228c      	movs	r2, #140	; 0x8c
 8003a6a:	2120      	movs	r1, #32
 8003a6c:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a7a:	f3ef 8310 	mrs	r3, PRIMASK
 8003a7e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a82:	2480      	movs	r4, #128	; 0x80
 8003a84:	193a      	adds	r2, r7, r4
 8003a86:	6013      	str	r3, [r2, #0]
 8003a88:	2301      	movs	r3, #1
 8003a8a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a8e:	f383 8810 	msr	PRIMASK, r3
}
 8003a92:	46c0      	nop			; (mov r8, r8)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2110      	movs	r1, #16
 8003aa0:	438a      	bics	r2, r1
 8003aa2:	601a      	str	r2, [r3, #0]
 8003aa4:	193b      	adds	r3, r7, r4
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aac:	f383 8810 	msr	PRIMASK, r3
}
 8003ab0:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2202      	movs	r2, #2
 8003ab6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ab8:	183b      	adds	r3, r7, r0
 8003aba:	881a      	ldrh	r2, [r3, #0]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	0011      	movs	r1, r2
 8003ac0:	0018      	movs	r0, r3
 8003ac2:	f7fd f85b 	bl	8000b7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003ac6:	e06f      	b.n	8003ba8 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003ac8:	23a4      	movs	r3, #164	; 0xa4
 8003aca:	18fb      	adds	r3, r7, r3
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	2380      	movs	r3, #128	; 0x80
 8003ad0:	035b      	lsls	r3, r3, #13
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	d010      	beq.n	8003af8 <HAL_UART_IRQHandler+0x584>
 8003ad6:	239c      	movs	r3, #156	; 0x9c
 8003ad8:	18fb      	adds	r3, r7, r3
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	2380      	movs	r3, #128	; 0x80
 8003ade:	03db      	lsls	r3, r3, #15
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	d009      	beq.n	8003af8 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2280      	movs	r2, #128	; 0x80
 8003aea:	0352      	lsls	r2, r2, #13
 8003aec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	0018      	movs	r0, r3
 8003af2:	f000 ff52 	bl	800499a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003af6:	e05a      	b.n	8003bae <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003af8:	23a4      	movs	r3, #164	; 0xa4
 8003afa:	18fb      	adds	r3, r7, r3
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2280      	movs	r2, #128	; 0x80
 8003b00:	4013      	ands	r3, r2
 8003b02:	d016      	beq.n	8003b32 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003b04:	23a0      	movs	r3, #160	; 0xa0
 8003b06:	18fb      	adds	r3, r7, r3
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2280      	movs	r2, #128	; 0x80
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	d106      	bne.n	8003b1e <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003b10:	239c      	movs	r3, #156	; 0x9c
 8003b12:	18fb      	adds	r3, r7, r3
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	2380      	movs	r3, #128	; 0x80
 8003b18:	041b      	lsls	r3, r3, #16
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	d009      	beq.n	8003b32 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d042      	beq.n	8003bac <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	0010      	movs	r0, r2
 8003b2e:	4798      	blx	r3
    }
    return;
 8003b30:	e03c      	b.n	8003bac <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003b32:	23a4      	movs	r3, #164	; 0xa4
 8003b34:	18fb      	adds	r3, r7, r3
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2240      	movs	r2, #64	; 0x40
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	d00a      	beq.n	8003b54 <HAL_UART_IRQHandler+0x5e0>
 8003b3e:	23a0      	movs	r3, #160	; 0xa0
 8003b40:	18fb      	adds	r3, r7, r3
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2240      	movs	r2, #64	; 0x40
 8003b46:	4013      	ands	r3, r2
 8003b48:	d004      	beq.n	8003b54 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	0018      	movs	r0, r3
 8003b4e:	f000 fef8 	bl	8004942 <UART_EndTransmit_IT>
    return;
 8003b52:	e02c      	b.n	8003bae <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003b54:	23a4      	movs	r3, #164	; 0xa4
 8003b56:	18fb      	adds	r3, r7, r3
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	2380      	movs	r3, #128	; 0x80
 8003b5c:	041b      	lsls	r3, r3, #16
 8003b5e:	4013      	ands	r3, r2
 8003b60:	d00b      	beq.n	8003b7a <HAL_UART_IRQHandler+0x606>
 8003b62:	23a0      	movs	r3, #160	; 0xa0
 8003b64:	18fb      	adds	r3, r7, r3
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	2380      	movs	r3, #128	; 0x80
 8003b6a:	05db      	lsls	r3, r3, #23
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	d004      	beq.n	8003b7a <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	0018      	movs	r0, r3
 8003b74:	f000 ff21 	bl	80049ba <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003b78:	e019      	b.n	8003bae <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003b7a:	23a4      	movs	r3, #164	; 0xa4
 8003b7c:	18fb      	adds	r3, r7, r3
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	2380      	movs	r3, #128	; 0x80
 8003b82:	045b      	lsls	r3, r3, #17
 8003b84:	4013      	ands	r3, r2
 8003b86:	d012      	beq.n	8003bae <HAL_UART_IRQHandler+0x63a>
 8003b88:	23a0      	movs	r3, #160	; 0xa0
 8003b8a:	18fb      	adds	r3, r7, r3
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	da0d      	bge.n	8003bae <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	0018      	movs	r0, r3
 8003b96:	f000 ff08 	bl	80049aa <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003b9a:	e008      	b.n	8003bae <HAL_UART_IRQHandler+0x63a>
      return;
 8003b9c:	46c0      	nop			; (mov r8, r8)
 8003b9e:	e006      	b.n	8003bae <HAL_UART_IRQHandler+0x63a>
    return;
 8003ba0:	46c0      	nop			; (mov r8, r8)
 8003ba2:	e004      	b.n	8003bae <HAL_UART_IRQHandler+0x63a>
      return;
 8003ba4:	46c0      	nop			; (mov r8, r8)
 8003ba6:	e002      	b.n	8003bae <HAL_UART_IRQHandler+0x63a>
      return;
 8003ba8:	46c0      	nop			; (mov r8, r8)
 8003baa:	e000      	b.n	8003bae <HAL_UART_IRQHandler+0x63a>
    return;
 8003bac:	46c0      	nop			; (mov r8, r8)
  }
}
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	b02a      	add	sp, #168	; 0xa8
 8003bb2:	bdb0      	pop	{r4, r5, r7, pc}
 8003bb4:	fffffeff 	.word	0xfffffeff
 8003bb8:	fffffedf 	.word	0xfffffedf
 8003bbc:	effffffe 	.word	0xeffffffe

08003bc0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003bc8:	46c0      	nop			; (mov r8, r8)
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	b002      	add	sp, #8
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003bd8:	46c0      	nop			; (mov r8, r8)
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	b002      	add	sp, #8
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003be8:	46c0      	nop			; (mov r8, r8)
 8003bea:	46bd      	mov	sp, r7
 8003bec:	b002      	add	sp, #8
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003bf8:	46c0      	nop			; (mov r8, r8)
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	b002      	add	sp, #8
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c00:	b5b0      	push	{r4, r5, r7, lr}
 8003c02:	b090      	sub	sp, #64	; 0x40
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c08:	231a      	movs	r3, #26
 8003c0a:	2220      	movs	r2, #32
 8003c0c:	189b      	adds	r3, r3, r2
 8003c0e:	19db      	adds	r3, r3, r7
 8003c10:	2200      	movs	r2, #0
 8003c12:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c16:	689a      	ldr	r2, [r3, #8]
 8003c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1a:	691b      	ldr	r3, [r3, #16]
 8003c1c:	431a      	orrs	r2, r3
 8003c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	431a      	orrs	r2, r3
 8003c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c26:	69db      	ldr	r3, [r3, #28]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4ac4      	ldr	r2, [pc, #784]	; (8003f44 <UART_SetConfig+0x344>)
 8003c34:	4013      	ands	r3, r2
 8003c36:	0019      	movs	r1, r3
 8003c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c3e:	430b      	orrs	r3, r1
 8003c40:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	4abf      	ldr	r2, [pc, #764]	; (8003f48 <UART_SetConfig+0x348>)
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	0018      	movs	r0, r3
 8003c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c50:	68d9      	ldr	r1, [r3, #12]
 8003c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	0003      	movs	r3, r0
 8003c58:	430b      	orrs	r3, r1
 8003c5a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5e:	699b      	ldr	r3, [r3, #24]
 8003c60:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4ab9      	ldr	r2, [pc, #740]	; (8003f4c <UART_SetConfig+0x34c>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d004      	beq.n	8003c76 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6e:	6a1b      	ldr	r3, [r3, #32]
 8003c70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c72:	4313      	orrs	r3, r2
 8003c74:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	4ab4      	ldr	r2, [pc, #720]	; (8003f50 <UART_SetConfig+0x350>)
 8003c7e:	4013      	ands	r3, r2
 8003c80:	0019      	movs	r1, r3
 8003c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c88:	430b      	orrs	r3, r1
 8003c8a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c92:	220f      	movs	r2, #15
 8003c94:	4393      	bics	r3, r2
 8003c96:	0018      	movs	r0, r3
 8003c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	0003      	movs	r3, r0
 8003ca2:	430b      	orrs	r3, r1
 8003ca4:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4aaa      	ldr	r2, [pc, #680]	; (8003f54 <UART_SetConfig+0x354>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d131      	bne.n	8003d14 <UART_SetConfig+0x114>
 8003cb0:	4ba9      	ldr	r3, [pc, #676]	; (8003f58 <UART_SetConfig+0x358>)
 8003cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cb4:	2203      	movs	r2, #3
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	2b03      	cmp	r3, #3
 8003cba:	d01d      	beq.n	8003cf8 <UART_SetConfig+0xf8>
 8003cbc:	d823      	bhi.n	8003d06 <UART_SetConfig+0x106>
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d00c      	beq.n	8003cdc <UART_SetConfig+0xdc>
 8003cc2:	d820      	bhi.n	8003d06 <UART_SetConfig+0x106>
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d002      	beq.n	8003cce <UART_SetConfig+0xce>
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d00e      	beq.n	8003cea <UART_SetConfig+0xea>
 8003ccc:	e01b      	b.n	8003d06 <UART_SetConfig+0x106>
 8003cce:	231b      	movs	r3, #27
 8003cd0:	2220      	movs	r2, #32
 8003cd2:	189b      	adds	r3, r3, r2
 8003cd4:	19db      	adds	r3, r3, r7
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	701a      	strb	r2, [r3, #0]
 8003cda:	e071      	b.n	8003dc0 <UART_SetConfig+0x1c0>
 8003cdc:	231b      	movs	r3, #27
 8003cde:	2220      	movs	r2, #32
 8003ce0:	189b      	adds	r3, r3, r2
 8003ce2:	19db      	adds	r3, r3, r7
 8003ce4:	2202      	movs	r2, #2
 8003ce6:	701a      	strb	r2, [r3, #0]
 8003ce8:	e06a      	b.n	8003dc0 <UART_SetConfig+0x1c0>
 8003cea:	231b      	movs	r3, #27
 8003cec:	2220      	movs	r2, #32
 8003cee:	189b      	adds	r3, r3, r2
 8003cf0:	19db      	adds	r3, r3, r7
 8003cf2:	2204      	movs	r2, #4
 8003cf4:	701a      	strb	r2, [r3, #0]
 8003cf6:	e063      	b.n	8003dc0 <UART_SetConfig+0x1c0>
 8003cf8:	231b      	movs	r3, #27
 8003cfa:	2220      	movs	r2, #32
 8003cfc:	189b      	adds	r3, r3, r2
 8003cfe:	19db      	adds	r3, r3, r7
 8003d00:	2208      	movs	r2, #8
 8003d02:	701a      	strb	r2, [r3, #0]
 8003d04:	e05c      	b.n	8003dc0 <UART_SetConfig+0x1c0>
 8003d06:	231b      	movs	r3, #27
 8003d08:	2220      	movs	r2, #32
 8003d0a:	189b      	adds	r3, r3, r2
 8003d0c:	19db      	adds	r3, r3, r7
 8003d0e:	2210      	movs	r2, #16
 8003d10:	701a      	strb	r2, [r3, #0]
 8003d12:	e055      	b.n	8003dc0 <UART_SetConfig+0x1c0>
 8003d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a90      	ldr	r2, [pc, #576]	; (8003f5c <UART_SetConfig+0x35c>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d106      	bne.n	8003d2c <UART_SetConfig+0x12c>
 8003d1e:	231b      	movs	r3, #27
 8003d20:	2220      	movs	r2, #32
 8003d22:	189b      	adds	r3, r3, r2
 8003d24:	19db      	adds	r3, r3, r7
 8003d26:	2200      	movs	r2, #0
 8003d28:	701a      	strb	r2, [r3, #0]
 8003d2a:	e049      	b.n	8003dc0 <UART_SetConfig+0x1c0>
 8003d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a86      	ldr	r2, [pc, #536]	; (8003f4c <UART_SetConfig+0x34c>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d13e      	bne.n	8003db4 <UART_SetConfig+0x1b4>
 8003d36:	4b88      	ldr	r3, [pc, #544]	; (8003f58 <UART_SetConfig+0x358>)
 8003d38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d3a:	23c0      	movs	r3, #192	; 0xc0
 8003d3c:	011b      	lsls	r3, r3, #4
 8003d3e:	4013      	ands	r3, r2
 8003d40:	22c0      	movs	r2, #192	; 0xc0
 8003d42:	0112      	lsls	r2, r2, #4
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d027      	beq.n	8003d98 <UART_SetConfig+0x198>
 8003d48:	22c0      	movs	r2, #192	; 0xc0
 8003d4a:	0112      	lsls	r2, r2, #4
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d82a      	bhi.n	8003da6 <UART_SetConfig+0x1a6>
 8003d50:	2280      	movs	r2, #128	; 0x80
 8003d52:	0112      	lsls	r2, r2, #4
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d011      	beq.n	8003d7c <UART_SetConfig+0x17c>
 8003d58:	2280      	movs	r2, #128	; 0x80
 8003d5a:	0112      	lsls	r2, r2, #4
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d822      	bhi.n	8003da6 <UART_SetConfig+0x1a6>
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d004      	beq.n	8003d6e <UART_SetConfig+0x16e>
 8003d64:	2280      	movs	r2, #128	; 0x80
 8003d66:	00d2      	lsls	r2, r2, #3
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d00e      	beq.n	8003d8a <UART_SetConfig+0x18a>
 8003d6c:	e01b      	b.n	8003da6 <UART_SetConfig+0x1a6>
 8003d6e:	231b      	movs	r3, #27
 8003d70:	2220      	movs	r2, #32
 8003d72:	189b      	adds	r3, r3, r2
 8003d74:	19db      	adds	r3, r3, r7
 8003d76:	2200      	movs	r2, #0
 8003d78:	701a      	strb	r2, [r3, #0]
 8003d7a:	e021      	b.n	8003dc0 <UART_SetConfig+0x1c0>
 8003d7c:	231b      	movs	r3, #27
 8003d7e:	2220      	movs	r2, #32
 8003d80:	189b      	adds	r3, r3, r2
 8003d82:	19db      	adds	r3, r3, r7
 8003d84:	2202      	movs	r2, #2
 8003d86:	701a      	strb	r2, [r3, #0]
 8003d88:	e01a      	b.n	8003dc0 <UART_SetConfig+0x1c0>
 8003d8a:	231b      	movs	r3, #27
 8003d8c:	2220      	movs	r2, #32
 8003d8e:	189b      	adds	r3, r3, r2
 8003d90:	19db      	adds	r3, r3, r7
 8003d92:	2204      	movs	r2, #4
 8003d94:	701a      	strb	r2, [r3, #0]
 8003d96:	e013      	b.n	8003dc0 <UART_SetConfig+0x1c0>
 8003d98:	231b      	movs	r3, #27
 8003d9a:	2220      	movs	r2, #32
 8003d9c:	189b      	adds	r3, r3, r2
 8003d9e:	19db      	adds	r3, r3, r7
 8003da0:	2208      	movs	r2, #8
 8003da2:	701a      	strb	r2, [r3, #0]
 8003da4:	e00c      	b.n	8003dc0 <UART_SetConfig+0x1c0>
 8003da6:	231b      	movs	r3, #27
 8003da8:	2220      	movs	r2, #32
 8003daa:	189b      	adds	r3, r3, r2
 8003dac:	19db      	adds	r3, r3, r7
 8003dae:	2210      	movs	r2, #16
 8003db0:	701a      	strb	r2, [r3, #0]
 8003db2:	e005      	b.n	8003dc0 <UART_SetConfig+0x1c0>
 8003db4:	231b      	movs	r3, #27
 8003db6:	2220      	movs	r2, #32
 8003db8:	189b      	adds	r3, r3, r2
 8003dba:	19db      	adds	r3, r3, r7
 8003dbc:	2210      	movs	r2, #16
 8003dbe:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a61      	ldr	r2, [pc, #388]	; (8003f4c <UART_SetConfig+0x34c>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d000      	beq.n	8003dcc <UART_SetConfig+0x1cc>
 8003dca:	e092      	b.n	8003ef2 <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003dcc:	231b      	movs	r3, #27
 8003dce:	2220      	movs	r2, #32
 8003dd0:	189b      	adds	r3, r3, r2
 8003dd2:	19db      	adds	r3, r3, r7
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	2b08      	cmp	r3, #8
 8003dd8:	d015      	beq.n	8003e06 <UART_SetConfig+0x206>
 8003dda:	dc18      	bgt.n	8003e0e <UART_SetConfig+0x20e>
 8003ddc:	2b04      	cmp	r3, #4
 8003dde:	d00d      	beq.n	8003dfc <UART_SetConfig+0x1fc>
 8003de0:	dc15      	bgt.n	8003e0e <UART_SetConfig+0x20e>
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d002      	beq.n	8003dec <UART_SetConfig+0x1ec>
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d005      	beq.n	8003df6 <UART_SetConfig+0x1f6>
 8003dea:	e010      	b.n	8003e0e <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dec:	f7fe fc76 	bl	80026dc <HAL_RCC_GetPCLK1Freq>
 8003df0:	0003      	movs	r3, r0
 8003df2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003df4:	e014      	b.n	8003e20 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003df6:	4b5a      	ldr	r3, [pc, #360]	; (8003f60 <UART_SetConfig+0x360>)
 8003df8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003dfa:	e011      	b.n	8003e20 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dfc:	f7fe fbe2 	bl	80025c4 <HAL_RCC_GetSysClockFreq>
 8003e00:	0003      	movs	r3, r0
 8003e02:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003e04:	e00c      	b.n	8003e20 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e06:	2380      	movs	r3, #128	; 0x80
 8003e08:	021b      	lsls	r3, r3, #8
 8003e0a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003e0c:	e008      	b.n	8003e20 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003e12:	231a      	movs	r3, #26
 8003e14:	2220      	movs	r2, #32
 8003e16:	189b      	adds	r3, r3, r2
 8003e18:	19db      	adds	r3, r3, r7
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	701a      	strb	r2, [r3, #0]
        break;
 8003e1e:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d100      	bne.n	8003e28 <UART_SetConfig+0x228>
 8003e26:	e147      	b.n	80040b8 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e2c:	4b4d      	ldr	r3, [pc, #308]	; (8003f64 <UART_SetConfig+0x364>)
 8003e2e:	0052      	lsls	r2, r2, #1
 8003e30:	5ad3      	ldrh	r3, [r2, r3]
 8003e32:	0019      	movs	r1, r3
 8003e34:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003e36:	f7fc f977 	bl	8000128 <__udivsi3>
 8003e3a:	0003      	movs	r3, r0
 8003e3c:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e40:	685a      	ldr	r2, [r3, #4]
 8003e42:	0013      	movs	r3, r2
 8003e44:	005b      	lsls	r3, r3, #1
 8003e46:	189b      	adds	r3, r3, r2
 8003e48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d305      	bcc.n	8003e5a <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003e54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d906      	bls.n	8003e68 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 8003e5a:	231a      	movs	r3, #26
 8003e5c:	2220      	movs	r2, #32
 8003e5e:	189b      	adds	r3, r3, r2
 8003e60:	19db      	adds	r3, r3, r7
 8003e62:	2201      	movs	r2, #1
 8003e64:	701a      	strb	r2, [r3, #0]
 8003e66:	e127      	b.n	80040b8 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e6a:	61bb      	str	r3, [r7, #24]
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	61fb      	str	r3, [r7, #28]
 8003e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e74:	4b3b      	ldr	r3, [pc, #236]	; (8003f64 <UART_SetConfig+0x364>)
 8003e76:	0052      	lsls	r2, r2, #1
 8003e78:	5ad3      	ldrh	r3, [r2, r3]
 8003e7a:	613b      	str	r3, [r7, #16]
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	617b      	str	r3, [r7, #20]
 8003e80:	693a      	ldr	r2, [r7, #16]
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	69b8      	ldr	r0, [r7, #24]
 8003e86:	69f9      	ldr	r1, [r7, #28]
 8003e88:	f7fc fac4 	bl	8000414 <__aeabi_uldivmod>
 8003e8c:	0002      	movs	r2, r0
 8003e8e:	000b      	movs	r3, r1
 8003e90:	0e11      	lsrs	r1, r2, #24
 8003e92:	021d      	lsls	r5, r3, #8
 8003e94:	430d      	orrs	r5, r1
 8003e96:	0214      	lsls	r4, r2, #8
 8003e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	085b      	lsrs	r3, r3, #1
 8003e9e:	60bb      	str	r3, [r7, #8]
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	60fb      	str	r3, [r7, #12]
 8003ea4:	68b8      	ldr	r0, [r7, #8]
 8003ea6:	68f9      	ldr	r1, [r7, #12]
 8003ea8:	1900      	adds	r0, r0, r4
 8003eaa:	4169      	adcs	r1, r5
 8003eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	603b      	str	r3, [r7, #0]
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	607b      	str	r3, [r7, #4]
 8003eb6:	683a      	ldr	r2, [r7, #0]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f7fc faab 	bl	8000414 <__aeabi_uldivmod>
 8003ebe:	0002      	movs	r2, r0
 8003ec0:	000b      	movs	r3, r1
 8003ec2:	0013      	movs	r3, r2
 8003ec4:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ec6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ec8:	23c0      	movs	r3, #192	; 0xc0
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d309      	bcc.n	8003ee4 <UART_SetConfig+0x2e4>
 8003ed0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ed2:	2380      	movs	r3, #128	; 0x80
 8003ed4:	035b      	lsls	r3, r3, #13
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d204      	bcs.n	8003ee4 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8003eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ee0:	60da      	str	r2, [r3, #12]
 8003ee2:	e0e9      	b.n	80040b8 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8003ee4:	231a      	movs	r3, #26
 8003ee6:	2220      	movs	r2, #32
 8003ee8:	189b      	adds	r3, r3, r2
 8003eea:	19db      	adds	r3, r3, r7
 8003eec:	2201      	movs	r2, #1
 8003eee:	701a      	strb	r2, [r3, #0]
 8003ef0:	e0e2      	b.n	80040b8 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef4:	69da      	ldr	r2, [r3, #28]
 8003ef6:	2380      	movs	r3, #128	; 0x80
 8003ef8:	021b      	lsls	r3, r3, #8
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d000      	beq.n	8003f00 <UART_SetConfig+0x300>
 8003efe:	e083      	b.n	8004008 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8003f00:	231b      	movs	r3, #27
 8003f02:	2220      	movs	r2, #32
 8003f04:	189b      	adds	r3, r3, r2
 8003f06:	19db      	adds	r3, r3, r7
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	2b08      	cmp	r3, #8
 8003f0c:	d015      	beq.n	8003f3a <UART_SetConfig+0x33a>
 8003f0e:	dc2b      	bgt.n	8003f68 <UART_SetConfig+0x368>
 8003f10:	2b04      	cmp	r3, #4
 8003f12:	d00d      	beq.n	8003f30 <UART_SetConfig+0x330>
 8003f14:	dc28      	bgt.n	8003f68 <UART_SetConfig+0x368>
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d002      	beq.n	8003f20 <UART_SetConfig+0x320>
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d005      	beq.n	8003f2a <UART_SetConfig+0x32a>
 8003f1e:	e023      	b.n	8003f68 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f20:	f7fe fbdc 	bl	80026dc <HAL_RCC_GetPCLK1Freq>
 8003f24:	0003      	movs	r3, r0
 8003f26:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003f28:	e027      	b.n	8003f7a <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f2a:	4b0d      	ldr	r3, [pc, #52]	; (8003f60 <UART_SetConfig+0x360>)
 8003f2c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003f2e:	e024      	b.n	8003f7a <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f30:	f7fe fb48 	bl	80025c4 <HAL_RCC_GetSysClockFreq>
 8003f34:	0003      	movs	r3, r0
 8003f36:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003f38:	e01f      	b.n	8003f7a <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f3a:	2380      	movs	r3, #128	; 0x80
 8003f3c:	021b      	lsls	r3, r3, #8
 8003f3e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003f40:	e01b      	b.n	8003f7a <UART_SetConfig+0x37a>
 8003f42:	46c0      	nop			; (mov r8, r8)
 8003f44:	cfff69f3 	.word	0xcfff69f3
 8003f48:	ffffcfff 	.word	0xffffcfff
 8003f4c:	40008000 	.word	0x40008000
 8003f50:	11fff4ff 	.word	0x11fff4ff
 8003f54:	40013800 	.word	0x40013800
 8003f58:	40021000 	.word	0x40021000
 8003f5c:	40004400 	.word	0x40004400
 8003f60:	00f42400 	.word	0x00f42400
 8003f64:	08006480 	.word	0x08006480
      default:
        pclk = 0U;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003f6c:	231a      	movs	r3, #26
 8003f6e:	2220      	movs	r2, #32
 8003f70:	189b      	adds	r3, r3, r2
 8003f72:	19db      	adds	r3, r3, r7
 8003f74:	2201      	movs	r2, #1
 8003f76:	701a      	strb	r2, [r3, #0]
        break;
 8003f78:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d100      	bne.n	8003f82 <UART_SetConfig+0x382>
 8003f80:	e09a      	b.n	80040b8 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f86:	4b58      	ldr	r3, [pc, #352]	; (80040e8 <UART_SetConfig+0x4e8>)
 8003f88:	0052      	lsls	r2, r2, #1
 8003f8a:	5ad3      	ldrh	r3, [r2, r3]
 8003f8c:	0019      	movs	r1, r3
 8003f8e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003f90:	f7fc f8ca 	bl	8000128 <__udivsi3>
 8003f94:	0003      	movs	r3, r0
 8003f96:	005a      	lsls	r2, r3, #1
 8003f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	085b      	lsrs	r3, r3, #1
 8003f9e:	18d2      	adds	r2, r2, r3
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	0019      	movs	r1, r3
 8003fa6:	0010      	movs	r0, r2
 8003fa8:	f7fc f8be 	bl	8000128 <__udivsi3>
 8003fac:	0003      	movs	r3, r0
 8003fae:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb2:	2b0f      	cmp	r3, #15
 8003fb4:	d921      	bls.n	8003ffa <UART_SetConfig+0x3fa>
 8003fb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fb8:	2380      	movs	r3, #128	; 0x80
 8003fba:	025b      	lsls	r3, r3, #9
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d21c      	bcs.n	8003ffa <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc2:	b29a      	uxth	r2, r3
 8003fc4:	200e      	movs	r0, #14
 8003fc6:	2420      	movs	r4, #32
 8003fc8:	1903      	adds	r3, r0, r4
 8003fca:	19db      	adds	r3, r3, r7
 8003fcc:	210f      	movs	r1, #15
 8003fce:	438a      	bics	r2, r1
 8003fd0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd4:	085b      	lsrs	r3, r3, #1
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	2207      	movs	r2, #7
 8003fda:	4013      	ands	r3, r2
 8003fdc:	b299      	uxth	r1, r3
 8003fde:	1903      	adds	r3, r0, r4
 8003fe0:	19db      	adds	r3, r3, r7
 8003fe2:	1902      	adds	r2, r0, r4
 8003fe4:	19d2      	adds	r2, r2, r7
 8003fe6:	8812      	ldrh	r2, [r2, #0]
 8003fe8:	430a      	orrs	r2, r1
 8003fea:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	1902      	adds	r2, r0, r4
 8003ff2:	19d2      	adds	r2, r2, r7
 8003ff4:	8812      	ldrh	r2, [r2, #0]
 8003ff6:	60da      	str	r2, [r3, #12]
 8003ff8:	e05e      	b.n	80040b8 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8003ffa:	231a      	movs	r3, #26
 8003ffc:	2220      	movs	r2, #32
 8003ffe:	189b      	adds	r3, r3, r2
 8004000:	19db      	adds	r3, r3, r7
 8004002:	2201      	movs	r2, #1
 8004004:	701a      	strb	r2, [r3, #0]
 8004006:	e057      	b.n	80040b8 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004008:	231b      	movs	r3, #27
 800400a:	2220      	movs	r2, #32
 800400c:	189b      	adds	r3, r3, r2
 800400e:	19db      	adds	r3, r3, r7
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	2b08      	cmp	r3, #8
 8004014:	d015      	beq.n	8004042 <UART_SetConfig+0x442>
 8004016:	dc18      	bgt.n	800404a <UART_SetConfig+0x44a>
 8004018:	2b04      	cmp	r3, #4
 800401a:	d00d      	beq.n	8004038 <UART_SetConfig+0x438>
 800401c:	dc15      	bgt.n	800404a <UART_SetConfig+0x44a>
 800401e:	2b00      	cmp	r3, #0
 8004020:	d002      	beq.n	8004028 <UART_SetConfig+0x428>
 8004022:	2b02      	cmp	r3, #2
 8004024:	d005      	beq.n	8004032 <UART_SetConfig+0x432>
 8004026:	e010      	b.n	800404a <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004028:	f7fe fb58 	bl	80026dc <HAL_RCC_GetPCLK1Freq>
 800402c:	0003      	movs	r3, r0
 800402e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004030:	e014      	b.n	800405c <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004032:	4b2e      	ldr	r3, [pc, #184]	; (80040ec <UART_SetConfig+0x4ec>)
 8004034:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004036:	e011      	b.n	800405c <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004038:	f7fe fac4 	bl	80025c4 <HAL_RCC_GetSysClockFreq>
 800403c:	0003      	movs	r3, r0
 800403e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004040:	e00c      	b.n	800405c <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004042:	2380      	movs	r3, #128	; 0x80
 8004044:	021b      	lsls	r3, r3, #8
 8004046:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004048:	e008      	b.n	800405c <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 800404a:	2300      	movs	r3, #0
 800404c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800404e:	231a      	movs	r3, #26
 8004050:	2220      	movs	r2, #32
 8004052:	189b      	adds	r3, r3, r2
 8004054:	19db      	adds	r3, r3, r7
 8004056:	2201      	movs	r2, #1
 8004058:	701a      	strb	r2, [r3, #0]
        break;
 800405a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800405c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800405e:	2b00      	cmp	r3, #0
 8004060:	d02a      	beq.n	80040b8 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004064:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004066:	4b20      	ldr	r3, [pc, #128]	; (80040e8 <UART_SetConfig+0x4e8>)
 8004068:	0052      	lsls	r2, r2, #1
 800406a:	5ad3      	ldrh	r3, [r2, r3]
 800406c:	0019      	movs	r1, r3
 800406e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004070:	f7fc f85a 	bl	8000128 <__udivsi3>
 8004074:	0003      	movs	r3, r0
 8004076:	001a      	movs	r2, r3
 8004078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	085b      	lsrs	r3, r3, #1
 800407e:	18d2      	adds	r2, r2, r3
 8004080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	0019      	movs	r1, r3
 8004086:	0010      	movs	r0, r2
 8004088:	f7fc f84e 	bl	8000128 <__udivsi3>
 800408c:	0003      	movs	r3, r0
 800408e:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004092:	2b0f      	cmp	r3, #15
 8004094:	d90a      	bls.n	80040ac <UART_SetConfig+0x4ac>
 8004096:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004098:	2380      	movs	r3, #128	; 0x80
 800409a:	025b      	lsls	r3, r3, #9
 800409c:	429a      	cmp	r2, r3
 800409e:	d205      	bcs.n	80040ac <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80040a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a2:	b29a      	uxth	r2, r3
 80040a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	60da      	str	r2, [r3, #12]
 80040aa:	e005      	b.n	80040b8 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 80040ac:	231a      	movs	r3, #26
 80040ae:	2220      	movs	r2, #32
 80040b0:	189b      	adds	r3, r3, r2
 80040b2:	19db      	adds	r3, r3, r7
 80040b4:	2201      	movs	r2, #1
 80040b6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80040b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ba:	226a      	movs	r2, #106	; 0x6a
 80040bc:	2101      	movs	r1, #1
 80040be:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80040c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c2:	2268      	movs	r2, #104	; 0x68
 80040c4:	2101      	movs	r1, #1
 80040c6:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80040c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ca:	2200      	movs	r2, #0
 80040cc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80040ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d0:	2200      	movs	r2, #0
 80040d2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80040d4:	231a      	movs	r3, #26
 80040d6:	2220      	movs	r2, #32
 80040d8:	189b      	adds	r3, r3, r2
 80040da:	19db      	adds	r3, r3, r7
 80040dc:	781b      	ldrb	r3, [r3, #0]
}
 80040de:	0018      	movs	r0, r3
 80040e0:	46bd      	mov	sp, r7
 80040e2:	b010      	add	sp, #64	; 0x40
 80040e4:	bdb0      	pop	{r4, r5, r7, pc}
 80040e6:	46c0      	nop			; (mov r8, r8)
 80040e8:	08006480 	.word	0x08006480
 80040ec:	00f42400 	.word	0x00f42400

080040f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040fc:	2201      	movs	r2, #1
 80040fe:	4013      	ands	r3, r2
 8004100:	d00b      	beq.n	800411a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	4a4a      	ldr	r2, [pc, #296]	; (8004234 <UART_AdvFeatureConfig+0x144>)
 800410a:	4013      	ands	r3, r2
 800410c:	0019      	movs	r1, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	430a      	orrs	r2, r1
 8004118:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800411e:	2202      	movs	r2, #2
 8004120:	4013      	ands	r3, r2
 8004122:	d00b      	beq.n	800413c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	4a43      	ldr	r2, [pc, #268]	; (8004238 <UART_AdvFeatureConfig+0x148>)
 800412c:	4013      	ands	r3, r2
 800412e:	0019      	movs	r1, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	430a      	orrs	r2, r1
 800413a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004140:	2204      	movs	r2, #4
 8004142:	4013      	ands	r3, r2
 8004144:	d00b      	beq.n	800415e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	4a3b      	ldr	r2, [pc, #236]	; (800423c <UART_AdvFeatureConfig+0x14c>)
 800414e:	4013      	ands	r3, r2
 8004150:	0019      	movs	r1, r3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	430a      	orrs	r2, r1
 800415c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004162:	2208      	movs	r2, #8
 8004164:	4013      	ands	r3, r2
 8004166:	d00b      	beq.n	8004180 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	4a34      	ldr	r2, [pc, #208]	; (8004240 <UART_AdvFeatureConfig+0x150>)
 8004170:	4013      	ands	r3, r2
 8004172:	0019      	movs	r1, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	430a      	orrs	r2, r1
 800417e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004184:	2210      	movs	r2, #16
 8004186:	4013      	ands	r3, r2
 8004188:	d00b      	beq.n	80041a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	4a2c      	ldr	r2, [pc, #176]	; (8004244 <UART_AdvFeatureConfig+0x154>)
 8004192:	4013      	ands	r3, r2
 8004194:	0019      	movs	r1, r3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	430a      	orrs	r2, r1
 80041a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a6:	2220      	movs	r2, #32
 80041a8:	4013      	ands	r3, r2
 80041aa:	d00b      	beq.n	80041c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	4a25      	ldr	r2, [pc, #148]	; (8004248 <UART_AdvFeatureConfig+0x158>)
 80041b4:	4013      	ands	r3, r2
 80041b6:	0019      	movs	r1, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	430a      	orrs	r2, r1
 80041c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c8:	2240      	movs	r2, #64	; 0x40
 80041ca:	4013      	ands	r3, r2
 80041cc:	d01d      	beq.n	800420a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	4a1d      	ldr	r2, [pc, #116]	; (800424c <UART_AdvFeatureConfig+0x15c>)
 80041d6:	4013      	ands	r3, r2
 80041d8:	0019      	movs	r1, r3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	430a      	orrs	r2, r1
 80041e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041ea:	2380      	movs	r3, #128	; 0x80
 80041ec:	035b      	lsls	r3, r3, #13
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d10b      	bne.n	800420a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	4a15      	ldr	r2, [pc, #84]	; (8004250 <UART_AdvFeatureConfig+0x160>)
 80041fa:	4013      	ands	r3, r2
 80041fc:	0019      	movs	r1, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	430a      	orrs	r2, r1
 8004208:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800420e:	2280      	movs	r2, #128	; 0x80
 8004210:	4013      	ands	r3, r2
 8004212:	d00b      	beq.n	800422c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	4a0e      	ldr	r2, [pc, #56]	; (8004254 <UART_AdvFeatureConfig+0x164>)
 800421c:	4013      	ands	r3, r2
 800421e:	0019      	movs	r1, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	430a      	orrs	r2, r1
 800422a:	605a      	str	r2, [r3, #4]
  }
}
 800422c:	46c0      	nop			; (mov r8, r8)
 800422e:	46bd      	mov	sp, r7
 8004230:	b002      	add	sp, #8
 8004232:	bd80      	pop	{r7, pc}
 8004234:	fffdffff 	.word	0xfffdffff
 8004238:	fffeffff 	.word	0xfffeffff
 800423c:	fffbffff 	.word	0xfffbffff
 8004240:	ffff7fff 	.word	0xffff7fff
 8004244:	ffffefff 	.word	0xffffefff
 8004248:	ffffdfff 	.word	0xffffdfff
 800424c:	ffefffff 	.word	0xffefffff
 8004250:	ff9fffff 	.word	0xff9fffff
 8004254:	fff7ffff 	.word	0xfff7ffff

08004258 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b086      	sub	sp, #24
 800425c:	af02      	add	r7, sp, #8
 800425e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2290      	movs	r2, #144	; 0x90
 8004264:	2100      	movs	r1, #0
 8004266:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004268:	f7fc ffb6 	bl	80011d8 <HAL_GetTick>
 800426c:	0003      	movs	r3, r0
 800426e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2208      	movs	r2, #8
 8004278:	4013      	ands	r3, r2
 800427a:	2b08      	cmp	r3, #8
 800427c:	d10c      	bne.n	8004298 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2280      	movs	r2, #128	; 0x80
 8004282:	0391      	lsls	r1, r2, #14
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	4a1a      	ldr	r2, [pc, #104]	; (80042f0 <UART_CheckIdleState+0x98>)
 8004288:	9200      	str	r2, [sp, #0]
 800428a:	2200      	movs	r2, #0
 800428c:	f000 f832 	bl	80042f4 <UART_WaitOnFlagUntilTimeout>
 8004290:	1e03      	subs	r3, r0, #0
 8004292:	d001      	beq.n	8004298 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	e026      	b.n	80042e6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2204      	movs	r2, #4
 80042a0:	4013      	ands	r3, r2
 80042a2:	2b04      	cmp	r3, #4
 80042a4:	d10c      	bne.n	80042c0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2280      	movs	r2, #128	; 0x80
 80042aa:	03d1      	lsls	r1, r2, #15
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	4a10      	ldr	r2, [pc, #64]	; (80042f0 <UART_CheckIdleState+0x98>)
 80042b0:	9200      	str	r2, [sp, #0]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f000 f81e 	bl	80042f4 <UART_WaitOnFlagUntilTimeout>
 80042b8:	1e03      	subs	r3, r0, #0
 80042ba:	d001      	beq.n	80042c0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	e012      	b.n	80042e6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2288      	movs	r2, #136	; 0x88
 80042c4:	2120      	movs	r1, #32
 80042c6:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	228c      	movs	r2, #140	; 0x8c
 80042cc:	2120      	movs	r1, #32
 80042ce:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2284      	movs	r2, #132	; 0x84
 80042e0:	2100      	movs	r1, #0
 80042e2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	0018      	movs	r0, r3
 80042e8:	46bd      	mov	sp, r7
 80042ea:	b004      	add	sp, #16
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	46c0      	nop			; (mov r8, r8)
 80042f0:	01ffffff 	.word	0x01ffffff

080042f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b094      	sub	sp, #80	; 0x50
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	603b      	str	r3, [r7, #0]
 8004300:	1dfb      	adds	r3, r7, #7
 8004302:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004304:	e0a7      	b.n	8004456 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004306:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004308:	3301      	adds	r3, #1
 800430a:	d100      	bne.n	800430e <UART_WaitOnFlagUntilTimeout+0x1a>
 800430c:	e0a3      	b.n	8004456 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800430e:	f7fc ff63 	bl	80011d8 <HAL_GetTick>
 8004312:	0002      	movs	r2, r0
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800431a:	429a      	cmp	r2, r3
 800431c:	d302      	bcc.n	8004324 <UART_WaitOnFlagUntilTimeout+0x30>
 800431e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004320:	2b00      	cmp	r3, #0
 8004322:	d13f      	bne.n	80043a4 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004324:	f3ef 8310 	mrs	r3, PRIMASK
 8004328:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800432a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800432c:	647b      	str	r3, [r7, #68]	; 0x44
 800432e:	2301      	movs	r3, #1
 8004330:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004334:	f383 8810 	msr	PRIMASK, r3
}
 8004338:	46c0      	nop			; (mov r8, r8)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	494e      	ldr	r1, [pc, #312]	; (8004480 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004346:	400a      	ands	r2, r1
 8004348:	601a      	str	r2, [r3, #0]
 800434a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800434c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800434e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004350:	f383 8810 	msr	PRIMASK, r3
}
 8004354:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004356:	f3ef 8310 	mrs	r3, PRIMASK
 800435a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800435c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800435e:	643b      	str	r3, [r7, #64]	; 0x40
 8004360:	2301      	movs	r3, #1
 8004362:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004366:	f383 8810 	msr	PRIMASK, r3
}
 800436a:	46c0      	nop			; (mov r8, r8)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	689a      	ldr	r2, [r3, #8]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2101      	movs	r1, #1
 8004378:	438a      	bics	r2, r1
 800437a:	609a      	str	r2, [r3, #8]
 800437c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800437e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004380:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004382:	f383 8810 	msr	PRIMASK, r3
}
 8004386:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2288      	movs	r2, #136	; 0x88
 800438c:	2120      	movs	r1, #32
 800438e:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	228c      	movs	r2, #140	; 0x8c
 8004394:	2120      	movs	r1, #32
 8004396:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2284      	movs	r2, #132	; 0x84
 800439c:	2100      	movs	r1, #0
 800439e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	e069      	b.n	8004478 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	2204      	movs	r2, #4
 80043ac:	4013      	ands	r3, r2
 80043ae:	d052      	beq.n	8004456 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	69da      	ldr	r2, [r3, #28]
 80043b6:	2380      	movs	r3, #128	; 0x80
 80043b8:	011b      	lsls	r3, r3, #4
 80043ba:	401a      	ands	r2, r3
 80043bc:	2380      	movs	r3, #128	; 0x80
 80043be:	011b      	lsls	r3, r3, #4
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d148      	bne.n	8004456 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2280      	movs	r2, #128	; 0x80
 80043ca:	0112      	lsls	r2, r2, #4
 80043cc:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043ce:	f3ef 8310 	mrs	r3, PRIMASK
 80043d2:	613b      	str	r3, [r7, #16]
  return(result);
 80043d4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80043d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043d8:	2301      	movs	r3, #1
 80043da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	f383 8810 	msr	PRIMASK, r3
}
 80043e2:	46c0      	nop			; (mov r8, r8)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4924      	ldr	r1, [pc, #144]	; (8004480 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80043f0:	400a      	ands	r2, r1
 80043f2:	601a      	str	r2, [r3, #0]
 80043f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043f6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	f383 8810 	msr	PRIMASK, r3
}
 80043fe:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004400:	f3ef 8310 	mrs	r3, PRIMASK
 8004404:	61fb      	str	r3, [r7, #28]
  return(result);
 8004406:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004408:	64bb      	str	r3, [r7, #72]	; 0x48
 800440a:	2301      	movs	r3, #1
 800440c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800440e:	6a3b      	ldr	r3, [r7, #32]
 8004410:	f383 8810 	msr	PRIMASK, r3
}
 8004414:	46c0      	nop			; (mov r8, r8)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	689a      	ldr	r2, [r3, #8]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2101      	movs	r1, #1
 8004422:	438a      	bics	r2, r1
 8004424:	609a      	str	r2, [r3, #8]
 8004426:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004428:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800442a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442c:	f383 8810 	msr	PRIMASK, r3
}
 8004430:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2288      	movs	r2, #136	; 0x88
 8004436:	2120      	movs	r1, #32
 8004438:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	228c      	movs	r2, #140	; 0x8c
 800443e:	2120      	movs	r1, #32
 8004440:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2290      	movs	r2, #144	; 0x90
 8004446:	2120      	movs	r1, #32
 8004448:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2284      	movs	r2, #132	; 0x84
 800444e:	2100      	movs	r1, #0
 8004450:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e010      	b.n	8004478 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	69db      	ldr	r3, [r3, #28]
 800445c:	68ba      	ldr	r2, [r7, #8]
 800445e:	4013      	ands	r3, r2
 8004460:	68ba      	ldr	r2, [r7, #8]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	425a      	negs	r2, r3
 8004466:	4153      	adcs	r3, r2
 8004468:	b2db      	uxtb	r3, r3
 800446a:	001a      	movs	r2, r3
 800446c:	1dfb      	adds	r3, r7, #7
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	429a      	cmp	r2, r3
 8004472:	d100      	bne.n	8004476 <UART_WaitOnFlagUntilTimeout+0x182>
 8004474:	e747      	b.n	8004306 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004476:	2300      	movs	r3, #0
}
 8004478:	0018      	movs	r0, r3
 800447a:	46bd      	mov	sp, r7
 800447c:	b014      	add	sp, #80	; 0x50
 800447e:	bd80      	pop	{r7, pc}
 8004480:	fffffe5f 	.word	0xfffffe5f

08004484 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b090      	sub	sp, #64	; 0x40
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	1dbb      	adds	r3, r7, #6
 8004490:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	68ba      	ldr	r2, [r7, #8]
 8004496:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	1dba      	adds	r2, r7, #6
 800449c:	215c      	movs	r1, #92	; 0x5c
 800449e:	8812      	ldrh	r2, [r2, #0]
 80044a0:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2290      	movs	r2, #144	; 0x90
 80044a6:	2100      	movs	r1, #0
 80044a8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	228c      	movs	r2, #140	; 0x8c
 80044ae:	2122      	movs	r1, #34	; 0x22
 80044b0:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2280      	movs	r2, #128	; 0x80
 80044b6:	589b      	ldr	r3, [r3, r2]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d02d      	beq.n	8004518 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2280      	movs	r2, #128	; 0x80
 80044c0:	589b      	ldr	r3, [r3, r2]
 80044c2:	4a40      	ldr	r2, [pc, #256]	; (80045c4 <UART_Start_Receive_DMA+0x140>)
 80044c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2280      	movs	r2, #128	; 0x80
 80044ca:	589b      	ldr	r3, [r3, r2]
 80044cc:	4a3e      	ldr	r2, [pc, #248]	; (80045c8 <UART_Start_Receive_DMA+0x144>)
 80044ce:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2280      	movs	r2, #128	; 0x80
 80044d4:	589b      	ldr	r3, [r3, r2]
 80044d6:	4a3d      	ldr	r2, [pc, #244]	; (80045cc <UART_Start_Receive_DMA+0x148>)
 80044d8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2280      	movs	r2, #128	; 0x80
 80044de:	589b      	ldr	r3, [r3, r2]
 80044e0:	2200      	movs	r2, #0
 80044e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2280      	movs	r2, #128	; 0x80
 80044e8:	5898      	ldr	r0, [r3, r2]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	3324      	adds	r3, #36	; 0x24
 80044f0:	0019      	movs	r1, r3
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044f6:	001a      	movs	r2, r3
 80044f8:	1dbb      	adds	r3, r7, #6
 80044fa:	881b      	ldrh	r3, [r3, #0]
 80044fc:	f7fc ffde 	bl	80014bc <HAL_DMA_Start_IT>
 8004500:	1e03      	subs	r3, r0, #0
 8004502:	d009      	beq.n	8004518 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2290      	movs	r2, #144	; 0x90
 8004508:	2110      	movs	r1, #16
 800450a:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	228c      	movs	r2, #140	; 0x8c
 8004510:	2120      	movs	r1, #32
 8004512:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e050      	b.n	80045ba <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d019      	beq.n	8004554 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004520:	f3ef 8310 	mrs	r3, PRIMASK
 8004524:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004526:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004528:	63fb      	str	r3, [r7, #60]	; 0x3c
 800452a:	2301      	movs	r3, #1
 800452c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800452e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004530:	f383 8810 	msr	PRIMASK, r3
}
 8004534:	46c0      	nop			; (mov r8, r8)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2180      	movs	r1, #128	; 0x80
 8004542:	0049      	lsls	r1, r1, #1
 8004544:	430a      	orrs	r2, r1
 8004546:	601a      	str	r2, [r3, #0]
 8004548:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800454a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800454c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800454e:	f383 8810 	msr	PRIMASK, r3
}
 8004552:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004554:	f3ef 8310 	mrs	r3, PRIMASK
 8004558:	613b      	str	r3, [r7, #16]
  return(result);
 800455a:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800455c:	63bb      	str	r3, [r7, #56]	; 0x38
 800455e:	2301      	movs	r3, #1
 8004560:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	f383 8810 	msr	PRIMASK, r3
}
 8004568:	46c0      	nop			; (mov r8, r8)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	689a      	ldr	r2, [r3, #8]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2101      	movs	r1, #1
 8004576:	430a      	orrs	r2, r1
 8004578:	609a      	str	r2, [r3, #8]
 800457a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800457c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	f383 8810 	msr	PRIMASK, r3
}
 8004584:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004586:	f3ef 8310 	mrs	r3, PRIMASK
 800458a:	61fb      	str	r3, [r7, #28]
  return(result);
 800458c:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800458e:	637b      	str	r3, [r7, #52]	; 0x34
 8004590:	2301      	movs	r3, #1
 8004592:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004594:	6a3b      	ldr	r3, [r7, #32]
 8004596:	f383 8810 	msr	PRIMASK, r3
}
 800459a:	46c0      	nop			; (mov r8, r8)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	689a      	ldr	r2, [r3, #8]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2140      	movs	r1, #64	; 0x40
 80045a8:	430a      	orrs	r2, r1
 80045aa:	609a      	str	r2, [r3, #8]
 80045ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045ae:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b2:	f383 8810 	msr	PRIMASK, r3
}
 80045b6:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	0018      	movs	r0, r3
 80045bc:	46bd      	mov	sp, r7
 80045be:	b010      	add	sp, #64	; 0x40
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	46c0      	nop			; (mov r8, r8)
 80045c4:	0800471d 	.word	0x0800471d
 80045c8:	0800484d 	.word	0x0800484d
 80045cc:	0800488f 	.word	0x0800488f

080045d0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b08a      	sub	sp, #40	; 0x28
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045d8:	f3ef 8310 	mrs	r3, PRIMASK
 80045dc:	60bb      	str	r3, [r7, #8]
  return(result);
 80045de:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80045e0:	627b      	str	r3, [r7, #36]	; 0x24
 80045e2:	2301      	movs	r3, #1
 80045e4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	f383 8810 	msr	PRIMASK, r3
}
 80045ec:	46c0      	nop			; (mov r8, r8)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	21c0      	movs	r1, #192	; 0xc0
 80045fa:	438a      	bics	r2, r1
 80045fc:	601a      	str	r2, [r3, #0]
 80045fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004600:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	f383 8810 	msr	PRIMASK, r3
}
 8004608:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800460a:	f3ef 8310 	mrs	r3, PRIMASK
 800460e:	617b      	str	r3, [r7, #20]
  return(result);
 8004610:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8004612:	623b      	str	r3, [r7, #32]
 8004614:	2301      	movs	r3, #1
 8004616:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	f383 8810 	msr	PRIMASK, r3
}
 800461e:	46c0      	nop			; (mov r8, r8)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	689a      	ldr	r2, [r3, #8]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4908      	ldr	r1, [pc, #32]	; (800464c <UART_EndTxTransfer+0x7c>)
 800462c:	400a      	ands	r2, r1
 800462e:	609a      	str	r2, [r3, #8]
 8004630:	6a3b      	ldr	r3, [r7, #32]
 8004632:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	f383 8810 	msr	PRIMASK, r3
}
 800463a:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2288      	movs	r2, #136	; 0x88
 8004640:	2120      	movs	r1, #32
 8004642:	5099      	str	r1, [r3, r2]
}
 8004644:	46c0      	nop			; (mov r8, r8)
 8004646:	46bd      	mov	sp, r7
 8004648:	b00a      	add	sp, #40	; 0x28
 800464a:	bd80      	pop	{r7, pc}
 800464c:	ff7fffff 	.word	0xff7fffff

08004650 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b08e      	sub	sp, #56	; 0x38
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004658:	f3ef 8310 	mrs	r3, PRIMASK
 800465c:	617b      	str	r3, [r7, #20]
  return(result);
 800465e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004660:	637b      	str	r3, [r7, #52]	; 0x34
 8004662:	2301      	movs	r3, #1
 8004664:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	f383 8810 	msr	PRIMASK, r3
}
 800466c:	46c0      	nop			; (mov r8, r8)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4926      	ldr	r1, [pc, #152]	; (8004714 <UART_EndRxTransfer+0xc4>)
 800467a:	400a      	ands	r2, r1
 800467c:	601a      	str	r2, [r3, #0]
 800467e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004680:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	f383 8810 	msr	PRIMASK, r3
}
 8004688:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800468a:	f3ef 8310 	mrs	r3, PRIMASK
 800468e:	623b      	str	r3, [r7, #32]
  return(result);
 8004690:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004692:	633b      	str	r3, [r7, #48]	; 0x30
 8004694:	2301      	movs	r3, #1
 8004696:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469a:	f383 8810 	msr	PRIMASK, r3
}
 800469e:	46c0      	nop			; (mov r8, r8)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	689a      	ldr	r2, [r3, #8]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	491b      	ldr	r1, [pc, #108]	; (8004718 <UART_EndRxTransfer+0xc8>)
 80046ac:	400a      	ands	r2, r1
 80046ae:	609a      	str	r2, [r3, #8]
 80046b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b6:	f383 8810 	msr	PRIMASK, r3
}
 80046ba:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d118      	bne.n	80046f6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046c4:	f3ef 8310 	mrs	r3, PRIMASK
 80046c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80046ca:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046ce:	2301      	movs	r3, #1
 80046d0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f383 8810 	msr	PRIMASK, r3
}
 80046d8:	46c0      	nop			; (mov r8, r8)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2110      	movs	r1, #16
 80046e6:	438a      	bics	r2, r1
 80046e8:	601a      	str	r2, [r3, #0]
 80046ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	f383 8810 	msr	PRIMASK, r3
}
 80046f4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	228c      	movs	r2, #140	; 0x8c
 80046fa:	2120      	movs	r1, #32
 80046fc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	675a      	str	r2, [r3, #116]	; 0x74
}
 800470a:	46c0      	nop			; (mov r8, r8)
 800470c:	46bd      	mov	sp, r7
 800470e:	b00e      	add	sp, #56	; 0x38
 8004710:	bd80      	pop	{r7, pc}
 8004712:	46c0      	nop			; (mov r8, r8)
 8004714:	fffffedf 	.word	0xfffffedf
 8004718:	effffffe 	.word	0xeffffffe

0800471c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b094      	sub	sp, #80	; 0x50
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004728:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2220      	movs	r2, #32
 8004732:	4013      	ands	r3, r2
 8004734:	d16f      	bne.n	8004816 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8004736:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004738:	225e      	movs	r2, #94	; 0x5e
 800473a:	2100      	movs	r1, #0
 800473c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800473e:	f3ef 8310 	mrs	r3, PRIMASK
 8004742:	61bb      	str	r3, [r7, #24]
  return(result);
 8004744:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004746:	64bb      	str	r3, [r7, #72]	; 0x48
 8004748:	2301      	movs	r3, #1
 800474a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	f383 8810 	msr	PRIMASK, r3
}
 8004752:	46c0      	nop			; (mov r8, r8)
 8004754:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	493a      	ldr	r1, [pc, #232]	; (8004848 <UART_DMAReceiveCplt+0x12c>)
 8004760:	400a      	ands	r2, r1
 8004762:	601a      	str	r2, [r3, #0]
 8004764:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004766:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004768:	6a3b      	ldr	r3, [r7, #32]
 800476a:	f383 8810 	msr	PRIMASK, r3
}
 800476e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004770:	f3ef 8310 	mrs	r3, PRIMASK
 8004774:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004778:	647b      	str	r3, [r7, #68]	; 0x44
 800477a:	2301      	movs	r3, #1
 800477c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800477e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004780:	f383 8810 	msr	PRIMASK, r3
}
 8004784:	46c0      	nop			; (mov r8, r8)
 8004786:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	689a      	ldr	r2, [r3, #8]
 800478c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2101      	movs	r1, #1
 8004792:	438a      	bics	r2, r1
 8004794:	609a      	str	r2, [r3, #8]
 8004796:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004798:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800479a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800479c:	f383 8810 	msr	PRIMASK, r3
}
 80047a0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047a2:	f3ef 8310 	mrs	r3, PRIMASK
 80047a6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80047a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047aa:	643b      	str	r3, [r7, #64]	; 0x40
 80047ac:	2301      	movs	r3, #1
 80047ae:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047b2:	f383 8810 	msr	PRIMASK, r3
}
 80047b6:	46c0      	nop			; (mov r8, r8)
 80047b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	689a      	ldr	r2, [r3, #8]
 80047be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2140      	movs	r1, #64	; 0x40
 80047c4:	438a      	bics	r2, r1
 80047c6:	609a      	str	r2, [r3, #8]
 80047c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047ca:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ce:	f383 8810 	msr	PRIMASK, r3
}
 80047d2:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80047d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047d6:	228c      	movs	r2, #140	; 0x8c
 80047d8:	2120      	movs	r1, #32
 80047da:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d118      	bne.n	8004816 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047e4:	f3ef 8310 	mrs	r3, PRIMASK
 80047e8:	60fb      	str	r3, [r7, #12]
  return(result);
 80047ea:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047ee:	2301      	movs	r3, #1
 80047f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	f383 8810 	msr	PRIMASK, r3
}
 80047f8:	46c0      	nop			; (mov r8, r8)
 80047fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2110      	movs	r1, #16
 8004806:	438a      	bics	r2, r1
 8004808:	601a      	str	r2, [r3, #0]
 800480a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800480c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	f383 8810 	msr	PRIMASK, r3
}
 8004814:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004816:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004818:	2200      	movs	r2, #0
 800481a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800481c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800481e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004820:	2b01      	cmp	r3, #1
 8004822:	d108      	bne.n	8004836 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004824:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004826:	225c      	movs	r2, #92	; 0x5c
 8004828:	5a9a      	ldrh	r2, [r3, r2]
 800482a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800482c:	0011      	movs	r1, r2
 800482e:	0018      	movs	r0, r3
 8004830:	f7fc f9a4 	bl	8000b7c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004834:	e003      	b.n	800483e <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8004836:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004838:	0018      	movs	r0, r3
 800483a:	f7ff f9c9 	bl	8003bd0 <HAL_UART_RxCpltCallback>
}
 800483e:	46c0      	nop			; (mov r8, r8)
 8004840:	46bd      	mov	sp, r7
 8004842:	b014      	add	sp, #80	; 0x50
 8004844:	bd80      	pop	{r7, pc}
 8004846:	46c0      	nop			; (mov r8, r8)
 8004848:	fffffeff 	.word	0xfffffeff

0800484c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004858:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2201      	movs	r2, #1
 800485e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004864:	2b01      	cmp	r3, #1
 8004866:	d10a      	bne.n	800487e <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	225c      	movs	r2, #92	; 0x5c
 800486c:	5a9b      	ldrh	r3, [r3, r2]
 800486e:	085b      	lsrs	r3, r3, #1
 8004870:	b29a      	uxth	r2, r3
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	0011      	movs	r1, r2
 8004876:	0018      	movs	r0, r3
 8004878:	f7fc f980 	bl	8000b7c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800487c:	e003      	b.n	8004886 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	0018      	movs	r0, r3
 8004882:	f7ff f9ad 	bl	8003be0 <HAL_UART_RxHalfCpltCallback>
}
 8004886:	46c0      	nop			; (mov r8, r8)
 8004888:	46bd      	mov	sp, r7
 800488a:	b004      	add	sp, #16
 800488c:	bd80      	pop	{r7, pc}

0800488e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800488e:	b580      	push	{r7, lr}
 8004890:	b086      	sub	sp, #24
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800489a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	2288      	movs	r2, #136	; 0x88
 80048a0:	589b      	ldr	r3, [r3, r2]
 80048a2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	228c      	movs	r2, #140	; 0x8c
 80048a8:	589b      	ldr	r3, [r3, r2]
 80048aa:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	2280      	movs	r2, #128	; 0x80
 80048b4:	4013      	ands	r3, r2
 80048b6:	2b80      	cmp	r3, #128	; 0x80
 80048b8:	d10a      	bne.n	80048d0 <UART_DMAError+0x42>
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	2b21      	cmp	r3, #33	; 0x21
 80048be:	d107      	bne.n	80048d0 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	2256      	movs	r2, #86	; 0x56
 80048c4:	2100      	movs	r1, #0
 80048c6:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	0018      	movs	r0, r3
 80048cc:	f7ff fe80 	bl	80045d0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	2240      	movs	r2, #64	; 0x40
 80048d8:	4013      	ands	r3, r2
 80048da:	2b40      	cmp	r3, #64	; 0x40
 80048dc:	d10a      	bne.n	80048f4 <UART_DMAError+0x66>
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2b22      	cmp	r3, #34	; 0x22
 80048e2:	d107      	bne.n	80048f4 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	225e      	movs	r2, #94	; 0x5e
 80048e8:	2100      	movs	r1, #0
 80048ea:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	0018      	movs	r0, r3
 80048f0:	f7ff feae 	bl	8004650 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	2290      	movs	r2, #144	; 0x90
 80048f8:	589b      	ldr	r3, [r3, r2]
 80048fa:	2210      	movs	r2, #16
 80048fc:	431a      	orrs	r2, r3
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	2190      	movs	r1, #144	; 0x90
 8004902:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	0018      	movs	r0, r3
 8004908:	f7ff f972 	bl	8003bf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800490c:	46c0      	nop			; (mov r8, r8)
 800490e:	46bd      	mov	sp, r7
 8004910:	b006      	add	sp, #24
 8004912:	bd80      	pop	{r7, pc}

08004914 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004920:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	225e      	movs	r2, #94	; 0x5e
 8004926:	2100      	movs	r1, #0
 8004928:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2256      	movs	r2, #86	; 0x56
 800492e:	2100      	movs	r1, #0
 8004930:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	0018      	movs	r0, r3
 8004936:	f7ff f95b 	bl	8003bf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800493a:	46c0      	nop			; (mov r8, r8)
 800493c:	46bd      	mov	sp, r7
 800493e:	b004      	add	sp, #16
 8004940:	bd80      	pop	{r7, pc}

08004942 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004942:	b580      	push	{r7, lr}
 8004944:	b086      	sub	sp, #24
 8004946:	af00      	add	r7, sp, #0
 8004948:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800494a:	f3ef 8310 	mrs	r3, PRIMASK
 800494e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004950:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004952:	617b      	str	r3, [r7, #20]
 8004954:	2301      	movs	r3, #1
 8004956:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f383 8810 	msr	PRIMASK, r3
}
 800495e:	46c0      	nop			; (mov r8, r8)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2140      	movs	r1, #64	; 0x40
 800496c:	438a      	bics	r2, r1
 800496e:	601a      	str	r2, [r3, #0]
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	f383 8810 	msr	PRIMASK, r3
}
 800497a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2288      	movs	r2, #136	; 0x88
 8004980:	2120      	movs	r1, #32
 8004982:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	0018      	movs	r0, r3
 800498e:	f7ff f917 	bl	8003bc0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004992:	46c0      	nop			; (mov r8, r8)
 8004994:	46bd      	mov	sp, r7
 8004996:	b006      	add	sp, #24
 8004998:	bd80      	pop	{r7, pc}

0800499a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800499a:	b580      	push	{r7, lr}
 800499c:	b082      	sub	sp, #8
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80049a2:	46c0      	nop			; (mov r8, r8)
 80049a4:	46bd      	mov	sp, r7
 80049a6:	b002      	add	sp, #8
 80049a8:	bd80      	pop	{r7, pc}

080049aa <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80049aa:	b580      	push	{r7, lr}
 80049ac:	b082      	sub	sp, #8
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80049b2:	46c0      	nop			; (mov r8, r8)
 80049b4:	46bd      	mov	sp, r7
 80049b6:	b002      	add	sp, #8
 80049b8:	bd80      	pop	{r7, pc}

080049ba <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80049ba:	b580      	push	{r7, lr}
 80049bc:	b082      	sub	sp, #8
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80049c2:	46c0      	nop			; (mov r8, r8)
 80049c4:	46bd      	mov	sp, r7
 80049c6:	b002      	add	sp, #8
 80049c8:	bd80      	pop	{r7, pc}
	...

080049cc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2284      	movs	r2, #132	; 0x84
 80049d8:	5c9b      	ldrb	r3, [r3, r2]
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d101      	bne.n	80049e2 <HAL_UARTEx_DisableFifoMode+0x16>
 80049de:	2302      	movs	r3, #2
 80049e0:	e027      	b.n	8004a32 <HAL_UARTEx_DisableFifoMode+0x66>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2284      	movs	r2, #132	; 0x84
 80049e6:	2101      	movs	r1, #1
 80049e8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2288      	movs	r2, #136	; 0x88
 80049ee:	2124      	movs	r1, #36	; 0x24
 80049f0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2101      	movs	r1, #1
 8004a06:	438a      	bics	r2, r1
 8004a08:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	4a0b      	ldr	r2, [pc, #44]	; (8004a3c <HAL_UARTEx_DisableFifoMode+0x70>)
 8004a0e:	4013      	ands	r3, r2
 8004a10:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2288      	movs	r2, #136	; 0x88
 8004a24:	2120      	movs	r1, #32
 8004a26:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2284      	movs	r2, #132	; 0x84
 8004a2c:	2100      	movs	r1, #0
 8004a2e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	0018      	movs	r0, r3
 8004a34:	46bd      	mov	sp, r7
 8004a36:	b004      	add	sp, #16
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	46c0      	nop			; (mov r8, r8)
 8004a3c:	dfffffff 	.word	0xdfffffff

08004a40 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2284      	movs	r2, #132	; 0x84
 8004a4e:	5c9b      	ldrb	r3, [r3, r2]
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d101      	bne.n	8004a58 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004a54:	2302      	movs	r3, #2
 8004a56:	e02e      	b.n	8004ab6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2284      	movs	r2, #132	; 0x84
 8004a5c:	2101      	movs	r1, #1
 8004a5e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2288      	movs	r2, #136	; 0x88
 8004a64:	2124      	movs	r1, #36	; 0x24
 8004a66:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	2101      	movs	r1, #1
 8004a7c:	438a      	bics	r2, r1
 8004a7e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	00db      	lsls	r3, r3, #3
 8004a88:	08d9      	lsrs	r1, r3, #3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	683a      	ldr	r2, [r7, #0]
 8004a90:	430a      	orrs	r2, r1
 8004a92:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	0018      	movs	r0, r3
 8004a98:	f000 f8bc 	bl	8004c14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	68fa      	ldr	r2, [r7, #12]
 8004aa2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2288      	movs	r2, #136	; 0x88
 8004aa8:	2120      	movs	r1, #32
 8004aaa:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2284      	movs	r2, #132	; 0x84
 8004ab0:	2100      	movs	r1, #0
 8004ab2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	0018      	movs	r0, r3
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	b004      	add	sp, #16
 8004abc:	bd80      	pop	{r7, pc}
	...

08004ac0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b084      	sub	sp, #16
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2284      	movs	r2, #132	; 0x84
 8004ace:	5c9b      	ldrb	r3, [r3, r2]
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d101      	bne.n	8004ad8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004ad4:	2302      	movs	r3, #2
 8004ad6:	e02f      	b.n	8004b38 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2284      	movs	r2, #132	; 0x84
 8004adc:	2101      	movs	r1, #1
 8004ade:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2288      	movs	r2, #136	; 0x88
 8004ae4:	2124      	movs	r1, #36	; 0x24
 8004ae6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2101      	movs	r1, #1
 8004afc:	438a      	bics	r2, r1
 8004afe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	4a0e      	ldr	r2, [pc, #56]	; (8004b40 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004b08:	4013      	ands	r3, r2
 8004b0a:	0019      	movs	r1, r3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	683a      	ldr	r2, [r7, #0]
 8004b12:	430a      	orrs	r2, r1
 8004b14:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	0018      	movs	r0, r3
 8004b1a:	f000 f87b 	bl	8004c14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	68fa      	ldr	r2, [r7, #12]
 8004b24:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2288      	movs	r2, #136	; 0x88
 8004b2a:	2120      	movs	r1, #32
 8004b2c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2284      	movs	r2, #132	; 0x84
 8004b32:	2100      	movs	r1, #0
 8004b34:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	0018      	movs	r0, r3
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	b004      	add	sp, #16
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	f1ffffff 	.word	0xf1ffffff

08004b44 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b44:	b5b0      	push	{r4, r5, r7, lr}
 8004b46:	b08a      	sub	sp, #40	; 0x28
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	1dbb      	adds	r3, r7, #6
 8004b50:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	228c      	movs	r2, #140	; 0x8c
 8004b56:	589b      	ldr	r3, [r3, r2]
 8004b58:	2b20      	cmp	r3, #32
 8004b5a:	d156      	bne.n	8004c0a <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d003      	beq.n	8004b6a <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004b62:	1dbb      	adds	r3, r7, #6
 8004b64:	881b      	ldrh	r3, [r3, #0]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d101      	bne.n	8004b6e <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e04e      	b.n	8004c0c <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	689a      	ldr	r2, [r3, #8]
 8004b72:	2380      	movs	r3, #128	; 0x80
 8004b74:	015b      	lsls	r3, r3, #5
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d109      	bne.n	8004b8e <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d105      	bne.n	8004b8e <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	2201      	movs	r2, #1
 8004b86:	4013      	ands	r3, r2
 8004b88:	d001      	beq.n	8004b8e <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e03e      	b.n	8004c0c <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2201      	movs	r2, #1
 8004b92:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2200      	movs	r2, #0
 8004b98:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004b9a:	2527      	movs	r5, #39	; 0x27
 8004b9c:	197c      	adds	r4, r7, r5
 8004b9e:	1dbb      	adds	r3, r7, #6
 8004ba0:	881a      	ldrh	r2, [r3, #0]
 8004ba2:	68b9      	ldr	r1, [r7, #8]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	0018      	movs	r0, r3
 8004ba8:	f7ff fc6c 	bl	8004484 <UART_Start_Receive_DMA>
 8004bac:	0003      	movs	r3, r0
 8004bae:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004bb0:	197b      	adds	r3, r7, r5
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d124      	bne.n	8004c02 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d11c      	bne.n	8004bfa <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2210      	movs	r2, #16
 8004bc6:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bc8:	f3ef 8310 	mrs	r3, PRIMASK
 8004bcc:	617b      	str	r3, [r7, #20]
  return(result);
 8004bce:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bd0:	623b      	str	r3, [r7, #32]
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	f383 8810 	msr	PRIMASK, r3
}
 8004bdc:	46c0      	nop			; (mov r8, r8)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2110      	movs	r1, #16
 8004bea:	430a      	orrs	r2, r1
 8004bec:	601a      	str	r2, [r3, #0]
 8004bee:	6a3b      	ldr	r3, [r7, #32]
 8004bf0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	f383 8810 	msr	PRIMASK, r3
}
 8004bf8:	e003      	b.n	8004c02 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004bfa:	2327      	movs	r3, #39	; 0x27
 8004bfc:	18fb      	adds	r3, r7, r3
 8004bfe:	2201      	movs	r2, #1
 8004c00:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 8004c02:	2327      	movs	r3, #39	; 0x27
 8004c04:	18fb      	adds	r3, r7, r3
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	e000      	b.n	8004c0c <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 8004c0a:	2302      	movs	r3, #2
  }
}
 8004c0c:	0018      	movs	r0, r3
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	b00a      	add	sp, #40	; 0x28
 8004c12:	bdb0      	pop	{r4, r5, r7, pc}

08004c14 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004c14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c16:	b085      	sub	sp, #20
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d108      	bne.n	8004c36 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	226a      	movs	r2, #106	; 0x6a
 8004c28:	2101      	movs	r1, #1
 8004c2a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2268      	movs	r2, #104	; 0x68
 8004c30:	2101      	movs	r1, #1
 8004c32:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004c34:	e043      	b.n	8004cbe <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004c36:	260f      	movs	r6, #15
 8004c38:	19bb      	adds	r3, r7, r6
 8004c3a:	2208      	movs	r2, #8
 8004c3c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004c3e:	200e      	movs	r0, #14
 8004c40:	183b      	adds	r3, r7, r0
 8004c42:	2208      	movs	r2, #8
 8004c44:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	0e5b      	lsrs	r3, r3, #25
 8004c4e:	b2da      	uxtb	r2, r3
 8004c50:	240d      	movs	r4, #13
 8004c52:	193b      	adds	r3, r7, r4
 8004c54:	2107      	movs	r1, #7
 8004c56:	400a      	ands	r2, r1
 8004c58:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	0f5b      	lsrs	r3, r3, #29
 8004c62:	b2da      	uxtb	r2, r3
 8004c64:	250c      	movs	r5, #12
 8004c66:	197b      	adds	r3, r7, r5
 8004c68:	2107      	movs	r1, #7
 8004c6a:	400a      	ands	r2, r1
 8004c6c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004c6e:	183b      	adds	r3, r7, r0
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	197a      	adds	r2, r7, r5
 8004c74:	7812      	ldrb	r2, [r2, #0]
 8004c76:	4914      	ldr	r1, [pc, #80]	; (8004cc8 <UARTEx_SetNbDataToProcess+0xb4>)
 8004c78:	5c8a      	ldrb	r2, [r1, r2]
 8004c7a:	435a      	muls	r2, r3
 8004c7c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004c7e:	197b      	adds	r3, r7, r5
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	4a12      	ldr	r2, [pc, #72]	; (8004ccc <UARTEx_SetNbDataToProcess+0xb8>)
 8004c84:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004c86:	0019      	movs	r1, r3
 8004c88:	f7fb fad8 	bl	800023c <__divsi3>
 8004c8c:	0003      	movs	r3, r0
 8004c8e:	b299      	uxth	r1, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	226a      	movs	r2, #106	; 0x6a
 8004c94:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004c96:	19bb      	adds	r3, r7, r6
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	193a      	adds	r2, r7, r4
 8004c9c:	7812      	ldrb	r2, [r2, #0]
 8004c9e:	490a      	ldr	r1, [pc, #40]	; (8004cc8 <UARTEx_SetNbDataToProcess+0xb4>)
 8004ca0:	5c8a      	ldrb	r2, [r1, r2]
 8004ca2:	435a      	muls	r2, r3
 8004ca4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004ca6:	193b      	adds	r3, r7, r4
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	4a08      	ldr	r2, [pc, #32]	; (8004ccc <UARTEx_SetNbDataToProcess+0xb8>)
 8004cac:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004cae:	0019      	movs	r1, r3
 8004cb0:	f7fb fac4 	bl	800023c <__divsi3>
 8004cb4:	0003      	movs	r3, r0
 8004cb6:	b299      	uxth	r1, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2268      	movs	r2, #104	; 0x68
 8004cbc:	5299      	strh	r1, [r3, r2]
}
 8004cbe:	46c0      	nop			; (mov r8, r8)
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	b005      	add	sp, #20
 8004cc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cc6:	46c0      	nop			; (mov r8, r8)
 8004cc8:	08006498 	.word	0x08006498
 8004ccc:	080064a0 	.word	0x080064a0

08004cd0 <__errno>:
 8004cd0:	4b01      	ldr	r3, [pc, #4]	; (8004cd8 <__errno+0x8>)
 8004cd2:	6818      	ldr	r0, [r3, #0]
 8004cd4:	4770      	bx	lr
 8004cd6:	46c0      	nop			; (mov r8, r8)
 8004cd8:	20000014 	.word	0x20000014

08004cdc <__libc_init_array>:
 8004cdc:	b570      	push	{r4, r5, r6, lr}
 8004cde:	2600      	movs	r6, #0
 8004ce0:	4d0c      	ldr	r5, [pc, #48]	; (8004d14 <__libc_init_array+0x38>)
 8004ce2:	4c0d      	ldr	r4, [pc, #52]	; (8004d18 <__libc_init_array+0x3c>)
 8004ce4:	1b64      	subs	r4, r4, r5
 8004ce6:	10a4      	asrs	r4, r4, #2
 8004ce8:	42a6      	cmp	r6, r4
 8004cea:	d109      	bne.n	8004d00 <__libc_init_array+0x24>
 8004cec:	2600      	movs	r6, #0
 8004cee:	f001 fb65 	bl	80063bc <_init>
 8004cf2:	4d0a      	ldr	r5, [pc, #40]	; (8004d1c <__libc_init_array+0x40>)
 8004cf4:	4c0a      	ldr	r4, [pc, #40]	; (8004d20 <__libc_init_array+0x44>)
 8004cf6:	1b64      	subs	r4, r4, r5
 8004cf8:	10a4      	asrs	r4, r4, #2
 8004cfa:	42a6      	cmp	r6, r4
 8004cfc:	d105      	bne.n	8004d0a <__libc_init_array+0x2e>
 8004cfe:	bd70      	pop	{r4, r5, r6, pc}
 8004d00:	00b3      	lsls	r3, r6, #2
 8004d02:	58eb      	ldr	r3, [r5, r3]
 8004d04:	4798      	blx	r3
 8004d06:	3601      	adds	r6, #1
 8004d08:	e7ee      	b.n	8004ce8 <__libc_init_array+0xc>
 8004d0a:	00b3      	lsls	r3, r6, #2
 8004d0c:	58eb      	ldr	r3, [r5, r3]
 8004d0e:	4798      	blx	r3
 8004d10:	3601      	adds	r6, #1
 8004d12:	e7f2      	b.n	8004cfa <__libc_init_array+0x1e>
 8004d14:	080066f8 	.word	0x080066f8
 8004d18:	080066f8 	.word	0x080066f8
 8004d1c:	080066f8 	.word	0x080066f8
 8004d20:	080066fc 	.word	0x080066fc

08004d24 <malloc>:
 8004d24:	b510      	push	{r4, lr}
 8004d26:	4b03      	ldr	r3, [pc, #12]	; (8004d34 <malloc+0x10>)
 8004d28:	0001      	movs	r1, r0
 8004d2a:	6818      	ldr	r0, [r3, #0]
 8004d2c:	f000 f882 	bl	8004e34 <_malloc_r>
 8004d30:	bd10      	pop	{r4, pc}
 8004d32:	46c0      	nop			; (mov r8, r8)
 8004d34:	20000014 	.word	0x20000014

08004d38 <free>:
 8004d38:	b510      	push	{r4, lr}
 8004d3a:	4b03      	ldr	r3, [pc, #12]	; (8004d48 <free+0x10>)
 8004d3c:	0001      	movs	r1, r0
 8004d3e:	6818      	ldr	r0, [r3, #0]
 8004d40:	f000 f80c 	bl	8004d5c <_free_r>
 8004d44:	bd10      	pop	{r4, pc}
 8004d46:	46c0      	nop			; (mov r8, r8)
 8004d48:	20000014 	.word	0x20000014

08004d4c <memset>:
 8004d4c:	0003      	movs	r3, r0
 8004d4e:	1882      	adds	r2, r0, r2
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d100      	bne.n	8004d56 <memset+0xa>
 8004d54:	4770      	bx	lr
 8004d56:	7019      	strb	r1, [r3, #0]
 8004d58:	3301      	adds	r3, #1
 8004d5a:	e7f9      	b.n	8004d50 <memset+0x4>

08004d5c <_free_r>:
 8004d5c:	b570      	push	{r4, r5, r6, lr}
 8004d5e:	0005      	movs	r5, r0
 8004d60:	2900      	cmp	r1, #0
 8004d62:	d010      	beq.n	8004d86 <_free_r+0x2a>
 8004d64:	1f0c      	subs	r4, r1, #4
 8004d66:	6823      	ldr	r3, [r4, #0]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	da00      	bge.n	8004d6e <_free_r+0x12>
 8004d6c:	18e4      	adds	r4, r4, r3
 8004d6e:	0028      	movs	r0, r5
 8004d70:	f000 fa54 	bl	800521c <__malloc_lock>
 8004d74:	4a1d      	ldr	r2, [pc, #116]	; (8004dec <_free_r+0x90>)
 8004d76:	6813      	ldr	r3, [r2, #0]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d105      	bne.n	8004d88 <_free_r+0x2c>
 8004d7c:	6063      	str	r3, [r4, #4]
 8004d7e:	6014      	str	r4, [r2, #0]
 8004d80:	0028      	movs	r0, r5
 8004d82:	f000 fa53 	bl	800522c <__malloc_unlock>
 8004d86:	bd70      	pop	{r4, r5, r6, pc}
 8004d88:	42a3      	cmp	r3, r4
 8004d8a:	d908      	bls.n	8004d9e <_free_r+0x42>
 8004d8c:	6821      	ldr	r1, [r4, #0]
 8004d8e:	1860      	adds	r0, r4, r1
 8004d90:	4283      	cmp	r3, r0
 8004d92:	d1f3      	bne.n	8004d7c <_free_r+0x20>
 8004d94:	6818      	ldr	r0, [r3, #0]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	1841      	adds	r1, r0, r1
 8004d9a:	6021      	str	r1, [r4, #0]
 8004d9c:	e7ee      	b.n	8004d7c <_free_r+0x20>
 8004d9e:	001a      	movs	r2, r3
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d001      	beq.n	8004daa <_free_r+0x4e>
 8004da6:	42a3      	cmp	r3, r4
 8004da8:	d9f9      	bls.n	8004d9e <_free_r+0x42>
 8004daa:	6811      	ldr	r1, [r2, #0]
 8004dac:	1850      	adds	r0, r2, r1
 8004dae:	42a0      	cmp	r0, r4
 8004db0:	d10b      	bne.n	8004dca <_free_r+0x6e>
 8004db2:	6820      	ldr	r0, [r4, #0]
 8004db4:	1809      	adds	r1, r1, r0
 8004db6:	1850      	adds	r0, r2, r1
 8004db8:	6011      	str	r1, [r2, #0]
 8004dba:	4283      	cmp	r3, r0
 8004dbc:	d1e0      	bne.n	8004d80 <_free_r+0x24>
 8004dbe:	6818      	ldr	r0, [r3, #0]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	1841      	adds	r1, r0, r1
 8004dc4:	6011      	str	r1, [r2, #0]
 8004dc6:	6053      	str	r3, [r2, #4]
 8004dc8:	e7da      	b.n	8004d80 <_free_r+0x24>
 8004dca:	42a0      	cmp	r0, r4
 8004dcc:	d902      	bls.n	8004dd4 <_free_r+0x78>
 8004dce:	230c      	movs	r3, #12
 8004dd0:	602b      	str	r3, [r5, #0]
 8004dd2:	e7d5      	b.n	8004d80 <_free_r+0x24>
 8004dd4:	6821      	ldr	r1, [r4, #0]
 8004dd6:	1860      	adds	r0, r4, r1
 8004dd8:	4283      	cmp	r3, r0
 8004dda:	d103      	bne.n	8004de4 <_free_r+0x88>
 8004ddc:	6818      	ldr	r0, [r3, #0]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	1841      	adds	r1, r0, r1
 8004de2:	6021      	str	r1, [r4, #0]
 8004de4:	6063      	str	r3, [r4, #4]
 8004de6:	6054      	str	r4, [r2, #4]
 8004de8:	e7ca      	b.n	8004d80 <_free_r+0x24>
 8004dea:	46c0      	nop			; (mov r8, r8)
 8004dec:	20000400 	.word	0x20000400

08004df0 <sbrk_aligned>:
 8004df0:	b570      	push	{r4, r5, r6, lr}
 8004df2:	4e0f      	ldr	r6, [pc, #60]	; (8004e30 <sbrk_aligned+0x40>)
 8004df4:	000d      	movs	r5, r1
 8004df6:	6831      	ldr	r1, [r6, #0]
 8004df8:	0004      	movs	r4, r0
 8004dfa:	2900      	cmp	r1, #0
 8004dfc:	d102      	bne.n	8004e04 <sbrk_aligned+0x14>
 8004dfe:	f000 f88f 	bl	8004f20 <_sbrk_r>
 8004e02:	6030      	str	r0, [r6, #0]
 8004e04:	0029      	movs	r1, r5
 8004e06:	0020      	movs	r0, r4
 8004e08:	f000 f88a 	bl	8004f20 <_sbrk_r>
 8004e0c:	1c43      	adds	r3, r0, #1
 8004e0e:	d00a      	beq.n	8004e26 <sbrk_aligned+0x36>
 8004e10:	2303      	movs	r3, #3
 8004e12:	1cc5      	adds	r5, r0, #3
 8004e14:	439d      	bics	r5, r3
 8004e16:	42a8      	cmp	r0, r5
 8004e18:	d007      	beq.n	8004e2a <sbrk_aligned+0x3a>
 8004e1a:	1a29      	subs	r1, r5, r0
 8004e1c:	0020      	movs	r0, r4
 8004e1e:	f000 f87f 	bl	8004f20 <_sbrk_r>
 8004e22:	1c43      	adds	r3, r0, #1
 8004e24:	d101      	bne.n	8004e2a <sbrk_aligned+0x3a>
 8004e26:	2501      	movs	r5, #1
 8004e28:	426d      	negs	r5, r5
 8004e2a:	0028      	movs	r0, r5
 8004e2c:	bd70      	pop	{r4, r5, r6, pc}
 8004e2e:	46c0      	nop			; (mov r8, r8)
 8004e30:	20000404 	.word	0x20000404

08004e34 <_malloc_r>:
 8004e34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e36:	2203      	movs	r2, #3
 8004e38:	1ccb      	adds	r3, r1, #3
 8004e3a:	4393      	bics	r3, r2
 8004e3c:	3308      	adds	r3, #8
 8004e3e:	0006      	movs	r6, r0
 8004e40:	001f      	movs	r7, r3
 8004e42:	2b0c      	cmp	r3, #12
 8004e44:	d232      	bcs.n	8004eac <_malloc_r+0x78>
 8004e46:	270c      	movs	r7, #12
 8004e48:	42b9      	cmp	r1, r7
 8004e4a:	d831      	bhi.n	8004eb0 <_malloc_r+0x7c>
 8004e4c:	0030      	movs	r0, r6
 8004e4e:	f000 f9e5 	bl	800521c <__malloc_lock>
 8004e52:	4d32      	ldr	r5, [pc, #200]	; (8004f1c <_malloc_r+0xe8>)
 8004e54:	682b      	ldr	r3, [r5, #0]
 8004e56:	001c      	movs	r4, r3
 8004e58:	2c00      	cmp	r4, #0
 8004e5a:	d12e      	bne.n	8004eba <_malloc_r+0x86>
 8004e5c:	0039      	movs	r1, r7
 8004e5e:	0030      	movs	r0, r6
 8004e60:	f7ff ffc6 	bl	8004df0 <sbrk_aligned>
 8004e64:	0004      	movs	r4, r0
 8004e66:	1c43      	adds	r3, r0, #1
 8004e68:	d11e      	bne.n	8004ea8 <_malloc_r+0x74>
 8004e6a:	682c      	ldr	r4, [r5, #0]
 8004e6c:	0025      	movs	r5, r4
 8004e6e:	2d00      	cmp	r5, #0
 8004e70:	d14a      	bne.n	8004f08 <_malloc_r+0xd4>
 8004e72:	6823      	ldr	r3, [r4, #0]
 8004e74:	0029      	movs	r1, r5
 8004e76:	18e3      	adds	r3, r4, r3
 8004e78:	0030      	movs	r0, r6
 8004e7a:	9301      	str	r3, [sp, #4]
 8004e7c:	f000 f850 	bl	8004f20 <_sbrk_r>
 8004e80:	9b01      	ldr	r3, [sp, #4]
 8004e82:	4283      	cmp	r3, r0
 8004e84:	d143      	bne.n	8004f0e <_malloc_r+0xda>
 8004e86:	6823      	ldr	r3, [r4, #0]
 8004e88:	3703      	adds	r7, #3
 8004e8a:	1aff      	subs	r7, r7, r3
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	439f      	bics	r7, r3
 8004e90:	3708      	adds	r7, #8
 8004e92:	2f0c      	cmp	r7, #12
 8004e94:	d200      	bcs.n	8004e98 <_malloc_r+0x64>
 8004e96:	270c      	movs	r7, #12
 8004e98:	0039      	movs	r1, r7
 8004e9a:	0030      	movs	r0, r6
 8004e9c:	f7ff ffa8 	bl	8004df0 <sbrk_aligned>
 8004ea0:	1c43      	adds	r3, r0, #1
 8004ea2:	d034      	beq.n	8004f0e <_malloc_r+0xda>
 8004ea4:	6823      	ldr	r3, [r4, #0]
 8004ea6:	19df      	adds	r7, r3, r7
 8004ea8:	6027      	str	r7, [r4, #0]
 8004eaa:	e013      	b.n	8004ed4 <_malloc_r+0xa0>
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	dacb      	bge.n	8004e48 <_malloc_r+0x14>
 8004eb0:	230c      	movs	r3, #12
 8004eb2:	2500      	movs	r5, #0
 8004eb4:	6033      	str	r3, [r6, #0]
 8004eb6:	0028      	movs	r0, r5
 8004eb8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004eba:	6822      	ldr	r2, [r4, #0]
 8004ebc:	1bd1      	subs	r1, r2, r7
 8004ebe:	d420      	bmi.n	8004f02 <_malloc_r+0xce>
 8004ec0:	290b      	cmp	r1, #11
 8004ec2:	d917      	bls.n	8004ef4 <_malloc_r+0xc0>
 8004ec4:	19e2      	adds	r2, r4, r7
 8004ec6:	6027      	str	r7, [r4, #0]
 8004ec8:	42a3      	cmp	r3, r4
 8004eca:	d111      	bne.n	8004ef0 <_malloc_r+0xbc>
 8004ecc:	602a      	str	r2, [r5, #0]
 8004ece:	6863      	ldr	r3, [r4, #4]
 8004ed0:	6011      	str	r1, [r2, #0]
 8004ed2:	6053      	str	r3, [r2, #4]
 8004ed4:	0030      	movs	r0, r6
 8004ed6:	0025      	movs	r5, r4
 8004ed8:	f000 f9a8 	bl	800522c <__malloc_unlock>
 8004edc:	2207      	movs	r2, #7
 8004ede:	350b      	adds	r5, #11
 8004ee0:	1d23      	adds	r3, r4, #4
 8004ee2:	4395      	bics	r5, r2
 8004ee4:	1aea      	subs	r2, r5, r3
 8004ee6:	429d      	cmp	r5, r3
 8004ee8:	d0e5      	beq.n	8004eb6 <_malloc_r+0x82>
 8004eea:	1b5b      	subs	r3, r3, r5
 8004eec:	50a3      	str	r3, [r4, r2]
 8004eee:	e7e2      	b.n	8004eb6 <_malloc_r+0x82>
 8004ef0:	605a      	str	r2, [r3, #4]
 8004ef2:	e7ec      	b.n	8004ece <_malloc_r+0x9a>
 8004ef4:	6862      	ldr	r2, [r4, #4]
 8004ef6:	42a3      	cmp	r3, r4
 8004ef8:	d101      	bne.n	8004efe <_malloc_r+0xca>
 8004efa:	602a      	str	r2, [r5, #0]
 8004efc:	e7ea      	b.n	8004ed4 <_malloc_r+0xa0>
 8004efe:	605a      	str	r2, [r3, #4]
 8004f00:	e7e8      	b.n	8004ed4 <_malloc_r+0xa0>
 8004f02:	0023      	movs	r3, r4
 8004f04:	6864      	ldr	r4, [r4, #4]
 8004f06:	e7a7      	b.n	8004e58 <_malloc_r+0x24>
 8004f08:	002c      	movs	r4, r5
 8004f0a:	686d      	ldr	r5, [r5, #4]
 8004f0c:	e7af      	b.n	8004e6e <_malloc_r+0x3a>
 8004f0e:	230c      	movs	r3, #12
 8004f10:	0030      	movs	r0, r6
 8004f12:	6033      	str	r3, [r6, #0]
 8004f14:	f000 f98a 	bl	800522c <__malloc_unlock>
 8004f18:	e7cd      	b.n	8004eb6 <_malloc_r+0x82>
 8004f1a:	46c0      	nop			; (mov r8, r8)
 8004f1c:	20000400 	.word	0x20000400

08004f20 <_sbrk_r>:
 8004f20:	2300      	movs	r3, #0
 8004f22:	b570      	push	{r4, r5, r6, lr}
 8004f24:	4d06      	ldr	r5, [pc, #24]	; (8004f40 <_sbrk_r+0x20>)
 8004f26:	0004      	movs	r4, r0
 8004f28:	0008      	movs	r0, r1
 8004f2a:	602b      	str	r3, [r5, #0]
 8004f2c:	f7fc f872 	bl	8001014 <_sbrk>
 8004f30:	1c43      	adds	r3, r0, #1
 8004f32:	d103      	bne.n	8004f3c <_sbrk_r+0x1c>
 8004f34:	682b      	ldr	r3, [r5, #0]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d000      	beq.n	8004f3c <_sbrk_r+0x1c>
 8004f3a:	6023      	str	r3, [r4, #0]
 8004f3c:	bd70      	pop	{r4, r5, r6, pc}
 8004f3e:	46c0      	nop			; (mov r8, r8)
 8004f40:	20000408 	.word	0x20000408

08004f44 <siprintf>:
 8004f44:	b40e      	push	{r1, r2, r3}
 8004f46:	b500      	push	{lr}
 8004f48:	490b      	ldr	r1, [pc, #44]	; (8004f78 <siprintf+0x34>)
 8004f4a:	b09c      	sub	sp, #112	; 0x70
 8004f4c:	ab1d      	add	r3, sp, #116	; 0x74
 8004f4e:	9002      	str	r0, [sp, #8]
 8004f50:	9006      	str	r0, [sp, #24]
 8004f52:	9107      	str	r1, [sp, #28]
 8004f54:	9104      	str	r1, [sp, #16]
 8004f56:	4809      	ldr	r0, [pc, #36]	; (8004f7c <siprintf+0x38>)
 8004f58:	4909      	ldr	r1, [pc, #36]	; (8004f80 <siprintf+0x3c>)
 8004f5a:	cb04      	ldmia	r3!, {r2}
 8004f5c:	9105      	str	r1, [sp, #20]
 8004f5e:	6800      	ldr	r0, [r0, #0]
 8004f60:	a902      	add	r1, sp, #8
 8004f62:	9301      	str	r3, [sp, #4]
 8004f64:	f000 f9cc 	bl	8005300 <_svfiprintf_r>
 8004f68:	2300      	movs	r3, #0
 8004f6a:	9a02      	ldr	r2, [sp, #8]
 8004f6c:	7013      	strb	r3, [r2, #0]
 8004f6e:	b01c      	add	sp, #112	; 0x70
 8004f70:	bc08      	pop	{r3}
 8004f72:	b003      	add	sp, #12
 8004f74:	4718      	bx	r3
 8004f76:	46c0      	nop			; (mov r8, r8)
 8004f78:	7fffffff 	.word	0x7fffffff
 8004f7c:	20000014 	.word	0x20000014
 8004f80:	ffff0208 	.word	0xffff0208

08004f84 <strcat>:
 8004f84:	0002      	movs	r2, r0
 8004f86:	b510      	push	{r4, lr}
 8004f88:	7813      	ldrb	r3, [r2, #0]
 8004f8a:	0014      	movs	r4, r2
 8004f8c:	3201      	adds	r2, #1
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d1fa      	bne.n	8004f88 <strcat+0x4>
 8004f92:	5cca      	ldrb	r2, [r1, r3]
 8004f94:	54e2      	strb	r2, [r4, r3]
 8004f96:	3301      	adds	r3, #1
 8004f98:	2a00      	cmp	r2, #0
 8004f9a:	d1fa      	bne.n	8004f92 <strcat+0xe>
 8004f9c:	bd10      	pop	{r4, pc}

08004f9e <strncmp>:
 8004f9e:	b530      	push	{r4, r5, lr}
 8004fa0:	0005      	movs	r5, r0
 8004fa2:	1e10      	subs	r0, r2, #0
 8004fa4:	d008      	beq.n	8004fb8 <strncmp+0x1a>
 8004fa6:	2400      	movs	r4, #0
 8004fa8:	3a01      	subs	r2, #1
 8004faa:	5d2b      	ldrb	r3, [r5, r4]
 8004fac:	5d08      	ldrb	r0, [r1, r4]
 8004fae:	4283      	cmp	r3, r0
 8004fb0:	d101      	bne.n	8004fb6 <strncmp+0x18>
 8004fb2:	4294      	cmp	r4, r2
 8004fb4:	d101      	bne.n	8004fba <strncmp+0x1c>
 8004fb6:	1a18      	subs	r0, r3, r0
 8004fb8:	bd30      	pop	{r4, r5, pc}
 8004fba:	3401      	adds	r4, #1
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d1f4      	bne.n	8004faa <strncmp+0xc>
 8004fc0:	e7f9      	b.n	8004fb6 <strncmp+0x18>
	...

08004fc4 <strtok>:
 8004fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fc6:	4b16      	ldr	r3, [pc, #88]	; (8005020 <strtok+0x5c>)
 8004fc8:	0005      	movs	r5, r0
 8004fca:	681f      	ldr	r7, [r3, #0]
 8004fcc:	000e      	movs	r6, r1
 8004fce:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8004fd0:	2c00      	cmp	r4, #0
 8004fd2:	d11d      	bne.n	8005010 <strtok+0x4c>
 8004fd4:	2050      	movs	r0, #80	; 0x50
 8004fd6:	f7ff fea5 	bl	8004d24 <malloc>
 8004fda:	1e02      	subs	r2, r0, #0
 8004fdc:	65b8      	str	r0, [r7, #88]	; 0x58
 8004fde:	d104      	bne.n	8004fea <strtok+0x26>
 8004fe0:	2157      	movs	r1, #87	; 0x57
 8004fe2:	4b10      	ldr	r3, [pc, #64]	; (8005024 <strtok+0x60>)
 8004fe4:	4810      	ldr	r0, [pc, #64]	; (8005028 <strtok+0x64>)
 8004fe6:	f000 f8eb 	bl	80051c0 <__assert_func>
 8004fea:	6004      	str	r4, [r0, #0]
 8004fec:	6044      	str	r4, [r0, #4]
 8004fee:	6084      	str	r4, [r0, #8]
 8004ff0:	60c4      	str	r4, [r0, #12]
 8004ff2:	6104      	str	r4, [r0, #16]
 8004ff4:	6144      	str	r4, [r0, #20]
 8004ff6:	6184      	str	r4, [r0, #24]
 8004ff8:	6284      	str	r4, [r0, #40]	; 0x28
 8004ffa:	62c4      	str	r4, [r0, #44]	; 0x2c
 8004ffc:	6304      	str	r4, [r0, #48]	; 0x30
 8004ffe:	6344      	str	r4, [r0, #52]	; 0x34
 8005000:	6384      	str	r4, [r0, #56]	; 0x38
 8005002:	63c4      	str	r4, [r0, #60]	; 0x3c
 8005004:	6404      	str	r4, [r0, #64]	; 0x40
 8005006:	6444      	str	r4, [r0, #68]	; 0x44
 8005008:	6484      	str	r4, [r0, #72]	; 0x48
 800500a:	64c4      	str	r4, [r0, #76]	; 0x4c
 800500c:	7704      	strb	r4, [r0, #28]
 800500e:	6244      	str	r4, [r0, #36]	; 0x24
 8005010:	0031      	movs	r1, r6
 8005012:	0028      	movs	r0, r5
 8005014:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005016:	2301      	movs	r3, #1
 8005018:	f000 f808 	bl	800502c <__strtok_r>
 800501c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800501e:	46c0      	nop			; (mov r8, r8)
 8005020:	20000014 	.word	0x20000014
 8005024:	080064ac 	.word	0x080064ac
 8005028:	080064c3 	.word	0x080064c3

0800502c <__strtok_r>:
 800502c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800502e:	2800      	cmp	r0, #0
 8005030:	d102      	bne.n	8005038 <__strtok_r+0xc>
 8005032:	6810      	ldr	r0, [r2, #0]
 8005034:	2800      	cmp	r0, #0
 8005036:	d013      	beq.n	8005060 <__strtok_r+0x34>
 8005038:	0004      	movs	r4, r0
 800503a:	0020      	movs	r0, r4
 800503c:	000e      	movs	r6, r1
 800503e:	7805      	ldrb	r5, [r0, #0]
 8005040:	3401      	adds	r4, #1
 8005042:	7837      	ldrb	r7, [r6, #0]
 8005044:	2f00      	cmp	r7, #0
 8005046:	d104      	bne.n	8005052 <__strtok_r+0x26>
 8005048:	2d00      	cmp	r5, #0
 800504a:	d10f      	bne.n	800506c <__strtok_r+0x40>
 800504c:	0028      	movs	r0, r5
 800504e:	6015      	str	r5, [r2, #0]
 8005050:	e006      	b.n	8005060 <__strtok_r+0x34>
 8005052:	3601      	adds	r6, #1
 8005054:	42bd      	cmp	r5, r7
 8005056:	d1f4      	bne.n	8005042 <__strtok_r+0x16>
 8005058:	2b00      	cmp	r3, #0
 800505a:	d1ee      	bne.n	800503a <__strtok_r+0xe>
 800505c:	6014      	str	r4, [r2, #0]
 800505e:	7003      	strb	r3, [r0, #0]
 8005060:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005062:	002f      	movs	r7, r5
 8005064:	e00f      	b.n	8005086 <__strtok_r+0x5a>
 8005066:	3301      	adds	r3, #1
 8005068:	2e00      	cmp	r6, #0
 800506a:	d104      	bne.n	8005076 <__strtok_r+0x4a>
 800506c:	0023      	movs	r3, r4
 800506e:	3401      	adds	r4, #1
 8005070:	781d      	ldrb	r5, [r3, #0]
 8005072:	0027      	movs	r7, r4
 8005074:	000b      	movs	r3, r1
 8005076:	781e      	ldrb	r6, [r3, #0]
 8005078:	42b5      	cmp	r5, r6
 800507a:	d1f4      	bne.n	8005066 <__strtok_r+0x3a>
 800507c:	2d00      	cmp	r5, #0
 800507e:	d0f0      	beq.n	8005062 <__strtok_r+0x36>
 8005080:	2300      	movs	r3, #0
 8005082:	3c01      	subs	r4, #1
 8005084:	7023      	strb	r3, [r4, #0]
 8005086:	6017      	str	r7, [r2, #0]
 8005088:	e7ea      	b.n	8005060 <__strtok_r+0x34>
	...

0800508c <_strtol_l.constprop.0>:
 800508c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800508e:	b087      	sub	sp, #28
 8005090:	001e      	movs	r6, r3
 8005092:	9005      	str	r0, [sp, #20]
 8005094:	9101      	str	r1, [sp, #4]
 8005096:	9202      	str	r2, [sp, #8]
 8005098:	2b01      	cmp	r3, #1
 800509a:	d045      	beq.n	8005128 <_strtol_l.constprop.0+0x9c>
 800509c:	000b      	movs	r3, r1
 800509e:	2e24      	cmp	r6, #36	; 0x24
 80050a0:	d842      	bhi.n	8005128 <_strtol_l.constprop.0+0x9c>
 80050a2:	4a3f      	ldr	r2, [pc, #252]	; (80051a0 <_strtol_l.constprop.0+0x114>)
 80050a4:	2108      	movs	r1, #8
 80050a6:	4694      	mov	ip, r2
 80050a8:	001a      	movs	r2, r3
 80050aa:	4660      	mov	r0, ip
 80050ac:	7814      	ldrb	r4, [r2, #0]
 80050ae:	3301      	adds	r3, #1
 80050b0:	5d00      	ldrb	r0, [r0, r4]
 80050b2:	001d      	movs	r5, r3
 80050b4:	0007      	movs	r7, r0
 80050b6:	400f      	ands	r7, r1
 80050b8:	4208      	tst	r0, r1
 80050ba:	d1f5      	bne.n	80050a8 <_strtol_l.constprop.0+0x1c>
 80050bc:	2c2d      	cmp	r4, #45	; 0x2d
 80050be:	d13a      	bne.n	8005136 <_strtol_l.constprop.0+0xaa>
 80050c0:	2701      	movs	r7, #1
 80050c2:	781c      	ldrb	r4, [r3, #0]
 80050c4:	1c95      	adds	r5, r2, #2
 80050c6:	2e00      	cmp	r6, #0
 80050c8:	d065      	beq.n	8005196 <_strtol_l.constprop.0+0x10a>
 80050ca:	2e10      	cmp	r6, #16
 80050cc:	d109      	bne.n	80050e2 <_strtol_l.constprop.0+0x56>
 80050ce:	2c30      	cmp	r4, #48	; 0x30
 80050d0:	d107      	bne.n	80050e2 <_strtol_l.constprop.0+0x56>
 80050d2:	2220      	movs	r2, #32
 80050d4:	782b      	ldrb	r3, [r5, #0]
 80050d6:	4393      	bics	r3, r2
 80050d8:	2b58      	cmp	r3, #88	; 0x58
 80050da:	d157      	bne.n	800518c <_strtol_l.constprop.0+0x100>
 80050dc:	2610      	movs	r6, #16
 80050de:	786c      	ldrb	r4, [r5, #1]
 80050e0:	3502      	adds	r5, #2
 80050e2:	4b30      	ldr	r3, [pc, #192]	; (80051a4 <_strtol_l.constprop.0+0x118>)
 80050e4:	0031      	movs	r1, r6
 80050e6:	18fb      	adds	r3, r7, r3
 80050e8:	0018      	movs	r0, r3
 80050ea:	9303      	str	r3, [sp, #12]
 80050ec:	f7fb f8a2 	bl	8000234 <__aeabi_uidivmod>
 80050f0:	2300      	movs	r3, #0
 80050f2:	2201      	movs	r2, #1
 80050f4:	4684      	mov	ip, r0
 80050f6:	0018      	movs	r0, r3
 80050f8:	9104      	str	r1, [sp, #16]
 80050fa:	4252      	negs	r2, r2
 80050fc:	0021      	movs	r1, r4
 80050fe:	3930      	subs	r1, #48	; 0x30
 8005100:	2909      	cmp	r1, #9
 8005102:	d81d      	bhi.n	8005140 <_strtol_l.constprop.0+0xb4>
 8005104:	000c      	movs	r4, r1
 8005106:	42a6      	cmp	r6, r4
 8005108:	dd28      	ble.n	800515c <_strtol_l.constprop.0+0xd0>
 800510a:	2b00      	cmp	r3, #0
 800510c:	db24      	blt.n	8005158 <_strtol_l.constprop.0+0xcc>
 800510e:	0013      	movs	r3, r2
 8005110:	4584      	cmp	ip, r0
 8005112:	d306      	bcc.n	8005122 <_strtol_l.constprop.0+0x96>
 8005114:	d102      	bne.n	800511c <_strtol_l.constprop.0+0x90>
 8005116:	9904      	ldr	r1, [sp, #16]
 8005118:	42a1      	cmp	r1, r4
 800511a:	db02      	blt.n	8005122 <_strtol_l.constprop.0+0x96>
 800511c:	2301      	movs	r3, #1
 800511e:	4370      	muls	r0, r6
 8005120:	1820      	adds	r0, r4, r0
 8005122:	782c      	ldrb	r4, [r5, #0]
 8005124:	3501      	adds	r5, #1
 8005126:	e7e9      	b.n	80050fc <_strtol_l.constprop.0+0x70>
 8005128:	f7ff fdd2 	bl	8004cd0 <__errno>
 800512c:	2316      	movs	r3, #22
 800512e:	6003      	str	r3, [r0, #0]
 8005130:	2000      	movs	r0, #0
 8005132:	b007      	add	sp, #28
 8005134:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005136:	2c2b      	cmp	r4, #43	; 0x2b
 8005138:	d1c5      	bne.n	80050c6 <_strtol_l.constprop.0+0x3a>
 800513a:	781c      	ldrb	r4, [r3, #0]
 800513c:	1c95      	adds	r5, r2, #2
 800513e:	e7c2      	b.n	80050c6 <_strtol_l.constprop.0+0x3a>
 8005140:	0021      	movs	r1, r4
 8005142:	3941      	subs	r1, #65	; 0x41
 8005144:	2919      	cmp	r1, #25
 8005146:	d801      	bhi.n	800514c <_strtol_l.constprop.0+0xc0>
 8005148:	3c37      	subs	r4, #55	; 0x37
 800514a:	e7dc      	b.n	8005106 <_strtol_l.constprop.0+0x7a>
 800514c:	0021      	movs	r1, r4
 800514e:	3961      	subs	r1, #97	; 0x61
 8005150:	2919      	cmp	r1, #25
 8005152:	d803      	bhi.n	800515c <_strtol_l.constprop.0+0xd0>
 8005154:	3c57      	subs	r4, #87	; 0x57
 8005156:	e7d6      	b.n	8005106 <_strtol_l.constprop.0+0x7a>
 8005158:	0013      	movs	r3, r2
 800515a:	e7e2      	b.n	8005122 <_strtol_l.constprop.0+0x96>
 800515c:	2b00      	cmp	r3, #0
 800515e:	da09      	bge.n	8005174 <_strtol_l.constprop.0+0xe8>
 8005160:	2322      	movs	r3, #34	; 0x22
 8005162:	9a05      	ldr	r2, [sp, #20]
 8005164:	9803      	ldr	r0, [sp, #12]
 8005166:	6013      	str	r3, [r2, #0]
 8005168:	9b02      	ldr	r3, [sp, #8]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d0e1      	beq.n	8005132 <_strtol_l.constprop.0+0xa6>
 800516e:	1e6b      	subs	r3, r5, #1
 8005170:	9301      	str	r3, [sp, #4]
 8005172:	e007      	b.n	8005184 <_strtol_l.constprop.0+0xf8>
 8005174:	2f00      	cmp	r7, #0
 8005176:	d000      	beq.n	800517a <_strtol_l.constprop.0+0xee>
 8005178:	4240      	negs	r0, r0
 800517a:	9a02      	ldr	r2, [sp, #8]
 800517c:	2a00      	cmp	r2, #0
 800517e:	d0d8      	beq.n	8005132 <_strtol_l.constprop.0+0xa6>
 8005180:	2b00      	cmp	r3, #0
 8005182:	d1f4      	bne.n	800516e <_strtol_l.constprop.0+0xe2>
 8005184:	9b02      	ldr	r3, [sp, #8]
 8005186:	9a01      	ldr	r2, [sp, #4]
 8005188:	601a      	str	r2, [r3, #0]
 800518a:	e7d2      	b.n	8005132 <_strtol_l.constprop.0+0xa6>
 800518c:	2430      	movs	r4, #48	; 0x30
 800518e:	2e00      	cmp	r6, #0
 8005190:	d1a7      	bne.n	80050e2 <_strtol_l.constprop.0+0x56>
 8005192:	3608      	adds	r6, #8
 8005194:	e7a5      	b.n	80050e2 <_strtol_l.constprop.0+0x56>
 8005196:	2c30      	cmp	r4, #48	; 0x30
 8005198:	d09b      	beq.n	80050d2 <_strtol_l.constprop.0+0x46>
 800519a:	260a      	movs	r6, #10
 800519c:	e7a1      	b.n	80050e2 <_strtol_l.constprop.0+0x56>
 800519e:	46c0      	nop			; (mov r8, r8)
 80051a0:	0800655d 	.word	0x0800655d
 80051a4:	7fffffff 	.word	0x7fffffff

080051a8 <strtol>:
 80051a8:	b510      	push	{r4, lr}
 80051aa:	0013      	movs	r3, r2
 80051ac:	000a      	movs	r2, r1
 80051ae:	0001      	movs	r1, r0
 80051b0:	4802      	ldr	r0, [pc, #8]	; (80051bc <strtol+0x14>)
 80051b2:	6800      	ldr	r0, [r0, #0]
 80051b4:	f7ff ff6a 	bl	800508c <_strtol_l.constprop.0>
 80051b8:	bd10      	pop	{r4, pc}
 80051ba:	46c0      	nop			; (mov r8, r8)
 80051bc:	20000014 	.word	0x20000014

080051c0 <__assert_func>:
 80051c0:	b530      	push	{r4, r5, lr}
 80051c2:	0014      	movs	r4, r2
 80051c4:	001a      	movs	r2, r3
 80051c6:	4b09      	ldr	r3, [pc, #36]	; (80051ec <__assert_func+0x2c>)
 80051c8:	0005      	movs	r5, r0
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	b085      	sub	sp, #20
 80051ce:	68d8      	ldr	r0, [r3, #12]
 80051d0:	4b07      	ldr	r3, [pc, #28]	; (80051f0 <__assert_func+0x30>)
 80051d2:	2c00      	cmp	r4, #0
 80051d4:	d101      	bne.n	80051da <__assert_func+0x1a>
 80051d6:	4b07      	ldr	r3, [pc, #28]	; (80051f4 <__assert_func+0x34>)
 80051d8:	001c      	movs	r4, r3
 80051da:	9301      	str	r3, [sp, #4]
 80051dc:	9100      	str	r1, [sp, #0]
 80051de:	002b      	movs	r3, r5
 80051e0:	4905      	ldr	r1, [pc, #20]	; (80051f8 <__assert_func+0x38>)
 80051e2:	9402      	str	r4, [sp, #8]
 80051e4:	f000 f80a 	bl	80051fc <fiprintf>
 80051e8:	f000 fd3c 	bl	8005c64 <abort>
 80051ec:	20000014 	.word	0x20000014
 80051f0:	08006520 	.word	0x08006520
 80051f4:	0800655b 	.word	0x0800655b
 80051f8:	0800652d 	.word	0x0800652d

080051fc <fiprintf>:
 80051fc:	b40e      	push	{r1, r2, r3}
 80051fe:	b503      	push	{r0, r1, lr}
 8005200:	0001      	movs	r1, r0
 8005202:	ab03      	add	r3, sp, #12
 8005204:	4804      	ldr	r0, [pc, #16]	; (8005218 <fiprintf+0x1c>)
 8005206:	cb04      	ldmia	r3!, {r2}
 8005208:	6800      	ldr	r0, [r0, #0]
 800520a:	9301      	str	r3, [sp, #4]
 800520c:	f000 f9a0 	bl	8005550 <_vfiprintf_r>
 8005210:	b002      	add	sp, #8
 8005212:	bc08      	pop	{r3}
 8005214:	b003      	add	sp, #12
 8005216:	4718      	bx	r3
 8005218:	20000014 	.word	0x20000014

0800521c <__malloc_lock>:
 800521c:	b510      	push	{r4, lr}
 800521e:	4802      	ldr	r0, [pc, #8]	; (8005228 <__malloc_lock+0xc>)
 8005220:	f000 fef7 	bl	8006012 <__retarget_lock_acquire_recursive>
 8005224:	bd10      	pop	{r4, pc}
 8005226:	46c0      	nop			; (mov r8, r8)
 8005228:	2000040c 	.word	0x2000040c

0800522c <__malloc_unlock>:
 800522c:	b510      	push	{r4, lr}
 800522e:	4802      	ldr	r0, [pc, #8]	; (8005238 <__malloc_unlock+0xc>)
 8005230:	f000 fef0 	bl	8006014 <__retarget_lock_release_recursive>
 8005234:	bd10      	pop	{r4, pc}
 8005236:	46c0      	nop			; (mov r8, r8)
 8005238:	2000040c 	.word	0x2000040c

0800523c <__ssputs_r>:
 800523c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800523e:	688e      	ldr	r6, [r1, #8]
 8005240:	b085      	sub	sp, #20
 8005242:	0007      	movs	r7, r0
 8005244:	000c      	movs	r4, r1
 8005246:	9203      	str	r2, [sp, #12]
 8005248:	9301      	str	r3, [sp, #4]
 800524a:	429e      	cmp	r6, r3
 800524c:	d83c      	bhi.n	80052c8 <__ssputs_r+0x8c>
 800524e:	2390      	movs	r3, #144	; 0x90
 8005250:	898a      	ldrh	r2, [r1, #12]
 8005252:	00db      	lsls	r3, r3, #3
 8005254:	421a      	tst	r2, r3
 8005256:	d034      	beq.n	80052c2 <__ssputs_r+0x86>
 8005258:	6909      	ldr	r1, [r1, #16]
 800525a:	6823      	ldr	r3, [r4, #0]
 800525c:	6960      	ldr	r0, [r4, #20]
 800525e:	1a5b      	subs	r3, r3, r1
 8005260:	9302      	str	r3, [sp, #8]
 8005262:	2303      	movs	r3, #3
 8005264:	4343      	muls	r3, r0
 8005266:	0fdd      	lsrs	r5, r3, #31
 8005268:	18ed      	adds	r5, r5, r3
 800526a:	9b01      	ldr	r3, [sp, #4]
 800526c:	9802      	ldr	r0, [sp, #8]
 800526e:	3301      	adds	r3, #1
 8005270:	181b      	adds	r3, r3, r0
 8005272:	106d      	asrs	r5, r5, #1
 8005274:	42ab      	cmp	r3, r5
 8005276:	d900      	bls.n	800527a <__ssputs_r+0x3e>
 8005278:	001d      	movs	r5, r3
 800527a:	0553      	lsls	r3, r2, #21
 800527c:	d532      	bpl.n	80052e4 <__ssputs_r+0xa8>
 800527e:	0029      	movs	r1, r5
 8005280:	0038      	movs	r0, r7
 8005282:	f7ff fdd7 	bl	8004e34 <_malloc_r>
 8005286:	1e06      	subs	r6, r0, #0
 8005288:	d109      	bne.n	800529e <__ssputs_r+0x62>
 800528a:	230c      	movs	r3, #12
 800528c:	603b      	str	r3, [r7, #0]
 800528e:	2340      	movs	r3, #64	; 0x40
 8005290:	2001      	movs	r0, #1
 8005292:	89a2      	ldrh	r2, [r4, #12]
 8005294:	4240      	negs	r0, r0
 8005296:	4313      	orrs	r3, r2
 8005298:	81a3      	strh	r3, [r4, #12]
 800529a:	b005      	add	sp, #20
 800529c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800529e:	9a02      	ldr	r2, [sp, #8]
 80052a0:	6921      	ldr	r1, [r4, #16]
 80052a2:	f000 ff30 	bl	8006106 <memcpy>
 80052a6:	89a3      	ldrh	r3, [r4, #12]
 80052a8:	4a14      	ldr	r2, [pc, #80]	; (80052fc <__ssputs_r+0xc0>)
 80052aa:	401a      	ands	r2, r3
 80052ac:	2380      	movs	r3, #128	; 0x80
 80052ae:	4313      	orrs	r3, r2
 80052b0:	81a3      	strh	r3, [r4, #12]
 80052b2:	9b02      	ldr	r3, [sp, #8]
 80052b4:	6126      	str	r6, [r4, #16]
 80052b6:	18f6      	adds	r6, r6, r3
 80052b8:	6026      	str	r6, [r4, #0]
 80052ba:	6165      	str	r5, [r4, #20]
 80052bc:	9e01      	ldr	r6, [sp, #4]
 80052be:	1aed      	subs	r5, r5, r3
 80052c0:	60a5      	str	r5, [r4, #8]
 80052c2:	9b01      	ldr	r3, [sp, #4]
 80052c4:	429e      	cmp	r6, r3
 80052c6:	d900      	bls.n	80052ca <__ssputs_r+0x8e>
 80052c8:	9e01      	ldr	r6, [sp, #4]
 80052ca:	0032      	movs	r2, r6
 80052cc:	9903      	ldr	r1, [sp, #12]
 80052ce:	6820      	ldr	r0, [r4, #0]
 80052d0:	f000 ff22 	bl	8006118 <memmove>
 80052d4:	68a3      	ldr	r3, [r4, #8]
 80052d6:	2000      	movs	r0, #0
 80052d8:	1b9b      	subs	r3, r3, r6
 80052da:	60a3      	str	r3, [r4, #8]
 80052dc:	6823      	ldr	r3, [r4, #0]
 80052de:	199e      	adds	r6, r3, r6
 80052e0:	6026      	str	r6, [r4, #0]
 80052e2:	e7da      	b.n	800529a <__ssputs_r+0x5e>
 80052e4:	002a      	movs	r2, r5
 80052e6:	0038      	movs	r0, r7
 80052e8:	f000 ff29 	bl	800613e <_realloc_r>
 80052ec:	1e06      	subs	r6, r0, #0
 80052ee:	d1e0      	bne.n	80052b2 <__ssputs_r+0x76>
 80052f0:	0038      	movs	r0, r7
 80052f2:	6921      	ldr	r1, [r4, #16]
 80052f4:	f7ff fd32 	bl	8004d5c <_free_r>
 80052f8:	e7c7      	b.n	800528a <__ssputs_r+0x4e>
 80052fa:	46c0      	nop			; (mov r8, r8)
 80052fc:	fffffb7f 	.word	0xfffffb7f

08005300 <_svfiprintf_r>:
 8005300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005302:	b0a1      	sub	sp, #132	; 0x84
 8005304:	9003      	str	r0, [sp, #12]
 8005306:	001d      	movs	r5, r3
 8005308:	898b      	ldrh	r3, [r1, #12]
 800530a:	000f      	movs	r7, r1
 800530c:	0016      	movs	r6, r2
 800530e:	061b      	lsls	r3, r3, #24
 8005310:	d511      	bpl.n	8005336 <_svfiprintf_r+0x36>
 8005312:	690b      	ldr	r3, [r1, #16]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d10e      	bne.n	8005336 <_svfiprintf_r+0x36>
 8005318:	2140      	movs	r1, #64	; 0x40
 800531a:	f7ff fd8b 	bl	8004e34 <_malloc_r>
 800531e:	6038      	str	r0, [r7, #0]
 8005320:	6138      	str	r0, [r7, #16]
 8005322:	2800      	cmp	r0, #0
 8005324:	d105      	bne.n	8005332 <_svfiprintf_r+0x32>
 8005326:	230c      	movs	r3, #12
 8005328:	9a03      	ldr	r2, [sp, #12]
 800532a:	3801      	subs	r0, #1
 800532c:	6013      	str	r3, [r2, #0]
 800532e:	b021      	add	sp, #132	; 0x84
 8005330:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005332:	2340      	movs	r3, #64	; 0x40
 8005334:	617b      	str	r3, [r7, #20]
 8005336:	2300      	movs	r3, #0
 8005338:	ac08      	add	r4, sp, #32
 800533a:	6163      	str	r3, [r4, #20]
 800533c:	3320      	adds	r3, #32
 800533e:	7663      	strb	r3, [r4, #25]
 8005340:	3310      	adds	r3, #16
 8005342:	76a3      	strb	r3, [r4, #26]
 8005344:	9507      	str	r5, [sp, #28]
 8005346:	0035      	movs	r5, r6
 8005348:	782b      	ldrb	r3, [r5, #0]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d001      	beq.n	8005352 <_svfiprintf_r+0x52>
 800534e:	2b25      	cmp	r3, #37	; 0x25
 8005350:	d147      	bne.n	80053e2 <_svfiprintf_r+0xe2>
 8005352:	1bab      	subs	r3, r5, r6
 8005354:	9305      	str	r3, [sp, #20]
 8005356:	42b5      	cmp	r5, r6
 8005358:	d00c      	beq.n	8005374 <_svfiprintf_r+0x74>
 800535a:	0032      	movs	r2, r6
 800535c:	0039      	movs	r1, r7
 800535e:	9803      	ldr	r0, [sp, #12]
 8005360:	f7ff ff6c 	bl	800523c <__ssputs_r>
 8005364:	1c43      	adds	r3, r0, #1
 8005366:	d100      	bne.n	800536a <_svfiprintf_r+0x6a>
 8005368:	e0ae      	b.n	80054c8 <_svfiprintf_r+0x1c8>
 800536a:	6962      	ldr	r2, [r4, #20]
 800536c:	9b05      	ldr	r3, [sp, #20]
 800536e:	4694      	mov	ip, r2
 8005370:	4463      	add	r3, ip
 8005372:	6163      	str	r3, [r4, #20]
 8005374:	782b      	ldrb	r3, [r5, #0]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d100      	bne.n	800537c <_svfiprintf_r+0x7c>
 800537a:	e0a5      	b.n	80054c8 <_svfiprintf_r+0x1c8>
 800537c:	2201      	movs	r2, #1
 800537e:	2300      	movs	r3, #0
 8005380:	4252      	negs	r2, r2
 8005382:	6062      	str	r2, [r4, #4]
 8005384:	a904      	add	r1, sp, #16
 8005386:	3254      	adds	r2, #84	; 0x54
 8005388:	1852      	adds	r2, r2, r1
 800538a:	1c6e      	adds	r6, r5, #1
 800538c:	6023      	str	r3, [r4, #0]
 800538e:	60e3      	str	r3, [r4, #12]
 8005390:	60a3      	str	r3, [r4, #8]
 8005392:	7013      	strb	r3, [r2, #0]
 8005394:	65a3      	str	r3, [r4, #88]	; 0x58
 8005396:	2205      	movs	r2, #5
 8005398:	7831      	ldrb	r1, [r6, #0]
 800539a:	4854      	ldr	r0, [pc, #336]	; (80054ec <_svfiprintf_r+0x1ec>)
 800539c:	f000 fea8 	bl	80060f0 <memchr>
 80053a0:	1c75      	adds	r5, r6, #1
 80053a2:	2800      	cmp	r0, #0
 80053a4:	d11f      	bne.n	80053e6 <_svfiprintf_r+0xe6>
 80053a6:	6822      	ldr	r2, [r4, #0]
 80053a8:	06d3      	lsls	r3, r2, #27
 80053aa:	d504      	bpl.n	80053b6 <_svfiprintf_r+0xb6>
 80053ac:	2353      	movs	r3, #83	; 0x53
 80053ae:	a904      	add	r1, sp, #16
 80053b0:	185b      	adds	r3, r3, r1
 80053b2:	2120      	movs	r1, #32
 80053b4:	7019      	strb	r1, [r3, #0]
 80053b6:	0713      	lsls	r3, r2, #28
 80053b8:	d504      	bpl.n	80053c4 <_svfiprintf_r+0xc4>
 80053ba:	2353      	movs	r3, #83	; 0x53
 80053bc:	a904      	add	r1, sp, #16
 80053be:	185b      	adds	r3, r3, r1
 80053c0:	212b      	movs	r1, #43	; 0x2b
 80053c2:	7019      	strb	r1, [r3, #0]
 80053c4:	7833      	ldrb	r3, [r6, #0]
 80053c6:	2b2a      	cmp	r3, #42	; 0x2a
 80053c8:	d016      	beq.n	80053f8 <_svfiprintf_r+0xf8>
 80053ca:	0035      	movs	r5, r6
 80053cc:	2100      	movs	r1, #0
 80053ce:	200a      	movs	r0, #10
 80053d0:	68e3      	ldr	r3, [r4, #12]
 80053d2:	782a      	ldrb	r2, [r5, #0]
 80053d4:	1c6e      	adds	r6, r5, #1
 80053d6:	3a30      	subs	r2, #48	; 0x30
 80053d8:	2a09      	cmp	r2, #9
 80053da:	d94e      	bls.n	800547a <_svfiprintf_r+0x17a>
 80053dc:	2900      	cmp	r1, #0
 80053de:	d111      	bne.n	8005404 <_svfiprintf_r+0x104>
 80053e0:	e017      	b.n	8005412 <_svfiprintf_r+0x112>
 80053e2:	3501      	adds	r5, #1
 80053e4:	e7b0      	b.n	8005348 <_svfiprintf_r+0x48>
 80053e6:	4b41      	ldr	r3, [pc, #260]	; (80054ec <_svfiprintf_r+0x1ec>)
 80053e8:	6822      	ldr	r2, [r4, #0]
 80053ea:	1ac0      	subs	r0, r0, r3
 80053ec:	2301      	movs	r3, #1
 80053ee:	4083      	lsls	r3, r0
 80053f0:	4313      	orrs	r3, r2
 80053f2:	002e      	movs	r6, r5
 80053f4:	6023      	str	r3, [r4, #0]
 80053f6:	e7ce      	b.n	8005396 <_svfiprintf_r+0x96>
 80053f8:	9b07      	ldr	r3, [sp, #28]
 80053fa:	1d19      	adds	r1, r3, #4
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	9107      	str	r1, [sp, #28]
 8005400:	2b00      	cmp	r3, #0
 8005402:	db01      	blt.n	8005408 <_svfiprintf_r+0x108>
 8005404:	930b      	str	r3, [sp, #44]	; 0x2c
 8005406:	e004      	b.n	8005412 <_svfiprintf_r+0x112>
 8005408:	425b      	negs	r3, r3
 800540a:	60e3      	str	r3, [r4, #12]
 800540c:	2302      	movs	r3, #2
 800540e:	4313      	orrs	r3, r2
 8005410:	6023      	str	r3, [r4, #0]
 8005412:	782b      	ldrb	r3, [r5, #0]
 8005414:	2b2e      	cmp	r3, #46	; 0x2e
 8005416:	d10a      	bne.n	800542e <_svfiprintf_r+0x12e>
 8005418:	786b      	ldrb	r3, [r5, #1]
 800541a:	2b2a      	cmp	r3, #42	; 0x2a
 800541c:	d135      	bne.n	800548a <_svfiprintf_r+0x18a>
 800541e:	9b07      	ldr	r3, [sp, #28]
 8005420:	3502      	adds	r5, #2
 8005422:	1d1a      	adds	r2, r3, #4
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	9207      	str	r2, [sp, #28]
 8005428:	2b00      	cmp	r3, #0
 800542a:	db2b      	blt.n	8005484 <_svfiprintf_r+0x184>
 800542c:	9309      	str	r3, [sp, #36]	; 0x24
 800542e:	4e30      	ldr	r6, [pc, #192]	; (80054f0 <_svfiprintf_r+0x1f0>)
 8005430:	2203      	movs	r2, #3
 8005432:	0030      	movs	r0, r6
 8005434:	7829      	ldrb	r1, [r5, #0]
 8005436:	f000 fe5b 	bl	80060f0 <memchr>
 800543a:	2800      	cmp	r0, #0
 800543c:	d006      	beq.n	800544c <_svfiprintf_r+0x14c>
 800543e:	2340      	movs	r3, #64	; 0x40
 8005440:	1b80      	subs	r0, r0, r6
 8005442:	4083      	lsls	r3, r0
 8005444:	6822      	ldr	r2, [r4, #0]
 8005446:	3501      	adds	r5, #1
 8005448:	4313      	orrs	r3, r2
 800544a:	6023      	str	r3, [r4, #0]
 800544c:	7829      	ldrb	r1, [r5, #0]
 800544e:	2206      	movs	r2, #6
 8005450:	4828      	ldr	r0, [pc, #160]	; (80054f4 <_svfiprintf_r+0x1f4>)
 8005452:	1c6e      	adds	r6, r5, #1
 8005454:	7621      	strb	r1, [r4, #24]
 8005456:	f000 fe4b 	bl	80060f0 <memchr>
 800545a:	2800      	cmp	r0, #0
 800545c:	d03c      	beq.n	80054d8 <_svfiprintf_r+0x1d8>
 800545e:	4b26      	ldr	r3, [pc, #152]	; (80054f8 <_svfiprintf_r+0x1f8>)
 8005460:	2b00      	cmp	r3, #0
 8005462:	d125      	bne.n	80054b0 <_svfiprintf_r+0x1b0>
 8005464:	2207      	movs	r2, #7
 8005466:	9b07      	ldr	r3, [sp, #28]
 8005468:	3307      	adds	r3, #7
 800546a:	4393      	bics	r3, r2
 800546c:	3308      	adds	r3, #8
 800546e:	9307      	str	r3, [sp, #28]
 8005470:	6963      	ldr	r3, [r4, #20]
 8005472:	9a04      	ldr	r2, [sp, #16]
 8005474:	189b      	adds	r3, r3, r2
 8005476:	6163      	str	r3, [r4, #20]
 8005478:	e765      	b.n	8005346 <_svfiprintf_r+0x46>
 800547a:	4343      	muls	r3, r0
 800547c:	0035      	movs	r5, r6
 800547e:	2101      	movs	r1, #1
 8005480:	189b      	adds	r3, r3, r2
 8005482:	e7a6      	b.n	80053d2 <_svfiprintf_r+0xd2>
 8005484:	2301      	movs	r3, #1
 8005486:	425b      	negs	r3, r3
 8005488:	e7d0      	b.n	800542c <_svfiprintf_r+0x12c>
 800548a:	2300      	movs	r3, #0
 800548c:	200a      	movs	r0, #10
 800548e:	001a      	movs	r2, r3
 8005490:	3501      	adds	r5, #1
 8005492:	6063      	str	r3, [r4, #4]
 8005494:	7829      	ldrb	r1, [r5, #0]
 8005496:	1c6e      	adds	r6, r5, #1
 8005498:	3930      	subs	r1, #48	; 0x30
 800549a:	2909      	cmp	r1, #9
 800549c:	d903      	bls.n	80054a6 <_svfiprintf_r+0x1a6>
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d0c5      	beq.n	800542e <_svfiprintf_r+0x12e>
 80054a2:	9209      	str	r2, [sp, #36]	; 0x24
 80054a4:	e7c3      	b.n	800542e <_svfiprintf_r+0x12e>
 80054a6:	4342      	muls	r2, r0
 80054a8:	0035      	movs	r5, r6
 80054aa:	2301      	movs	r3, #1
 80054ac:	1852      	adds	r2, r2, r1
 80054ae:	e7f1      	b.n	8005494 <_svfiprintf_r+0x194>
 80054b0:	ab07      	add	r3, sp, #28
 80054b2:	9300      	str	r3, [sp, #0]
 80054b4:	003a      	movs	r2, r7
 80054b6:	0021      	movs	r1, r4
 80054b8:	4b10      	ldr	r3, [pc, #64]	; (80054fc <_svfiprintf_r+0x1fc>)
 80054ba:	9803      	ldr	r0, [sp, #12]
 80054bc:	e000      	b.n	80054c0 <_svfiprintf_r+0x1c0>
 80054be:	bf00      	nop
 80054c0:	9004      	str	r0, [sp, #16]
 80054c2:	9b04      	ldr	r3, [sp, #16]
 80054c4:	3301      	adds	r3, #1
 80054c6:	d1d3      	bne.n	8005470 <_svfiprintf_r+0x170>
 80054c8:	89bb      	ldrh	r3, [r7, #12]
 80054ca:	980d      	ldr	r0, [sp, #52]	; 0x34
 80054cc:	065b      	lsls	r3, r3, #25
 80054ce:	d400      	bmi.n	80054d2 <_svfiprintf_r+0x1d2>
 80054d0:	e72d      	b.n	800532e <_svfiprintf_r+0x2e>
 80054d2:	2001      	movs	r0, #1
 80054d4:	4240      	negs	r0, r0
 80054d6:	e72a      	b.n	800532e <_svfiprintf_r+0x2e>
 80054d8:	ab07      	add	r3, sp, #28
 80054da:	9300      	str	r3, [sp, #0]
 80054dc:	003a      	movs	r2, r7
 80054de:	0021      	movs	r1, r4
 80054e0:	4b06      	ldr	r3, [pc, #24]	; (80054fc <_svfiprintf_r+0x1fc>)
 80054e2:	9803      	ldr	r0, [sp, #12]
 80054e4:	f000 f9de 	bl	80058a4 <_printf_i>
 80054e8:	e7ea      	b.n	80054c0 <_svfiprintf_r+0x1c0>
 80054ea:	46c0      	nop			; (mov r8, r8)
 80054ec:	0800665d 	.word	0x0800665d
 80054f0:	08006663 	.word	0x08006663
 80054f4:	08006667 	.word	0x08006667
 80054f8:	00000000 	.word	0x00000000
 80054fc:	0800523d 	.word	0x0800523d

08005500 <__sfputc_r>:
 8005500:	6893      	ldr	r3, [r2, #8]
 8005502:	b510      	push	{r4, lr}
 8005504:	3b01      	subs	r3, #1
 8005506:	6093      	str	r3, [r2, #8]
 8005508:	2b00      	cmp	r3, #0
 800550a:	da04      	bge.n	8005516 <__sfputc_r+0x16>
 800550c:	6994      	ldr	r4, [r2, #24]
 800550e:	42a3      	cmp	r3, r4
 8005510:	db07      	blt.n	8005522 <__sfputc_r+0x22>
 8005512:	290a      	cmp	r1, #10
 8005514:	d005      	beq.n	8005522 <__sfputc_r+0x22>
 8005516:	6813      	ldr	r3, [r2, #0]
 8005518:	1c58      	adds	r0, r3, #1
 800551a:	6010      	str	r0, [r2, #0]
 800551c:	7019      	strb	r1, [r3, #0]
 800551e:	0008      	movs	r0, r1
 8005520:	bd10      	pop	{r4, pc}
 8005522:	f000 fad1 	bl	8005ac8 <__swbuf_r>
 8005526:	0001      	movs	r1, r0
 8005528:	e7f9      	b.n	800551e <__sfputc_r+0x1e>

0800552a <__sfputs_r>:
 800552a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800552c:	0006      	movs	r6, r0
 800552e:	000f      	movs	r7, r1
 8005530:	0014      	movs	r4, r2
 8005532:	18d5      	adds	r5, r2, r3
 8005534:	42ac      	cmp	r4, r5
 8005536:	d101      	bne.n	800553c <__sfputs_r+0x12>
 8005538:	2000      	movs	r0, #0
 800553a:	e007      	b.n	800554c <__sfputs_r+0x22>
 800553c:	7821      	ldrb	r1, [r4, #0]
 800553e:	003a      	movs	r2, r7
 8005540:	0030      	movs	r0, r6
 8005542:	f7ff ffdd 	bl	8005500 <__sfputc_r>
 8005546:	3401      	adds	r4, #1
 8005548:	1c43      	adds	r3, r0, #1
 800554a:	d1f3      	bne.n	8005534 <__sfputs_r+0xa>
 800554c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005550 <_vfiprintf_r>:
 8005550:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005552:	b0a1      	sub	sp, #132	; 0x84
 8005554:	0006      	movs	r6, r0
 8005556:	000c      	movs	r4, r1
 8005558:	001f      	movs	r7, r3
 800555a:	9203      	str	r2, [sp, #12]
 800555c:	2800      	cmp	r0, #0
 800555e:	d004      	beq.n	800556a <_vfiprintf_r+0x1a>
 8005560:	6983      	ldr	r3, [r0, #24]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d101      	bne.n	800556a <_vfiprintf_r+0x1a>
 8005566:	f000 fcb3 	bl	8005ed0 <__sinit>
 800556a:	4b8e      	ldr	r3, [pc, #568]	; (80057a4 <_vfiprintf_r+0x254>)
 800556c:	429c      	cmp	r4, r3
 800556e:	d11c      	bne.n	80055aa <_vfiprintf_r+0x5a>
 8005570:	6874      	ldr	r4, [r6, #4]
 8005572:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005574:	07db      	lsls	r3, r3, #31
 8005576:	d405      	bmi.n	8005584 <_vfiprintf_r+0x34>
 8005578:	89a3      	ldrh	r3, [r4, #12]
 800557a:	059b      	lsls	r3, r3, #22
 800557c:	d402      	bmi.n	8005584 <_vfiprintf_r+0x34>
 800557e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005580:	f000 fd47 	bl	8006012 <__retarget_lock_acquire_recursive>
 8005584:	89a3      	ldrh	r3, [r4, #12]
 8005586:	071b      	lsls	r3, r3, #28
 8005588:	d502      	bpl.n	8005590 <_vfiprintf_r+0x40>
 800558a:	6923      	ldr	r3, [r4, #16]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d11d      	bne.n	80055cc <_vfiprintf_r+0x7c>
 8005590:	0021      	movs	r1, r4
 8005592:	0030      	movs	r0, r6
 8005594:	f000 faee 	bl	8005b74 <__swsetup_r>
 8005598:	2800      	cmp	r0, #0
 800559a:	d017      	beq.n	80055cc <_vfiprintf_r+0x7c>
 800559c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800559e:	07db      	lsls	r3, r3, #31
 80055a0:	d50d      	bpl.n	80055be <_vfiprintf_r+0x6e>
 80055a2:	2001      	movs	r0, #1
 80055a4:	4240      	negs	r0, r0
 80055a6:	b021      	add	sp, #132	; 0x84
 80055a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055aa:	4b7f      	ldr	r3, [pc, #508]	; (80057a8 <_vfiprintf_r+0x258>)
 80055ac:	429c      	cmp	r4, r3
 80055ae:	d101      	bne.n	80055b4 <_vfiprintf_r+0x64>
 80055b0:	68b4      	ldr	r4, [r6, #8]
 80055b2:	e7de      	b.n	8005572 <_vfiprintf_r+0x22>
 80055b4:	4b7d      	ldr	r3, [pc, #500]	; (80057ac <_vfiprintf_r+0x25c>)
 80055b6:	429c      	cmp	r4, r3
 80055b8:	d1db      	bne.n	8005572 <_vfiprintf_r+0x22>
 80055ba:	68f4      	ldr	r4, [r6, #12]
 80055bc:	e7d9      	b.n	8005572 <_vfiprintf_r+0x22>
 80055be:	89a3      	ldrh	r3, [r4, #12]
 80055c0:	059b      	lsls	r3, r3, #22
 80055c2:	d4ee      	bmi.n	80055a2 <_vfiprintf_r+0x52>
 80055c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80055c6:	f000 fd25 	bl	8006014 <__retarget_lock_release_recursive>
 80055ca:	e7ea      	b.n	80055a2 <_vfiprintf_r+0x52>
 80055cc:	2300      	movs	r3, #0
 80055ce:	ad08      	add	r5, sp, #32
 80055d0:	616b      	str	r3, [r5, #20]
 80055d2:	3320      	adds	r3, #32
 80055d4:	766b      	strb	r3, [r5, #25]
 80055d6:	3310      	adds	r3, #16
 80055d8:	76ab      	strb	r3, [r5, #26]
 80055da:	9707      	str	r7, [sp, #28]
 80055dc:	9f03      	ldr	r7, [sp, #12]
 80055de:	783b      	ldrb	r3, [r7, #0]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d001      	beq.n	80055e8 <_vfiprintf_r+0x98>
 80055e4:	2b25      	cmp	r3, #37	; 0x25
 80055e6:	d14e      	bne.n	8005686 <_vfiprintf_r+0x136>
 80055e8:	9b03      	ldr	r3, [sp, #12]
 80055ea:	1afb      	subs	r3, r7, r3
 80055ec:	9305      	str	r3, [sp, #20]
 80055ee:	9b03      	ldr	r3, [sp, #12]
 80055f0:	429f      	cmp	r7, r3
 80055f2:	d00d      	beq.n	8005610 <_vfiprintf_r+0xc0>
 80055f4:	9b05      	ldr	r3, [sp, #20]
 80055f6:	0021      	movs	r1, r4
 80055f8:	0030      	movs	r0, r6
 80055fa:	9a03      	ldr	r2, [sp, #12]
 80055fc:	f7ff ff95 	bl	800552a <__sfputs_r>
 8005600:	1c43      	adds	r3, r0, #1
 8005602:	d100      	bne.n	8005606 <_vfiprintf_r+0xb6>
 8005604:	e0b5      	b.n	8005772 <_vfiprintf_r+0x222>
 8005606:	696a      	ldr	r2, [r5, #20]
 8005608:	9b05      	ldr	r3, [sp, #20]
 800560a:	4694      	mov	ip, r2
 800560c:	4463      	add	r3, ip
 800560e:	616b      	str	r3, [r5, #20]
 8005610:	783b      	ldrb	r3, [r7, #0]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d100      	bne.n	8005618 <_vfiprintf_r+0xc8>
 8005616:	e0ac      	b.n	8005772 <_vfiprintf_r+0x222>
 8005618:	2201      	movs	r2, #1
 800561a:	1c7b      	adds	r3, r7, #1
 800561c:	9303      	str	r3, [sp, #12]
 800561e:	2300      	movs	r3, #0
 8005620:	4252      	negs	r2, r2
 8005622:	606a      	str	r2, [r5, #4]
 8005624:	a904      	add	r1, sp, #16
 8005626:	3254      	adds	r2, #84	; 0x54
 8005628:	1852      	adds	r2, r2, r1
 800562a:	602b      	str	r3, [r5, #0]
 800562c:	60eb      	str	r3, [r5, #12]
 800562e:	60ab      	str	r3, [r5, #8]
 8005630:	7013      	strb	r3, [r2, #0]
 8005632:	65ab      	str	r3, [r5, #88]	; 0x58
 8005634:	9b03      	ldr	r3, [sp, #12]
 8005636:	2205      	movs	r2, #5
 8005638:	7819      	ldrb	r1, [r3, #0]
 800563a:	485d      	ldr	r0, [pc, #372]	; (80057b0 <_vfiprintf_r+0x260>)
 800563c:	f000 fd58 	bl	80060f0 <memchr>
 8005640:	9b03      	ldr	r3, [sp, #12]
 8005642:	1c5f      	adds	r7, r3, #1
 8005644:	2800      	cmp	r0, #0
 8005646:	d120      	bne.n	800568a <_vfiprintf_r+0x13a>
 8005648:	682a      	ldr	r2, [r5, #0]
 800564a:	06d3      	lsls	r3, r2, #27
 800564c:	d504      	bpl.n	8005658 <_vfiprintf_r+0x108>
 800564e:	2353      	movs	r3, #83	; 0x53
 8005650:	a904      	add	r1, sp, #16
 8005652:	185b      	adds	r3, r3, r1
 8005654:	2120      	movs	r1, #32
 8005656:	7019      	strb	r1, [r3, #0]
 8005658:	0713      	lsls	r3, r2, #28
 800565a:	d504      	bpl.n	8005666 <_vfiprintf_r+0x116>
 800565c:	2353      	movs	r3, #83	; 0x53
 800565e:	a904      	add	r1, sp, #16
 8005660:	185b      	adds	r3, r3, r1
 8005662:	212b      	movs	r1, #43	; 0x2b
 8005664:	7019      	strb	r1, [r3, #0]
 8005666:	9b03      	ldr	r3, [sp, #12]
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	2b2a      	cmp	r3, #42	; 0x2a
 800566c:	d016      	beq.n	800569c <_vfiprintf_r+0x14c>
 800566e:	2100      	movs	r1, #0
 8005670:	68eb      	ldr	r3, [r5, #12]
 8005672:	9f03      	ldr	r7, [sp, #12]
 8005674:	783a      	ldrb	r2, [r7, #0]
 8005676:	1c78      	adds	r0, r7, #1
 8005678:	3a30      	subs	r2, #48	; 0x30
 800567a:	4684      	mov	ip, r0
 800567c:	2a09      	cmp	r2, #9
 800567e:	d94f      	bls.n	8005720 <_vfiprintf_r+0x1d0>
 8005680:	2900      	cmp	r1, #0
 8005682:	d111      	bne.n	80056a8 <_vfiprintf_r+0x158>
 8005684:	e017      	b.n	80056b6 <_vfiprintf_r+0x166>
 8005686:	3701      	adds	r7, #1
 8005688:	e7a9      	b.n	80055de <_vfiprintf_r+0x8e>
 800568a:	4b49      	ldr	r3, [pc, #292]	; (80057b0 <_vfiprintf_r+0x260>)
 800568c:	682a      	ldr	r2, [r5, #0]
 800568e:	1ac0      	subs	r0, r0, r3
 8005690:	2301      	movs	r3, #1
 8005692:	4083      	lsls	r3, r0
 8005694:	4313      	orrs	r3, r2
 8005696:	602b      	str	r3, [r5, #0]
 8005698:	9703      	str	r7, [sp, #12]
 800569a:	e7cb      	b.n	8005634 <_vfiprintf_r+0xe4>
 800569c:	9b07      	ldr	r3, [sp, #28]
 800569e:	1d19      	adds	r1, r3, #4
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	9107      	str	r1, [sp, #28]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	db01      	blt.n	80056ac <_vfiprintf_r+0x15c>
 80056a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80056aa:	e004      	b.n	80056b6 <_vfiprintf_r+0x166>
 80056ac:	425b      	negs	r3, r3
 80056ae:	60eb      	str	r3, [r5, #12]
 80056b0:	2302      	movs	r3, #2
 80056b2:	4313      	orrs	r3, r2
 80056b4:	602b      	str	r3, [r5, #0]
 80056b6:	783b      	ldrb	r3, [r7, #0]
 80056b8:	2b2e      	cmp	r3, #46	; 0x2e
 80056ba:	d10a      	bne.n	80056d2 <_vfiprintf_r+0x182>
 80056bc:	787b      	ldrb	r3, [r7, #1]
 80056be:	2b2a      	cmp	r3, #42	; 0x2a
 80056c0:	d137      	bne.n	8005732 <_vfiprintf_r+0x1e2>
 80056c2:	9b07      	ldr	r3, [sp, #28]
 80056c4:	3702      	adds	r7, #2
 80056c6:	1d1a      	adds	r2, r3, #4
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	9207      	str	r2, [sp, #28]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	db2d      	blt.n	800572c <_vfiprintf_r+0x1dc>
 80056d0:	9309      	str	r3, [sp, #36]	; 0x24
 80056d2:	2203      	movs	r2, #3
 80056d4:	7839      	ldrb	r1, [r7, #0]
 80056d6:	4837      	ldr	r0, [pc, #220]	; (80057b4 <_vfiprintf_r+0x264>)
 80056d8:	f000 fd0a 	bl	80060f0 <memchr>
 80056dc:	2800      	cmp	r0, #0
 80056de:	d007      	beq.n	80056f0 <_vfiprintf_r+0x1a0>
 80056e0:	4b34      	ldr	r3, [pc, #208]	; (80057b4 <_vfiprintf_r+0x264>)
 80056e2:	682a      	ldr	r2, [r5, #0]
 80056e4:	1ac0      	subs	r0, r0, r3
 80056e6:	2340      	movs	r3, #64	; 0x40
 80056e8:	4083      	lsls	r3, r0
 80056ea:	4313      	orrs	r3, r2
 80056ec:	3701      	adds	r7, #1
 80056ee:	602b      	str	r3, [r5, #0]
 80056f0:	7839      	ldrb	r1, [r7, #0]
 80056f2:	1c7b      	adds	r3, r7, #1
 80056f4:	2206      	movs	r2, #6
 80056f6:	4830      	ldr	r0, [pc, #192]	; (80057b8 <_vfiprintf_r+0x268>)
 80056f8:	9303      	str	r3, [sp, #12]
 80056fa:	7629      	strb	r1, [r5, #24]
 80056fc:	f000 fcf8 	bl	80060f0 <memchr>
 8005700:	2800      	cmp	r0, #0
 8005702:	d045      	beq.n	8005790 <_vfiprintf_r+0x240>
 8005704:	4b2d      	ldr	r3, [pc, #180]	; (80057bc <_vfiprintf_r+0x26c>)
 8005706:	2b00      	cmp	r3, #0
 8005708:	d127      	bne.n	800575a <_vfiprintf_r+0x20a>
 800570a:	2207      	movs	r2, #7
 800570c:	9b07      	ldr	r3, [sp, #28]
 800570e:	3307      	adds	r3, #7
 8005710:	4393      	bics	r3, r2
 8005712:	3308      	adds	r3, #8
 8005714:	9307      	str	r3, [sp, #28]
 8005716:	696b      	ldr	r3, [r5, #20]
 8005718:	9a04      	ldr	r2, [sp, #16]
 800571a:	189b      	adds	r3, r3, r2
 800571c:	616b      	str	r3, [r5, #20]
 800571e:	e75d      	b.n	80055dc <_vfiprintf_r+0x8c>
 8005720:	210a      	movs	r1, #10
 8005722:	434b      	muls	r3, r1
 8005724:	4667      	mov	r7, ip
 8005726:	189b      	adds	r3, r3, r2
 8005728:	3909      	subs	r1, #9
 800572a:	e7a3      	b.n	8005674 <_vfiprintf_r+0x124>
 800572c:	2301      	movs	r3, #1
 800572e:	425b      	negs	r3, r3
 8005730:	e7ce      	b.n	80056d0 <_vfiprintf_r+0x180>
 8005732:	2300      	movs	r3, #0
 8005734:	001a      	movs	r2, r3
 8005736:	3701      	adds	r7, #1
 8005738:	606b      	str	r3, [r5, #4]
 800573a:	7839      	ldrb	r1, [r7, #0]
 800573c:	1c78      	adds	r0, r7, #1
 800573e:	3930      	subs	r1, #48	; 0x30
 8005740:	4684      	mov	ip, r0
 8005742:	2909      	cmp	r1, #9
 8005744:	d903      	bls.n	800574e <_vfiprintf_r+0x1fe>
 8005746:	2b00      	cmp	r3, #0
 8005748:	d0c3      	beq.n	80056d2 <_vfiprintf_r+0x182>
 800574a:	9209      	str	r2, [sp, #36]	; 0x24
 800574c:	e7c1      	b.n	80056d2 <_vfiprintf_r+0x182>
 800574e:	230a      	movs	r3, #10
 8005750:	435a      	muls	r2, r3
 8005752:	4667      	mov	r7, ip
 8005754:	1852      	adds	r2, r2, r1
 8005756:	3b09      	subs	r3, #9
 8005758:	e7ef      	b.n	800573a <_vfiprintf_r+0x1ea>
 800575a:	ab07      	add	r3, sp, #28
 800575c:	9300      	str	r3, [sp, #0]
 800575e:	0022      	movs	r2, r4
 8005760:	0029      	movs	r1, r5
 8005762:	0030      	movs	r0, r6
 8005764:	4b16      	ldr	r3, [pc, #88]	; (80057c0 <_vfiprintf_r+0x270>)
 8005766:	e000      	b.n	800576a <_vfiprintf_r+0x21a>
 8005768:	bf00      	nop
 800576a:	9004      	str	r0, [sp, #16]
 800576c:	9b04      	ldr	r3, [sp, #16]
 800576e:	3301      	adds	r3, #1
 8005770:	d1d1      	bne.n	8005716 <_vfiprintf_r+0x1c6>
 8005772:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005774:	07db      	lsls	r3, r3, #31
 8005776:	d405      	bmi.n	8005784 <_vfiprintf_r+0x234>
 8005778:	89a3      	ldrh	r3, [r4, #12]
 800577a:	059b      	lsls	r3, r3, #22
 800577c:	d402      	bmi.n	8005784 <_vfiprintf_r+0x234>
 800577e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005780:	f000 fc48 	bl	8006014 <__retarget_lock_release_recursive>
 8005784:	89a3      	ldrh	r3, [r4, #12]
 8005786:	065b      	lsls	r3, r3, #25
 8005788:	d500      	bpl.n	800578c <_vfiprintf_r+0x23c>
 800578a:	e70a      	b.n	80055a2 <_vfiprintf_r+0x52>
 800578c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800578e:	e70a      	b.n	80055a6 <_vfiprintf_r+0x56>
 8005790:	ab07      	add	r3, sp, #28
 8005792:	9300      	str	r3, [sp, #0]
 8005794:	0022      	movs	r2, r4
 8005796:	0029      	movs	r1, r5
 8005798:	0030      	movs	r0, r6
 800579a:	4b09      	ldr	r3, [pc, #36]	; (80057c0 <_vfiprintf_r+0x270>)
 800579c:	f000 f882 	bl	80058a4 <_printf_i>
 80057a0:	e7e3      	b.n	800576a <_vfiprintf_r+0x21a>
 80057a2:	46c0      	nop			; (mov r8, r8)
 80057a4:	080066b0 	.word	0x080066b0
 80057a8:	080066d0 	.word	0x080066d0
 80057ac:	08006690 	.word	0x08006690
 80057b0:	0800665d 	.word	0x0800665d
 80057b4:	08006663 	.word	0x08006663
 80057b8:	08006667 	.word	0x08006667
 80057bc:	00000000 	.word	0x00000000
 80057c0:	0800552b 	.word	0x0800552b

080057c4 <_printf_common>:
 80057c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057c6:	0015      	movs	r5, r2
 80057c8:	9301      	str	r3, [sp, #4]
 80057ca:	688a      	ldr	r2, [r1, #8]
 80057cc:	690b      	ldr	r3, [r1, #16]
 80057ce:	000c      	movs	r4, r1
 80057d0:	9000      	str	r0, [sp, #0]
 80057d2:	4293      	cmp	r3, r2
 80057d4:	da00      	bge.n	80057d8 <_printf_common+0x14>
 80057d6:	0013      	movs	r3, r2
 80057d8:	0022      	movs	r2, r4
 80057da:	602b      	str	r3, [r5, #0]
 80057dc:	3243      	adds	r2, #67	; 0x43
 80057de:	7812      	ldrb	r2, [r2, #0]
 80057e0:	2a00      	cmp	r2, #0
 80057e2:	d001      	beq.n	80057e8 <_printf_common+0x24>
 80057e4:	3301      	adds	r3, #1
 80057e6:	602b      	str	r3, [r5, #0]
 80057e8:	6823      	ldr	r3, [r4, #0]
 80057ea:	069b      	lsls	r3, r3, #26
 80057ec:	d502      	bpl.n	80057f4 <_printf_common+0x30>
 80057ee:	682b      	ldr	r3, [r5, #0]
 80057f0:	3302      	adds	r3, #2
 80057f2:	602b      	str	r3, [r5, #0]
 80057f4:	6822      	ldr	r2, [r4, #0]
 80057f6:	2306      	movs	r3, #6
 80057f8:	0017      	movs	r7, r2
 80057fa:	401f      	ands	r7, r3
 80057fc:	421a      	tst	r2, r3
 80057fe:	d027      	beq.n	8005850 <_printf_common+0x8c>
 8005800:	0023      	movs	r3, r4
 8005802:	3343      	adds	r3, #67	; 0x43
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	1e5a      	subs	r2, r3, #1
 8005808:	4193      	sbcs	r3, r2
 800580a:	6822      	ldr	r2, [r4, #0]
 800580c:	0692      	lsls	r2, r2, #26
 800580e:	d430      	bmi.n	8005872 <_printf_common+0xae>
 8005810:	0022      	movs	r2, r4
 8005812:	9901      	ldr	r1, [sp, #4]
 8005814:	9800      	ldr	r0, [sp, #0]
 8005816:	9e08      	ldr	r6, [sp, #32]
 8005818:	3243      	adds	r2, #67	; 0x43
 800581a:	47b0      	blx	r6
 800581c:	1c43      	adds	r3, r0, #1
 800581e:	d025      	beq.n	800586c <_printf_common+0xa8>
 8005820:	2306      	movs	r3, #6
 8005822:	6820      	ldr	r0, [r4, #0]
 8005824:	682a      	ldr	r2, [r5, #0]
 8005826:	68e1      	ldr	r1, [r4, #12]
 8005828:	2500      	movs	r5, #0
 800582a:	4003      	ands	r3, r0
 800582c:	2b04      	cmp	r3, #4
 800582e:	d103      	bne.n	8005838 <_printf_common+0x74>
 8005830:	1a8d      	subs	r5, r1, r2
 8005832:	43eb      	mvns	r3, r5
 8005834:	17db      	asrs	r3, r3, #31
 8005836:	401d      	ands	r5, r3
 8005838:	68a3      	ldr	r3, [r4, #8]
 800583a:	6922      	ldr	r2, [r4, #16]
 800583c:	4293      	cmp	r3, r2
 800583e:	dd01      	ble.n	8005844 <_printf_common+0x80>
 8005840:	1a9b      	subs	r3, r3, r2
 8005842:	18ed      	adds	r5, r5, r3
 8005844:	2700      	movs	r7, #0
 8005846:	42bd      	cmp	r5, r7
 8005848:	d120      	bne.n	800588c <_printf_common+0xc8>
 800584a:	2000      	movs	r0, #0
 800584c:	e010      	b.n	8005870 <_printf_common+0xac>
 800584e:	3701      	adds	r7, #1
 8005850:	68e3      	ldr	r3, [r4, #12]
 8005852:	682a      	ldr	r2, [r5, #0]
 8005854:	1a9b      	subs	r3, r3, r2
 8005856:	42bb      	cmp	r3, r7
 8005858:	ddd2      	ble.n	8005800 <_printf_common+0x3c>
 800585a:	0022      	movs	r2, r4
 800585c:	2301      	movs	r3, #1
 800585e:	9901      	ldr	r1, [sp, #4]
 8005860:	9800      	ldr	r0, [sp, #0]
 8005862:	9e08      	ldr	r6, [sp, #32]
 8005864:	3219      	adds	r2, #25
 8005866:	47b0      	blx	r6
 8005868:	1c43      	adds	r3, r0, #1
 800586a:	d1f0      	bne.n	800584e <_printf_common+0x8a>
 800586c:	2001      	movs	r0, #1
 800586e:	4240      	negs	r0, r0
 8005870:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005872:	2030      	movs	r0, #48	; 0x30
 8005874:	18e1      	adds	r1, r4, r3
 8005876:	3143      	adds	r1, #67	; 0x43
 8005878:	7008      	strb	r0, [r1, #0]
 800587a:	0021      	movs	r1, r4
 800587c:	1c5a      	adds	r2, r3, #1
 800587e:	3145      	adds	r1, #69	; 0x45
 8005880:	7809      	ldrb	r1, [r1, #0]
 8005882:	18a2      	adds	r2, r4, r2
 8005884:	3243      	adds	r2, #67	; 0x43
 8005886:	3302      	adds	r3, #2
 8005888:	7011      	strb	r1, [r2, #0]
 800588a:	e7c1      	b.n	8005810 <_printf_common+0x4c>
 800588c:	0022      	movs	r2, r4
 800588e:	2301      	movs	r3, #1
 8005890:	9901      	ldr	r1, [sp, #4]
 8005892:	9800      	ldr	r0, [sp, #0]
 8005894:	9e08      	ldr	r6, [sp, #32]
 8005896:	321a      	adds	r2, #26
 8005898:	47b0      	blx	r6
 800589a:	1c43      	adds	r3, r0, #1
 800589c:	d0e6      	beq.n	800586c <_printf_common+0xa8>
 800589e:	3701      	adds	r7, #1
 80058a0:	e7d1      	b.n	8005846 <_printf_common+0x82>
	...

080058a4 <_printf_i>:
 80058a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058a6:	b08b      	sub	sp, #44	; 0x2c
 80058a8:	9206      	str	r2, [sp, #24]
 80058aa:	000a      	movs	r2, r1
 80058ac:	3243      	adds	r2, #67	; 0x43
 80058ae:	9307      	str	r3, [sp, #28]
 80058b0:	9005      	str	r0, [sp, #20]
 80058b2:	9204      	str	r2, [sp, #16]
 80058b4:	7e0a      	ldrb	r2, [r1, #24]
 80058b6:	000c      	movs	r4, r1
 80058b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80058ba:	2a78      	cmp	r2, #120	; 0x78
 80058bc:	d807      	bhi.n	80058ce <_printf_i+0x2a>
 80058be:	2a62      	cmp	r2, #98	; 0x62
 80058c0:	d809      	bhi.n	80058d6 <_printf_i+0x32>
 80058c2:	2a00      	cmp	r2, #0
 80058c4:	d100      	bne.n	80058c8 <_printf_i+0x24>
 80058c6:	e0c1      	b.n	8005a4c <_printf_i+0x1a8>
 80058c8:	2a58      	cmp	r2, #88	; 0x58
 80058ca:	d100      	bne.n	80058ce <_printf_i+0x2a>
 80058cc:	e08c      	b.n	80059e8 <_printf_i+0x144>
 80058ce:	0026      	movs	r6, r4
 80058d0:	3642      	adds	r6, #66	; 0x42
 80058d2:	7032      	strb	r2, [r6, #0]
 80058d4:	e022      	b.n	800591c <_printf_i+0x78>
 80058d6:	0010      	movs	r0, r2
 80058d8:	3863      	subs	r0, #99	; 0x63
 80058da:	2815      	cmp	r0, #21
 80058dc:	d8f7      	bhi.n	80058ce <_printf_i+0x2a>
 80058de:	f7fa fc19 	bl	8000114 <__gnu_thumb1_case_shi>
 80058e2:	0016      	.short	0x0016
 80058e4:	fff6001f 	.word	0xfff6001f
 80058e8:	fff6fff6 	.word	0xfff6fff6
 80058ec:	001ffff6 	.word	0x001ffff6
 80058f0:	fff6fff6 	.word	0xfff6fff6
 80058f4:	fff6fff6 	.word	0xfff6fff6
 80058f8:	003600a8 	.word	0x003600a8
 80058fc:	fff6009a 	.word	0xfff6009a
 8005900:	00b9fff6 	.word	0x00b9fff6
 8005904:	0036fff6 	.word	0x0036fff6
 8005908:	fff6fff6 	.word	0xfff6fff6
 800590c:	009e      	.short	0x009e
 800590e:	0026      	movs	r6, r4
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	3642      	adds	r6, #66	; 0x42
 8005914:	1d11      	adds	r1, r2, #4
 8005916:	6019      	str	r1, [r3, #0]
 8005918:	6813      	ldr	r3, [r2, #0]
 800591a:	7033      	strb	r3, [r6, #0]
 800591c:	2301      	movs	r3, #1
 800591e:	e0a7      	b.n	8005a70 <_printf_i+0x1cc>
 8005920:	6808      	ldr	r0, [r1, #0]
 8005922:	6819      	ldr	r1, [r3, #0]
 8005924:	1d0a      	adds	r2, r1, #4
 8005926:	0605      	lsls	r5, r0, #24
 8005928:	d50b      	bpl.n	8005942 <_printf_i+0x9e>
 800592a:	680d      	ldr	r5, [r1, #0]
 800592c:	601a      	str	r2, [r3, #0]
 800592e:	2d00      	cmp	r5, #0
 8005930:	da03      	bge.n	800593a <_printf_i+0x96>
 8005932:	232d      	movs	r3, #45	; 0x2d
 8005934:	9a04      	ldr	r2, [sp, #16]
 8005936:	426d      	negs	r5, r5
 8005938:	7013      	strb	r3, [r2, #0]
 800593a:	4b61      	ldr	r3, [pc, #388]	; (8005ac0 <_printf_i+0x21c>)
 800593c:	270a      	movs	r7, #10
 800593e:	9303      	str	r3, [sp, #12]
 8005940:	e01b      	b.n	800597a <_printf_i+0xd6>
 8005942:	680d      	ldr	r5, [r1, #0]
 8005944:	601a      	str	r2, [r3, #0]
 8005946:	0641      	lsls	r1, r0, #25
 8005948:	d5f1      	bpl.n	800592e <_printf_i+0x8a>
 800594a:	b22d      	sxth	r5, r5
 800594c:	e7ef      	b.n	800592e <_printf_i+0x8a>
 800594e:	680d      	ldr	r5, [r1, #0]
 8005950:	6819      	ldr	r1, [r3, #0]
 8005952:	1d08      	adds	r0, r1, #4
 8005954:	6018      	str	r0, [r3, #0]
 8005956:	062e      	lsls	r6, r5, #24
 8005958:	d501      	bpl.n	800595e <_printf_i+0xba>
 800595a:	680d      	ldr	r5, [r1, #0]
 800595c:	e003      	b.n	8005966 <_printf_i+0xc2>
 800595e:	066d      	lsls	r5, r5, #25
 8005960:	d5fb      	bpl.n	800595a <_printf_i+0xb6>
 8005962:	680d      	ldr	r5, [r1, #0]
 8005964:	b2ad      	uxth	r5, r5
 8005966:	4b56      	ldr	r3, [pc, #344]	; (8005ac0 <_printf_i+0x21c>)
 8005968:	2708      	movs	r7, #8
 800596a:	9303      	str	r3, [sp, #12]
 800596c:	2a6f      	cmp	r2, #111	; 0x6f
 800596e:	d000      	beq.n	8005972 <_printf_i+0xce>
 8005970:	3702      	adds	r7, #2
 8005972:	0023      	movs	r3, r4
 8005974:	2200      	movs	r2, #0
 8005976:	3343      	adds	r3, #67	; 0x43
 8005978:	701a      	strb	r2, [r3, #0]
 800597a:	6863      	ldr	r3, [r4, #4]
 800597c:	60a3      	str	r3, [r4, #8]
 800597e:	2b00      	cmp	r3, #0
 8005980:	db03      	blt.n	800598a <_printf_i+0xe6>
 8005982:	2204      	movs	r2, #4
 8005984:	6821      	ldr	r1, [r4, #0]
 8005986:	4391      	bics	r1, r2
 8005988:	6021      	str	r1, [r4, #0]
 800598a:	2d00      	cmp	r5, #0
 800598c:	d102      	bne.n	8005994 <_printf_i+0xf0>
 800598e:	9e04      	ldr	r6, [sp, #16]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d00c      	beq.n	80059ae <_printf_i+0x10a>
 8005994:	9e04      	ldr	r6, [sp, #16]
 8005996:	0028      	movs	r0, r5
 8005998:	0039      	movs	r1, r7
 800599a:	f7fa fc4b 	bl	8000234 <__aeabi_uidivmod>
 800599e:	9b03      	ldr	r3, [sp, #12]
 80059a0:	3e01      	subs	r6, #1
 80059a2:	5c5b      	ldrb	r3, [r3, r1]
 80059a4:	7033      	strb	r3, [r6, #0]
 80059a6:	002b      	movs	r3, r5
 80059a8:	0005      	movs	r5, r0
 80059aa:	429f      	cmp	r7, r3
 80059ac:	d9f3      	bls.n	8005996 <_printf_i+0xf2>
 80059ae:	2f08      	cmp	r7, #8
 80059b0:	d109      	bne.n	80059c6 <_printf_i+0x122>
 80059b2:	6823      	ldr	r3, [r4, #0]
 80059b4:	07db      	lsls	r3, r3, #31
 80059b6:	d506      	bpl.n	80059c6 <_printf_i+0x122>
 80059b8:	6863      	ldr	r3, [r4, #4]
 80059ba:	6922      	ldr	r2, [r4, #16]
 80059bc:	4293      	cmp	r3, r2
 80059be:	dc02      	bgt.n	80059c6 <_printf_i+0x122>
 80059c0:	2330      	movs	r3, #48	; 0x30
 80059c2:	3e01      	subs	r6, #1
 80059c4:	7033      	strb	r3, [r6, #0]
 80059c6:	9b04      	ldr	r3, [sp, #16]
 80059c8:	1b9b      	subs	r3, r3, r6
 80059ca:	6123      	str	r3, [r4, #16]
 80059cc:	9b07      	ldr	r3, [sp, #28]
 80059ce:	0021      	movs	r1, r4
 80059d0:	9300      	str	r3, [sp, #0]
 80059d2:	9805      	ldr	r0, [sp, #20]
 80059d4:	9b06      	ldr	r3, [sp, #24]
 80059d6:	aa09      	add	r2, sp, #36	; 0x24
 80059d8:	f7ff fef4 	bl	80057c4 <_printf_common>
 80059dc:	1c43      	adds	r3, r0, #1
 80059de:	d14c      	bne.n	8005a7a <_printf_i+0x1d6>
 80059e0:	2001      	movs	r0, #1
 80059e2:	4240      	negs	r0, r0
 80059e4:	b00b      	add	sp, #44	; 0x2c
 80059e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059e8:	3145      	adds	r1, #69	; 0x45
 80059ea:	700a      	strb	r2, [r1, #0]
 80059ec:	4a34      	ldr	r2, [pc, #208]	; (8005ac0 <_printf_i+0x21c>)
 80059ee:	9203      	str	r2, [sp, #12]
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	6821      	ldr	r1, [r4, #0]
 80059f4:	ca20      	ldmia	r2!, {r5}
 80059f6:	601a      	str	r2, [r3, #0]
 80059f8:	0608      	lsls	r0, r1, #24
 80059fa:	d516      	bpl.n	8005a2a <_printf_i+0x186>
 80059fc:	07cb      	lsls	r3, r1, #31
 80059fe:	d502      	bpl.n	8005a06 <_printf_i+0x162>
 8005a00:	2320      	movs	r3, #32
 8005a02:	4319      	orrs	r1, r3
 8005a04:	6021      	str	r1, [r4, #0]
 8005a06:	2710      	movs	r7, #16
 8005a08:	2d00      	cmp	r5, #0
 8005a0a:	d1b2      	bne.n	8005972 <_printf_i+0xce>
 8005a0c:	2320      	movs	r3, #32
 8005a0e:	6822      	ldr	r2, [r4, #0]
 8005a10:	439a      	bics	r2, r3
 8005a12:	6022      	str	r2, [r4, #0]
 8005a14:	e7ad      	b.n	8005972 <_printf_i+0xce>
 8005a16:	2220      	movs	r2, #32
 8005a18:	6809      	ldr	r1, [r1, #0]
 8005a1a:	430a      	orrs	r2, r1
 8005a1c:	6022      	str	r2, [r4, #0]
 8005a1e:	0022      	movs	r2, r4
 8005a20:	2178      	movs	r1, #120	; 0x78
 8005a22:	3245      	adds	r2, #69	; 0x45
 8005a24:	7011      	strb	r1, [r2, #0]
 8005a26:	4a27      	ldr	r2, [pc, #156]	; (8005ac4 <_printf_i+0x220>)
 8005a28:	e7e1      	b.n	80059ee <_printf_i+0x14a>
 8005a2a:	0648      	lsls	r0, r1, #25
 8005a2c:	d5e6      	bpl.n	80059fc <_printf_i+0x158>
 8005a2e:	b2ad      	uxth	r5, r5
 8005a30:	e7e4      	b.n	80059fc <_printf_i+0x158>
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	680d      	ldr	r5, [r1, #0]
 8005a36:	1d10      	adds	r0, r2, #4
 8005a38:	6949      	ldr	r1, [r1, #20]
 8005a3a:	6018      	str	r0, [r3, #0]
 8005a3c:	6813      	ldr	r3, [r2, #0]
 8005a3e:	062e      	lsls	r6, r5, #24
 8005a40:	d501      	bpl.n	8005a46 <_printf_i+0x1a2>
 8005a42:	6019      	str	r1, [r3, #0]
 8005a44:	e002      	b.n	8005a4c <_printf_i+0x1a8>
 8005a46:	066d      	lsls	r5, r5, #25
 8005a48:	d5fb      	bpl.n	8005a42 <_printf_i+0x19e>
 8005a4a:	8019      	strh	r1, [r3, #0]
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	9e04      	ldr	r6, [sp, #16]
 8005a50:	6123      	str	r3, [r4, #16]
 8005a52:	e7bb      	b.n	80059cc <_printf_i+0x128>
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	1d11      	adds	r1, r2, #4
 8005a58:	6019      	str	r1, [r3, #0]
 8005a5a:	6816      	ldr	r6, [r2, #0]
 8005a5c:	2100      	movs	r1, #0
 8005a5e:	0030      	movs	r0, r6
 8005a60:	6862      	ldr	r2, [r4, #4]
 8005a62:	f000 fb45 	bl	80060f0 <memchr>
 8005a66:	2800      	cmp	r0, #0
 8005a68:	d001      	beq.n	8005a6e <_printf_i+0x1ca>
 8005a6a:	1b80      	subs	r0, r0, r6
 8005a6c:	6060      	str	r0, [r4, #4]
 8005a6e:	6863      	ldr	r3, [r4, #4]
 8005a70:	6123      	str	r3, [r4, #16]
 8005a72:	2300      	movs	r3, #0
 8005a74:	9a04      	ldr	r2, [sp, #16]
 8005a76:	7013      	strb	r3, [r2, #0]
 8005a78:	e7a8      	b.n	80059cc <_printf_i+0x128>
 8005a7a:	6923      	ldr	r3, [r4, #16]
 8005a7c:	0032      	movs	r2, r6
 8005a7e:	9906      	ldr	r1, [sp, #24]
 8005a80:	9805      	ldr	r0, [sp, #20]
 8005a82:	9d07      	ldr	r5, [sp, #28]
 8005a84:	47a8      	blx	r5
 8005a86:	1c43      	adds	r3, r0, #1
 8005a88:	d0aa      	beq.n	80059e0 <_printf_i+0x13c>
 8005a8a:	6823      	ldr	r3, [r4, #0]
 8005a8c:	079b      	lsls	r3, r3, #30
 8005a8e:	d415      	bmi.n	8005abc <_printf_i+0x218>
 8005a90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a92:	68e0      	ldr	r0, [r4, #12]
 8005a94:	4298      	cmp	r0, r3
 8005a96:	daa5      	bge.n	80059e4 <_printf_i+0x140>
 8005a98:	0018      	movs	r0, r3
 8005a9a:	e7a3      	b.n	80059e4 <_printf_i+0x140>
 8005a9c:	0022      	movs	r2, r4
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	9906      	ldr	r1, [sp, #24]
 8005aa2:	9805      	ldr	r0, [sp, #20]
 8005aa4:	9e07      	ldr	r6, [sp, #28]
 8005aa6:	3219      	adds	r2, #25
 8005aa8:	47b0      	blx	r6
 8005aaa:	1c43      	adds	r3, r0, #1
 8005aac:	d098      	beq.n	80059e0 <_printf_i+0x13c>
 8005aae:	3501      	adds	r5, #1
 8005ab0:	68e3      	ldr	r3, [r4, #12]
 8005ab2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ab4:	1a9b      	subs	r3, r3, r2
 8005ab6:	42ab      	cmp	r3, r5
 8005ab8:	dcf0      	bgt.n	8005a9c <_printf_i+0x1f8>
 8005aba:	e7e9      	b.n	8005a90 <_printf_i+0x1ec>
 8005abc:	2500      	movs	r5, #0
 8005abe:	e7f7      	b.n	8005ab0 <_printf_i+0x20c>
 8005ac0:	0800666e 	.word	0x0800666e
 8005ac4:	0800667f 	.word	0x0800667f

08005ac8 <__swbuf_r>:
 8005ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aca:	0005      	movs	r5, r0
 8005acc:	000e      	movs	r6, r1
 8005ace:	0014      	movs	r4, r2
 8005ad0:	2800      	cmp	r0, #0
 8005ad2:	d004      	beq.n	8005ade <__swbuf_r+0x16>
 8005ad4:	6983      	ldr	r3, [r0, #24]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d101      	bne.n	8005ade <__swbuf_r+0x16>
 8005ada:	f000 f9f9 	bl	8005ed0 <__sinit>
 8005ade:	4b22      	ldr	r3, [pc, #136]	; (8005b68 <__swbuf_r+0xa0>)
 8005ae0:	429c      	cmp	r4, r3
 8005ae2:	d12e      	bne.n	8005b42 <__swbuf_r+0x7a>
 8005ae4:	686c      	ldr	r4, [r5, #4]
 8005ae6:	69a3      	ldr	r3, [r4, #24]
 8005ae8:	60a3      	str	r3, [r4, #8]
 8005aea:	89a3      	ldrh	r3, [r4, #12]
 8005aec:	071b      	lsls	r3, r3, #28
 8005aee:	d532      	bpl.n	8005b56 <__swbuf_r+0x8e>
 8005af0:	6923      	ldr	r3, [r4, #16]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d02f      	beq.n	8005b56 <__swbuf_r+0x8e>
 8005af6:	6823      	ldr	r3, [r4, #0]
 8005af8:	6922      	ldr	r2, [r4, #16]
 8005afa:	b2f7      	uxtb	r7, r6
 8005afc:	1a98      	subs	r0, r3, r2
 8005afe:	6963      	ldr	r3, [r4, #20]
 8005b00:	b2f6      	uxtb	r6, r6
 8005b02:	4283      	cmp	r3, r0
 8005b04:	dc05      	bgt.n	8005b12 <__swbuf_r+0x4a>
 8005b06:	0021      	movs	r1, r4
 8005b08:	0028      	movs	r0, r5
 8005b0a:	f000 f93f 	bl	8005d8c <_fflush_r>
 8005b0e:	2800      	cmp	r0, #0
 8005b10:	d127      	bne.n	8005b62 <__swbuf_r+0x9a>
 8005b12:	68a3      	ldr	r3, [r4, #8]
 8005b14:	3001      	adds	r0, #1
 8005b16:	3b01      	subs	r3, #1
 8005b18:	60a3      	str	r3, [r4, #8]
 8005b1a:	6823      	ldr	r3, [r4, #0]
 8005b1c:	1c5a      	adds	r2, r3, #1
 8005b1e:	6022      	str	r2, [r4, #0]
 8005b20:	701f      	strb	r7, [r3, #0]
 8005b22:	6963      	ldr	r3, [r4, #20]
 8005b24:	4283      	cmp	r3, r0
 8005b26:	d004      	beq.n	8005b32 <__swbuf_r+0x6a>
 8005b28:	89a3      	ldrh	r3, [r4, #12]
 8005b2a:	07db      	lsls	r3, r3, #31
 8005b2c:	d507      	bpl.n	8005b3e <__swbuf_r+0x76>
 8005b2e:	2e0a      	cmp	r6, #10
 8005b30:	d105      	bne.n	8005b3e <__swbuf_r+0x76>
 8005b32:	0021      	movs	r1, r4
 8005b34:	0028      	movs	r0, r5
 8005b36:	f000 f929 	bl	8005d8c <_fflush_r>
 8005b3a:	2800      	cmp	r0, #0
 8005b3c:	d111      	bne.n	8005b62 <__swbuf_r+0x9a>
 8005b3e:	0030      	movs	r0, r6
 8005b40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b42:	4b0a      	ldr	r3, [pc, #40]	; (8005b6c <__swbuf_r+0xa4>)
 8005b44:	429c      	cmp	r4, r3
 8005b46:	d101      	bne.n	8005b4c <__swbuf_r+0x84>
 8005b48:	68ac      	ldr	r4, [r5, #8]
 8005b4a:	e7cc      	b.n	8005ae6 <__swbuf_r+0x1e>
 8005b4c:	4b08      	ldr	r3, [pc, #32]	; (8005b70 <__swbuf_r+0xa8>)
 8005b4e:	429c      	cmp	r4, r3
 8005b50:	d1c9      	bne.n	8005ae6 <__swbuf_r+0x1e>
 8005b52:	68ec      	ldr	r4, [r5, #12]
 8005b54:	e7c7      	b.n	8005ae6 <__swbuf_r+0x1e>
 8005b56:	0021      	movs	r1, r4
 8005b58:	0028      	movs	r0, r5
 8005b5a:	f000 f80b 	bl	8005b74 <__swsetup_r>
 8005b5e:	2800      	cmp	r0, #0
 8005b60:	d0c9      	beq.n	8005af6 <__swbuf_r+0x2e>
 8005b62:	2601      	movs	r6, #1
 8005b64:	4276      	negs	r6, r6
 8005b66:	e7ea      	b.n	8005b3e <__swbuf_r+0x76>
 8005b68:	080066b0 	.word	0x080066b0
 8005b6c:	080066d0 	.word	0x080066d0
 8005b70:	08006690 	.word	0x08006690

08005b74 <__swsetup_r>:
 8005b74:	4b37      	ldr	r3, [pc, #220]	; (8005c54 <__swsetup_r+0xe0>)
 8005b76:	b570      	push	{r4, r5, r6, lr}
 8005b78:	681d      	ldr	r5, [r3, #0]
 8005b7a:	0006      	movs	r6, r0
 8005b7c:	000c      	movs	r4, r1
 8005b7e:	2d00      	cmp	r5, #0
 8005b80:	d005      	beq.n	8005b8e <__swsetup_r+0x1a>
 8005b82:	69ab      	ldr	r3, [r5, #24]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d102      	bne.n	8005b8e <__swsetup_r+0x1a>
 8005b88:	0028      	movs	r0, r5
 8005b8a:	f000 f9a1 	bl	8005ed0 <__sinit>
 8005b8e:	4b32      	ldr	r3, [pc, #200]	; (8005c58 <__swsetup_r+0xe4>)
 8005b90:	429c      	cmp	r4, r3
 8005b92:	d10f      	bne.n	8005bb4 <__swsetup_r+0x40>
 8005b94:	686c      	ldr	r4, [r5, #4]
 8005b96:	230c      	movs	r3, #12
 8005b98:	5ee2      	ldrsh	r2, [r4, r3]
 8005b9a:	b293      	uxth	r3, r2
 8005b9c:	0711      	lsls	r1, r2, #28
 8005b9e:	d42d      	bmi.n	8005bfc <__swsetup_r+0x88>
 8005ba0:	06d9      	lsls	r1, r3, #27
 8005ba2:	d411      	bmi.n	8005bc8 <__swsetup_r+0x54>
 8005ba4:	2309      	movs	r3, #9
 8005ba6:	2001      	movs	r0, #1
 8005ba8:	6033      	str	r3, [r6, #0]
 8005baa:	3337      	adds	r3, #55	; 0x37
 8005bac:	4313      	orrs	r3, r2
 8005bae:	81a3      	strh	r3, [r4, #12]
 8005bb0:	4240      	negs	r0, r0
 8005bb2:	bd70      	pop	{r4, r5, r6, pc}
 8005bb4:	4b29      	ldr	r3, [pc, #164]	; (8005c5c <__swsetup_r+0xe8>)
 8005bb6:	429c      	cmp	r4, r3
 8005bb8:	d101      	bne.n	8005bbe <__swsetup_r+0x4a>
 8005bba:	68ac      	ldr	r4, [r5, #8]
 8005bbc:	e7eb      	b.n	8005b96 <__swsetup_r+0x22>
 8005bbe:	4b28      	ldr	r3, [pc, #160]	; (8005c60 <__swsetup_r+0xec>)
 8005bc0:	429c      	cmp	r4, r3
 8005bc2:	d1e8      	bne.n	8005b96 <__swsetup_r+0x22>
 8005bc4:	68ec      	ldr	r4, [r5, #12]
 8005bc6:	e7e6      	b.n	8005b96 <__swsetup_r+0x22>
 8005bc8:	075b      	lsls	r3, r3, #29
 8005bca:	d513      	bpl.n	8005bf4 <__swsetup_r+0x80>
 8005bcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005bce:	2900      	cmp	r1, #0
 8005bd0:	d008      	beq.n	8005be4 <__swsetup_r+0x70>
 8005bd2:	0023      	movs	r3, r4
 8005bd4:	3344      	adds	r3, #68	; 0x44
 8005bd6:	4299      	cmp	r1, r3
 8005bd8:	d002      	beq.n	8005be0 <__swsetup_r+0x6c>
 8005bda:	0030      	movs	r0, r6
 8005bdc:	f7ff f8be 	bl	8004d5c <_free_r>
 8005be0:	2300      	movs	r3, #0
 8005be2:	6363      	str	r3, [r4, #52]	; 0x34
 8005be4:	2224      	movs	r2, #36	; 0x24
 8005be6:	89a3      	ldrh	r3, [r4, #12]
 8005be8:	4393      	bics	r3, r2
 8005bea:	81a3      	strh	r3, [r4, #12]
 8005bec:	2300      	movs	r3, #0
 8005bee:	6063      	str	r3, [r4, #4]
 8005bf0:	6923      	ldr	r3, [r4, #16]
 8005bf2:	6023      	str	r3, [r4, #0]
 8005bf4:	2308      	movs	r3, #8
 8005bf6:	89a2      	ldrh	r2, [r4, #12]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	81a3      	strh	r3, [r4, #12]
 8005bfc:	6923      	ldr	r3, [r4, #16]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d10b      	bne.n	8005c1a <__swsetup_r+0xa6>
 8005c02:	21a0      	movs	r1, #160	; 0xa0
 8005c04:	2280      	movs	r2, #128	; 0x80
 8005c06:	89a3      	ldrh	r3, [r4, #12]
 8005c08:	0089      	lsls	r1, r1, #2
 8005c0a:	0092      	lsls	r2, r2, #2
 8005c0c:	400b      	ands	r3, r1
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d003      	beq.n	8005c1a <__swsetup_r+0xa6>
 8005c12:	0021      	movs	r1, r4
 8005c14:	0030      	movs	r0, r6
 8005c16:	f000 fa27 	bl	8006068 <__smakebuf_r>
 8005c1a:	220c      	movs	r2, #12
 8005c1c:	5ea3      	ldrsh	r3, [r4, r2]
 8005c1e:	2001      	movs	r0, #1
 8005c20:	001a      	movs	r2, r3
 8005c22:	b299      	uxth	r1, r3
 8005c24:	4002      	ands	r2, r0
 8005c26:	4203      	tst	r3, r0
 8005c28:	d00f      	beq.n	8005c4a <__swsetup_r+0xd6>
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	60a2      	str	r2, [r4, #8]
 8005c2e:	6962      	ldr	r2, [r4, #20]
 8005c30:	4252      	negs	r2, r2
 8005c32:	61a2      	str	r2, [r4, #24]
 8005c34:	2000      	movs	r0, #0
 8005c36:	6922      	ldr	r2, [r4, #16]
 8005c38:	4282      	cmp	r2, r0
 8005c3a:	d1ba      	bne.n	8005bb2 <__swsetup_r+0x3e>
 8005c3c:	060a      	lsls	r2, r1, #24
 8005c3e:	d5b8      	bpl.n	8005bb2 <__swsetup_r+0x3e>
 8005c40:	2240      	movs	r2, #64	; 0x40
 8005c42:	4313      	orrs	r3, r2
 8005c44:	81a3      	strh	r3, [r4, #12]
 8005c46:	3801      	subs	r0, #1
 8005c48:	e7b3      	b.n	8005bb2 <__swsetup_r+0x3e>
 8005c4a:	0788      	lsls	r0, r1, #30
 8005c4c:	d400      	bmi.n	8005c50 <__swsetup_r+0xdc>
 8005c4e:	6962      	ldr	r2, [r4, #20]
 8005c50:	60a2      	str	r2, [r4, #8]
 8005c52:	e7ef      	b.n	8005c34 <__swsetup_r+0xc0>
 8005c54:	20000014 	.word	0x20000014
 8005c58:	080066b0 	.word	0x080066b0
 8005c5c:	080066d0 	.word	0x080066d0
 8005c60:	08006690 	.word	0x08006690

08005c64 <abort>:
 8005c64:	2006      	movs	r0, #6
 8005c66:	b510      	push	{r4, lr}
 8005c68:	f000 fac2 	bl	80061f0 <raise>
 8005c6c:	2001      	movs	r0, #1
 8005c6e:	f7fb f95f 	bl	8000f30 <_exit>
	...

08005c74 <__sflush_r>:
 8005c74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c76:	898b      	ldrh	r3, [r1, #12]
 8005c78:	0005      	movs	r5, r0
 8005c7a:	000c      	movs	r4, r1
 8005c7c:	071a      	lsls	r2, r3, #28
 8005c7e:	d45f      	bmi.n	8005d40 <__sflush_r+0xcc>
 8005c80:	684a      	ldr	r2, [r1, #4]
 8005c82:	2a00      	cmp	r2, #0
 8005c84:	dc04      	bgt.n	8005c90 <__sflush_r+0x1c>
 8005c86:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8005c88:	2a00      	cmp	r2, #0
 8005c8a:	dc01      	bgt.n	8005c90 <__sflush_r+0x1c>
 8005c8c:	2000      	movs	r0, #0
 8005c8e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005c90:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005c92:	2f00      	cmp	r7, #0
 8005c94:	d0fa      	beq.n	8005c8c <__sflush_r+0x18>
 8005c96:	2200      	movs	r2, #0
 8005c98:	2180      	movs	r1, #128	; 0x80
 8005c9a:	682e      	ldr	r6, [r5, #0]
 8005c9c:	602a      	str	r2, [r5, #0]
 8005c9e:	001a      	movs	r2, r3
 8005ca0:	0149      	lsls	r1, r1, #5
 8005ca2:	400a      	ands	r2, r1
 8005ca4:	420b      	tst	r3, r1
 8005ca6:	d034      	beq.n	8005d12 <__sflush_r+0x9e>
 8005ca8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005caa:	89a3      	ldrh	r3, [r4, #12]
 8005cac:	075b      	lsls	r3, r3, #29
 8005cae:	d506      	bpl.n	8005cbe <__sflush_r+0x4a>
 8005cb0:	6863      	ldr	r3, [r4, #4]
 8005cb2:	1ac0      	subs	r0, r0, r3
 8005cb4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d001      	beq.n	8005cbe <__sflush_r+0x4a>
 8005cba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005cbc:	1ac0      	subs	r0, r0, r3
 8005cbe:	0002      	movs	r2, r0
 8005cc0:	6a21      	ldr	r1, [r4, #32]
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	0028      	movs	r0, r5
 8005cc6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005cc8:	47b8      	blx	r7
 8005cca:	89a1      	ldrh	r1, [r4, #12]
 8005ccc:	1c43      	adds	r3, r0, #1
 8005cce:	d106      	bne.n	8005cde <__sflush_r+0x6a>
 8005cd0:	682b      	ldr	r3, [r5, #0]
 8005cd2:	2b1d      	cmp	r3, #29
 8005cd4:	d831      	bhi.n	8005d3a <__sflush_r+0xc6>
 8005cd6:	4a2c      	ldr	r2, [pc, #176]	; (8005d88 <__sflush_r+0x114>)
 8005cd8:	40da      	lsrs	r2, r3
 8005cda:	07d3      	lsls	r3, r2, #31
 8005cdc:	d52d      	bpl.n	8005d3a <__sflush_r+0xc6>
 8005cde:	2300      	movs	r3, #0
 8005ce0:	6063      	str	r3, [r4, #4]
 8005ce2:	6923      	ldr	r3, [r4, #16]
 8005ce4:	6023      	str	r3, [r4, #0]
 8005ce6:	04cb      	lsls	r3, r1, #19
 8005ce8:	d505      	bpl.n	8005cf6 <__sflush_r+0x82>
 8005cea:	1c43      	adds	r3, r0, #1
 8005cec:	d102      	bne.n	8005cf4 <__sflush_r+0x80>
 8005cee:	682b      	ldr	r3, [r5, #0]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d100      	bne.n	8005cf6 <__sflush_r+0x82>
 8005cf4:	6560      	str	r0, [r4, #84]	; 0x54
 8005cf6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005cf8:	602e      	str	r6, [r5, #0]
 8005cfa:	2900      	cmp	r1, #0
 8005cfc:	d0c6      	beq.n	8005c8c <__sflush_r+0x18>
 8005cfe:	0023      	movs	r3, r4
 8005d00:	3344      	adds	r3, #68	; 0x44
 8005d02:	4299      	cmp	r1, r3
 8005d04:	d002      	beq.n	8005d0c <__sflush_r+0x98>
 8005d06:	0028      	movs	r0, r5
 8005d08:	f7ff f828 	bl	8004d5c <_free_r>
 8005d0c:	2000      	movs	r0, #0
 8005d0e:	6360      	str	r0, [r4, #52]	; 0x34
 8005d10:	e7bd      	b.n	8005c8e <__sflush_r+0x1a>
 8005d12:	2301      	movs	r3, #1
 8005d14:	0028      	movs	r0, r5
 8005d16:	6a21      	ldr	r1, [r4, #32]
 8005d18:	47b8      	blx	r7
 8005d1a:	1c43      	adds	r3, r0, #1
 8005d1c:	d1c5      	bne.n	8005caa <__sflush_r+0x36>
 8005d1e:	682b      	ldr	r3, [r5, #0]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d0c2      	beq.n	8005caa <__sflush_r+0x36>
 8005d24:	2b1d      	cmp	r3, #29
 8005d26:	d001      	beq.n	8005d2c <__sflush_r+0xb8>
 8005d28:	2b16      	cmp	r3, #22
 8005d2a:	d101      	bne.n	8005d30 <__sflush_r+0xbc>
 8005d2c:	602e      	str	r6, [r5, #0]
 8005d2e:	e7ad      	b.n	8005c8c <__sflush_r+0x18>
 8005d30:	2340      	movs	r3, #64	; 0x40
 8005d32:	89a2      	ldrh	r2, [r4, #12]
 8005d34:	4313      	orrs	r3, r2
 8005d36:	81a3      	strh	r3, [r4, #12]
 8005d38:	e7a9      	b.n	8005c8e <__sflush_r+0x1a>
 8005d3a:	2340      	movs	r3, #64	; 0x40
 8005d3c:	430b      	orrs	r3, r1
 8005d3e:	e7fa      	b.n	8005d36 <__sflush_r+0xc2>
 8005d40:	690f      	ldr	r7, [r1, #16]
 8005d42:	2f00      	cmp	r7, #0
 8005d44:	d0a2      	beq.n	8005c8c <__sflush_r+0x18>
 8005d46:	680a      	ldr	r2, [r1, #0]
 8005d48:	600f      	str	r7, [r1, #0]
 8005d4a:	1bd2      	subs	r2, r2, r7
 8005d4c:	9201      	str	r2, [sp, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	079b      	lsls	r3, r3, #30
 8005d52:	d100      	bne.n	8005d56 <__sflush_r+0xe2>
 8005d54:	694a      	ldr	r2, [r1, #20]
 8005d56:	60a2      	str	r2, [r4, #8]
 8005d58:	9b01      	ldr	r3, [sp, #4]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	dc00      	bgt.n	8005d60 <__sflush_r+0xec>
 8005d5e:	e795      	b.n	8005c8c <__sflush_r+0x18>
 8005d60:	003a      	movs	r2, r7
 8005d62:	0028      	movs	r0, r5
 8005d64:	9b01      	ldr	r3, [sp, #4]
 8005d66:	6a21      	ldr	r1, [r4, #32]
 8005d68:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005d6a:	47b0      	blx	r6
 8005d6c:	2800      	cmp	r0, #0
 8005d6e:	dc06      	bgt.n	8005d7e <__sflush_r+0x10a>
 8005d70:	2340      	movs	r3, #64	; 0x40
 8005d72:	2001      	movs	r0, #1
 8005d74:	89a2      	ldrh	r2, [r4, #12]
 8005d76:	4240      	negs	r0, r0
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	81a3      	strh	r3, [r4, #12]
 8005d7c:	e787      	b.n	8005c8e <__sflush_r+0x1a>
 8005d7e:	9b01      	ldr	r3, [sp, #4]
 8005d80:	183f      	adds	r7, r7, r0
 8005d82:	1a1b      	subs	r3, r3, r0
 8005d84:	9301      	str	r3, [sp, #4]
 8005d86:	e7e7      	b.n	8005d58 <__sflush_r+0xe4>
 8005d88:	20400001 	.word	0x20400001

08005d8c <_fflush_r>:
 8005d8c:	690b      	ldr	r3, [r1, #16]
 8005d8e:	b570      	push	{r4, r5, r6, lr}
 8005d90:	0005      	movs	r5, r0
 8005d92:	000c      	movs	r4, r1
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d102      	bne.n	8005d9e <_fflush_r+0x12>
 8005d98:	2500      	movs	r5, #0
 8005d9a:	0028      	movs	r0, r5
 8005d9c:	bd70      	pop	{r4, r5, r6, pc}
 8005d9e:	2800      	cmp	r0, #0
 8005da0:	d004      	beq.n	8005dac <_fflush_r+0x20>
 8005da2:	6983      	ldr	r3, [r0, #24]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d101      	bne.n	8005dac <_fflush_r+0x20>
 8005da8:	f000 f892 	bl	8005ed0 <__sinit>
 8005dac:	4b14      	ldr	r3, [pc, #80]	; (8005e00 <_fflush_r+0x74>)
 8005dae:	429c      	cmp	r4, r3
 8005db0:	d11b      	bne.n	8005dea <_fflush_r+0x5e>
 8005db2:	686c      	ldr	r4, [r5, #4]
 8005db4:	220c      	movs	r2, #12
 8005db6:	5ea3      	ldrsh	r3, [r4, r2]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d0ed      	beq.n	8005d98 <_fflush_r+0xc>
 8005dbc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005dbe:	07d2      	lsls	r2, r2, #31
 8005dc0:	d404      	bmi.n	8005dcc <_fflush_r+0x40>
 8005dc2:	059b      	lsls	r3, r3, #22
 8005dc4:	d402      	bmi.n	8005dcc <_fflush_r+0x40>
 8005dc6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005dc8:	f000 f923 	bl	8006012 <__retarget_lock_acquire_recursive>
 8005dcc:	0028      	movs	r0, r5
 8005dce:	0021      	movs	r1, r4
 8005dd0:	f7ff ff50 	bl	8005c74 <__sflush_r>
 8005dd4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005dd6:	0005      	movs	r5, r0
 8005dd8:	07db      	lsls	r3, r3, #31
 8005dda:	d4de      	bmi.n	8005d9a <_fflush_r+0xe>
 8005ddc:	89a3      	ldrh	r3, [r4, #12]
 8005dde:	059b      	lsls	r3, r3, #22
 8005de0:	d4db      	bmi.n	8005d9a <_fflush_r+0xe>
 8005de2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005de4:	f000 f916 	bl	8006014 <__retarget_lock_release_recursive>
 8005de8:	e7d7      	b.n	8005d9a <_fflush_r+0xe>
 8005dea:	4b06      	ldr	r3, [pc, #24]	; (8005e04 <_fflush_r+0x78>)
 8005dec:	429c      	cmp	r4, r3
 8005dee:	d101      	bne.n	8005df4 <_fflush_r+0x68>
 8005df0:	68ac      	ldr	r4, [r5, #8]
 8005df2:	e7df      	b.n	8005db4 <_fflush_r+0x28>
 8005df4:	4b04      	ldr	r3, [pc, #16]	; (8005e08 <_fflush_r+0x7c>)
 8005df6:	429c      	cmp	r4, r3
 8005df8:	d1dc      	bne.n	8005db4 <_fflush_r+0x28>
 8005dfa:	68ec      	ldr	r4, [r5, #12]
 8005dfc:	e7da      	b.n	8005db4 <_fflush_r+0x28>
 8005dfe:	46c0      	nop			; (mov r8, r8)
 8005e00:	080066b0 	.word	0x080066b0
 8005e04:	080066d0 	.word	0x080066d0
 8005e08:	08006690 	.word	0x08006690

08005e0c <std>:
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	b510      	push	{r4, lr}
 8005e10:	0004      	movs	r4, r0
 8005e12:	6003      	str	r3, [r0, #0]
 8005e14:	6043      	str	r3, [r0, #4]
 8005e16:	6083      	str	r3, [r0, #8]
 8005e18:	8181      	strh	r1, [r0, #12]
 8005e1a:	6643      	str	r3, [r0, #100]	; 0x64
 8005e1c:	0019      	movs	r1, r3
 8005e1e:	81c2      	strh	r2, [r0, #14]
 8005e20:	6103      	str	r3, [r0, #16]
 8005e22:	6143      	str	r3, [r0, #20]
 8005e24:	6183      	str	r3, [r0, #24]
 8005e26:	2208      	movs	r2, #8
 8005e28:	305c      	adds	r0, #92	; 0x5c
 8005e2a:	f7fe ff8f 	bl	8004d4c <memset>
 8005e2e:	4b05      	ldr	r3, [pc, #20]	; (8005e44 <std+0x38>)
 8005e30:	6224      	str	r4, [r4, #32]
 8005e32:	6263      	str	r3, [r4, #36]	; 0x24
 8005e34:	4b04      	ldr	r3, [pc, #16]	; (8005e48 <std+0x3c>)
 8005e36:	62a3      	str	r3, [r4, #40]	; 0x28
 8005e38:	4b04      	ldr	r3, [pc, #16]	; (8005e4c <std+0x40>)
 8005e3a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005e3c:	4b04      	ldr	r3, [pc, #16]	; (8005e50 <std+0x44>)
 8005e3e:	6323      	str	r3, [r4, #48]	; 0x30
 8005e40:	bd10      	pop	{r4, pc}
 8005e42:	46c0      	nop			; (mov r8, r8)
 8005e44:	08006231 	.word	0x08006231
 8005e48:	08006259 	.word	0x08006259
 8005e4c:	08006291 	.word	0x08006291
 8005e50:	080062bd 	.word	0x080062bd

08005e54 <_cleanup_r>:
 8005e54:	b510      	push	{r4, lr}
 8005e56:	4902      	ldr	r1, [pc, #8]	; (8005e60 <_cleanup_r+0xc>)
 8005e58:	f000 f8ba 	bl	8005fd0 <_fwalk_reent>
 8005e5c:	bd10      	pop	{r4, pc}
 8005e5e:	46c0      	nop			; (mov r8, r8)
 8005e60:	08005d8d 	.word	0x08005d8d

08005e64 <__sfmoreglue>:
 8005e64:	b570      	push	{r4, r5, r6, lr}
 8005e66:	2568      	movs	r5, #104	; 0x68
 8005e68:	1e4a      	subs	r2, r1, #1
 8005e6a:	4355      	muls	r5, r2
 8005e6c:	000e      	movs	r6, r1
 8005e6e:	0029      	movs	r1, r5
 8005e70:	3174      	adds	r1, #116	; 0x74
 8005e72:	f7fe ffdf 	bl	8004e34 <_malloc_r>
 8005e76:	1e04      	subs	r4, r0, #0
 8005e78:	d008      	beq.n	8005e8c <__sfmoreglue+0x28>
 8005e7a:	2100      	movs	r1, #0
 8005e7c:	002a      	movs	r2, r5
 8005e7e:	6001      	str	r1, [r0, #0]
 8005e80:	6046      	str	r6, [r0, #4]
 8005e82:	300c      	adds	r0, #12
 8005e84:	60a0      	str	r0, [r4, #8]
 8005e86:	3268      	adds	r2, #104	; 0x68
 8005e88:	f7fe ff60 	bl	8004d4c <memset>
 8005e8c:	0020      	movs	r0, r4
 8005e8e:	bd70      	pop	{r4, r5, r6, pc}

08005e90 <__sfp_lock_acquire>:
 8005e90:	b510      	push	{r4, lr}
 8005e92:	4802      	ldr	r0, [pc, #8]	; (8005e9c <__sfp_lock_acquire+0xc>)
 8005e94:	f000 f8bd 	bl	8006012 <__retarget_lock_acquire_recursive>
 8005e98:	bd10      	pop	{r4, pc}
 8005e9a:	46c0      	nop			; (mov r8, r8)
 8005e9c:	2000040d 	.word	0x2000040d

08005ea0 <__sfp_lock_release>:
 8005ea0:	b510      	push	{r4, lr}
 8005ea2:	4802      	ldr	r0, [pc, #8]	; (8005eac <__sfp_lock_release+0xc>)
 8005ea4:	f000 f8b6 	bl	8006014 <__retarget_lock_release_recursive>
 8005ea8:	bd10      	pop	{r4, pc}
 8005eaa:	46c0      	nop			; (mov r8, r8)
 8005eac:	2000040d 	.word	0x2000040d

08005eb0 <__sinit_lock_acquire>:
 8005eb0:	b510      	push	{r4, lr}
 8005eb2:	4802      	ldr	r0, [pc, #8]	; (8005ebc <__sinit_lock_acquire+0xc>)
 8005eb4:	f000 f8ad 	bl	8006012 <__retarget_lock_acquire_recursive>
 8005eb8:	bd10      	pop	{r4, pc}
 8005eba:	46c0      	nop			; (mov r8, r8)
 8005ebc:	2000040e 	.word	0x2000040e

08005ec0 <__sinit_lock_release>:
 8005ec0:	b510      	push	{r4, lr}
 8005ec2:	4802      	ldr	r0, [pc, #8]	; (8005ecc <__sinit_lock_release+0xc>)
 8005ec4:	f000 f8a6 	bl	8006014 <__retarget_lock_release_recursive>
 8005ec8:	bd10      	pop	{r4, pc}
 8005eca:	46c0      	nop			; (mov r8, r8)
 8005ecc:	2000040e 	.word	0x2000040e

08005ed0 <__sinit>:
 8005ed0:	b513      	push	{r0, r1, r4, lr}
 8005ed2:	0004      	movs	r4, r0
 8005ed4:	f7ff ffec 	bl	8005eb0 <__sinit_lock_acquire>
 8005ed8:	69a3      	ldr	r3, [r4, #24]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d002      	beq.n	8005ee4 <__sinit+0x14>
 8005ede:	f7ff ffef 	bl	8005ec0 <__sinit_lock_release>
 8005ee2:	bd13      	pop	{r0, r1, r4, pc}
 8005ee4:	64a3      	str	r3, [r4, #72]	; 0x48
 8005ee6:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005ee8:	6523      	str	r3, [r4, #80]	; 0x50
 8005eea:	4b13      	ldr	r3, [pc, #76]	; (8005f38 <__sinit+0x68>)
 8005eec:	4a13      	ldr	r2, [pc, #76]	; (8005f3c <__sinit+0x6c>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	62a2      	str	r2, [r4, #40]	; 0x28
 8005ef2:	9301      	str	r3, [sp, #4]
 8005ef4:	42a3      	cmp	r3, r4
 8005ef6:	d101      	bne.n	8005efc <__sinit+0x2c>
 8005ef8:	2301      	movs	r3, #1
 8005efa:	61a3      	str	r3, [r4, #24]
 8005efc:	0020      	movs	r0, r4
 8005efe:	f000 f81f 	bl	8005f40 <__sfp>
 8005f02:	6060      	str	r0, [r4, #4]
 8005f04:	0020      	movs	r0, r4
 8005f06:	f000 f81b 	bl	8005f40 <__sfp>
 8005f0a:	60a0      	str	r0, [r4, #8]
 8005f0c:	0020      	movs	r0, r4
 8005f0e:	f000 f817 	bl	8005f40 <__sfp>
 8005f12:	2200      	movs	r2, #0
 8005f14:	2104      	movs	r1, #4
 8005f16:	60e0      	str	r0, [r4, #12]
 8005f18:	6860      	ldr	r0, [r4, #4]
 8005f1a:	f7ff ff77 	bl	8005e0c <std>
 8005f1e:	2201      	movs	r2, #1
 8005f20:	2109      	movs	r1, #9
 8005f22:	68a0      	ldr	r0, [r4, #8]
 8005f24:	f7ff ff72 	bl	8005e0c <std>
 8005f28:	2202      	movs	r2, #2
 8005f2a:	2112      	movs	r1, #18
 8005f2c:	68e0      	ldr	r0, [r4, #12]
 8005f2e:	f7ff ff6d 	bl	8005e0c <std>
 8005f32:	2301      	movs	r3, #1
 8005f34:	61a3      	str	r3, [r4, #24]
 8005f36:	e7d2      	b.n	8005ede <__sinit+0xe>
 8005f38:	080064a8 	.word	0x080064a8
 8005f3c:	08005e55 	.word	0x08005e55

08005f40 <__sfp>:
 8005f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f42:	0007      	movs	r7, r0
 8005f44:	f7ff ffa4 	bl	8005e90 <__sfp_lock_acquire>
 8005f48:	4b1f      	ldr	r3, [pc, #124]	; (8005fc8 <__sfp+0x88>)
 8005f4a:	681e      	ldr	r6, [r3, #0]
 8005f4c:	69b3      	ldr	r3, [r6, #24]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d102      	bne.n	8005f58 <__sfp+0x18>
 8005f52:	0030      	movs	r0, r6
 8005f54:	f7ff ffbc 	bl	8005ed0 <__sinit>
 8005f58:	3648      	adds	r6, #72	; 0x48
 8005f5a:	68b4      	ldr	r4, [r6, #8]
 8005f5c:	6873      	ldr	r3, [r6, #4]
 8005f5e:	3b01      	subs	r3, #1
 8005f60:	d504      	bpl.n	8005f6c <__sfp+0x2c>
 8005f62:	6833      	ldr	r3, [r6, #0]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d022      	beq.n	8005fae <__sfp+0x6e>
 8005f68:	6836      	ldr	r6, [r6, #0]
 8005f6a:	e7f6      	b.n	8005f5a <__sfp+0x1a>
 8005f6c:	220c      	movs	r2, #12
 8005f6e:	5ea5      	ldrsh	r5, [r4, r2]
 8005f70:	2d00      	cmp	r5, #0
 8005f72:	d11a      	bne.n	8005faa <__sfp+0x6a>
 8005f74:	0020      	movs	r0, r4
 8005f76:	4b15      	ldr	r3, [pc, #84]	; (8005fcc <__sfp+0x8c>)
 8005f78:	3058      	adds	r0, #88	; 0x58
 8005f7a:	60e3      	str	r3, [r4, #12]
 8005f7c:	6665      	str	r5, [r4, #100]	; 0x64
 8005f7e:	f000 f847 	bl	8006010 <__retarget_lock_init_recursive>
 8005f82:	f7ff ff8d 	bl	8005ea0 <__sfp_lock_release>
 8005f86:	0020      	movs	r0, r4
 8005f88:	2208      	movs	r2, #8
 8005f8a:	0029      	movs	r1, r5
 8005f8c:	6025      	str	r5, [r4, #0]
 8005f8e:	60a5      	str	r5, [r4, #8]
 8005f90:	6065      	str	r5, [r4, #4]
 8005f92:	6125      	str	r5, [r4, #16]
 8005f94:	6165      	str	r5, [r4, #20]
 8005f96:	61a5      	str	r5, [r4, #24]
 8005f98:	305c      	adds	r0, #92	; 0x5c
 8005f9a:	f7fe fed7 	bl	8004d4c <memset>
 8005f9e:	6365      	str	r5, [r4, #52]	; 0x34
 8005fa0:	63a5      	str	r5, [r4, #56]	; 0x38
 8005fa2:	64a5      	str	r5, [r4, #72]	; 0x48
 8005fa4:	64e5      	str	r5, [r4, #76]	; 0x4c
 8005fa6:	0020      	movs	r0, r4
 8005fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005faa:	3468      	adds	r4, #104	; 0x68
 8005fac:	e7d7      	b.n	8005f5e <__sfp+0x1e>
 8005fae:	2104      	movs	r1, #4
 8005fb0:	0038      	movs	r0, r7
 8005fb2:	f7ff ff57 	bl	8005e64 <__sfmoreglue>
 8005fb6:	1e04      	subs	r4, r0, #0
 8005fb8:	6030      	str	r0, [r6, #0]
 8005fba:	d1d5      	bne.n	8005f68 <__sfp+0x28>
 8005fbc:	f7ff ff70 	bl	8005ea0 <__sfp_lock_release>
 8005fc0:	230c      	movs	r3, #12
 8005fc2:	603b      	str	r3, [r7, #0]
 8005fc4:	e7ef      	b.n	8005fa6 <__sfp+0x66>
 8005fc6:	46c0      	nop			; (mov r8, r8)
 8005fc8:	080064a8 	.word	0x080064a8
 8005fcc:	ffff0001 	.word	0xffff0001

08005fd0 <_fwalk_reent>:
 8005fd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005fd2:	0004      	movs	r4, r0
 8005fd4:	0006      	movs	r6, r0
 8005fd6:	2700      	movs	r7, #0
 8005fd8:	9101      	str	r1, [sp, #4]
 8005fda:	3448      	adds	r4, #72	; 0x48
 8005fdc:	6863      	ldr	r3, [r4, #4]
 8005fde:	68a5      	ldr	r5, [r4, #8]
 8005fe0:	9300      	str	r3, [sp, #0]
 8005fe2:	9b00      	ldr	r3, [sp, #0]
 8005fe4:	3b01      	subs	r3, #1
 8005fe6:	9300      	str	r3, [sp, #0]
 8005fe8:	d504      	bpl.n	8005ff4 <_fwalk_reent+0x24>
 8005fea:	6824      	ldr	r4, [r4, #0]
 8005fec:	2c00      	cmp	r4, #0
 8005fee:	d1f5      	bne.n	8005fdc <_fwalk_reent+0xc>
 8005ff0:	0038      	movs	r0, r7
 8005ff2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005ff4:	89ab      	ldrh	r3, [r5, #12]
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d908      	bls.n	800600c <_fwalk_reent+0x3c>
 8005ffa:	220e      	movs	r2, #14
 8005ffc:	5eab      	ldrsh	r3, [r5, r2]
 8005ffe:	3301      	adds	r3, #1
 8006000:	d004      	beq.n	800600c <_fwalk_reent+0x3c>
 8006002:	0029      	movs	r1, r5
 8006004:	0030      	movs	r0, r6
 8006006:	9b01      	ldr	r3, [sp, #4]
 8006008:	4798      	blx	r3
 800600a:	4307      	orrs	r7, r0
 800600c:	3568      	adds	r5, #104	; 0x68
 800600e:	e7e8      	b.n	8005fe2 <_fwalk_reent+0x12>

08006010 <__retarget_lock_init_recursive>:
 8006010:	4770      	bx	lr

08006012 <__retarget_lock_acquire_recursive>:
 8006012:	4770      	bx	lr

08006014 <__retarget_lock_release_recursive>:
 8006014:	4770      	bx	lr
	...

08006018 <__swhatbuf_r>:
 8006018:	b570      	push	{r4, r5, r6, lr}
 800601a:	000e      	movs	r6, r1
 800601c:	001d      	movs	r5, r3
 800601e:	230e      	movs	r3, #14
 8006020:	5ec9      	ldrsh	r1, [r1, r3]
 8006022:	0014      	movs	r4, r2
 8006024:	b096      	sub	sp, #88	; 0x58
 8006026:	2900      	cmp	r1, #0
 8006028:	da08      	bge.n	800603c <__swhatbuf_r+0x24>
 800602a:	220c      	movs	r2, #12
 800602c:	5eb3      	ldrsh	r3, [r6, r2]
 800602e:	2200      	movs	r2, #0
 8006030:	602a      	str	r2, [r5, #0]
 8006032:	061b      	lsls	r3, r3, #24
 8006034:	d411      	bmi.n	800605a <__swhatbuf_r+0x42>
 8006036:	2380      	movs	r3, #128	; 0x80
 8006038:	00db      	lsls	r3, r3, #3
 800603a:	e00f      	b.n	800605c <__swhatbuf_r+0x44>
 800603c:	466a      	mov	r2, sp
 800603e:	f000 f969 	bl	8006314 <_fstat_r>
 8006042:	2800      	cmp	r0, #0
 8006044:	dbf1      	blt.n	800602a <__swhatbuf_r+0x12>
 8006046:	23f0      	movs	r3, #240	; 0xf0
 8006048:	9901      	ldr	r1, [sp, #4]
 800604a:	021b      	lsls	r3, r3, #8
 800604c:	4019      	ands	r1, r3
 800604e:	4b05      	ldr	r3, [pc, #20]	; (8006064 <__swhatbuf_r+0x4c>)
 8006050:	18c9      	adds	r1, r1, r3
 8006052:	424b      	negs	r3, r1
 8006054:	4159      	adcs	r1, r3
 8006056:	6029      	str	r1, [r5, #0]
 8006058:	e7ed      	b.n	8006036 <__swhatbuf_r+0x1e>
 800605a:	2340      	movs	r3, #64	; 0x40
 800605c:	2000      	movs	r0, #0
 800605e:	6023      	str	r3, [r4, #0]
 8006060:	b016      	add	sp, #88	; 0x58
 8006062:	bd70      	pop	{r4, r5, r6, pc}
 8006064:	ffffe000 	.word	0xffffe000

08006068 <__smakebuf_r>:
 8006068:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800606a:	2602      	movs	r6, #2
 800606c:	898b      	ldrh	r3, [r1, #12]
 800606e:	0005      	movs	r5, r0
 8006070:	000c      	movs	r4, r1
 8006072:	4233      	tst	r3, r6
 8006074:	d006      	beq.n	8006084 <__smakebuf_r+0x1c>
 8006076:	0023      	movs	r3, r4
 8006078:	3347      	adds	r3, #71	; 0x47
 800607a:	6023      	str	r3, [r4, #0]
 800607c:	6123      	str	r3, [r4, #16]
 800607e:	2301      	movs	r3, #1
 8006080:	6163      	str	r3, [r4, #20]
 8006082:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8006084:	466a      	mov	r2, sp
 8006086:	ab01      	add	r3, sp, #4
 8006088:	f7ff ffc6 	bl	8006018 <__swhatbuf_r>
 800608c:	9900      	ldr	r1, [sp, #0]
 800608e:	0007      	movs	r7, r0
 8006090:	0028      	movs	r0, r5
 8006092:	f7fe fecf 	bl	8004e34 <_malloc_r>
 8006096:	2800      	cmp	r0, #0
 8006098:	d108      	bne.n	80060ac <__smakebuf_r+0x44>
 800609a:	220c      	movs	r2, #12
 800609c:	5ea3      	ldrsh	r3, [r4, r2]
 800609e:	059a      	lsls	r2, r3, #22
 80060a0:	d4ef      	bmi.n	8006082 <__smakebuf_r+0x1a>
 80060a2:	2203      	movs	r2, #3
 80060a4:	4393      	bics	r3, r2
 80060a6:	431e      	orrs	r6, r3
 80060a8:	81a6      	strh	r6, [r4, #12]
 80060aa:	e7e4      	b.n	8006076 <__smakebuf_r+0xe>
 80060ac:	4b0f      	ldr	r3, [pc, #60]	; (80060ec <__smakebuf_r+0x84>)
 80060ae:	62ab      	str	r3, [r5, #40]	; 0x28
 80060b0:	2380      	movs	r3, #128	; 0x80
 80060b2:	89a2      	ldrh	r2, [r4, #12]
 80060b4:	6020      	str	r0, [r4, #0]
 80060b6:	4313      	orrs	r3, r2
 80060b8:	81a3      	strh	r3, [r4, #12]
 80060ba:	9b00      	ldr	r3, [sp, #0]
 80060bc:	6120      	str	r0, [r4, #16]
 80060be:	6163      	str	r3, [r4, #20]
 80060c0:	9b01      	ldr	r3, [sp, #4]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d00d      	beq.n	80060e2 <__smakebuf_r+0x7a>
 80060c6:	0028      	movs	r0, r5
 80060c8:	230e      	movs	r3, #14
 80060ca:	5ee1      	ldrsh	r1, [r4, r3]
 80060cc:	f000 f934 	bl	8006338 <_isatty_r>
 80060d0:	2800      	cmp	r0, #0
 80060d2:	d006      	beq.n	80060e2 <__smakebuf_r+0x7a>
 80060d4:	2203      	movs	r2, #3
 80060d6:	89a3      	ldrh	r3, [r4, #12]
 80060d8:	4393      	bics	r3, r2
 80060da:	001a      	movs	r2, r3
 80060dc:	2301      	movs	r3, #1
 80060de:	4313      	orrs	r3, r2
 80060e0:	81a3      	strh	r3, [r4, #12]
 80060e2:	89a0      	ldrh	r0, [r4, #12]
 80060e4:	4307      	orrs	r7, r0
 80060e6:	81a7      	strh	r7, [r4, #12]
 80060e8:	e7cb      	b.n	8006082 <__smakebuf_r+0x1a>
 80060ea:	46c0      	nop			; (mov r8, r8)
 80060ec:	08005e55 	.word	0x08005e55

080060f0 <memchr>:
 80060f0:	b2c9      	uxtb	r1, r1
 80060f2:	1882      	adds	r2, r0, r2
 80060f4:	4290      	cmp	r0, r2
 80060f6:	d101      	bne.n	80060fc <memchr+0xc>
 80060f8:	2000      	movs	r0, #0
 80060fa:	4770      	bx	lr
 80060fc:	7803      	ldrb	r3, [r0, #0]
 80060fe:	428b      	cmp	r3, r1
 8006100:	d0fb      	beq.n	80060fa <memchr+0xa>
 8006102:	3001      	adds	r0, #1
 8006104:	e7f6      	b.n	80060f4 <memchr+0x4>

08006106 <memcpy>:
 8006106:	2300      	movs	r3, #0
 8006108:	b510      	push	{r4, lr}
 800610a:	429a      	cmp	r2, r3
 800610c:	d100      	bne.n	8006110 <memcpy+0xa>
 800610e:	bd10      	pop	{r4, pc}
 8006110:	5ccc      	ldrb	r4, [r1, r3]
 8006112:	54c4      	strb	r4, [r0, r3]
 8006114:	3301      	adds	r3, #1
 8006116:	e7f8      	b.n	800610a <memcpy+0x4>

08006118 <memmove>:
 8006118:	b510      	push	{r4, lr}
 800611a:	4288      	cmp	r0, r1
 800611c:	d902      	bls.n	8006124 <memmove+0xc>
 800611e:	188b      	adds	r3, r1, r2
 8006120:	4298      	cmp	r0, r3
 8006122:	d303      	bcc.n	800612c <memmove+0x14>
 8006124:	2300      	movs	r3, #0
 8006126:	e007      	b.n	8006138 <memmove+0x20>
 8006128:	5c8b      	ldrb	r3, [r1, r2]
 800612a:	5483      	strb	r3, [r0, r2]
 800612c:	3a01      	subs	r2, #1
 800612e:	d2fb      	bcs.n	8006128 <memmove+0x10>
 8006130:	bd10      	pop	{r4, pc}
 8006132:	5ccc      	ldrb	r4, [r1, r3]
 8006134:	54c4      	strb	r4, [r0, r3]
 8006136:	3301      	adds	r3, #1
 8006138:	429a      	cmp	r2, r3
 800613a:	d1fa      	bne.n	8006132 <memmove+0x1a>
 800613c:	e7f8      	b.n	8006130 <memmove+0x18>

0800613e <_realloc_r>:
 800613e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006140:	0007      	movs	r7, r0
 8006142:	000e      	movs	r6, r1
 8006144:	0014      	movs	r4, r2
 8006146:	2900      	cmp	r1, #0
 8006148:	d105      	bne.n	8006156 <_realloc_r+0x18>
 800614a:	0011      	movs	r1, r2
 800614c:	f7fe fe72 	bl	8004e34 <_malloc_r>
 8006150:	0005      	movs	r5, r0
 8006152:	0028      	movs	r0, r5
 8006154:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006156:	2a00      	cmp	r2, #0
 8006158:	d103      	bne.n	8006162 <_realloc_r+0x24>
 800615a:	f7fe fdff 	bl	8004d5c <_free_r>
 800615e:	0025      	movs	r5, r4
 8006160:	e7f7      	b.n	8006152 <_realloc_r+0x14>
 8006162:	f000 f90f 	bl	8006384 <_malloc_usable_size_r>
 8006166:	9001      	str	r0, [sp, #4]
 8006168:	4284      	cmp	r4, r0
 800616a:	d803      	bhi.n	8006174 <_realloc_r+0x36>
 800616c:	0035      	movs	r5, r6
 800616e:	0843      	lsrs	r3, r0, #1
 8006170:	42a3      	cmp	r3, r4
 8006172:	d3ee      	bcc.n	8006152 <_realloc_r+0x14>
 8006174:	0021      	movs	r1, r4
 8006176:	0038      	movs	r0, r7
 8006178:	f7fe fe5c 	bl	8004e34 <_malloc_r>
 800617c:	1e05      	subs	r5, r0, #0
 800617e:	d0e8      	beq.n	8006152 <_realloc_r+0x14>
 8006180:	9b01      	ldr	r3, [sp, #4]
 8006182:	0022      	movs	r2, r4
 8006184:	429c      	cmp	r4, r3
 8006186:	d900      	bls.n	800618a <_realloc_r+0x4c>
 8006188:	001a      	movs	r2, r3
 800618a:	0031      	movs	r1, r6
 800618c:	0028      	movs	r0, r5
 800618e:	f7ff ffba 	bl	8006106 <memcpy>
 8006192:	0031      	movs	r1, r6
 8006194:	0038      	movs	r0, r7
 8006196:	f7fe fde1 	bl	8004d5c <_free_r>
 800619a:	e7da      	b.n	8006152 <_realloc_r+0x14>

0800619c <_raise_r>:
 800619c:	b570      	push	{r4, r5, r6, lr}
 800619e:	0004      	movs	r4, r0
 80061a0:	000d      	movs	r5, r1
 80061a2:	291f      	cmp	r1, #31
 80061a4:	d904      	bls.n	80061b0 <_raise_r+0x14>
 80061a6:	2316      	movs	r3, #22
 80061a8:	6003      	str	r3, [r0, #0]
 80061aa:	2001      	movs	r0, #1
 80061ac:	4240      	negs	r0, r0
 80061ae:	bd70      	pop	{r4, r5, r6, pc}
 80061b0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d004      	beq.n	80061c0 <_raise_r+0x24>
 80061b6:	008a      	lsls	r2, r1, #2
 80061b8:	189b      	adds	r3, r3, r2
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	2a00      	cmp	r2, #0
 80061be:	d108      	bne.n	80061d2 <_raise_r+0x36>
 80061c0:	0020      	movs	r0, r4
 80061c2:	f000 f831 	bl	8006228 <_getpid_r>
 80061c6:	002a      	movs	r2, r5
 80061c8:	0001      	movs	r1, r0
 80061ca:	0020      	movs	r0, r4
 80061cc:	f000 f81a 	bl	8006204 <_kill_r>
 80061d0:	e7ed      	b.n	80061ae <_raise_r+0x12>
 80061d2:	2000      	movs	r0, #0
 80061d4:	2a01      	cmp	r2, #1
 80061d6:	d0ea      	beq.n	80061ae <_raise_r+0x12>
 80061d8:	1c51      	adds	r1, r2, #1
 80061da:	d103      	bne.n	80061e4 <_raise_r+0x48>
 80061dc:	2316      	movs	r3, #22
 80061de:	3001      	adds	r0, #1
 80061e0:	6023      	str	r3, [r4, #0]
 80061e2:	e7e4      	b.n	80061ae <_raise_r+0x12>
 80061e4:	2400      	movs	r4, #0
 80061e6:	0028      	movs	r0, r5
 80061e8:	601c      	str	r4, [r3, #0]
 80061ea:	4790      	blx	r2
 80061ec:	0020      	movs	r0, r4
 80061ee:	e7de      	b.n	80061ae <_raise_r+0x12>

080061f0 <raise>:
 80061f0:	b510      	push	{r4, lr}
 80061f2:	4b03      	ldr	r3, [pc, #12]	; (8006200 <raise+0x10>)
 80061f4:	0001      	movs	r1, r0
 80061f6:	6818      	ldr	r0, [r3, #0]
 80061f8:	f7ff ffd0 	bl	800619c <_raise_r>
 80061fc:	bd10      	pop	{r4, pc}
 80061fe:	46c0      	nop			; (mov r8, r8)
 8006200:	20000014 	.word	0x20000014

08006204 <_kill_r>:
 8006204:	2300      	movs	r3, #0
 8006206:	b570      	push	{r4, r5, r6, lr}
 8006208:	4d06      	ldr	r5, [pc, #24]	; (8006224 <_kill_r+0x20>)
 800620a:	0004      	movs	r4, r0
 800620c:	0008      	movs	r0, r1
 800620e:	0011      	movs	r1, r2
 8006210:	602b      	str	r3, [r5, #0]
 8006212:	f7fa fe7d 	bl	8000f10 <_kill>
 8006216:	1c43      	adds	r3, r0, #1
 8006218:	d103      	bne.n	8006222 <_kill_r+0x1e>
 800621a:	682b      	ldr	r3, [r5, #0]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d000      	beq.n	8006222 <_kill_r+0x1e>
 8006220:	6023      	str	r3, [r4, #0]
 8006222:	bd70      	pop	{r4, r5, r6, pc}
 8006224:	20000408 	.word	0x20000408

08006228 <_getpid_r>:
 8006228:	b510      	push	{r4, lr}
 800622a:	f7fa fe6b 	bl	8000f04 <_getpid>
 800622e:	bd10      	pop	{r4, pc}

08006230 <__sread>:
 8006230:	b570      	push	{r4, r5, r6, lr}
 8006232:	000c      	movs	r4, r1
 8006234:	250e      	movs	r5, #14
 8006236:	5f49      	ldrsh	r1, [r1, r5]
 8006238:	f000 f8ac 	bl	8006394 <_read_r>
 800623c:	2800      	cmp	r0, #0
 800623e:	db03      	blt.n	8006248 <__sread+0x18>
 8006240:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006242:	181b      	adds	r3, r3, r0
 8006244:	6563      	str	r3, [r4, #84]	; 0x54
 8006246:	bd70      	pop	{r4, r5, r6, pc}
 8006248:	89a3      	ldrh	r3, [r4, #12]
 800624a:	4a02      	ldr	r2, [pc, #8]	; (8006254 <__sread+0x24>)
 800624c:	4013      	ands	r3, r2
 800624e:	81a3      	strh	r3, [r4, #12]
 8006250:	e7f9      	b.n	8006246 <__sread+0x16>
 8006252:	46c0      	nop			; (mov r8, r8)
 8006254:	ffffefff 	.word	0xffffefff

08006258 <__swrite>:
 8006258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800625a:	001f      	movs	r7, r3
 800625c:	898b      	ldrh	r3, [r1, #12]
 800625e:	0005      	movs	r5, r0
 8006260:	000c      	movs	r4, r1
 8006262:	0016      	movs	r6, r2
 8006264:	05db      	lsls	r3, r3, #23
 8006266:	d505      	bpl.n	8006274 <__swrite+0x1c>
 8006268:	230e      	movs	r3, #14
 800626a:	5ec9      	ldrsh	r1, [r1, r3]
 800626c:	2200      	movs	r2, #0
 800626e:	2302      	movs	r3, #2
 8006270:	f000 f874 	bl	800635c <_lseek_r>
 8006274:	89a3      	ldrh	r3, [r4, #12]
 8006276:	4a05      	ldr	r2, [pc, #20]	; (800628c <__swrite+0x34>)
 8006278:	0028      	movs	r0, r5
 800627a:	4013      	ands	r3, r2
 800627c:	81a3      	strh	r3, [r4, #12]
 800627e:	0032      	movs	r2, r6
 8006280:	230e      	movs	r3, #14
 8006282:	5ee1      	ldrsh	r1, [r4, r3]
 8006284:	003b      	movs	r3, r7
 8006286:	f000 f81f 	bl	80062c8 <_write_r>
 800628a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800628c:	ffffefff 	.word	0xffffefff

08006290 <__sseek>:
 8006290:	b570      	push	{r4, r5, r6, lr}
 8006292:	000c      	movs	r4, r1
 8006294:	250e      	movs	r5, #14
 8006296:	5f49      	ldrsh	r1, [r1, r5]
 8006298:	f000 f860 	bl	800635c <_lseek_r>
 800629c:	89a3      	ldrh	r3, [r4, #12]
 800629e:	1c42      	adds	r2, r0, #1
 80062a0:	d103      	bne.n	80062aa <__sseek+0x1a>
 80062a2:	4a05      	ldr	r2, [pc, #20]	; (80062b8 <__sseek+0x28>)
 80062a4:	4013      	ands	r3, r2
 80062a6:	81a3      	strh	r3, [r4, #12]
 80062a8:	bd70      	pop	{r4, r5, r6, pc}
 80062aa:	2280      	movs	r2, #128	; 0x80
 80062ac:	0152      	lsls	r2, r2, #5
 80062ae:	4313      	orrs	r3, r2
 80062b0:	81a3      	strh	r3, [r4, #12]
 80062b2:	6560      	str	r0, [r4, #84]	; 0x54
 80062b4:	e7f8      	b.n	80062a8 <__sseek+0x18>
 80062b6:	46c0      	nop			; (mov r8, r8)
 80062b8:	ffffefff 	.word	0xffffefff

080062bc <__sclose>:
 80062bc:	b510      	push	{r4, lr}
 80062be:	230e      	movs	r3, #14
 80062c0:	5ec9      	ldrsh	r1, [r1, r3]
 80062c2:	f000 f815 	bl	80062f0 <_close_r>
 80062c6:	bd10      	pop	{r4, pc}

080062c8 <_write_r>:
 80062c8:	b570      	push	{r4, r5, r6, lr}
 80062ca:	0004      	movs	r4, r0
 80062cc:	0008      	movs	r0, r1
 80062ce:	0011      	movs	r1, r2
 80062d0:	001a      	movs	r2, r3
 80062d2:	2300      	movs	r3, #0
 80062d4:	4d05      	ldr	r5, [pc, #20]	; (80062ec <_write_r+0x24>)
 80062d6:	602b      	str	r3, [r5, #0]
 80062d8:	f7fa fe53 	bl	8000f82 <_write>
 80062dc:	1c43      	adds	r3, r0, #1
 80062de:	d103      	bne.n	80062e8 <_write_r+0x20>
 80062e0:	682b      	ldr	r3, [r5, #0]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d000      	beq.n	80062e8 <_write_r+0x20>
 80062e6:	6023      	str	r3, [r4, #0]
 80062e8:	bd70      	pop	{r4, r5, r6, pc}
 80062ea:	46c0      	nop			; (mov r8, r8)
 80062ec:	20000408 	.word	0x20000408

080062f0 <_close_r>:
 80062f0:	2300      	movs	r3, #0
 80062f2:	b570      	push	{r4, r5, r6, lr}
 80062f4:	4d06      	ldr	r5, [pc, #24]	; (8006310 <_close_r+0x20>)
 80062f6:	0004      	movs	r4, r0
 80062f8:	0008      	movs	r0, r1
 80062fa:	602b      	str	r3, [r5, #0]
 80062fc:	f7fa fe5d 	bl	8000fba <_close>
 8006300:	1c43      	adds	r3, r0, #1
 8006302:	d103      	bne.n	800630c <_close_r+0x1c>
 8006304:	682b      	ldr	r3, [r5, #0]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d000      	beq.n	800630c <_close_r+0x1c>
 800630a:	6023      	str	r3, [r4, #0]
 800630c:	bd70      	pop	{r4, r5, r6, pc}
 800630e:	46c0      	nop			; (mov r8, r8)
 8006310:	20000408 	.word	0x20000408

08006314 <_fstat_r>:
 8006314:	2300      	movs	r3, #0
 8006316:	b570      	push	{r4, r5, r6, lr}
 8006318:	4d06      	ldr	r5, [pc, #24]	; (8006334 <_fstat_r+0x20>)
 800631a:	0004      	movs	r4, r0
 800631c:	0008      	movs	r0, r1
 800631e:	0011      	movs	r1, r2
 8006320:	602b      	str	r3, [r5, #0]
 8006322:	f7fa fe54 	bl	8000fce <_fstat>
 8006326:	1c43      	adds	r3, r0, #1
 8006328:	d103      	bne.n	8006332 <_fstat_r+0x1e>
 800632a:	682b      	ldr	r3, [r5, #0]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d000      	beq.n	8006332 <_fstat_r+0x1e>
 8006330:	6023      	str	r3, [r4, #0]
 8006332:	bd70      	pop	{r4, r5, r6, pc}
 8006334:	20000408 	.word	0x20000408

08006338 <_isatty_r>:
 8006338:	2300      	movs	r3, #0
 800633a:	b570      	push	{r4, r5, r6, lr}
 800633c:	4d06      	ldr	r5, [pc, #24]	; (8006358 <_isatty_r+0x20>)
 800633e:	0004      	movs	r4, r0
 8006340:	0008      	movs	r0, r1
 8006342:	602b      	str	r3, [r5, #0]
 8006344:	f7fa fe51 	bl	8000fea <_isatty>
 8006348:	1c43      	adds	r3, r0, #1
 800634a:	d103      	bne.n	8006354 <_isatty_r+0x1c>
 800634c:	682b      	ldr	r3, [r5, #0]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d000      	beq.n	8006354 <_isatty_r+0x1c>
 8006352:	6023      	str	r3, [r4, #0]
 8006354:	bd70      	pop	{r4, r5, r6, pc}
 8006356:	46c0      	nop			; (mov r8, r8)
 8006358:	20000408 	.word	0x20000408

0800635c <_lseek_r>:
 800635c:	b570      	push	{r4, r5, r6, lr}
 800635e:	0004      	movs	r4, r0
 8006360:	0008      	movs	r0, r1
 8006362:	0011      	movs	r1, r2
 8006364:	001a      	movs	r2, r3
 8006366:	2300      	movs	r3, #0
 8006368:	4d05      	ldr	r5, [pc, #20]	; (8006380 <_lseek_r+0x24>)
 800636a:	602b      	str	r3, [r5, #0]
 800636c:	f7fa fe46 	bl	8000ffc <_lseek>
 8006370:	1c43      	adds	r3, r0, #1
 8006372:	d103      	bne.n	800637c <_lseek_r+0x20>
 8006374:	682b      	ldr	r3, [r5, #0]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d000      	beq.n	800637c <_lseek_r+0x20>
 800637a:	6023      	str	r3, [r4, #0]
 800637c:	bd70      	pop	{r4, r5, r6, pc}
 800637e:	46c0      	nop			; (mov r8, r8)
 8006380:	20000408 	.word	0x20000408

08006384 <_malloc_usable_size_r>:
 8006384:	1f0b      	subs	r3, r1, #4
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	1f18      	subs	r0, r3, #4
 800638a:	2b00      	cmp	r3, #0
 800638c:	da01      	bge.n	8006392 <_malloc_usable_size_r+0xe>
 800638e:	580b      	ldr	r3, [r1, r0]
 8006390:	18c0      	adds	r0, r0, r3
 8006392:	4770      	bx	lr

08006394 <_read_r>:
 8006394:	b570      	push	{r4, r5, r6, lr}
 8006396:	0004      	movs	r4, r0
 8006398:	0008      	movs	r0, r1
 800639a:	0011      	movs	r1, r2
 800639c:	001a      	movs	r2, r3
 800639e:	2300      	movs	r3, #0
 80063a0:	4d05      	ldr	r5, [pc, #20]	; (80063b8 <_read_r+0x24>)
 80063a2:	602b      	str	r3, [r5, #0]
 80063a4:	f7fa fdd0 	bl	8000f48 <_read>
 80063a8:	1c43      	adds	r3, r0, #1
 80063aa:	d103      	bne.n	80063b4 <_read_r+0x20>
 80063ac:	682b      	ldr	r3, [r5, #0]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d000      	beq.n	80063b4 <_read_r+0x20>
 80063b2:	6023      	str	r3, [r4, #0]
 80063b4:	bd70      	pop	{r4, r5, r6, pc}
 80063b6:	46c0      	nop			; (mov r8, r8)
 80063b8:	20000408 	.word	0x20000408

080063bc <_init>:
 80063bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063be:	46c0      	nop			; (mov r8, r8)
 80063c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063c2:	bc08      	pop	{r3}
 80063c4:	469e      	mov	lr, r3
 80063c6:	4770      	bx	lr

080063c8 <_fini>:
 80063c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ca:	46c0      	nop			; (mov r8, r8)
 80063cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063ce:	bc08      	pop	{r3}
 80063d0:	469e      	mov	lr, r3
 80063d2:	4770      	bx	lr
