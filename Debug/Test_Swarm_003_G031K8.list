
Test_Swarm_003_G031K8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064f8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f4  080065b4  080065b4  000165b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069a8  080069a8  000200d4  2**0
                  CONTENTS
  4 .ARM          00000008  080069a8  080069a8  000169a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080069b0  080069b0  000200d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069b0  080069b0  000169b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080069b4  080069b4  000169b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  20000000  080069b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000300  200000d4  08006a8c  000200d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003d4  08006a8c  000203d4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014b48  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029ae  00000000  00000000  00034c44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d0  00000000  00000000  000375f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010c8  00000000  00000000  000387c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000186ba  00000000  00000000  00039890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000146ad  00000000  00000000  00051f4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b048  00000000  00000000  000665f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010163f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d18  00000000  00000000  00101690  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200000d4 	.word	0x200000d4
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800659c 	.word	0x0800659c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200000d8 	.word	0x200000d8
 8000100:	0800659c 	.word	0x0800659c

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	0008      	movs	r0, r1
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	; (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	; (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8ba 	bl	80005ec <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8b5 	bl	80005ec <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	469b      	mov	fp, r3
 800048a:	d433      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048c:	465a      	mov	r2, fp
 800048e:	4653      	mov	r3, sl
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83a      	bhi.n	8000516 <__udivmoddi4+0xc2>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e078      	b.n	8000598 <__udivmoddi4+0x144>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e075      	b.n	800059e <__udivmoddi4+0x14a>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e028      	b.n	800051e <__udivmoddi4+0xca>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	2320      	movs	r3, #32
 80004f8:	1a9b      	subs	r3, r3, r2
 80004fa:	4652      	mov	r2, sl
 80004fc:	40da      	lsrs	r2, r3
 80004fe:	4641      	mov	r1, r8
 8000500:	0013      	movs	r3, r2
 8000502:	464a      	mov	r2, r9
 8000504:	408a      	lsls	r2, r1
 8000506:	0017      	movs	r7, r2
 8000508:	4642      	mov	r2, r8
 800050a:	431f      	orrs	r7, r3
 800050c:	4653      	mov	r3, sl
 800050e:	4093      	lsls	r3, r2
 8000510:	001e      	movs	r6, r3
 8000512:	42af      	cmp	r7, r5
 8000514:	d9c4      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000516:	2200      	movs	r2, #0
 8000518:	2300      	movs	r3, #0
 800051a:	9200      	str	r2, [sp, #0]
 800051c:	9301      	str	r3, [sp, #4]
 800051e:	4643      	mov	r3, r8
 8000520:	2b00      	cmp	r3, #0
 8000522:	d0d9      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000524:	07fb      	lsls	r3, r7, #31
 8000526:	0872      	lsrs	r2, r6, #1
 8000528:	431a      	orrs	r2, r3
 800052a:	4646      	mov	r6, r8
 800052c:	087b      	lsrs	r3, r7, #1
 800052e:	e00e      	b.n	800054e <__udivmoddi4+0xfa>
 8000530:	42ab      	cmp	r3, r5
 8000532:	d101      	bne.n	8000538 <__udivmoddi4+0xe4>
 8000534:	42a2      	cmp	r2, r4
 8000536:	d80c      	bhi.n	8000552 <__udivmoddi4+0xfe>
 8000538:	1aa4      	subs	r4, r4, r2
 800053a:	419d      	sbcs	r5, r3
 800053c:	2001      	movs	r0, #1
 800053e:	1924      	adds	r4, r4, r4
 8000540:	416d      	adcs	r5, r5
 8000542:	2100      	movs	r1, #0
 8000544:	3e01      	subs	r6, #1
 8000546:	1824      	adds	r4, r4, r0
 8000548:	414d      	adcs	r5, r1
 800054a:	2e00      	cmp	r6, #0
 800054c:	d006      	beq.n	800055c <__udivmoddi4+0x108>
 800054e:	42ab      	cmp	r3, r5
 8000550:	d9ee      	bls.n	8000530 <__udivmoddi4+0xdc>
 8000552:	3e01      	subs	r6, #1
 8000554:	1924      	adds	r4, r4, r4
 8000556:	416d      	adcs	r5, r5
 8000558:	2e00      	cmp	r6, #0
 800055a:	d1f8      	bne.n	800054e <__udivmoddi4+0xfa>
 800055c:	9800      	ldr	r0, [sp, #0]
 800055e:	9901      	ldr	r1, [sp, #4]
 8000560:	465b      	mov	r3, fp
 8000562:	1900      	adds	r0, r0, r4
 8000564:	4169      	adcs	r1, r5
 8000566:	2b00      	cmp	r3, #0
 8000568:	db24      	blt.n	80005b4 <__udivmoddi4+0x160>
 800056a:	002b      	movs	r3, r5
 800056c:	465a      	mov	r2, fp
 800056e:	4644      	mov	r4, r8
 8000570:	40d3      	lsrs	r3, r2
 8000572:	002a      	movs	r2, r5
 8000574:	40e2      	lsrs	r2, r4
 8000576:	001c      	movs	r4, r3
 8000578:	465b      	mov	r3, fp
 800057a:	0015      	movs	r5, r2
 800057c:	2b00      	cmp	r3, #0
 800057e:	db2a      	blt.n	80005d6 <__udivmoddi4+0x182>
 8000580:	0026      	movs	r6, r4
 8000582:	409e      	lsls	r6, r3
 8000584:	0033      	movs	r3, r6
 8000586:	0026      	movs	r6, r4
 8000588:	4647      	mov	r7, r8
 800058a:	40be      	lsls	r6, r7
 800058c:	0032      	movs	r2, r6
 800058e:	1a80      	subs	r0, r0, r2
 8000590:	4199      	sbcs	r1, r3
 8000592:	9000      	str	r0, [sp, #0]
 8000594:	9101      	str	r1, [sp, #4]
 8000596:	e79f      	b.n	80004d8 <__udivmoddi4+0x84>
 8000598:	42a3      	cmp	r3, r4
 800059a:	d8bc      	bhi.n	8000516 <__udivmoddi4+0xc2>
 800059c:	e783      	b.n	80004a6 <__udivmoddi4+0x52>
 800059e:	4642      	mov	r2, r8
 80005a0:	2320      	movs	r3, #32
 80005a2:	2100      	movs	r1, #0
 80005a4:	1a9b      	subs	r3, r3, r2
 80005a6:	2200      	movs	r2, #0
 80005a8:	9100      	str	r1, [sp, #0]
 80005aa:	9201      	str	r2, [sp, #4]
 80005ac:	2201      	movs	r2, #1
 80005ae:	40da      	lsrs	r2, r3
 80005b0:	9201      	str	r2, [sp, #4]
 80005b2:	e786      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	2320      	movs	r3, #32
 80005b8:	1a9b      	subs	r3, r3, r2
 80005ba:	002a      	movs	r2, r5
 80005bc:	4646      	mov	r6, r8
 80005be:	409a      	lsls	r2, r3
 80005c0:	0023      	movs	r3, r4
 80005c2:	40f3      	lsrs	r3, r6
 80005c4:	4644      	mov	r4, r8
 80005c6:	4313      	orrs	r3, r2
 80005c8:	002a      	movs	r2, r5
 80005ca:	40e2      	lsrs	r2, r4
 80005cc:	001c      	movs	r4, r3
 80005ce:	465b      	mov	r3, fp
 80005d0:	0015      	movs	r5, r2
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	dad4      	bge.n	8000580 <__udivmoddi4+0x12c>
 80005d6:	4642      	mov	r2, r8
 80005d8:	002f      	movs	r7, r5
 80005da:	2320      	movs	r3, #32
 80005dc:	0026      	movs	r6, r4
 80005de:	4097      	lsls	r7, r2
 80005e0:	1a9b      	subs	r3, r3, r2
 80005e2:	40de      	lsrs	r6, r3
 80005e4:	003b      	movs	r3, r7
 80005e6:	4333      	orrs	r3, r6
 80005e8:	e7cd      	b.n	8000586 <__udivmoddi4+0x132>
 80005ea:	46c0      	nop			; (mov r8, r8)

080005ec <__clzdi2>:
 80005ec:	b510      	push	{r4, lr}
 80005ee:	2900      	cmp	r1, #0
 80005f0:	d103      	bne.n	80005fa <__clzdi2+0xe>
 80005f2:	f000 f807 	bl	8000604 <__clzsi2>
 80005f6:	3020      	adds	r0, #32
 80005f8:	e002      	b.n	8000600 <__clzdi2+0x14>
 80005fa:	0008      	movs	r0, r1
 80005fc:	f000 f802 	bl	8000604 <__clzsi2>
 8000600:	bd10      	pop	{r4, pc}
 8000602:	46c0      	nop			; (mov r8, r8)

08000604 <__clzsi2>:
 8000604:	211c      	movs	r1, #28
 8000606:	2301      	movs	r3, #1
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0xe>
 800060e:	0c00      	lsrs	r0, r0, #16
 8000610:	3910      	subs	r1, #16
 8000612:	0a1b      	lsrs	r3, r3, #8
 8000614:	4298      	cmp	r0, r3
 8000616:	d301      	bcc.n	800061c <__clzsi2+0x18>
 8000618:	0a00      	lsrs	r0, r0, #8
 800061a:	3908      	subs	r1, #8
 800061c:	091b      	lsrs	r3, r3, #4
 800061e:	4298      	cmp	r0, r3
 8000620:	d301      	bcc.n	8000626 <__clzsi2+0x22>
 8000622:	0900      	lsrs	r0, r0, #4
 8000624:	3904      	subs	r1, #4
 8000626:	a202      	add	r2, pc, #8	; (adr r2, 8000630 <__clzsi2+0x2c>)
 8000628:	5c10      	ldrb	r0, [r2, r0]
 800062a:	1840      	adds	r0, r0, r1
 800062c:	4770      	bx	lr
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	02020304 	.word	0x02020304
 8000634:	01010101 	.word	0x01010101
	...

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000644:	f000 fe18 	bl	8001278 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000648:	f000 f82e 	bl	80006a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064c:	f000 f944 	bl	80008d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000650:	f000 f924 	bl	800089c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000654:	f000 f8d4 	bl	8000800 <MX_USART1_UART_Init>
  MX_RTC_Init();
 8000658:	f000 f872 	bl	8000740 <MX_RTC_Init>
  MX_TIM14_Init();
 800065c:	f000 f8a8 	bl	80007b0 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  __HAL_TIM_CLEAR_IT ( &htim14 , TIM_IT_UPDATE ) ;
 8000660:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <main+0x54>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	2202      	movs	r2, #2
 8000666:	4252      	negs	r2, r2
 8000668:	611a      	str	r2, [r3, #16]
  HAL_UARTEx_ReceiveToIdle_DMA ( SWARM_UART_HANDLER , (uint8_t*) swarm_uart_rx_buff , SWARM_UART_RX_MAX_BUFF_SIZE ) ;
 800066a:	490b      	ldr	r1, [pc, #44]	; (8000698 <main+0x58>)
 800066c:	4b0b      	ldr	r3, [pc, #44]	; (800069c <main+0x5c>)
 800066e:	2264      	movs	r2, #100	; 0x64
 8000670:	0018      	movs	r0, r3
 8000672:	f004 fb57 	bl	8004d24 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT ( &hdma_usart1_rx, DMA_IT_HT ) ; //Disable Half Transfer interrupt.
 8000676:	4b0a      	ldr	r3, [pc, #40]	; (80006a0 <main+0x60>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	681a      	ldr	r2, [r3, #0]
 800067c:	4b08      	ldr	r3, [pc, #32]	; (80006a0 <main+0x60>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	2104      	movs	r1, #4
 8000682:	438a      	bics	r2, r1
 8000684:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_Delay ( 15000 ) ;
 8000686:	4b07      	ldr	r3, [pc, #28]	; (80006a4 <main+0x64>)
 8000688:	0018      	movs	r0, r3
 800068a:	f000 fe7b 	bl	8001384 <HAL_Delay>
  m138_init () ;
 800068e:	f000 f985 	bl	800099c <m138_init>
  while (1)
 8000692:	e7fe      	b.n	8000692 <main+0x52>
 8000694:	2000011c 	.word	0x2000011c
 8000698:	20000258 	.word	0x20000258
 800069c:	20000168 	.word	0x20000168
 80006a0:	200001fc 	.word	0x200001fc
 80006a4:	00003a98 	.word	0x00003a98

080006a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a8:	b590      	push	{r4, r7, lr}
 80006aa:	b093      	sub	sp, #76	; 0x4c
 80006ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ae:	2410      	movs	r4, #16
 80006b0:	193b      	adds	r3, r7, r4
 80006b2:	0018      	movs	r0, r3
 80006b4:	2338      	movs	r3, #56	; 0x38
 80006b6:	001a      	movs	r2, r3
 80006b8:	2100      	movs	r1, #0
 80006ba:	f004 fc37 	bl	8004f2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006be:	003b      	movs	r3, r7
 80006c0:	0018      	movs	r0, r3
 80006c2:	2310      	movs	r3, #16
 80006c4:	001a      	movs	r2, r3
 80006c6:	2100      	movs	r1, #0
 80006c8:	f004 fc30 	bl	8004f2c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006cc:	2380      	movs	r3, #128	; 0x80
 80006ce:	009b      	lsls	r3, r3, #2
 80006d0:	0018      	movs	r0, r3
 80006d2:	f001 fbf9 	bl	8001ec8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80006d6:	193b      	adds	r3, r7, r4
 80006d8:	220a      	movs	r2, #10
 80006da:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006dc:	193b      	adds	r3, r7, r4
 80006de:	2280      	movs	r2, #128	; 0x80
 80006e0:	0052      	lsls	r2, r2, #1
 80006e2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006e4:	0021      	movs	r1, r4
 80006e6:	187b      	adds	r3, r7, r1
 80006e8:	2200      	movs	r2, #0
 80006ea:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ec:	187b      	adds	r3, r7, r1
 80006ee:	2240      	movs	r2, #64	; 0x40
 80006f0:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006f2:	187b      	adds	r3, r7, r1
 80006f4:	2201      	movs	r2, #1
 80006f6:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006f8:	187b      	adds	r3, r7, r1
 80006fa:	2200      	movs	r2, #0
 80006fc:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fe:	187b      	adds	r3, r7, r1
 8000700:	0018      	movs	r0, r3
 8000702:	f001 fc2d 	bl	8001f60 <HAL_RCC_OscConfig>
 8000706:	1e03      	subs	r3, r0, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800070a:	f000 fb4f 	bl	8000dac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070e:	003b      	movs	r3, r7
 8000710:	2207      	movs	r2, #7
 8000712:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000714:	003b      	movs	r3, r7
 8000716:	2200      	movs	r2, #0
 8000718:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071a:	003b      	movs	r3, r7
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000720:	003b      	movs	r3, r7
 8000722:	2200      	movs	r2, #0
 8000724:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000726:	003b      	movs	r3, r7
 8000728:	2100      	movs	r1, #0
 800072a:	0018      	movs	r0, r3
 800072c:	f001 ff32 	bl	8002594 <HAL_RCC_ClockConfig>
 8000730:	1e03      	subs	r3, r0, #0
 8000732:	d001      	beq.n	8000738 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000734:	f000 fb3a 	bl	8000dac <Error_Handler>
  }
}
 8000738:	46c0      	nop			; (mov r8, r8)
 800073a:	46bd      	mov	sp, r7
 800073c:	b013      	add	sp, #76	; 0x4c
 800073e:	bd90      	pop	{r4, r7, pc}

08000740 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000744:	4b18      	ldr	r3, [pc, #96]	; (80007a8 <MX_RTC_Init+0x68>)
 8000746:	4a19      	ldr	r2, [pc, #100]	; (80007ac <MX_RTC_Init+0x6c>)
 8000748:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800074a:	4b17      	ldr	r3, [pc, #92]	; (80007a8 <MX_RTC_Init+0x68>)
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8000750:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <MX_RTC_Init+0x68>)
 8000752:	227f      	movs	r2, #127	; 0x7f
 8000754:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8000756:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <MX_RTC_Init+0x68>)
 8000758:	22ff      	movs	r2, #255	; 0xff
 800075a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800075c:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <MX_RTC_Init+0x68>)
 800075e:	2200      	movs	r2, #0
 8000760:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_RTC_Init+0x68>)
 8000764:	2200      	movs	r2, #0
 8000766:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_RTC_Init+0x68>)
 800076a:	2200      	movs	r2, #0
 800076c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_RTC_Init+0x68>)
 8000770:	2280      	movs	r2, #128	; 0x80
 8000772:	05d2      	lsls	r2, r2, #23
 8000774:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000776:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <MX_RTC_Init+0x68>)
 8000778:	2200      	movs	r2, #0
 800077a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800077c:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <MX_RTC_Init+0x68>)
 800077e:	0018      	movs	r0, r3
 8000780:	f002 fa2c 	bl	8002bdc <HAL_RTC_Init>
 8000784:	1e03      	subs	r3, r0, #0
 8000786:	d001      	beq.n	800078c <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 8000788:	f000 fb10 	bl	8000dac <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 30, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_RTC_Init+0x68>)
 800078e:	2204      	movs	r2, #4
 8000790:	211e      	movs	r1, #30
 8000792:	0018      	movs	r0, r3
 8000794:	f002 fb72 	bl	8002e7c <HAL_RTCEx_SetWakeUpTimer_IT>
 8000798:	1e03      	subs	r3, r0, #0
 800079a:	d001      	beq.n	80007a0 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 800079c:	f000 fb06 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80007a0:	46c0      	nop			; (mov r8, r8)
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	46c0      	nop			; (mov r8, r8)
 80007a8:	200000f0 	.word	0x200000f0
 80007ac:	40002800 	.word	0x40002800

080007b0 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80007b4:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <MX_TIM14_Init+0x40>)
 80007b6:	4a0f      	ldr	r2, [pc, #60]	; (80007f4 <MX_TIM14_Init+0x44>)
 80007b8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 16000-1;
 80007ba:	4b0d      	ldr	r3, [pc, #52]	; (80007f0 <MX_TIM14_Init+0x40>)
 80007bc:	4a0e      	ldr	r2, [pc, #56]	; (80007f8 <MX_TIM14_Init+0x48>)
 80007be:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007c0:	4b0b      	ldr	r3, [pc, #44]	; (80007f0 <MX_TIM14_Init+0x40>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 3000-1;
 80007c6:	4b0a      	ldr	r3, [pc, #40]	; (80007f0 <MX_TIM14_Init+0x40>)
 80007c8:	4a0c      	ldr	r2, [pc, #48]	; (80007fc <MX_TIM14_Init+0x4c>)
 80007ca:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007cc:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <MX_TIM14_Init+0x40>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007d2:	4b07      	ldr	r3, [pc, #28]	; (80007f0 <MX_TIM14_Init+0x40>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80007d8:	4b05      	ldr	r3, [pc, #20]	; (80007f0 <MX_TIM14_Init+0x40>)
 80007da:	0018      	movs	r0, r3
 80007dc:	f002 fc0e 	bl	8002ffc <HAL_TIM_Base_Init>
 80007e0:	1e03      	subs	r3, r0, #0
 80007e2:	d001      	beq.n	80007e8 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 80007e4:	f000 fae2 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80007e8:	46c0      	nop			; (mov r8, r8)
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	46c0      	nop			; (mov r8, r8)
 80007f0:	2000011c 	.word	0x2000011c
 80007f4:	40002000 	.word	0x40002000
 80007f8:	00003e7f 	.word	0x00003e7f
 80007fc:	00000bb7 	.word	0x00000bb7

08000800 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000804:	4b23      	ldr	r3, [pc, #140]	; (8000894 <MX_USART1_UART_Init+0x94>)
 8000806:	4a24      	ldr	r2, [pc, #144]	; (8000898 <MX_USART1_UART_Init+0x98>)
 8000808:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800080a:	4b22      	ldr	r3, [pc, #136]	; (8000894 <MX_USART1_UART_Init+0x94>)
 800080c:	22e1      	movs	r2, #225	; 0xe1
 800080e:	0252      	lsls	r2, r2, #9
 8000810:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000812:	4b20      	ldr	r3, [pc, #128]	; (8000894 <MX_USART1_UART_Init+0x94>)
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000818:	4b1e      	ldr	r3, [pc, #120]	; (8000894 <MX_USART1_UART_Init+0x94>)
 800081a:	2200      	movs	r2, #0
 800081c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800081e:	4b1d      	ldr	r3, [pc, #116]	; (8000894 <MX_USART1_UART_Init+0x94>)
 8000820:	2200      	movs	r2, #0
 8000822:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000824:	4b1b      	ldr	r3, [pc, #108]	; (8000894 <MX_USART1_UART_Init+0x94>)
 8000826:	220c      	movs	r2, #12
 8000828:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800082a:	4b1a      	ldr	r3, [pc, #104]	; (8000894 <MX_USART1_UART_Init+0x94>)
 800082c:	2200      	movs	r2, #0
 800082e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000830:	4b18      	ldr	r3, [pc, #96]	; (8000894 <MX_USART1_UART_Init+0x94>)
 8000832:	2200      	movs	r2, #0
 8000834:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000836:	4b17      	ldr	r3, [pc, #92]	; (8000894 <MX_USART1_UART_Init+0x94>)
 8000838:	2200      	movs	r2, #0
 800083a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800083c:	4b15      	ldr	r3, [pc, #84]	; (8000894 <MX_USART1_UART_Init+0x94>)
 800083e:	2200      	movs	r2, #0
 8000840:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000842:	4b14      	ldr	r3, [pc, #80]	; (8000894 <MX_USART1_UART_Init+0x94>)
 8000844:	2200      	movs	r2, #0
 8000846:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000848:	4b12      	ldr	r3, [pc, #72]	; (8000894 <MX_USART1_UART_Init+0x94>)
 800084a:	0018      	movs	r0, r3
 800084c:	f002 fe90 	bl	8003570 <HAL_UART_Init>
 8000850:	1e03      	subs	r3, r0, #0
 8000852:	d001      	beq.n	8000858 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000854:	f000 faaa 	bl	8000dac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000858:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <MX_USART1_UART_Init+0x94>)
 800085a:	2100      	movs	r1, #0
 800085c:	0018      	movs	r0, r3
 800085e:	f004 f9df 	bl	8004c20 <HAL_UARTEx_SetTxFifoThreshold>
 8000862:	1e03      	subs	r3, r0, #0
 8000864:	d001      	beq.n	800086a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000866:	f000 faa1 	bl	8000dac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800086a:	4b0a      	ldr	r3, [pc, #40]	; (8000894 <MX_USART1_UART_Init+0x94>)
 800086c:	2100      	movs	r1, #0
 800086e:	0018      	movs	r0, r3
 8000870:	f004 fa16 	bl	8004ca0 <HAL_UARTEx_SetRxFifoThreshold>
 8000874:	1e03      	subs	r3, r0, #0
 8000876:	d001      	beq.n	800087c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000878:	f000 fa98 	bl	8000dac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800087c:	4b05      	ldr	r3, [pc, #20]	; (8000894 <MX_USART1_UART_Init+0x94>)
 800087e:	0018      	movs	r0, r3
 8000880:	f004 f994 	bl	8004bac <HAL_UARTEx_DisableFifoMode>
 8000884:	1e03      	subs	r3, r0, #0
 8000886:	d001      	beq.n	800088c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000888:	f000 fa90 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800088c:	46c0      	nop			; (mov r8, r8)
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	46c0      	nop			; (mov r8, r8)
 8000894:	20000168 	.word	0x20000168
 8000898:	40013800 	.word	0x40013800

0800089c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008a2:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <MX_DMA_Init+0x38>)
 80008a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80008a6:	4b0b      	ldr	r3, [pc, #44]	; (80008d4 <MX_DMA_Init+0x38>)
 80008a8:	2101      	movs	r1, #1
 80008aa:	430a      	orrs	r2, r1
 80008ac:	639a      	str	r2, [r3, #56]	; 0x38
 80008ae:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <MX_DMA_Init+0x38>)
 80008b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008b2:	2201      	movs	r2, #1
 80008b4:	4013      	ands	r3, r2
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80008ba:	2200      	movs	r2, #0
 80008bc:	2100      	movs	r1, #0
 80008be:	2009      	movs	r0, #9
 80008c0:	f000 fe30 	bl	8001524 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80008c4:	2009      	movs	r0, #9
 80008c6:	f000 fe42 	bl	800154e <HAL_NVIC_EnableIRQ>

}
 80008ca:	46c0      	nop			; (mov r8, r8)
 80008cc:	46bd      	mov	sp, r7
 80008ce:	b002      	add	sp, #8
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	46c0      	nop			; (mov r8, r8)
 80008d4:	40021000 	.word	0x40021000

080008d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d8:	b590      	push	{r4, r7, lr}
 80008da:	b089      	sub	sp, #36	; 0x24
 80008dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008de:	240c      	movs	r4, #12
 80008e0:	193b      	adds	r3, r7, r4
 80008e2:	0018      	movs	r0, r3
 80008e4:	2314      	movs	r3, #20
 80008e6:	001a      	movs	r2, r3
 80008e8:	2100      	movs	r1, #0
 80008ea:	f004 fb1f 	bl	8004f2c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ee:	4b28      	ldr	r3, [pc, #160]	; (8000990 <MX_GPIO_Init+0xb8>)
 80008f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008f2:	4b27      	ldr	r3, [pc, #156]	; (8000990 <MX_GPIO_Init+0xb8>)
 80008f4:	2104      	movs	r1, #4
 80008f6:	430a      	orrs	r2, r1
 80008f8:	635a      	str	r2, [r3, #52]	; 0x34
 80008fa:	4b25      	ldr	r3, [pc, #148]	; (8000990 <MX_GPIO_Init+0xb8>)
 80008fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008fe:	2204      	movs	r2, #4
 8000900:	4013      	ands	r3, r2
 8000902:	60bb      	str	r3, [r7, #8]
 8000904:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000906:	4b22      	ldr	r3, [pc, #136]	; (8000990 <MX_GPIO_Init+0xb8>)
 8000908:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800090a:	4b21      	ldr	r3, [pc, #132]	; (8000990 <MX_GPIO_Init+0xb8>)
 800090c:	2120      	movs	r1, #32
 800090e:	430a      	orrs	r2, r1
 8000910:	635a      	str	r2, [r3, #52]	; 0x34
 8000912:	4b1f      	ldr	r3, [pc, #124]	; (8000990 <MX_GPIO_Init+0xb8>)
 8000914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000916:	2220      	movs	r2, #32
 8000918:	4013      	ands	r3, r2
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800091e:	4b1c      	ldr	r3, [pc, #112]	; (8000990 <MX_GPIO_Init+0xb8>)
 8000920:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000922:	4b1b      	ldr	r3, [pc, #108]	; (8000990 <MX_GPIO_Init+0xb8>)
 8000924:	2101      	movs	r1, #1
 8000926:	430a      	orrs	r2, r1
 8000928:	635a      	str	r2, [r3, #52]	; 0x34
 800092a:	4b19      	ldr	r3, [pc, #100]	; (8000990 <MX_GPIO_Init+0xb8>)
 800092c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800092e:	2201      	movs	r2, #1
 8000930:	4013      	ands	r3, r2
 8000932:	603b      	str	r3, [r7, #0]
 8000934:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, GPIO_PIN_RESET);
 8000936:	4b17      	ldr	r3, [pc, #92]	; (8000994 <MX_GPIO_Init+0xbc>)
 8000938:	2200      	movs	r2, #0
 800093a:	2140      	movs	r1, #64	; 0x40
 800093c:	0018      	movs	r0, r3
 800093e:	f001 faa5 	bl	8001e8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : T_NRST_Pin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 8000942:	193b      	adds	r3, r7, r4
 8000944:	2204      	movs	r2, #4
 8000946:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000948:	193b      	adds	r3, r7, r4
 800094a:	2288      	movs	r2, #136	; 0x88
 800094c:	0352      	lsls	r2, r2, #13
 800094e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	193b      	adds	r3, r7, r4
 8000952:	2200      	movs	r2, #0
 8000954:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 8000956:	193b      	adds	r3, r7, r4
 8000958:	4a0f      	ldr	r2, [pc, #60]	; (8000998 <MX_GPIO_Init+0xc0>)
 800095a:	0019      	movs	r1, r3
 800095c:	0010      	movs	r0, r2
 800095e:	f001 f931 	bl	8001bc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_Pin */
  GPIO_InitStruct.Pin = GREEN_Pin;
 8000962:	0021      	movs	r1, r4
 8000964:	187b      	adds	r3, r7, r1
 8000966:	2240      	movs	r2, #64	; 0x40
 8000968:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096a:	187b      	adds	r3, r7, r1
 800096c:	2201      	movs	r2, #1
 800096e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	187b      	adds	r3, r7, r1
 8000972:	2200      	movs	r2, #0
 8000974:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000976:	187b      	adds	r3, r7, r1
 8000978:	2200      	movs	r2, #0
 800097a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GREEN_GPIO_Port, &GPIO_InitStruct);
 800097c:	187b      	adds	r3, r7, r1
 800097e:	4a05      	ldr	r2, [pc, #20]	; (8000994 <MX_GPIO_Init+0xbc>)
 8000980:	0019      	movs	r1, r3
 8000982:	0010      	movs	r0, r2
 8000984:	f001 f91e 	bl	8001bc4 <HAL_GPIO_Init>

}
 8000988:	46c0      	nop			; (mov r8, r8)
 800098a:	46bd      	mov	sp, r7
 800098c:	b009      	add	sp, #36	; 0x24
 800098e:	bd90      	pop	{r4, r7, pc}
 8000990:	40021000 	.word	0x40021000
 8000994:	50000800 	.word	0x50000800
 8000998:	50001400 	.word	0x50001400

0800099c <m138_init>:

/* USER CODE BEGIN 4 */
void m138_init ()
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
	char* chunk = malloc ( 20 * sizeof (char) ) ;
 80009a2:	2014      	movs	r0, #20
 80009a4:	f004 faae 	bl	8004f04 <malloc>
 80009a8:	0003      	movs	r3, r0
 80009aa:	607b      	str	r3, [r7, #4]
	send_at_command_2_swarm ( cs_at , cs_answer , 1 ) ;
 80009ac:	4b5e      	ldr	r3, [pc, #376]	; (8000b28 <m138_init+0x18c>)
 80009ae:	6818      	ldr	r0, [r3, #0]
 80009b0:	4b5e      	ldr	r3, [pc, #376]	; (8000b2c <m138_init+0x190>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	2201      	movs	r2, #1
 80009b6:	0019      	movs	r1, r3
 80009b8:	f000 f8f2 	bl	8000ba0 <send_at_command_2_swarm>
	if ( swarm_checklist == 1 )
 80009bc:	4b5c      	ldr	r3, [pc, #368]	; (8000b30 <m138_init+0x194>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d125      	bne.n	8000a10 <m138_init+0x74>
	{
		chunk = strtok ( (char*) swarm_uart_rx_buff , "=" ) ;
 80009c4:	4a5b      	ldr	r2, [pc, #364]	; (8000b34 <m138_init+0x198>)
 80009c6:	4b5c      	ldr	r3, [pc, #368]	; (8000b38 <m138_init+0x19c>)
 80009c8:	0011      	movs	r1, r2
 80009ca:	0018      	movs	r0, r3
 80009cc:	f004 fbea 	bl	80051a4 <strtok>
 80009d0:	0003      	movs	r3, r0
 80009d2:	607b      	str	r3, [r7, #4]
		chunk = strtok ( NULL , "," ) ;
 80009d4:	4b59      	ldr	r3, [pc, #356]	; (8000b3c <m138_init+0x1a0>)
 80009d6:	0019      	movs	r1, r3
 80009d8:	2000      	movs	r0, #0
 80009da:	f004 fbe3 	bl	80051a4 <strtok>
 80009de:	0003      	movs	r3, r0
 80009e0:	607b      	str	r3, [r7, #4]
		swarm_dev_id = (uint32_t) strtol ( chunk , NULL , 16 ) ;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2210      	movs	r2, #16
 80009e6:	2100      	movs	r1, #0
 80009e8:	0018      	movs	r0, r3
 80009ea:	f004 fccd 	bl	8005388 <strtol>
 80009ee:	0003      	movs	r3, r0
 80009f0:	001a      	movs	r2, r3
 80009f2:	4b53      	ldr	r3, [pc, #332]	; (8000b40 <m138_init+0x1a4>)
 80009f4:	601a      	str	r2, [r3, #0]
		clean_array ( swarm_uart_rx_buff , SWARM_UART_RX_MAX_BUFF_SIZE ) ;
 80009f6:	4b50      	ldr	r3, [pc, #320]	; (8000b38 <m138_init+0x19c>)
 80009f8:	2164      	movs	r1, #100	; 0x64
 80009fa:	0018      	movs	r0, r3
 80009fc:	f000 f934 	bl	8000c68 <clean_array>
		send_at_command_2_swarm ( rt_0_at , rt_ok_answer , 2 ) ;
 8000a00:	4b50      	ldr	r3, [pc, #320]	; (8000b44 <m138_init+0x1a8>)
 8000a02:	6818      	ldr	r0, [r3, #0]
 8000a04:	4b50      	ldr	r3, [pc, #320]	; (8000b48 <m138_init+0x1ac>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	2202      	movs	r2, #2
 8000a0a:	0019      	movs	r1, r3
 8000a0c:	f000 f8c8 	bl	8000ba0 <send_at_command_2_swarm>
	}
	if ( swarm_checklist == 2 )
 8000a10:	4b47      	ldr	r3, [pc, #284]	; (8000b30 <m138_init+0x194>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	2b02      	cmp	r3, #2
 8000a16:	d107      	bne.n	8000a28 <m138_init+0x8c>
		send_at_command_2_swarm ( rt_q_rate_at , rt_0_answer , 3 ) ;
 8000a18:	4b4c      	ldr	r3, [pc, #304]	; (8000b4c <m138_init+0x1b0>)
 8000a1a:	6818      	ldr	r0, [r3, #0]
 8000a1c:	4b4c      	ldr	r3, [pc, #304]	; (8000b50 <m138_init+0x1b4>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	2203      	movs	r2, #3
 8000a22:	0019      	movs	r1, r3
 8000a24:	f000 f8bc 	bl	8000ba0 <send_at_command_2_swarm>
	if ( swarm_checklist == 3 )
 8000a28:	4b41      	ldr	r3, [pc, #260]	; (8000b30 <m138_init+0x194>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	2b03      	cmp	r3, #3
 8000a2e:	d107      	bne.n	8000a40 <m138_init+0xa4>
		send_at_command_2_swarm ( pw_0_at , pw_ok_answer , 4 ) ;
 8000a30:	4b48      	ldr	r3, [pc, #288]	; (8000b54 <m138_init+0x1b8>)
 8000a32:	6818      	ldr	r0, [r3, #0]
 8000a34:	4b48      	ldr	r3, [pc, #288]	; (8000b58 <m138_init+0x1bc>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	2204      	movs	r2, #4
 8000a3a:	0019      	movs	r1, r3
 8000a3c:	f000 f8b0 	bl	8000ba0 <send_at_command_2_swarm>
	if ( swarm_checklist == 4 )
 8000a40:	4b3b      	ldr	r3, [pc, #236]	; (8000b30 <m138_init+0x194>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	2b04      	cmp	r3, #4
 8000a46:	d107      	bne.n	8000a58 <m138_init+0xbc>
		send_at_command_2_swarm ( pw_q_rate_at , pw_0_answer , 5 ) ;
 8000a48:	4b44      	ldr	r3, [pc, #272]	; (8000b5c <m138_init+0x1c0>)
 8000a4a:	6818      	ldr	r0, [r3, #0]
 8000a4c:	4b44      	ldr	r3, [pc, #272]	; (8000b60 <m138_init+0x1c4>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	2205      	movs	r2, #5
 8000a52:	0019      	movs	r1, r3
 8000a54:	f000 f8a4 	bl	8000ba0 <send_at_command_2_swarm>
	if ( swarm_checklist == 5 )
 8000a58:	4b35      	ldr	r3, [pc, #212]	; (8000b30 <m138_init+0x194>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	2b05      	cmp	r3, #5
 8000a5e:	d107      	bne.n	8000a70 <m138_init+0xd4>
		send_at_command_2_swarm ( dt_0_at , dt_ok_answer , 6 ) ;
 8000a60:	4b40      	ldr	r3, [pc, #256]	; (8000b64 <m138_init+0x1c8>)
 8000a62:	6818      	ldr	r0, [r3, #0]
 8000a64:	4b40      	ldr	r3, [pc, #256]	; (8000b68 <m138_init+0x1cc>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2206      	movs	r2, #6
 8000a6a:	0019      	movs	r1, r3
 8000a6c:	f000 f898 	bl	8000ba0 <send_at_command_2_swarm>
	if ( swarm_checklist == 6 )
 8000a70:	4b2f      	ldr	r3, [pc, #188]	; (8000b30 <m138_init+0x194>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	2b06      	cmp	r3, #6
 8000a76:	d107      	bne.n	8000a88 <m138_init+0xec>
		send_at_command_2_swarm ( dt_q_rate_at , dt_ok_answer , 7 ) ;
 8000a78:	4b3c      	ldr	r3, [pc, #240]	; (8000b6c <m138_init+0x1d0>)
 8000a7a:	6818      	ldr	r0, [r3, #0]
 8000a7c:	4b3a      	ldr	r3, [pc, #232]	; (8000b68 <m138_init+0x1cc>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	2207      	movs	r2, #7
 8000a82:	0019      	movs	r1, r3
 8000a84:	f000 f88c 	bl	8000ba0 <send_at_command_2_swarm>
	if ( swarm_checklist == 7 )
 8000a88:	4b29      	ldr	r3, [pc, #164]	; (8000b30 <m138_init+0x194>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	2b07      	cmp	r3, #7
 8000a8e:	d107      	bne.n	8000aa0 <m138_init+0x104>
		send_at_command_2_swarm ( gs_0_at , gs_ok_answer  , 8 ) ;
 8000a90:	4b37      	ldr	r3, [pc, #220]	; (8000b70 <m138_init+0x1d4>)
 8000a92:	6818      	ldr	r0, [r3, #0]
 8000a94:	4b37      	ldr	r3, [pc, #220]	; (8000b74 <m138_init+0x1d8>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	2208      	movs	r2, #8
 8000a9a:	0019      	movs	r1, r3
 8000a9c:	f000 f880 	bl	8000ba0 <send_at_command_2_swarm>
	if ( swarm_checklist == 8 )
 8000aa0:	4b23      	ldr	r3, [pc, #140]	; (8000b30 <m138_init+0x194>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	2b08      	cmp	r3, #8
 8000aa6:	d107      	bne.n	8000ab8 <m138_init+0x11c>
		send_at_command_2_swarm ( gs_q_rate_at , gs_0_answer , 9 ) ;
 8000aa8:	4b33      	ldr	r3, [pc, #204]	; (8000b78 <m138_init+0x1dc>)
 8000aaa:	6818      	ldr	r0, [r3, #0]
 8000aac:	4b33      	ldr	r3, [pc, #204]	; (8000b7c <m138_init+0x1e0>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	2209      	movs	r2, #9
 8000ab2:	0019      	movs	r1, r3
 8000ab4:	f000 f874 	bl	8000ba0 <send_at_command_2_swarm>
	if ( swarm_checklist == 9 )
 8000ab8:	4b1d      	ldr	r3, [pc, #116]	; (8000b30 <m138_init+0x194>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	2b09      	cmp	r3, #9
 8000abe:	d107      	bne.n	8000ad0 <m138_init+0x134>
		send_at_command_2_swarm ( gj_0_at , gj_ok_answer  , 10 ) ;
 8000ac0:	4b2f      	ldr	r3, [pc, #188]	; (8000b80 <m138_init+0x1e4>)
 8000ac2:	6818      	ldr	r0, [r3, #0]
 8000ac4:	4b2f      	ldr	r3, [pc, #188]	; (8000b84 <m138_init+0x1e8>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	220a      	movs	r2, #10
 8000aca:	0019      	movs	r1, r3
 8000acc:	f000 f868 	bl	8000ba0 <send_at_command_2_swarm>
	if ( swarm_checklist == 10 )
 8000ad0:	4b17      	ldr	r3, [pc, #92]	; (8000b30 <m138_init+0x194>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	2b0a      	cmp	r3, #10
 8000ad6:	d107      	bne.n	8000ae8 <m138_init+0x14c>
		send_at_command_2_swarm ( gj_q_rate_at , gj_0_answer , 11 ) ;
 8000ad8:	4b2b      	ldr	r3, [pc, #172]	; (8000b88 <m138_init+0x1ec>)
 8000ada:	6818      	ldr	r0, [r3, #0]
 8000adc:	4b2b      	ldr	r3, [pc, #172]	; (8000b8c <m138_init+0x1f0>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	220b      	movs	r2, #11
 8000ae2:	0019      	movs	r1, r3
 8000ae4:	f000 f85c 	bl	8000ba0 <send_at_command_2_swarm>
	if ( swarm_checklist == 11 )
 8000ae8:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <m138_init+0x194>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	2b0b      	cmp	r3, #11
 8000aee:	d107      	bne.n	8000b00 <m138_init+0x164>
		send_at_command_2_swarm ( gn_0_at , gn_ok_answer  , 12 ) ;
 8000af0:	4b27      	ldr	r3, [pc, #156]	; (8000b90 <m138_init+0x1f4>)
 8000af2:	6818      	ldr	r0, [r3, #0]
 8000af4:	4b27      	ldr	r3, [pc, #156]	; (8000b94 <m138_init+0x1f8>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	220c      	movs	r2, #12
 8000afa:	0019      	movs	r1, r3
 8000afc:	f000 f850 	bl	8000ba0 <send_at_command_2_swarm>
	if ( swarm_checklist == 12 )
 8000b00:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <m138_init+0x194>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	2b0c      	cmp	r3, #12
 8000b06:	d107      	bne.n	8000b18 <m138_init+0x17c>
		send_at_command_2_swarm ( gn_q_rate_at , gn_0_answer , 13 ) ;
 8000b08:	4b23      	ldr	r3, [pc, #140]	; (8000b98 <m138_init+0x1fc>)
 8000b0a:	6818      	ldr	r0, [r3, #0]
 8000b0c:	4b23      	ldr	r3, [pc, #140]	; (8000b9c <m138_init+0x200>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	220d      	movs	r2, #13
 8000b12:	0019      	movs	r1, r3
 8000b14:	f000 f844 	bl	8000ba0 <send_at_command_2_swarm>
	free ( chunk ) ;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	f004 f9fc 	bl	8004f18 <free>
}
 8000b20:	46c0      	nop			; (mov r8, r8)
 8000b22:	46bd      	mov	sp, r7
 8000b24:	b002      	add	sp, #8
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	20000000 	.word	0x20000000
 8000b2c:	20000034 	.word	0x20000034
 8000b30:	200003b7 	.word	0x200003b7
 8000b34:	080066c4 	.word	0x080066c4
 8000b38:	20000258 	.word	0x20000258
 8000b3c:	080066c8 	.word	0x080066c8
 8000b40:	200003b8 	.word	0x200003b8
 8000b44:	20000004 	.word	0x20000004
 8000b48:	20000038 	.word	0x20000038
 8000b4c:	20000008 	.word	0x20000008
 8000b50:	2000003c 	.word	0x2000003c
 8000b54:	2000000c 	.word	0x2000000c
 8000b58:	20000040 	.word	0x20000040
 8000b5c:	20000010 	.word	0x20000010
 8000b60:	20000044 	.word	0x20000044
 8000b64:	20000014 	.word	0x20000014
 8000b68:	20000048 	.word	0x20000048
 8000b6c:	20000018 	.word	0x20000018
 8000b70:	2000001c 	.word	0x2000001c
 8000b74:	2000004c 	.word	0x2000004c
 8000b78:	20000020 	.word	0x20000020
 8000b7c:	20000050 	.word	0x20000050
 8000b80:	20000024 	.word	0x20000024
 8000b84:	20000054 	.word	0x20000054
 8000b88:	20000028 	.word	0x20000028
 8000b8c:	20000058 	.word	0x20000058
 8000b90:	2000002c 	.word	0x2000002c
 8000b94:	2000005c 	.word	0x2000005c
 8000b98:	20000030 	.word	0x20000030
 8000b9c:	20000060 	.word	0x20000060

08000ba0 <send_at_command_2_swarm>:

void send_at_command_2_swarm ( const char* at_command , const char* answer , uint16_t step )
{
 8000ba0:	b5b0      	push	{r4, r5, r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	60f8      	str	r0, [r7, #12]
 8000ba8:	60b9      	str	r1, [r7, #8]
 8000baa:	1dbb      	adds	r3, r7, #6
 8000bac:	801a      	strh	r2, [r3, #0]
	uint8_t cs = nmea_checksum ( at_command , strlen ( at_command ) ) ;
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	f7ff faa7 	bl	8000104 <strlen>
 8000bb6:	0002      	movs	r2, r0
 8000bb8:	2517      	movs	r5, #23
 8000bba:	197c      	adds	r4, r7, r5
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	0011      	movs	r1, r2
 8000bc0:	0018      	movs	r0, r3
 8000bc2:	f000 f875 	bl	8000cb0 <nmea_checksum>
 8000bc6:	0003      	movs	r3, r0
 8000bc8:	7023      	strb	r3, [r4, #0]

	sprintf ( swarm_uart_tx_buff , "%s*%02x\n" , at_command , cs ) ;
 8000bca:	197b      	adds	r3, r7, r5
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	68fa      	ldr	r2, [r7, #12]
 8000bd0:	491e      	ldr	r1, [pc, #120]	; (8000c4c <send_at_command_2_swarm+0xac>)
 8000bd2:	481f      	ldr	r0, [pc, #124]	; (8000c50 <send_at_command_2_swarm+0xb0>)
 8000bd4:	f004 faa6 	bl	8005124 <siprintf>
	tim14_on = 1 ;
 8000bd8:	4b1e      	ldr	r3, [pc, #120]	; (8000c54 <send_at_command_2_swarm+0xb4>)
 8000bda:	2201      	movs	r2, #1
 8000bdc:	701a      	strb	r2, [r3, #0]
	//clean_array ( swarm_uart_rx_buff , SWARM_UART_RX_MAX_BUFF_SIZE ) ;
	swarm_uart_rx_buff[0] = 0 ;
 8000bde:	4b1e      	ldr	r3, [pc, #120]	; (8000c58 <send_at_command_2_swarm+0xb8>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start_IT ( &htim14 ) ;
 8000be4:	4b1d      	ldr	r3, [pc, #116]	; (8000c5c <send_at_command_2_swarm+0xbc>)
 8000be6:	0018      	movs	r0, r3
 8000be8:	f002 fa60 	bl	80030ac <HAL_TIM_Base_Start_IT>
	HAL_UART_Transmit ( SWARM_UART_HANDLER , (uint8_t*) swarm_uart_tx_buff ,  strlen ( (char*) swarm_uart_tx_buff ) , SWARM_UART_UART_TX_TIMEOUT ) ;
 8000bec:	4b18      	ldr	r3, [pc, #96]	; (8000c50 <send_at_command_2_swarm+0xb0>)
 8000bee:	0018      	movs	r0, r3
 8000bf0:	f7ff fa88 	bl	8000104 <strlen>
 8000bf4:	0003      	movs	r3, r0
 8000bf6:	b29a      	uxth	r2, r3
 8000bf8:	4915      	ldr	r1, [pc, #84]	; (8000c50 <send_at_command_2_swarm+0xb0>)
 8000bfa:	4819      	ldr	r0, [pc, #100]	; (8000c60 <send_at_command_2_swarm+0xc0>)
 8000bfc:	2364      	movs	r3, #100	; 0x64
 8000bfe:	f002 fd0d 	bl	800361c <HAL_UART_Transmit>
	while ( tim14_on )
 8000c02:	e015      	b.n	8000c30 <send_at_command_2_swarm+0x90>
	{
		if ( swarm_uart_rx_buff[0] != 0 )
 8000c04:	4b14      	ldr	r3, [pc, #80]	; (8000c58 <send_at_command_2_swarm+0xb8>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d011      	beq.n	8000c30 <send_at_command_2_swarm+0x90>
		{
			if ( strncmp ( (char*) swarm_uart_rx_buff , answer , strlen ( answer ) ) == 0 )
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	0018      	movs	r0, r3
 8000c10:	f7ff fa78 	bl	8000104 <strlen>
 8000c14:	0002      	movs	r2, r0
 8000c16:	68b9      	ldr	r1, [r7, #8]
 8000c18:	4b0f      	ldr	r3, [pc, #60]	; (8000c58 <send_at_command_2_swarm+0xb8>)
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	f004 faaf 	bl	800517e <strncmp>
 8000c20:	1e03      	subs	r3, r0, #0
 8000c22:	d105      	bne.n	8000c30 <send_at_command_2_swarm+0x90>
			{
				swarm_checklist = step ;
 8000c24:	1dbb      	adds	r3, r7, #6
 8000c26:	881b      	ldrh	r3, [r3, #0]
 8000c28:	b2da      	uxtb	r2, r3
 8000c2a:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <send_at_command_2_swarm+0xc4>)
 8000c2c:	701a      	strb	r2, [r3, #0]
				break ;
 8000c2e:	e003      	b.n	8000c38 <send_at_command_2_swarm+0x98>
	while ( tim14_on )
 8000c30:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <send_at_command_2_swarm+0xb4>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d1e5      	bne.n	8000c04 <send_at_command_2_swarm+0x64>
			{
				//clean_array ( swarm_uart_rx_buff , SWARM_UART_RX_MAX_BUFF_SIZE ) ;
			}
		}
	}
	clean_array ( swarm_uart_tx_buff , SWARM_UART_TX_MAX_BUFF_SIZE ) ;
 8000c38:	4b05      	ldr	r3, [pc, #20]	; (8000c50 <send_at_command_2_swarm+0xb0>)
 8000c3a:	21fa      	movs	r1, #250	; 0xfa
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	f000 f813 	bl	8000c68 <clean_array>
}
 8000c42:	46c0      	nop			; (mov r8, r8)
 8000c44:	46bd      	mov	sp, r7
 8000c46:	b006      	add	sp, #24
 8000c48:	bdb0      	pop	{r4, r5, r7, pc}
 8000c4a:	46c0      	nop			; (mov r8, r8)
 8000c4c:	080066cc 	.word	0x080066cc
 8000c50:	200002bc 	.word	0x200002bc
 8000c54:	200003b6 	.word	0x200003b6
 8000c58:	20000258 	.word	0x20000258
 8000c5c:	2000011c 	.word	0x2000011c
 8000c60:	20000168 	.word	0x20000168
 8000c64:	200003b7 	.word	0x200003b7

08000c68 <clean_array>:

void clean_array ( char* array , uint16_t array_max_size )
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	000a      	movs	r2, r1
 8000c72:	1cbb      	adds	r3, r7, #2
 8000c74:	801a      	strh	r2, [r3, #0]
	uint16_t i ;
	for ( i = 0 ; i < array_max_size ; i++ )
 8000c76:	230e      	movs	r3, #14
 8000c78:	18fb      	adds	r3, r7, r3
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	801a      	strh	r2, [r3, #0]
 8000c7e:	e00b      	b.n	8000c98 <clean_array+0x30>
		array[i] = 0 ;
 8000c80:	210e      	movs	r1, #14
 8000c82:	187b      	adds	r3, r7, r1
 8000c84:	881b      	ldrh	r3, [r3, #0]
 8000c86:	687a      	ldr	r2, [r7, #4]
 8000c88:	18d3      	adds	r3, r2, r3
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	701a      	strb	r2, [r3, #0]
	for ( i = 0 ; i < array_max_size ; i++ )
 8000c8e:	187b      	adds	r3, r7, r1
 8000c90:	881a      	ldrh	r2, [r3, #0]
 8000c92:	187b      	adds	r3, r7, r1
 8000c94:	3201      	adds	r2, #1
 8000c96:	801a      	strh	r2, [r3, #0]
 8000c98:	230e      	movs	r3, #14
 8000c9a:	18fa      	adds	r2, r7, r3
 8000c9c:	1cbb      	adds	r3, r7, #2
 8000c9e:	8812      	ldrh	r2, [r2, #0]
 8000ca0:	881b      	ldrh	r3, [r3, #0]
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	d3ec      	bcc.n	8000c80 <clean_array+0x18>
}
 8000ca6:	46c0      	nop			; (mov r8, r8)
 8000ca8:	46c0      	nop			; (mov r8, r8)
 8000caa:	46bd      	mov	sp, r7
 8000cac:	b004      	add	sp, #16
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <nmea_checksum>:

uint8_t nmea_checksum ( const char *message , size_t len )
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	6039      	str	r1, [r7, #0]
	size_t i = 0 ;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60fb      	str	r3, [r7, #12]
	uint8_t cs ;
	if ( message [0] == '$' )
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	2b24      	cmp	r3, #36	; 0x24
 8000cc4:	d102      	bne.n	8000ccc <nmea_checksum+0x1c>
		i++ ;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	60fb      	str	r3, [r7, #12]
	for ( cs = 0 ; ( i < len ) && message [i] ; i++ )
 8000ccc:	230b      	movs	r3, #11
 8000cce:	18fb      	adds	r3, r7, r3
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	701a      	strb	r2, [r3, #0]
 8000cd4:	e00c      	b.n	8000cf0 <nmea_checksum+0x40>
		cs ^= ( (uint8_t) message [i] ) ;
 8000cd6:	687a      	ldr	r2, [r7, #4]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	18d3      	adds	r3, r2, r3
 8000cdc:	7819      	ldrb	r1, [r3, #0]
 8000cde:	220b      	movs	r2, #11
 8000ce0:	18bb      	adds	r3, r7, r2
 8000ce2:	18ba      	adds	r2, r7, r2
 8000ce4:	7812      	ldrb	r2, [r2, #0]
 8000ce6:	404a      	eors	r2, r1
 8000ce8:	701a      	strb	r2, [r3, #0]
	for ( cs = 0 ; ( i < len ) && message [i] ; i++ )
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	3301      	adds	r3, #1
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fa      	ldr	r2, [r7, #12]
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	d205      	bcs.n	8000d04 <nmea_checksum+0x54>
 8000cf8:	687a      	ldr	r2, [r7, #4]
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	18d3      	adds	r3, r2, r3
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d1e8      	bne.n	8000cd6 <nmea_checksum+0x26>
	return cs;
 8000d04:	230b      	movs	r3, #11
 8000d06:	18fb      	adds	r3, r7, r3
 8000d08:	781b      	ldrb	r3, [r3, #0]
}
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	b004      	add	sp, #16
 8000d10:	bd80      	pop	{r7, pc}
	...

08000d14 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback ( UART_HandleTypeDef *huart , uint16_t Size )
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	000a      	movs	r2, r1
 8000d1e:	1cbb      	adds	r3, r7, #2
 8000d20:	801a      	strh	r2, [r3, #0]
	const char* z = 0 ;
 8000d22:	2300      	movs	r3, #0
 8000d24:	60fb      	str	r3, [r7, #12]
    if ( huart->Instance == USART1 )
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a0f      	ldr	r2, [pc, #60]	; (8000d68 <HAL_UARTEx_RxEventCallback+0x54>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d117      	bne.n	8000d60 <HAL_UARTEx_RxEventCallback+0x4c>
    {
    	if ( swarm_uart_rx_buff[0] != 0 ) // to avoid doublet because of 2 INTs
 8000d30:	4b0e      	ldr	r3, [pc, #56]	; (8000d6c <HAL_UARTEx_RxEventCallback+0x58>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d005      	beq.n	8000d44 <HAL_UARTEx_RxEventCallback+0x30>
    		strcat ( (char *) swarm_uart_rx_buff , z ) ; // to avoid debris after '\n' of original message
 8000d38:	68fa      	ldr	r2, [r7, #12]
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <HAL_UARTEx_RxEventCallback+0x58>)
 8000d3c:	0011      	movs	r1, r2
 8000d3e:	0018      	movs	r0, r3
 8000d40:	f004 fa10 	bl	8005164 <strcat>
    	HAL_UARTEx_ReceiveToIdle_DMA ( SWARM_UART_HANDLER , (uint8_t *) swarm_uart_rx_buff , SWARM_UART_RX_MAX_BUFF_SIZE ) ;
 8000d44:	4909      	ldr	r1, [pc, #36]	; (8000d6c <HAL_UARTEx_RxEventCallback+0x58>)
 8000d46:	4b0a      	ldr	r3, [pc, #40]	; (8000d70 <HAL_UARTEx_RxEventCallback+0x5c>)
 8000d48:	2264      	movs	r2, #100	; 0x64
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	f003 ffea 	bl	8004d24 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT ( &hdma_usart1_rx, DMA_IT_HT ) ; //Disable Half Transfer interrupt.
 8000d50:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <HAL_UARTEx_RxEventCallback+0x60>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	4b07      	ldr	r3, [pc, #28]	; (8000d74 <HAL_UARTEx_RxEventCallback+0x60>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	2104      	movs	r1, #4
 8000d5c:	438a      	bics	r2, r1
 8000d5e:	601a      	str	r2, [r3, #0]
    }
}
 8000d60:	46c0      	nop			; (mov r8, r8)
 8000d62:	46bd      	mov	sp, r7
 8000d64:	b004      	add	sp, #16
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40013800 	.word	0x40013800
 8000d6c:	20000258 	.word	0x20000258
 8000d70:	20000168 	.word	0x20000168
 8000d74:	200001fc 	.word	0x200001fc

08000d78 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
	if ( htim->Instance == TIM14 )
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a06      	ldr	r2, [pc, #24]	; (8000da0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d106      	bne.n	8000d98 <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		tim14_on = 0 ;
 8000d8a:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT ( &htim14 ) ;
 8000d90:	4b05      	ldr	r3, [pc, #20]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000d92:	0018      	movs	r0, r3
 8000d94:	f002 f9de 	bl	8003154 <HAL_TIM_Base_Stop_IT>
	}
}
 8000d98:	46c0      	nop			; (mov r8, r8)
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	b002      	add	sp, #8
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	40002000 	.word	0x40002000
 8000da4:	200003b6 	.word	0x200003b6
 8000da8:	2000011c 	.word	0x2000011c

08000dac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000db0:	b672      	cpsid	i
}
 8000db2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000db4:	e7fe      	b.n	8000db4 <Error_Handler+0x8>
	...

08000db8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dbe:	4b0f      	ldr	r3, [pc, #60]	; (8000dfc <HAL_MspInit+0x44>)
 8000dc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dc2:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <HAL_MspInit+0x44>)
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	430a      	orrs	r2, r1
 8000dc8:	641a      	str	r2, [r3, #64]	; 0x40
 8000dca:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <HAL_MspInit+0x44>)
 8000dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dce:	2201      	movs	r2, #1
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	607b      	str	r3, [r7, #4]
 8000dd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dd6:	4b09      	ldr	r3, [pc, #36]	; (8000dfc <HAL_MspInit+0x44>)
 8000dd8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000dda:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <HAL_MspInit+0x44>)
 8000ddc:	2180      	movs	r1, #128	; 0x80
 8000dde:	0549      	lsls	r1, r1, #21
 8000de0:	430a      	orrs	r2, r1
 8000de2:	63da      	str	r2, [r3, #60]	; 0x3c
 8000de4:	4b05      	ldr	r3, [pc, #20]	; (8000dfc <HAL_MspInit+0x44>)
 8000de6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000de8:	2380      	movs	r3, #128	; 0x80
 8000dea:	055b      	lsls	r3, r3, #21
 8000dec:	4013      	ands	r3, r2
 8000dee:	603b      	str	r3, [r7, #0]
 8000df0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000df2:	46c0      	nop			; (mov r8, r8)
 8000df4:	46bd      	mov	sp, r7
 8000df6:	b002      	add	sp, #8
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	46c0      	nop			; (mov r8, r8)
 8000dfc:	40021000 	.word	0x40021000

08000e00 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000e00:	b590      	push	{r4, r7, lr}
 8000e02:	b08f      	sub	sp, #60	; 0x3c
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e08:	2410      	movs	r4, #16
 8000e0a:	193b      	adds	r3, r7, r4
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	2328      	movs	r3, #40	; 0x28
 8000e10:	001a      	movs	r2, r3
 8000e12:	2100      	movs	r1, #0
 8000e14:	f004 f88a 	bl	8004f2c <memset>
  if(hrtc->Instance==RTC)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a19      	ldr	r2, [pc, #100]	; (8000e84 <HAL_RTC_MspInit+0x84>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d12c      	bne.n	8000e7c <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000e22:	193b      	adds	r3, r7, r4
 8000e24:	2280      	movs	r2, #128	; 0x80
 8000e26:	0292      	lsls	r2, r2, #10
 8000e28:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000e2a:	193b      	adds	r3, r7, r4
 8000e2c:	2280      	movs	r2, #128	; 0x80
 8000e2e:	0092      	lsls	r2, r2, #2
 8000e30:	625a      	str	r2, [r3, #36]	; 0x24

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e32:	193b      	adds	r3, r7, r4
 8000e34:	0018      	movs	r0, r3
 8000e36:	f001 fd57 	bl	80028e8 <HAL_RCCEx_PeriphCLKConfig>
 8000e3a:	1e03      	subs	r3, r0, #0
 8000e3c:	d001      	beq.n	8000e42 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000e3e:	f7ff ffb5 	bl	8000dac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000e42:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <HAL_RTC_MspInit+0x88>)
 8000e44:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000e46:	4b10      	ldr	r3, [pc, #64]	; (8000e88 <HAL_RTC_MspInit+0x88>)
 8000e48:	2180      	movs	r1, #128	; 0x80
 8000e4a:	0209      	lsls	r1, r1, #8
 8000e4c:	430a      	orrs	r2, r1
 8000e4e:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000e50:	4b0d      	ldr	r3, [pc, #52]	; (8000e88 <HAL_RTC_MspInit+0x88>)
 8000e52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e54:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <HAL_RTC_MspInit+0x88>)
 8000e56:	2180      	movs	r1, #128	; 0x80
 8000e58:	00c9      	lsls	r1, r1, #3
 8000e5a:	430a      	orrs	r2, r1
 8000e5c:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e5e:	4b0a      	ldr	r3, [pc, #40]	; (8000e88 <HAL_RTC_MspInit+0x88>)
 8000e60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e62:	2380      	movs	r3, #128	; 0x80
 8000e64:	00db      	lsls	r3, r3, #3
 8000e66:	4013      	ands	r3, r2
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	2100      	movs	r1, #0
 8000e70:	2002      	movs	r0, #2
 8000e72:	f000 fb57 	bl	8001524 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8000e76:	2002      	movs	r0, #2
 8000e78:	f000 fb69 	bl	800154e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000e7c:	46c0      	nop			; (mov r8, r8)
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	b00f      	add	sp, #60	; 0x3c
 8000e82:	bd90      	pop	{r4, r7, pc}
 8000e84:	40002800 	.word	0x40002800
 8000e88:	40021000 	.word	0x40021000

08000e8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a0e      	ldr	r2, [pc, #56]	; (8000ed4 <HAL_TIM_Base_MspInit+0x48>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d115      	bne.n	8000eca <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000e9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ed8 <HAL_TIM_Base_MspInit+0x4c>)
 8000ea0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ea2:	4b0d      	ldr	r3, [pc, #52]	; (8000ed8 <HAL_TIM_Base_MspInit+0x4c>)
 8000ea4:	2180      	movs	r1, #128	; 0x80
 8000ea6:	0209      	lsls	r1, r1, #8
 8000ea8:	430a      	orrs	r2, r1
 8000eaa:	641a      	str	r2, [r3, #64]	; 0x40
 8000eac:	4b0a      	ldr	r3, [pc, #40]	; (8000ed8 <HAL_TIM_Base_MspInit+0x4c>)
 8000eae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000eb0:	2380      	movs	r3, #128	; 0x80
 8000eb2:	021b      	lsls	r3, r3, #8
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	2013      	movs	r0, #19
 8000ec0:	f000 fb30 	bl	8001524 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8000ec4:	2013      	movs	r0, #19
 8000ec6:	f000 fb42 	bl	800154e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000eca:	46c0      	nop			; (mov r8, r8)
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	b004      	add	sp, #16
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	46c0      	nop			; (mov r8, r8)
 8000ed4:	40002000 	.word	0x40002000
 8000ed8:	40021000 	.word	0x40021000

08000edc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000edc:	b590      	push	{r4, r7, lr}
 8000ede:	b095      	sub	sp, #84	; 0x54
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee4:	233c      	movs	r3, #60	; 0x3c
 8000ee6:	18fb      	adds	r3, r7, r3
 8000ee8:	0018      	movs	r0, r3
 8000eea:	2314      	movs	r3, #20
 8000eec:	001a      	movs	r2, r3
 8000eee:	2100      	movs	r1, #0
 8000ef0:	f004 f81c 	bl	8004f2c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ef4:	2414      	movs	r4, #20
 8000ef6:	193b      	adds	r3, r7, r4
 8000ef8:	0018      	movs	r0, r3
 8000efa:	2328      	movs	r3, #40	; 0x28
 8000efc:	001a      	movs	r2, r3
 8000efe:	2100      	movs	r1, #0
 8000f00:	f004 f814 	bl	8004f2c <memset>
  if(huart->Instance==USART1)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a3c      	ldr	r2, [pc, #240]	; (8000ffc <HAL_UART_MspInit+0x120>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d171      	bne.n	8000ff2 <HAL_UART_MspInit+0x116>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f0e:	193b      	adds	r3, r7, r4
 8000f10:	2201      	movs	r2, #1
 8000f12:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000f14:	193b      	adds	r3, r7, r4
 8000f16:	2200      	movs	r2, #0
 8000f18:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f1a:	193b      	adds	r3, r7, r4
 8000f1c:	0018      	movs	r0, r3
 8000f1e:	f001 fce3 	bl	80028e8 <HAL_RCCEx_PeriphCLKConfig>
 8000f22:	1e03      	subs	r3, r0, #0
 8000f24:	d001      	beq.n	8000f2a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000f26:	f7ff ff41 	bl	8000dac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f2a:	4b35      	ldr	r3, [pc, #212]	; (8001000 <HAL_UART_MspInit+0x124>)
 8000f2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f2e:	4b34      	ldr	r3, [pc, #208]	; (8001000 <HAL_UART_MspInit+0x124>)
 8000f30:	2180      	movs	r1, #128	; 0x80
 8000f32:	01c9      	lsls	r1, r1, #7
 8000f34:	430a      	orrs	r2, r1
 8000f36:	641a      	str	r2, [r3, #64]	; 0x40
 8000f38:	4b31      	ldr	r3, [pc, #196]	; (8001000 <HAL_UART_MspInit+0x124>)
 8000f3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f3c:	2380      	movs	r3, #128	; 0x80
 8000f3e:	01db      	lsls	r3, r3, #7
 8000f40:	4013      	ands	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]
 8000f44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f46:	4b2e      	ldr	r3, [pc, #184]	; (8001000 <HAL_UART_MspInit+0x124>)
 8000f48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f4a:	4b2d      	ldr	r3, [pc, #180]	; (8001000 <HAL_UART_MspInit+0x124>)
 8000f4c:	2101      	movs	r1, #1
 8000f4e:	430a      	orrs	r2, r1
 8000f50:	635a      	str	r2, [r3, #52]	; 0x34
 8000f52:	4b2b      	ldr	r3, [pc, #172]	; (8001000 <HAL_UART_MspInit+0x124>)
 8000f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f56:	2201      	movs	r2, #1
 8000f58:	4013      	ands	r3, r2
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f5e:	213c      	movs	r1, #60	; 0x3c
 8000f60:	187b      	adds	r3, r7, r1
 8000f62:	22c0      	movs	r2, #192	; 0xc0
 8000f64:	00d2      	lsls	r2, r2, #3
 8000f66:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f68:	187b      	adds	r3, r7, r1
 8000f6a:	2202      	movs	r2, #2
 8000f6c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6e:	187b      	adds	r3, r7, r1
 8000f70:	2200      	movs	r2, #0
 8000f72:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f74:	187b      	adds	r3, r7, r1
 8000f76:	2200      	movs	r2, #0
 8000f78:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000f7a:	187b      	adds	r3, r7, r1
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f80:	187a      	adds	r2, r7, r1
 8000f82:	23a0      	movs	r3, #160	; 0xa0
 8000f84:	05db      	lsls	r3, r3, #23
 8000f86:	0011      	movs	r1, r2
 8000f88:	0018      	movs	r0, r3
 8000f8a:	f000 fe1b 	bl	8001bc4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8000f8e:	4b1d      	ldr	r3, [pc, #116]	; (8001004 <HAL_UART_MspInit+0x128>)
 8000f90:	4a1d      	ldr	r2, [pc, #116]	; (8001008 <HAL_UART_MspInit+0x12c>)
 8000f92:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8000f94:	4b1b      	ldr	r3, [pc, #108]	; (8001004 <HAL_UART_MspInit+0x128>)
 8000f96:	2232      	movs	r2, #50	; 0x32
 8000f98:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f9a:	4b1a      	ldr	r3, [pc, #104]	; (8001004 <HAL_UART_MspInit+0x128>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fa0:	4b18      	ldr	r3, [pc, #96]	; (8001004 <HAL_UART_MspInit+0x128>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fa6:	4b17      	ldr	r3, [pc, #92]	; (8001004 <HAL_UART_MspInit+0x128>)
 8000fa8:	2280      	movs	r2, #128	; 0x80
 8000faa:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fac:	4b15      	ldr	r3, [pc, #84]	; (8001004 <HAL_UART_MspInit+0x128>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fb2:	4b14      	ldr	r3, [pc, #80]	; (8001004 <HAL_UART_MspInit+0x128>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000fb8:	4b12      	ldr	r3, [pc, #72]	; (8001004 <HAL_UART_MspInit+0x128>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000fbe:	4b11      	ldr	r3, [pc, #68]	; (8001004 <HAL_UART_MspInit+0x128>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000fc4:	4b0f      	ldr	r3, [pc, #60]	; (8001004 <HAL_UART_MspInit+0x128>)
 8000fc6:	0018      	movs	r0, r3
 8000fc8:	f000 fade 	bl	8001588 <HAL_DMA_Init>
 8000fcc:	1e03      	subs	r3, r0, #0
 8000fce:	d001      	beq.n	8000fd4 <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 8000fd0:	f7ff feec 	bl	8000dac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2180      	movs	r1, #128	; 0x80
 8000fd8:	4a0a      	ldr	r2, [pc, #40]	; (8001004 <HAL_UART_MspInit+0x128>)
 8000fda:	505a      	str	r2, [r3, r1]
 8000fdc:	4b09      	ldr	r3, [pc, #36]	; (8001004 <HAL_UART_MspInit+0x128>)
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	201b      	movs	r0, #27
 8000fe8:	f000 fa9c 	bl	8001524 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000fec:	201b      	movs	r0, #27
 8000fee:	f000 faae 	bl	800154e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ff2:	46c0      	nop			; (mov r8, r8)
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	b015      	add	sp, #84	; 0x54
 8000ff8:	bd90      	pop	{r4, r7, pc}
 8000ffa:	46c0      	nop			; (mov r8, r8)
 8000ffc:	40013800 	.word	0x40013800
 8001000:	40021000 	.word	0x40021000
 8001004:	200001fc 	.word	0x200001fc
 8001008:	40020008 	.word	0x40020008

0800100c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001010:	e7fe      	b.n	8001010 <NMI_Handler+0x4>

08001012 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001016:	e7fe      	b.n	8001016 <HardFault_Handler+0x4>

08001018 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800101c:	46c0      	nop			; (mov r8, r8)
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001026:	46c0      	nop			; (mov r8, r8)
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}

0800102c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001030:	f000 f98c 	bl	800134c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001034:	46c0      	nop			; (mov r8, r8)
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
	...

0800103c <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001040:	4b03      	ldr	r3, [pc, #12]	; (8001050 <RTC_TAMP_IRQHandler+0x14>)
 8001042:	0018      	movs	r0, r3
 8001044:	f001 ffb4 	bl	8002fb0 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8001048:	46c0      	nop			; (mov r8, r8)
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	46c0      	nop			; (mov r8, r8)
 8001050:	200000f0 	.word	0x200000f0

08001054 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001058:	4b03      	ldr	r3, [pc, #12]	; (8001068 <DMA1_Channel1_IRQHandler+0x14>)
 800105a:	0018      	movs	r0, r3
 800105c:	f000 fc70 	bl	8001940 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001060:	46c0      	nop			; (mov r8, r8)
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	46c0      	nop			; (mov r8, r8)
 8001068:	200001fc 	.word	0x200001fc

0800106c <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001070:	4b03      	ldr	r3, [pc, #12]	; (8001080 <TIM14_IRQHandler+0x14>)
 8001072:	0018      	movs	r0, r3
 8001074:	f002 f89c 	bl	80031b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8001078:	46c0      	nop			; (mov r8, r8)
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	46c0      	nop			; (mov r8, r8)
 8001080:	2000011c 	.word	0x2000011c

08001084 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001088:	4b03      	ldr	r3, [pc, #12]	; (8001098 <USART1_IRQHandler+0x14>)
 800108a:	0018      	movs	r0, r3
 800108c:	f002 fb62 	bl	8003754 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001090:	46c0      	nop			; (mov r8, r8)
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	46c0      	nop			; (mov r8, r8)
 8001098:	20000168 	.word	0x20000168

0800109c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
	return 1;
 80010a0:	2301      	movs	r3, #1
}
 80010a2:	0018      	movs	r0, r3
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <_kill>:

int _kill(int pid, int sig)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80010b2:	f003 fefd 	bl	8004eb0 <__errno>
 80010b6:	0003      	movs	r3, r0
 80010b8:	2216      	movs	r2, #22
 80010ba:	601a      	str	r2, [r3, #0]
	return -1;
 80010bc:	2301      	movs	r3, #1
 80010be:	425b      	negs	r3, r3
}
 80010c0:	0018      	movs	r0, r3
 80010c2:	46bd      	mov	sp, r7
 80010c4:	b002      	add	sp, #8
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <_exit>:

void _exit (int status)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80010d0:	2301      	movs	r3, #1
 80010d2:	425a      	negs	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	0011      	movs	r1, r2
 80010d8:	0018      	movs	r0, r3
 80010da:	f7ff ffe5 	bl	80010a8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80010de:	e7fe      	b.n	80010de <_exit+0x16>

080010e0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]
 80010f0:	e00a      	b.n	8001108 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80010f2:	e000      	b.n	80010f6 <_read+0x16>
 80010f4:	bf00      	nop
 80010f6:	0001      	movs	r1, r0
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	1c5a      	adds	r2, r3, #1
 80010fc:	60ba      	str	r2, [r7, #8]
 80010fe:	b2ca      	uxtb	r2, r1
 8001100:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	3301      	adds	r3, #1
 8001106:	617b      	str	r3, [r7, #20]
 8001108:	697a      	ldr	r2, [r7, #20]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	429a      	cmp	r2, r3
 800110e:	dbf0      	blt.n	80010f2 <_read+0x12>
	}

return len;
 8001110:	687b      	ldr	r3, [r7, #4]
}
 8001112:	0018      	movs	r0, r3
 8001114:	46bd      	mov	sp, r7
 8001116:	b006      	add	sp, #24
 8001118:	bd80      	pop	{r7, pc}

0800111a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	b086      	sub	sp, #24
 800111e:	af00      	add	r7, sp, #0
 8001120:	60f8      	str	r0, [r7, #12]
 8001122:	60b9      	str	r1, [r7, #8]
 8001124:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001126:	2300      	movs	r3, #0
 8001128:	617b      	str	r3, [r7, #20]
 800112a:	e009      	b.n	8001140 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	1c5a      	adds	r2, r3, #1
 8001130:	60ba      	str	r2, [r7, #8]
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	0018      	movs	r0, r3
 8001136:	e000      	b.n	800113a <_write+0x20>
 8001138:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	3301      	adds	r3, #1
 800113e:	617b      	str	r3, [r7, #20]
 8001140:	697a      	ldr	r2, [r7, #20]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	429a      	cmp	r2, r3
 8001146:	dbf1      	blt.n	800112c <_write+0x12>
	}
	return len;
 8001148:	687b      	ldr	r3, [r7, #4]
}
 800114a:	0018      	movs	r0, r3
 800114c:	46bd      	mov	sp, r7
 800114e:	b006      	add	sp, #24
 8001150:	bd80      	pop	{r7, pc}

08001152 <_close>:

int _close(int file)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b082      	sub	sp, #8
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
	return -1;
 800115a:	2301      	movs	r3, #1
 800115c:	425b      	negs	r3, r3
}
 800115e:	0018      	movs	r0, r3
 8001160:	46bd      	mov	sp, r7
 8001162:	b002      	add	sp, #8
 8001164:	bd80      	pop	{r7, pc}

08001166 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b082      	sub	sp, #8
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
 800116e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	2280      	movs	r2, #128	; 0x80
 8001174:	0192      	lsls	r2, r2, #6
 8001176:	605a      	str	r2, [r3, #4]
	return 0;
 8001178:	2300      	movs	r3, #0
}
 800117a:	0018      	movs	r0, r3
 800117c:	46bd      	mov	sp, r7
 800117e:	b002      	add	sp, #8
 8001180:	bd80      	pop	{r7, pc}

08001182 <_isatty>:

int _isatty(int file)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	b082      	sub	sp, #8
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
	return 1;
 800118a:	2301      	movs	r3, #1
}
 800118c:	0018      	movs	r0, r3
 800118e:	46bd      	mov	sp, r7
 8001190:	b002      	add	sp, #8
 8001192:	bd80      	pop	{r7, pc}

08001194 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	607a      	str	r2, [r7, #4]
	return 0;
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	0018      	movs	r0, r3
 80011a4:	46bd      	mov	sp, r7
 80011a6:	b004      	add	sp, #16
 80011a8:	bd80      	pop	{r7, pc}
	...

080011ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b086      	sub	sp, #24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011b4:	4a14      	ldr	r2, [pc, #80]	; (8001208 <_sbrk+0x5c>)
 80011b6:	4b15      	ldr	r3, [pc, #84]	; (800120c <_sbrk+0x60>)
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011c0:	4b13      	ldr	r3, [pc, #76]	; (8001210 <_sbrk+0x64>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d102      	bne.n	80011ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011c8:	4b11      	ldr	r3, [pc, #68]	; (8001210 <_sbrk+0x64>)
 80011ca:	4a12      	ldr	r2, [pc, #72]	; (8001214 <_sbrk+0x68>)
 80011cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011ce:	4b10      	ldr	r3, [pc, #64]	; (8001210 <_sbrk+0x64>)
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	18d3      	adds	r3, r2, r3
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d207      	bcs.n	80011ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011dc:	f003 fe68 	bl	8004eb0 <__errno>
 80011e0:	0003      	movs	r3, r0
 80011e2:	220c      	movs	r2, #12
 80011e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011e6:	2301      	movs	r3, #1
 80011e8:	425b      	negs	r3, r3
 80011ea:	e009      	b.n	8001200 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011ec:	4b08      	ldr	r3, [pc, #32]	; (8001210 <_sbrk+0x64>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011f2:	4b07      	ldr	r3, [pc, #28]	; (8001210 <_sbrk+0x64>)
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	18d2      	adds	r2, r2, r3
 80011fa:	4b05      	ldr	r3, [pc, #20]	; (8001210 <_sbrk+0x64>)
 80011fc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80011fe:	68fb      	ldr	r3, [r7, #12]
}
 8001200:	0018      	movs	r0, r3
 8001202:	46bd      	mov	sp, r7
 8001204:	b006      	add	sp, #24
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20002000 	.word	0x20002000
 800120c:	00000400 	.word	0x00000400
 8001210:	200003bc 	.word	0x200003bc
 8001214:	200003d8 	.word	0x200003d8

08001218 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800121c:	46c0      	nop			; (mov r8, r8)
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
	...

08001224 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001224:	480d      	ldr	r0, [pc, #52]	; (800125c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001226:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001228:	f7ff fff6 	bl	8001218 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800122c:	480c      	ldr	r0, [pc, #48]	; (8001260 <LoopForever+0x6>)
  ldr r1, =_edata
 800122e:	490d      	ldr	r1, [pc, #52]	; (8001264 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001230:	4a0d      	ldr	r2, [pc, #52]	; (8001268 <LoopForever+0xe>)
  movs r3, #0
 8001232:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001234:	e002      	b.n	800123c <LoopCopyDataInit>

08001236 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001236:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001238:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800123a:	3304      	adds	r3, #4

0800123c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800123c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800123e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001240:	d3f9      	bcc.n	8001236 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001242:	4a0a      	ldr	r2, [pc, #40]	; (800126c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001244:	4c0a      	ldr	r4, [pc, #40]	; (8001270 <LoopForever+0x16>)
  movs r3, #0
 8001246:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001248:	e001      	b.n	800124e <LoopFillZerobss>

0800124a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800124a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800124c:	3204      	adds	r2, #4

0800124e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800124e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001250:	d3fb      	bcc.n	800124a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001252:	f003 fe33 	bl	8004ebc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001256:	f7ff f9f3 	bl	8000640 <main>

0800125a <LoopForever>:

LoopForever:
  b LoopForever
 800125a:	e7fe      	b.n	800125a <LoopForever>
  ldr   r0, =_estack
 800125c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001260:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001264:	200000d4 	.word	0x200000d4
  ldr r2, =_sidata
 8001268:	080069b8 	.word	0x080069b8
  ldr r2, =_sbss
 800126c:	200000d4 	.word	0x200000d4
  ldr r4, =_ebss
 8001270:	200003d4 	.word	0x200003d4

08001274 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001274:	e7fe      	b.n	8001274 <ADC1_IRQHandler>
	...

08001278 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800127e:	1dfb      	adds	r3, r7, #7
 8001280:	2200      	movs	r2, #0
 8001282:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001284:	4b0b      	ldr	r3, [pc, #44]	; (80012b4 <HAL_Init+0x3c>)
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	4b0a      	ldr	r3, [pc, #40]	; (80012b4 <HAL_Init+0x3c>)
 800128a:	2180      	movs	r1, #128	; 0x80
 800128c:	0049      	lsls	r1, r1, #1
 800128e:	430a      	orrs	r2, r1
 8001290:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001292:	2000      	movs	r0, #0
 8001294:	f000 f810 	bl	80012b8 <HAL_InitTick>
 8001298:	1e03      	subs	r3, r0, #0
 800129a:	d003      	beq.n	80012a4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800129c:	1dfb      	adds	r3, r7, #7
 800129e:	2201      	movs	r2, #1
 80012a0:	701a      	strb	r2, [r3, #0]
 80012a2:	e001      	b.n	80012a8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80012a4:	f7ff fd88 	bl	8000db8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012a8:	1dfb      	adds	r3, r7, #7
 80012aa:	781b      	ldrb	r3, [r3, #0]
}
 80012ac:	0018      	movs	r0, r3
 80012ae:	46bd      	mov	sp, r7
 80012b0:	b002      	add	sp, #8
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	40022000 	.word	0x40022000

080012b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012b8:	b590      	push	{r4, r7, lr}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012c0:	230f      	movs	r3, #15
 80012c2:	18fb      	adds	r3, r7, r3
 80012c4:	2200      	movs	r2, #0
 80012c6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80012c8:	4b1d      	ldr	r3, [pc, #116]	; (8001340 <HAL_InitTick+0x88>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d02b      	beq.n	8001328 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80012d0:	4b1c      	ldr	r3, [pc, #112]	; (8001344 <HAL_InitTick+0x8c>)
 80012d2:	681c      	ldr	r4, [r3, #0]
 80012d4:	4b1a      	ldr	r3, [pc, #104]	; (8001340 <HAL_InitTick+0x88>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	0019      	movs	r1, r3
 80012da:	23fa      	movs	r3, #250	; 0xfa
 80012dc:	0098      	lsls	r0, r3, #2
 80012de:	f7fe ff23 	bl	8000128 <__udivsi3>
 80012e2:	0003      	movs	r3, r0
 80012e4:	0019      	movs	r1, r3
 80012e6:	0020      	movs	r0, r4
 80012e8:	f7fe ff1e 	bl	8000128 <__udivsi3>
 80012ec:	0003      	movs	r3, r0
 80012ee:	0018      	movs	r0, r3
 80012f0:	f000 f93d 	bl	800156e <HAL_SYSTICK_Config>
 80012f4:	1e03      	subs	r3, r0, #0
 80012f6:	d112      	bne.n	800131e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2b03      	cmp	r3, #3
 80012fc:	d80a      	bhi.n	8001314 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012fe:	6879      	ldr	r1, [r7, #4]
 8001300:	2301      	movs	r3, #1
 8001302:	425b      	negs	r3, r3
 8001304:	2200      	movs	r2, #0
 8001306:	0018      	movs	r0, r3
 8001308:	f000 f90c 	bl	8001524 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800130c:	4b0e      	ldr	r3, [pc, #56]	; (8001348 <HAL_InitTick+0x90>)
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	e00d      	b.n	8001330 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001314:	230f      	movs	r3, #15
 8001316:	18fb      	adds	r3, r7, r3
 8001318:	2201      	movs	r2, #1
 800131a:	701a      	strb	r2, [r3, #0]
 800131c:	e008      	b.n	8001330 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800131e:	230f      	movs	r3, #15
 8001320:	18fb      	adds	r3, r7, r3
 8001322:	2201      	movs	r2, #1
 8001324:	701a      	strb	r2, [r3, #0]
 8001326:	e003      	b.n	8001330 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001328:	230f      	movs	r3, #15
 800132a:	18fb      	adds	r3, r7, r3
 800132c:	2201      	movs	r2, #1
 800132e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001330:	230f      	movs	r3, #15
 8001332:	18fb      	adds	r3, r7, r3
 8001334:	781b      	ldrb	r3, [r3, #0]
}
 8001336:	0018      	movs	r0, r3
 8001338:	46bd      	mov	sp, r7
 800133a:	b005      	add	sp, #20
 800133c:	bd90      	pop	{r4, r7, pc}
 800133e:	46c0      	nop			; (mov r8, r8)
 8001340:	2000006c 	.word	0x2000006c
 8001344:	20000064 	.word	0x20000064
 8001348:	20000068 	.word	0x20000068

0800134c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001350:	4b05      	ldr	r3, [pc, #20]	; (8001368 <HAL_IncTick+0x1c>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	001a      	movs	r2, r3
 8001356:	4b05      	ldr	r3, [pc, #20]	; (800136c <HAL_IncTick+0x20>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	18d2      	adds	r2, r2, r3
 800135c:	4b03      	ldr	r3, [pc, #12]	; (800136c <HAL_IncTick+0x20>)
 800135e:	601a      	str	r2, [r3, #0]
}
 8001360:	46c0      	nop			; (mov r8, r8)
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	46c0      	nop			; (mov r8, r8)
 8001368:	2000006c 	.word	0x2000006c
 800136c:	200003c0 	.word	0x200003c0

08001370 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  return uwTick;
 8001374:	4b02      	ldr	r3, [pc, #8]	; (8001380 <HAL_GetTick+0x10>)
 8001376:	681b      	ldr	r3, [r3, #0]
}
 8001378:	0018      	movs	r0, r3
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	46c0      	nop			; (mov r8, r8)
 8001380:	200003c0 	.word	0x200003c0

08001384 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800138c:	f7ff fff0 	bl	8001370 <HAL_GetTick>
 8001390:	0003      	movs	r3, r0
 8001392:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	3301      	adds	r3, #1
 800139c:	d005      	beq.n	80013aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800139e:	4b0a      	ldr	r3, [pc, #40]	; (80013c8 <HAL_Delay+0x44>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	001a      	movs	r2, r3
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	189b      	adds	r3, r3, r2
 80013a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013aa:	46c0      	nop			; (mov r8, r8)
 80013ac:	f7ff ffe0 	bl	8001370 <HAL_GetTick>
 80013b0:	0002      	movs	r2, r0
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	68fa      	ldr	r2, [r7, #12]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d8f7      	bhi.n	80013ac <HAL_Delay+0x28>
  {
  }
}
 80013bc:	46c0      	nop			; (mov r8, r8)
 80013be:	46c0      	nop			; (mov r8, r8)
 80013c0:	46bd      	mov	sp, r7
 80013c2:	b004      	add	sp, #16
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	46c0      	nop			; (mov r8, r8)
 80013c8:	2000006c 	.word	0x2000006c

080013cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	0002      	movs	r2, r0
 80013d4:	1dfb      	adds	r3, r7, #7
 80013d6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80013d8:	1dfb      	adds	r3, r7, #7
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b7f      	cmp	r3, #127	; 0x7f
 80013de:	d809      	bhi.n	80013f4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013e0:	1dfb      	adds	r3, r7, #7
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	001a      	movs	r2, r3
 80013e6:	231f      	movs	r3, #31
 80013e8:	401a      	ands	r2, r3
 80013ea:	4b04      	ldr	r3, [pc, #16]	; (80013fc <__NVIC_EnableIRQ+0x30>)
 80013ec:	2101      	movs	r1, #1
 80013ee:	4091      	lsls	r1, r2
 80013f0:	000a      	movs	r2, r1
 80013f2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80013f4:	46c0      	nop			; (mov r8, r8)
 80013f6:	46bd      	mov	sp, r7
 80013f8:	b002      	add	sp, #8
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	e000e100 	.word	0xe000e100

08001400 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001400:	b590      	push	{r4, r7, lr}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	0002      	movs	r2, r0
 8001408:	6039      	str	r1, [r7, #0]
 800140a:	1dfb      	adds	r3, r7, #7
 800140c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800140e:	1dfb      	adds	r3, r7, #7
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	2b7f      	cmp	r3, #127	; 0x7f
 8001414:	d828      	bhi.n	8001468 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001416:	4a2f      	ldr	r2, [pc, #188]	; (80014d4 <__NVIC_SetPriority+0xd4>)
 8001418:	1dfb      	adds	r3, r7, #7
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	b25b      	sxtb	r3, r3
 800141e:	089b      	lsrs	r3, r3, #2
 8001420:	33c0      	adds	r3, #192	; 0xc0
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	589b      	ldr	r3, [r3, r2]
 8001426:	1dfa      	adds	r2, r7, #7
 8001428:	7812      	ldrb	r2, [r2, #0]
 800142a:	0011      	movs	r1, r2
 800142c:	2203      	movs	r2, #3
 800142e:	400a      	ands	r2, r1
 8001430:	00d2      	lsls	r2, r2, #3
 8001432:	21ff      	movs	r1, #255	; 0xff
 8001434:	4091      	lsls	r1, r2
 8001436:	000a      	movs	r2, r1
 8001438:	43d2      	mvns	r2, r2
 800143a:	401a      	ands	r2, r3
 800143c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	019b      	lsls	r3, r3, #6
 8001442:	22ff      	movs	r2, #255	; 0xff
 8001444:	401a      	ands	r2, r3
 8001446:	1dfb      	adds	r3, r7, #7
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	0018      	movs	r0, r3
 800144c:	2303      	movs	r3, #3
 800144e:	4003      	ands	r3, r0
 8001450:	00db      	lsls	r3, r3, #3
 8001452:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001454:	481f      	ldr	r0, [pc, #124]	; (80014d4 <__NVIC_SetPriority+0xd4>)
 8001456:	1dfb      	adds	r3, r7, #7
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	b25b      	sxtb	r3, r3
 800145c:	089b      	lsrs	r3, r3, #2
 800145e:	430a      	orrs	r2, r1
 8001460:	33c0      	adds	r3, #192	; 0xc0
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001466:	e031      	b.n	80014cc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001468:	4a1b      	ldr	r2, [pc, #108]	; (80014d8 <__NVIC_SetPriority+0xd8>)
 800146a:	1dfb      	adds	r3, r7, #7
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	0019      	movs	r1, r3
 8001470:	230f      	movs	r3, #15
 8001472:	400b      	ands	r3, r1
 8001474:	3b08      	subs	r3, #8
 8001476:	089b      	lsrs	r3, r3, #2
 8001478:	3306      	adds	r3, #6
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	18d3      	adds	r3, r2, r3
 800147e:	3304      	adds	r3, #4
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	1dfa      	adds	r2, r7, #7
 8001484:	7812      	ldrb	r2, [r2, #0]
 8001486:	0011      	movs	r1, r2
 8001488:	2203      	movs	r2, #3
 800148a:	400a      	ands	r2, r1
 800148c:	00d2      	lsls	r2, r2, #3
 800148e:	21ff      	movs	r1, #255	; 0xff
 8001490:	4091      	lsls	r1, r2
 8001492:	000a      	movs	r2, r1
 8001494:	43d2      	mvns	r2, r2
 8001496:	401a      	ands	r2, r3
 8001498:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	019b      	lsls	r3, r3, #6
 800149e:	22ff      	movs	r2, #255	; 0xff
 80014a0:	401a      	ands	r2, r3
 80014a2:	1dfb      	adds	r3, r7, #7
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	0018      	movs	r0, r3
 80014a8:	2303      	movs	r3, #3
 80014aa:	4003      	ands	r3, r0
 80014ac:	00db      	lsls	r3, r3, #3
 80014ae:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014b0:	4809      	ldr	r0, [pc, #36]	; (80014d8 <__NVIC_SetPriority+0xd8>)
 80014b2:	1dfb      	adds	r3, r7, #7
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	001c      	movs	r4, r3
 80014b8:	230f      	movs	r3, #15
 80014ba:	4023      	ands	r3, r4
 80014bc:	3b08      	subs	r3, #8
 80014be:	089b      	lsrs	r3, r3, #2
 80014c0:	430a      	orrs	r2, r1
 80014c2:	3306      	adds	r3, #6
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	18c3      	adds	r3, r0, r3
 80014c8:	3304      	adds	r3, #4
 80014ca:	601a      	str	r2, [r3, #0]
}
 80014cc:	46c0      	nop			; (mov r8, r8)
 80014ce:	46bd      	mov	sp, r7
 80014d0:	b003      	add	sp, #12
 80014d2:	bd90      	pop	{r4, r7, pc}
 80014d4:	e000e100 	.word	0xe000e100
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	1e5a      	subs	r2, r3, #1
 80014e8:	2380      	movs	r3, #128	; 0x80
 80014ea:	045b      	lsls	r3, r3, #17
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d301      	bcc.n	80014f4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014f0:	2301      	movs	r3, #1
 80014f2:	e010      	b.n	8001516 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014f4:	4b0a      	ldr	r3, [pc, #40]	; (8001520 <SysTick_Config+0x44>)
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	3a01      	subs	r2, #1
 80014fa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014fc:	2301      	movs	r3, #1
 80014fe:	425b      	negs	r3, r3
 8001500:	2103      	movs	r1, #3
 8001502:	0018      	movs	r0, r3
 8001504:	f7ff ff7c 	bl	8001400 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001508:	4b05      	ldr	r3, [pc, #20]	; (8001520 <SysTick_Config+0x44>)
 800150a:	2200      	movs	r2, #0
 800150c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800150e:	4b04      	ldr	r3, [pc, #16]	; (8001520 <SysTick_Config+0x44>)
 8001510:	2207      	movs	r2, #7
 8001512:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001514:	2300      	movs	r3, #0
}
 8001516:	0018      	movs	r0, r3
 8001518:	46bd      	mov	sp, r7
 800151a:	b002      	add	sp, #8
 800151c:	bd80      	pop	{r7, pc}
 800151e:	46c0      	nop			; (mov r8, r8)
 8001520:	e000e010 	.word	0xe000e010

08001524 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	60b9      	str	r1, [r7, #8]
 800152c:	607a      	str	r2, [r7, #4]
 800152e:	210f      	movs	r1, #15
 8001530:	187b      	adds	r3, r7, r1
 8001532:	1c02      	adds	r2, r0, #0
 8001534:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001536:	68ba      	ldr	r2, [r7, #8]
 8001538:	187b      	adds	r3, r7, r1
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	b25b      	sxtb	r3, r3
 800153e:	0011      	movs	r1, r2
 8001540:	0018      	movs	r0, r3
 8001542:	f7ff ff5d 	bl	8001400 <__NVIC_SetPriority>
}
 8001546:	46c0      	nop			; (mov r8, r8)
 8001548:	46bd      	mov	sp, r7
 800154a:	b004      	add	sp, #16
 800154c:	bd80      	pop	{r7, pc}

0800154e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b082      	sub	sp, #8
 8001552:	af00      	add	r7, sp, #0
 8001554:	0002      	movs	r2, r0
 8001556:	1dfb      	adds	r3, r7, #7
 8001558:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800155a:	1dfb      	adds	r3, r7, #7
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	b25b      	sxtb	r3, r3
 8001560:	0018      	movs	r0, r3
 8001562:	f7ff ff33 	bl	80013cc <__NVIC_EnableIRQ>
}
 8001566:	46c0      	nop			; (mov r8, r8)
 8001568:	46bd      	mov	sp, r7
 800156a:	b002      	add	sp, #8
 800156c:	bd80      	pop	{r7, pc}

0800156e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b082      	sub	sp, #8
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	0018      	movs	r0, r3
 800157a:	f7ff ffaf 	bl	80014dc <SysTick_Config>
 800157e:	0003      	movs	r3, r0
}
 8001580:	0018      	movs	r0, r3
 8001582:	46bd      	mov	sp, r7
 8001584:	b002      	add	sp, #8
 8001586:	bd80      	pop	{r7, pc}

08001588 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d101      	bne.n	800159a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e077      	b.n	800168a <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a3d      	ldr	r2, [pc, #244]	; (8001694 <HAL_DMA_Init+0x10c>)
 80015a0:	4694      	mov	ip, r2
 80015a2:	4463      	add	r3, ip
 80015a4:	2114      	movs	r1, #20
 80015a6:	0018      	movs	r0, r3
 80015a8:	f7fe fdbe 	bl	8000128 <__udivsi3>
 80015ac:	0003      	movs	r3, r0
 80015ae:	009a      	lsls	r2, r3, #2
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2225      	movs	r2, #37	; 0x25
 80015b8:	2102      	movs	r1, #2
 80015ba:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4934      	ldr	r1, [pc, #208]	; (8001698 <HAL_DMA_Init+0x110>)
 80015c8:	400a      	ands	r2, r1
 80015ca:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	6819      	ldr	r1, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	689a      	ldr	r2, [r3, #8]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	68db      	ldr	r3, [r3, #12]
 80015da:	431a      	orrs	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	691b      	ldr	r3, [r3, #16]
 80015e0:	431a      	orrs	r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	695b      	ldr	r3, [r3, #20]
 80015e6:	431a      	orrs	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	431a      	orrs	r2, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	69db      	ldr	r3, [r3, #28]
 80015f2:	431a      	orrs	r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a1b      	ldr	r3, [r3, #32]
 80015f8:	431a      	orrs	r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	430a      	orrs	r2, r1
 8001600:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	0018      	movs	r0, r3
 8001606:	f000 fa8d 	bl	8001b24 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	689a      	ldr	r2, [r3, #8]
 800160e:	2380      	movs	r3, #128	; 0x80
 8001610:	01db      	lsls	r3, r3, #7
 8001612:	429a      	cmp	r2, r3
 8001614:	d102      	bne.n	800161c <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685a      	ldr	r2, [r3, #4]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001624:	213f      	movs	r1, #63	; 0x3f
 8001626:	400a      	ands	r2, r1
 8001628:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001632:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d011      	beq.n	8001660 <HAL_DMA_Init+0xd8>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	2b04      	cmp	r3, #4
 8001642:	d80d      	bhi.n	8001660 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	0018      	movs	r0, r3
 8001648:	f000 fa98 	bl	8001b7c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	e008      	b.n	8001672 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2200      	movs	r2, #0
 8001664:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2200      	movs	r2, #0
 800166a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2200      	movs	r2, #0
 8001670:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2200      	movs	r2, #0
 8001676:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2225      	movs	r2, #37	; 0x25
 800167c:	2101      	movs	r1, #1
 800167e:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2224      	movs	r2, #36	; 0x24
 8001684:	2100      	movs	r1, #0
 8001686:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001688:	2300      	movs	r3, #0
}
 800168a:	0018      	movs	r0, r3
 800168c:	46bd      	mov	sp, r7
 800168e:	b002      	add	sp, #8
 8001690:	bd80      	pop	{r7, pc}
 8001692:	46c0      	nop			; (mov r8, r8)
 8001694:	bffdfff8 	.word	0xbffdfff8
 8001698:	ffff800f 	.word	0xffff800f

0800169c <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b086      	sub	sp, #24
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	60b9      	str	r1, [r7, #8]
 80016a6:	607a      	str	r2, [r7, #4]
 80016a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016aa:	2317      	movs	r3, #23
 80016ac:	18fb      	adds	r3, r7, r3
 80016ae:	2200      	movs	r2, #0
 80016b0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	2224      	movs	r2, #36	; 0x24
 80016b6:	5c9b      	ldrb	r3, [r3, r2]
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d101      	bne.n	80016c0 <HAL_DMA_Start_IT+0x24>
 80016bc:	2302      	movs	r3, #2
 80016be:	e06f      	b.n	80017a0 <HAL_DMA_Start_IT+0x104>
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2224      	movs	r2, #36	; 0x24
 80016c4:	2101      	movs	r1, #1
 80016c6:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	2225      	movs	r2, #37	; 0x25
 80016cc:	5c9b      	ldrb	r3, [r3, r2]
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d157      	bne.n	8001784 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2225      	movs	r2, #37	; 0x25
 80016d8:	2102      	movs	r1, #2
 80016da:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	2200      	movs	r2, #0
 80016e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2101      	movs	r1, #1
 80016ee:	438a      	bics	r2, r1
 80016f0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	68b9      	ldr	r1, [r7, #8]
 80016f8:	68f8      	ldr	r0, [r7, #12]
 80016fa:	f000 f9d3 	bl	8001aa4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	2b00      	cmp	r3, #0
 8001704:	d008      	beq.n	8001718 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	210e      	movs	r1, #14
 8001712:	430a      	orrs	r2, r1
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	e00f      	b.n	8001738 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2104      	movs	r1, #4
 8001724:	438a      	bics	r2, r1
 8001726:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	210a      	movs	r1, #10
 8001734:	430a      	orrs	r2, r1
 8001736:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	2380      	movs	r3, #128	; 0x80
 8001740:	025b      	lsls	r3, r3, #9
 8001742:	4013      	ands	r3, r2
 8001744:	d008      	beq.n	8001758 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001750:	2180      	movs	r1, #128	; 0x80
 8001752:	0049      	lsls	r1, r1, #1
 8001754:	430a      	orrs	r2, r1
 8001756:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800175c:	2b00      	cmp	r3, #0
 800175e:	d008      	beq.n	8001772 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800176a:	2180      	movs	r1, #128	; 0x80
 800176c:	0049      	lsls	r1, r1, #1
 800176e:	430a      	orrs	r2, r1
 8001770:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2101      	movs	r1, #1
 800177e:	430a      	orrs	r2, r1
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	e00a      	b.n	800179a <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	2280      	movs	r2, #128	; 0x80
 8001788:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	2224      	movs	r2, #36	; 0x24
 800178e:	2100      	movs	r1, #0
 8001790:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8001792:	2317      	movs	r3, #23
 8001794:	18fb      	adds	r3, r7, r3
 8001796:	2201      	movs	r2, #1
 8001798:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800179a:	2317      	movs	r3, #23
 800179c:	18fb      	adds	r3, r7, r3
 800179e:	781b      	ldrb	r3, [r3, #0]
}
 80017a0:	0018      	movs	r0, r3
 80017a2:	46bd      	mov	sp, r7
 80017a4:	b006      	add	sp, #24
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d101      	bne.n	80017ba <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e050      	b.n	800185c <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2225      	movs	r2, #37	; 0x25
 80017be:	5c9b      	ldrb	r3, [r3, r2]
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d008      	beq.n	80017d8 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2204      	movs	r2, #4
 80017ca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2224      	movs	r2, #36	; 0x24
 80017d0:	2100      	movs	r1, #0
 80017d2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e041      	b.n	800185c <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	210e      	movs	r1, #14
 80017e4:	438a      	bics	r2, r1
 80017e6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f2:	491c      	ldr	r1, [pc, #112]	; (8001864 <HAL_DMA_Abort+0xbc>)
 80017f4:	400a      	ands	r2, r1
 80017f6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2101      	movs	r1, #1
 8001804:	438a      	bics	r2, r1
 8001806:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8001808:	4b17      	ldr	r3, [pc, #92]	; (8001868 <HAL_DMA_Abort+0xc0>)
 800180a:	6859      	ldr	r1, [r3, #4]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001810:	221c      	movs	r2, #28
 8001812:	4013      	ands	r3, r2
 8001814:	2201      	movs	r2, #1
 8001816:	409a      	lsls	r2, r3
 8001818:	4b13      	ldr	r3, [pc, #76]	; (8001868 <HAL_DMA_Abort+0xc0>)
 800181a:	430a      	orrs	r2, r1
 800181c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001826:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800182c:	2b00      	cmp	r3, #0
 800182e:	d00c      	beq.n	800184a <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800183a:	490a      	ldr	r1, [pc, #40]	; (8001864 <HAL_DMA_Abort+0xbc>)
 800183c:	400a      	ands	r2, r1
 800183e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001848:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2225      	movs	r2, #37	; 0x25
 800184e:	2101      	movs	r1, #1
 8001850:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2224      	movs	r2, #36	; 0x24
 8001856:	2100      	movs	r1, #0
 8001858:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800185a:	2300      	movs	r3, #0
}
 800185c:	0018      	movs	r0, r3
 800185e:	46bd      	mov	sp, r7
 8001860:	b002      	add	sp, #8
 8001862:	bd80      	pop	{r7, pc}
 8001864:	fffffeff 	.word	0xfffffeff
 8001868:	40020000 	.word	0x40020000

0800186c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001874:	210f      	movs	r1, #15
 8001876:	187b      	adds	r3, r7, r1
 8001878:	2200      	movs	r2, #0
 800187a:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2225      	movs	r2, #37	; 0x25
 8001880:	5c9b      	ldrb	r3, [r3, r2]
 8001882:	b2db      	uxtb	r3, r3
 8001884:	2b02      	cmp	r3, #2
 8001886:	d006      	beq.n	8001896 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2204      	movs	r2, #4
 800188c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800188e:	187b      	adds	r3, r7, r1
 8001890:	2201      	movs	r2, #1
 8001892:	701a      	strb	r2, [r3, #0]
 8001894:	e049      	b.n	800192a <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	210e      	movs	r1, #14
 80018a2:	438a      	bics	r2, r1
 80018a4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2101      	movs	r1, #1
 80018b2:	438a      	bics	r2, r1
 80018b4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c0:	491d      	ldr	r1, [pc, #116]	; (8001938 <HAL_DMA_Abort_IT+0xcc>)
 80018c2:	400a      	ands	r2, r1
 80018c4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80018c6:	4b1d      	ldr	r3, [pc, #116]	; (800193c <HAL_DMA_Abort_IT+0xd0>)
 80018c8:	6859      	ldr	r1, [r3, #4]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ce:	221c      	movs	r2, #28
 80018d0:	4013      	ands	r3, r2
 80018d2:	2201      	movs	r2, #1
 80018d4:	409a      	lsls	r2, r3
 80018d6:	4b19      	ldr	r3, [pc, #100]	; (800193c <HAL_DMA_Abort_IT+0xd0>)
 80018d8:	430a      	orrs	r2, r1
 80018da:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80018e4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d00c      	beq.n	8001908 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018f8:	490f      	ldr	r1, [pc, #60]	; (8001938 <HAL_DMA_Abort_IT+0xcc>)
 80018fa:	400a      	ands	r2, r1
 80018fc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001906:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2225      	movs	r2, #37	; 0x25
 800190c:	2101      	movs	r1, #1
 800190e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2224      	movs	r2, #36	; 0x24
 8001914:	2100      	movs	r1, #0
 8001916:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800191c:	2b00      	cmp	r3, #0
 800191e:	d004      	beq.n	800192a <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	0010      	movs	r0, r2
 8001928:	4798      	blx	r3
    }
  }
  return status;
 800192a:	230f      	movs	r3, #15
 800192c:	18fb      	adds	r3, r7, r3
 800192e:	781b      	ldrb	r3, [r3, #0]
}
 8001930:	0018      	movs	r0, r3
 8001932:	46bd      	mov	sp, r7
 8001934:	b004      	add	sp, #16
 8001936:	bd80      	pop	{r7, pc}
 8001938:	fffffeff 	.word	0xfffffeff
 800193c:	40020000 	.word	0x40020000

08001940 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8001948:	4b55      	ldr	r3, [pc, #340]	; (8001aa0 <HAL_DMA_IRQHandler+0x160>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195a:	221c      	movs	r2, #28
 800195c:	4013      	ands	r3, r2
 800195e:	2204      	movs	r2, #4
 8001960:	409a      	lsls	r2, r3
 8001962:	0013      	movs	r3, r2
 8001964:	68fa      	ldr	r2, [r7, #12]
 8001966:	4013      	ands	r3, r2
 8001968:	d027      	beq.n	80019ba <HAL_DMA_IRQHandler+0x7a>
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	2204      	movs	r2, #4
 800196e:	4013      	ands	r3, r2
 8001970:	d023      	beq.n	80019ba <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2220      	movs	r2, #32
 800197a:	4013      	ands	r3, r2
 800197c:	d107      	bne.n	800198e <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2104      	movs	r1, #4
 800198a:	438a      	bics	r2, r1
 800198c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800198e:	4b44      	ldr	r3, [pc, #272]	; (8001aa0 <HAL_DMA_IRQHandler+0x160>)
 8001990:	6859      	ldr	r1, [r3, #4]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001996:	221c      	movs	r2, #28
 8001998:	4013      	ands	r3, r2
 800199a:	2204      	movs	r2, #4
 800199c:	409a      	lsls	r2, r3
 800199e:	4b40      	ldr	r3, [pc, #256]	; (8001aa0 <HAL_DMA_IRQHandler+0x160>)
 80019a0:	430a      	orrs	r2, r1
 80019a2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d100      	bne.n	80019ae <HAL_DMA_IRQHandler+0x6e>
 80019ac:	e073      	b.n	8001a96 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	0010      	movs	r0, r2
 80019b6:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80019b8:	e06d      	b.n	8001a96 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019be:	221c      	movs	r2, #28
 80019c0:	4013      	ands	r3, r2
 80019c2:	2202      	movs	r2, #2
 80019c4:	409a      	lsls	r2, r3
 80019c6:	0013      	movs	r3, r2
 80019c8:	68fa      	ldr	r2, [r7, #12]
 80019ca:	4013      	ands	r3, r2
 80019cc:	d02e      	beq.n	8001a2c <HAL_DMA_IRQHandler+0xec>
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	2202      	movs	r2, #2
 80019d2:	4013      	ands	r3, r2
 80019d4:	d02a      	beq.n	8001a2c <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2220      	movs	r2, #32
 80019de:	4013      	ands	r3, r2
 80019e0:	d10b      	bne.n	80019fa <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	210a      	movs	r1, #10
 80019ee:	438a      	bics	r2, r1
 80019f0:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2225      	movs	r2, #37	; 0x25
 80019f6:	2101      	movs	r1, #1
 80019f8:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80019fa:	4b29      	ldr	r3, [pc, #164]	; (8001aa0 <HAL_DMA_IRQHandler+0x160>)
 80019fc:	6859      	ldr	r1, [r3, #4]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a02:	221c      	movs	r2, #28
 8001a04:	4013      	ands	r3, r2
 8001a06:	2202      	movs	r2, #2
 8001a08:	409a      	lsls	r2, r3
 8001a0a:	4b25      	ldr	r3, [pc, #148]	; (8001aa0 <HAL_DMA_IRQHandler+0x160>)
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2224      	movs	r2, #36	; 0x24
 8001a14:	2100      	movs	r1, #0
 8001a16:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d03a      	beq.n	8001a96 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	0010      	movs	r0, r2
 8001a28:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8001a2a:	e034      	b.n	8001a96 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a30:	221c      	movs	r2, #28
 8001a32:	4013      	ands	r3, r2
 8001a34:	2208      	movs	r2, #8
 8001a36:	409a      	lsls	r2, r3
 8001a38:	0013      	movs	r3, r2
 8001a3a:	68fa      	ldr	r2, [r7, #12]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	d02b      	beq.n	8001a98 <HAL_DMA_IRQHandler+0x158>
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	2208      	movs	r2, #8
 8001a44:	4013      	ands	r3, r2
 8001a46:	d027      	beq.n	8001a98 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	210e      	movs	r1, #14
 8001a54:	438a      	bics	r2, r1
 8001a56:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001a58:	4b11      	ldr	r3, [pc, #68]	; (8001aa0 <HAL_DMA_IRQHandler+0x160>)
 8001a5a:	6859      	ldr	r1, [r3, #4]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a60:	221c      	movs	r2, #28
 8001a62:	4013      	ands	r3, r2
 8001a64:	2201      	movs	r2, #1
 8001a66:	409a      	lsls	r2, r3
 8001a68:	4b0d      	ldr	r3, [pc, #52]	; (8001aa0 <HAL_DMA_IRQHandler+0x160>)
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2201      	movs	r2, #1
 8001a72:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2225      	movs	r2, #37	; 0x25
 8001a78:	2101      	movs	r1, #1
 8001a7a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2224      	movs	r2, #36	; 0x24
 8001a80:	2100      	movs	r1, #0
 8001a82:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d005      	beq.n	8001a98 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	0010      	movs	r0, r2
 8001a94:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001a96:	46c0      	nop			; (mov r8, r8)
 8001a98:	46c0      	nop			; (mov r8, r8)
}
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	b004      	add	sp, #16
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	40020000 	.word	0x40020000

08001aa4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	60b9      	str	r1, [r7, #8]
 8001aae:	607a      	str	r2, [r7, #4]
 8001ab0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ab6:	68fa      	ldr	r2, [r7, #12]
 8001ab8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001aba:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d004      	beq.n	8001ace <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ac8:	68fa      	ldr	r2, [r7, #12]
 8001aca:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001acc:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001ace:	4b14      	ldr	r3, [pc, #80]	; (8001b20 <DMA_SetConfig+0x7c>)
 8001ad0:	6859      	ldr	r1, [r3, #4]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	221c      	movs	r2, #28
 8001ad8:	4013      	ands	r3, r2
 8001ada:	2201      	movs	r2, #1
 8001adc:	409a      	lsls	r2, r3
 8001ade:	4b10      	ldr	r3, [pc, #64]	; (8001b20 <DMA_SetConfig+0x7c>)
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	683a      	ldr	r2, [r7, #0]
 8001aea:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	2b10      	cmp	r3, #16
 8001af2:	d108      	bne.n	8001b06 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	68ba      	ldr	r2, [r7, #8]
 8001b02:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001b04:	e007      	b.n	8001b16 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	68ba      	ldr	r2, [r7, #8]
 8001b0c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	60da      	str	r2, [r3, #12]
}
 8001b16:	46c0      	nop			; (mov r8, r8)
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	b004      	add	sp, #16
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	46c0      	nop			; (mov r8, r8)
 8001b20:	40020000 	.word	0x40020000

08001b24 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b30:	089b      	lsrs	r3, r3, #2
 8001b32:	4a10      	ldr	r2, [pc, #64]	; (8001b74 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8001b34:	4694      	mov	ip, r2
 8001b36:	4463      	add	r3, ip
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	001a      	movs	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	001a      	movs	r2, r3
 8001b46:	23ff      	movs	r3, #255	; 0xff
 8001b48:	4013      	ands	r3, r2
 8001b4a:	3b08      	subs	r3, #8
 8001b4c:	2114      	movs	r1, #20
 8001b4e:	0018      	movs	r0, r3
 8001b50:	f7fe faea 	bl	8000128 <__udivsi3>
 8001b54:	0003      	movs	r3, r0
 8001b56:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	4a07      	ldr	r2, [pc, #28]	; (8001b78 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8001b5c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	221f      	movs	r2, #31
 8001b62:	4013      	ands	r3, r2
 8001b64:	2201      	movs	r2, #1
 8001b66:	409a      	lsls	r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001b6c:	46c0      	nop			; (mov r8, r8)
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	b004      	add	sp, #16
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	10008200 	.word	0x10008200
 8001b78:	40020880 	.word	0x40020880

08001b7c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	223f      	movs	r2, #63	; 0x3f
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	4a0a      	ldr	r2, [pc, #40]	; (8001bbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001b92:	4694      	mov	ip, r2
 8001b94:	4463      	add	r3, ip
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	001a      	movs	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a07      	ldr	r2, [pc, #28]	; (8001bc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001ba2:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	2203      	movs	r2, #3
 8001baa:	4013      	ands	r3, r2
 8001bac:	2201      	movs	r2, #1
 8001bae:	409a      	lsls	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001bb4:	46c0      	nop			; (mov r8, r8)
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	b004      	add	sp, #16
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	1000823f 	.word	0x1000823f
 8001bc0:	40020940 	.word	0x40020940

08001bc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bd2:	e147      	b.n	8001e64 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2101      	movs	r1, #1
 8001bda:	697a      	ldr	r2, [r7, #20]
 8001bdc:	4091      	lsls	r1, r2
 8001bde:	000a      	movs	r2, r1
 8001be0:	4013      	ands	r3, r2
 8001be2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d100      	bne.n	8001bec <HAL_GPIO_Init+0x28>
 8001bea:	e138      	b.n	8001e5e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	2203      	movs	r2, #3
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d005      	beq.n	8001c04 <HAL_GPIO_Init+0x40>
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	2203      	movs	r2, #3
 8001bfe:	4013      	ands	r3, r2
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d130      	bne.n	8001c66 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	2203      	movs	r2, #3
 8001c10:	409a      	lsls	r2, r3
 8001c12:	0013      	movs	r3, r2
 8001c14:	43da      	mvns	r2, r3
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	68da      	ldr	r2, [r3, #12]
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	409a      	lsls	r2, r3
 8001c26:	0013      	movs	r3, r2
 8001c28:	693a      	ldr	r2, [r7, #16]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	693a      	ldr	r2, [r7, #16]
 8001c32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	409a      	lsls	r2, r3
 8001c40:	0013      	movs	r3, r2
 8001c42:	43da      	mvns	r2, r3
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	4013      	ands	r3, r2
 8001c48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	091b      	lsrs	r3, r3, #4
 8001c50:	2201      	movs	r2, #1
 8001c52:	401a      	ands	r2, r3
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	409a      	lsls	r2, r3
 8001c58:	0013      	movs	r3, r2
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	2203      	movs	r2, #3
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	2b03      	cmp	r3, #3
 8001c70:	d017      	beq.n	8001ca2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	2203      	movs	r2, #3
 8001c7e:	409a      	lsls	r2, r3
 8001c80:	0013      	movs	r3, r2
 8001c82:	43da      	mvns	r2, r3
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	4013      	ands	r3, r2
 8001c88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	689a      	ldr	r2, [r3, #8]
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	409a      	lsls	r2, r3
 8001c94:	0013      	movs	r3, r2
 8001c96:	693a      	ldr	r2, [r7, #16]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	2203      	movs	r2, #3
 8001ca8:	4013      	ands	r3, r2
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d123      	bne.n	8001cf6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	08da      	lsrs	r2, r3, #3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	3208      	adds	r2, #8
 8001cb6:	0092      	lsls	r2, r2, #2
 8001cb8:	58d3      	ldr	r3, [r2, r3]
 8001cba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	2207      	movs	r2, #7
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	220f      	movs	r2, #15
 8001cc6:	409a      	lsls	r2, r3
 8001cc8:	0013      	movs	r3, r2
 8001cca:	43da      	mvns	r2, r3
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	691a      	ldr	r2, [r3, #16]
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	2107      	movs	r1, #7
 8001cda:	400b      	ands	r3, r1
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	409a      	lsls	r2, r3
 8001ce0:	0013      	movs	r3, r2
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	08da      	lsrs	r2, r3, #3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	3208      	adds	r2, #8
 8001cf0:	0092      	lsls	r2, r2, #2
 8001cf2:	6939      	ldr	r1, [r7, #16]
 8001cf4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	2203      	movs	r2, #3
 8001d02:	409a      	lsls	r2, r3
 8001d04:	0013      	movs	r3, r2
 8001d06:	43da      	mvns	r2, r3
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	2203      	movs	r2, #3
 8001d14:	401a      	ands	r2, r3
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	409a      	lsls	r2, r3
 8001d1c:	0013      	movs	r3, r2
 8001d1e:	693a      	ldr	r2, [r7, #16]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685a      	ldr	r2, [r3, #4]
 8001d2e:	23c0      	movs	r3, #192	; 0xc0
 8001d30:	029b      	lsls	r3, r3, #10
 8001d32:	4013      	ands	r3, r2
 8001d34:	d100      	bne.n	8001d38 <HAL_GPIO_Init+0x174>
 8001d36:	e092      	b.n	8001e5e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001d38:	4a50      	ldr	r2, [pc, #320]	; (8001e7c <HAL_GPIO_Init+0x2b8>)
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	089b      	lsrs	r3, r3, #2
 8001d3e:	3318      	adds	r3, #24
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	589b      	ldr	r3, [r3, r2]
 8001d44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	2203      	movs	r2, #3
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	00db      	lsls	r3, r3, #3
 8001d4e:	220f      	movs	r2, #15
 8001d50:	409a      	lsls	r2, r3
 8001d52:	0013      	movs	r3, r2
 8001d54:	43da      	mvns	r2, r3
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	23a0      	movs	r3, #160	; 0xa0
 8001d60:	05db      	lsls	r3, r3, #23
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d013      	beq.n	8001d8e <HAL_GPIO_Init+0x1ca>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a45      	ldr	r2, [pc, #276]	; (8001e80 <HAL_GPIO_Init+0x2bc>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d00d      	beq.n	8001d8a <HAL_GPIO_Init+0x1c6>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a44      	ldr	r2, [pc, #272]	; (8001e84 <HAL_GPIO_Init+0x2c0>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d007      	beq.n	8001d86 <HAL_GPIO_Init+0x1c2>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a43      	ldr	r2, [pc, #268]	; (8001e88 <HAL_GPIO_Init+0x2c4>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d101      	bne.n	8001d82 <HAL_GPIO_Init+0x1be>
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e006      	b.n	8001d90 <HAL_GPIO_Init+0x1cc>
 8001d82:	2305      	movs	r3, #5
 8001d84:	e004      	b.n	8001d90 <HAL_GPIO_Init+0x1cc>
 8001d86:	2302      	movs	r3, #2
 8001d88:	e002      	b.n	8001d90 <HAL_GPIO_Init+0x1cc>
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e000      	b.n	8001d90 <HAL_GPIO_Init+0x1cc>
 8001d8e:	2300      	movs	r3, #0
 8001d90:	697a      	ldr	r2, [r7, #20]
 8001d92:	2103      	movs	r1, #3
 8001d94:	400a      	ands	r2, r1
 8001d96:	00d2      	lsls	r2, r2, #3
 8001d98:	4093      	lsls	r3, r2
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001da0:	4936      	ldr	r1, [pc, #216]	; (8001e7c <HAL_GPIO_Init+0x2b8>)
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	089b      	lsrs	r3, r3, #2
 8001da6:	3318      	adds	r3, #24
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001dae:	4b33      	ldr	r3, [pc, #204]	; (8001e7c <HAL_GPIO_Init+0x2b8>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	43da      	mvns	r2, r3
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685a      	ldr	r2, [r3, #4]
 8001dc2:	2380      	movs	r3, #128	; 0x80
 8001dc4:	035b      	lsls	r3, r3, #13
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	d003      	beq.n	8001dd2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001dd2:	4b2a      	ldr	r3, [pc, #168]	; (8001e7c <HAL_GPIO_Init+0x2b8>)
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001dd8:	4b28      	ldr	r3, [pc, #160]	; (8001e7c <HAL_GPIO_Init+0x2b8>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	43da      	mvns	r2, r3
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	4013      	ands	r3, r2
 8001de6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685a      	ldr	r2, [r3, #4]
 8001dec:	2380      	movs	r3, #128	; 0x80
 8001dee:	039b      	lsls	r3, r3, #14
 8001df0:	4013      	ands	r3, r2
 8001df2:	d003      	beq.n	8001dfc <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001dfc:	4b1f      	ldr	r3, [pc, #124]	; (8001e7c <HAL_GPIO_Init+0x2b8>)
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001e02:	4a1e      	ldr	r2, [pc, #120]	; (8001e7c <HAL_GPIO_Init+0x2b8>)
 8001e04:	2384      	movs	r3, #132	; 0x84
 8001e06:	58d3      	ldr	r3, [r2, r3]
 8001e08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	43da      	mvns	r2, r3
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	4013      	ands	r3, r2
 8001e12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685a      	ldr	r2, [r3, #4]
 8001e18:	2380      	movs	r3, #128	; 0x80
 8001e1a:	029b      	lsls	r3, r3, #10
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	d003      	beq.n	8001e28 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001e20:	693a      	ldr	r2, [r7, #16]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e28:	4914      	ldr	r1, [pc, #80]	; (8001e7c <HAL_GPIO_Init+0x2b8>)
 8001e2a:	2284      	movs	r2, #132	; 0x84
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001e30:	4a12      	ldr	r2, [pc, #72]	; (8001e7c <HAL_GPIO_Init+0x2b8>)
 8001e32:	2380      	movs	r3, #128	; 0x80
 8001e34:	58d3      	ldr	r3, [r2, r3]
 8001e36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	43da      	mvns	r2, r3
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685a      	ldr	r2, [r3, #4]
 8001e46:	2380      	movs	r3, #128	; 0x80
 8001e48:	025b      	lsls	r3, r3, #9
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	d003      	beq.n	8001e56 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e56:	4909      	ldr	r1, [pc, #36]	; (8001e7c <HAL_GPIO_Init+0x2b8>)
 8001e58:	2280      	movs	r2, #128	; 0x80
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	3301      	adds	r3, #1
 8001e62:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	40da      	lsrs	r2, r3
 8001e6c:	1e13      	subs	r3, r2, #0
 8001e6e:	d000      	beq.n	8001e72 <HAL_GPIO_Init+0x2ae>
 8001e70:	e6b0      	b.n	8001bd4 <HAL_GPIO_Init+0x10>
  }
}
 8001e72:	46c0      	nop			; (mov r8, r8)
 8001e74:	46c0      	nop			; (mov r8, r8)
 8001e76:	46bd      	mov	sp, r7
 8001e78:	b006      	add	sp, #24
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	40021800 	.word	0x40021800
 8001e80:	50000400 	.word	0x50000400
 8001e84:	50000800 	.word	0x50000800
 8001e88:	50000c00 	.word	0x50000c00

08001e8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	0008      	movs	r0, r1
 8001e96:	0011      	movs	r1, r2
 8001e98:	1cbb      	adds	r3, r7, #2
 8001e9a:	1c02      	adds	r2, r0, #0
 8001e9c:	801a      	strh	r2, [r3, #0]
 8001e9e:	1c7b      	adds	r3, r7, #1
 8001ea0:	1c0a      	adds	r2, r1, #0
 8001ea2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ea4:	1c7b      	adds	r3, r7, #1
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d004      	beq.n	8001eb6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001eac:	1cbb      	adds	r3, r7, #2
 8001eae:	881a      	ldrh	r2, [r3, #0]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001eb4:	e003      	b.n	8001ebe <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001eb6:	1cbb      	adds	r3, r7, #2
 8001eb8:	881a      	ldrh	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ebe:	46c0      	nop			; (mov r8, r8)
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	b002      	add	sp, #8
 8001ec4:	bd80      	pop	{r7, pc}
	...

08001ec8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001ed0:	4b19      	ldr	r3, [pc, #100]	; (8001f38 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a19      	ldr	r2, [pc, #100]	; (8001f3c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	0019      	movs	r1, r3
 8001eda:	4b17      	ldr	r3, [pc, #92]	; (8001f38 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	2380      	movs	r3, #128	; 0x80
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d11f      	bne.n	8001f2c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001eec:	4b14      	ldr	r3, [pc, #80]	; (8001f40 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	0013      	movs	r3, r2
 8001ef2:	005b      	lsls	r3, r3, #1
 8001ef4:	189b      	adds	r3, r3, r2
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	4912      	ldr	r1, [pc, #72]	; (8001f44 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001efa:	0018      	movs	r0, r3
 8001efc:	f7fe f914 	bl	8000128 <__udivsi3>
 8001f00:	0003      	movs	r3, r0
 8001f02:	3301      	adds	r3, #1
 8001f04:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f06:	e008      	b.n	8001f1a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d003      	beq.n	8001f16 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	3b01      	subs	r3, #1
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	e001      	b.n	8001f1a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e009      	b.n	8001f2e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f1a:	4b07      	ldr	r3, [pc, #28]	; (8001f38 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001f1c:	695a      	ldr	r2, [r3, #20]
 8001f1e:	2380      	movs	r3, #128	; 0x80
 8001f20:	00db      	lsls	r3, r3, #3
 8001f22:	401a      	ands	r2, r3
 8001f24:	2380      	movs	r3, #128	; 0x80
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d0ed      	beq.n	8001f08 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	0018      	movs	r0, r3
 8001f30:	46bd      	mov	sp, r7
 8001f32:	b004      	add	sp, #16
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	46c0      	nop			; (mov r8, r8)
 8001f38:	40007000 	.word	0x40007000
 8001f3c:	fffff9ff 	.word	0xfffff9ff
 8001f40:	20000064 	.word	0x20000064
 8001f44:	000f4240 	.word	0x000f4240

08001f48 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001f4c:	4b03      	ldr	r3, [pc, #12]	; (8001f5c <LL_RCC_GetAPB1Prescaler+0x14>)
 8001f4e:	689a      	ldr	r2, [r3, #8]
 8001f50:	23e0      	movs	r3, #224	; 0xe0
 8001f52:	01db      	lsls	r3, r3, #7
 8001f54:	4013      	ands	r3, r2
}
 8001f56:	0018      	movs	r0, r3
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	40021000 	.word	0x40021000

08001f60 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b088      	sub	sp, #32
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e2fe      	b.n	8002570 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2201      	movs	r2, #1
 8001f78:	4013      	ands	r3, r2
 8001f7a:	d100      	bne.n	8001f7e <HAL_RCC_OscConfig+0x1e>
 8001f7c:	e07c      	b.n	8002078 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f7e:	4bc3      	ldr	r3, [pc, #780]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	2238      	movs	r2, #56	; 0x38
 8001f84:	4013      	ands	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f88:	4bc0      	ldr	r3, [pc, #768]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	2203      	movs	r2, #3
 8001f8e:	4013      	ands	r3, r2
 8001f90:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	2b10      	cmp	r3, #16
 8001f96:	d102      	bne.n	8001f9e <HAL_RCC_OscConfig+0x3e>
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	2b03      	cmp	r3, #3
 8001f9c:	d002      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	2b08      	cmp	r3, #8
 8001fa2:	d10b      	bne.n	8001fbc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fa4:	4bb9      	ldr	r3, [pc, #740]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	2380      	movs	r3, #128	; 0x80
 8001faa:	029b      	lsls	r3, r3, #10
 8001fac:	4013      	ands	r3, r2
 8001fae:	d062      	beq.n	8002076 <HAL_RCC_OscConfig+0x116>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d15e      	bne.n	8002076 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e2d9      	b.n	8002570 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685a      	ldr	r2, [r3, #4]
 8001fc0:	2380      	movs	r3, #128	; 0x80
 8001fc2:	025b      	lsls	r3, r3, #9
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d107      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x78>
 8001fc8:	4bb0      	ldr	r3, [pc, #704]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	4baf      	ldr	r3, [pc, #700]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 8001fce:	2180      	movs	r1, #128	; 0x80
 8001fd0:	0249      	lsls	r1, r1, #9
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	601a      	str	r2, [r3, #0]
 8001fd6:	e020      	b.n	800201a <HAL_RCC_OscConfig+0xba>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685a      	ldr	r2, [r3, #4]
 8001fdc:	23a0      	movs	r3, #160	; 0xa0
 8001fde:	02db      	lsls	r3, r3, #11
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d10e      	bne.n	8002002 <HAL_RCC_OscConfig+0xa2>
 8001fe4:	4ba9      	ldr	r3, [pc, #676]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	4ba8      	ldr	r3, [pc, #672]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 8001fea:	2180      	movs	r1, #128	; 0x80
 8001fec:	02c9      	lsls	r1, r1, #11
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	4ba6      	ldr	r3, [pc, #664]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	4ba5      	ldr	r3, [pc, #660]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 8001ff8:	2180      	movs	r1, #128	; 0x80
 8001ffa:	0249      	lsls	r1, r1, #9
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	e00b      	b.n	800201a <HAL_RCC_OscConfig+0xba>
 8002002:	4ba2      	ldr	r3, [pc, #648]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	4ba1      	ldr	r3, [pc, #644]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 8002008:	49a1      	ldr	r1, [pc, #644]	; (8002290 <HAL_RCC_OscConfig+0x330>)
 800200a:	400a      	ands	r2, r1
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	4b9f      	ldr	r3, [pc, #636]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	4b9e      	ldr	r3, [pc, #632]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 8002014:	499f      	ldr	r1, [pc, #636]	; (8002294 <HAL_RCC_OscConfig+0x334>)
 8002016:	400a      	ands	r2, r1
 8002018:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d014      	beq.n	800204c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002022:	f7ff f9a5 	bl	8001370 <HAL_GetTick>
 8002026:	0003      	movs	r3, r0
 8002028:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800202a:	e008      	b.n	800203e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800202c:	f7ff f9a0 	bl	8001370 <HAL_GetTick>
 8002030:	0002      	movs	r2, r0
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b64      	cmp	r3, #100	; 0x64
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e298      	b.n	8002570 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800203e:	4b93      	ldr	r3, [pc, #588]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	2380      	movs	r3, #128	; 0x80
 8002044:	029b      	lsls	r3, r3, #10
 8002046:	4013      	ands	r3, r2
 8002048:	d0f0      	beq.n	800202c <HAL_RCC_OscConfig+0xcc>
 800204a:	e015      	b.n	8002078 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800204c:	f7ff f990 	bl	8001370 <HAL_GetTick>
 8002050:	0003      	movs	r3, r0
 8002052:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002054:	e008      	b.n	8002068 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002056:	f7ff f98b 	bl	8001370 <HAL_GetTick>
 800205a:	0002      	movs	r2, r0
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	2b64      	cmp	r3, #100	; 0x64
 8002062:	d901      	bls.n	8002068 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e283      	b.n	8002570 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002068:	4b88      	ldr	r3, [pc, #544]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	2380      	movs	r3, #128	; 0x80
 800206e:	029b      	lsls	r3, r3, #10
 8002070:	4013      	ands	r3, r2
 8002072:	d1f0      	bne.n	8002056 <HAL_RCC_OscConfig+0xf6>
 8002074:	e000      	b.n	8002078 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002076:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2202      	movs	r2, #2
 800207e:	4013      	ands	r3, r2
 8002080:	d100      	bne.n	8002084 <HAL_RCC_OscConfig+0x124>
 8002082:	e099      	b.n	80021b8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002084:	4b81      	ldr	r3, [pc, #516]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	2238      	movs	r2, #56	; 0x38
 800208a:	4013      	ands	r3, r2
 800208c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800208e:	4b7f      	ldr	r3, [pc, #508]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	2203      	movs	r2, #3
 8002094:	4013      	ands	r3, r2
 8002096:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	2b10      	cmp	r3, #16
 800209c:	d102      	bne.n	80020a4 <HAL_RCC_OscConfig+0x144>
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d002      	beq.n	80020aa <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d135      	bne.n	8002116 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020aa:	4b78      	ldr	r3, [pc, #480]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	2380      	movs	r3, #128	; 0x80
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	4013      	ands	r3, r2
 80020b4:	d005      	beq.n	80020c2 <HAL_RCC_OscConfig+0x162>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e256      	b.n	8002570 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020c2:	4b72      	ldr	r3, [pc, #456]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	4a74      	ldr	r2, [pc, #464]	; (8002298 <HAL_RCC_OscConfig+0x338>)
 80020c8:	4013      	ands	r3, r2
 80020ca:	0019      	movs	r1, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	695b      	ldr	r3, [r3, #20]
 80020d0:	021a      	lsls	r2, r3, #8
 80020d2:	4b6e      	ldr	r3, [pc, #440]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 80020d4:	430a      	orrs	r2, r1
 80020d6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d112      	bne.n	8002104 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80020de:	4b6b      	ldr	r3, [pc, #428]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a6e      	ldr	r2, [pc, #440]	; (800229c <HAL_RCC_OscConfig+0x33c>)
 80020e4:	4013      	ands	r3, r2
 80020e6:	0019      	movs	r1, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	691a      	ldr	r2, [r3, #16]
 80020ec:	4b67      	ldr	r3, [pc, #412]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 80020ee:	430a      	orrs	r2, r1
 80020f0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80020f2:	4b66      	ldr	r3, [pc, #408]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	0adb      	lsrs	r3, r3, #11
 80020f8:	2207      	movs	r2, #7
 80020fa:	4013      	ands	r3, r2
 80020fc:	4a68      	ldr	r2, [pc, #416]	; (80022a0 <HAL_RCC_OscConfig+0x340>)
 80020fe:	40da      	lsrs	r2, r3
 8002100:	4b68      	ldr	r3, [pc, #416]	; (80022a4 <HAL_RCC_OscConfig+0x344>)
 8002102:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002104:	4b68      	ldr	r3, [pc, #416]	; (80022a8 <HAL_RCC_OscConfig+0x348>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	0018      	movs	r0, r3
 800210a:	f7ff f8d5 	bl	80012b8 <HAL_InitTick>
 800210e:	1e03      	subs	r3, r0, #0
 8002110:	d051      	beq.n	80021b6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e22c      	b.n	8002570 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d030      	beq.n	8002180 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800211e:	4b5b      	ldr	r3, [pc, #364]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a5e      	ldr	r2, [pc, #376]	; (800229c <HAL_RCC_OscConfig+0x33c>)
 8002124:	4013      	ands	r3, r2
 8002126:	0019      	movs	r1, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	691a      	ldr	r2, [r3, #16]
 800212c:	4b57      	ldr	r3, [pc, #348]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 800212e:	430a      	orrs	r2, r1
 8002130:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002132:	4b56      	ldr	r3, [pc, #344]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	4b55      	ldr	r3, [pc, #340]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 8002138:	2180      	movs	r1, #128	; 0x80
 800213a:	0049      	lsls	r1, r1, #1
 800213c:	430a      	orrs	r2, r1
 800213e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002140:	f7ff f916 	bl	8001370 <HAL_GetTick>
 8002144:	0003      	movs	r3, r0
 8002146:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002148:	e008      	b.n	800215c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800214a:	f7ff f911 	bl	8001370 <HAL_GetTick>
 800214e:	0002      	movs	r2, r0
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	2b02      	cmp	r3, #2
 8002156:	d901      	bls.n	800215c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e209      	b.n	8002570 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800215c:	4b4b      	ldr	r3, [pc, #300]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	2380      	movs	r3, #128	; 0x80
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	4013      	ands	r3, r2
 8002166:	d0f0      	beq.n	800214a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002168:	4b48      	ldr	r3, [pc, #288]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	4a4a      	ldr	r2, [pc, #296]	; (8002298 <HAL_RCC_OscConfig+0x338>)
 800216e:	4013      	ands	r3, r2
 8002170:	0019      	movs	r1, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	695b      	ldr	r3, [r3, #20]
 8002176:	021a      	lsls	r2, r3, #8
 8002178:	4b44      	ldr	r3, [pc, #272]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 800217a:	430a      	orrs	r2, r1
 800217c:	605a      	str	r2, [r3, #4]
 800217e:	e01b      	b.n	80021b8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002180:	4b42      	ldr	r3, [pc, #264]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	4b41      	ldr	r3, [pc, #260]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 8002186:	4949      	ldr	r1, [pc, #292]	; (80022ac <HAL_RCC_OscConfig+0x34c>)
 8002188:	400a      	ands	r2, r1
 800218a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800218c:	f7ff f8f0 	bl	8001370 <HAL_GetTick>
 8002190:	0003      	movs	r3, r0
 8002192:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002194:	e008      	b.n	80021a8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002196:	f7ff f8eb 	bl	8001370 <HAL_GetTick>
 800219a:	0002      	movs	r2, r0
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d901      	bls.n	80021a8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e1e3      	b.n	8002570 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021a8:	4b38      	ldr	r3, [pc, #224]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	2380      	movs	r3, #128	; 0x80
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	4013      	ands	r3, r2
 80021b2:	d1f0      	bne.n	8002196 <HAL_RCC_OscConfig+0x236>
 80021b4:	e000      	b.n	80021b8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021b6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2208      	movs	r2, #8
 80021be:	4013      	ands	r3, r2
 80021c0:	d047      	beq.n	8002252 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80021c2:	4b32      	ldr	r3, [pc, #200]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	2238      	movs	r2, #56	; 0x38
 80021c8:	4013      	ands	r3, r2
 80021ca:	2b18      	cmp	r3, #24
 80021cc:	d10a      	bne.n	80021e4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80021ce:	4b2f      	ldr	r3, [pc, #188]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 80021d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021d2:	2202      	movs	r2, #2
 80021d4:	4013      	ands	r3, r2
 80021d6:	d03c      	beq.n	8002252 <HAL_RCC_OscConfig+0x2f2>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d138      	bne.n	8002252 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e1c5      	b.n	8002570 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d019      	beq.n	8002220 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80021ec:	4b27      	ldr	r3, [pc, #156]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 80021ee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80021f0:	4b26      	ldr	r3, [pc, #152]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 80021f2:	2101      	movs	r1, #1
 80021f4:	430a      	orrs	r2, r1
 80021f6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f8:	f7ff f8ba 	bl	8001370 <HAL_GetTick>
 80021fc:	0003      	movs	r3, r0
 80021fe:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002200:	e008      	b.n	8002214 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002202:	f7ff f8b5 	bl	8001370 <HAL_GetTick>
 8002206:	0002      	movs	r2, r0
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d901      	bls.n	8002214 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e1ad      	b.n	8002570 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002214:	4b1d      	ldr	r3, [pc, #116]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 8002216:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002218:	2202      	movs	r2, #2
 800221a:	4013      	ands	r3, r2
 800221c:	d0f1      	beq.n	8002202 <HAL_RCC_OscConfig+0x2a2>
 800221e:	e018      	b.n	8002252 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002220:	4b1a      	ldr	r3, [pc, #104]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 8002222:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002224:	4b19      	ldr	r3, [pc, #100]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 8002226:	2101      	movs	r1, #1
 8002228:	438a      	bics	r2, r1
 800222a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800222c:	f7ff f8a0 	bl	8001370 <HAL_GetTick>
 8002230:	0003      	movs	r3, r0
 8002232:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002234:	e008      	b.n	8002248 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002236:	f7ff f89b 	bl	8001370 <HAL_GetTick>
 800223a:	0002      	movs	r2, r0
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	2b02      	cmp	r3, #2
 8002242:	d901      	bls.n	8002248 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e193      	b.n	8002570 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002248:	4b10      	ldr	r3, [pc, #64]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 800224a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800224c:	2202      	movs	r2, #2
 800224e:	4013      	ands	r3, r2
 8002250:	d1f1      	bne.n	8002236 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2204      	movs	r2, #4
 8002258:	4013      	ands	r3, r2
 800225a:	d100      	bne.n	800225e <HAL_RCC_OscConfig+0x2fe>
 800225c:	e0c6      	b.n	80023ec <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800225e:	231f      	movs	r3, #31
 8002260:	18fb      	adds	r3, r7, r3
 8002262:	2200      	movs	r2, #0
 8002264:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002266:	4b09      	ldr	r3, [pc, #36]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	2238      	movs	r2, #56	; 0x38
 800226c:	4013      	ands	r3, r2
 800226e:	2b20      	cmp	r3, #32
 8002270:	d11e      	bne.n	80022b0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002272:	4b06      	ldr	r3, [pc, #24]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 8002274:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002276:	2202      	movs	r2, #2
 8002278:	4013      	ands	r3, r2
 800227a:	d100      	bne.n	800227e <HAL_RCC_OscConfig+0x31e>
 800227c:	e0b6      	b.n	80023ec <HAL_RCC_OscConfig+0x48c>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d000      	beq.n	8002288 <HAL_RCC_OscConfig+0x328>
 8002286:	e0b1      	b.n	80023ec <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e171      	b.n	8002570 <HAL_RCC_OscConfig+0x610>
 800228c:	40021000 	.word	0x40021000
 8002290:	fffeffff 	.word	0xfffeffff
 8002294:	fffbffff 	.word	0xfffbffff
 8002298:	ffff80ff 	.word	0xffff80ff
 800229c:	ffffc7ff 	.word	0xffffc7ff
 80022a0:	00f42400 	.word	0x00f42400
 80022a4:	20000064 	.word	0x20000064
 80022a8:	20000068 	.word	0x20000068
 80022ac:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80022b0:	4bb1      	ldr	r3, [pc, #708]	; (8002578 <HAL_RCC_OscConfig+0x618>)
 80022b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022b4:	2380      	movs	r3, #128	; 0x80
 80022b6:	055b      	lsls	r3, r3, #21
 80022b8:	4013      	ands	r3, r2
 80022ba:	d101      	bne.n	80022c0 <HAL_RCC_OscConfig+0x360>
 80022bc:	2301      	movs	r3, #1
 80022be:	e000      	b.n	80022c2 <HAL_RCC_OscConfig+0x362>
 80022c0:	2300      	movs	r3, #0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d011      	beq.n	80022ea <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80022c6:	4bac      	ldr	r3, [pc, #688]	; (8002578 <HAL_RCC_OscConfig+0x618>)
 80022c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022ca:	4bab      	ldr	r3, [pc, #684]	; (8002578 <HAL_RCC_OscConfig+0x618>)
 80022cc:	2180      	movs	r1, #128	; 0x80
 80022ce:	0549      	lsls	r1, r1, #21
 80022d0:	430a      	orrs	r2, r1
 80022d2:	63da      	str	r2, [r3, #60]	; 0x3c
 80022d4:	4ba8      	ldr	r3, [pc, #672]	; (8002578 <HAL_RCC_OscConfig+0x618>)
 80022d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022d8:	2380      	movs	r3, #128	; 0x80
 80022da:	055b      	lsls	r3, r3, #21
 80022dc:	4013      	ands	r3, r2
 80022de:	60fb      	str	r3, [r7, #12]
 80022e0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80022e2:	231f      	movs	r3, #31
 80022e4:	18fb      	adds	r3, r7, r3
 80022e6:	2201      	movs	r2, #1
 80022e8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022ea:	4ba4      	ldr	r3, [pc, #656]	; (800257c <HAL_RCC_OscConfig+0x61c>)
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	2380      	movs	r3, #128	; 0x80
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	4013      	ands	r3, r2
 80022f4:	d11a      	bne.n	800232c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022f6:	4ba1      	ldr	r3, [pc, #644]	; (800257c <HAL_RCC_OscConfig+0x61c>)
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	4ba0      	ldr	r3, [pc, #640]	; (800257c <HAL_RCC_OscConfig+0x61c>)
 80022fc:	2180      	movs	r1, #128	; 0x80
 80022fe:	0049      	lsls	r1, r1, #1
 8002300:	430a      	orrs	r2, r1
 8002302:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002304:	f7ff f834 	bl	8001370 <HAL_GetTick>
 8002308:	0003      	movs	r3, r0
 800230a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800230c:	e008      	b.n	8002320 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800230e:	f7ff f82f 	bl	8001370 <HAL_GetTick>
 8002312:	0002      	movs	r2, r0
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d901      	bls.n	8002320 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e127      	b.n	8002570 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002320:	4b96      	ldr	r3, [pc, #600]	; (800257c <HAL_RCC_OscConfig+0x61c>)
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	2380      	movs	r3, #128	; 0x80
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	4013      	ands	r3, r2
 800232a:	d0f0      	beq.n	800230e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	2b01      	cmp	r3, #1
 8002332:	d106      	bne.n	8002342 <HAL_RCC_OscConfig+0x3e2>
 8002334:	4b90      	ldr	r3, [pc, #576]	; (8002578 <HAL_RCC_OscConfig+0x618>)
 8002336:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002338:	4b8f      	ldr	r3, [pc, #572]	; (8002578 <HAL_RCC_OscConfig+0x618>)
 800233a:	2101      	movs	r1, #1
 800233c:	430a      	orrs	r2, r1
 800233e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002340:	e01c      	b.n	800237c <HAL_RCC_OscConfig+0x41c>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	2b05      	cmp	r3, #5
 8002348:	d10c      	bne.n	8002364 <HAL_RCC_OscConfig+0x404>
 800234a:	4b8b      	ldr	r3, [pc, #556]	; (8002578 <HAL_RCC_OscConfig+0x618>)
 800234c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800234e:	4b8a      	ldr	r3, [pc, #552]	; (8002578 <HAL_RCC_OscConfig+0x618>)
 8002350:	2104      	movs	r1, #4
 8002352:	430a      	orrs	r2, r1
 8002354:	65da      	str	r2, [r3, #92]	; 0x5c
 8002356:	4b88      	ldr	r3, [pc, #544]	; (8002578 <HAL_RCC_OscConfig+0x618>)
 8002358:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800235a:	4b87      	ldr	r3, [pc, #540]	; (8002578 <HAL_RCC_OscConfig+0x618>)
 800235c:	2101      	movs	r1, #1
 800235e:	430a      	orrs	r2, r1
 8002360:	65da      	str	r2, [r3, #92]	; 0x5c
 8002362:	e00b      	b.n	800237c <HAL_RCC_OscConfig+0x41c>
 8002364:	4b84      	ldr	r3, [pc, #528]	; (8002578 <HAL_RCC_OscConfig+0x618>)
 8002366:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002368:	4b83      	ldr	r3, [pc, #524]	; (8002578 <HAL_RCC_OscConfig+0x618>)
 800236a:	2101      	movs	r1, #1
 800236c:	438a      	bics	r2, r1
 800236e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002370:	4b81      	ldr	r3, [pc, #516]	; (8002578 <HAL_RCC_OscConfig+0x618>)
 8002372:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002374:	4b80      	ldr	r3, [pc, #512]	; (8002578 <HAL_RCC_OscConfig+0x618>)
 8002376:	2104      	movs	r1, #4
 8002378:	438a      	bics	r2, r1
 800237a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d014      	beq.n	80023ae <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002384:	f7fe fff4 	bl	8001370 <HAL_GetTick>
 8002388:	0003      	movs	r3, r0
 800238a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800238c:	e009      	b.n	80023a2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800238e:	f7fe ffef 	bl	8001370 <HAL_GetTick>
 8002392:	0002      	movs	r2, r0
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	4a79      	ldr	r2, [pc, #484]	; (8002580 <HAL_RCC_OscConfig+0x620>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e0e6      	b.n	8002570 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023a2:	4b75      	ldr	r3, [pc, #468]	; (8002578 <HAL_RCC_OscConfig+0x618>)
 80023a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a6:	2202      	movs	r2, #2
 80023a8:	4013      	ands	r3, r2
 80023aa:	d0f0      	beq.n	800238e <HAL_RCC_OscConfig+0x42e>
 80023ac:	e013      	b.n	80023d6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ae:	f7fe ffdf 	bl	8001370 <HAL_GetTick>
 80023b2:	0003      	movs	r3, r0
 80023b4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023b6:	e009      	b.n	80023cc <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023b8:	f7fe ffda 	bl	8001370 <HAL_GetTick>
 80023bc:	0002      	movs	r2, r0
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	4a6f      	ldr	r2, [pc, #444]	; (8002580 <HAL_RCC_OscConfig+0x620>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d901      	bls.n	80023cc <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e0d1      	b.n	8002570 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023cc:	4b6a      	ldr	r3, [pc, #424]	; (8002578 <HAL_RCC_OscConfig+0x618>)
 80023ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023d0:	2202      	movs	r2, #2
 80023d2:	4013      	ands	r3, r2
 80023d4:	d1f0      	bne.n	80023b8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80023d6:	231f      	movs	r3, #31
 80023d8:	18fb      	adds	r3, r7, r3
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d105      	bne.n	80023ec <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80023e0:	4b65      	ldr	r3, [pc, #404]	; (8002578 <HAL_RCC_OscConfig+0x618>)
 80023e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023e4:	4b64      	ldr	r3, [pc, #400]	; (8002578 <HAL_RCC_OscConfig+0x618>)
 80023e6:	4967      	ldr	r1, [pc, #412]	; (8002584 <HAL_RCC_OscConfig+0x624>)
 80023e8:	400a      	ands	r2, r1
 80023ea:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	69db      	ldr	r3, [r3, #28]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d100      	bne.n	80023f6 <HAL_RCC_OscConfig+0x496>
 80023f4:	e0bb      	b.n	800256e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023f6:	4b60      	ldr	r3, [pc, #384]	; (8002578 <HAL_RCC_OscConfig+0x618>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	2238      	movs	r2, #56	; 0x38
 80023fc:	4013      	ands	r3, r2
 80023fe:	2b10      	cmp	r3, #16
 8002400:	d100      	bne.n	8002404 <HAL_RCC_OscConfig+0x4a4>
 8002402:	e07b      	b.n	80024fc <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	69db      	ldr	r3, [r3, #28]
 8002408:	2b02      	cmp	r3, #2
 800240a:	d156      	bne.n	80024ba <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800240c:	4b5a      	ldr	r3, [pc, #360]	; (8002578 <HAL_RCC_OscConfig+0x618>)
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	4b59      	ldr	r3, [pc, #356]	; (8002578 <HAL_RCC_OscConfig+0x618>)
 8002412:	495d      	ldr	r1, [pc, #372]	; (8002588 <HAL_RCC_OscConfig+0x628>)
 8002414:	400a      	ands	r2, r1
 8002416:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002418:	f7fe ffaa 	bl	8001370 <HAL_GetTick>
 800241c:	0003      	movs	r3, r0
 800241e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002420:	e008      	b.n	8002434 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002422:	f7fe ffa5 	bl	8001370 <HAL_GetTick>
 8002426:	0002      	movs	r2, r0
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d901      	bls.n	8002434 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e09d      	b.n	8002570 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002434:	4b50      	ldr	r3, [pc, #320]	; (8002578 <HAL_RCC_OscConfig+0x618>)
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	2380      	movs	r3, #128	; 0x80
 800243a:	049b      	lsls	r3, r3, #18
 800243c:	4013      	ands	r3, r2
 800243e:	d1f0      	bne.n	8002422 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002440:	4b4d      	ldr	r3, [pc, #308]	; (8002578 <HAL_RCC_OscConfig+0x618>)
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	4a51      	ldr	r2, [pc, #324]	; (800258c <HAL_RCC_OscConfig+0x62c>)
 8002446:	4013      	ands	r3, r2
 8002448:	0019      	movs	r1, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a1a      	ldr	r2, [r3, #32]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002452:	431a      	orrs	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002458:	021b      	lsls	r3, r3, #8
 800245a:	431a      	orrs	r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002460:	431a      	orrs	r2, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002466:	431a      	orrs	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800246c:	431a      	orrs	r2, r3
 800246e:	4b42      	ldr	r3, [pc, #264]	; (8002578 <HAL_RCC_OscConfig+0x618>)
 8002470:	430a      	orrs	r2, r1
 8002472:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002474:	4b40      	ldr	r3, [pc, #256]	; (8002578 <HAL_RCC_OscConfig+0x618>)
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	4b3f      	ldr	r3, [pc, #252]	; (8002578 <HAL_RCC_OscConfig+0x618>)
 800247a:	2180      	movs	r1, #128	; 0x80
 800247c:	0449      	lsls	r1, r1, #17
 800247e:	430a      	orrs	r2, r1
 8002480:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002482:	4b3d      	ldr	r3, [pc, #244]	; (8002578 <HAL_RCC_OscConfig+0x618>)
 8002484:	68da      	ldr	r2, [r3, #12]
 8002486:	4b3c      	ldr	r3, [pc, #240]	; (8002578 <HAL_RCC_OscConfig+0x618>)
 8002488:	2180      	movs	r1, #128	; 0x80
 800248a:	0549      	lsls	r1, r1, #21
 800248c:	430a      	orrs	r2, r1
 800248e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002490:	f7fe ff6e 	bl	8001370 <HAL_GetTick>
 8002494:	0003      	movs	r3, r0
 8002496:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002498:	e008      	b.n	80024ac <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800249a:	f7fe ff69 	bl	8001370 <HAL_GetTick>
 800249e:	0002      	movs	r2, r0
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d901      	bls.n	80024ac <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e061      	b.n	8002570 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024ac:	4b32      	ldr	r3, [pc, #200]	; (8002578 <HAL_RCC_OscConfig+0x618>)
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	2380      	movs	r3, #128	; 0x80
 80024b2:	049b      	lsls	r3, r3, #18
 80024b4:	4013      	ands	r3, r2
 80024b6:	d0f0      	beq.n	800249a <HAL_RCC_OscConfig+0x53a>
 80024b8:	e059      	b.n	800256e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ba:	4b2f      	ldr	r3, [pc, #188]	; (8002578 <HAL_RCC_OscConfig+0x618>)
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	4b2e      	ldr	r3, [pc, #184]	; (8002578 <HAL_RCC_OscConfig+0x618>)
 80024c0:	4931      	ldr	r1, [pc, #196]	; (8002588 <HAL_RCC_OscConfig+0x628>)
 80024c2:	400a      	ands	r2, r1
 80024c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c6:	f7fe ff53 	bl	8001370 <HAL_GetTick>
 80024ca:	0003      	movs	r3, r0
 80024cc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024ce:	e008      	b.n	80024e2 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024d0:	f7fe ff4e 	bl	8001370 <HAL_GetTick>
 80024d4:	0002      	movs	r2, r0
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e046      	b.n	8002570 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024e2:	4b25      	ldr	r3, [pc, #148]	; (8002578 <HAL_RCC_OscConfig+0x618>)
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	2380      	movs	r3, #128	; 0x80
 80024e8:	049b      	lsls	r3, r3, #18
 80024ea:	4013      	ands	r3, r2
 80024ec:	d1f0      	bne.n	80024d0 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80024ee:	4b22      	ldr	r3, [pc, #136]	; (8002578 <HAL_RCC_OscConfig+0x618>)
 80024f0:	68da      	ldr	r2, [r3, #12]
 80024f2:	4b21      	ldr	r3, [pc, #132]	; (8002578 <HAL_RCC_OscConfig+0x618>)
 80024f4:	4926      	ldr	r1, [pc, #152]	; (8002590 <HAL_RCC_OscConfig+0x630>)
 80024f6:	400a      	ands	r2, r1
 80024f8:	60da      	str	r2, [r3, #12]
 80024fa:	e038      	b.n	800256e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	69db      	ldr	r3, [r3, #28]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d101      	bne.n	8002508 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e033      	b.n	8002570 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002508:	4b1b      	ldr	r3, [pc, #108]	; (8002578 <HAL_RCC_OscConfig+0x618>)
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	2203      	movs	r2, #3
 8002512:	401a      	ands	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a1b      	ldr	r3, [r3, #32]
 8002518:	429a      	cmp	r2, r3
 800251a:	d126      	bne.n	800256a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	2270      	movs	r2, #112	; 0x70
 8002520:	401a      	ands	r2, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002526:	429a      	cmp	r2, r3
 8002528:	d11f      	bne.n	800256a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800252a:	697a      	ldr	r2, [r7, #20]
 800252c:	23fe      	movs	r3, #254	; 0xfe
 800252e:	01db      	lsls	r3, r3, #7
 8002530:	401a      	ands	r2, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002536:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002538:	429a      	cmp	r2, r3
 800253a:	d116      	bne.n	800256a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800253c:	697a      	ldr	r2, [r7, #20]
 800253e:	23f8      	movs	r3, #248	; 0xf8
 8002540:	039b      	lsls	r3, r3, #14
 8002542:	401a      	ands	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002548:	429a      	cmp	r2, r3
 800254a:	d10e      	bne.n	800256a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800254c:	697a      	ldr	r2, [r7, #20]
 800254e:	23e0      	movs	r3, #224	; 0xe0
 8002550:	051b      	lsls	r3, r3, #20
 8002552:	401a      	ands	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002558:	429a      	cmp	r2, r3
 800255a:	d106      	bne.n	800256a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	0f5b      	lsrs	r3, r3, #29
 8002560:	075a      	lsls	r2, r3, #29
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002566:	429a      	cmp	r2, r3
 8002568:	d001      	beq.n	800256e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e000      	b.n	8002570 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800256e:	2300      	movs	r3, #0
}
 8002570:	0018      	movs	r0, r3
 8002572:	46bd      	mov	sp, r7
 8002574:	b008      	add	sp, #32
 8002576:	bd80      	pop	{r7, pc}
 8002578:	40021000 	.word	0x40021000
 800257c:	40007000 	.word	0x40007000
 8002580:	00001388 	.word	0x00001388
 8002584:	efffffff 	.word	0xefffffff
 8002588:	feffffff 	.word	0xfeffffff
 800258c:	11c1808c 	.word	0x11c1808c
 8002590:	eefefffc 	.word	0xeefefffc

08002594 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d101      	bne.n	80025a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e0e9      	b.n	800277c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025a8:	4b76      	ldr	r3, [pc, #472]	; (8002784 <HAL_RCC_ClockConfig+0x1f0>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2207      	movs	r2, #7
 80025ae:	4013      	ands	r3, r2
 80025b0:	683a      	ldr	r2, [r7, #0]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d91e      	bls.n	80025f4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025b6:	4b73      	ldr	r3, [pc, #460]	; (8002784 <HAL_RCC_ClockConfig+0x1f0>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2207      	movs	r2, #7
 80025bc:	4393      	bics	r3, r2
 80025be:	0019      	movs	r1, r3
 80025c0:	4b70      	ldr	r3, [pc, #448]	; (8002784 <HAL_RCC_ClockConfig+0x1f0>)
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	430a      	orrs	r2, r1
 80025c6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80025c8:	f7fe fed2 	bl	8001370 <HAL_GetTick>
 80025cc:	0003      	movs	r3, r0
 80025ce:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80025d0:	e009      	b.n	80025e6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025d2:	f7fe fecd 	bl	8001370 <HAL_GetTick>
 80025d6:	0002      	movs	r2, r0
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	4a6a      	ldr	r2, [pc, #424]	; (8002788 <HAL_RCC_ClockConfig+0x1f4>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e0ca      	b.n	800277c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80025e6:	4b67      	ldr	r3, [pc, #412]	; (8002784 <HAL_RCC_ClockConfig+0x1f0>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2207      	movs	r2, #7
 80025ec:	4013      	ands	r3, r2
 80025ee:	683a      	ldr	r2, [r7, #0]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d1ee      	bne.n	80025d2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2202      	movs	r2, #2
 80025fa:	4013      	ands	r3, r2
 80025fc:	d015      	beq.n	800262a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2204      	movs	r2, #4
 8002604:	4013      	ands	r3, r2
 8002606:	d006      	beq.n	8002616 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002608:	4b60      	ldr	r3, [pc, #384]	; (800278c <HAL_RCC_ClockConfig+0x1f8>)
 800260a:	689a      	ldr	r2, [r3, #8]
 800260c:	4b5f      	ldr	r3, [pc, #380]	; (800278c <HAL_RCC_ClockConfig+0x1f8>)
 800260e:	21e0      	movs	r1, #224	; 0xe0
 8002610:	01c9      	lsls	r1, r1, #7
 8002612:	430a      	orrs	r2, r1
 8002614:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002616:	4b5d      	ldr	r3, [pc, #372]	; (800278c <HAL_RCC_ClockConfig+0x1f8>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	4a5d      	ldr	r2, [pc, #372]	; (8002790 <HAL_RCC_ClockConfig+0x1fc>)
 800261c:	4013      	ands	r3, r2
 800261e:	0019      	movs	r1, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	689a      	ldr	r2, [r3, #8]
 8002624:	4b59      	ldr	r3, [pc, #356]	; (800278c <HAL_RCC_ClockConfig+0x1f8>)
 8002626:	430a      	orrs	r2, r1
 8002628:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2201      	movs	r2, #1
 8002630:	4013      	ands	r3, r2
 8002632:	d057      	beq.n	80026e4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	2b01      	cmp	r3, #1
 800263a:	d107      	bne.n	800264c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800263c:	4b53      	ldr	r3, [pc, #332]	; (800278c <HAL_RCC_ClockConfig+0x1f8>)
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	2380      	movs	r3, #128	; 0x80
 8002642:	029b      	lsls	r3, r3, #10
 8002644:	4013      	ands	r3, r2
 8002646:	d12b      	bne.n	80026a0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e097      	b.n	800277c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	2b02      	cmp	r3, #2
 8002652:	d107      	bne.n	8002664 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002654:	4b4d      	ldr	r3, [pc, #308]	; (800278c <HAL_RCC_ClockConfig+0x1f8>)
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	2380      	movs	r3, #128	; 0x80
 800265a:	049b      	lsls	r3, r3, #18
 800265c:	4013      	ands	r3, r2
 800265e:	d11f      	bne.n	80026a0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e08b      	b.n	800277c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d107      	bne.n	800267c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800266c:	4b47      	ldr	r3, [pc, #284]	; (800278c <HAL_RCC_ClockConfig+0x1f8>)
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	2380      	movs	r3, #128	; 0x80
 8002672:	00db      	lsls	r3, r3, #3
 8002674:	4013      	ands	r3, r2
 8002676:	d113      	bne.n	80026a0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e07f      	b.n	800277c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	2b03      	cmp	r3, #3
 8002682:	d106      	bne.n	8002692 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002684:	4b41      	ldr	r3, [pc, #260]	; (800278c <HAL_RCC_ClockConfig+0x1f8>)
 8002686:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002688:	2202      	movs	r2, #2
 800268a:	4013      	ands	r3, r2
 800268c:	d108      	bne.n	80026a0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e074      	b.n	800277c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002692:	4b3e      	ldr	r3, [pc, #248]	; (800278c <HAL_RCC_ClockConfig+0x1f8>)
 8002694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002696:	2202      	movs	r2, #2
 8002698:	4013      	ands	r3, r2
 800269a:	d101      	bne.n	80026a0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e06d      	b.n	800277c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80026a0:	4b3a      	ldr	r3, [pc, #232]	; (800278c <HAL_RCC_ClockConfig+0x1f8>)
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	2207      	movs	r2, #7
 80026a6:	4393      	bics	r3, r2
 80026a8:	0019      	movs	r1, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685a      	ldr	r2, [r3, #4]
 80026ae:	4b37      	ldr	r3, [pc, #220]	; (800278c <HAL_RCC_ClockConfig+0x1f8>)
 80026b0:	430a      	orrs	r2, r1
 80026b2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026b4:	f7fe fe5c 	bl	8001370 <HAL_GetTick>
 80026b8:	0003      	movs	r3, r0
 80026ba:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026bc:	e009      	b.n	80026d2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026be:	f7fe fe57 	bl	8001370 <HAL_GetTick>
 80026c2:	0002      	movs	r2, r0
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	4a2f      	ldr	r2, [pc, #188]	; (8002788 <HAL_RCC_ClockConfig+0x1f4>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e054      	b.n	800277c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026d2:	4b2e      	ldr	r3, [pc, #184]	; (800278c <HAL_RCC_ClockConfig+0x1f8>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	2238      	movs	r2, #56	; 0x38
 80026d8:	401a      	ands	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	00db      	lsls	r3, r3, #3
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d1ec      	bne.n	80026be <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026e4:	4b27      	ldr	r3, [pc, #156]	; (8002784 <HAL_RCC_ClockConfig+0x1f0>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2207      	movs	r2, #7
 80026ea:	4013      	ands	r3, r2
 80026ec:	683a      	ldr	r2, [r7, #0]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d21e      	bcs.n	8002730 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026f2:	4b24      	ldr	r3, [pc, #144]	; (8002784 <HAL_RCC_ClockConfig+0x1f0>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2207      	movs	r2, #7
 80026f8:	4393      	bics	r3, r2
 80026fa:	0019      	movs	r1, r3
 80026fc:	4b21      	ldr	r3, [pc, #132]	; (8002784 <HAL_RCC_ClockConfig+0x1f0>)
 80026fe:	683a      	ldr	r2, [r7, #0]
 8002700:	430a      	orrs	r2, r1
 8002702:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002704:	f7fe fe34 	bl	8001370 <HAL_GetTick>
 8002708:	0003      	movs	r3, r0
 800270a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800270c:	e009      	b.n	8002722 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800270e:	f7fe fe2f 	bl	8001370 <HAL_GetTick>
 8002712:	0002      	movs	r2, r0
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	4a1b      	ldr	r2, [pc, #108]	; (8002788 <HAL_RCC_ClockConfig+0x1f4>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d901      	bls.n	8002722 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e02c      	b.n	800277c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002722:	4b18      	ldr	r3, [pc, #96]	; (8002784 <HAL_RCC_ClockConfig+0x1f0>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2207      	movs	r2, #7
 8002728:	4013      	ands	r3, r2
 800272a:	683a      	ldr	r2, [r7, #0]
 800272c:	429a      	cmp	r2, r3
 800272e:	d1ee      	bne.n	800270e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2204      	movs	r2, #4
 8002736:	4013      	ands	r3, r2
 8002738:	d009      	beq.n	800274e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800273a:	4b14      	ldr	r3, [pc, #80]	; (800278c <HAL_RCC_ClockConfig+0x1f8>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	4a15      	ldr	r2, [pc, #84]	; (8002794 <HAL_RCC_ClockConfig+0x200>)
 8002740:	4013      	ands	r3, r2
 8002742:	0019      	movs	r1, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	68da      	ldr	r2, [r3, #12]
 8002748:	4b10      	ldr	r3, [pc, #64]	; (800278c <HAL_RCC_ClockConfig+0x1f8>)
 800274a:	430a      	orrs	r2, r1
 800274c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800274e:	f000 f829 	bl	80027a4 <HAL_RCC_GetSysClockFreq>
 8002752:	0001      	movs	r1, r0
 8002754:	4b0d      	ldr	r3, [pc, #52]	; (800278c <HAL_RCC_ClockConfig+0x1f8>)
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	0a1b      	lsrs	r3, r3, #8
 800275a:	220f      	movs	r2, #15
 800275c:	401a      	ands	r2, r3
 800275e:	4b0e      	ldr	r3, [pc, #56]	; (8002798 <HAL_RCC_ClockConfig+0x204>)
 8002760:	0092      	lsls	r2, r2, #2
 8002762:	58d3      	ldr	r3, [r2, r3]
 8002764:	221f      	movs	r2, #31
 8002766:	4013      	ands	r3, r2
 8002768:	000a      	movs	r2, r1
 800276a:	40da      	lsrs	r2, r3
 800276c:	4b0b      	ldr	r3, [pc, #44]	; (800279c <HAL_RCC_ClockConfig+0x208>)
 800276e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002770:	4b0b      	ldr	r3, [pc, #44]	; (80027a0 <HAL_RCC_ClockConfig+0x20c>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	0018      	movs	r0, r3
 8002776:	f7fe fd9f 	bl	80012b8 <HAL_InitTick>
 800277a:	0003      	movs	r3, r0
}
 800277c:	0018      	movs	r0, r3
 800277e:	46bd      	mov	sp, r7
 8002780:	b004      	add	sp, #16
 8002782:	bd80      	pop	{r7, pc}
 8002784:	40022000 	.word	0x40022000
 8002788:	00001388 	.word	0x00001388
 800278c:	40021000 	.word	0x40021000
 8002790:	fffff0ff 	.word	0xfffff0ff
 8002794:	ffff8fff 	.word	0xffff8fff
 8002798:	080066d8 	.word	0x080066d8
 800279c:	20000064 	.word	0x20000064
 80027a0:	20000068 	.word	0x20000068

080027a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b086      	sub	sp, #24
 80027a8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027aa:	4b3c      	ldr	r3, [pc, #240]	; (800289c <HAL_RCC_GetSysClockFreq+0xf8>)
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	2238      	movs	r2, #56	; 0x38
 80027b0:	4013      	ands	r3, r2
 80027b2:	d10f      	bne.n	80027d4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80027b4:	4b39      	ldr	r3, [pc, #228]	; (800289c <HAL_RCC_GetSysClockFreq+0xf8>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	0adb      	lsrs	r3, r3, #11
 80027ba:	2207      	movs	r2, #7
 80027bc:	4013      	ands	r3, r2
 80027be:	2201      	movs	r2, #1
 80027c0:	409a      	lsls	r2, r3
 80027c2:	0013      	movs	r3, r2
 80027c4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80027c6:	6839      	ldr	r1, [r7, #0]
 80027c8:	4835      	ldr	r0, [pc, #212]	; (80028a0 <HAL_RCC_GetSysClockFreq+0xfc>)
 80027ca:	f7fd fcad 	bl	8000128 <__udivsi3>
 80027ce:	0003      	movs	r3, r0
 80027d0:	613b      	str	r3, [r7, #16]
 80027d2:	e05d      	b.n	8002890 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027d4:	4b31      	ldr	r3, [pc, #196]	; (800289c <HAL_RCC_GetSysClockFreq+0xf8>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	2238      	movs	r2, #56	; 0x38
 80027da:	4013      	ands	r3, r2
 80027dc:	2b08      	cmp	r3, #8
 80027de:	d102      	bne.n	80027e6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80027e0:	4b30      	ldr	r3, [pc, #192]	; (80028a4 <HAL_RCC_GetSysClockFreq+0x100>)
 80027e2:	613b      	str	r3, [r7, #16]
 80027e4:	e054      	b.n	8002890 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027e6:	4b2d      	ldr	r3, [pc, #180]	; (800289c <HAL_RCC_GetSysClockFreq+0xf8>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	2238      	movs	r2, #56	; 0x38
 80027ec:	4013      	ands	r3, r2
 80027ee:	2b10      	cmp	r3, #16
 80027f0:	d138      	bne.n	8002864 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80027f2:	4b2a      	ldr	r3, [pc, #168]	; (800289c <HAL_RCC_GetSysClockFreq+0xf8>)
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	2203      	movs	r2, #3
 80027f8:	4013      	ands	r3, r2
 80027fa:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80027fc:	4b27      	ldr	r3, [pc, #156]	; (800289c <HAL_RCC_GetSysClockFreq+0xf8>)
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	091b      	lsrs	r3, r3, #4
 8002802:	2207      	movs	r2, #7
 8002804:	4013      	ands	r3, r2
 8002806:	3301      	adds	r3, #1
 8002808:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2b03      	cmp	r3, #3
 800280e:	d10d      	bne.n	800282c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002810:	68b9      	ldr	r1, [r7, #8]
 8002812:	4824      	ldr	r0, [pc, #144]	; (80028a4 <HAL_RCC_GetSysClockFreq+0x100>)
 8002814:	f7fd fc88 	bl	8000128 <__udivsi3>
 8002818:	0003      	movs	r3, r0
 800281a:	0019      	movs	r1, r3
 800281c:	4b1f      	ldr	r3, [pc, #124]	; (800289c <HAL_RCC_GetSysClockFreq+0xf8>)
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	0a1b      	lsrs	r3, r3, #8
 8002822:	227f      	movs	r2, #127	; 0x7f
 8002824:	4013      	ands	r3, r2
 8002826:	434b      	muls	r3, r1
 8002828:	617b      	str	r3, [r7, #20]
        break;
 800282a:	e00d      	b.n	8002848 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800282c:	68b9      	ldr	r1, [r7, #8]
 800282e:	481c      	ldr	r0, [pc, #112]	; (80028a0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002830:	f7fd fc7a 	bl	8000128 <__udivsi3>
 8002834:	0003      	movs	r3, r0
 8002836:	0019      	movs	r1, r3
 8002838:	4b18      	ldr	r3, [pc, #96]	; (800289c <HAL_RCC_GetSysClockFreq+0xf8>)
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	0a1b      	lsrs	r3, r3, #8
 800283e:	227f      	movs	r2, #127	; 0x7f
 8002840:	4013      	ands	r3, r2
 8002842:	434b      	muls	r3, r1
 8002844:	617b      	str	r3, [r7, #20]
        break;
 8002846:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002848:	4b14      	ldr	r3, [pc, #80]	; (800289c <HAL_RCC_GetSysClockFreq+0xf8>)
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	0f5b      	lsrs	r3, r3, #29
 800284e:	2207      	movs	r2, #7
 8002850:	4013      	ands	r3, r2
 8002852:	3301      	adds	r3, #1
 8002854:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002856:	6879      	ldr	r1, [r7, #4]
 8002858:	6978      	ldr	r0, [r7, #20]
 800285a:	f7fd fc65 	bl	8000128 <__udivsi3>
 800285e:	0003      	movs	r3, r0
 8002860:	613b      	str	r3, [r7, #16]
 8002862:	e015      	b.n	8002890 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002864:	4b0d      	ldr	r3, [pc, #52]	; (800289c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	2238      	movs	r2, #56	; 0x38
 800286a:	4013      	ands	r3, r2
 800286c:	2b20      	cmp	r3, #32
 800286e:	d103      	bne.n	8002878 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002870:	2380      	movs	r3, #128	; 0x80
 8002872:	021b      	lsls	r3, r3, #8
 8002874:	613b      	str	r3, [r7, #16]
 8002876:	e00b      	b.n	8002890 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002878:	4b08      	ldr	r3, [pc, #32]	; (800289c <HAL_RCC_GetSysClockFreq+0xf8>)
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	2238      	movs	r2, #56	; 0x38
 800287e:	4013      	ands	r3, r2
 8002880:	2b18      	cmp	r3, #24
 8002882:	d103      	bne.n	800288c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002884:	23fa      	movs	r3, #250	; 0xfa
 8002886:	01db      	lsls	r3, r3, #7
 8002888:	613b      	str	r3, [r7, #16]
 800288a:	e001      	b.n	8002890 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800288c:	2300      	movs	r3, #0
 800288e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002890:	693b      	ldr	r3, [r7, #16]
}
 8002892:	0018      	movs	r0, r3
 8002894:	46bd      	mov	sp, r7
 8002896:	b006      	add	sp, #24
 8002898:	bd80      	pop	{r7, pc}
 800289a:	46c0      	nop			; (mov r8, r8)
 800289c:	40021000 	.word	0x40021000
 80028a0:	00f42400 	.word	0x00f42400
 80028a4:	007a1200 	.word	0x007a1200

080028a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028ac:	4b02      	ldr	r3, [pc, #8]	; (80028b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80028ae:	681b      	ldr	r3, [r3, #0]
}
 80028b0:	0018      	movs	r0, r3
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	46c0      	nop			; (mov r8, r8)
 80028b8:	20000064 	.word	0x20000064

080028bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028bc:	b5b0      	push	{r4, r5, r7, lr}
 80028be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80028c0:	f7ff fff2 	bl	80028a8 <HAL_RCC_GetHCLKFreq>
 80028c4:	0004      	movs	r4, r0
 80028c6:	f7ff fb3f 	bl	8001f48 <LL_RCC_GetAPB1Prescaler>
 80028ca:	0003      	movs	r3, r0
 80028cc:	0b1a      	lsrs	r2, r3, #12
 80028ce:	4b05      	ldr	r3, [pc, #20]	; (80028e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80028d0:	0092      	lsls	r2, r2, #2
 80028d2:	58d3      	ldr	r3, [r2, r3]
 80028d4:	221f      	movs	r2, #31
 80028d6:	4013      	ands	r3, r2
 80028d8:	40dc      	lsrs	r4, r3
 80028da:	0023      	movs	r3, r4
}
 80028dc:	0018      	movs	r0, r3
 80028de:	46bd      	mov	sp, r7
 80028e0:	bdb0      	pop	{r4, r5, r7, pc}
 80028e2:	46c0      	nop			; (mov r8, r8)
 80028e4:	08006718 	.word	0x08006718

080028e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b086      	sub	sp, #24
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80028f0:	2313      	movs	r3, #19
 80028f2:	18fb      	adds	r3, r7, r3
 80028f4:	2200      	movs	r2, #0
 80028f6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80028f8:	2312      	movs	r3, #18
 80028fa:	18fb      	adds	r3, r7, r3
 80028fc:	2200      	movs	r2, #0
 80028fe:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	2380      	movs	r3, #128	; 0x80
 8002906:	029b      	lsls	r3, r3, #10
 8002908:	4013      	ands	r3, r2
 800290a:	d100      	bne.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800290c:	e0a3      	b.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800290e:	2011      	movs	r0, #17
 8002910:	183b      	adds	r3, r7, r0
 8002912:	2200      	movs	r2, #0
 8002914:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002916:	4ba5      	ldr	r3, [pc, #660]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002918:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800291a:	2380      	movs	r3, #128	; 0x80
 800291c:	055b      	lsls	r3, r3, #21
 800291e:	4013      	ands	r3, r2
 8002920:	d110      	bne.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002922:	4ba2      	ldr	r3, [pc, #648]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002924:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002926:	4ba1      	ldr	r3, [pc, #644]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002928:	2180      	movs	r1, #128	; 0x80
 800292a:	0549      	lsls	r1, r1, #21
 800292c:	430a      	orrs	r2, r1
 800292e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002930:	4b9e      	ldr	r3, [pc, #632]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002932:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002934:	2380      	movs	r3, #128	; 0x80
 8002936:	055b      	lsls	r3, r3, #21
 8002938:	4013      	ands	r3, r2
 800293a:	60bb      	str	r3, [r7, #8]
 800293c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800293e:	183b      	adds	r3, r7, r0
 8002940:	2201      	movs	r2, #1
 8002942:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002944:	4b9a      	ldr	r3, [pc, #616]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	4b99      	ldr	r3, [pc, #612]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800294a:	2180      	movs	r1, #128	; 0x80
 800294c:	0049      	lsls	r1, r1, #1
 800294e:	430a      	orrs	r2, r1
 8002950:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002952:	f7fe fd0d 	bl	8001370 <HAL_GetTick>
 8002956:	0003      	movs	r3, r0
 8002958:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800295a:	e00b      	b.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800295c:	f7fe fd08 	bl	8001370 <HAL_GetTick>
 8002960:	0002      	movs	r2, r0
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b02      	cmp	r3, #2
 8002968:	d904      	bls.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800296a:	2313      	movs	r3, #19
 800296c:	18fb      	adds	r3, r7, r3
 800296e:	2203      	movs	r2, #3
 8002970:	701a      	strb	r2, [r3, #0]
        break;
 8002972:	e005      	b.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002974:	4b8e      	ldr	r3, [pc, #568]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	2380      	movs	r3, #128	; 0x80
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	4013      	ands	r3, r2
 800297e:	d0ed      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002980:	2313      	movs	r3, #19
 8002982:	18fb      	adds	r3, r7, r3
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d154      	bne.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800298a:	4b88      	ldr	r3, [pc, #544]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800298c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800298e:	23c0      	movs	r3, #192	; 0xc0
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	4013      	ands	r3, r2
 8002994:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d019      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a0:	697a      	ldr	r2, [r7, #20]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d014      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80029a6:	4b81      	ldr	r3, [pc, #516]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80029a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029aa:	4a82      	ldr	r2, [pc, #520]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80029ac:	4013      	ands	r3, r2
 80029ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80029b0:	4b7e      	ldr	r3, [pc, #504]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80029b2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80029b4:	4b7d      	ldr	r3, [pc, #500]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80029b6:	2180      	movs	r1, #128	; 0x80
 80029b8:	0249      	lsls	r1, r1, #9
 80029ba:	430a      	orrs	r2, r1
 80029bc:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80029be:	4b7b      	ldr	r3, [pc, #492]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80029c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80029c2:	4b7a      	ldr	r3, [pc, #488]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80029c4:	497c      	ldr	r1, [pc, #496]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80029c6:	400a      	ands	r2, r1
 80029c8:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80029ca:	4b78      	ldr	r3, [pc, #480]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80029cc:	697a      	ldr	r2, [r7, #20]
 80029ce:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	2201      	movs	r2, #1
 80029d4:	4013      	ands	r3, r2
 80029d6:	d016      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d8:	f7fe fcca 	bl	8001370 <HAL_GetTick>
 80029dc:	0003      	movs	r3, r0
 80029de:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029e0:	e00c      	b.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029e2:	f7fe fcc5 	bl	8001370 <HAL_GetTick>
 80029e6:	0002      	movs	r2, r0
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	4a73      	ldr	r2, [pc, #460]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d904      	bls.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80029f2:	2313      	movs	r3, #19
 80029f4:	18fb      	adds	r3, r7, r3
 80029f6:	2203      	movs	r2, #3
 80029f8:	701a      	strb	r2, [r3, #0]
            break;
 80029fa:	e004      	b.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029fc:	4b6b      	ldr	r3, [pc, #428]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80029fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a00:	2202      	movs	r2, #2
 8002a02:	4013      	ands	r3, r2
 8002a04:	d0ed      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002a06:	2313      	movs	r3, #19
 8002a08:	18fb      	adds	r3, r7, r3
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d10a      	bne.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a10:	4b66      	ldr	r3, [pc, #408]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a14:	4a67      	ldr	r2, [pc, #412]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002a16:	4013      	ands	r3, r2
 8002a18:	0019      	movs	r1, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a1e:	4b63      	ldr	r3, [pc, #396]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a20:	430a      	orrs	r2, r1
 8002a22:	65da      	str	r2, [r3, #92]	; 0x5c
 8002a24:	e00c      	b.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a26:	2312      	movs	r3, #18
 8002a28:	18fb      	adds	r3, r7, r3
 8002a2a:	2213      	movs	r2, #19
 8002a2c:	18ba      	adds	r2, r7, r2
 8002a2e:	7812      	ldrb	r2, [r2, #0]
 8002a30:	701a      	strb	r2, [r3, #0]
 8002a32:	e005      	b.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a34:	2312      	movs	r3, #18
 8002a36:	18fb      	adds	r3, r7, r3
 8002a38:	2213      	movs	r2, #19
 8002a3a:	18ba      	adds	r2, r7, r2
 8002a3c:	7812      	ldrb	r2, [r2, #0]
 8002a3e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a40:	2311      	movs	r3, #17
 8002a42:	18fb      	adds	r3, r7, r3
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d105      	bne.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a4a:	4b58      	ldr	r3, [pc, #352]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a4e:	4b57      	ldr	r3, [pc, #348]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a50:	495b      	ldr	r1, [pc, #364]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002a52:	400a      	ands	r2, r1
 8002a54:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	d009      	beq.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a60:	4b52      	ldr	r3, [pc, #328]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a64:	2203      	movs	r2, #3
 8002a66:	4393      	bics	r3, r2
 8002a68:	0019      	movs	r1, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685a      	ldr	r2, [r3, #4]
 8002a6e:	4b4f      	ldr	r3, [pc, #316]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a70:	430a      	orrs	r2, r1
 8002a72:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2210      	movs	r2, #16
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	d009      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a7e:	4b4b      	ldr	r3, [pc, #300]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a82:	4a50      	ldr	r2, [pc, #320]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8002a84:	4013      	ands	r3, r2
 8002a86:	0019      	movs	r1, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	689a      	ldr	r2, [r3, #8]
 8002a8c:	4b47      	ldr	r3, [pc, #284]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	2380      	movs	r3, #128	; 0x80
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	d009      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a9e:	4b43      	ldr	r3, [pc, #268]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aa2:	4a49      	ldr	r2, [pc, #292]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	0019      	movs	r1, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	695a      	ldr	r2, [r3, #20]
 8002aac:	4b3f      	ldr	r3, [pc, #252]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	2380      	movs	r3, #128	; 0x80
 8002ab8:	00db      	lsls	r3, r3, #3
 8002aba:	4013      	ands	r3, r2
 8002abc:	d009      	beq.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002abe:	4b3b      	ldr	r3, [pc, #236]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac2:	4a42      	ldr	r2, [pc, #264]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	0019      	movs	r1, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	699a      	ldr	r2, [r3, #24]
 8002acc:	4b37      	ldr	r3, [pc, #220]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2220      	movs	r2, #32
 8002ad8:	4013      	ands	r3, r2
 8002ada:	d009      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002adc:	4b33      	ldr	r3, [pc, #204]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae0:	4a3b      	ldr	r2, [pc, #236]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	0019      	movs	r1, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	68da      	ldr	r2, [r3, #12]
 8002aea:	4b30      	ldr	r3, [pc, #192]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002aec:	430a      	orrs	r2, r1
 8002aee:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	2380      	movs	r3, #128	; 0x80
 8002af6:	01db      	lsls	r3, r3, #7
 8002af8:	4013      	ands	r3, r2
 8002afa:	d015      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002afc:	4b2b      	ldr	r3, [pc, #172]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	0899      	lsrs	r1, r3, #2
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	69da      	ldr	r2, [r3, #28]
 8002b08:	4b28      	ldr	r3, [pc, #160]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b0a:	430a      	orrs	r2, r1
 8002b0c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	69da      	ldr	r2, [r3, #28]
 8002b12:	2380      	movs	r3, #128	; 0x80
 8002b14:	05db      	lsls	r3, r3, #23
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d106      	bne.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002b1a:	4b24      	ldr	r3, [pc, #144]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b1c:	68da      	ldr	r2, [r3, #12]
 8002b1e:	4b23      	ldr	r3, [pc, #140]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b20:	2180      	movs	r1, #128	; 0x80
 8002b22:	0249      	lsls	r1, r1, #9
 8002b24:	430a      	orrs	r2, r1
 8002b26:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	2380      	movs	r3, #128	; 0x80
 8002b2e:	039b      	lsls	r3, r3, #14
 8002b30:	4013      	ands	r3, r2
 8002b32:	d016      	beq.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002b34:	4b1d      	ldr	r3, [pc, #116]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b38:	4a26      	ldr	r2, [pc, #152]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	0019      	movs	r1, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a1a      	ldr	r2, [r3, #32]
 8002b42:	4b1a      	ldr	r3, [pc, #104]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b44:	430a      	orrs	r2, r1
 8002b46:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a1a      	ldr	r2, [r3, #32]
 8002b4c:	2380      	movs	r3, #128	; 0x80
 8002b4e:	03db      	lsls	r3, r3, #15
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d106      	bne.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002b54:	4b15      	ldr	r3, [pc, #84]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b56:	68da      	ldr	r2, [r3, #12]
 8002b58:	4b14      	ldr	r3, [pc, #80]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b5a:	2180      	movs	r1, #128	; 0x80
 8002b5c:	0449      	lsls	r1, r1, #17
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	2380      	movs	r3, #128	; 0x80
 8002b68:	011b      	lsls	r3, r3, #4
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	d016      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002b6e:	4b0f      	ldr	r3, [pc, #60]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b72:	4a19      	ldr	r2, [pc, #100]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002b74:	4013      	ands	r3, r2
 8002b76:	0019      	movs	r1, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	691a      	ldr	r2, [r3, #16]
 8002b7c:	4b0b      	ldr	r3, [pc, #44]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	691a      	ldr	r2, [r3, #16]
 8002b86:	2380      	movs	r3, #128	; 0x80
 8002b88:	01db      	lsls	r3, r3, #7
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d106      	bne.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002b8e:	4b07      	ldr	r3, [pc, #28]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b90:	68da      	ldr	r2, [r3, #12]
 8002b92:	4b06      	ldr	r3, [pc, #24]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b94:	2180      	movs	r1, #128	; 0x80
 8002b96:	0249      	lsls	r1, r1, #9
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002b9c:	2312      	movs	r3, #18
 8002b9e:	18fb      	adds	r3, r7, r3
 8002ba0:	781b      	ldrb	r3, [r3, #0]
}
 8002ba2:	0018      	movs	r0, r3
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	b006      	add	sp, #24
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	46c0      	nop			; (mov r8, r8)
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	40007000 	.word	0x40007000
 8002bb4:	fffffcff 	.word	0xfffffcff
 8002bb8:	fffeffff 	.word	0xfffeffff
 8002bbc:	00001388 	.word	0x00001388
 8002bc0:	efffffff 	.word	0xefffffff
 8002bc4:	fffff3ff 	.word	0xfffff3ff
 8002bc8:	fff3ffff 	.word	0xfff3ffff
 8002bcc:	ffcfffff 	.word	0xffcfffff
 8002bd0:	ffffcfff 	.word	0xffffcfff
 8002bd4:	ffbfffff 	.word	0xffbfffff
 8002bd8:	ffff3fff 	.word	0xffff3fff

08002bdc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002bdc:	b5b0      	push	{r4, r5, r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002be4:	230f      	movs	r3, #15
 8002be6:	18fb      	adds	r3, r7, r3
 8002be8:	2201      	movs	r2, #1
 8002bea:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d100      	bne.n	8002bf4 <HAL_RTC_Init+0x18>
 8002bf2:	e08c      	b.n	8002d0e <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2229      	movs	r2, #41	; 0x29
 8002bf8:	5c9b      	ldrb	r3, [r3, r2]
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d10b      	bne.n	8002c18 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2228      	movs	r2, #40	; 0x28
 8002c04:	2100      	movs	r1, #0
 8002c06:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2288      	movs	r2, #136	; 0x88
 8002c0c:	0212      	lsls	r2, r2, #8
 8002c0e:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	0018      	movs	r0, r3
 8002c14:	f7fe f8f4 	bl	8000e00 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2229      	movs	r2, #41	; 0x29
 8002c1c:	2102      	movs	r1, #2
 8002c1e:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	2210      	movs	r2, #16
 8002c28:	4013      	ands	r3, r2
 8002c2a:	2b10      	cmp	r3, #16
 8002c2c:	d062      	beq.n	8002cf4 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	22ca      	movs	r2, #202	; 0xca
 8002c34:	625a      	str	r2, [r3, #36]	; 0x24
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2253      	movs	r2, #83	; 0x53
 8002c3c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8002c3e:	250f      	movs	r5, #15
 8002c40:	197c      	adds	r4, r7, r5
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	0018      	movs	r0, r3
 8002c46:	f000 f892 	bl	8002d6e <RTC_EnterInitMode>
 8002c4a:	0003      	movs	r3, r0
 8002c4c:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8002c4e:	0028      	movs	r0, r5
 8002c50:	183b      	adds	r3, r7, r0
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d12c      	bne.n	8002cb2 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	699a      	ldr	r2, [r3, #24]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	492e      	ldr	r1, [pc, #184]	; (8002d1c <HAL_RTC_Init+0x140>)
 8002c64:	400a      	ands	r2, r1
 8002c66:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	6999      	ldr	r1, [r3, #24]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	689a      	ldr	r2, [r3, #8]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	431a      	orrs	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	69db      	ldr	r3, [r3, #28]
 8002c7c:	431a      	orrs	r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	430a      	orrs	r2, r1
 8002c84:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	6912      	ldr	r2, [r2, #16]
 8002c8e:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	6919      	ldr	r1, [r3, #16]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	041a      	lsls	r2, r3, #16
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	430a      	orrs	r2, r1
 8002ca2:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8002ca4:	183c      	adds	r4, r7, r0
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	0018      	movs	r0, r3
 8002caa:	f000 f8a3 	bl	8002df4 <RTC_ExitInitMode>
 8002cae:	0003      	movs	r3, r0
 8002cb0:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8002cb2:	230f      	movs	r3, #15
 8002cb4:	18fb      	adds	r3, r7, r3
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d116      	bne.n	8002cea <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	699a      	ldr	r2, [r3, #24]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	00d2      	lsls	r2, r2, #3
 8002cc8:	08d2      	lsrs	r2, r2, #3
 8002cca:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	6999      	ldr	r1, [r3, #24]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a1b      	ldr	r3, [r3, #32]
 8002cda:	431a      	orrs	r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	699b      	ldr	r3, [r3, #24]
 8002ce0:	431a      	orrs	r2, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	22ff      	movs	r2, #255	; 0xff
 8002cf0:	625a      	str	r2, [r3, #36]	; 0x24
 8002cf2:	e003      	b.n	8002cfc <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8002cf4:	230f      	movs	r3, #15
 8002cf6:	18fb      	adds	r3, r7, r3
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8002cfc:	230f      	movs	r3, #15
 8002cfe:	18fb      	adds	r3, r7, r3
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d103      	bne.n	8002d0e <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2229      	movs	r2, #41	; 0x29
 8002d0a:	2101      	movs	r1, #1
 8002d0c:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8002d0e:	230f      	movs	r3, #15
 8002d10:	18fb      	adds	r3, r7, r3
 8002d12:	781b      	ldrb	r3, [r3, #0]
}
 8002d14:	0018      	movs	r0, r3
 8002d16:	46bd      	mov	sp, r7
 8002d18:	b004      	add	sp, #16
 8002d1a:	bdb0      	pop	{r4, r5, r7, pc}
 8002d1c:	fb8fffbf 	.word	0xfb8fffbf

08002d20 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68da      	ldr	r2, [r3, #12]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	21a0      	movs	r1, #160	; 0xa0
 8002d34:	438a      	bics	r2, r1
 8002d36:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002d38:	f7fe fb1a 	bl	8001370 <HAL_GetTick>
 8002d3c:	0003      	movs	r3, r0
 8002d3e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002d40:	e00a      	b.n	8002d58 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002d42:	f7fe fb15 	bl	8001370 <HAL_GetTick>
 8002d46:	0002      	movs	r2, r0
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	1ad2      	subs	r2, r2, r3
 8002d4c:	23fa      	movs	r3, #250	; 0xfa
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d901      	bls.n	8002d58 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e006      	b.n	8002d66 <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	2220      	movs	r2, #32
 8002d60:	4013      	ands	r3, r2
 8002d62:	d0ee      	beq.n	8002d42 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	0018      	movs	r0, r3
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	b004      	add	sp, #16
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b084      	sub	sp, #16
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8002d76:	230f      	movs	r3, #15
 8002d78:	18fb      	adds	r3, r7, r3
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	2240      	movs	r2, #64	; 0x40
 8002d86:	4013      	ands	r3, r2
 8002d88:	d12c      	bne.n	8002de4 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68da      	ldr	r2, [r3, #12]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2180      	movs	r1, #128	; 0x80
 8002d96:	430a      	orrs	r2, r1
 8002d98:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002d9a:	f7fe fae9 	bl	8001370 <HAL_GetTick>
 8002d9e:	0003      	movs	r3, r0
 8002da0:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002da2:	e014      	b.n	8002dce <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8002da4:	f7fe fae4 	bl	8001370 <HAL_GetTick>
 8002da8:	0002      	movs	r2, r0
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	1ad2      	subs	r2, r2, r3
 8002dae:	200f      	movs	r0, #15
 8002db0:	183b      	adds	r3, r7, r0
 8002db2:	1839      	adds	r1, r7, r0
 8002db4:	7809      	ldrb	r1, [r1, #0]
 8002db6:	7019      	strb	r1, [r3, #0]
 8002db8:	23fa      	movs	r3, #250	; 0xfa
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d906      	bls.n	8002dce <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8002dc0:	183b      	adds	r3, r7, r0
 8002dc2:	2203      	movs	r2, #3
 8002dc4:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2229      	movs	r2, #41	; 0x29
 8002dca:	2103      	movs	r1, #3
 8002dcc:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	2240      	movs	r2, #64	; 0x40
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	d104      	bne.n	8002de4 <RTC_EnterInitMode+0x76>
 8002dda:	230f      	movs	r3, #15
 8002ddc:	18fb      	adds	r3, r7, r3
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	2b03      	cmp	r3, #3
 8002de2:	d1df      	bne.n	8002da4 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002de4:	230f      	movs	r3, #15
 8002de6:	18fb      	adds	r3, r7, r3
 8002de8:	781b      	ldrb	r3, [r3, #0]
}
 8002dea:	0018      	movs	r0, r3
 8002dec:	46bd      	mov	sp, r7
 8002dee:	b004      	add	sp, #16
 8002df0:	bd80      	pop	{r7, pc}
	...

08002df4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002df4:	b590      	push	{r4, r7, lr}
 8002df6:	b085      	sub	sp, #20
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dfc:	240f      	movs	r4, #15
 8002dfe:	193b      	adds	r3, r7, r4
 8002e00:	2200      	movs	r2, #0
 8002e02:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8002e04:	4b1c      	ldr	r3, [pc, #112]	; (8002e78 <RTC_ExitInitMode+0x84>)
 8002e06:	68da      	ldr	r2, [r3, #12]
 8002e08:	4b1b      	ldr	r3, [pc, #108]	; (8002e78 <RTC_ExitInitMode+0x84>)
 8002e0a:	2180      	movs	r1, #128	; 0x80
 8002e0c:	438a      	bics	r2, r1
 8002e0e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002e10:	4b19      	ldr	r3, [pc, #100]	; (8002e78 <RTC_ExitInitMode+0x84>)
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	2220      	movs	r2, #32
 8002e16:	4013      	ands	r3, r2
 8002e18:	d10d      	bne.n	8002e36 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	0018      	movs	r0, r3
 8002e1e:	f7ff ff7f 	bl	8002d20 <HAL_RTC_WaitForSynchro>
 8002e22:	1e03      	subs	r3, r0, #0
 8002e24:	d021      	beq.n	8002e6a <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2229      	movs	r2, #41	; 0x29
 8002e2a:	2103      	movs	r1, #3
 8002e2c:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8002e2e:	193b      	adds	r3, r7, r4
 8002e30:	2203      	movs	r2, #3
 8002e32:	701a      	strb	r2, [r3, #0]
 8002e34:	e019      	b.n	8002e6a <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002e36:	4b10      	ldr	r3, [pc, #64]	; (8002e78 <RTC_ExitInitMode+0x84>)
 8002e38:	699a      	ldr	r2, [r3, #24]
 8002e3a:	4b0f      	ldr	r3, [pc, #60]	; (8002e78 <RTC_ExitInitMode+0x84>)
 8002e3c:	2120      	movs	r1, #32
 8002e3e:	438a      	bics	r2, r1
 8002e40:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	0018      	movs	r0, r3
 8002e46:	f7ff ff6b 	bl	8002d20 <HAL_RTC_WaitForSynchro>
 8002e4a:	1e03      	subs	r3, r0, #0
 8002e4c:	d007      	beq.n	8002e5e <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2229      	movs	r2, #41	; 0x29
 8002e52:	2103      	movs	r1, #3
 8002e54:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8002e56:	230f      	movs	r3, #15
 8002e58:	18fb      	adds	r3, r7, r3
 8002e5a:	2203      	movs	r2, #3
 8002e5c:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002e5e:	4b06      	ldr	r3, [pc, #24]	; (8002e78 <RTC_ExitInitMode+0x84>)
 8002e60:	699a      	ldr	r2, [r3, #24]
 8002e62:	4b05      	ldr	r3, [pc, #20]	; (8002e78 <RTC_ExitInitMode+0x84>)
 8002e64:	2120      	movs	r1, #32
 8002e66:	430a      	orrs	r2, r1
 8002e68:	619a      	str	r2, [r3, #24]
  }

  return status;
 8002e6a:	230f      	movs	r3, #15
 8002e6c:	18fb      	adds	r3, r7, r3
 8002e6e:	781b      	ldrb	r3, [r3, #0]
}
 8002e70:	0018      	movs	r0, r3
 8002e72:	46bd      	mov	sp, r7
 8002e74:	b005      	add	sp, #20
 8002e76:	bd90      	pop	{r4, r7, pc}
 8002e78:	40002800 	.word	0x40002800

08002e7c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2228      	movs	r2, #40	; 0x28
 8002e8c:	5c9b      	ldrb	r3, [r3, r2]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d101      	bne.n	8002e96 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8002e92:	2302      	movs	r3, #2
 8002e94:	e082      	b.n	8002f9c <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2228      	movs	r2, #40	; 0x28
 8002e9a:	2101      	movs	r1, #1
 8002e9c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2229      	movs	r2, #41	; 0x29
 8002ea2:	2102      	movs	r1, #2
 8002ea4:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	22ca      	movs	r2, #202	; 0xca
 8002eac:	625a      	str	r2, [r3, #36]	; 0x24
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2253      	movs	r2, #83	; 0x53
 8002eb4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	699a      	ldr	r2, [r3, #24]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4938      	ldr	r1, [pc, #224]	; (8002fa4 <HAL_RTCEx_SetWakeUpTimer_IT+0x128>)
 8002ec2:	400a      	ands	r2, r1
 8002ec4:	619a      	str	r2, [r3, #24]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2104      	movs	r1, #4
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8002ed6:	4b34      	ldr	r3, [pc, #208]	; (8002fa8 <HAL_RTCEx_SetWakeUpTimer_IT+0x12c>)
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	2240      	movs	r2, #64	; 0x40
 8002edc:	4013      	ands	r3, r2
 8002ede:	d121      	bne.n	8002f24 <HAL_RTCEx_SetWakeUpTimer_IT+0xa8>
  {
    tickstart = HAL_GetTick();
 8002ee0:	f7fe fa46 	bl	8001370 <HAL_GetTick>
 8002ee4:	0003      	movs	r3, r0
 8002ee6:	617b      	str	r3, [r7, #20]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8002ee8:	e016      	b.n	8002f18 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002eea:	f7fe fa41 	bl	8001370 <HAL_GetTick>
 8002eee:	0002      	movs	r2, r0
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	1ad2      	subs	r2, r2, r3
 8002ef4:	23fa      	movs	r3, #250	; 0xfa
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d90d      	bls.n	8002f18 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	22ff      	movs	r2, #255	; 0xff
 8002f02:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2229      	movs	r2, #41	; 0x29
 8002f08:	2103      	movs	r1, #3
 8002f0a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2228      	movs	r2, #40	; 0x28
 8002f10:	2100      	movs	r1, #0
 8002f12:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	e041      	b.n	8002f9c <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	2204      	movs	r2, #4
 8002f20:	4013      	ands	r3, r2
 8002f22:	d0e2      	beq.n	8002eea <HAL_RTCEx_SetWakeUpTimer_IT+0x6e>
      }
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68ba      	ldr	r2, [r7, #8]
 8002f2a:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	699a      	ldr	r2, [r3, #24]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2107      	movs	r1, #7
 8002f38:	438a      	bics	r2, r1
 8002f3a:	619a      	str	r2, [r3, #24]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	6999      	ldr	r1, [r3, #24]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	619a      	str	r2, [r3, #24]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8002f4c:	4a17      	ldr	r2, [pc, #92]	; (8002fac <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 8002f4e:	2380      	movs	r3, #128	; 0x80
 8002f50:	58d3      	ldr	r3, [r2, r3]
 8002f52:	4916      	ldr	r1, [pc, #88]	; (8002fac <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 8002f54:	2280      	movs	r2, #128	; 0x80
 8002f56:	0312      	lsls	r2, r2, #12
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	2280      	movs	r2, #128	; 0x80
 8002f5c:	508b      	str	r3, [r1, r2]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	699a      	ldr	r2, [r3, #24]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2180      	movs	r1, #128	; 0x80
 8002f6a:	01c9      	lsls	r1, r1, #7
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	619a      	str	r2, [r3, #24]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	699a      	ldr	r2, [r3, #24]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2180      	movs	r1, #128	; 0x80
 8002f7c:	00c9      	lsls	r1, r1, #3
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	22ff      	movs	r2, #255	; 0xff
 8002f88:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2229      	movs	r2, #41	; 0x29
 8002f8e:	2101      	movs	r1, #1
 8002f90:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2228      	movs	r2, #40	; 0x28
 8002f96:	2100      	movs	r1, #0
 8002f98:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	0018      	movs	r0, r3
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	b006      	add	sp, #24
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	fffffbff 	.word	0xfffffbff
 8002fa8:	40002800 	.word	0x40002800
 8002fac:	40021800 	.word	0x40021800

08002fb0 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
    /* Get the pending status of the WAKEUPTIMER Interrupt */
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fbe:	2204      	movs	r2, #4
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	d00b      	beq.n	8002fdc <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>
    {
      /* Clear the WAKEUPTIMER interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2104      	movs	r1, #4
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call WakeUpTimerEvent registered Callback */
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      /* WAKEUPTIMER callback */
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	0018      	movs	r0, r3
 8002fd8:	f000 f808 	bl	8002fec <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2229      	movs	r2, #41	; 0x29
 8002fe0:	2101      	movs	r1, #1
 8002fe2:	5499      	strb	r1, [r3, r2]
}
 8002fe4:	46c0      	nop			; (mov r8, r8)
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	b002      	add	sp, #8
 8002fea:	bd80      	pop	{r7, pc}

08002fec <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8002ff4:	46c0      	nop			; (mov r8, r8)
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	b002      	add	sp, #8
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d101      	bne.n	800300e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e04a      	b.n	80030a4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	223d      	movs	r2, #61	; 0x3d
 8003012:	5c9b      	ldrb	r3, [r3, r2]
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b00      	cmp	r3, #0
 8003018:	d107      	bne.n	800302a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	223c      	movs	r2, #60	; 0x3c
 800301e:	2100      	movs	r1, #0
 8003020:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	0018      	movs	r0, r3
 8003026:	f7fd ff31 	bl	8000e8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	223d      	movs	r2, #61	; 0x3d
 800302e:	2102      	movs	r1, #2
 8003030:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	3304      	adds	r3, #4
 800303a:	0019      	movs	r1, r3
 800303c:	0010      	movs	r0, r2
 800303e:	f000 fa09 	bl	8003454 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2248      	movs	r2, #72	; 0x48
 8003046:	2101      	movs	r1, #1
 8003048:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	223e      	movs	r2, #62	; 0x3e
 800304e:	2101      	movs	r1, #1
 8003050:	5499      	strb	r1, [r3, r2]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	223f      	movs	r2, #63	; 0x3f
 8003056:	2101      	movs	r1, #1
 8003058:	5499      	strb	r1, [r3, r2]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2240      	movs	r2, #64	; 0x40
 800305e:	2101      	movs	r1, #1
 8003060:	5499      	strb	r1, [r3, r2]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2241      	movs	r2, #65	; 0x41
 8003066:	2101      	movs	r1, #1
 8003068:	5499      	strb	r1, [r3, r2]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2242      	movs	r2, #66	; 0x42
 800306e:	2101      	movs	r1, #1
 8003070:	5499      	strb	r1, [r3, r2]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2243      	movs	r2, #67	; 0x43
 8003076:	2101      	movs	r1, #1
 8003078:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2244      	movs	r2, #68	; 0x44
 800307e:	2101      	movs	r1, #1
 8003080:	5499      	strb	r1, [r3, r2]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2245      	movs	r2, #69	; 0x45
 8003086:	2101      	movs	r1, #1
 8003088:	5499      	strb	r1, [r3, r2]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2246      	movs	r2, #70	; 0x46
 800308e:	2101      	movs	r1, #1
 8003090:	5499      	strb	r1, [r3, r2]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2247      	movs	r2, #71	; 0x47
 8003096:	2101      	movs	r1, #1
 8003098:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	223d      	movs	r2, #61	; 0x3d
 800309e:	2101      	movs	r1, #1
 80030a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80030a2:	2300      	movs	r3, #0
}
 80030a4:	0018      	movs	r0, r3
 80030a6:	46bd      	mov	sp, r7
 80030a8:	b002      	add	sp, #8
 80030aa:	bd80      	pop	{r7, pc}

080030ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	223d      	movs	r2, #61	; 0x3d
 80030b8:	5c9b      	ldrb	r3, [r3, r2]
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d001      	beq.n	80030c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e03d      	b.n	8003140 <HAL_TIM_Base_Start_IT+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	223d      	movs	r2, #61	; 0x3d
 80030c8:	2102      	movs	r1, #2
 80030ca:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68da      	ldr	r2, [r3, #12]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2101      	movs	r1, #1
 80030d8:	430a      	orrs	r2, r1
 80030da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a19      	ldr	r2, [pc, #100]	; (8003148 <HAL_TIM_Base_Start_IT+0x9c>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d00a      	beq.n	80030fc <HAL_TIM_Base_Start_IT+0x50>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	2380      	movs	r3, #128	; 0x80
 80030ec:	05db      	lsls	r3, r3, #23
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d004      	beq.n	80030fc <HAL_TIM_Base_Start_IT+0x50>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a15      	ldr	r2, [pc, #84]	; (800314c <HAL_TIM_Base_Start_IT+0xa0>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d116      	bne.n	800312a <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	4a13      	ldr	r2, [pc, #76]	; (8003150 <HAL_TIM_Base_Start_IT+0xa4>)
 8003104:	4013      	ands	r3, r2
 8003106:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2b06      	cmp	r3, #6
 800310c:	d016      	beq.n	800313c <HAL_TIM_Base_Start_IT+0x90>
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	2380      	movs	r3, #128	; 0x80
 8003112:	025b      	lsls	r3, r3, #9
 8003114:	429a      	cmp	r2, r3
 8003116:	d011      	beq.n	800313c <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2101      	movs	r1, #1
 8003124:	430a      	orrs	r2, r1
 8003126:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003128:	e008      	b.n	800313c <HAL_TIM_Base_Start_IT+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2101      	movs	r1, #1
 8003136:	430a      	orrs	r2, r1
 8003138:	601a      	str	r2, [r3, #0]
 800313a:	e000      	b.n	800313e <HAL_TIM_Base_Start_IT+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800313c:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800313e:	2300      	movs	r3, #0
}
 8003140:	0018      	movs	r0, r3
 8003142:	46bd      	mov	sp, r7
 8003144:	b004      	add	sp, #16
 8003146:	bd80      	pop	{r7, pc}
 8003148:	40012c00 	.word	0x40012c00
 800314c:	40000400 	.word	0x40000400
 8003150:	00010007 	.word	0x00010007

08003154 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	68da      	ldr	r2, [r3, #12]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2101      	movs	r1, #1
 8003168:	438a      	bics	r2, r1
 800316a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	6a1b      	ldr	r3, [r3, #32]
 8003172:	4a0d      	ldr	r2, [pc, #52]	; (80031a8 <HAL_TIM_Base_Stop_IT+0x54>)
 8003174:	4013      	ands	r3, r2
 8003176:	d10d      	bne.n	8003194 <HAL_TIM_Base_Stop_IT+0x40>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	4a0b      	ldr	r2, [pc, #44]	; (80031ac <HAL_TIM_Base_Stop_IT+0x58>)
 8003180:	4013      	ands	r3, r2
 8003182:	d107      	bne.n	8003194 <HAL_TIM_Base_Stop_IT+0x40>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2101      	movs	r1, #1
 8003190:	438a      	bics	r2, r1
 8003192:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	223d      	movs	r2, #61	; 0x3d
 8003198:	2101      	movs	r1, #1
 800319a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	0018      	movs	r0, r3
 80031a0:	46bd      	mov	sp, r7
 80031a2:	b002      	add	sp, #8
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	46c0      	nop			; (mov r8, r8)
 80031a8:	00001111 	.word	0x00001111
 80031ac:	00000444 	.word	0x00000444

080031b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	2202      	movs	r2, #2
 80031c0:	4013      	ands	r3, r2
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d124      	bne.n	8003210 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	2202      	movs	r2, #2
 80031ce:	4013      	ands	r3, r2
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d11d      	bne.n	8003210 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2203      	movs	r2, #3
 80031da:	4252      	negs	r2, r2
 80031dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2201      	movs	r2, #1
 80031e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	699b      	ldr	r3, [r3, #24]
 80031ea:	2203      	movs	r2, #3
 80031ec:	4013      	ands	r3, r2
 80031ee:	d004      	beq.n	80031fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	0018      	movs	r0, r3
 80031f4:	f000 f916 	bl	8003424 <HAL_TIM_IC_CaptureCallback>
 80031f8:	e007      	b.n	800320a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	0018      	movs	r0, r3
 80031fe:	f000 f909 	bl	8003414 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	0018      	movs	r0, r3
 8003206:	f000 f915 	bl	8003434 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	2204      	movs	r2, #4
 8003218:	4013      	ands	r3, r2
 800321a:	2b04      	cmp	r3, #4
 800321c:	d125      	bne.n	800326a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	2204      	movs	r2, #4
 8003226:	4013      	ands	r3, r2
 8003228:	2b04      	cmp	r3, #4
 800322a:	d11e      	bne.n	800326a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2205      	movs	r2, #5
 8003232:	4252      	negs	r2, r2
 8003234:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2202      	movs	r2, #2
 800323a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	699a      	ldr	r2, [r3, #24]
 8003242:	23c0      	movs	r3, #192	; 0xc0
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	4013      	ands	r3, r2
 8003248:	d004      	beq.n	8003254 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	0018      	movs	r0, r3
 800324e:	f000 f8e9 	bl	8003424 <HAL_TIM_IC_CaptureCallback>
 8003252:	e007      	b.n	8003264 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	0018      	movs	r0, r3
 8003258:	f000 f8dc 	bl	8003414 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	0018      	movs	r0, r3
 8003260:	f000 f8e8 	bl	8003434 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	691b      	ldr	r3, [r3, #16]
 8003270:	2208      	movs	r2, #8
 8003272:	4013      	ands	r3, r2
 8003274:	2b08      	cmp	r3, #8
 8003276:	d124      	bne.n	80032c2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	2208      	movs	r2, #8
 8003280:	4013      	ands	r3, r2
 8003282:	2b08      	cmp	r3, #8
 8003284:	d11d      	bne.n	80032c2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2209      	movs	r2, #9
 800328c:	4252      	negs	r2, r2
 800328e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2204      	movs	r2, #4
 8003294:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	69db      	ldr	r3, [r3, #28]
 800329c:	2203      	movs	r2, #3
 800329e:	4013      	ands	r3, r2
 80032a0:	d004      	beq.n	80032ac <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	0018      	movs	r0, r3
 80032a6:	f000 f8bd 	bl	8003424 <HAL_TIM_IC_CaptureCallback>
 80032aa:	e007      	b.n	80032bc <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	0018      	movs	r0, r3
 80032b0:	f000 f8b0 	bl	8003414 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	0018      	movs	r0, r3
 80032b8:	f000 f8bc 	bl	8003434 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	691b      	ldr	r3, [r3, #16]
 80032c8:	2210      	movs	r2, #16
 80032ca:	4013      	ands	r3, r2
 80032cc:	2b10      	cmp	r3, #16
 80032ce:	d125      	bne.n	800331c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	2210      	movs	r2, #16
 80032d8:	4013      	ands	r3, r2
 80032da:	2b10      	cmp	r3, #16
 80032dc:	d11e      	bne.n	800331c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2211      	movs	r2, #17
 80032e4:	4252      	negs	r2, r2
 80032e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2208      	movs	r2, #8
 80032ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	69da      	ldr	r2, [r3, #28]
 80032f4:	23c0      	movs	r3, #192	; 0xc0
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	4013      	ands	r3, r2
 80032fa:	d004      	beq.n	8003306 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	0018      	movs	r0, r3
 8003300:	f000 f890 	bl	8003424 <HAL_TIM_IC_CaptureCallback>
 8003304:	e007      	b.n	8003316 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	0018      	movs	r0, r3
 800330a:	f000 f883 	bl	8003414 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	0018      	movs	r0, r3
 8003312:	f000 f88f 	bl	8003434 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	2201      	movs	r2, #1
 8003324:	4013      	ands	r3, r2
 8003326:	2b01      	cmp	r3, #1
 8003328:	d10f      	bne.n	800334a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	2201      	movs	r2, #1
 8003332:	4013      	ands	r3, r2
 8003334:	2b01      	cmp	r3, #1
 8003336:	d108      	bne.n	800334a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2202      	movs	r2, #2
 800333e:	4252      	negs	r2, r2
 8003340:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	0018      	movs	r0, r3
 8003346:	f7fd fd17 	bl	8000d78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	2280      	movs	r2, #128	; 0x80
 8003352:	4013      	ands	r3, r2
 8003354:	2b80      	cmp	r3, #128	; 0x80
 8003356:	d10f      	bne.n	8003378 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	2280      	movs	r2, #128	; 0x80
 8003360:	4013      	ands	r3, r2
 8003362:	2b80      	cmp	r3, #128	; 0x80
 8003364:	d108      	bne.n	8003378 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2281      	movs	r2, #129	; 0x81
 800336c:	4252      	negs	r2, r2
 800336e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	0018      	movs	r0, r3
 8003374:	f000 f8ec 	bl	8003550 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	691a      	ldr	r2, [r3, #16]
 800337e:	2380      	movs	r3, #128	; 0x80
 8003380:	005b      	lsls	r3, r3, #1
 8003382:	401a      	ands	r2, r3
 8003384:	2380      	movs	r3, #128	; 0x80
 8003386:	005b      	lsls	r3, r3, #1
 8003388:	429a      	cmp	r2, r3
 800338a:	d10e      	bne.n	80033aa <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	2280      	movs	r2, #128	; 0x80
 8003394:	4013      	ands	r3, r2
 8003396:	2b80      	cmp	r3, #128	; 0x80
 8003398:	d107      	bne.n	80033aa <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a1c      	ldr	r2, [pc, #112]	; (8003410 <HAL_TIM_IRQHandler+0x260>)
 80033a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	0018      	movs	r0, r3
 80033a6:	f000 f8db 	bl	8003560 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	691b      	ldr	r3, [r3, #16]
 80033b0:	2240      	movs	r2, #64	; 0x40
 80033b2:	4013      	ands	r3, r2
 80033b4:	2b40      	cmp	r3, #64	; 0x40
 80033b6:	d10f      	bne.n	80033d8 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	2240      	movs	r2, #64	; 0x40
 80033c0:	4013      	ands	r3, r2
 80033c2:	2b40      	cmp	r3, #64	; 0x40
 80033c4:	d108      	bne.n	80033d8 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2241      	movs	r2, #65	; 0x41
 80033cc:	4252      	negs	r2, r2
 80033ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	0018      	movs	r0, r3
 80033d4:	f000 f836 	bl	8003444 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	2220      	movs	r2, #32
 80033e0:	4013      	ands	r3, r2
 80033e2:	2b20      	cmp	r3, #32
 80033e4:	d10f      	bne.n	8003406 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	2220      	movs	r2, #32
 80033ee:	4013      	ands	r3, r2
 80033f0:	2b20      	cmp	r3, #32
 80033f2:	d108      	bne.n	8003406 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2221      	movs	r2, #33	; 0x21
 80033fa:	4252      	negs	r2, r2
 80033fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	0018      	movs	r0, r3
 8003402:	f000 f89d 	bl	8003540 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003406:	46c0      	nop			; (mov r8, r8)
 8003408:	46bd      	mov	sp, r7
 800340a:	b002      	add	sp, #8
 800340c:	bd80      	pop	{r7, pc}
 800340e:	46c0      	nop			; (mov r8, r8)
 8003410:	fffffeff 	.word	0xfffffeff

08003414 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800341c:	46c0      	nop			; (mov r8, r8)
 800341e:	46bd      	mov	sp, r7
 8003420:	b002      	add	sp, #8
 8003422:	bd80      	pop	{r7, pc}

08003424 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800342c:	46c0      	nop			; (mov r8, r8)
 800342e:	46bd      	mov	sp, r7
 8003430:	b002      	add	sp, #8
 8003432:	bd80      	pop	{r7, pc}

08003434 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800343c:	46c0      	nop			; (mov r8, r8)
 800343e:	46bd      	mov	sp, r7
 8003440:	b002      	add	sp, #8
 8003442:	bd80      	pop	{r7, pc}

08003444 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800344c:	46c0      	nop			; (mov r8, r8)
 800344e:	46bd      	mov	sp, r7
 8003450:	b002      	add	sp, #8
 8003452:	bd80      	pop	{r7, pc}

08003454 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a30      	ldr	r2, [pc, #192]	; (8003528 <TIM_Base_SetConfig+0xd4>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d008      	beq.n	800347e <TIM_Base_SetConfig+0x2a>
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	2380      	movs	r3, #128	; 0x80
 8003470:	05db      	lsls	r3, r3, #23
 8003472:	429a      	cmp	r2, r3
 8003474:	d003      	beq.n	800347e <TIM_Base_SetConfig+0x2a>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a2c      	ldr	r2, [pc, #176]	; (800352c <TIM_Base_SetConfig+0xd8>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d108      	bne.n	8003490 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2270      	movs	r2, #112	; 0x70
 8003482:	4393      	bics	r3, r2
 8003484:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	68fa      	ldr	r2, [r7, #12]
 800348c:	4313      	orrs	r3, r2
 800348e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4a25      	ldr	r2, [pc, #148]	; (8003528 <TIM_Base_SetConfig+0xd4>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d014      	beq.n	80034c2 <TIM_Base_SetConfig+0x6e>
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	2380      	movs	r3, #128	; 0x80
 800349c:	05db      	lsls	r3, r3, #23
 800349e:	429a      	cmp	r2, r3
 80034a0:	d00f      	beq.n	80034c2 <TIM_Base_SetConfig+0x6e>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a21      	ldr	r2, [pc, #132]	; (800352c <TIM_Base_SetConfig+0xd8>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d00b      	beq.n	80034c2 <TIM_Base_SetConfig+0x6e>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a20      	ldr	r2, [pc, #128]	; (8003530 <TIM_Base_SetConfig+0xdc>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d007      	beq.n	80034c2 <TIM_Base_SetConfig+0x6e>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a1f      	ldr	r2, [pc, #124]	; (8003534 <TIM_Base_SetConfig+0xe0>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d003      	beq.n	80034c2 <TIM_Base_SetConfig+0x6e>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a1e      	ldr	r2, [pc, #120]	; (8003538 <TIM_Base_SetConfig+0xe4>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d108      	bne.n	80034d4 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	4a1d      	ldr	r2, [pc, #116]	; (800353c <TIM_Base_SetConfig+0xe8>)
 80034c6:	4013      	ands	r3, r2
 80034c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	68fa      	ldr	r2, [r7, #12]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2280      	movs	r2, #128	; 0x80
 80034d8:	4393      	bics	r3, r2
 80034da:	001a      	movs	r2, r3
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	695b      	ldr	r3, [r3, #20]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	689a      	ldr	r2, [r3, #8]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a0a      	ldr	r2, [pc, #40]	; (8003528 <TIM_Base_SetConfig+0xd4>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d007      	beq.n	8003512 <TIM_Base_SetConfig+0xbe>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a0b      	ldr	r2, [pc, #44]	; (8003534 <TIM_Base_SetConfig+0xe0>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d003      	beq.n	8003512 <TIM_Base_SetConfig+0xbe>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a0a      	ldr	r2, [pc, #40]	; (8003538 <TIM_Base_SetConfig+0xe4>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d103      	bne.n	800351a <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	691a      	ldr	r2, [r3, #16]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2201      	movs	r2, #1
 800351e:	615a      	str	r2, [r3, #20]
}
 8003520:	46c0      	nop			; (mov r8, r8)
 8003522:	46bd      	mov	sp, r7
 8003524:	b004      	add	sp, #16
 8003526:	bd80      	pop	{r7, pc}
 8003528:	40012c00 	.word	0x40012c00
 800352c:	40000400 	.word	0x40000400
 8003530:	40002000 	.word	0x40002000
 8003534:	40014400 	.word	0x40014400
 8003538:	40014800 	.word	0x40014800
 800353c:	fffffcff 	.word	0xfffffcff

08003540 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003548:	46c0      	nop			; (mov r8, r8)
 800354a:	46bd      	mov	sp, r7
 800354c:	b002      	add	sp, #8
 800354e:	bd80      	pop	{r7, pc}

08003550 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003558:	46c0      	nop			; (mov r8, r8)
 800355a:	46bd      	mov	sp, r7
 800355c:	b002      	add	sp, #8
 800355e:	bd80      	pop	{r7, pc}

08003560 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003568:	46c0      	nop			; (mov r8, r8)
 800356a:	46bd      	mov	sp, r7
 800356c:	b002      	add	sp, #8
 800356e:	bd80      	pop	{r7, pc}

08003570 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d101      	bne.n	8003582 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e046      	b.n	8003610 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2288      	movs	r2, #136	; 0x88
 8003586:	589b      	ldr	r3, [r3, r2]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d107      	bne.n	800359c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2284      	movs	r2, #132	; 0x84
 8003590:	2100      	movs	r1, #0
 8003592:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	0018      	movs	r0, r3
 8003598:	f7fd fca0 	bl	8000edc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2288      	movs	r2, #136	; 0x88
 80035a0:	2124      	movs	r1, #36	; 0x24
 80035a2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2101      	movs	r1, #1
 80035b0:	438a      	bics	r2, r1
 80035b2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	0018      	movs	r0, r3
 80035b8:	f000 fc12 	bl	8003de0 <UART_SetConfig>
 80035bc:	0003      	movs	r3, r0
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d101      	bne.n	80035c6 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e024      	b.n	8003610 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d003      	beq.n	80035d6 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	0018      	movs	r0, r3
 80035d2:	f000 fe7d 	bl	80042d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	685a      	ldr	r2, [r3, #4]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	490d      	ldr	r1, [pc, #52]	; (8003618 <HAL_UART_Init+0xa8>)
 80035e2:	400a      	ands	r2, r1
 80035e4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	689a      	ldr	r2, [r3, #8]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	212a      	movs	r1, #42	; 0x2a
 80035f2:	438a      	bics	r2, r1
 80035f4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2101      	movs	r1, #1
 8003602:	430a      	orrs	r2, r1
 8003604:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	0018      	movs	r0, r3
 800360a:	f000 ff15 	bl	8004438 <UART_CheckIdleState>
 800360e:	0003      	movs	r3, r0
}
 8003610:	0018      	movs	r0, r3
 8003612:	46bd      	mov	sp, r7
 8003614:	b002      	add	sp, #8
 8003616:	bd80      	pop	{r7, pc}
 8003618:	ffffb7ff 	.word	0xffffb7ff

0800361c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b08a      	sub	sp, #40	; 0x28
 8003620:	af02      	add	r7, sp, #8
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	603b      	str	r3, [r7, #0]
 8003628:	1dbb      	adds	r3, r7, #6
 800362a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2288      	movs	r2, #136	; 0x88
 8003630:	589b      	ldr	r3, [r3, r2]
 8003632:	2b20      	cmp	r3, #32
 8003634:	d000      	beq.n	8003638 <HAL_UART_Transmit+0x1c>
 8003636:	e088      	b.n	800374a <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d003      	beq.n	8003646 <HAL_UART_Transmit+0x2a>
 800363e:	1dbb      	adds	r3, r7, #6
 8003640:	881b      	ldrh	r3, [r3, #0]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d101      	bne.n	800364a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e080      	b.n	800374c <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	689a      	ldr	r2, [r3, #8]
 800364e:	2380      	movs	r3, #128	; 0x80
 8003650:	015b      	lsls	r3, r3, #5
 8003652:	429a      	cmp	r2, r3
 8003654:	d109      	bne.n	800366a <HAL_UART_Transmit+0x4e>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d105      	bne.n	800366a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	2201      	movs	r2, #1
 8003662:	4013      	ands	r3, r2
 8003664:	d001      	beq.n	800366a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e070      	b.n	800374c <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2290      	movs	r2, #144	; 0x90
 800366e:	2100      	movs	r1, #0
 8003670:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2288      	movs	r2, #136	; 0x88
 8003676:	2121      	movs	r1, #33	; 0x21
 8003678:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800367a:	f7fd fe79 	bl	8001370 <HAL_GetTick>
 800367e:	0003      	movs	r3, r0
 8003680:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	1dba      	adds	r2, r7, #6
 8003686:	2154      	movs	r1, #84	; 0x54
 8003688:	8812      	ldrh	r2, [r2, #0]
 800368a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	1dba      	adds	r2, r7, #6
 8003690:	2156      	movs	r1, #86	; 0x56
 8003692:	8812      	ldrh	r2, [r2, #0]
 8003694:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	689a      	ldr	r2, [r3, #8]
 800369a:	2380      	movs	r3, #128	; 0x80
 800369c:	015b      	lsls	r3, r3, #5
 800369e:	429a      	cmp	r2, r3
 80036a0:	d108      	bne.n	80036b4 <HAL_UART_Transmit+0x98>
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d104      	bne.n	80036b4 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80036aa:	2300      	movs	r3, #0
 80036ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	61bb      	str	r3, [r7, #24]
 80036b2:	e003      	b.n	80036bc <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036b8:	2300      	movs	r3, #0
 80036ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80036bc:	e02c      	b.n	8003718 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036be:	697a      	ldr	r2, [r7, #20]
 80036c0:	68f8      	ldr	r0, [r7, #12]
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	9300      	str	r3, [sp, #0]
 80036c6:	0013      	movs	r3, r2
 80036c8:	2200      	movs	r2, #0
 80036ca:	2180      	movs	r1, #128	; 0x80
 80036cc:	f000 ff02 	bl	80044d4 <UART_WaitOnFlagUntilTimeout>
 80036d0:	1e03      	subs	r3, r0, #0
 80036d2:	d001      	beq.n	80036d8 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e039      	b.n	800374c <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d10b      	bne.n	80036f6 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036de:	69bb      	ldr	r3, [r7, #24]
 80036e0:	881b      	ldrh	r3, [r3, #0]
 80036e2:	001a      	movs	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	05d2      	lsls	r2, r2, #23
 80036ea:	0dd2      	lsrs	r2, r2, #23
 80036ec:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	3302      	adds	r3, #2
 80036f2:	61bb      	str	r3, [r7, #24]
 80036f4:	e007      	b.n	8003706 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	781a      	ldrb	r2, [r3, #0]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	3301      	adds	r3, #1
 8003704:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2256      	movs	r2, #86	; 0x56
 800370a:	5a9b      	ldrh	r3, [r3, r2]
 800370c:	b29b      	uxth	r3, r3
 800370e:	3b01      	subs	r3, #1
 8003710:	b299      	uxth	r1, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2256      	movs	r2, #86	; 0x56
 8003716:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2256      	movs	r2, #86	; 0x56
 800371c:	5a9b      	ldrh	r3, [r3, r2]
 800371e:	b29b      	uxth	r3, r3
 8003720:	2b00      	cmp	r3, #0
 8003722:	d1cc      	bne.n	80036be <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003724:	697a      	ldr	r2, [r7, #20]
 8003726:	68f8      	ldr	r0, [r7, #12]
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	9300      	str	r3, [sp, #0]
 800372c:	0013      	movs	r3, r2
 800372e:	2200      	movs	r2, #0
 8003730:	2140      	movs	r1, #64	; 0x40
 8003732:	f000 fecf 	bl	80044d4 <UART_WaitOnFlagUntilTimeout>
 8003736:	1e03      	subs	r3, r0, #0
 8003738:	d001      	beq.n	800373e <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e006      	b.n	800374c <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2288      	movs	r2, #136	; 0x88
 8003742:	2120      	movs	r1, #32
 8003744:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003746:	2300      	movs	r3, #0
 8003748:	e000      	b.n	800374c <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 800374a:	2302      	movs	r3, #2
  }
}
 800374c:	0018      	movs	r0, r3
 800374e:	46bd      	mov	sp, r7
 8003750:	b008      	add	sp, #32
 8003752:	bd80      	pop	{r7, pc}

08003754 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003754:	b5b0      	push	{r4, r5, r7, lr}
 8003756:	b0aa      	sub	sp, #168	; 0xa8
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	69db      	ldr	r3, [r3, #28]
 8003762:	22a4      	movs	r2, #164	; 0xa4
 8003764:	18b9      	adds	r1, r7, r2
 8003766:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	20a0      	movs	r0, #160	; 0xa0
 8003770:	1839      	adds	r1, r7, r0
 8003772:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	249c      	movs	r4, #156	; 0x9c
 800377c:	1939      	adds	r1, r7, r4
 800377e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003780:	0011      	movs	r1, r2
 8003782:	18bb      	adds	r3, r7, r2
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4aa2      	ldr	r2, [pc, #648]	; (8003a10 <HAL_UART_IRQHandler+0x2bc>)
 8003788:	4013      	ands	r3, r2
 800378a:	2298      	movs	r2, #152	; 0x98
 800378c:	18bd      	adds	r5, r7, r2
 800378e:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8003790:	18bb      	adds	r3, r7, r2
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d11a      	bne.n	80037ce <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003798:	187b      	adds	r3, r7, r1
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2220      	movs	r2, #32
 800379e:	4013      	ands	r3, r2
 80037a0:	d015      	beq.n	80037ce <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80037a2:	183b      	adds	r3, r7, r0
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2220      	movs	r2, #32
 80037a8:	4013      	ands	r3, r2
 80037aa:	d105      	bne.n	80037b8 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80037ac:	193b      	adds	r3, r7, r4
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	2380      	movs	r3, #128	; 0x80
 80037b2:	055b      	lsls	r3, r3, #21
 80037b4:	4013      	ands	r3, r2
 80037b6:	d00a      	beq.n	80037ce <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d100      	bne.n	80037c2 <HAL_UART_IRQHandler+0x6e>
 80037c0:	e2dc      	b.n	8003d7c <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	0010      	movs	r0, r2
 80037ca:	4798      	blx	r3
      }
      return;
 80037cc:	e2d6      	b.n	8003d7c <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80037ce:	2398      	movs	r3, #152	; 0x98
 80037d0:	18fb      	adds	r3, r7, r3
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d100      	bne.n	80037da <HAL_UART_IRQHandler+0x86>
 80037d8:	e122      	b.n	8003a20 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80037da:	239c      	movs	r3, #156	; 0x9c
 80037dc:	18fb      	adds	r3, r7, r3
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a8c      	ldr	r2, [pc, #560]	; (8003a14 <HAL_UART_IRQHandler+0x2c0>)
 80037e2:	4013      	ands	r3, r2
 80037e4:	d106      	bne.n	80037f4 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80037e6:	23a0      	movs	r3, #160	; 0xa0
 80037e8:	18fb      	adds	r3, r7, r3
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a8a      	ldr	r2, [pc, #552]	; (8003a18 <HAL_UART_IRQHandler+0x2c4>)
 80037ee:	4013      	ands	r3, r2
 80037f0:	d100      	bne.n	80037f4 <HAL_UART_IRQHandler+0xa0>
 80037f2:	e115      	b.n	8003a20 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80037f4:	23a4      	movs	r3, #164	; 0xa4
 80037f6:	18fb      	adds	r3, r7, r3
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2201      	movs	r2, #1
 80037fc:	4013      	ands	r3, r2
 80037fe:	d012      	beq.n	8003826 <HAL_UART_IRQHandler+0xd2>
 8003800:	23a0      	movs	r3, #160	; 0xa0
 8003802:	18fb      	adds	r3, r7, r3
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	2380      	movs	r3, #128	; 0x80
 8003808:	005b      	lsls	r3, r3, #1
 800380a:	4013      	ands	r3, r2
 800380c:	d00b      	beq.n	8003826 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2201      	movs	r2, #1
 8003814:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2290      	movs	r2, #144	; 0x90
 800381a:	589b      	ldr	r3, [r3, r2]
 800381c:	2201      	movs	r2, #1
 800381e:	431a      	orrs	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2190      	movs	r1, #144	; 0x90
 8003824:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003826:	23a4      	movs	r3, #164	; 0xa4
 8003828:	18fb      	adds	r3, r7, r3
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2202      	movs	r2, #2
 800382e:	4013      	ands	r3, r2
 8003830:	d011      	beq.n	8003856 <HAL_UART_IRQHandler+0x102>
 8003832:	239c      	movs	r3, #156	; 0x9c
 8003834:	18fb      	adds	r3, r7, r3
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2201      	movs	r2, #1
 800383a:	4013      	ands	r3, r2
 800383c:	d00b      	beq.n	8003856 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2202      	movs	r2, #2
 8003844:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2290      	movs	r2, #144	; 0x90
 800384a:	589b      	ldr	r3, [r3, r2]
 800384c:	2204      	movs	r2, #4
 800384e:	431a      	orrs	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2190      	movs	r1, #144	; 0x90
 8003854:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003856:	23a4      	movs	r3, #164	; 0xa4
 8003858:	18fb      	adds	r3, r7, r3
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2204      	movs	r2, #4
 800385e:	4013      	ands	r3, r2
 8003860:	d011      	beq.n	8003886 <HAL_UART_IRQHandler+0x132>
 8003862:	239c      	movs	r3, #156	; 0x9c
 8003864:	18fb      	adds	r3, r7, r3
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2201      	movs	r2, #1
 800386a:	4013      	ands	r3, r2
 800386c:	d00b      	beq.n	8003886 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2204      	movs	r2, #4
 8003874:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2290      	movs	r2, #144	; 0x90
 800387a:	589b      	ldr	r3, [r3, r2]
 800387c:	2202      	movs	r2, #2
 800387e:	431a      	orrs	r2, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2190      	movs	r1, #144	; 0x90
 8003884:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003886:	23a4      	movs	r3, #164	; 0xa4
 8003888:	18fb      	adds	r3, r7, r3
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2208      	movs	r2, #8
 800388e:	4013      	ands	r3, r2
 8003890:	d017      	beq.n	80038c2 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003892:	23a0      	movs	r3, #160	; 0xa0
 8003894:	18fb      	adds	r3, r7, r3
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2220      	movs	r2, #32
 800389a:	4013      	ands	r3, r2
 800389c:	d105      	bne.n	80038aa <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800389e:	239c      	movs	r3, #156	; 0x9c
 80038a0:	18fb      	adds	r3, r7, r3
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a5b      	ldr	r2, [pc, #364]	; (8003a14 <HAL_UART_IRQHandler+0x2c0>)
 80038a6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80038a8:	d00b      	beq.n	80038c2 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2208      	movs	r2, #8
 80038b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2290      	movs	r2, #144	; 0x90
 80038b6:	589b      	ldr	r3, [r3, r2]
 80038b8:	2208      	movs	r2, #8
 80038ba:	431a      	orrs	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2190      	movs	r1, #144	; 0x90
 80038c0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80038c2:	23a4      	movs	r3, #164	; 0xa4
 80038c4:	18fb      	adds	r3, r7, r3
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	2380      	movs	r3, #128	; 0x80
 80038ca:	011b      	lsls	r3, r3, #4
 80038cc:	4013      	ands	r3, r2
 80038ce:	d013      	beq.n	80038f8 <HAL_UART_IRQHandler+0x1a4>
 80038d0:	23a0      	movs	r3, #160	; 0xa0
 80038d2:	18fb      	adds	r3, r7, r3
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	2380      	movs	r3, #128	; 0x80
 80038d8:	04db      	lsls	r3, r3, #19
 80038da:	4013      	ands	r3, r2
 80038dc:	d00c      	beq.n	80038f8 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2280      	movs	r2, #128	; 0x80
 80038e4:	0112      	lsls	r2, r2, #4
 80038e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2290      	movs	r2, #144	; 0x90
 80038ec:	589b      	ldr	r3, [r3, r2]
 80038ee:	2220      	movs	r2, #32
 80038f0:	431a      	orrs	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2190      	movs	r1, #144	; 0x90
 80038f6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2290      	movs	r2, #144	; 0x90
 80038fc:	589b      	ldr	r3, [r3, r2]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d100      	bne.n	8003904 <HAL_UART_IRQHandler+0x1b0>
 8003902:	e23d      	b.n	8003d80 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003904:	23a4      	movs	r3, #164	; 0xa4
 8003906:	18fb      	adds	r3, r7, r3
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	2220      	movs	r2, #32
 800390c:	4013      	ands	r3, r2
 800390e:	d015      	beq.n	800393c <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003910:	23a0      	movs	r3, #160	; 0xa0
 8003912:	18fb      	adds	r3, r7, r3
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2220      	movs	r2, #32
 8003918:	4013      	ands	r3, r2
 800391a:	d106      	bne.n	800392a <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800391c:	239c      	movs	r3, #156	; 0x9c
 800391e:	18fb      	adds	r3, r7, r3
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	2380      	movs	r3, #128	; 0x80
 8003924:	055b      	lsls	r3, r3, #21
 8003926:	4013      	ands	r3, r2
 8003928:	d008      	beq.n	800393c <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800392e:	2b00      	cmp	r3, #0
 8003930:	d004      	beq.n	800393c <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	0010      	movs	r0, r2
 800393a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2290      	movs	r2, #144	; 0x90
 8003940:	589b      	ldr	r3, [r3, r2]
 8003942:	2194      	movs	r1, #148	; 0x94
 8003944:	187a      	adds	r2, r7, r1
 8003946:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	2240      	movs	r2, #64	; 0x40
 8003950:	4013      	ands	r3, r2
 8003952:	2b40      	cmp	r3, #64	; 0x40
 8003954:	d004      	beq.n	8003960 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003956:	187b      	adds	r3, r7, r1
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2228      	movs	r2, #40	; 0x28
 800395c:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800395e:	d04c      	beq.n	80039fa <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	0018      	movs	r0, r3
 8003964:	f000 ff64 	bl	8004830 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	2240      	movs	r2, #64	; 0x40
 8003970:	4013      	ands	r3, r2
 8003972:	2b40      	cmp	r3, #64	; 0x40
 8003974:	d13c      	bne.n	80039f0 <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003976:	f3ef 8310 	mrs	r3, PRIMASK
 800397a:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800397c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800397e:	2090      	movs	r0, #144	; 0x90
 8003980:	183a      	adds	r2, r7, r0
 8003982:	6013      	str	r3, [r2, #0]
 8003984:	2301      	movs	r3, #1
 8003986:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003988:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800398a:	f383 8810 	msr	PRIMASK, r3
}
 800398e:	46c0      	nop			; (mov r8, r8)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	689a      	ldr	r2, [r3, #8]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2140      	movs	r1, #64	; 0x40
 800399c:	438a      	bics	r2, r1
 800399e:	609a      	str	r2, [r3, #8]
 80039a0:	183b      	adds	r3, r7, r0
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039a8:	f383 8810 	msr	PRIMASK, r3
}
 80039ac:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2280      	movs	r2, #128	; 0x80
 80039b2:	589b      	ldr	r3, [r3, r2]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d016      	beq.n	80039e6 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2280      	movs	r2, #128	; 0x80
 80039bc:	589b      	ldr	r3, [r3, r2]
 80039be:	4a17      	ldr	r2, [pc, #92]	; (8003a1c <HAL_UART_IRQHandler+0x2c8>)
 80039c0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2280      	movs	r2, #128	; 0x80
 80039c6:	589b      	ldr	r3, [r3, r2]
 80039c8:	0018      	movs	r0, r3
 80039ca:	f7fd ff4f 	bl	800186c <HAL_DMA_Abort_IT>
 80039ce:	1e03      	subs	r3, r0, #0
 80039d0:	d01c      	beq.n	8003a0c <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2280      	movs	r2, #128	; 0x80
 80039d6:	589b      	ldr	r3, [r3, r2]
 80039d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	2180      	movs	r1, #128	; 0x80
 80039de:	5852      	ldr	r2, [r2, r1]
 80039e0:	0010      	movs	r0, r2
 80039e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039e4:	e012      	b.n	8003a0c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	0018      	movs	r0, r3
 80039ea:	f000 f9f1 	bl	8003dd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039ee:	e00d      	b.n	8003a0c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	0018      	movs	r0, r3
 80039f4:	f000 f9ec 	bl	8003dd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039f8:	e008      	b.n	8003a0c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	0018      	movs	r0, r3
 80039fe:	f000 f9e7 	bl	8003dd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2290      	movs	r2, #144	; 0x90
 8003a06:	2100      	movs	r1, #0
 8003a08:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003a0a:	e1b9      	b.n	8003d80 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a0c:	46c0      	nop			; (mov r8, r8)
    return;
 8003a0e:	e1b7      	b.n	8003d80 <HAL_UART_IRQHandler+0x62c>
 8003a10:	0000080f 	.word	0x0000080f
 8003a14:	10000001 	.word	0x10000001
 8003a18:	04000120 	.word	0x04000120
 8003a1c:	08004af5 	.word	0x08004af5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d000      	beq.n	8003a2a <HAL_UART_IRQHandler+0x2d6>
 8003a28:	e13e      	b.n	8003ca8 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003a2a:	23a4      	movs	r3, #164	; 0xa4
 8003a2c:	18fb      	adds	r3, r7, r3
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2210      	movs	r2, #16
 8003a32:	4013      	ands	r3, r2
 8003a34:	d100      	bne.n	8003a38 <HAL_UART_IRQHandler+0x2e4>
 8003a36:	e137      	b.n	8003ca8 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003a38:	23a0      	movs	r3, #160	; 0xa0
 8003a3a:	18fb      	adds	r3, r7, r3
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2210      	movs	r2, #16
 8003a40:	4013      	ands	r3, r2
 8003a42:	d100      	bne.n	8003a46 <HAL_UART_IRQHandler+0x2f2>
 8003a44:	e130      	b.n	8003ca8 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	2210      	movs	r2, #16
 8003a4c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	2240      	movs	r2, #64	; 0x40
 8003a56:	4013      	ands	r3, r2
 8003a58:	2b40      	cmp	r3, #64	; 0x40
 8003a5a:	d000      	beq.n	8003a5e <HAL_UART_IRQHandler+0x30a>
 8003a5c:	e0a4      	b.n	8003ba8 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2280      	movs	r2, #128	; 0x80
 8003a62:	589b      	ldr	r3, [r3, r2]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	685a      	ldr	r2, [r3, #4]
 8003a68:	217e      	movs	r1, #126	; 0x7e
 8003a6a:	187b      	adds	r3, r7, r1
 8003a6c:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003a6e:	187b      	adds	r3, r7, r1
 8003a70:	881b      	ldrh	r3, [r3, #0]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d100      	bne.n	8003a78 <HAL_UART_IRQHandler+0x324>
 8003a76:	e185      	b.n	8003d84 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	225c      	movs	r2, #92	; 0x5c
 8003a7c:	5a9b      	ldrh	r3, [r3, r2]
 8003a7e:	187a      	adds	r2, r7, r1
 8003a80:	8812      	ldrh	r2, [r2, #0]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d300      	bcc.n	8003a88 <HAL_UART_IRQHandler+0x334>
 8003a86:	e17d      	b.n	8003d84 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	187a      	adds	r2, r7, r1
 8003a8c:	215e      	movs	r1, #94	; 0x5e
 8003a8e:	8812      	ldrh	r2, [r2, #0]
 8003a90:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2280      	movs	r2, #128	; 0x80
 8003a96:	589b      	ldr	r3, [r3, r2]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2220      	movs	r2, #32
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	d170      	bne.n	8003b84 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003aa2:	f3ef 8310 	mrs	r3, PRIMASK
 8003aa6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003aaa:	67bb      	str	r3, [r7, #120]	; 0x78
 8003aac:	2301      	movs	r3, #1
 8003aae:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ab2:	f383 8810 	msr	PRIMASK, r3
}
 8003ab6:	46c0      	nop			; (mov r8, r8)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	49b4      	ldr	r1, [pc, #720]	; (8003d94 <HAL_UART_IRQHandler+0x640>)
 8003ac4:	400a      	ands	r2, r1
 8003ac6:	601a      	str	r2, [r3, #0]
 8003ac8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003aca:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ace:	f383 8810 	msr	PRIMASK, r3
}
 8003ad2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ad4:	f3ef 8310 	mrs	r3, PRIMASK
 8003ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003ada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003adc:	677b      	str	r3, [r7, #116]	; 0x74
 8003ade:	2301      	movs	r3, #1
 8003ae0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ae2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ae4:	f383 8810 	msr	PRIMASK, r3
}
 8003ae8:	46c0      	nop			; (mov r8, r8)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	689a      	ldr	r2, [r3, #8]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2101      	movs	r1, #1
 8003af6:	438a      	bics	r2, r1
 8003af8:	609a      	str	r2, [r3, #8]
 8003afa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003afc:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003afe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b00:	f383 8810 	msr	PRIMASK, r3
}
 8003b04:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b06:	f3ef 8310 	mrs	r3, PRIMASK
 8003b0a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003b0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b0e:	673b      	str	r3, [r7, #112]	; 0x70
 8003b10:	2301      	movs	r3, #1
 8003b12:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b16:	f383 8810 	msr	PRIMASK, r3
}
 8003b1a:	46c0      	nop			; (mov r8, r8)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	689a      	ldr	r2, [r3, #8]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	2140      	movs	r1, #64	; 0x40
 8003b28:	438a      	bics	r2, r1
 8003b2a:	609a      	str	r2, [r3, #8]
 8003b2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b2e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b32:	f383 8810 	msr	PRIMASK, r3
}
 8003b36:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	228c      	movs	r2, #140	; 0x8c
 8003b3c:	2120      	movs	r1, #32
 8003b3e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b46:	f3ef 8310 	mrs	r3, PRIMASK
 8003b4a:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003b4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b50:	2301      	movs	r3, #1
 8003b52:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b56:	f383 8810 	msr	PRIMASK, r3
}
 8003b5a:	46c0      	nop			; (mov r8, r8)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2110      	movs	r1, #16
 8003b68:	438a      	bics	r2, r1
 8003b6a:	601a      	str	r2, [r3, #0]
 8003b6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b6e:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b72:	f383 8810 	msr	PRIMASK, r3
}
 8003b76:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2280      	movs	r2, #128	; 0x80
 8003b7c:	589b      	ldr	r3, [r3, r2]
 8003b7e:	0018      	movs	r0, r3
 8003b80:	f7fd fe12 	bl	80017a8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2202      	movs	r2, #2
 8003b88:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	225c      	movs	r2, #92	; 0x5c
 8003b8e:	5a9a      	ldrh	r2, [r3, r2]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	215e      	movs	r1, #94	; 0x5e
 8003b94:	5a5b      	ldrh	r3, [r3, r1]
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	b29a      	uxth	r2, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	0011      	movs	r1, r2
 8003ba0:	0018      	movs	r0, r3
 8003ba2:	f7fd f8b7 	bl	8000d14 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003ba6:	e0ed      	b.n	8003d84 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	225c      	movs	r2, #92	; 0x5c
 8003bac:	5a99      	ldrh	r1, [r3, r2]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	225e      	movs	r2, #94	; 0x5e
 8003bb2:	5a9b      	ldrh	r3, [r3, r2]
 8003bb4:	b29a      	uxth	r2, r3
 8003bb6:	208e      	movs	r0, #142	; 0x8e
 8003bb8:	183b      	adds	r3, r7, r0
 8003bba:	1a8a      	subs	r2, r1, r2
 8003bbc:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	225e      	movs	r2, #94	; 0x5e
 8003bc2:	5a9b      	ldrh	r3, [r3, r2]
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d100      	bne.n	8003bcc <HAL_UART_IRQHandler+0x478>
 8003bca:	e0dd      	b.n	8003d88 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8003bcc:	183b      	adds	r3, r7, r0
 8003bce:	881b      	ldrh	r3, [r3, #0]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d100      	bne.n	8003bd6 <HAL_UART_IRQHandler+0x482>
 8003bd4:	e0d8      	b.n	8003d88 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bd6:	f3ef 8310 	mrs	r3, PRIMASK
 8003bda:	60fb      	str	r3, [r7, #12]
  return(result);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003bde:	2488      	movs	r4, #136	; 0x88
 8003be0:	193a      	adds	r2, r7, r4
 8003be2:	6013      	str	r3, [r2, #0]
 8003be4:	2301      	movs	r3, #1
 8003be6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	f383 8810 	msr	PRIMASK, r3
}
 8003bee:	46c0      	nop			; (mov r8, r8)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4967      	ldr	r1, [pc, #412]	; (8003d98 <HAL_UART_IRQHandler+0x644>)
 8003bfc:	400a      	ands	r2, r1
 8003bfe:	601a      	str	r2, [r3, #0]
 8003c00:	193b      	adds	r3, r7, r4
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	f383 8810 	msr	PRIMASK, r3
}
 8003c0c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c0e:	f3ef 8310 	mrs	r3, PRIMASK
 8003c12:	61bb      	str	r3, [r7, #24]
  return(result);
 8003c14:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003c16:	2484      	movs	r4, #132	; 0x84
 8003c18:	193a      	adds	r2, r7, r4
 8003c1a:	6013      	str	r3, [r2, #0]
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	f383 8810 	msr	PRIMASK, r3
}
 8003c26:	46c0      	nop			; (mov r8, r8)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	689a      	ldr	r2, [r3, #8]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	495a      	ldr	r1, [pc, #360]	; (8003d9c <HAL_UART_IRQHandler+0x648>)
 8003c34:	400a      	ands	r2, r1
 8003c36:	609a      	str	r2, [r3, #8]
 8003c38:	193b      	adds	r3, r7, r4
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c3e:	6a3b      	ldr	r3, [r7, #32]
 8003c40:	f383 8810 	msr	PRIMASK, r3
}
 8003c44:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	228c      	movs	r2, #140	; 0x8c
 8003c4a:	2120      	movs	r1, #32
 8003c4c:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c5a:	f3ef 8310 	mrs	r3, PRIMASK
 8003c5e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c62:	2480      	movs	r4, #128	; 0x80
 8003c64:	193a      	adds	r2, r7, r4
 8003c66:	6013      	str	r3, [r2, #0]
 8003c68:	2301      	movs	r3, #1
 8003c6a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c6e:	f383 8810 	msr	PRIMASK, r3
}
 8003c72:	46c0      	nop			; (mov r8, r8)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2110      	movs	r1, #16
 8003c80:	438a      	bics	r2, r1
 8003c82:	601a      	str	r2, [r3, #0]
 8003c84:	193b      	adds	r3, r7, r4
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c8c:	f383 8810 	msr	PRIMASK, r3
}
 8003c90:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2202      	movs	r2, #2
 8003c96:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c98:	183b      	adds	r3, r7, r0
 8003c9a:	881a      	ldrh	r2, [r3, #0]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	0011      	movs	r1, r2
 8003ca0:	0018      	movs	r0, r3
 8003ca2:	f7fd f837 	bl	8000d14 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003ca6:	e06f      	b.n	8003d88 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003ca8:	23a4      	movs	r3, #164	; 0xa4
 8003caa:	18fb      	adds	r3, r7, r3
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	2380      	movs	r3, #128	; 0x80
 8003cb0:	035b      	lsls	r3, r3, #13
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	d010      	beq.n	8003cd8 <HAL_UART_IRQHandler+0x584>
 8003cb6:	239c      	movs	r3, #156	; 0x9c
 8003cb8:	18fb      	adds	r3, r7, r3
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	2380      	movs	r3, #128	; 0x80
 8003cbe:	03db      	lsls	r3, r3, #15
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	d009      	beq.n	8003cd8 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2280      	movs	r2, #128	; 0x80
 8003cca:	0352      	lsls	r2, r2, #13
 8003ccc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	0018      	movs	r0, r3
 8003cd2:	f000 ff52 	bl	8004b7a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003cd6:	e05a      	b.n	8003d8e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003cd8:	23a4      	movs	r3, #164	; 0xa4
 8003cda:	18fb      	adds	r3, r7, r3
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2280      	movs	r2, #128	; 0x80
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	d016      	beq.n	8003d12 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003ce4:	23a0      	movs	r3, #160	; 0xa0
 8003ce6:	18fb      	adds	r3, r7, r3
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2280      	movs	r2, #128	; 0x80
 8003cec:	4013      	ands	r3, r2
 8003cee:	d106      	bne.n	8003cfe <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003cf0:	239c      	movs	r3, #156	; 0x9c
 8003cf2:	18fb      	adds	r3, r7, r3
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	2380      	movs	r3, #128	; 0x80
 8003cf8:	041b      	lsls	r3, r3, #16
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	d009      	beq.n	8003d12 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d042      	beq.n	8003d8c <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	0010      	movs	r0, r2
 8003d0e:	4798      	blx	r3
    }
    return;
 8003d10:	e03c      	b.n	8003d8c <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003d12:	23a4      	movs	r3, #164	; 0xa4
 8003d14:	18fb      	adds	r3, r7, r3
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2240      	movs	r2, #64	; 0x40
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	d00a      	beq.n	8003d34 <HAL_UART_IRQHandler+0x5e0>
 8003d1e:	23a0      	movs	r3, #160	; 0xa0
 8003d20:	18fb      	adds	r3, r7, r3
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2240      	movs	r2, #64	; 0x40
 8003d26:	4013      	ands	r3, r2
 8003d28:	d004      	beq.n	8003d34 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	0018      	movs	r0, r3
 8003d2e:	f000 fef8 	bl	8004b22 <UART_EndTransmit_IT>
    return;
 8003d32:	e02c      	b.n	8003d8e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003d34:	23a4      	movs	r3, #164	; 0xa4
 8003d36:	18fb      	adds	r3, r7, r3
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	2380      	movs	r3, #128	; 0x80
 8003d3c:	041b      	lsls	r3, r3, #16
 8003d3e:	4013      	ands	r3, r2
 8003d40:	d00b      	beq.n	8003d5a <HAL_UART_IRQHandler+0x606>
 8003d42:	23a0      	movs	r3, #160	; 0xa0
 8003d44:	18fb      	adds	r3, r7, r3
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	2380      	movs	r3, #128	; 0x80
 8003d4a:	05db      	lsls	r3, r3, #23
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	d004      	beq.n	8003d5a <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	0018      	movs	r0, r3
 8003d54:	f000 ff21 	bl	8004b9a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003d58:	e019      	b.n	8003d8e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003d5a:	23a4      	movs	r3, #164	; 0xa4
 8003d5c:	18fb      	adds	r3, r7, r3
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	2380      	movs	r3, #128	; 0x80
 8003d62:	045b      	lsls	r3, r3, #17
 8003d64:	4013      	ands	r3, r2
 8003d66:	d012      	beq.n	8003d8e <HAL_UART_IRQHandler+0x63a>
 8003d68:	23a0      	movs	r3, #160	; 0xa0
 8003d6a:	18fb      	adds	r3, r7, r3
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	da0d      	bge.n	8003d8e <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	0018      	movs	r0, r3
 8003d76:	f000 ff08 	bl	8004b8a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003d7a:	e008      	b.n	8003d8e <HAL_UART_IRQHandler+0x63a>
      return;
 8003d7c:	46c0      	nop			; (mov r8, r8)
 8003d7e:	e006      	b.n	8003d8e <HAL_UART_IRQHandler+0x63a>
    return;
 8003d80:	46c0      	nop			; (mov r8, r8)
 8003d82:	e004      	b.n	8003d8e <HAL_UART_IRQHandler+0x63a>
      return;
 8003d84:	46c0      	nop			; (mov r8, r8)
 8003d86:	e002      	b.n	8003d8e <HAL_UART_IRQHandler+0x63a>
      return;
 8003d88:	46c0      	nop			; (mov r8, r8)
 8003d8a:	e000      	b.n	8003d8e <HAL_UART_IRQHandler+0x63a>
    return;
 8003d8c:	46c0      	nop			; (mov r8, r8)
  }
}
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	b02a      	add	sp, #168	; 0xa8
 8003d92:	bdb0      	pop	{r4, r5, r7, pc}
 8003d94:	fffffeff 	.word	0xfffffeff
 8003d98:	fffffedf 	.word	0xfffffedf
 8003d9c:	effffffe 	.word	0xeffffffe

08003da0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003da8:	46c0      	nop			; (mov r8, r8)
 8003daa:	46bd      	mov	sp, r7
 8003dac:	b002      	add	sp, #8
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003db8:	46c0      	nop			; (mov r8, r8)
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	b002      	add	sp, #8
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003dc8:	46c0      	nop			; (mov r8, r8)
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	b002      	add	sp, #8
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003dd8:	46c0      	nop			; (mov r8, r8)
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	b002      	add	sp, #8
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003de0:	b5b0      	push	{r4, r5, r7, lr}
 8003de2:	b090      	sub	sp, #64	; 0x40
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003de8:	231a      	movs	r3, #26
 8003dea:	2220      	movs	r2, #32
 8003dec:	189b      	adds	r3, r3, r2
 8003dee:	19db      	adds	r3, r3, r7
 8003df0:	2200      	movs	r2, #0
 8003df2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df6:	689a      	ldr	r2, [r3, #8]
 8003df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfa:	691b      	ldr	r3, [r3, #16]
 8003dfc:	431a      	orrs	r2, r3
 8003dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	431a      	orrs	r2, r3
 8003e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e06:	69db      	ldr	r3, [r3, #28]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4ac4      	ldr	r2, [pc, #784]	; (8004124 <UART_SetConfig+0x344>)
 8003e14:	4013      	ands	r3, r2
 8003e16:	0019      	movs	r1, r3
 8003e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e1e:	430b      	orrs	r3, r1
 8003e20:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	4abf      	ldr	r2, [pc, #764]	; (8004128 <UART_SetConfig+0x348>)
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	0018      	movs	r0, r3
 8003e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e30:	68d9      	ldr	r1, [r3, #12]
 8003e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	0003      	movs	r3, r0
 8003e38:	430b      	orrs	r3, r1
 8003e3a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3e:	699b      	ldr	r3, [r3, #24]
 8003e40:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4ab9      	ldr	r2, [pc, #740]	; (800412c <UART_SetConfig+0x34c>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d004      	beq.n	8003e56 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4e:	6a1b      	ldr	r3, [r3, #32]
 8003e50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e52:	4313      	orrs	r3, r2
 8003e54:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	4ab4      	ldr	r2, [pc, #720]	; (8004130 <UART_SetConfig+0x350>)
 8003e5e:	4013      	ands	r3, r2
 8003e60:	0019      	movs	r1, r3
 8003e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e68:	430b      	orrs	r3, r1
 8003e6a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e72:	220f      	movs	r2, #15
 8003e74:	4393      	bics	r3, r2
 8003e76:	0018      	movs	r0, r3
 8003e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	0003      	movs	r3, r0
 8003e82:	430b      	orrs	r3, r1
 8003e84:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4aaa      	ldr	r2, [pc, #680]	; (8004134 <UART_SetConfig+0x354>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d131      	bne.n	8003ef4 <UART_SetConfig+0x114>
 8003e90:	4ba9      	ldr	r3, [pc, #676]	; (8004138 <UART_SetConfig+0x358>)
 8003e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e94:	2203      	movs	r2, #3
 8003e96:	4013      	ands	r3, r2
 8003e98:	2b03      	cmp	r3, #3
 8003e9a:	d01d      	beq.n	8003ed8 <UART_SetConfig+0xf8>
 8003e9c:	d823      	bhi.n	8003ee6 <UART_SetConfig+0x106>
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d00c      	beq.n	8003ebc <UART_SetConfig+0xdc>
 8003ea2:	d820      	bhi.n	8003ee6 <UART_SetConfig+0x106>
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d002      	beq.n	8003eae <UART_SetConfig+0xce>
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d00e      	beq.n	8003eca <UART_SetConfig+0xea>
 8003eac:	e01b      	b.n	8003ee6 <UART_SetConfig+0x106>
 8003eae:	231b      	movs	r3, #27
 8003eb0:	2220      	movs	r2, #32
 8003eb2:	189b      	adds	r3, r3, r2
 8003eb4:	19db      	adds	r3, r3, r7
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	701a      	strb	r2, [r3, #0]
 8003eba:	e071      	b.n	8003fa0 <UART_SetConfig+0x1c0>
 8003ebc:	231b      	movs	r3, #27
 8003ebe:	2220      	movs	r2, #32
 8003ec0:	189b      	adds	r3, r3, r2
 8003ec2:	19db      	adds	r3, r3, r7
 8003ec4:	2202      	movs	r2, #2
 8003ec6:	701a      	strb	r2, [r3, #0]
 8003ec8:	e06a      	b.n	8003fa0 <UART_SetConfig+0x1c0>
 8003eca:	231b      	movs	r3, #27
 8003ecc:	2220      	movs	r2, #32
 8003ece:	189b      	adds	r3, r3, r2
 8003ed0:	19db      	adds	r3, r3, r7
 8003ed2:	2204      	movs	r2, #4
 8003ed4:	701a      	strb	r2, [r3, #0]
 8003ed6:	e063      	b.n	8003fa0 <UART_SetConfig+0x1c0>
 8003ed8:	231b      	movs	r3, #27
 8003eda:	2220      	movs	r2, #32
 8003edc:	189b      	adds	r3, r3, r2
 8003ede:	19db      	adds	r3, r3, r7
 8003ee0:	2208      	movs	r2, #8
 8003ee2:	701a      	strb	r2, [r3, #0]
 8003ee4:	e05c      	b.n	8003fa0 <UART_SetConfig+0x1c0>
 8003ee6:	231b      	movs	r3, #27
 8003ee8:	2220      	movs	r2, #32
 8003eea:	189b      	adds	r3, r3, r2
 8003eec:	19db      	adds	r3, r3, r7
 8003eee:	2210      	movs	r2, #16
 8003ef0:	701a      	strb	r2, [r3, #0]
 8003ef2:	e055      	b.n	8003fa0 <UART_SetConfig+0x1c0>
 8003ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a90      	ldr	r2, [pc, #576]	; (800413c <UART_SetConfig+0x35c>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d106      	bne.n	8003f0c <UART_SetConfig+0x12c>
 8003efe:	231b      	movs	r3, #27
 8003f00:	2220      	movs	r2, #32
 8003f02:	189b      	adds	r3, r3, r2
 8003f04:	19db      	adds	r3, r3, r7
 8003f06:	2200      	movs	r2, #0
 8003f08:	701a      	strb	r2, [r3, #0]
 8003f0a:	e049      	b.n	8003fa0 <UART_SetConfig+0x1c0>
 8003f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a86      	ldr	r2, [pc, #536]	; (800412c <UART_SetConfig+0x34c>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d13e      	bne.n	8003f94 <UART_SetConfig+0x1b4>
 8003f16:	4b88      	ldr	r3, [pc, #544]	; (8004138 <UART_SetConfig+0x358>)
 8003f18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f1a:	23c0      	movs	r3, #192	; 0xc0
 8003f1c:	011b      	lsls	r3, r3, #4
 8003f1e:	4013      	ands	r3, r2
 8003f20:	22c0      	movs	r2, #192	; 0xc0
 8003f22:	0112      	lsls	r2, r2, #4
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d027      	beq.n	8003f78 <UART_SetConfig+0x198>
 8003f28:	22c0      	movs	r2, #192	; 0xc0
 8003f2a:	0112      	lsls	r2, r2, #4
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d82a      	bhi.n	8003f86 <UART_SetConfig+0x1a6>
 8003f30:	2280      	movs	r2, #128	; 0x80
 8003f32:	0112      	lsls	r2, r2, #4
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d011      	beq.n	8003f5c <UART_SetConfig+0x17c>
 8003f38:	2280      	movs	r2, #128	; 0x80
 8003f3a:	0112      	lsls	r2, r2, #4
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d822      	bhi.n	8003f86 <UART_SetConfig+0x1a6>
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d004      	beq.n	8003f4e <UART_SetConfig+0x16e>
 8003f44:	2280      	movs	r2, #128	; 0x80
 8003f46:	00d2      	lsls	r2, r2, #3
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d00e      	beq.n	8003f6a <UART_SetConfig+0x18a>
 8003f4c:	e01b      	b.n	8003f86 <UART_SetConfig+0x1a6>
 8003f4e:	231b      	movs	r3, #27
 8003f50:	2220      	movs	r2, #32
 8003f52:	189b      	adds	r3, r3, r2
 8003f54:	19db      	adds	r3, r3, r7
 8003f56:	2200      	movs	r2, #0
 8003f58:	701a      	strb	r2, [r3, #0]
 8003f5a:	e021      	b.n	8003fa0 <UART_SetConfig+0x1c0>
 8003f5c:	231b      	movs	r3, #27
 8003f5e:	2220      	movs	r2, #32
 8003f60:	189b      	adds	r3, r3, r2
 8003f62:	19db      	adds	r3, r3, r7
 8003f64:	2202      	movs	r2, #2
 8003f66:	701a      	strb	r2, [r3, #0]
 8003f68:	e01a      	b.n	8003fa0 <UART_SetConfig+0x1c0>
 8003f6a:	231b      	movs	r3, #27
 8003f6c:	2220      	movs	r2, #32
 8003f6e:	189b      	adds	r3, r3, r2
 8003f70:	19db      	adds	r3, r3, r7
 8003f72:	2204      	movs	r2, #4
 8003f74:	701a      	strb	r2, [r3, #0]
 8003f76:	e013      	b.n	8003fa0 <UART_SetConfig+0x1c0>
 8003f78:	231b      	movs	r3, #27
 8003f7a:	2220      	movs	r2, #32
 8003f7c:	189b      	adds	r3, r3, r2
 8003f7e:	19db      	adds	r3, r3, r7
 8003f80:	2208      	movs	r2, #8
 8003f82:	701a      	strb	r2, [r3, #0]
 8003f84:	e00c      	b.n	8003fa0 <UART_SetConfig+0x1c0>
 8003f86:	231b      	movs	r3, #27
 8003f88:	2220      	movs	r2, #32
 8003f8a:	189b      	adds	r3, r3, r2
 8003f8c:	19db      	adds	r3, r3, r7
 8003f8e:	2210      	movs	r2, #16
 8003f90:	701a      	strb	r2, [r3, #0]
 8003f92:	e005      	b.n	8003fa0 <UART_SetConfig+0x1c0>
 8003f94:	231b      	movs	r3, #27
 8003f96:	2220      	movs	r2, #32
 8003f98:	189b      	adds	r3, r3, r2
 8003f9a:	19db      	adds	r3, r3, r7
 8003f9c:	2210      	movs	r2, #16
 8003f9e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a61      	ldr	r2, [pc, #388]	; (800412c <UART_SetConfig+0x34c>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d000      	beq.n	8003fac <UART_SetConfig+0x1cc>
 8003faa:	e092      	b.n	80040d2 <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003fac:	231b      	movs	r3, #27
 8003fae:	2220      	movs	r2, #32
 8003fb0:	189b      	adds	r3, r3, r2
 8003fb2:	19db      	adds	r3, r3, r7
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	2b08      	cmp	r3, #8
 8003fb8:	d015      	beq.n	8003fe6 <UART_SetConfig+0x206>
 8003fba:	dc18      	bgt.n	8003fee <UART_SetConfig+0x20e>
 8003fbc:	2b04      	cmp	r3, #4
 8003fbe:	d00d      	beq.n	8003fdc <UART_SetConfig+0x1fc>
 8003fc0:	dc15      	bgt.n	8003fee <UART_SetConfig+0x20e>
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d002      	beq.n	8003fcc <UART_SetConfig+0x1ec>
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d005      	beq.n	8003fd6 <UART_SetConfig+0x1f6>
 8003fca:	e010      	b.n	8003fee <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fcc:	f7fe fc76 	bl	80028bc <HAL_RCC_GetPCLK1Freq>
 8003fd0:	0003      	movs	r3, r0
 8003fd2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003fd4:	e014      	b.n	8004000 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fd6:	4b5a      	ldr	r3, [pc, #360]	; (8004140 <UART_SetConfig+0x360>)
 8003fd8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003fda:	e011      	b.n	8004000 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fdc:	f7fe fbe2 	bl	80027a4 <HAL_RCC_GetSysClockFreq>
 8003fe0:	0003      	movs	r3, r0
 8003fe2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003fe4:	e00c      	b.n	8004000 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fe6:	2380      	movs	r3, #128	; 0x80
 8003fe8:	021b      	lsls	r3, r3, #8
 8003fea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003fec:	e008      	b.n	8004000 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003ff2:	231a      	movs	r3, #26
 8003ff4:	2220      	movs	r2, #32
 8003ff6:	189b      	adds	r3, r3, r2
 8003ff8:	19db      	adds	r3, r3, r7
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	701a      	strb	r2, [r3, #0]
        break;
 8003ffe:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004002:	2b00      	cmp	r3, #0
 8004004:	d100      	bne.n	8004008 <UART_SetConfig+0x228>
 8004006:	e147      	b.n	8004298 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800400c:	4b4d      	ldr	r3, [pc, #308]	; (8004144 <UART_SetConfig+0x364>)
 800400e:	0052      	lsls	r2, r2, #1
 8004010:	5ad3      	ldrh	r3, [r2, r3]
 8004012:	0019      	movs	r1, r3
 8004014:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004016:	f7fc f887 	bl	8000128 <__udivsi3>
 800401a:	0003      	movs	r3, r0
 800401c:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800401e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004020:	685a      	ldr	r2, [r3, #4]
 8004022:	0013      	movs	r3, r2
 8004024:	005b      	lsls	r3, r3, #1
 8004026:	189b      	adds	r3, r3, r2
 8004028:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800402a:	429a      	cmp	r2, r3
 800402c:	d305      	bcc.n	800403a <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800402e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004034:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004036:	429a      	cmp	r2, r3
 8004038:	d906      	bls.n	8004048 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 800403a:	231a      	movs	r3, #26
 800403c:	2220      	movs	r2, #32
 800403e:	189b      	adds	r3, r3, r2
 8004040:	19db      	adds	r3, r3, r7
 8004042:	2201      	movs	r2, #1
 8004044:	701a      	strb	r2, [r3, #0]
 8004046:	e127      	b.n	8004298 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800404a:	61bb      	str	r3, [r7, #24]
 800404c:	2300      	movs	r3, #0
 800404e:	61fb      	str	r3, [r7, #28]
 8004050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004052:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004054:	4b3b      	ldr	r3, [pc, #236]	; (8004144 <UART_SetConfig+0x364>)
 8004056:	0052      	lsls	r2, r2, #1
 8004058:	5ad3      	ldrh	r3, [r2, r3]
 800405a:	613b      	str	r3, [r7, #16]
 800405c:	2300      	movs	r3, #0
 800405e:	617b      	str	r3, [r7, #20]
 8004060:	693a      	ldr	r2, [r7, #16]
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	69b8      	ldr	r0, [r7, #24]
 8004066:	69f9      	ldr	r1, [r7, #28]
 8004068:	f7fc f9d4 	bl	8000414 <__aeabi_uldivmod>
 800406c:	0002      	movs	r2, r0
 800406e:	000b      	movs	r3, r1
 8004070:	0e11      	lsrs	r1, r2, #24
 8004072:	021d      	lsls	r5, r3, #8
 8004074:	430d      	orrs	r5, r1
 8004076:	0214      	lsls	r4, r2, #8
 8004078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	085b      	lsrs	r3, r3, #1
 800407e:	60bb      	str	r3, [r7, #8]
 8004080:	2300      	movs	r3, #0
 8004082:	60fb      	str	r3, [r7, #12]
 8004084:	68b8      	ldr	r0, [r7, #8]
 8004086:	68f9      	ldr	r1, [r7, #12]
 8004088:	1900      	adds	r0, r0, r4
 800408a:	4169      	adcs	r1, r5
 800408c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	603b      	str	r3, [r7, #0]
 8004092:	2300      	movs	r3, #0
 8004094:	607b      	str	r3, [r7, #4]
 8004096:	683a      	ldr	r2, [r7, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f7fc f9bb 	bl	8000414 <__aeabi_uldivmod>
 800409e:	0002      	movs	r2, r0
 80040a0:	000b      	movs	r3, r1
 80040a2:	0013      	movs	r3, r2
 80040a4:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80040a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040a8:	23c0      	movs	r3, #192	; 0xc0
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d309      	bcc.n	80040c4 <UART_SetConfig+0x2e4>
 80040b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040b2:	2380      	movs	r3, #128	; 0x80
 80040b4:	035b      	lsls	r3, r3, #13
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d204      	bcs.n	80040c4 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 80040ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040c0:	60da      	str	r2, [r3, #12]
 80040c2:	e0e9      	b.n	8004298 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 80040c4:	231a      	movs	r3, #26
 80040c6:	2220      	movs	r2, #32
 80040c8:	189b      	adds	r3, r3, r2
 80040ca:	19db      	adds	r3, r3, r7
 80040cc:	2201      	movs	r2, #1
 80040ce:	701a      	strb	r2, [r3, #0]
 80040d0:	e0e2      	b.n	8004298 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d4:	69da      	ldr	r2, [r3, #28]
 80040d6:	2380      	movs	r3, #128	; 0x80
 80040d8:	021b      	lsls	r3, r3, #8
 80040da:	429a      	cmp	r2, r3
 80040dc:	d000      	beq.n	80040e0 <UART_SetConfig+0x300>
 80040de:	e083      	b.n	80041e8 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80040e0:	231b      	movs	r3, #27
 80040e2:	2220      	movs	r2, #32
 80040e4:	189b      	adds	r3, r3, r2
 80040e6:	19db      	adds	r3, r3, r7
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	2b08      	cmp	r3, #8
 80040ec:	d015      	beq.n	800411a <UART_SetConfig+0x33a>
 80040ee:	dc2b      	bgt.n	8004148 <UART_SetConfig+0x368>
 80040f0:	2b04      	cmp	r3, #4
 80040f2:	d00d      	beq.n	8004110 <UART_SetConfig+0x330>
 80040f4:	dc28      	bgt.n	8004148 <UART_SetConfig+0x368>
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d002      	beq.n	8004100 <UART_SetConfig+0x320>
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d005      	beq.n	800410a <UART_SetConfig+0x32a>
 80040fe:	e023      	b.n	8004148 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004100:	f7fe fbdc 	bl	80028bc <HAL_RCC_GetPCLK1Freq>
 8004104:	0003      	movs	r3, r0
 8004106:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004108:	e027      	b.n	800415a <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800410a:	4b0d      	ldr	r3, [pc, #52]	; (8004140 <UART_SetConfig+0x360>)
 800410c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800410e:	e024      	b.n	800415a <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004110:	f7fe fb48 	bl	80027a4 <HAL_RCC_GetSysClockFreq>
 8004114:	0003      	movs	r3, r0
 8004116:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004118:	e01f      	b.n	800415a <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800411a:	2380      	movs	r3, #128	; 0x80
 800411c:	021b      	lsls	r3, r3, #8
 800411e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004120:	e01b      	b.n	800415a <UART_SetConfig+0x37a>
 8004122:	46c0      	nop			; (mov r8, r8)
 8004124:	cfff69f3 	.word	0xcfff69f3
 8004128:	ffffcfff 	.word	0xffffcfff
 800412c:	40008000 	.word	0x40008000
 8004130:	11fff4ff 	.word	0x11fff4ff
 8004134:	40013800 	.word	0x40013800
 8004138:	40021000 	.word	0x40021000
 800413c:	40004400 	.word	0x40004400
 8004140:	00f42400 	.word	0x00f42400
 8004144:	08006738 	.word	0x08006738
      default:
        pclk = 0U;
 8004148:	2300      	movs	r3, #0
 800414a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800414c:	231a      	movs	r3, #26
 800414e:	2220      	movs	r2, #32
 8004150:	189b      	adds	r3, r3, r2
 8004152:	19db      	adds	r3, r3, r7
 8004154:	2201      	movs	r2, #1
 8004156:	701a      	strb	r2, [r3, #0]
        break;
 8004158:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800415a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800415c:	2b00      	cmp	r3, #0
 800415e:	d100      	bne.n	8004162 <UART_SetConfig+0x382>
 8004160:	e09a      	b.n	8004298 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004164:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004166:	4b58      	ldr	r3, [pc, #352]	; (80042c8 <UART_SetConfig+0x4e8>)
 8004168:	0052      	lsls	r2, r2, #1
 800416a:	5ad3      	ldrh	r3, [r2, r3]
 800416c:	0019      	movs	r1, r3
 800416e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004170:	f7fb ffda 	bl	8000128 <__udivsi3>
 8004174:	0003      	movs	r3, r0
 8004176:	005a      	lsls	r2, r3, #1
 8004178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	085b      	lsrs	r3, r3, #1
 800417e:	18d2      	adds	r2, r2, r3
 8004180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	0019      	movs	r1, r3
 8004186:	0010      	movs	r0, r2
 8004188:	f7fb ffce 	bl	8000128 <__udivsi3>
 800418c:	0003      	movs	r3, r0
 800418e:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004192:	2b0f      	cmp	r3, #15
 8004194:	d921      	bls.n	80041da <UART_SetConfig+0x3fa>
 8004196:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004198:	2380      	movs	r3, #128	; 0x80
 800419a:	025b      	lsls	r3, r3, #9
 800419c:	429a      	cmp	r2, r3
 800419e:	d21c      	bcs.n	80041da <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80041a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a2:	b29a      	uxth	r2, r3
 80041a4:	200e      	movs	r0, #14
 80041a6:	2420      	movs	r4, #32
 80041a8:	1903      	adds	r3, r0, r4
 80041aa:	19db      	adds	r3, r3, r7
 80041ac:	210f      	movs	r1, #15
 80041ae:	438a      	bics	r2, r1
 80041b0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80041b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b4:	085b      	lsrs	r3, r3, #1
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	2207      	movs	r2, #7
 80041ba:	4013      	ands	r3, r2
 80041bc:	b299      	uxth	r1, r3
 80041be:	1903      	adds	r3, r0, r4
 80041c0:	19db      	adds	r3, r3, r7
 80041c2:	1902      	adds	r2, r0, r4
 80041c4:	19d2      	adds	r2, r2, r7
 80041c6:	8812      	ldrh	r2, [r2, #0]
 80041c8:	430a      	orrs	r2, r1
 80041ca:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80041cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	1902      	adds	r2, r0, r4
 80041d2:	19d2      	adds	r2, r2, r7
 80041d4:	8812      	ldrh	r2, [r2, #0]
 80041d6:	60da      	str	r2, [r3, #12]
 80041d8:	e05e      	b.n	8004298 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 80041da:	231a      	movs	r3, #26
 80041dc:	2220      	movs	r2, #32
 80041de:	189b      	adds	r3, r3, r2
 80041e0:	19db      	adds	r3, r3, r7
 80041e2:	2201      	movs	r2, #1
 80041e4:	701a      	strb	r2, [r3, #0]
 80041e6:	e057      	b.n	8004298 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80041e8:	231b      	movs	r3, #27
 80041ea:	2220      	movs	r2, #32
 80041ec:	189b      	adds	r3, r3, r2
 80041ee:	19db      	adds	r3, r3, r7
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	2b08      	cmp	r3, #8
 80041f4:	d015      	beq.n	8004222 <UART_SetConfig+0x442>
 80041f6:	dc18      	bgt.n	800422a <UART_SetConfig+0x44a>
 80041f8:	2b04      	cmp	r3, #4
 80041fa:	d00d      	beq.n	8004218 <UART_SetConfig+0x438>
 80041fc:	dc15      	bgt.n	800422a <UART_SetConfig+0x44a>
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d002      	beq.n	8004208 <UART_SetConfig+0x428>
 8004202:	2b02      	cmp	r3, #2
 8004204:	d005      	beq.n	8004212 <UART_SetConfig+0x432>
 8004206:	e010      	b.n	800422a <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004208:	f7fe fb58 	bl	80028bc <HAL_RCC_GetPCLK1Freq>
 800420c:	0003      	movs	r3, r0
 800420e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004210:	e014      	b.n	800423c <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004212:	4b2e      	ldr	r3, [pc, #184]	; (80042cc <UART_SetConfig+0x4ec>)
 8004214:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004216:	e011      	b.n	800423c <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004218:	f7fe fac4 	bl	80027a4 <HAL_RCC_GetSysClockFreq>
 800421c:	0003      	movs	r3, r0
 800421e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004220:	e00c      	b.n	800423c <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004222:	2380      	movs	r3, #128	; 0x80
 8004224:	021b      	lsls	r3, r3, #8
 8004226:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004228:	e008      	b.n	800423c <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 800422a:	2300      	movs	r3, #0
 800422c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800422e:	231a      	movs	r3, #26
 8004230:	2220      	movs	r2, #32
 8004232:	189b      	adds	r3, r3, r2
 8004234:	19db      	adds	r3, r3, r7
 8004236:	2201      	movs	r2, #1
 8004238:	701a      	strb	r2, [r3, #0]
        break;
 800423a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800423c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800423e:	2b00      	cmp	r3, #0
 8004240:	d02a      	beq.n	8004298 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004244:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004246:	4b20      	ldr	r3, [pc, #128]	; (80042c8 <UART_SetConfig+0x4e8>)
 8004248:	0052      	lsls	r2, r2, #1
 800424a:	5ad3      	ldrh	r3, [r2, r3]
 800424c:	0019      	movs	r1, r3
 800424e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004250:	f7fb ff6a 	bl	8000128 <__udivsi3>
 8004254:	0003      	movs	r3, r0
 8004256:	001a      	movs	r2, r3
 8004258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	085b      	lsrs	r3, r3, #1
 800425e:	18d2      	adds	r2, r2, r3
 8004260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	0019      	movs	r1, r3
 8004266:	0010      	movs	r0, r2
 8004268:	f7fb ff5e 	bl	8000128 <__udivsi3>
 800426c:	0003      	movs	r3, r0
 800426e:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004272:	2b0f      	cmp	r3, #15
 8004274:	d90a      	bls.n	800428c <UART_SetConfig+0x4ac>
 8004276:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004278:	2380      	movs	r3, #128	; 0x80
 800427a:	025b      	lsls	r3, r3, #9
 800427c:	429a      	cmp	r2, r3
 800427e:	d205      	bcs.n	800428c <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004282:	b29a      	uxth	r2, r3
 8004284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	60da      	str	r2, [r3, #12]
 800428a:	e005      	b.n	8004298 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 800428c:	231a      	movs	r3, #26
 800428e:	2220      	movs	r2, #32
 8004290:	189b      	adds	r3, r3, r2
 8004292:	19db      	adds	r3, r3, r7
 8004294:	2201      	movs	r2, #1
 8004296:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429a:	226a      	movs	r2, #106	; 0x6a
 800429c:	2101      	movs	r1, #1
 800429e:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80042a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a2:	2268      	movs	r2, #104	; 0x68
 80042a4:	2101      	movs	r1, #1
 80042a6:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80042a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042aa:	2200      	movs	r2, #0
 80042ac:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80042ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b0:	2200      	movs	r2, #0
 80042b2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80042b4:	231a      	movs	r3, #26
 80042b6:	2220      	movs	r2, #32
 80042b8:	189b      	adds	r3, r3, r2
 80042ba:	19db      	adds	r3, r3, r7
 80042bc:	781b      	ldrb	r3, [r3, #0]
}
 80042be:	0018      	movs	r0, r3
 80042c0:	46bd      	mov	sp, r7
 80042c2:	b010      	add	sp, #64	; 0x40
 80042c4:	bdb0      	pop	{r4, r5, r7, pc}
 80042c6:	46c0      	nop			; (mov r8, r8)
 80042c8:	08006738 	.word	0x08006738
 80042cc:	00f42400 	.word	0x00f42400

080042d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042dc:	2201      	movs	r2, #1
 80042de:	4013      	ands	r3, r2
 80042e0:	d00b      	beq.n	80042fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	4a4a      	ldr	r2, [pc, #296]	; (8004414 <UART_AdvFeatureConfig+0x144>)
 80042ea:	4013      	ands	r3, r2
 80042ec:	0019      	movs	r1, r3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	430a      	orrs	r2, r1
 80042f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042fe:	2202      	movs	r2, #2
 8004300:	4013      	ands	r3, r2
 8004302:	d00b      	beq.n	800431c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	4a43      	ldr	r2, [pc, #268]	; (8004418 <UART_AdvFeatureConfig+0x148>)
 800430c:	4013      	ands	r3, r2
 800430e:	0019      	movs	r1, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	430a      	orrs	r2, r1
 800431a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004320:	2204      	movs	r2, #4
 8004322:	4013      	ands	r3, r2
 8004324:	d00b      	beq.n	800433e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	4a3b      	ldr	r2, [pc, #236]	; (800441c <UART_AdvFeatureConfig+0x14c>)
 800432e:	4013      	ands	r3, r2
 8004330:	0019      	movs	r1, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	430a      	orrs	r2, r1
 800433c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004342:	2208      	movs	r2, #8
 8004344:	4013      	ands	r3, r2
 8004346:	d00b      	beq.n	8004360 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	4a34      	ldr	r2, [pc, #208]	; (8004420 <UART_AdvFeatureConfig+0x150>)
 8004350:	4013      	ands	r3, r2
 8004352:	0019      	movs	r1, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	430a      	orrs	r2, r1
 800435e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004364:	2210      	movs	r2, #16
 8004366:	4013      	ands	r3, r2
 8004368:	d00b      	beq.n	8004382 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	4a2c      	ldr	r2, [pc, #176]	; (8004424 <UART_AdvFeatureConfig+0x154>)
 8004372:	4013      	ands	r3, r2
 8004374:	0019      	movs	r1, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	430a      	orrs	r2, r1
 8004380:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004386:	2220      	movs	r2, #32
 8004388:	4013      	ands	r3, r2
 800438a:	d00b      	beq.n	80043a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	4a25      	ldr	r2, [pc, #148]	; (8004428 <UART_AdvFeatureConfig+0x158>)
 8004394:	4013      	ands	r3, r2
 8004396:	0019      	movs	r1, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	430a      	orrs	r2, r1
 80043a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a8:	2240      	movs	r2, #64	; 0x40
 80043aa:	4013      	ands	r3, r2
 80043ac:	d01d      	beq.n	80043ea <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	4a1d      	ldr	r2, [pc, #116]	; (800442c <UART_AdvFeatureConfig+0x15c>)
 80043b6:	4013      	ands	r3, r2
 80043b8:	0019      	movs	r1, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	430a      	orrs	r2, r1
 80043c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043ca:	2380      	movs	r3, #128	; 0x80
 80043cc:	035b      	lsls	r3, r3, #13
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d10b      	bne.n	80043ea <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	4a15      	ldr	r2, [pc, #84]	; (8004430 <UART_AdvFeatureConfig+0x160>)
 80043da:	4013      	ands	r3, r2
 80043dc:	0019      	movs	r1, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	430a      	orrs	r2, r1
 80043e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ee:	2280      	movs	r2, #128	; 0x80
 80043f0:	4013      	ands	r3, r2
 80043f2:	d00b      	beq.n	800440c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	4a0e      	ldr	r2, [pc, #56]	; (8004434 <UART_AdvFeatureConfig+0x164>)
 80043fc:	4013      	ands	r3, r2
 80043fe:	0019      	movs	r1, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	430a      	orrs	r2, r1
 800440a:	605a      	str	r2, [r3, #4]
  }
}
 800440c:	46c0      	nop			; (mov r8, r8)
 800440e:	46bd      	mov	sp, r7
 8004410:	b002      	add	sp, #8
 8004412:	bd80      	pop	{r7, pc}
 8004414:	fffdffff 	.word	0xfffdffff
 8004418:	fffeffff 	.word	0xfffeffff
 800441c:	fffbffff 	.word	0xfffbffff
 8004420:	ffff7fff 	.word	0xffff7fff
 8004424:	ffffefff 	.word	0xffffefff
 8004428:	ffffdfff 	.word	0xffffdfff
 800442c:	ffefffff 	.word	0xffefffff
 8004430:	ff9fffff 	.word	0xff9fffff
 8004434:	fff7ffff 	.word	0xfff7ffff

08004438 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b086      	sub	sp, #24
 800443c:	af02      	add	r7, sp, #8
 800443e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2290      	movs	r2, #144	; 0x90
 8004444:	2100      	movs	r1, #0
 8004446:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004448:	f7fc ff92 	bl	8001370 <HAL_GetTick>
 800444c:	0003      	movs	r3, r0
 800444e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2208      	movs	r2, #8
 8004458:	4013      	ands	r3, r2
 800445a:	2b08      	cmp	r3, #8
 800445c:	d10c      	bne.n	8004478 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2280      	movs	r2, #128	; 0x80
 8004462:	0391      	lsls	r1, r2, #14
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	4a1a      	ldr	r2, [pc, #104]	; (80044d0 <UART_CheckIdleState+0x98>)
 8004468:	9200      	str	r2, [sp, #0]
 800446a:	2200      	movs	r2, #0
 800446c:	f000 f832 	bl	80044d4 <UART_WaitOnFlagUntilTimeout>
 8004470:	1e03      	subs	r3, r0, #0
 8004472:	d001      	beq.n	8004478 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	e026      	b.n	80044c6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2204      	movs	r2, #4
 8004480:	4013      	ands	r3, r2
 8004482:	2b04      	cmp	r3, #4
 8004484:	d10c      	bne.n	80044a0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2280      	movs	r2, #128	; 0x80
 800448a:	03d1      	lsls	r1, r2, #15
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	4a10      	ldr	r2, [pc, #64]	; (80044d0 <UART_CheckIdleState+0x98>)
 8004490:	9200      	str	r2, [sp, #0]
 8004492:	2200      	movs	r2, #0
 8004494:	f000 f81e 	bl	80044d4 <UART_WaitOnFlagUntilTimeout>
 8004498:	1e03      	subs	r3, r0, #0
 800449a:	d001      	beq.n	80044a0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800449c:	2303      	movs	r3, #3
 800449e:	e012      	b.n	80044c6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2288      	movs	r2, #136	; 0x88
 80044a4:	2120      	movs	r1, #32
 80044a6:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	228c      	movs	r2, #140	; 0x8c
 80044ac:	2120      	movs	r1, #32
 80044ae:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2284      	movs	r2, #132	; 0x84
 80044c0:	2100      	movs	r1, #0
 80044c2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	0018      	movs	r0, r3
 80044c8:	46bd      	mov	sp, r7
 80044ca:	b004      	add	sp, #16
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	46c0      	nop			; (mov r8, r8)
 80044d0:	01ffffff 	.word	0x01ffffff

080044d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b094      	sub	sp, #80	; 0x50
 80044d8:	af00      	add	r7, sp, #0
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	603b      	str	r3, [r7, #0]
 80044e0:	1dfb      	adds	r3, r7, #7
 80044e2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044e4:	e0a7      	b.n	8004636 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044e8:	3301      	adds	r3, #1
 80044ea:	d100      	bne.n	80044ee <UART_WaitOnFlagUntilTimeout+0x1a>
 80044ec:	e0a3      	b.n	8004636 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044ee:	f7fc ff3f 	bl	8001370 <HAL_GetTick>
 80044f2:	0002      	movs	r2, r0
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d302      	bcc.n	8004504 <UART_WaitOnFlagUntilTimeout+0x30>
 80044fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004500:	2b00      	cmp	r3, #0
 8004502:	d13f      	bne.n	8004584 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004504:	f3ef 8310 	mrs	r3, PRIMASK
 8004508:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800450a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800450c:	647b      	str	r3, [r7, #68]	; 0x44
 800450e:	2301      	movs	r3, #1
 8004510:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004514:	f383 8810 	msr	PRIMASK, r3
}
 8004518:	46c0      	nop			; (mov r8, r8)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	494e      	ldr	r1, [pc, #312]	; (8004660 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004526:	400a      	ands	r2, r1
 8004528:	601a      	str	r2, [r3, #0]
 800452a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800452c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800452e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004530:	f383 8810 	msr	PRIMASK, r3
}
 8004534:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004536:	f3ef 8310 	mrs	r3, PRIMASK
 800453a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800453c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800453e:	643b      	str	r3, [r7, #64]	; 0x40
 8004540:	2301      	movs	r3, #1
 8004542:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004546:	f383 8810 	msr	PRIMASK, r3
}
 800454a:	46c0      	nop			; (mov r8, r8)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	689a      	ldr	r2, [r3, #8]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2101      	movs	r1, #1
 8004558:	438a      	bics	r2, r1
 800455a:	609a      	str	r2, [r3, #8]
 800455c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800455e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004562:	f383 8810 	msr	PRIMASK, r3
}
 8004566:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2288      	movs	r2, #136	; 0x88
 800456c:	2120      	movs	r1, #32
 800456e:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	228c      	movs	r2, #140	; 0x8c
 8004574:	2120      	movs	r1, #32
 8004576:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2284      	movs	r2, #132	; 0x84
 800457c:	2100      	movs	r1, #0
 800457e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	e069      	b.n	8004658 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2204      	movs	r2, #4
 800458c:	4013      	ands	r3, r2
 800458e:	d052      	beq.n	8004636 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	69da      	ldr	r2, [r3, #28]
 8004596:	2380      	movs	r3, #128	; 0x80
 8004598:	011b      	lsls	r3, r3, #4
 800459a:	401a      	ands	r2, r3
 800459c:	2380      	movs	r3, #128	; 0x80
 800459e:	011b      	lsls	r3, r3, #4
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d148      	bne.n	8004636 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2280      	movs	r2, #128	; 0x80
 80045aa:	0112      	lsls	r2, r2, #4
 80045ac:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045ae:	f3ef 8310 	mrs	r3, PRIMASK
 80045b2:	613b      	str	r3, [r7, #16]
  return(result);
 80045b4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80045b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045b8:	2301      	movs	r3, #1
 80045ba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	f383 8810 	msr	PRIMASK, r3
}
 80045c2:	46c0      	nop			; (mov r8, r8)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4924      	ldr	r1, [pc, #144]	; (8004660 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80045d0:	400a      	ands	r2, r1
 80045d2:	601a      	str	r2, [r3, #0]
 80045d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045d6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	f383 8810 	msr	PRIMASK, r3
}
 80045de:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045e0:	f3ef 8310 	mrs	r3, PRIMASK
 80045e4:	61fb      	str	r3, [r7, #28]
  return(result);
 80045e6:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80045ea:	2301      	movs	r3, #1
 80045ec:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045ee:	6a3b      	ldr	r3, [r7, #32]
 80045f0:	f383 8810 	msr	PRIMASK, r3
}
 80045f4:	46c0      	nop			; (mov r8, r8)
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	689a      	ldr	r2, [r3, #8]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2101      	movs	r1, #1
 8004602:	438a      	bics	r2, r1
 8004604:	609a      	str	r2, [r3, #8]
 8004606:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004608:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800460a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460c:	f383 8810 	msr	PRIMASK, r3
}
 8004610:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2288      	movs	r2, #136	; 0x88
 8004616:	2120      	movs	r1, #32
 8004618:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	228c      	movs	r2, #140	; 0x8c
 800461e:	2120      	movs	r1, #32
 8004620:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2290      	movs	r2, #144	; 0x90
 8004626:	2120      	movs	r1, #32
 8004628:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2284      	movs	r2, #132	; 0x84
 800462e:	2100      	movs	r1, #0
 8004630:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e010      	b.n	8004658 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	69db      	ldr	r3, [r3, #28]
 800463c:	68ba      	ldr	r2, [r7, #8]
 800463e:	4013      	ands	r3, r2
 8004640:	68ba      	ldr	r2, [r7, #8]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	425a      	negs	r2, r3
 8004646:	4153      	adcs	r3, r2
 8004648:	b2db      	uxtb	r3, r3
 800464a:	001a      	movs	r2, r3
 800464c:	1dfb      	adds	r3, r7, #7
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	429a      	cmp	r2, r3
 8004652:	d100      	bne.n	8004656 <UART_WaitOnFlagUntilTimeout+0x182>
 8004654:	e747      	b.n	80044e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004656:	2300      	movs	r3, #0
}
 8004658:	0018      	movs	r0, r3
 800465a:	46bd      	mov	sp, r7
 800465c:	b014      	add	sp, #80	; 0x50
 800465e:	bd80      	pop	{r7, pc}
 8004660:	fffffe5f 	.word	0xfffffe5f

08004664 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b090      	sub	sp, #64	; 0x40
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	1dbb      	adds	r3, r7, #6
 8004670:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	68ba      	ldr	r2, [r7, #8]
 8004676:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	1dba      	adds	r2, r7, #6
 800467c:	215c      	movs	r1, #92	; 0x5c
 800467e:	8812      	ldrh	r2, [r2, #0]
 8004680:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2290      	movs	r2, #144	; 0x90
 8004686:	2100      	movs	r1, #0
 8004688:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	228c      	movs	r2, #140	; 0x8c
 800468e:	2122      	movs	r1, #34	; 0x22
 8004690:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2280      	movs	r2, #128	; 0x80
 8004696:	589b      	ldr	r3, [r3, r2]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d02d      	beq.n	80046f8 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2280      	movs	r2, #128	; 0x80
 80046a0:	589b      	ldr	r3, [r3, r2]
 80046a2:	4a40      	ldr	r2, [pc, #256]	; (80047a4 <UART_Start_Receive_DMA+0x140>)
 80046a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2280      	movs	r2, #128	; 0x80
 80046aa:	589b      	ldr	r3, [r3, r2]
 80046ac:	4a3e      	ldr	r2, [pc, #248]	; (80047a8 <UART_Start_Receive_DMA+0x144>)
 80046ae:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2280      	movs	r2, #128	; 0x80
 80046b4:	589b      	ldr	r3, [r3, r2]
 80046b6:	4a3d      	ldr	r2, [pc, #244]	; (80047ac <UART_Start_Receive_DMA+0x148>)
 80046b8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2280      	movs	r2, #128	; 0x80
 80046be:	589b      	ldr	r3, [r3, r2]
 80046c0:	2200      	movs	r2, #0
 80046c2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2280      	movs	r2, #128	; 0x80
 80046c8:	5898      	ldr	r0, [r3, r2]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	3324      	adds	r3, #36	; 0x24
 80046d0:	0019      	movs	r1, r3
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046d6:	001a      	movs	r2, r3
 80046d8:	1dbb      	adds	r3, r7, #6
 80046da:	881b      	ldrh	r3, [r3, #0]
 80046dc:	f7fc ffde 	bl	800169c <HAL_DMA_Start_IT>
 80046e0:	1e03      	subs	r3, r0, #0
 80046e2:	d009      	beq.n	80046f8 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2290      	movs	r2, #144	; 0x90
 80046e8:	2110      	movs	r1, #16
 80046ea:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	228c      	movs	r2, #140	; 0x8c
 80046f0:	2120      	movs	r1, #32
 80046f2:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e050      	b.n	800479a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	691b      	ldr	r3, [r3, #16]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d019      	beq.n	8004734 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004700:	f3ef 8310 	mrs	r3, PRIMASK
 8004704:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004706:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004708:	63fb      	str	r3, [r7, #60]	; 0x3c
 800470a:	2301      	movs	r3, #1
 800470c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800470e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004710:	f383 8810 	msr	PRIMASK, r3
}
 8004714:	46c0      	nop			; (mov r8, r8)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2180      	movs	r1, #128	; 0x80
 8004722:	0049      	lsls	r1, r1, #1
 8004724:	430a      	orrs	r2, r1
 8004726:	601a      	str	r2, [r3, #0]
 8004728:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800472a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800472c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800472e:	f383 8810 	msr	PRIMASK, r3
}
 8004732:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004734:	f3ef 8310 	mrs	r3, PRIMASK
 8004738:	613b      	str	r3, [r7, #16]
  return(result);
 800473a:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800473c:	63bb      	str	r3, [r7, #56]	; 0x38
 800473e:	2301      	movs	r3, #1
 8004740:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	f383 8810 	msr	PRIMASK, r3
}
 8004748:	46c0      	nop			; (mov r8, r8)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	689a      	ldr	r2, [r3, #8]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2101      	movs	r1, #1
 8004756:	430a      	orrs	r2, r1
 8004758:	609a      	str	r2, [r3, #8]
 800475a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800475c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	f383 8810 	msr	PRIMASK, r3
}
 8004764:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004766:	f3ef 8310 	mrs	r3, PRIMASK
 800476a:	61fb      	str	r3, [r7, #28]
  return(result);
 800476c:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800476e:	637b      	str	r3, [r7, #52]	; 0x34
 8004770:	2301      	movs	r3, #1
 8004772:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004774:	6a3b      	ldr	r3, [r7, #32]
 8004776:	f383 8810 	msr	PRIMASK, r3
}
 800477a:	46c0      	nop			; (mov r8, r8)
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	689a      	ldr	r2, [r3, #8]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2140      	movs	r1, #64	; 0x40
 8004788:	430a      	orrs	r2, r1
 800478a:	609a      	str	r2, [r3, #8]
 800478c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800478e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004792:	f383 8810 	msr	PRIMASK, r3
}
 8004796:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8004798:	2300      	movs	r3, #0
}
 800479a:	0018      	movs	r0, r3
 800479c:	46bd      	mov	sp, r7
 800479e:	b010      	add	sp, #64	; 0x40
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	46c0      	nop			; (mov r8, r8)
 80047a4:	080048fd 	.word	0x080048fd
 80047a8:	08004a2d 	.word	0x08004a2d
 80047ac:	08004a6f 	.word	0x08004a6f

080047b0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b08a      	sub	sp, #40	; 0x28
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047b8:	f3ef 8310 	mrs	r3, PRIMASK
 80047bc:	60bb      	str	r3, [r7, #8]
  return(result);
 80047be:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80047c0:	627b      	str	r3, [r7, #36]	; 0x24
 80047c2:	2301      	movs	r3, #1
 80047c4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f383 8810 	msr	PRIMASK, r3
}
 80047cc:	46c0      	nop			; (mov r8, r8)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	21c0      	movs	r1, #192	; 0xc0
 80047da:	438a      	bics	r2, r1
 80047dc:	601a      	str	r2, [r3, #0]
 80047de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	f383 8810 	msr	PRIMASK, r3
}
 80047e8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047ea:	f3ef 8310 	mrs	r3, PRIMASK
 80047ee:	617b      	str	r3, [r7, #20]
  return(result);
 80047f0:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80047f2:	623b      	str	r3, [r7, #32]
 80047f4:	2301      	movs	r3, #1
 80047f6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	f383 8810 	msr	PRIMASK, r3
}
 80047fe:	46c0      	nop			; (mov r8, r8)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	689a      	ldr	r2, [r3, #8]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4908      	ldr	r1, [pc, #32]	; (800482c <UART_EndTxTransfer+0x7c>)
 800480c:	400a      	ands	r2, r1
 800480e:	609a      	str	r2, [r3, #8]
 8004810:	6a3b      	ldr	r3, [r7, #32]
 8004812:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	f383 8810 	msr	PRIMASK, r3
}
 800481a:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2288      	movs	r2, #136	; 0x88
 8004820:	2120      	movs	r1, #32
 8004822:	5099      	str	r1, [r3, r2]
}
 8004824:	46c0      	nop			; (mov r8, r8)
 8004826:	46bd      	mov	sp, r7
 8004828:	b00a      	add	sp, #40	; 0x28
 800482a:	bd80      	pop	{r7, pc}
 800482c:	ff7fffff 	.word	0xff7fffff

08004830 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b08e      	sub	sp, #56	; 0x38
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004838:	f3ef 8310 	mrs	r3, PRIMASK
 800483c:	617b      	str	r3, [r7, #20]
  return(result);
 800483e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004840:	637b      	str	r3, [r7, #52]	; 0x34
 8004842:	2301      	movs	r3, #1
 8004844:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	f383 8810 	msr	PRIMASK, r3
}
 800484c:	46c0      	nop			; (mov r8, r8)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4926      	ldr	r1, [pc, #152]	; (80048f4 <UART_EndRxTransfer+0xc4>)
 800485a:	400a      	ands	r2, r1
 800485c:	601a      	str	r2, [r3, #0]
 800485e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004860:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	f383 8810 	msr	PRIMASK, r3
}
 8004868:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800486a:	f3ef 8310 	mrs	r3, PRIMASK
 800486e:	623b      	str	r3, [r7, #32]
  return(result);
 8004870:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004872:	633b      	str	r3, [r7, #48]	; 0x30
 8004874:	2301      	movs	r3, #1
 8004876:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487a:	f383 8810 	msr	PRIMASK, r3
}
 800487e:	46c0      	nop			; (mov r8, r8)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	689a      	ldr	r2, [r3, #8]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	491b      	ldr	r1, [pc, #108]	; (80048f8 <UART_EndRxTransfer+0xc8>)
 800488c:	400a      	ands	r2, r1
 800488e:	609a      	str	r2, [r3, #8]
 8004890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004892:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004896:	f383 8810 	msr	PRIMASK, r3
}
 800489a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d118      	bne.n	80048d6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048a4:	f3ef 8310 	mrs	r3, PRIMASK
 80048a8:	60bb      	str	r3, [r7, #8]
  return(result);
 80048aa:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048ae:	2301      	movs	r3, #1
 80048b0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f383 8810 	msr	PRIMASK, r3
}
 80048b8:	46c0      	nop			; (mov r8, r8)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2110      	movs	r1, #16
 80048c6:	438a      	bics	r2, r1
 80048c8:	601a      	str	r2, [r3, #0]
 80048ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	f383 8810 	msr	PRIMASK, r3
}
 80048d4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	228c      	movs	r2, #140	; 0x8c
 80048da:	2120      	movs	r1, #32
 80048dc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	675a      	str	r2, [r3, #116]	; 0x74
}
 80048ea:	46c0      	nop			; (mov r8, r8)
 80048ec:	46bd      	mov	sp, r7
 80048ee:	b00e      	add	sp, #56	; 0x38
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	46c0      	nop			; (mov r8, r8)
 80048f4:	fffffedf 	.word	0xfffffedf
 80048f8:	effffffe 	.word	0xeffffffe

080048fc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b094      	sub	sp, #80	; 0x50
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004908:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2220      	movs	r2, #32
 8004912:	4013      	ands	r3, r2
 8004914:	d16f      	bne.n	80049f6 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8004916:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004918:	225e      	movs	r2, #94	; 0x5e
 800491a:	2100      	movs	r1, #0
 800491c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800491e:	f3ef 8310 	mrs	r3, PRIMASK
 8004922:	61bb      	str	r3, [r7, #24]
  return(result);
 8004924:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004926:	64bb      	str	r3, [r7, #72]	; 0x48
 8004928:	2301      	movs	r3, #1
 800492a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	f383 8810 	msr	PRIMASK, r3
}
 8004932:	46c0      	nop			; (mov r8, r8)
 8004934:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	493a      	ldr	r1, [pc, #232]	; (8004a28 <UART_DMAReceiveCplt+0x12c>)
 8004940:	400a      	ands	r2, r1
 8004942:	601a      	str	r2, [r3, #0]
 8004944:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004946:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004948:	6a3b      	ldr	r3, [r7, #32]
 800494a:	f383 8810 	msr	PRIMASK, r3
}
 800494e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004950:	f3ef 8310 	mrs	r3, PRIMASK
 8004954:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004958:	647b      	str	r3, [r7, #68]	; 0x44
 800495a:	2301      	movs	r3, #1
 800495c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800495e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004960:	f383 8810 	msr	PRIMASK, r3
}
 8004964:	46c0      	nop			; (mov r8, r8)
 8004966:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	689a      	ldr	r2, [r3, #8]
 800496c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2101      	movs	r1, #1
 8004972:	438a      	bics	r2, r1
 8004974:	609a      	str	r2, [r3, #8]
 8004976:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004978:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800497a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800497c:	f383 8810 	msr	PRIMASK, r3
}
 8004980:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004982:	f3ef 8310 	mrs	r3, PRIMASK
 8004986:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004988:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800498a:	643b      	str	r3, [r7, #64]	; 0x40
 800498c:	2301      	movs	r3, #1
 800498e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004992:	f383 8810 	msr	PRIMASK, r3
}
 8004996:	46c0      	nop			; (mov r8, r8)
 8004998:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	689a      	ldr	r2, [r3, #8]
 800499e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2140      	movs	r1, #64	; 0x40
 80049a4:	438a      	bics	r2, r1
 80049a6:	609a      	str	r2, [r3, #8]
 80049a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049aa:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ae:	f383 8810 	msr	PRIMASK, r3
}
 80049b2:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80049b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049b6:	228c      	movs	r2, #140	; 0x8c
 80049b8:	2120      	movs	r1, #32
 80049ba:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d118      	bne.n	80049f6 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049c4:	f3ef 8310 	mrs	r3, PRIMASK
 80049c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80049ca:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049ce:	2301      	movs	r3, #1
 80049d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	f383 8810 	msr	PRIMASK, r3
}
 80049d8:	46c0      	nop			; (mov r8, r8)
 80049da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2110      	movs	r1, #16
 80049e6:	438a      	bics	r2, r1
 80049e8:	601a      	str	r2, [r3, #0]
 80049ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049ec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	f383 8810 	msr	PRIMASK, r3
}
 80049f4:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049f8:	2200      	movs	r2, #0
 80049fa:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d108      	bne.n	8004a16 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a06:	225c      	movs	r2, #92	; 0x5c
 8004a08:	5a9a      	ldrh	r2, [r3, r2]
 8004a0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a0c:	0011      	movs	r1, r2
 8004a0e:	0018      	movs	r0, r3
 8004a10:	f7fc f980 	bl	8000d14 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004a14:	e003      	b.n	8004a1e <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8004a16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a18:	0018      	movs	r0, r3
 8004a1a:	f7ff f9c9 	bl	8003db0 <HAL_UART_RxCpltCallback>
}
 8004a1e:	46c0      	nop			; (mov r8, r8)
 8004a20:	46bd      	mov	sp, r7
 8004a22:	b014      	add	sp, #80	; 0x50
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	46c0      	nop			; (mov r8, r8)
 8004a28:	fffffeff 	.word	0xfffffeff

08004a2c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a38:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d10a      	bne.n	8004a5e <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	225c      	movs	r2, #92	; 0x5c
 8004a4c:	5a9b      	ldrh	r3, [r3, r2]
 8004a4e:	085b      	lsrs	r3, r3, #1
 8004a50:	b29a      	uxth	r2, r3
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	0011      	movs	r1, r2
 8004a56:	0018      	movs	r0, r3
 8004a58:	f7fc f95c 	bl	8000d14 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004a5c:	e003      	b.n	8004a66 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	0018      	movs	r0, r3
 8004a62:	f7ff f9ad 	bl	8003dc0 <HAL_UART_RxHalfCpltCallback>
}
 8004a66:	46c0      	nop			; (mov r8, r8)
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	b004      	add	sp, #16
 8004a6c:	bd80      	pop	{r7, pc}

08004a6e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004a6e:	b580      	push	{r7, lr}
 8004a70:	b086      	sub	sp, #24
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a7a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	2288      	movs	r2, #136	; 0x88
 8004a80:	589b      	ldr	r3, [r3, r2]
 8004a82:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	228c      	movs	r2, #140	; 0x8c
 8004a88:	589b      	ldr	r3, [r3, r2]
 8004a8a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	2280      	movs	r2, #128	; 0x80
 8004a94:	4013      	ands	r3, r2
 8004a96:	2b80      	cmp	r3, #128	; 0x80
 8004a98:	d10a      	bne.n	8004ab0 <UART_DMAError+0x42>
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	2b21      	cmp	r3, #33	; 0x21
 8004a9e:	d107      	bne.n	8004ab0 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	2256      	movs	r2, #86	; 0x56
 8004aa4:	2100      	movs	r1, #0
 8004aa6:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	0018      	movs	r0, r3
 8004aac:	f7ff fe80 	bl	80047b0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	2240      	movs	r2, #64	; 0x40
 8004ab8:	4013      	ands	r3, r2
 8004aba:	2b40      	cmp	r3, #64	; 0x40
 8004abc:	d10a      	bne.n	8004ad4 <UART_DMAError+0x66>
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2b22      	cmp	r3, #34	; 0x22
 8004ac2:	d107      	bne.n	8004ad4 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	225e      	movs	r2, #94	; 0x5e
 8004ac8:	2100      	movs	r1, #0
 8004aca:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	0018      	movs	r0, r3
 8004ad0:	f7ff feae 	bl	8004830 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	2290      	movs	r2, #144	; 0x90
 8004ad8:	589b      	ldr	r3, [r3, r2]
 8004ada:	2210      	movs	r2, #16
 8004adc:	431a      	orrs	r2, r3
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	2190      	movs	r1, #144	; 0x90
 8004ae2:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	0018      	movs	r0, r3
 8004ae8:	f7ff f972 	bl	8003dd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004aec:	46c0      	nop			; (mov r8, r8)
 8004aee:	46bd      	mov	sp, r7
 8004af0:	b006      	add	sp, #24
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b00:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	225e      	movs	r2, #94	; 0x5e
 8004b06:	2100      	movs	r1, #0
 8004b08:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2256      	movs	r2, #86	; 0x56
 8004b0e:	2100      	movs	r1, #0
 8004b10:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	0018      	movs	r0, r3
 8004b16:	f7ff f95b 	bl	8003dd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b1a:	46c0      	nop			; (mov r8, r8)
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	b004      	add	sp, #16
 8004b20:	bd80      	pop	{r7, pc}

08004b22 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b22:	b580      	push	{r7, lr}
 8004b24:	b086      	sub	sp, #24
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b2a:	f3ef 8310 	mrs	r3, PRIMASK
 8004b2e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b30:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004b32:	617b      	str	r3, [r7, #20]
 8004b34:	2301      	movs	r3, #1
 8004b36:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f383 8810 	msr	PRIMASK, r3
}
 8004b3e:	46c0      	nop			; (mov r8, r8)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	2140      	movs	r1, #64	; 0x40
 8004b4c:	438a      	bics	r2, r1
 8004b4e:	601a      	str	r2, [r3, #0]
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	f383 8810 	msr	PRIMASK, r3
}
 8004b5a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2288      	movs	r2, #136	; 0x88
 8004b60:	2120      	movs	r1, #32
 8004b62:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	0018      	movs	r0, r3
 8004b6e:	f7ff f917 	bl	8003da0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b72:	46c0      	nop			; (mov r8, r8)
 8004b74:	46bd      	mov	sp, r7
 8004b76:	b006      	add	sp, #24
 8004b78:	bd80      	pop	{r7, pc}

08004b7a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004b7a:	b580      	push	{r7, lr}
 8004b7c:	b082      	sub	sp, #8
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004b82:	46c0      	nop			; (mov r8, r8)
 8004b84:	46bd      	mov	sp, r7
 8004b86:	b002      	add	sp, #8
 8004b88:	bd80      	pop	{r7, pc}

08004b8a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004b8a:	b580      	push	{r7, lr}
 8004b8c:	b082      	sub	sp, #8
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004b92:	46c0      	nop			; (mov r8, r8)
 8004b94:	46bd      	mov	sp, r7
 8004b96:	b002      	add	sp, #8
 8004b98:	bd80      	pop	{r7, pc}

08004b9a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004b9a:	b580      	push	{r7, lr}
 8004b9c:	b082      	sub	sp, #8
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004ba2:	46c0      	nop			; (mov r8, r8)
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	b002      	add	sp, #8
 8004ba8:	bd80      	pop	{r7, pc}
	...

08004bac <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b084      	sub	sp, #16
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2284      	movs	r2, #132	; 0x84
 8004bb8:	5c9b      	ldrb	r3, [r3, r2]
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d101      	bne.n	8004bc2 <HAL_UARTEx_DisableFifoMode+0x16>
 8004bbe:	2302      	movs	r3, #2
 8004bc0:	e027      	b.n	8004c12 <HAL_UARTEx_DisableFifoMode+0x66>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2284      	movs	r2, #132	; 0x84
 8004bc6:	2101      	movs	r1, #1
 8004bc8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2288      	movs	r2, #136	; 0x88
 8004bce:	2124      	movs	r1, #36	; 0x24
 8004bd0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2101      	movs	r1, #1
 8004be6:	438a      	bics	r2, r1
 8004be8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	4a0b      	ldr	r2, [pc, #44]	; (8004c1c <HAL_UARTEx_DisableFifoMode+0x70>)
 8004bee:	4013      	ands	r3, r2
 8004bf0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68fa      	ldr	r2, [r7, #12]
 8004bfe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2288      	movs	r2, #136	; 0x88
 8004c04:	2120      	movs	r1, #32
 8004c06:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2284      	movs	r2, #132	; 0x84
 8004c0c:	2100      	movs	r1, #0
 8004c0e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	0018      	movs	r0, r3
 8004c14:	46bd      	mov	sp, r7
 8004c16:	b004      	add	sp, #16
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	46c0      	nop			; (mov r8, r8)
 8004c1c:	dfffffff 	.word	0xdfffffff

08004c20 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2284      	movs	r2, #132	; 0x84
 8004c2e:	5c9b      	ldrb	r3, [r3, r2]
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d101      	bne.n	8004c38 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004c34:	2302      	movs	r3, #2
 8004c36:	e02e      	b.n	8004c96 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2284      	movs	r2, #132	; 0x84
 8004c3c:	2101      	movs	r1, #1
 8004c3e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2288      	movs	r2, #136	; 0x88
 8004c44:	2124      	movs	r1, #36	; 0x24
 8004c46:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	2101      	movs	r1, #1
 8004c5c:	438a      	bics	r2, r1
 8004c5e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	00db      	lsls	r3, r3, #3
 8004c68:	08d9      	lsrs	r1, r3, #3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	683a      	ldr	r2, [r7, #0]
 8004c70:	430a      	orrs	r2, r1
 8004c72:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	0018      	movs	r0, r3
 8004c78:	f000 f8bc 	bl	8004df4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68fa      	ldr	r2, [r7, #12]
 8004c82:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2288      	movs	r2, #136	; 0x88
 8004c88:	2120      	movs	r1, #32
 8004c8a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2284      	movs	r2, #132	; 0x84
 8004c90:	2100      	movs	r1, #0
 8004c92:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	0018      	movs	r0, r3
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	b004      	add	sp, #16
 8004c9c:	bd80      	pop	{r7, pc}
	...

08004ca0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2284      	movs	r2, #132	; 0x84
 8004cae:	5c9b      	ldrb	r3, [r3, r2]
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d101      	bne.n	8004cb8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004cb4:	2302      	movs	r3, #2
 8004cb6:	e02f      	b.n	8004d18 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2284      	movs	r2, #132	; 0x84
 8004cbc:	2101      	movs	r1, #1
 8004cbe:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2288      	movs	r2, #136	; 0x88
 8004cc4:	2124      	movs	r1, #36	; 0x24
 8004cc6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2101      	movs	r1, #1
 8004cdc:	438a      	bics	r2, r1
 8004cde:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	4a0e      	ldr	r2, [pc, #56]	; (8004d20 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004ce8:	4013      	ands	r3, r2
 8004cea:	0019      	movs	r1, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	683a      	ldr	r2, [r7, #0]
 8004cf2:	430a      	orrs	r2, r1
 8004cf4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	0018      	movs	r0, r3
 8004cfa:	f000 f87b 	bl	8004df4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68fa      	ldr	r2, [r7, #12]
 8004d04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2288      	movs	r2, #136	; 0x88
 8004d0a:	2120      	movs	r1, #32
 8004d0c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2284      	movs	r2, #132	; 0x84
 8004d12:	2100      	movs	r1, #0
 8004d14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d16:	2300      	movs	r3, #0
}
 8004d18:	0018      	movs	r0, r3
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	b004      	add	sp, #16
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	f1ffffff 	.word	0xf1ffffff

08004d24 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d24:	b5b0      	push	{r4, r5, r7, lr}
 8004d26:	b08a      	sub	sp, #40	; 0x28
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	1dbb      	adds	r3, r7, #6
 8004d30:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	228c      	movs	r2, #140	; 0x8c
 8004d36:	589b      	ldr	r3, [r3, r2]
 8004d38:	2b20      	cmp	r3, #32
 8004d3a:	d156      	bne.n	8004dea <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d003      	beq.n	8004d4a <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004d42:	1dbb      	adds	r3, r7, #6
 8004d44:	881b      	ldrh	r3, [r3, #0]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d101      	bne.n	8004d4e <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e04e      	b.n	8004dec <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	689a      	ldr	r2, [r3, #8]
 8004d52:	2380      	movs	r3, #128	; 0x80
 8004d54:	015b      	lsls	r3, r3, #5
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d109      	bne.n	8004d6e <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d105      	bne.n	8004d6e <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	2201      	movs	r2, #1
 8004d66:	4013      	ands	r3, r2
 8004d68:	d001      	beq.n	8004d6e <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e03e      	b.n	8004dec <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2201      	movs	r2, #1
 8004d72:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2200      	movs	r2, #0
 8004d78:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004d7a:	2527      	movs	r5, #39	; 0x27
 8004d7c:	197c      	adds	r4, r7, r5
 8004d7e:	1dbb      	adds	r3, r7, #6
 8004d80:	881a      	ldrh	r2, [r3, #0]
 8004d82:	68b9      	ldr	r1, [r7, #8]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	0018      	movs	r0, r3
 8004d88:	f7ff fc6c 	bl	8004664 <UART_Start_Receive_DMA>
 8004d8c:	0003      	movs	r3, r0
 8004d8e:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004d90:	197b      	adds	r3, r7, r5
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d124      	bne.n	8004de2 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d11c      	bne.n	8004dda <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	2210      	movs	r2, #16
 8004da6:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004da8:	f3ef 8310 	mrs	r3, PRIMASK
 8004dac:	617b      	str	r3, [r7, #20]
  return(result);
 8004dae:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004db0:	623b      	str	r3, [r7, #32]
 8004db2:	2301      	movs	r3, #1
 8004db4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	f383 8810 	msr	PRIMASK, r3
}
 8004dbc:	46c0      	nop			; (mov r8, r8)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	2110      	movs	r1, #16
 8004dca:	430a      	orrs	r2, r1
 8004dcc:	601a      	str	r2, [r3, #0]
 8004dce:	6a3b      	ldr	r3, [r7, #32]
 8004dd0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	f383 8810 	msr	PRIMASK, r3
}
 8004dd8:	e003      	b.n	8004de2 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004dda:	2327      	movs	r3, #39	; 0x27
 8004ddc:	18fb      	adds	r3, r7, r3
 8004dde:	2201      	movs	r2, #1
 8004de0:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 8004de2:	2327      	movs	r3, #39	; 0x27
 8004de4:	18fb      	adds	r3, r7, r3
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	e000      	b.n	8004dec <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 8004dea:	2302      	movs	r3, #2
  }
}
 8004dec:	0018      	movs	r0, r3
 8004dee:	46bd      	mov	sp, r7
 8004df0:	b00a      	add	sp, #40	; 0x28
 8004df2:	bdb0      	pop	{r4, r5, r7, pc}

08004df4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004df4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004df6:	b085      	sub	sp, #20
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d108      	bne.n	8004e16 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	226a      	movs	r2, #106	; 0x6a
 8004e08:	2101      	movs	r1, #1
 8004e0a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2268      	movs	r2, #104	; 0x68
 8004e10:	2101      	movs	r1, #1
 8004e12:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004e14:	e043      	b.n	8004e9e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004e16:	260f      	movs	r6, #15
 8004e18:	19bb      	adds	r3, r7, r6
 8004e1a:	2208      	movs	r2, #8
 8004e1c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004e1e:	200e      	movs	r0, #14
 8004e20:	183b      	adds	r3, r7, r0
 8004e22:	2208      	movs	r2, #8
 8004e24:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	0e5b      	lsrs	r3, r3, #25
 8004e2e:	b2da      	uxtb	r2, r3
 8004e30:	240d      	movs	r4, #13
 8004e32:	193b      	adds	r3, r7, r4
 8004e34:	2107      	movs	r1, #7
 8004e36:	400a      	ands	r2, r1
 8004e38:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	0f5b      	lsrs	r3, r3, #29
 8004e42:	b2da      	uxtb	r2, r3
 8004e44:	250c      	movs	r5, #12
 8004e46:	197b      	adds	r3, r7, r5
 8004e48:	2107      	movs	r1, #7
 8004e4a:	400a      	ands	r2, r1
 8004e4c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004e4e:	183b      	adds	r3, r7, r0
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	197a      	adds	r2, r7, r5
 8004e54:	7812      	ldrb	r2, [r2, #0]
 8004e56:	4914      	ldr	r1, [pc, #80]	; (8004ea8 <UARTEx_SetNbDataToProcess+0xb4>)
 8004e58:	5c8a      	ldrb	r2, [r1, r2]
 8004e5a:	435a      	muls	r2, r3
 8004e5c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004e5e:	197b      	adds	r3, r7, r5
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	4a12      	ldr	r2, [pc, #72]	; (8004eac <UARTEx_SetNbDataToProcess+0xb8>)
 8004e64:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004e66:	0019      	movs	r1, r3
 8004e68:	f7fb f9e8 	bl	800023c <__divsi3>
 8004e6c:	0003      	movs	r3, r0
 8004e6e:	b299      	uxth	r1, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	226a      	movs	r2, #106	; 0x6a
 8004e74:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004e76:	19bb      	adds	r3, r7, r6
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	193a      	adds	r2, r7, r4
 8004e7c:	7812      	ldrb	r2, [r2, #0]
 8004e7e:	490a      	ldr	r1, [pc, #40]	; (8004ea8 <UARTEx_SetNbDataToProcess+0xb4>)
 8004e80:	5c8a      	ldrb	r2, [r1, r2]
 8004e82:	435a      	muls	r2, r3
 8004e84:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004e86:	193b      	adds	r3, r7, r4
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	4a08      	ldr	r2, [pc, #32]	; (8004eac <UARTEx_SetNbDataToProcess+0xb8>)
 8004e8c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004e8e:	0019      	movs	r1, r3
 8004e90:	f7fb f9d4 	bl	800023c <__divsi3>
 8004e94:	0003      	movs	r3, r0
 8004e96:	b299      	uxth	r1, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2268      	movs	r2, #104	; 0x68
 8004e9c:	5299      	strh	r1, [r3, r2]
}
 8004e9e:	46c0      	nop			; (mov r8, r8)
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	b005      	add	sp, #20
 8004ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ea6:	46c0      	nop			; (mov r8, r8)
 8004ea8:	08006750 	.word	0x08006750
 8004eac:	08006758 	.word	0x08006758

08004eb0 <__errno>:
 8004eb0:	4b01      	ldr	r3, [pc, #4]	; (8004eb8 <__errno+0x8>)
 8004eb2:	6818      	ldr	r0, [r3, #0]
 8004eb4:	4770      	bx	lr
 8004eb6:	46c0      	nop			; (mov r8, r8)
 8004eb8:	20000070 	.word	0x20000070

08004ebc <__libc_init_array>:
 8004ebc:	b570      	push	{r4, r5, r6, lr}
 8004ebe:	2600      	movs	r6, #0
 8004ec0:	4d0c      	ldr	r5, [pc, #48]	; (8004ef4 <__libc_init_array+0x38>)
 8004ec2:	4c0d      	ldr	r4, [pc, #52]	; (8004ef8 <__libc_init_array+0x3c>)
 8004ec4:	1b64      	subs	r4, r4, r5
 8004ec6:	10a4      	asrs	r4, r4, #2
 8004ec8:	42a6      	cmp	r6, r4
 8004eca:	d109      	bne.n	8004ee0 <__libc_init_array+0x24>
 8004ecc:	2600      	movs	r6, #0
 8004ece:	f001 fb65 	bl	800659c <_init>
 8004ed2:	4d0a      	ldr	r5, [pc, #40]	; (8004efc <__libc_init_array+0x40>)
 8004ed4:	4c0a      	ldr	r4, [pc, #40]	; (8004f00 <__libc_init_array+0x44>)
 8004ed6:	1b64      	subs	r4, r4, r5
 8004ed8:	10a4      	asrs	r4, r4, #2
 8004eda:	42a6      	cmp	r6, r4
 8004edc:	d105      	bne.n	8004eea <__libc_init_array+0x2e>
 8004ede:	bd70      	pop	{r4, r5, r6, pc}
 8004ee0:	00b3      	lsls	r3, r6, #2
 8004ee2:	58eb      	ldr	r3, [r5, r3]
 8004ee4:	4798      	blx	r3
 8004ee6:	3601      	adds	r6, #1
 8004ee8:	e7ee      	b.n	8004ec8 <__libc_init_array+0xc>
 8004eea:	00b3      	lsls	r3, r6, #2
 8004eec:	58eb      	ldr	r3, [r5, r3]
 8004eee:	4798      	blx	r3
 8004ef0:	3601      	adds	r6, #1
 8004ef2:	e7f2      	b.n	8004eda <__libc_init_array+0x1e>
 8004ef4:	080069b0 	.word	0x080069b0
 8004ef8:	080069b0 	.word	0x080069b0
 8004efc:	080069b0 	.word	0x080069b0
 8004f00:	080069b4 	.word	0x080069b4

08004f04 <malloc>:
 8004f04:	b510      	push	{r4, lr}
 8004f06:	4b03      	ldr	r3, [pc, #12]	; (8004f14 <malloc+0x10>)
 8004f08:	0001      	movs	r1, r0
 8004f0a:	6818      	ldr	r0, [r3, #0]
 8004f0c:	f000 f882 	bl	8005014 <_malloc_r>
 8004f10:	bd10      	pop	{r4, pc}
 8004f12:	46c0      	nop			; (mov r8, r8)
 8004f14:	20000070 	.word	0x20000070

08004f18 <free>:
 8004f18:	b510      	push	{r4, lr}
 8004f1a:	4b03      	ldr	r3, [pc, #12]	; (8004f28 <free+0x10>)
 8004f1c:	0001      	movs	r1, r0
 8004f1e:	6818      	ldr	r0, [r3, #0]
 8004f20:	f000 f80c 	bl	8004f3c <_free_r>
 8004f24:	bd10      	pop	{r4, pc}
 8004f26:	46c0      	nop			; (mov r8, r8)
 8004f28:	20000070 	.word	0x20000070

08004f2c <memset>:
 8004f2c:	0003      	movs	r3, r0
 8004f2e:	1882      	adds	r2, r0, r2
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d100      	bne.n	8004f36 <memset+0xa>
 8004f34:	4770      	bx	lr
 8004f36:	7019      	strb	r1, [r3, #0]
 8004f38:	3301      	adds	r3, #1
 8004f3a:	e7f9      	b.n	8004f30 <memset+0x4>

08004f3c <_free_r>:
 8004f3c:	b570      	push	{r4, r5, r6, lr}
 8004f3e:	0005      	movs	r5, r0
 8004f40:	2900      	cmp	r1, #0
 8004f42:	d010      	beq.n	8004f66 <_free_r+0x2a>
 8004f44:	1f0c      	subs	r4, r1, #4
 8004f46:	6823      	ldr	r3, [r4, #0]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	da00      	bge.n	8004f4e <_free_r+0x12>
 8004f4c:	18e4      	adds	r4, r4, r3
 8004f4e:	0028      	movs	r0, r5
 8004f50:	f000 fa54 	bl	80053fc <__malloc_lock>
 8004f54:	4a1d      	ldr	r2, [pc, #116]	; (8004fcc <_free_r+0x90>)
 8004f56:	6813      	ldr	r3, [r2, #0]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d105      	bne.n	8004f68 <_free_r+0x2c>
 8004f5c:	6063      	str	r3, [r4, #4]
 8004f5e:	6014      	str	r4, [r2, #0]
 8004f60:	0028      	movs	r0, r5
 8004f62:	f000 fa53 	bl	800540c <__malloc_unlock>
 8004f66:	bd70      	pop	{r4, r5, r6, pc}
 8004f68:	42a3      	cmp	r3, r4
 8004f6a:	d908      	bls.n	8004f7e <_free_r+0x42>
 8004f6c:	6821      	ldr	r1, [r4, #0]
 8004f6e:	1860      	adds	r0, r4, r1
 8004f70:	4283      	cmp	r3, r0
 8004f72:	d1f3      	bne.n	8004f5c <_free_r+0x20>
 8004f74:	6818      	ldr	r0, [r3, #0]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	1841      	adds	r1, r0, r1
 8004f7a:	6021      	str	r1, [r4, #0]
 8004f7c:	e7ee      	b.n	8004f5c <_free_r+0x20>
 8004f7e:	001a      	movs	r2, r3
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d001      	beq.n	8004f8a <_free_r+0x4e>
 8004f86:	42a3      	cmp	r3, r4
 8004f88:	d9f9      	bls.n	8004f7e <_free_r+0x42>
 8004f8a:	6811      	ldr	r1, [r2, #0]
 8004f8c:	1850      	adds	r0, r2, r1
 8004f8e:	42a0      	cmp	r0, r4
 8004f90:	d10b      	bne.n	8004faa <_free_r+0x6e>
 8004f92:	6820      	ldr	r0, [r4, #0]
 8004f94:	1809      	adds	r1, r1, r0
 8004f96:	1850      	adds	r0, r2, r1
 8004f98:	6011      	str	r1, [r2, #0]
 8004f9a:	4283      	cmp	r3, r0
 8004f9c:	d1e0      	bne.n	8004f60 <_free_r+0x24>
 8004f9e:	6818      	ldr	r0, [r3, #0]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	1841      	adds	r1, r0, r1
 8004fa4:	6011      	str	r1, [r2, #0]
 8004fa6:	6053      	str	r3, [r2, #4]
 8004fa8:	e7da      	b.n	8004f60 <_free_r+0x24>
 8004faa:	42a0      	cmp	r0, r4
 8004fac:	d902      	bls.n	8004fb4 <_free_r+0x78>
 8004fae:	230c      	movs	r3, #12
 8004fb0:	602b      	str	r3, [r5, #0]
 8004fb2:	e7d5      	b.n	8004f60 <_free_r+0x24>
 8004fb4:	6821      	ldr	r1, [r4, #0]
 8004fb6:	1860      	adds	r0, r4, r1
 8004fb8:	4283      	cmp	r3, r0
 8004fba:	d103      	bne.n	8004fc4 <_free_r+0x88>
 8004fbc:	6818      	ldr	r0, [r3, #0]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	1841      	adds	r1, r0, r1
 8004fc2:	6021      	str	r1, [r4, #0]
 8004fc4:	6063      	str	r3, [r4, #4]
 8004fc6:	6054      	str	r4, [r2, #4]
 8004fc8:	e7ca      	b.n	8004f60 <_free_r+0x24>
 8004fca:	46c0      	nop			; (mov r8, r8)
 8004fcc:	200003c4 	.word	0x200003c4

08004fd0 <sbrk_aligned>:
 8004fd0:	b570      	push	{r4, r5, r6, lr}
 8004fd2:	4e0f      	ldr	r6, [pc, #60]	; (8005010 <sbrk_aligned+0x40>)
 8004fd4:	000d      	movs	r5, r1
 8004fd6:	6831      	ldr	r1, [r6, #0]
 8004fd8:	0004      	movs	r4, r0
 8004fda:	2900      	cmp	r1, #0
 8004fdc:	d102      	bne.n	8004fe4 <sbrk_aligned+0x14>
 8004fde:	f000 f88f 	bl	8005100 <_sbrk_r>
 8004fe2:	6030      	str	r0, [r6, #0]
 8004fe4:	0029      	movs	r1, r5
 8004fe6:	0020      	movs	r0, r4
 8004fe8:	f000 f88a 	bl	8005100 <_sbrk_r>
 8004fec:	1c43      	adds	r3, r0, #1
 8004fee:	d00a      	beq.n	8005006 <sbrk_aligned+0x36>
 8004ff0:	2303      	movs	r3, #3
 8004ff2:	1cc5      	adds	r5, r0, #3
 8004ff4:	439d      	bics	r5, r3
 8004ff6:	42a8      	cmp	r0, r5
 8004ff8:	d007      	beq.n	800500a <sbrk_aligned+0x3a>
 8004ffa:	1a29      	subs	r1, r5, r0
 8004ffc:	0020      	movs	r0, r4
 8004ffe:	f000 f87f 	bl	8005100 <_sbrk_r>
 8005002:	1c43      	adds	r3, r0, #1
 8005004:	d101      	bne.n	800500a <sbrk_aligned+0x3a>
 8005006:	2501      	movs	r5, #1
 8005008:	426d      	negs	r5, r5
 800500a:	0028      	movs	r0, r5
 800500c:	bd70      	pop	{r4, r5, r6, pc}
 800500e:	46c0      	nop			; (mov r8, r8)
 8005010:	200003c8 	.word	0x200003c8

08005014 <_malloc_r>:
 8005014:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005016:	2203      	movs	r2, #3
 8005018:	1ccb      	adds	r3, r1, #3
 800501a:	4393      	bics	r3, r2
 800501c:	3308      	adds	r3, #8
 800501e:	0006      	movs	r6, r0
 8005020:	001f      	movs	r7, r3
 8005022:	2b0c      	cmp	r3, #12
 8005024:	d232      	bcs.n	800508c <_malloc_r+0x78>
 8005026:	270c      	movs	r7, #12
 8005028:	42b9      	cmp	r1, r7
 800502a:	d831      	bhi.n	8005090 <_malloc_r+0x7c>
 800502c:	0030      	movs	r0, r6
 800502e:	f000 f9e5 	bl	80053fc <__malloc_lock>
 8005032:	4d32      	ldr	r5, [pc, #200]	; (80050fc <_malloc_r+0xe8>)
 8005034:	682b      	ldr	r3, [r5, #0]
 8005036:	001c      	movs	r4, r3
 8005038:	2c00      	cmp	r4, #0
 800503a:	d12e      	bne.n	800509a <_malloc_r+0x86>
 800503c:	0039      	movs	r1, r7
 800503e:	0030      	movs	r0, r6
 8005040:	f7ff ffc6 	bl	8004fd0 <sbrk_aligned>
 8005044:	0004      	movs	r4, r0
 8005046:	1c43      	adds	r3, r0, #1
 8005048:	d11e      	bne.n	8005088 <_malloc_r+0x74>
 800504a:	682c      	ldr	r4, [r5, #0]
 800504c:	0025      	movs	r5, r4
 800504e:	2d00      	cmp	r5, #0
 8005050:	d14a      	bne.n	80050e8 <_malloc_r+0xd4>
 8005052:	6823      	ldr	r3, [r4, #0]
 8005054:	0029      	movs	r1, r5
 8005056:	18e3      	adds	r3, r4, r3
 8005058:	0030      	movs	r0, r6
 800505a:	9301      	str	r3, [sp, #4]
 800505c:	f000 f850 	bl	8005100 <_sbrk_r>
 8005060:	9b01      	ldr	r3, [sp, #4]
 8005062:	4283      	cmp	r3, r0
 8005064:	d143      	bne.n	80050ee <_malloc_r+0xda>
 8005066:	6823      	ldr	r3, [r4, #0]
 8005068:	3703      	adds	r7, #3
 800506a:	1aff      	subs	r7, r7, r3
 800506c:	2303      	movs	r3, #3
 800506e:	439f      	bics	r7, r3
 8005070:	3708      	adds	r7, #8
 8005072:	2f0c      	cmp	r7, #12
 8005074:	d200      	bcs.n	8005078 <_malloc_r+0x64>
 8005076:	270c      	movs	r7, #12
 8005078:	0039      	movs	r1, r7
 800507a:	0030      	movs	r0, r6
 800507c:	f7ff ffa8 	bl	8004fd0 <sbrk_aligned>
 8005080:	1c43      	adds	r3, r0, #1
 8005082:	d034      	beq.n	80050ee <_malloc_r+0xda>
 8005084:	6823      	ldr	r3, [r4, #0]
 8005086:	19df      	adds	r7, r3, r7
 8005088:	6027      	str	r7, [r4, #0]
 800508a:	e013      	b.n	80050b4 <_malloc_r+0xa0>
 800508c:	2b00      	cmp	r3, #0
 800508e:	dacb      	bge.n	8005028 <_malloc_r+0x14>
 8005090:	230c      	movs	r3, #12
 8005092:	2500      	movs	r5, #0
 8005094:	6033      	str	r3, [r6, #0]
 8005096:	0028      	movs	r0, r5
 8005098:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800509a:	6822      	ldr	r2, [r4, #0]
 800509c:	1bd1      	subs	r1, r2, r7
 800509e:	d420      	bmi.n	80050e2 <_malloc_r+0xce>
 80050a0:	290b      	cmp	r1, #11
 80050a2:	d917      	bls.n	80050d4 <_malloc_r+0xc0>
 80050a4:	19e2      	adds	r2, r4, r7
 80050a6:	6027      	str	r7, [r4, #0]
 80050a8:	42a3      	cmp	r3, r4
 80050aa:	d111      	bne.n	80050d0 <_malloc_r+0xbc>
 80050ac:	602a      	str	r2, [r5, #0]
 80050ae:	6863      	ldr	r3, [r4, #4]
 80050b0:	6011      	str	r1, [r2, #0]
 80050b2:	6053      	str	r3, [r2, #4]
 80050b4:	0030      	movs	r0, r6
 80050b6:	0025      	movs	r5, r4
 80050b8:	f000 f9a8 	bl	800540c <__malloc_unlock>
 80050bc:	2207      	movs	r2, #7
 80050be:	350b      	adds	r5, #11
 80050c0:	1d23      	adds	r3, r4, #4
 80050c2:	4395      	bics	r5, r2
 80050c4:	1aea      	subs	r2, r5, r3
 80050c6:	429d      	cmp	r5, r3
 80050c8:	d0e5      	beq.n	8005096 <_malloc_r+0x82>
 80050ca:	1b5b      	subs	r3, r3, r5
 80050cc:	50a3      	str	r3, [r4, r2]
 80050ce:	e7e2      	b.n	8005096 <_malloc_r+0x82>
 80050d0:	605a      	str	r2, [r3, #4]
 80050d2:	e7ec      	b.n	80050ae <_malloc_r+0x9a>
 80050d4:	6862      	ldr	r2, [r4, #4]
 80050d6:	42a3      	cmp	r3, r4
 80050d8:	d101      	bne.n	80050de <_malloc_r+0xca>
 80050da:	602a      	str	r2, [r5, #0]
 80050dc:	e7ea      	b.n	80050b4 <_malloc_r+0xa0>
 80050de:	605a      	str	r2, [r3, #4]
 80050e0:	e7e8      	b.n	80050b4 <_malloc_r+0xa0>
 80050e2:	0023      	movs	r3, r4
 80050e4:	6864      	ldr	r4, [r4, #4]
 80050e6:	e7a7      	b.n	8005038 <_malloc_r+0x24>
 80050e8:	002c      	movs	r4, r5
 80050ea:	686d      	ldr	r5, [r5, #4]
 80050ec:	e7af      	b.n	800504e <_malloc_r+0x3a>
 80050ee:	230c      	movs	r3, #12
 80050f0:	0030      	movs	r0, r6
 80050f2:	6033      	str	r3, [r6, #0]
 80050f4:	f000 f98a 	bl	800540c <__malloc_unlock>
 80050f8:	e7cd      	b.n	8005096 <_malloc_r+0x82>
 80050fa:	46c0      	nop			; (mov r8, r8)
 80050fc:	200003c4 	.word	0x200003c4

08005100 <_sbrk_r>:
 8005100:	2300      	movs	r3, #0
 8005102:	b570      	push	{r4, r5, r6, lr}
 8005104:	4d06      	ldr	r5, [pc, #24]	; (8005120 <_sbrk_r+0x20>)
 8005106:	0004      	movs	r4, r0
 8005108:	0008      	movs	r0, r1
 800510a:	602b      	str	r3, [r5, #0]
 800510c:	f7fc f84e 	bl	80011ac <_sbrk>
 8005110:	1c43      	adds	r3, r0, #1
 8005112:	d103      	bne.n	800511c <_sbrk_r+0x1c>
 8005114:	682b      	ldr	r3, [r5, #0]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d000      	beq.n	800511c <_sbrk_r+0x1c>
 800511a:	6023      	str	r3, [r4, #0]
 800511c:	bd70      	pop	{r4, r5, r6, pc}
 800511e:	46c0      	nop			; (mov r8, r8)
 8005120:	200003cc 	.word	0x200003cc

08005124 <siprintf>:
 8005124:	b40e      	push	{r1, r2, r3}
 8005126:	b500      	push	{lr}
 8005128:	490b      	ldr	r1, [pc, #44]	; (8005158 <siprintf+0x34>)
 800512a:	b09c      	sub	sp, #112	; 0x70
 800512c:	ab1d      	add	r3, sp, #116	; 0x74
 800512e:	9002      	str	r0, [sp, #8]
 8005130:	9006      	str	r0, [sp, #24]
 8005132:	9107      	str	r1, [sp, #28]
 8005134:	9104      	str	r1, [sp, #16]
 8005136:	4809      	ldr	r0, [pc, #36]	; (800515c <siprintf+0x38>)
 8005138:	4909      	ldr	r1, [pc, #36]	; (8005160 <siprintf+0x3c>)
 800513a:	cb04      	ldmia	r3!, {r2}
 800513c:	9105      	str	r1, [sp, #20]
 800513e:	6800      	ldr	r0, [r0, #0]
 8005140:	a902      	add	r1, sp, #8
 8005142:	9301      	str	r3, [sp, #4]
 8005144:	f000 f9cc 	bl	80054e0 <_svfiprintf_r>
 8005148:	2300      	movs	r3, #0
 800514a:	9a02      	ldr	r2, [sp, #8]
 800514c:	7013      	strb	r3, [r2, #0]
 800514e:	b01c      	add	sp, #112	; 0x70
 8005150:	bc08      	pop	{r3}
 8005152:	b003      	add	sp, #12
 8005154:	4718      	bx	r3
 8005156:	46c0      	nop			; (mov r8, r8)
 8005158:	7fffffff 	.word	0x7fffffff
 800515c:	20000070 	.word	0x20000070
 8005160:	ffff0208 	.word	0xffff0208

08005164 <strcat>:
 8005164:	0002      	movs	r2, r0
 8005166:	b510      	push	{r4, lr}
 8005168:	7813      	ldrb	r3, [r2, #0]
 800516a:	0014      	movs	r4, r2
 800516c:	3201      	adds	r2, #1
 800516e:	2b00      	cmp	r3, #0
 8005170:	d1fa      	bne.n	8005168 <strcat+0x4>
 8005172:	5cca      	ldrb	r2, [r1, r3]
 8005174:	54e2      	strb	r2, [r4, r3]
 8005176:	3301      	adds	r3, #1
 8005178:	2a00      	cmp	r2, #0
 800517a:	d1fa      	bne.n	8005172 <strcat+0xe>
 800517c:	bd10      	pop	{r4, pc}

0800517e <strncmp>:
 800517e:	b530      	push	{r4, r5, lr}
 8005180:	0005      	movs	r5, r0
 8005182:	1e10      	subs	r0, r2, #0
 8005184:	d008      	beq.n	8005198 <strncmp+0x1a>
 8005186:	2400      	movs	r4, #0
 8005188:	3a01      	subs	r2, #1
 800518a:	5d2b      	ldrb	r3, [r5, r4]
 800518c:	5d08      	ldrb	r0, [r1, r4]
 800518e:	4283      	cmp	r3, r0
 8005190:	d101      	bne.n	8005196 <strncmp+0x18>
 8005192:	4294      	cmp	r4, r2
 8005194:	d101      	bne.n	800519a <strncmp+0x1c>
 8005196:	1a18      	subs	r0, r3, r0
 8005198:	bd30      	pop	{r4, r5, pc}
 800519a:	3401      	adds	r4, #1
 800519c:	2b00      	cmp	r3, #0
 800519e:	d1f4      	bne.n	800518a <strncmp+0xc>
 80051a0:	e7f9      	b.n	8005196 <strncmp+0x18>
	...

080051a4 <strtok>:
 80051a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051a6:	4b16      	ldr	r3, [pc, #88]	; (8005200 <strtok+0x5c>)
 80051a8:	0005      	movs	r5, r0
 80051aa:	681f      	ldr	r7, [r3, #0]
 80051ac:	000e      	movs	r6, r1
 80051ae:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 80051b0:	2c00      	cmp	r4, #0
 80051b2:	d11d      	bne.n	80051f0 <strtok+0x4c>
 80051b4:	2050      	movs	r0, #80	; 0x50
 80051b6:	f7ff fea5 	bl	8004f04 <malloc>
 80051ba:	1e02      	subs	r2, r0, #0
 80051bc:	65b8      	str	r0, [r7, #88]	; 0x58
 80051be:	d104      	bne.n	80051ca <strtok+0x26>
 80051c0:	2157      	movs	r1, #87	; 0x57
 80051c2:	4b10      	ldr	r3, [pc, #64]	; (8005204 <strtok+0x60>)
 80051c4:	4810      	ldr	r0, [pc, #64]	; (8005208 <strtok+0x64>)
 80051c6:	f000 f8eb 	bl	80053a0 <__assert_func>
 80051ca:	6004      	str	r4, [r0, #0]
 80051cc:	6044      	str	r4, [r0, #4]
 80051ce:	6084      	str	r4, [r0, #8]
 80051d0:	60c4      	str	r4, [r0, #12]
 80051d2:	6104      	str	r4, [r0, #16]
 80051d4:	6144      	str	r4, [r0, #20]
 80051d6:	6184      	str	r4, [r0, #24]
 80051d8:	6284      	str	r4, [r0, #40]	; 0x28
 80051da:	62c4      	str	r4, [r0, #44]	; 0x2c
 80051dc:	6304      	str	r4, [r0, #48]	; 0x30
 80051de:	6344      	str	r4, [r0, #52]	; 0x34
 80051e0:	6384      	str	r4, [r0, #56]	; 0x38
 80051e2:	63c4      	str	r4, [r0, #60]	; 0x3c
 80051e4:	6404      	str	r4, [r0, #64]	; 0x40
 80051e6:	6444      	str	r4, [r0, #68]	; 0x44
 80051e8:	6484      	str	r4, [r0, #72]	; 0x48
 80051ea:	64c4      	str	r4, [r0, #76]	; 0x4c
 80051ec:	7704      	strb	r4, [r0, #28]
 80051ee:	6244      	str	r4, [r0, #36]	; 0x24
 80051f0:	0031      	movs	r1, r6
 80051f2:	0028      	movs	r0, r5
 80051f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80051f6:	2301      	movs	r3, #1
 80051f8:	f000 f808 	bl	800520c <__strtok_r>
 80051fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051fe:	46c0      	nop			; (mov r8, r8)
 8005200:	20000070 	.word	0x20000070
 8005204:	08006764 	.word	0x08006764
 8005208:	0800677b 	.word	0x0800677b

0800520c <__strtok_r>:
 800520c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800520e:	2800      	cmp	r0, #0
 8005210:	d102      	bne.n	8005218 <__strtok_r+0xc>
 8005212:	6810      	ldr	r0, [r2, #0]
 8005214:	2800      	cmp	r0, #0
 8005216:	d013      	beq.n	8005240 <__strtok_r+0x34>
 8005218:	0004      	movs	r4, r0
 800521a:	0020      	movs	r0, r4
 800521c:	000e      	movs	r6, r1
 800521e:	7805      	ldrb	r5, [r0, #0]
 8005220:	3401      	adds	r4, #1
 8005222:	7837      	ldrb	r7, [r6, #0]
 8005224:	2f00      	cmp	r7, #0
 8005226:	d104      	bne.n	8005232 <__strtok_r+0x26>
 8005228:	2d00      	cmp	r5, #0
 800522a:	d10f      	bne.n	800524c <__strtok_r+0x40>
 800522c:	0028      	movs	r0, r5
 800522e:	6015      	str	r5, [r2, #0]
 8005230:	e006      	b.n	8005240 <__strtok_r+0x34>
 8005232:	3601      	adds	r6, #1
 8005234:	42bd      	cmp	r5, r7
 8005236:	d1f4      	bne.n	8005222 <__strtok_r+0x16>
 8005238:	2b00      	cmp	r3, #0
 800523a:	d1ee      	bne.n	800521a <__strtok_r+0xe>
 800523c:	6014      	str	r4, [r2, #0]
 800523e:	7003      	strb	r3, [r0, #0]
 8005240:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005242:	002f      	movs	r7, r5
 8005244:	e00f      	b.n	8005266 <__strtok_r+0x5a>
 8005246:	3301      	adds	r3, #1
 8005248:	2e00      	cmp	r6, #0
 800524a:	d104      	bne.n	8005256 <__strtok_r+0x4a>
 800524c:	0023      	movs	r3, r4
 800524e:	3401      	adds	r4, #1
 8005250:	781d      	ldrb	r5, [r3, #0]
 8005252:	0027      	movs	r7, r4
 8005254:	000b      	movs	r3, r1
 8005256:	781e      	ldrb	r6, [r3, #0]
 8005258:	42b5      	cmp	r5, r6
 800525a:	d1f4      	bne.n	8005246 <__strtok_r+0x3a>
 800525c:	2d00      	cmp	r5, #0
 800525e:	d0f0      	beq.n	8005242 <__strtok_r+0x36>
 8005260:	2300      	movs	r3, #0
 8005262:	3c01      	subs	r4, #1
 8005264:	7023      	strb	r3, [r4, #0]
 8005266:	6017      	str	r7, [r2, #0]
 8005268:	e7ea      	b.n	8005240 <__strtok_r+0x34>
	...

0800526c <_strtol_l.constprop.0>:
 800526c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800526e:	b087      	sub	sp, #28
 8005270:	001e      	movs	r6, r3
 8005272:	9005      	str	r0, [sp, #20]
 8005274:	9101      	str	r1, [sp, #4]
 8005276:	9202      	str	r2, [sp, #8]
 8005278:	2b01      	cmp	r3, #1
 800527a:	d045      	beq.n	8005308 <_strtol_l.constprop.0+0x9c>
 800527c:	000b      	movs	r3, r1
 800527e:	2e24      	cmp	r6, #36	; 0x24
 8005280:	d842      	bhi.n	8005308 <_strtol_l.constprop.0+0x9c>
 8005282:	4a3f      	ldr	r2, [pc, #252]	; (8005380 <_strtol_l.constprop.0+0x114>)
 8005284:	2108      	movs	r1, #8
 8005286:	4694      	mov	ip, r2
 8005288:	001a      	movs	r2, r3
 800528a:	4660      	mov	r0, ip
 800528c:	7814      	ldrb	r4, [r2, #0]
 800528e:	3301      	adds	r3, #1
 8005290:	5d00      	ldrb	r0, [r0, r4]
 8005292:	001d      	movs	r5, r3
 8005294:	0007      	movs	r7, r0
 8005296:	400f      	ands	r7, r1
 8005298:	4208      	tst	r0, r1
 800529a:	d1f5      	bne.n	8005288 <_strtol_l.constprop.0+0x1c>
 800529c:	2c2d      	cmp	r4, #45	; 0x2d
 800529e:	d13a      	bne.n	8005316 <_strtol_l.constprop.0+0xaa>
 80052a0:	2701      	movs	r7, #1
 80052a2:	781c      	ldrb	r4, [r3, #0]
 80052a4:	1c95      	adds	r5, r2, #2
 80052a6:	2e00      	cmp	r6, #0
 80052a8:	d065      	beq.n	8005376 <_strtol_l.constprop.0+0x10a>
 80052aa:	2e10      	cmp	r6, #16
 80052ac:	d109      	bne.n	80052c2 <_strtol_l.constprop.0+0x56>
 80052ae:	2c30      	cmp	r4, #48	; 0x30
 80052b0:	d107      	bne.n	80052c2 <_strtol_l.constprop.0+0x56>
 80052b2:	2220      	movs	r2, #32
 80052b4:	782b      	ldrb	r3, [r5, #0]
 80052b6:	4393      	bics	r3, r2
 80052b8:	2b58      	cmp	r3, #88	; 0x58
 80052ba:	d157      	bne.n	800536c <_strtol_l.constprop.0+0x100>
 80052bc:	2610      	movs	r6, #16
 80052be:	786c      	ldrb	r4, [r5, #1]
 80052c0:	3502      	adds	r5, #2
 80052c2:	4b30      	ldr	r3, [pc, #192]	; (8005384 <_strtol_l.constprop.0+0x118>)
 80052c4:	0031      	movs	r1, r6
 80052c6:	18fb      	adds	r3, r7, r3
 80052c8:	0018      	movs	r0, r3
 80052ca:	9303      	str	r3, [sp, #12]
 80052cc:	f7fa ffb2 	bl	8000234 <__aeabi_uidivmod>
 80052d0:	2300      	movs	r3, #0
 80052d2:	2201      	movs	r2, #1
 80052d4:	4684      	mov	ip, r0
 80052d6:	0018      	movs	r0, r3
 80052d8:	9104      	str	r1, [sp, #16]
 80052da:	4252      	negs	r2, r2
 80052dc:	0021      	movs	r1, r4
 80052de:	3930      	subs	r1, #48	; 0x30
 80052e0:	2909      	cmp	r1, #9
 80052e2:	d81d      	bhi.n	8005320 <_strtol_l.constprop.0+0xb4>
 80052e4:	000c      	movs	r4, r1
 80052e6:	42a6      	cmp	r6, r4
 80052e8:	dd28      	ble.n	800533c <_strtol_l.constprop.0+0xd0>
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	db24      	blt.n	8005338 <_strtol_l.constprop.0+0xcc>
 80052ee:	0013      	movs	r3, r2
 80052f0:	4584      	cmp	ip, r0
 80052f2:	d306      	bcc.n	8005302 <_strtol_l.constprop.0+0x96>
 80052f4:	d102      	bne.n	80052fc <_strtol_l.constprop.0+0x90>
 80052f6:	9904      	ldr	r1, [sp, #16]
 80052f8:	42a1      	cmp	r1, r4
 80052fa:	db02      	blt.n	8005302 <_strtol_l.constprop.0+0x96>
 80052fc:	2301      	movs	r3, #1
 80052fe:	4370      	muls	r0, r6
 8005300:	1820      	adds	r0, r4, r0
 8005302:	782c      	ldrb	r4, [r5, #0]
 8005304:	3501      	adds	r5, #1
 8005306:	e7e9      	b.n	80052dc <_strtol_l.constprop.0+0x70>
 8005308:	f7ff fdd2 	bl	8004eb0 <__errno>
 800530c:	2316      	movs	r3, #22
 800530e:	6003      	str	r3, [r0, #0]
 8005310:	2000      	movs	r0, #0
 8005312:	b007      	add	sp, #28
 8005314:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005316:	2c2b      	cmp	r4, #43	; 0x2b
 8005318:	d1c5      	bne.n	80052a6 <_strtol_l.constprop.0+0x3a>
 800531a:	781c      	ldrb	r4, [r3, #0]
 800531c:	1c95      	adds	r5, r2, #2
 800531e:	e7c2      	b.n	80052a6 <_strtol_l.constprop.0+0x3a>
 8005320:	0021      	movs	r1, r4
 8005322:	3941      	subs	r1, #65	; 0x41
 8005324:	2919      	cmp	r1, #25
 8005326:	d801      	bhi.n	800532c <_strtol_l.constprop.0+0xc0>
 8005328:	3c37      	subs	r4, #55	; 0x37
 800532a:	e7dc      	b.n	80052e6 <_strtol_l.constprop.0+0x7a>
 800532c:	0021      	movs	r1, r4
 800532e:	3961      	subs	r1, #97	; 0x61
 8005330:	2919      	cmp	r1, #25
 8005332:	d803      	bhi.n	800533c <_strtol_l.constprop.0+0xd0>
 8005334:	3c57      	subs	r4, #87	; 0x57
 8005336:	e7d6      	b.n	80052e6 <_strtol_l.constprop.0+0x7a>
 8005338:	0013      	movs	r3, r2
 800533a:	e7e2      	b.n	8005302 <_strtol_l.constprop.0+0x96>
 800533c:	2b00      	cmp	r3, #0
 800533e:	da09      	bge.n	8005354 <_strtol_l.constprop.0+0xe8>
 8005340:	2322      	movs	r3, #34	; 0x22
 8005342:	9a05      	ldr	r2, [sp, #20]
 8005344:	9803      	ldr	r0, [sp, #12]
 8005346:	6013      	str	r3, [r2, #0]
 8005348:	9b02      	ldr	r3, [sp, #8]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d0e1      	beq.n	8005312 <_strtol_l.constprop.0+0xa6>
 800534e:	1e6b      	subs	r3, r5, #1
 8005350:	9301      	str	r3, [sp, #4]
 8005352:	e007      	b.n	8005364 <_strtol_l.constprop.0+0xf8>
 8005354:	2f00      	cmp	r7, #0
 8005356:	d000      	beq.n	800535a <_strtol_l.constprop.0+0xee>
 8005358:	4240      	negs	r0, r0
 800535a:	9a02      	ldr	r2, [sp, #8]
 800535c:	2a00      	cmp	r2, #0
 800535e:	d0d8      	beq.n	8005312 <_strtol_l.constprop.0+0xa6>
 8005360:	2b00      	cmp	r3, #0
 8005362:	d1f4      	bne.n	800534e <_strtol_l.constprop.0+0xe2>
 8005364:	9b02      	ldr	r3, [sp, #8]
 8005366:	9a01      	ldr	r2, [sp, #4]
 8005368:	601a      	str	r2, [r3, #0]
 800536a:	e7d2      	b.n	8005312 <_strtol_l.constprop.0+0xa6>
 800536c:	2430      	movs	r4, #48	; 0x30
 800536e:	2e00      	cmp	r6, #0
 8005370:	d1a7      	bne.n	80052c2 <_strtol_l.constprop.0+0x56>
 8005372:	3608      	adds	r6, #8
 8005374:	e7a5      	b.n	80052c2 <_strtol_l.constprop.0+0x56>
 8005376:	2c30      	cmp	r4, #48	; 0x30
 8005378:	d09b      	beq.n	80052b2 <_strtol_l.constprop.0+0x46>
 800537a:	260a      	movs	r6, #10
 800537c:	e7a1      	b.n	80052c2 <_strtol_l.constprop.0+0x56>
 800537e:	46c0      	nop			; (mov r8, r8)
 8005380:	08006815 	.word	0x08006815
 8005384:	7fffffff 	.word	0x7fffffff

08005388 <strtol>:
 8005388:	b510      	push	{r4, lr}
 800538a:	0013      	movs	r3, r2
 800538c:	000a      	movs	r2, r1
 800538e:	0001      	movs	r1, r0
 8005390:	4802      	ldr	r0, [pc, #8]	; (800539c <strtol+0x14>)
 8005392:	6800      	ldr	r0, [r0, #0]
 8005394:	f7ff ff6a 	bl	800526c <_strtol_l.constprop.0>
 8005398:	bd10      	pop	{r4, pc}
 800539a:	46c0      	nop			; (mov r8, r8)
 800539c:	20000070 	.word	0x20000070

080053a0 <__assert_func>:
 80053a0:	b530      	push	{r4, r5, lr}
 80053a2:	0014      	movs	r4, r2
 80053a4:	001a      	movs	r2, r3
 80053a6:	4b09      	ldr	r3, [pc, #36]	; (80053cc <__assert_func+0x2c>)
 80053a8:	0005      	movs	r5, r0
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	b085      	sub	sp, #20
 80053ae:	68d8      	ldr	r0, [r3, #12]
 80053b0:	4b07      	ldr	r3, [pc, #28]	; (80053d0 <__assert_func+0x30>)
 80053b2:	2c00      	cmp	r4, #0
 80053b4:	d101      	bne.n	80053ba <__assert_func+0x1a>
 80053b6:	4b07      	ldr	r3, [pc, #28]	; (80053d4 <__assert_func+0x34>)
 80053b8:	001c      	movs	r4, r3
 80053ba:	9301      	str	r3, [sp, #4]
 80053bc:	9100      	str	r1, [sp, #0]
 80053be:	002b      	movs	r3, r5
 80053c0:	4905      	ldr	r1, [pc, #20]	; (80053d8 <__assert_func+0x38>)
 80053c2:	9402      	str	r4, [sp, #8]
 80053c4:	f000 f80a 	bl	80053dc <fiprintf>
 80053c8:	f000 fd3c 	bl	8005e44 <abort>
 80053cc:	20000070 	.word	0x20000070
 80053d0:	080067d8 	.word	0x080067d8
 80053d4:	08006813 	.word	0x08006813
 80053d8:	080067e5 	.word	0x080067e5

080053dc <fiprintf>:
 80053dc:	b40e      	push	{r1, r2, r3}
 80053de:	b503      	push	{r0, r1, lr}
 80053e0:	0001      	movs	r1, r0
 80053e2:	ab03      	add	r3, sp, #12
 80053e4:	4804      	ldr	r0, [pc, #16]	; (80053f8 <fiprintf+0x1c>)
 80053e6:	cb04      	ldmia	r3!, {r2}
 80053e8:	6800      	ldr	r0, [r0, #0]
 80053ea:	9301      	str	r3, [sp, #4]
 80053ec:	f000 f9a0 	bl	8005730 <_vfiprintf_r>
 80053f0:	b002      	add	sp, #8
 80053f2:	bc08      	pop	{r3}
 80053f4:	b003      	add	sp, #12
 80053f6:	4718      	bx	r3
 80053f8:	20000070 	.word	0x20000070

080053fc <__malloc_lock>:
 80053fc:	b510      	push	{r4, lr}
 80053fe:	4802      	ldr	r0, [pc, #8]	; (8005408 <__malloc_lock+0xc>)
 8005400:	f000 fef7 	bl	80061f2 <__retarget_lock_acquire_recursive>
 8005404:	bd10      	pop	{r4, pc}
 8005406:	46c0      	nop			; (mov r8, r8)
 8005408:	200003d0 	.word	0x200003d0

0800540c <__malloc_unlock>:
 800540c:	b510      	push	{r4, lr}
 800540e:	4802      	ldr	r0, [pc, #8]	; (8005418 <__malloc_unlock+0xc>)
 8005410:	f000 fef0 	bl	80061f4 <__retarget_lock_release_recursive>
 8005414:	bd10      	pop	{r4, pc}
 8005416:	46c0      	nop			; (mov r8, r8)
 8005418:	200003d0 	.word	0x200003d0

0800541c <__ssputs_r>:
 800541c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800541e:	688e      	ldr	r6, [r1, #8]
 8005420:	b085      	sub	sp, #20
 8005422:	0007      	movs	r7, r0
 8005424:	000c      	movs	r4, r1
 8005426:	9203      	str	r2, [sp, #12]
 8005428:	9301      	str	r3, [sp, #4]
 800542a:	429e      	cmp	r6, r3
 800542c:	d83c      	bhi.n	80054a8 <__ssputs_r+0x8c>
 800542e:	2390      	movs	r3, #144	; 0x90
 8005430:	898a      	ldrh	r2, [r1, #12]
 8005432:	00db      	lsls	r3, r3, #3
 8005434:	421a      	tst	r2, r3
 8005436:	d034      	beq.n	80054a2 <__ssputs_r+0x86>
 8005438:	6909      	ldr	r1, [r1, #16]
 800543a:	6823      	ldr	r3, [r4, #0]
 800543c:	6960      	ldr	r0, [r4, #20]
 800543e:	1a5b      	subs	r3, r3, r1
 8005440:	9302      	str	r3, [sp, #8]
 8005442:	2303      	movs	r3, #3
 8005444:	4343      	muls	r3, r0
 8005446:	0fdd      	lsrs	r5, r3, #31
 8005448:	18ed      	adds	r5, r5, r3
 800544a:	9b01      	ldr	r3, [sp, #4]
 800544c:	9802      	ldr	r0, [sp, #8]
 800544e:	3301      	adds	r3, #1
 8005450:	181b      	adds	r3, r3, r0
 8005452:	106d      	asrs	r5, r5, #1
 8005454:	42ab      	cmp	r3, r5
 8005456:	d900      	bls.n	800545a <__ssputs_r+0x3e>
 8005458:	001d      	movs	r5, r3
 800545a:	0553      	lsls	r3, r2, #21
 800545c:	d532      	bpl.n	80054c4 <__ssputs_r+0xa8>
 800545e:	0029      	movs	r1, r5
 8005460:	0038      	movs	r0, r7
 8005462:	f7ff fdd7 	bl	8005014 <_malloc_r>
 8005466:	1e06      	subs	r6, r0, #0
 8005468:	d109      	bne.n	800547e <__ssputs_r+0x62>
 800546a:	230c      	movs	r3, #12
 800546c:	603b      	str	r3, [r7, #0]
 800546e:	2340      	movs	r3, #64	; 0x40
 8005470:	2001      	movs	r0, #1
 8005472:	89a2      	ldrh	r2, [r4, #12]
 8005474:	4240      	negs	r0, r0
 8005476:	4313      	orrs	r3, r2
 8005478:	81a3      	strh	r3, [r4, #12]
 800547a:	b005      	add	sp, #20
 800547c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800547e:	9a02      	ldr	r2, [sp, #8]
 8005480:	6921      	ldr	r1, [r4, #16]
 8005482:	f000 ff30 	bl	80062e6 <memcpy>
 8005486:	89a3      	ldrh	r3, [r4, #12]
 8005488:	4a14      	ldr	r2, [pc, #80]	; (80054dc <__ssputs_r+0xc0>)
 800548a:	401a      	ands	r2, r3
 800548c:	2380      	movs	r3, #128	; 0x80
 800548e:	4313      	orrs	r3, r2
 8005490:	81a3      	strh	r3, [r4, #12]
 8005492:	9b02      	ldr	r3, [sp, #8]
 8005494:	6126      	str	r6, [r4, #16]
 8005496:	18f6      	adds	r6, r6, r3
 8005498:	6026      	str	r6, [r4, #0]
 800549a:	6165      	str	r5, [r4, #20]
 800549c:	9e01      	ldr	r6, [sp, #4]
 800549e:	1aed      	subs	r5, r5, r3
 80054a0:	60a5      	str	r5, [r4, #8]
 80054a2:	9b01      	ldr	r3, [sp, #4]
 80054a4:	429e      	cmp	r6, r3
 80054a6:	d900      	bls.n	80054aa <__ssputs_r+0x8e>
 80054a8:	9e01      	ldr	r6, [sp, #4]
 80054aa:	0032      	movs	r2, r6
 80054ac:	9903      	ldr	r1, [sp, #12]
 80054ae:	6820      	ldr	r0, [r4, #0]
 80054b0:	f000 ff22 	bl	80062f8 <memmove>
 80054b4:	68a3      	ldr	r3, [r4, #8]
 80054b6:	2000      	movs	r0, #0
 80054b8:	1b9b      	subs	r3, r3, r6
 80054ba:	60a3      	str	r3, [r4, #8]
 80054bc:	6823      	ldr	r3, [r4, #0]
 80054be:	199e      	adds	r6, r3, r6
 80054c0:	6026      	str	r6, [r4, #0]
 80054c2:	e7da      	b.n	800547a <__ssputs_r+0x5e>
 80054c4:	002a      	movs	r2, r5
 80054c6:	0038      	movs	r0, r7
 80054c8:	f000 ff29 	bl	800631e <_realloc_r>
 80054cc:	1e06      	subs	r6, r0, #0
 80054ce:	d1e0      	bne.n	8005492 <__ssputs_r+0x76>
 80054d0:	0038      	movs	r0, r7
 80054d2:	6921      	ldr	r1, [r4, #16]
 80054d4:	f7ff fd32 	bl	8004f3c <_free_r>
 80054d8:	e7c7      	b.n	800546a <__ssputs_r+0x4e>
 80054da:	46c0      	nop			; (mov r8, r8)
 80054dc:	fffffb7f 	.word	0xfffffb7f

080054e0 <_svfiprintf_r>:
 80054e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054e2:	b0a1      	sub	sp, #132	; 0x84
 80054e4:	9003      	str	r0, [sp, #12]
 80054e6:	001d      	movs	r5, r3
 80054e8:	898b      	ldrh	r3, [r1, #12]
 80054ea:	000f      	movs	r7, r1
 80054ec:	0016      	movs	r6, r2
 80054ee:	061b      	lsls	r3, r3, #24
 80054f0:	d511      	bpl.n	8005516 <_svfiprintf_r+0x36>
 80054f2:	690b      	ldr	r3, [r1, #16]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d10e      	bne.n	8005516 <_svfiprintf_r+0x36>
 80054f8:	2140      	movs	r1, #64	; 0x40
 80054fa:	f7ff fd8b 	bl	8005014 <_malloc_r>
 80054fe:	6038      	str	r0, [r7, #0]
 8005500:	6138      	str	r0, [r7, #16]
 8005502:	2800      	cmp	r0, #0
 8005504:	d105      	bne.n	8005512 <_svfiprintf_r+0x32>
 8005506:	230c      	movs	r3, #12
 8005508:	9a03      	ldr	r2, [sp, #12]
 800550a:	3801      	subs	r0, #1
 800550c:	6013      	str	r3, [r2, #0]
 800550e:	b021      	add	sp, #132	; 0x84
 8005510:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005512:	2340      	movs	r3, #64	; 0x40
 8005514:	617b      	str	r3, [r7, #20]
 8005516:	2300      	movs	r3, #0
 8005518:	ac08      	add	r4, sp, #32
 800551a:	6163      	str	r3, [r4, #20]
 800551c:	3320      	adds	r3, #32
 800551e:	7663      	strb	r3, [r4, #25]
 8005520:	3310      	adds	r3, #16
 8005522:	76a3      	strb	r3, [r4, #26]
 8005524:	9507      	str	r5, [sp, #28]
 8005526:	0035      	movs	r5, r6
 8005528:	782b      	ldrb	r3, [r5, #0]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d001      	beq.n	8005532 <_svfiprintf_r+0x52>
 800552e:	2b25      	cmp	r3, #37	; 0x25
 8005530:	d147      	bne.n	80055c2 <_svfiprintf_r+0xe2>
 8005532:	1bab      	subs	r3, r5, r6
 8005534:	9305      	str	r3, [sp, #20]
 8005536:	42b5      	cmp	r5, r6
 8005538:	d00c      	beq.n	8005554 <_svfiprintf_r+0x74>
 800553a:	0032      	movs	r2, r6
 800553c:	0039      	movs	r1, r7
 800553e:	9803      	ldr	r0, [sp, #12]
 8005540:	f7ff ff6c 	bl	800541c <__ssputs_r>
 8005544:	1c43      	adds	r3, r0, #1
 8005546:	d100      	bne.n	800554a <_svfiprintf_r+0x6a>
 8005548:	e0ae      	b.n	80056a8 <_svfiprintf_r+0x1c8>
 800554a:	6962      	ldr	r2, [r4, #20]
 800554c:	9b05      	ldr	r3, [sp, #20]
 800554e:	4694      	mov	ip, r2
 8005550:	4463      	add	r3, ip
 8005552:	6163      	str	r3, [r4, #20]
 8005554:	782b      	ldrb	r3, [r5, #0]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d100      	bne.n	800555c <_svfiprintf_r+0x7c>
 800555a:	e0a5      	b.n	80056a8 <_svfiprintf_r+0x1c8>
 800555c:	2201      	movs	r2, #1
 800555e:	2300      	movs	r3, #0
 8005560:	4252      	negs	r2, r2
 8005562:	6062      	str	r2, [r4, #4]
 8005564:	a904      	add	r1, sp, #16
 8005566:	3254      	adds	r2, #84	; 0x54
 8005568:	1852      	adds	r2, r2, r1
 800556a:	1c6e      	adds	r6, r5, #1
 800556c:	6023      	str	r3, [r4, #0]
 800556e:	60e3      	str	r3, [r4, #12]
 8005570:	60a3      	str	r3, [r4, #8]
 8005572:	7013      	strb	r3, [r2, #0]
 8005574:	65a3      	str	r3, [r4, #88]	; 0x58
 8005576:	2205      	movs	r2, #5
 8005578:	7831      	ldrb	r1, [r6, #0]
 800557a:	4854      	ldr	r0, [pc, #336]	; (80056cc <_svfiprintf_r+0x1ec>)
 800557c:	f000 fea8 	bl	80062d0 <memchr>
 8005580:	1c75      	adds	r5, r6, #1
 8005582:	2800      	cmp	r0, #0
 8005584:	d11f      	bne.n	80055c6 <_svfiprintf_r+0xe6>
 8005586:	6822      	ldr	r2, [r4, #0]
 8005588:	06d3      	lsls	r3, r2, #27
 800558a:	d504      	bpl.n	8005596 <_svfiprintf_r+0xb6>
 800558c:	2353      	movs	r3, #83	; 0x53
 800558e:	a904      	add	r1, sp, #16
 8005590:	185b      	adds	r3, r3, r1
 8005592:	2120      	movs	r1, #32
 8005594:	7019      	strb	r1, [r3, #0]
 8005596:	0713      	lsls	r3, r2, #28
 8005598:	d504      	bpl.n	80055a4 <_svfiprintf_r+0xc4>
 800559a:	2353      	movs	r3, #83	; 0x53
 800559c:	a904      	add	r1, sp, #16
 800559e:	185b      	adds	r3, r3, r1
 80055a0:	212b      	movs	r1, #43	; 0x2b
 80055a2:	7019      	strb	r1, [r3, #0]
 80055a4:	7833      	ldrb	r3, [r6, #0]
 80055a6:	2b2a      	cmp	r3, #42	; 0x2a
 80055a8:	d016      	beq.n	80055d8 <_svfiprintf_r+0xf8>
 80055aa:	0035      	movs	r5, r6
 80055ac:	2100      	movs	r1, #0
 80055ae:	200a      	movs	r0, #10
 80055b0:	68e3      	ldr	r3, [r4, #12]
 80055b2:	782a      	ldrb	r2, [r5, #0]
 80055b4:	1c6e      	adds	r6, r5, #1
 80055b6:	3a30      	subs	r2, #48	; 0x30
 80055b8:	2a09      	cmp	r2, #9
 80055ba:	d94e      	bls.n	800565a <_svfiprintf_r+0x17a>
 80055bc:	2900      	cmp	r1, #0
 80055be:	d111      	bne.n	80055e4 <_svfiprintf_r+0x104>
 80055c0:	e017      	b.n	80055f2 <_svfiprintf_r+0x112>
 80055c2:	3501      	adds	r5, #1
 80055c4:	e7b0      	b.n	8005528 <_svfiprintf_r+0x48>
 80055c6:	4b41      	ldr	r3, [pc, #260]	; (80056cc <_svfiprintf_r+0x1ec>)
 80055c8:	6822      	ldr	r2, [r4, #0]
 80055ca:	1ac0      	subs	r0, r0, r3
 80055cc:	2301      	movs	r3, #1
 80055ce:	4083      	lsls	r3, r0
 80055d0:	4313      	orrs	r3, r2
 80055d2:	002e      	movs	r6, r5
 80055d4:	6023      	str	r3, [r4, #0]
 80055d6:	e7ce      	b.n	8005576 <_svfiprintf_r+0x96>
 80055d8:	9b07      	ldr	r3, [sp, #28]
 80055da:	1d19      	adds	r1, r3, #4
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	9107      	str	r1, [sp, #28]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	db01      	blt.n	80055e8 <_svfiprintf_r+0x108>
 80055e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80055e6:	e004      	b.n	80055f2 <_svfiprintf_r+0x112>
 80055e8:	425b      	negs	r3, r3
 80055ea:	60e3      	str	r3, [r4, #12]
 80055ec:	2302      	movs	r3, #2
 80055ee:	4313      	orrs	r3, r2
 80055f0:	6023      	str	r3, [r4, #0]
 80055f2:	782b      	ldrb	r3, [r5, #0]
 80055f4:	2b2e      	cmp	r3, #46	; 0x2e
 80055f6:	d10a      	bne.n	800560e <_svfiprintf_r+0x12e>
 80055f8:	786b      	ldrb	r3, [r5, #1]
 80055fa:	2b2a      	cmp	r3, #42	; 0x2a
 80055fc:	d135      	bne.n	800566a <_svfiprintf_r+0x18a>
 80055fe:	9b07      	ldr	r3, [sp, #28]
 8005600:	3502      	adds	r5, #2
 8005602:	1d1a      	adds	r2, r3, #4
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	9207      	str	r2, [sp, #28]
 8005608:	2b00      	cmp	r3, #0
 800560a:	db2b      	blt.n	8005664 <_svfiprintf_r+0x184>
 800560c:	9309      	str	r3, [sp, #36]	; 0x24
 800560e:	4e30      	ldr	r6, [pc, #192]	; (80056d0 <_svfiprintf_r+0x1f0>)
 8005610:	2203      	movs	r2, #3
 8005612:	0030      	movs	r0, r6
 8005614:	7829      	ldrb	r1, [r5, #0]
 8005616:	f000 fe5b 	bl	80062d0 <memchr>
 800561a:	2800      	cmp	r0, #0
 800561c:	d006      	beq.n	800562c <_svfiprintf_r+0x14c>
 800561e:	2340      	movs	r3, #64	; 0x40
 8005620:	1b80      	subs	r0, r0, r6
 8005622:	4083      	lsls	r3, r0
 8005624:	6822      	ldr	r2, [r4, #0]
 8005626:	3501      	adds	r5, #1
 8005628:	4313      	orrs	r3, r2
 800562a:	6023      	str	r3, [r4, #0]
 800562c:	7829      	ldrb	r1, [r5, #0]
 800562e:	2206      	movs	r2, #6
 8005630:	4828      	ldr	r0, [pc, #160]	; (80056d4 <_svfiprintf_r+0x1f4>)
 8005632:	1c6e      	adds	r6, r5, #1
 8005634:	7621      	strb	r1, [r4, #24]
 8005636:	f000 fe4b 	bl	80062d0 <memchr>
 800563a:	2800      	cmp	r0, #0
 800563c:	d03c      	beq.n	80056b8 <_svfiprintf_r+0x1d8>
 800563e:	4b26      	ldr	r3, [pc, #152]	; (80056d8 <_svfiprintf_r+0x1f8>)
 8005640:	2b00      	cmp	r3, #0
 8005642:	d125      	bne.n	8005690 <_svfiprintf_r+0x1b0>
 8005644:	2207      	movs	r2, #7
 8005646:	9b07      	ldr	r3, [sp, #28]
 8005648:	3307      	adds	r3, #7
 800564a:	4393      	bics	r3, r2
 800564c:	3308      	adds	r3, #8
 800564e:	9307      	str	r3, [sp, #28]
 8005650:	6963      	ldr	r3, [r4, #20]
 8005652:	9a04      	ldr	r2, [sp, #16]
 8005654:	189b      	adds	r3, r3, r2
 8005656:	6163      	str	r3, [r4, #20]
 8005658:	e765      	b.n	8005526 <_svfiprintf_r+0x46>
 800565a:	4343      	muls	r3, r0
 800565c:	0035      	movs	r5, r6
 800565e:	2101      	movs	r1, #1
 8005660:	189b      	adds	r3, r3, r2
 8005662:	e7a6      	b.n	80055b2 <_svfiprintf_r+0xd2>
 8005664:	2301      	movs	r3, #1
 8005666:	425b      	negs	r3, r3
 8005668:	e7d0      	b.n	800560c <_svfiprintf_r+0x12c>
 800566a:	2300      	movs	r3, #0
 800566c:	200a      	movs	r0, #10
 800566e:	001a      	movs	r2, r3
 8005670:	3501      	adds	r5, #1
 8005672:	6063      	str	r3, [r4, #4]
 8005674:	7829      	ldrb	r1, [r5, #0]
 8005676:	1c6e      	adds	r6, r5, #1
 8005678:	3930      	subs	r1, #48	; 0x30
 800567a:	2909      	cmp	r1, #9
 800567c:	d903      	bls.n	8005686 <_svfiprintf_r+0x1a6>
 800567e:	2b00      	cmp	r3, #0
 8005680:	d0c5      	beq.n	800560e <_svfiprintf_r+0x12e>
 8005682:	9209      	str	r2, [sp, #36]	; 0x24
 8005684:	e7c3      	b.n	800560e <_svfiprintf_r+0x12e>
 8005686:	4342      	muls	r2, r0
 8005688:	0035      	movs	r5, r6
 800568a:	2301      	movs	r3, #1
 800568c:	1852      	adds	r2, r2, r1
 800568e:	e7f1      	b.n	8005674 <_svfiprintf_r+0x194>
 8005690:	ab07      	add	r3, sp, #28
 8005692:	9300      	str	r3, [sp, #0]
 8005694:	003a      	movs	r2, r7
 8005696:	0021      	movs	r1, r4
 8005698:	4b10      	ldr	r3, [pc, #64]	; (80056dc <_svfiprintf_r+0x1fc>)
 800569a:	9803      	ldr	r0, [sp, #12]
 800569c:	e000      	b.n	80056a0 <_svfiprintf_r+0x1c0>
 800569e:	bf00      	nop
 80056a0:	9004      	str	r0, [sp, #16]
 80056a2:	9b04      	ldr	r3, [sp, #16]
 80056a4:	3301      	adds	r3, #1
 80056a6:	d1d3      	bne.n	8005650 <_svfiprintf_r+0x170>
 80056a8:	89bb      	ldrh	r3, [r7, #12]
 80056aa:	980d      	ldr	r0, [sp, #52]	; 0x34
 80056ac:	065b      	lsls	r3, r3, #25
 80056ae:	d400      	bmi.n	80056b2 <_svfiprintf_r+0x1d2>
 80056b0:	e72d      	b.n	800550e <_svfiprintf_r+0x2e>
 80056b2:	2001      	movs	r0, #1
 80056b4:	4240      	negs	r0, r0
 80056b6:	e72a      	b.n	800550e <_svfiprintf_r+0x2e>
 80056b8:	ab07      	add	r3, sp, #28
 80056ba:	9300      	str	r3, [sp, #0]
 80056bc:	003a      	movs	r2, r7
 80056be:	0021      	movs	r1, r4
 80056c0:	4b06      	ldr	r3, [pc, #24]	; (80056dc <_svfiprintf_r+0x1fc>)
 80056c2:	9803      	ldr	r0, [sp, #12]
 80056c4:	f000 f9de 	bl	8005a84 <_printf_i>
 80056c8:	e7ea      	b.n	80056a0 <_svfiprintf_r+0x1c0>
 80056ca:	46c0      	nop			; (mov r8, r8)
 80056cc:	08006915 	.word	0x08006915
 80056d0:	0800691b 	.word	0x0800691b
 80056d4:	0800691f 	.word	0x0800691f
 80056d8:	00000000 	.word	0x00000000
 80056dc:	0800541d 	.word	0x0800541d

080056e0 <__sfputc_r>:
 80056e0:	6893      	ldr	r3, [r2, #8]
 80056e2:	b510      	push	{r4, lr}
 80056e4:	3b01      	subs	r3, #1
 80056e6:	6093      	str	r3, [r2, #8]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	da04      	bge.n	80056f6 <__sfputc_r+0x16>
 80056ec:	6994      	ldr	r4, [r2, #24]
 80056ee:	42a3      	cmp	r3, r4
 80056f0:	db07      	blt.n	8005702 <__sfputc_r+0x22>
 80056f2:	290a      	cmp	r1, #10
 80056f4:	d005      	beq.n	8005702 <__sfputc_r+0x22>
 80056f6:	6813      	ldr	r3, [r2, #0]
 80056f8:	1c58      	adds	r0, r3, #1
 80056fa:	6010      	str	r0, [r2, #0]
 80056fc:	7019      	strb	r1, [r3, #0]
 80056fe:	0008      	movs	r0, r1
 8005700:	bd10      	pop	{r4, pc}
 8005702:	f000 fad1 	bl	8005ca8 <__swbuf_r>
 8005706:	0001      	movs	r1, r0
 8005708:	e7f9      	b.n	80056fe <__sfputc_r+0x1e>

0800570a <__sfputs_r>:
 800570a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800570c:	0006      	movs	r6, r0
 800570e:	000f      	movs	r7, r1
 8005710:	0014      	movs	r4, r2
 8005712:	18d5      	adds	r5, r2, r3
 8005714:	42ac      	cmp	r4, r5
 8005716:	d101      	bne.n	800571c <__sfputs_r+0x12>
 8005718:	2000      	movs	r0, #0
 800571a:	e007      	b.n	800572c <__sfputs_r+0x22>
 800571c:	7821      	ldrb	r1, [r4, #0]
 800571e:	003a      	movs	r2, r7
 8005720:	0030      	movs	r0, r6
 8005722:	f7ff ffdd 	bl	80056e0 <__sfputc_r>
 8005726:	3401      	adds	r4, #1
 8005728:	1c43      	adds	r3, r0, #1
 800572a:	d1f3      	bne.n	8005714 <__sfputs_r+0xa>
 800572c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005730 <_vfiprintf_r>:
 8005730:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005732:	b0a1      	sub	sp, #132	; 0x84
 8005734:	0006      	movs	r6, r0
 8005736:	000c      	movs	r4, r1
 8005738:	001f      	movs	r7, r3
 800573a:	9203      	str	r2, [sp, #12]
 800573c:	2800      	cmp	r0, #0
 800573e:	d004      	beq.n	800574a <_vfiprintf_r+0x1a>
 8005740:	6983      	ldr	r3, [r0, #24]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d101      	bne.n	800574a <_vfiprintf_r+0x1a>
 8005746:	f000 fcb3 	bl	80060b0 <__sinit>
 800574a:	4b8e      	ldr	r3, [pc, #568]	; (8005984 <_vfiprintf_r+0x254>)
 800574c:	429c      	cmp	r4, r3
 800574e:	d11c      	bne.n	800578a <_vfiprintf_r+0x5a>
 8005750:	6874      	ldr	r4, [r6, #4]
 8005752:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005754:	07db      	lsls	r3, r3, #31
 8005756:	d405      	bmi.n	8005764 <_vfiprintf_r+0x34>
 8005758:	89a3      	ldrh	r3, [r4, #12]
 800575a:	059b      	lsls	r3, r3, #22
 800575c:	d402      	bmi.n	8005764 <_vfiprintf_r+0x34>
 800575e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005760:	f000 fd47 	bl	80061f2 <__retarget_lock_acquire_recursive>
 8005764:	89a3      	ldrh	r3, [r4, #12]
 8005766:	071b      	lsls	r3, r3, #28
 8005768:	d502      	bpl.n	8005770 <_vfiprintf_r+0x40>
 800576a:	6923      	ldr	r3, [r4, #16]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d11d      	bne.n	80057ac <_vfiprintf_r+0x7c>
 8005770:	0021      	movs	r1, r4
 8005772:	0030      	movs	r0, r6
 8005774:	f000 faee 	bl	8005d54 <__swsetup_r>
 8005778:	2800      	cmp	r0, #0
 800577a:	d017      	beq.n	80057ac <_vfiprintf_r+0x7c>
 800577c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800577e:	07db      	lsls	r3, r3, #31
 8005780:	d50d      	bpl.n	800579e <_vfiprintf_r+0x6e>
 8005782:	2001      	movs	r0, #1
 8005784:	4240      	negs	r0, r0
 8005786:	b021      	add	sp, #132	; 0x84
 8005788:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800578a:	4b7f      	ldr	r3, [pc, #508]	; (8005988 <_vfiprintf_r+0x258>)
 800578c:	429c      	cmp	r4, r3
 800578e:	d101      	bne.n	8005794 <_vfiprintf_r+0x64>
 8005790:	68b4      	ldr	r4, [r6, #8]
 8005792:	e7de      	b.n	8005752 <_vfiprintf_r+0x22>
 8005794:	4b7d      	ldr	r3, [pc, #500]	; (800598c <_vfiprintf_r+0x25c>)
 8005796:	429c      	cmp	r4, r3
 8005798:	d1db      	bne.n	8005752 <_vfiprintf_r+0x22>
 800579a:	68f4      	ldr	r4, [r6, #12]
 800579c:	e7d9      	b.n	8005752 <_vfiprintf_r+0x22>
 800579e:	89a3      	ldrh	r3, [r4, #12]
 80057a0:	059b      	lsls	r3, r3, #22
 80057a2:	d4ee      	bmi.n	8005782 <_vfiprintf_r+0x52>
 80057a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80057a6:	f000 fd25 	bl	80061f4 <__retarget_lock_release_recursive>
 80057aa:	e7ea      	b.n	8005782 <_vfiprintf_r+0x52>
 80057ac:	2300      	movs	r3, #0
 80057ae:	ad08      	add	r5, sp, #32
 80057b0:	616b      	str	r3, [r5, #20]
 80057b2:	3320      	adds	r3, #32
 80057b4:	766b      	strb	r3, [r5, #25]
 80057b6:	3310      	adds	r3, #16
 80057b8:	76ab      	strb	r3, [r5, #26]
 80057ba:	9707      	str	r7, [sp, #28]
 80057bc:	9f03      	ldr	r7, [sp, #12]
 80057be:	783b      	ldrb	r3, [r7, #0]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d001      	beq.n	80057c8 <_vfiprintf_r+0x98>
 80057c4:	2b25      	cmp	r3, #37	; 0x25
 80057c6:	d14e      	bne.n	8005866 <_vfiprintf_r+0x136>
 80057c8:	9b03      	ldr	r3, [sp, #12]
 80057ca:	1afb      	subs	r3, r7, r3
 80057cc:	9305      	str	r3, [sp, #20]
 80057ce:	9b03      	ldr	r3, [sp, #12]
 80057d0:	429f      	cmp	r7, r3
 80057d2:	d00d      	beq.n	80057f0 <_vfiprintf_r+0xc0>
 80057d4:	9b05      	ldr	r3, [sp, #20]
 80057d6:	0021      	movs	r1, r4
 80057d8:	0030      	movs	r0, r6
 80057da:	9a03      	ldr	r2, [sp, #12]
 80057dc:	f7ff ff95 	bl	800570a <__sfputs_r>
 80057e0:	1c43      	adds	r3, r0, #1
 80057e2:	d100      	bne.n	80057e6 <_vfiprintf_r+0xb6>
 80057e4:	e0b5      	b.n	8005952 <_vfiprintf_r+0x222>
 80057e6:	696a      	ldr	r2, [r5, #20]
 80057e8:	9b05      	ldr	r3, [sp, #20]
 80057ea:	4694      	mov	ip, r2
 80057ec:	4463      	add	r3, ip
 80057ee:	616b      	str	r3, [r5, #20]
 80057f0:	783b      	ldrb	r3, [r7, #0]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d100      	bne.n	80057f8 <_vfiprintf_r+0xc8>
 80057f6:	e0ac      	b.n	8005952 <_vfiprintf_r+0x222>
 80057f8:	2201      	movs	r2, #1
 80057fa:	1c7b      	adds	r3, r7, #1
 80057fc:	9303      	str	r3, [sp, #12]
 80057fe:	2300      	movs	r3, #0
 8005800:	4252      	negs	r2, r2
 8005802:	606a      	str	r2, [r5, #4]
 8005804:	a904      	add	r1, sp, #16
 8005806:	3254      	adds	r2, #84	; 0x54
 8005808:	1852      	adds	r2, r2, r1
 800580a:	602b      	str	r3, [r5, #0]
 800580c:	60eb      	str	r3, [r5, #12]
 800580e:	60ab      	str	r3, [r5, #8]
 8005810:	7013      	strb	r3, [r2, #0]
 8005812:	65ab      	str	r3, [r5, #88]	; 0x58
 8005814:	9b03      	ldr	r3, [sp, #12]
 8005816:	2205      	movs	r2, #5
 8005818:	7819      	ldrb	r1, [r3, #0]
 800581a:	485d      	ldr	r0, [pc, #372]	; (8005990 <_vfiprintf_r+0x260>)
 800581c:	f000 fd58 	bl	80062d0 <memchr>
 8005820:	9b03      	ldr	r3, [sp, #12]
 8005822:	1c5f      	adds	r7, r3, #1
 8005824:	2800      	cmp	r0, #0
 8005826:	d120      	bne.n	800586a <_vfiprintf_r+0x13a>
 8005828:	682a      	ldr	r2, [r5, #0]
 800582a:	06d3      	lsls	r3, r2, #27
 800582c:	d504      	bpl.n	8005838 <_vfiprintf_r+0x108>
 800582e:	2353      	movs	r3, #83	; 0x53
 8005830:	a904      	add	r1, sp, #16
 8005832:	185b      	adds	r3, r3, r1
 8005834:	2120      	movs	r1, #32
 8005836:	7019      	strb	r1, [r3, #0]
 8005838:	0713      	lsls	r3, r2, #28
 800583a:	d504      	bpl.n	8005846 <_vfiprintf_r+0x116>
 800583c:	2353      	movs	r3, #83	; 0x53
 800583e:	a904      	add	r1, sp, #16
 8005840:	185b      	adds	r3, r3, r1
 8005842:	212b      	movs	r1, #43	; 0x2b
 8005844:	7019      	strb	r1, [r3, #0]
 8005846:	9b03      	ldr	r3, [sp, #12]
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	2b2a      	cmp	r3, #42	; 0x2a
 800584c:	d016      	beq.n	800587c <_vfiprintf_r+0x14c>
 800584e:	2100      	movs	r1, #0
 8005850:	68eb      	ldr	r3, [r5, #12]
 8005852:	9f03      	ldr	r7, [sp, #12]
 8005854:	783a      	ldrb	r2, [r7, #0]
 8005856:	1c78      	adds	r0, r7, #1
 8005858:	3a30      	subs	r2, #48	; 0x30
 800585a:	4684      	mov	ip, r0
 800585c:	2a09      	cmp	r2, #9
 800585e:	d94f      	bls.n	8005900 <_vfiprintf_r+0x1d0>
 8005860:	2900      	cmp	r1, #0
 8005862:	d111      	bne.n	8005888 <_vfiprintf_r+0x158>
 8005864:	e017      	b.n	8005896 <_vfiprintf_r+0x166>
 8005866:	3701      	adds	r7, #1
 8005868:	e7a9      	b.n	80057be <_vfiprintf_r+0x8e>
 800586a:	4b49      	ldr	r3, [pc, #292]	; (8005990 <_vfiprintf_r+0x260>)
 800586c:	682a      	ldr	r2, [r5, #0]
 800586e:	1ac0      	subs	r0, r0, r3
 8005870:	2301      	movs	r3, #1
 8005872:	4083      	lsls	r3, r0
 8005874:	4313      	orrs	r3, r2
 8005876:	602b      	str	r3, [r5, #0]
 8005878:	9703      	str	r7, [sp, #12]
 800587a:	e7cb      	b.n	8005814 <_vfiprintf_r+0xe4>
 800587c:	9b07      	ldr	r3, [sp, #28]
 800587e:	1d19      	adds	r1, r3, #4
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	9107      	str	r1, [sp, #28]
 8005884:	2b00      	cmp	r3, #0
 8005886:	db01      	blt.n	800588c <_vfiprintf_r+0x15c>
 8005888:	930b      	str	r3, [sp, #44]	; 0x2c
 800588a:	e004      	b.n	8005896 <_vfiprintf_r+0x166>
 800588c:	425b      	negs	r3, r3
 800588e:	60eb      	str	r3, [r5, #12]
 8005890:	2302      	movs	r3, #2
 8005892:	4313      	orrs	r3, r2
 8005894:	602b      	str	r3, [r5, #0]
 8005896:	783b      	ldrb	r3, [r7, #0]
 8005898:	2b2e      	cmp	r3, #46	; 0x2e
 800589a:	d10a      	bne.n	80058b2 <_vfiprintf_r+0x182>
 800589c:	787b      	ldrb	r3, [r7, #1]
 800589e:	2b2a      	cmp	r3, #42	; 0x2a
 80058a0:	d137      	bne.n	8005912 <_vfiprintf_r+0x1e2>
 80058a2:	9b07      	ldr	r3, [sp, #28]
 80058a4:	3702      	adds	r7, #2
 80058a6:	1d1a      	adds	r2, r3, #4
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	9207      	str	r2, [sp, #28]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	db2d      	blt.n	800590c <_vfiprintf_r+0x1dc>
 80058b0:	9309      	str	r3, [sp, #36]	; 0x24
 80058b2:	2203      	movs	r2, #3
 80058b4:	7839      	ldrb	r1, [r7, #0]
 80058b6:	4837      	ldr	r0, [pc, #220]	; (8005994 <_vfiprintf_r+0x264>)
 80058b8:	f000 fd0a 	bl	80062d0 <memchr>
 80058bc:	2800      	cmp	r0, #0
 80058be:	d007      	beq.n	80058d0 <_vfiprintf_r+0x1a0>
 80058c0:	4b34      	ldr	r3, [pc, #208]	; (8005994 <_vfiprintf_r+0x264>)
 80058c2:	682a      	ldr	r2, [r5, #0]
 80058c4:	1ac0      	subs	r0, r0, r3
 80058c6:	2340      	movs	r3, #64	; 0x40
 80058c8:	4083      	lsls	r3, r0
 80058ca:	4313      	orrs	r3, r2
 80058cc:	3701      	adds	r7, #1
 80058ce:	602b      	str	r3, [r5, #0]
 80058d0:	7839      	ldrb	r1, [r7, #0]
 80058d2:	1c7b      	adds	r3, r7, #1
 80058d4:	2206      	movs	r2, #6
 80058d6:	4830      	ldr	r0, [pc, #192]	; (8005998 <_vfiprintf_r+0x268>)
 80058d8:	9303      	str	r3, [sp, #12]
 80058da:	7629      	strb	r1, [r5, #24]
 80058dc:	f000 fcf8 	bl	80062d0 <memchr>
 80058e0:	2800      	cmp	r0, #0
 80058e2:	d045      	beq.n	8005970 <_vfiprintf_r+0x240>
 80058e4:	4b2d      	ldr	r3, [pc, #180]	; (800599c <_vfiprintf_r+0x26c>)
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d127      	bne.n	800593a <_vfiprintf_r+0x20a>
 80058ea:	2207      	movs	r2, #7
 80058ec:	9b07      	ldr	r3, [sp, #28]
 80058ee:	3307      	adds	r3, #7
 80058f0:	4393      	bics	r3, r2
 80058f2:	3308      	adds	r3, #8
 80058f4:	9307      	str	r3, [sp, #28]
 80058f6:	696b      	ldr	r3, [r5, #20]
 80058f8:	9a04      	ldr	r2, [sp, #16]
 80058fa:	189b      	adds	r3, r3, r2
 80058fc:	616b      	str	r3, [r5, #20]
 80058fe:	e75d      	b.n	80057bc <_vfiprintf_r+0x8c>
 8005900:	210a      	movs	r1, #10
 8005902:	434b      	muls	r3, r1
 8005904:	4667      	mov	r7, ip
 8005906:	189b      	adds	r3, r3, r2
 8005908:	3909      	subs	r1, #9
 800590a:	e7a3      	b.n	8005854 <_vfiprintf_r+0x124>
 800590c:	2301      	movs	r3, #1
 800590e:	425b      	negs	r3, r3
 8005910:	e7ce      	b.n	80058b0 <_vfiprintf_r+0x180>
 8005912:	2300      	movs	r3, #0
 8005914:	001a      	movs	r2, r3
 8005916:	3701      	adds	r7, #1
 8005918:	606b      	str	r3, [r5, #4]
 800591a:	7839      	ldrb	r1, [r7, #0]
 800591c:	1c78      	adds	r0, r7, #1
 800591e:	3930      	subs	r1, #48	; 0x30
 8005920:	4684      	mov	ip, r0
 8005922:	2909      	cmp	r1, #9
 8005924:	d903      	bls.n	800592e <_vfiprintf_r+0x1fe>
 8005926:	2b00      	cmp	r3, #0
 8005928:	d0c3      	beq.n	80058b2 <_vfiprintf_r+0x182>
 800592a:	9209      	str	r2, [sp, #36]	; 0x24
 800592c:	e7c1      	b.n	80058b2 <_vfiprintf_r+0x182>
 800592e:	230a      	movs	r3, #10
 8005930:	435a      	muls	r2, r3
 8005932:	4667      	mov	r7, ip
 8005934:	1852      	adds	r2, r2, r1
 8005936:	3b09      	subs	r3, #9
 8005938:	e7ef      	b.n	800591a <_vfiprintf_r+0x1ea>
 800593a:	ab07      	add	r3, sp, #28
 800593c:	9300      	str	r3, [sp, #0]
 800593e:	0022      	movs	r2, r4
 8005940:	0029      	movs	r1, r5
 8005942:	0030      	movs	r0, r6
 8005944:	4b16      	ldr	r3, [pc, #88]	; (80059a0 <_vfiprintf_r+0x270>)
 8005946:	e000      	b.n	800594a <_vfiprintf_r+0x21a>
 8005948:	bf00      	nop
 800594a:	9004      	str	r0, [sp, #16]
 800594c:	9b04      	ldr	r3, [sp, #16]
 800594e:	3301      	adds	r3, #1
 8005950:	d1d1      	bne.n	80058f6 <_vfiprintf_r+0x1c6>
 8005952:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005954:	07db      	lsls	r3, r3, #31
 8005956:	d405      	bmi.n	8005964 <_vfiprintf_r+0x234>
 8005958:	89a3      	ldrh	r3, [r4, #12]
 800595a:	059b      	lsls	r3, r3, #22
 800595c:	d402      	bmi.n	8005964 <_vfiprintf_r+0x234>
 800595e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005960:	f000 fc48 	bl	80061f4 <__retarget_lock_release_recursive>
 8005964:	89a3      	ldrh	r3, [r4, #12]
 8005966:	065b      	lsls	r3, r3, #25
 8005968:	d500      	bpl.n	800596c <_vfiprintf_r+0x23c>
 800596a:	e70a      	b.n	8005782 <_vfiprintf_r+0x52>
 800596c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800596e:	e70a      	b.n	8005786 <_vfiprintf_r+0x56>
 8005970:	ab07      	add	r3, sp, #28
 8005972:	9300      	str	r3, [sp, #0]
 8005974:	0022      	movs	r2, r4
 8005976:	0029      	movs	r1, r5
 8005978:	0030      	movs	r0, r6
 800597a:	4b09      	ldr	r3, [pc, #36]	; (80059a0 <_vfiprintf_r+0x270>)
 800597c:	f000 f882 	bl	8005a84 <_printf_i>
 8005980:	e7e3      	b.n	800594a <_vfiprintf_r+0x21a>
 8005982:	46c0      	nop			; (mov r8, r8)
 8005984:	08006968 	.word	0x08006968
 8005988:	08006988 	.word	0x08006988
 800598c:	08006948 	.word	0x08006948
 8005990:	08006915 	.word	0x08006915
 8005994:	0800691b 	.word	0x0800691b
 8005998:	0800691f 	.word	0x0800691f
 800599c:	00000000 	.word	0x00000000
 80059a0:	0800570b 	.word	0x0800570b

080059a4 <_printf_common>:
 80059a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80059a6:	0015      	movs	r5, r2
 80059a8:	9301      	str	r3, [sp, #4]
 80059aa:	688a      	ldr	r2, [r1, #8]
 80059ac:	690b      	ldr	r3, [r1, #16]
 80059ae:	000c      	movs	r4, r1
 80059b0:	9000      	str	r0, [sp, #0]
 80059b2:	4293      	cmp	r3, r2
 80059b4:	da00      	bge.n	80059b8 <_printf_common+0x14>
 80059b6:	0013      	movs	r3, r2
 80059b8:	0022      	movs	r2, r4
 80059ba:	602b      	str	r3, [r5, #0]
 80059bc:	3243      	adds	r2, #67	; 0x43
 80059be:	7812      	ldrb	r2, [r2, #0]
 80059c0:	2a00      	cmp	r2, #0
 80059c2:	d001      	beq.n	80059c8 <_printf_common+0x24>
 80059c4:	3301      	adds	r3, #1
 80059c6:	602b      	str	r3, [r5, #0]
 80059c8:	6823      	ldr	r3, [r4, #0]
 80059ca:	069b      	lsls	r3, r3, #26
 80059cc:	d502      	bpl.n	80059d4 <_printf_common+0x30>
 80059ce:	682b      	ldr	r3, [r5, #0]
 80059d0:	3302      	adds	r3, #2
 80059d2:	602b      	str	r3, [r5, #0]
 80059d4:	6822      	ldr	r2, [r4, #0]
 80059d6:	2306      	movs	r3, #6
 80059d8:	0017      	movs	r7, r2
 80059da:	401f      	ands	r7, r3
 80059dc:	421a      	tst	r2, r3
 80059de:	d027      	beq.n	8005a30 <_printf_common+0x8c>
 80059e0:	0023      	movs	r3, r4
 80059e2:	3343      	adds	r3, #67	; 0x43
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	1e5a      	subs	r2, r3, #1
 80059e8:	4193      	sbcs	r3, r2
 80059ea:	6822      	ldr	r2, [r4, #0]
 80059ec:	0692      	lsls	r2, r2, #26
 80059ee:	d430      	bmi.n	8005a52 <_printf_common+0xae>
 80059f0:	0022      	movs	r2, r4
 80059f2:	9901      	ldr	r1, [sp, #4]
 80059f4:	9800      	ldr	r0, [sp, #0]
 80059f6:	9e08      	ldr	r6, [sp, #32]
 80059f8:	3243      	adds	r2, #67	; 0x43
 80059fa:	47b0      	blx	r6
 80059fc:	1c43      	adds	r3, r0, #1
 80059fe:	d025      	beq.n	8005a4c <_printf_common+0xa8>
 8005a00:	2306      	movs	r3, #6
 8005a02:	6820      	ldr	r0, [r4, #0]
 8005a04:	682a      	ldr	r2, [r5, #0]
 8005a06:	68e1      	ldr	r1, [r4, #12]
 8005a08:	2500      	movs	r5, #0
 8005a0a:	4003      	ands	r3, r0
 8005a0c:	2b04      	cmp	r3, #4
 8005a0e:	d103      	bne.n	8005a18 <_printf_common+0x74>
 8005a10:	1a8d      	subs	r5, r1, r2
 8005a12:	43eb      	mvns	r3, r5
 8005a14:	17db      	asrs	r3, r3, #31
 8005a16:	401d      	ands	r5, r3
 8005a18:	68a3      	ldr	r3, [r4, #8]
 8005a1a:	6922      	ldr	r2, [r4, #16]
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	dd01      	ble.n	8005a24 <_printf_common+0x80>
 8005a20:	1a9b      	subs	r3, r3, r2
 8005a22:	18ed      	adds	r5, r5, r3
 8005a24:	2700      	movs	r7, #0
 8005a26:	42bd      	cmp	r5, r7
 8005a28:	d120      	bne.n	8005a6c <_printf_common+0xc8>
 8005a2a:	2000      	movs	r0, #0
 8005a2c:	e010      	b.n	8005a50 <_printf_common+0xac>
 8005a2e:	3701      	adds	r7, #1
 8005a30:	68e3      	ldr	r3, [r4, #12]
 8005a32:	682a      	ldr	r2, [r5, #0]
 8005a34:	1a9b      	subs	r3, r3, r2
 8005a36:	42bb      	cmp	r3, r7
 8005a38:	ddd2      	ble.n	80059e0 <_printf_common+0x3c>
 8005a3a:	0022      	movs	r2, r4
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	9901      	ldr	r1, [sp, #4]
 8005a40:	9800      	ldr	r0, [sp, #0]
 8005a42:	9e08      	ldr	r6, [sp, #32]
 8005a44:	3219      	adds	r2, #25
 8005a46:	47b0      	blx	r6
 8005a48:	1c43      	adds	r3, r0, #1
 8005a4a:	d1f0      	bne.n	8005a2e <_printf_common+0x8a>
 8005a4c:	2001      	movs	r0, #1
 8005a4e:	4240      	negs	r0, r0
 8005a50:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005a52:	2030      	movs	r0, #48	; 0x30
 8005a54:	18e1      	adds	r1, r4, r3
 8005a56:	3143      	adds	r1, #67	; 0x43
 8005a58:	7008      	strb	r0, [r1, #0]
 8005a5a:	0021      	movs	r1, r4
 8005a5c:	1c5a      	adds	r2, r3, #1
 8005a5e:	3145      	adds	r1, #69	; 0x45
 8005a60:	7809      	ldrb	r1, [r1, #0]
 8005a62:	18a2      	adds	r2, r4, r2
 8005a64:	3243      	adds	r2, #67	; 0x43
 8005a66:	3302      	adds	r3, #2
 8005a68:	7011      	strb	r1, [r2, #0]
 8005a6a:	e7c1      	b.n	80059f0 <_printf_common+0x4c>
 8005a6c:	0022      	movs	r2, r4
 8005a6e:	2301      	movs	r3, #1
 8005a70:	9901      	ldr	r1, [sp, #4]
 8005a72:	9800      	ldr	r0, [sp, #0]
 8005a74:	9e08      	ldr	r6, [sp, #32]
 8005a76:	321a      	adds	r2, #26
 8005a78:	47b0      	blx	r6
 8005a7a:	1c43      	adds	r3, r0, #1
 8005a7c:	d0e6      	beq.n	8005a4c <_printf_common+0xa8>
 8005a7e:	3701      	adds	r7, #1
 8005a80:	e7d1      	b.n	8005a26 <_printf_common+0x82>
	...

08005a84 <_printf_i>:
 8005a84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a86:	b08b      	sub	sp, #44	; 0x2c
 8005a88:	9206      	str	r2, [sp, #24]
 8005a8a:	000a      	movs	r2, r1
 8005a8c:	3243      	adds	r2, #67	; 0x43
 8005a8e:	9307      	str	r3, [sp, #28]
 8005a90:	9005      	str	r0, [sp, #20]
 8005a92:	9204      	str	r2, [sp, #16]
 8005a94:	7e0a      	ldrb	r2, [r1, #24]
 8005a96:	000c      	movs	r4, r1
 8005a98:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005a9a:	2a78      	cmp	r2, #120	; 0x78
 8005a9c:	d807      	bhi.n	8005aae <_printf_i+0x2a>
 8005a9e:	2a62      	cmp	r2, #98	; 0x62
 8005aa0:	d809      	bhi.n	8005ab6 <_printf_i+0x32>
 8005aa2:	2a00      	cmp	r2, #0
 8005aa4:	d100      	bne.n	8005aa8 <_printf_i+0x24>
 8005aa6:	e0c1      	b.n	8005c2c <_printf_i+0x1a8>
 8005aa8:	2a58      	cmp	r2, #88	; 0x58
 8005aaa:	d100      	bne.n	8005aae <_printf_i+0x2a>
 8005aac:	e08c      	b.n	8005bc8 <_printf_i+0x144>
 8005aae:	0026      	movs	r6, r4
 8005ab0:	3642      	adds	r6, #66	; 0x42
 8005ab2:	7032      	strb	r2, [r6, #0]
 8005ab4:	e022      	b.n	8005afc <_printf_i+0x78>
 8005ab6:	0010      	movs	r0, r2
 8005ab8:	3863      	subs	r0, #99	; 0x63
 8005aba:	2815      	cmp	r0, #21
 8005abc:	d8f7      	bhi.n	8005aae <_printf_i+0x2a>
 8005abe:	f7fa fb29 	bl	8000114 <__gnu_thumb1_case_shi>
 8005ac2:	0016      	.short	0x0016
 8005ac4:	fff6001f 	.word	0xfff6001f
 8005ac8:	fff6fff6 	.word	0xfff6fff6
 8005acc:	001ffff6 	.word	0x001ffff6
 8005ad0:	fff6fff6 	.word	0xfff6fff6
 8005ad4:	fff6fff6 	.word	0xfff6fff6
 8005ad8:	003600a8 	.word	0x003600a8
 8005adc:	fff6009a 	.word	0xfff6009a
 8005ae0:	00b9fff6 	.word	0x00b9fff6
 8005ae4:	0036fff6 	.word	0x0036fff6
 8005ae8:	fff6fff6 	.word	0xfff6fff6
 8005aec:	009e      	.short	0x009e
 8005aee:	0026      	movs	r6, r4
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	3642      	adds	r6, #66	; 0x42
 8005af4:	1d11      	adds	r1, r2, #4
 8005af6:	6019      	str	r1, [r3, #0]
 8005af8:	6813      	ldr	r3, [r2, #0]
 8005afa:	7033      	strb	r3, [r6, #0]
 8005afc:	2301      	movs	r3, #1
 8005afe:	e0a7      	b.n	8005c50 <_printf_i+0x1cc>
 8005b00:	6808      	ldr	r0, [r1, #0]
 8005b02:	6819      	ldr	r1, [r3, #0]
 8005b04:	1d0a      	adds	r2, r1, #4
 8005b06:	0605      	lsls	r5, r0, #24
 8005b08:	d50b      	bpl.n	8005b22 <_printf_i+0x9e>
 8005b0a:	680d      	ldr	r5, [r1, #0]
 8005b0c:	601a      	str	r2, [r3, #0]
 8005b0e:	2d00      	cmp	r5, #0
 8005b10:	da03      	bge.n	8005b1a <_printf_i+0x96>
 8005b12:	232d      	movs	r3, #45	; 0x2d
 8005b14:	9a04      	ldr	r2, [sp, #16]
 8005b16:	426d      	negs	r5, r5
 8005b18:	7013      	strb	r3, [r2, #0]
 8005b1a:	4b61      	ldr	r3, [pc, #388]	; (8005ca0 <_printf_i+0x21c>)
 8005b1c:	270a      	movs	r7, #10
 8005b1e:	9303      	str	r3, [sp, #12]
 8005b20:	e01b      	b.n	8005b5a <_printf_i+0xd6>
 8005b22:	680d      	ldr	r5, [r1, #0]
 8005b24:	601a      	str	r2, [r3, #0]
 8005b26:	0641      	lsls	r1, r0, #25
 8005b28:	d5f1      	bpl.n	8005b0e <_printf_i+0x8a>
 8005b2a:	b22d      	sxth	r5, r5
 8005b2c:	e7ef      	b.n	8005b0e <_printf_i+0x8a>
 8005b2e:	680d      	ldr	r5, [r1, #0]
 8005b30:	6819      	ldr	r1, [r3, #0]
 8005b32:	1d08      	adds	r0, r1, #4
 8005b34:	6018      	str	r0, [r3, #0]
 8005b36:	062e      	lsls	r6, r5, #24
 8005b38:	d501      	bpl.n	8005b3e <_printf_i+0xba>
 8005b3a:	680d      	ldr	r5, [r1, #0]
 8005b3c:	e003      	b.n	8005b46 <_printf_i+0xc2>
 8005b3e:	066d      	lsls	r5, r5, #25
 8005b40:	d5fb      	bpl.n	8005b3a <_printf_i+0xb6>
 8005b42:	680d      	ldr	r5, [r1, #0]
 8005b44:	b2ad      	uxth	r5, r5
 8005b46:	4b56      	ldr	r3, [pc, #344]	; (8005ca0 <_printf_i+0x21c>)
 8005b48:	2708      	movs	r7, #8
 8005b4a:	9303      	str	r3, [sp, #12]
 8005b4c:	2a6f      	cmp	r2, #111	; 0x6f
 8005b4e:	d000      	beq.n	8005b52 <_printf_i+0xce>
 8005b50:	3702      	adds	r7, #2
 8005b52:	0023      	movs	r3, r4
 8005b54:	2200      	movs	r2, #0
 8005b56:	3343      	adds	r3, #67	; 0x43
 8005b58:	701a      	strb	r2, [r3, #0]
 8005b5a:	6863      	ldr	r3, [r4, #4]
 8005b5c:	60a3      	str	r3, [r4, #8]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	db03      	blt.n	8005b6a <_printf_i+0xe6>
 8005b62:	2204      	movs	r2, #4
 8005b64:	6821      	ldr	r1, [r4, #0]
 8005b66:	4391      	bics	r1, r2
 8005b68:	6021      	str	r1, [r4, #0]
 8005b6a:	2d00      	cmp	r5, #0
 8005b6c:	d102      	bne.n	8005b74 <_printf_i+0xf0>
 8005b6e:	9e04      	ldr	r6, [sp, #16]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d00c      	beq.n	8005b8e <_printf_i+0x10a>
 8005b74:	9e04      	ldr	r6, [sp, #16]
 8005b76:	0028      	movs	r0, r5
 8005b78:	0039      	movs	r1, r7
 8005b7a:	f7fa fb5b 	bl	8000234 <__aeabi_uidivmod>
 8005b7e:	9b03      	ldr	r3, [sp, #12]
 8005b80:	3e01      	subs	r6, #1
 8005b82:	5c5b      	ldrb	r3, [r3, r1]
 8005b84:	7033      	strb	r3, [r6, #0]
 8005b86:	002b      	movs	r3, r5
 8005b88:	0005      	movs	r5, r0
 8005b8a:	429f      	cmp	r7, r3
 8005b8c:	d9f3      	bls.n	8005b76 <_printf_i+0xf2>
 8005b8e:	2f08      	cmp	r7, #8
 8005b90:	d109      	bne.n	8005ba6 <_printf_i+0x122>
 8005b92:	6823      	ldr	r3, [r4, #0]
 8005b94:	07db      	lsls	r3, r3, #31
 8005b96:	d506      	bpl.n	8005ba6 <_printf_i+0x122>
 8005b98:	6863      	ldr	r3, [r4, #4]
 8005b9a:	6922      	ldr	r2, [r4, #16]
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	dc02      	bgt.n	8005ba6 <_printf_i+0x122>
 8005ba0:	2330      	movs	r3, #48	; 0x30
 8005ba2:	3e01      	subs	r6, #1
 8005ba4:	7033      	strb	r3, [r6, #0]
 8005ba6:	9b04      	ldr	r3, [sp, #16]
 8005ba8:	1b9b      	subs	r3, r3, r6
 8005baa:	6123      	str	r3, [r4, #16]
 8005bac:	9b07      	ldr	r3, [sp, #28]
 8005bae:	0021      	movs	r1, r4
 8005bb0:	9300      	str	r3, [sp, #0]
 8005bb2:	9805      	ldr	r0, [sp, #20]
 8005bb4:	9b06      	ldr	r3, [sp, #24]
 8005bb6:	aa09      	add	r2, sp, #36	; 0x24
 8005bb8:	f7ff fef4 	bl	80059a4 <_printf_common>
 8005bbc:	1c43      	adds	r3, r0, #1
 8005bbe:	d14c      	bne.n	8005c5a <_printf_i+0x1d6>
 8005bc0:	2001      	movs	r0, #1
 8005bc2:	4240      	negs	r0, r0
 8005bc4:	b00b      	add	sp, #44	; 0x2c
 8005bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bc8:	3145      	adds	r1, #69	; 0x45
 8005bca:	700a      	strb	r2, [r1, #0]
 8005bcc:	4a34      	ldr	r2, [pc, #208]	; (8005ca0 <_printf_i+0x21c>)
 8005bce:	9203      	str	r2, [sp, #12]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	6821      	ldr	r1, [r4, #0]
 8005bd4:	ca20      	ldmia	r2!, {r5}
 8005bd6:	601a      	str	r2, [r3, #0]
 8005bd8:	0608      	lsls	r0, r1, #24
 8005bda:	d516      	bpl.n	8005c0a <_printf_i+0x186>
 8005bdc:	07cb      	lsls	r3, r1, #31
 8005bde:	d502      	bpl.n	8005be6 <_printf_i+0x162>
 8005be0:	2320      	movs	r3, #32
 8005be2:	4319      	orrs	r1, r3
 8005be4:	6021      	str	r1, [r4, #0]
 8005be6:	2710      	movs	r7, #16
 8005be8:	2d00      	cmp	r5, #0
 8005bea:	d1b2      	bne.n	8005b52 <_printf_i+0xce>
 8005bec:	2320      	movs	r3, #32
 8005bee:	6822      	ldr	r2, [r4, #0]
 8005bf0:	439a      	bics	r2, r3
 8005bf2:	6022      	str	r2, [r4, #0]
 8005bf4:	e7ad      	b.n	8005b52 <_printf_i+0xce>
 8005bf6:	2220      	movs	r2, #32
 8005bf8:	6809      	ldr	r1, [r1, #0]
 8005bfa:	430a      	orrs	r2, r1
 8005bfc:	6022      	str	r2, [r4, #0]
 8005bfe:	0022      	movs	r2, r4
 8005c00:	2178      	movs	r1, #120	; 0x78
 8005c02:	3245      	adds	r2, #69	; 0x45
 8005c04:	7011      	strb	r1, [r2, #0]
 8005c06:	4a27      	ldr	r2, [pc, #156]	; (8005ca4 <_printf_i+0x220>)
 8005c08:	e7e1      	b.n	8005bce <_printf_i+0x14a>
 8005c0a:	0648      	lsls	r0, r1, #25
 8005c0c:	d5e6      	bpl.n	8005bdc <_printf_i+0x158>
 8005c0e:	b2ad      	uxth	r5, r5
 8005c10:	e7e4      	b.n	8005bdc <_printf_i+0x158>
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	680d      	ldr	r5, [r1, #0]
 8005c16:	1d10      	adds	r0, r2, #4
 8005c18:	6949      	ldr	r1, [r1, #20]
 8005c1a:	6018      	str	r0, [r3, #0]
 8005c1c:	6813      	ldr	r3, [r2, #0]
 8005c1e:	062e      	lsls	r6, r5, #24
 8005c20:	d501      	bpl.n	8005c26 <_printf_i+0x1a2>
 8005c22:	6019      	str	r1, [r3, #0]
 8005c24:	e002      	b.n	8005c2c <_printf_i+0x1a8>
 8005c26:	066d      	lsls	r5, r5, #25
 8005c28:	d5fb      	bpl.n	8005c22 <_printf_i+0x19e>
 8005c2a:	8019      	strh	r1, [r3, #0]
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	9e04      	ldr	r6, [sp, #16]
 8005c30:	6123      	str	r3, [r4, #16]
 8005c32:	e7bb      	b.n	8005bac <_printf_i+0x128>
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	1d11      	adds	r1, r2, #4
 8005c38:	6019      	str	r1, [r3, #0]
 8005c3a:	6816      	ldr	r6, [r2, #0]
 8005c3c:	2100      	movs	r1, #0
 8005c3e:	0030      	movs	r0, r6
 8005c40:	6862      	ldr	r2, [r4, #4]
 8005c42:	f000 fb45 	bl	80062d0 <memchr>
 8005c46:	2800      	cmp	r0, #0
 8005c48:	d001      	beq.n	8005c4e <_printf_i+0x1ca>
 8005c4a:	1b80      	subs	r0, r0, r6
 8005c4c:	6060      	str	r0, [r4, #4]
 8005c4e:	6863      	ldr	r3, [r4, #4]
 8005c50:	6123      	str	r3, [r4, #16]
 8005c52:	2300      	movs	r3, #0
 8005c54:	9a04      	ldr	r2, [sp, #16]
 8005c56:	7013      	strb	r3, [r2, #0]
 8005c58:	e7a8      	b.n	8005bac <_printf_i+0x128>
 8005c5a:	6923      	ldr	r3, [r4, #16]
 8005c5c:	0032      	movs	r2, r6
 8005c5e:	9906      	ldr	r1, [sp, #24]
 8005c60:	9805      	ldr	r0, [sp, #20]
 8005c62:	9d07      	ldr	r5, [sp, #28]
 8005c64:	47a8      	blx	r5
 8005c66:	1c43      	adds	r3, r0, #1
 8005c68:	d0aa      	beq.n	8005bc0 <_printf_i+0x13c>
 8005c6a:	6823      	ldr	r3, [r4, #0]
 8005c6c:	079b      	lsls	r3, r3, #30
 8005c6e:	d415      	bmi.n	8005c9c <_printf_i+0x218>
 8005c70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c72:	68e0      	ldr	r0, [r4, #12]
 8005c74:	4298      	cmp	r0, r3
 8005c76:	daa5      	bge.n	8005bc4 <_printf_i+0x140>
 8005c78:	0018      	movs	r0, r3
 8005c7a:	e7a3      	b.n	8005bc4 <_printf_i+0x140>
 8005c7c:	0022      	movs	r2, r4
 8005c7e:	2301      	movs	r3, #1
 8005c80:	9906      	ldr	r1, [sp, #24]
 8005c82:	9805      	ldr	r0, [sp, #20]
 8005c84:	9e07      	ldr	r6, [sp, #28]
 8005c86:	3219      	adds	r2, #25
 8005c88:	47b0      	blx	r6
 8005c8a:	1c43      	adds	r3, r0, #1
 8005c8c:	d098      	beq.n	8005bc0 <_printf_i+0x13c>
 8005c8e:	3501      	adds	r5, #1
 8005c90:	68e3      	ldr	r3, [r4, #12]
 8005c92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c94:	1a9b      	subs	r3, r3, r2
 8005c96:	42ab      	cmp	r3, r5
 8005c98:	dcf0      	bgt.n	8005c7c <_printf_i+0x1f8>
 8005c9a:	e7e9      	b.n	8005c70 <_printf_i+0x1ec>
 8005c9c:	2500      	movs	r5, #0
 8005c9e:	e7f7      	b.n	8005c90 <_printf_i+0x20c>
 8005ca0:	08006926 	.word	0x08006926
 8005ca4:	08006937 	.word	0x08006937

08005ca8 <__swbuf_r>:
 8005ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005caa:	0005      	movs	r5, r0
 8005cac:	000e      	movs	r6, r1
 8005cae:	0014      	movs	r4, r2
 8005cb0:	2800      	cmp	r0, #0
 8005cb2:	d004      	beq.n	8005cbe <__swbuf_r+0x16>
 8005cb4:	6983      	ldr	r3, [r0, #24]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d101      	bne.n	8005cbe <__swbuf_r+0x16>
 8005cba:	f000 f9f9 	bl	80060b0 <__sinit>
 8005cbe:	4b22      	ldr	r3, [pc, #136]	; (8005d48 <__swbuf_r+0xa0>)
 8005cc0:	429c      	cmp	r4, r3
 8005cc2:	d12e      	bne.n	8005d22 <__swbuf_r+0x7a>
 8005cc4:	686c      	ldr	r4, [r5, #4]
 8005cc6:	69a3      	ldr	r3, [r4, #24]
 8005cc8:	60a3      	str	r3, [r4, #8]
 8005cca:	89a3      	ldrh	r3, [r4, #12]
 8005ccc:	071b      	lsls	r3, r3, #28
 8005cce:	d532      	bpl.n	8005d36 <__swbuf_r+0x8e>
 8005cd0:	6923      	ldr	r3, [r4, #16]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d02f      	beq.n	8005d36 <__swbuf_r+0x8e>
 8005cd6:	6823      	ldr	r3, [r4, #0]
 8005cd8:	6922      	ldr	r2, [r4, #16]
 8005cda:	b2f7      	uxtb	r7, r6
 8005cdc:	1a98      	subs	r0, r3, r2
 8005cde:	6963      	ldr	r3, [r4, #20]
 8005ce0:	b2f6      	uxtb	r6, r6
 8005ce2:	4283      	cmp	r3, r0
 8005ce4:	dc05      	bgt.n	8005cf2 <__swbuf_r+0x4a>
 8005ce6:	0021      	movs	r1, r4
 8005ce8:	0028      	movs	r0, r5
 8005cea:	f000 f93f 	bl	8005f6c <_fflush_r>
 8005cee:	2800      	cmp	r0, #0
 8005cf0:	d127      	bne.n	8005d42 <__swbuf_r+0x9a>
 8005cf2:	68a3      	ldr	r3, [r4, #8]
 8005cf4:	3001      	adds	r0, #1
 8005cf6:	3b01      	subs	r3, #1
 8005cf8:	60a3      	str	r3, [r4, #8]
 8005cfa:	6823      	ldr	r3, [r4, #0]
 8005cfc:	1c5a      	adds	r2, r3, #1
 8005cfe:	6022      	str	r2, [r4, #0]
 8005d00:	701f      	strb	r7, [r3, #0]
 8005d02:	6963      	ldr	r3, [r4, #20]
 8005d04:	4283      	cmp	r3, r0
 8005d06:	d004      	beq.n	8005d12 <__swbuf_r+0x6a>
 8005d08:	89a3      	ldrh	r3, [r4, #12]
 8005d0a:	07db      	lsls	r3, r3, #31
 8005d0c:	d507      	bpl.n	8005d1e <__swbuf_r+0x76>
 8005d0e:	2e0a      	cmp	r6, #10
 8005d10:	d105      	bne.n	8005d1e <__swbuf_r+0x76>
 8005d12:	0021      	movs	r1, r4
 8005d14:	0028      	movs	r0, r5
 8005d16:	f000 f929 	bl	8005f6c <_fflush_r>
 8005d1a:	2800      	cmp	r0, #0
 8005d1c:	d111      	bne.n	8005d42 <__swbuf_r+0x9a>
 8005d1e:	0030      	movs	r0, r6
 8005d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d22:	4b0a      	ldr	r3, [pc, #40]	; (8005d4c <__swbuf_r+0xa4>)
 8005d24:	429c      	cmp	r4, r3
 8005d26:	d101      	bne.n	8005d2c <__swbuf_r+0x84>
 8005d28:	68ac      	ldr	r4, [r5, #8]
 8005d2a:	e7cc      	b.n	8005cc6 <__swbuf_r+0x1e>
 8005d2c:	4b08      	ldr	r3, [pc, #32]	; (8005d50 <__swbuf_r+0xa8>)
 8005d2e:	429c      	cmp	r4, r3
 8005d30:	d1c9      	bne.n	8005cc6 <__swbuf_r+0x1e>
 8005d32:	68ec      	ldr	r4, [r5, #12]
 8005d34:	e7c7      	b.n	8005cc6 <__swbuf_r+0x1e>
 8005d36:	0021      	movs	r1, r4
 8005d38:	0028      	movs	r0, r5
 8005d3a:	f000 f80b 	bl	8005d54 <__swsetup_r>
 8005d3e:	2800      	cmp	r0, #0
 8005d40:	d0c9      	beq.n	8005cd6 <__swbuf_r+0x2e>
 8005d42:	2601      	movs	r6, #1
 8005d44:	4276      	negs	r6, r6
 8005d46:	e7ea      	b.n	8005d1e <__swbuf_r+0x76>
 8005d48:	08006968 	.word	0x08006968
 8005d4c:	08006988 	.word	0x08006988
 8005d50:	08006948 	.word	0x08006948

08005d54 <__swsetup_r>:
 8005d54:	4b37      	ldr	r3, [pc, #220]	; (8005e34 <__swsetup_r+0xe0>)
 8005d56:	b570      	push	{r4, r5, r6, lr}
 8005d58:	681d      	ldr	r5, [r3, #0]
 8005d5a:	0006      	movs	r6, r0
 8005d5c:	000c      	movs	r4, r1
 8005d5e:	2d00      	cmp	r5, #0
 8005d60:	d005      	beq.n	8005d6e <__swsetup_r+0x1a>
 8005d62:	69ab      	ldr	r3, [r5, #24]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d102      	bne.n	8005d6e <__swsetup_r+0x1a>
 8005d68:	0028      	movs	r0, r5
 8005d6a:	f000 f9a1 	bl	80060b0 <__sinit>
 8005d6e:	4b32      	ldr	r3, [pc, #200]	; (8005e38 <__swsetup_r+0xe4>)
 8005d70:	429c      	cmp	r4, r3
 8005d72:	d10f      	bne.n	8005d94 <__swsetup_r+0x40>
 8005d74:	686c      	ldr	r4, [r5, #4]
 8005d76:	230c      	movs	r3, #12
 8005d78:	5ee2      	ldrsh	r2, [r4, r3]
 8005d7a:	b293      	uxth	r3, r2
 8005d7c:	0711      	lsls	r1, r2, #28
 8005d7e:	d42d      	bmi.n	8005ddc <__swsetup_r+0x88>
 8005d80:	06d9      	lsls	r1, r3, #27
 8005d82:	d411      	bmi.n	8005da8 <__swsetup_r+0x54>
 8005d84:	2309      	movs	r3, #9
 8005d86:	2001      	movs	r0, #1
 8005d88:	6033      	str	r3, [r6, #0]
 8005d8a:	3337      	adds	r3, #55	; 0x37
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	81a3      	strh	r3, [r4, #12]
 8005d90:	4240      	negs	r0, r0
 8005d92:	bd70      	pop	{r4, r5, r6, pc}
 8005d94:	4b29      	ldr	r3, [pc, #164]	; (8005e3c <__swsetup_r+0xe8>)
 8005d96:	429c      	cmp	r4, r3
 8005d98:	d101      	bne.n	8005d9e <__swsetup_r+0x4a>
 8005d9a:	68ac      	ldr	r4, [r5, #8]
 8005d9c:	e7eb      	b.n	8005d76 <__swsetup_r+0x22>
 8005d9e:	4b28      	ldr	r3, [pc, #160]	; (8005e40 <__swsetup_r+0xec>)
 8005da0:	429c      	cmp	r4, r3
 8005da2:	d1e8      	bne.n	8005d76 <__swsetup_r+0x22>
 8005da4:	68ec      	ldr	r4, [r5, #12]
 8005da6:	e7e6      	b.n	8005d76 <__swsetup_r+0x22>
 8005da8:	075b      	lsls	r3, r3, #29
 8005daa:	d513      	bpl.n	8005dd4 <__swsetup_r+0x80>
 8005dac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005dae:	2900      	cmp	r1, #0
 8005db0:	d008      	beq.n	8005dc4 <__swsetup_r+0x70>
 8005db2:	0023      	movs	r3, r4
 8005db4:	3344      	adds	r3, #68	; 0x44
 8005db6:	4299      	cmp	r1, r3
 8005db8:	d002      	beq.n	8005dc0 <__swsetup_r+0x6c>
 8005dba:	0030      	movs	r0, r6
 8005dbc:	f7ff f8be 	bl	8004f3c <_free_r>
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	6363      	str	r3, [r4, #52]	; 0x34
 8005dc4:	2224      	movs	r2, #36	; 0x24
 8005dc6:	89a3      	ldrh	r3, [r4, #12]
 8005dc8:	4393      	bics	r3, r2
 8005dca:	81a3      	strh	r3, [r4, #12]
 8005dcc:	2300      	movs	r3, #0
 8005dce:	6063      	str	r3, [r4, #4]
 8005dd0:	6923      	ldr	r3, [r4, #16]
 8005dd2:	6023      	str	r3, [r4, #0]
 8005dd4:	2308      	movs	r3, #8
 8005dd6:	89a2      	ldrh	r2, [r4, #12]
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	81a3      	strh	r3, [r4, #12]
 8005ddc:	6923      	ldr	r3, [r4, #16]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d10b      	bne.n	8005dfa <__swsetup_r+0xa6>
 8005de2:	21a0      	movs	r1, #160	; 0xa0
 8005de4:	2280      	movs	r2, #128	; 0x80
 8005de6:	89a3      	ldrh	r3, [r4, #12]
 8005de8:	0089      	lsls	r1, r1, #2
 8005dea:	0092      	lsls	r2, r2, #2
 8005dec:	400b      	ands	r3, r1
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d003      	beq.n	8005dfa <__swsetup_r+0xa6>
 8005df2:	0021      	movs	r1, r4
 8005df4:	0030      	movs	r0, r6
 8005df6:	f000 fa27 	bl	8006248 <__smakebuf_r>
 8005dfa:	220c      	movs	r2, #12
 8005dfc:	5ea3      	ldrsh	r3, [r4, r2]
 8005dfe:	2001      	movs	r0, #1
 8005e00:	001a      	movs	r2, r3
 8005e02:	b299      	uxth	r1, r3
 8005e04:	4002      	ands	r2, r0
 8005e06:	4203      	tst	r3, r0
 8005e08:	d00f      	beq.n	8005e2a <__swsetup_r+0xd6>
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	60a2      	str	r2, [r4, #8]
 8005e0e:	6962      	ldr	r2, [r4, #20]
 8005e10:	4252      	negs	r2, r2
 8005e12:	61a2      	str	r2, [r4, #24]
 8005e14:	2000      	movs	r0, #0
 8005e16:	6922      	ldr	r2, [r4, #16]
 8005e18:	4282      	cmp	r2, r0
 8005e1a:	d1ba      	bne.n	8005d92 <__swsetup_r+0x3e>
 8005e1c:	060a      	lsls	r2, r1, #24
 8005e1e:	d5b8      	bpl.n	8005d92 <__swsetup_r+0x3e>
 8005e20:	2240      	movs	r2, #64	; 0x40
 8005e22:	4313      	orrs	r3, r2
 8005e24:	81a3      	strh	r3, [r4, #12]
 8005e26:	3801      	subs	r0, #1
 8005e28:	e7b3      	b.n	8005d92 <__swsetup_r+0x3e>
 8005e2a:	0788      	lsls	r0, r1, #30
 8005e2c:	d400      	bmi.n	8005e30 <__swsetup_r+0xdc>
 8005e2e:	6962      	ldr	r2, [r4, #20]
 8005e30:	60a2      	str	r2, [r4, #8]
 8005e32:	e7ef      	b.n	8005e14 <__swsetup_r+0xc0>
 8005e34:	20000070 	.word	0x20000070
 8005e38:	08006968 	.word	0x08006968
 8005e3c:	08006988 	.word	0x08006988
 8005e40:	08006948 	.word	0x08006948

08005e44 <abort>:
 8005e44:	2006      	movs	r0, #6
 8005e46:	b510      	push	{r4, lr}
 8005e48:	f000 fac2 	bl	80063d0 <raise>
 8005e4c:	2001      	movs	r0, #1
 8005e4e:	f7fb f93b 	bl	80010c8 <_exit>
	...

08005e54 <__sflush_r>:
 8005e54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e56:	898b      	ldrh	r3, [r1, #12]
 8005e58:	0005      	movs	r5, r0
 8005e5a:	000c      	movs	r4, r1
 8005e5c:	071a      	lsls	r2, r3, #28
 8005e5e:	d45f      	bmi.n	8005f20 <__sflush_r+0xcc>
 8005e60:	684a      	ldr	r2, [r1, #4]
 8005e62:	2a00      	cmp	r2, #0
 8005e64:	dc04      	bgt.n	8005e70 <__sflush_r+0x1c>
 8005e66:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8005e68:	2a00      	cmp	r2, #0
 8005e6a:	dc01      	bgt.n	8005e70 <__sflush_r+0x1c>
 8005e6c:	2000      	movs	r0, #0
 8005e6e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005e70:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005e72:	2f00      	cmp	r7, #0
 8005e74:	d0fa      	beq.n	8005e6c <__sflush_r+0x18>
 8005e76:	2200      	movs	r2, #0
 8005e78:	2180      	movs	r1, #128	; 0x80
 8005e7a:	682e      	ldr	r6, [r5, #0]
 8005e7c:	602a      	str	r2, [r5, #0]
 8005e7e:	001a      	movs	r2, r3
 8005e80:	0149      	lsls	r1, r1, #5
 8005e82:	400a      	ands	r2, r1
 8005e84:	420b      	tst	r3, r1
 8005e86:	d034      	beq.n	8005ef2 <__sflush_r+0x9e>
 8005e88:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005e8a:	89a3      	ldrh	r3, [r4, #12]
 8005e8c:	075b      	lsls	r3, r3, #29
 8005e8e:	d506      	bpl.n	8005e9e <__sflush_r+0x4a>
 8005e90:	6863      	ldr	r3, [r4, #4]
 8005e92:	1ac0      	subs	r0, r0, r3
 8005e94:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d001      	beq.n	8005e9e <__sflush_r+0x4a>
 8005e9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005e9c:	1ac0      	subs	r0, r0, r3
 8005e9e:	0002      	movs	r2, r0
 8005ea0:	6a21      	ldr	r1, [r4, #32]
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	0028      	movs	r0, r5
 8005ea6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005ea8:	47b8      	blx	r7
 8005eaa:	89a1      	ldrh	r1, [r4, #12]
 8005eac:	1c43      	adds	r3, r0, #1
 8005eae:	d106      	bne.n	8005ebe <__sflush_r+0x6a>
 8005eb0:	682b      	ldr	r3, [r5, #0]
 8005eb2:	2b1d      	cmp	r3, #29
 8005eb4:	d831      	bhi.n	8005f1a <__sflush_r+0xc6>
 8005eb6:	4a2c      	ldr	r2, [pc, #176]	; (8005f68 <__sflush_r+0x114>)
 8005eb8:	40da      	lsrs	r2, r3
 8005eba:	07d3      	lsls	r3, r2, #31
 8005ebc:	d52d      	bpl.n	8005f1a <__sflush_r+0xc6>
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	6063      	str	r3, [r4, #4]
 8005ec2:	6923      	ldr	r3, [r4, #16]
 8005ec4:	6023      	str	r3, [r4, #0]
 8005ec6:	04cb      	lsls	r3, r1, #19
 8005ec8:	d505      	bpl.n	8005ed6 <__sflush_r+0x82>
 8005eca:	1c43      	adds	r3, r0, #1
 8005ecc:	d102      	bne.n	8005ed4 <__sflush_r+0x80>
 8005ece:	682b      	ldr	r3, [r5, #0]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d100      	bne.n	8005ed6 <__sflush_r+0x82>
 8005ed4:	6560      	str	r0, [r4, #84]	; 0x54
 8005ed6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ed8:	602e      	str	r6, [r5, #0]
 8005eda:	2900      	cmp	r1, #0
 8005edc:	d0c6      	beq.n	8005e6c <__sflush_r+0x18>
 8005ede:	0023      	movs	r3, r4
 8005ee0:	3344      	adds	r3, #68	; 0x44
 8005ee2:	4299      	cmp	r1, r3
 8005ee4:	d002      	beq.n	8005eec <__sflush_r+0x98>
 8005ee6:	0028      	movs	r0, r5
 8005ee8:	f7ff f828 	bl	8004f3c <_free_r>
 8005eec:	2000      	movs	r0, #0
 8005eee:	6360      	str	r0, [r4, #52]	; 0x34
 8005ef0:	e7bd      	b.n	8005e6e <__sflush_r+0x1a>
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	0028      	movs	r0, r5
 8005ef6:	6a21      	ldr	r1, [r4, #32]
 8005ef8:	47b8      	blx	r7
 8005efa:	1c43      	adds	r3, r0, #1
 8005efc:	d1c5      	bne.n	8005e8a <__sflush_r+0x36>
 8005efe:	682b      	ldr	r3, [r5, #0]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d0c2      	beq.n	8005e8a <__sflush_r+0x36>
 8005f04:	2b1d      	cmp	r3, #29
 8005f06:	d001      	beq.n	8005f0c <__sflush_r+0xb8>
 8005f08:	2b16      	cmp	r3, #22
 8005f0a:	d101      	bne.n	8005f10 <__sflush_r+0xbc>
 8005f0c:	602e      	str	r6, [r5, #0]
 8005f0e:	e7ad      	b.n	8005e6c <__sflush_r+0x18>
 8005f10:	2340      	movs	r3, #64	; 0x40
 8005f12:	89a2      	ldrh	r2, [r4, #12]
 8005f14:	4313      	orrs	r3, r2
 8005f16:	81a3      	strh	r3, [r4, #12]
 8005f18:	e7a9      	b.n	8005e6e <__sflush_r+0x1a>
 8005f1a:	2340      	movs	r3, #64	; 0x40
 8005f1c:	430b      	orrs	r3, r1
 8005f1e:	e7fa      	b.n	8005f16 <__sflush_r+0xc2>
 8005f20:	690f      	ldr	r7, [r1, #16]
 8005f22:	2f00      	cmp	r7, #0
 8005f24:	d0a2      	beq.n	8005e6c <__sflush_r+0x18>
 8005f26:	680a      	ldr	r2, [r1, #0]
 8005f28:	600f      	str	r7, [r1, #0]
 8005f2a:	1bd2      	subs	r2, r2, r7
 8005f2c:	9201      	str	r2, [sp, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	079b      	lsls	r3, r3, #30
 8005f32:	d100      	bne.n	8005f36 <__sflush_r+0xe2>
 8005f34:	694a      	ldr	r2, [r1, #20]
 8005f36:	60a2      	str	r2, [r4, #8]
 8005f38:	9b01      	ldr	r3, [sp, #4]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	dc00      	bgt.n	8005f40 <__sflush_r+0xec>
 8005f3e:	e795      	b.n	8005e6c <__sflush_r+0x18>
 8005f40:	003a      	movs	r2, r7
 8005f42:	0028      	movs	r0, r5
 8005f44:	9b01      	ldr	r3, [sp, #4]
 8005f46:	6a21      	ldr	r1, [r4, #32]
 8005f48:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005f4a:	47b0      	blx	r6
 8005f4c:	2800      	cmp	r0, #0
 8005f4e:	dc06      	bgt.n	8005f5e <__sflush_r+0x10a>
 8005f50:	2340      	movs	r3, #64	; 0x40
 8005f52:	2001      	movs	r0, #1
 8005f54:	89a2      	ldrh	r2, [r4, #12]
 8005f56:	4240      	negs	r0, r0
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	81a3      	strh	r3, [r4, #12]
 8005f5c:	e787      	b.n	8005e6e <__sflush_r+0x1a>
 8005f5e:	9b01      	ldr	r3, [sp, #4]
 8005f60:	183f      	adds	r7, r7, r0
 8005f62:	1a1b      	subs	r3, r3, r0
 8005f64:	9301      	str	r3, [sp, #4]
 8005f66:	e7e7      	b.n	8005f38 <__sflush_r+0xe4>
 8005f68:	20400001 	.word	0x20400001

08005f6c <_fflush_r>:
 8005f6c:	690b      	ldr	r3, [r1, #16]
 8005f6e:	b570      	push	{r4, r5, r6, lr}
 8005f70:	0005      	movs	r5, r0
 8005f72:	000c      	movs	r4, r1
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d102      	bne.n	8005f7e <_fflush_r+0x12>
 8005f78:	2500      	movs	r5, #0
 8005f7a:	0028      	movs	r0, r5
 8005f7c:	bd70      	pop	{r4, r5, r6, pc}
 8005f7e:	2800      	cmp	r0, #0
 8005f80:	d004      	beq.n	8005f8c <_fflush_r+0x20>
 8005f82:	6983      	ldr	r3, [r0, #24]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d101      	bne.n	8005f8c <_fflush_r+0x20>
 8005f88:	f000 f892 	bl	80060b0 <__sinit>
 8005f8c:	4b14      	ldr	r3, [pc, #80]	; (8005fe0 <_fflush_r+0x74>)
 8005f8e:	429c      	cmp	r4, r3
 8005f90:	d11b      	bne.n	8005fca <_fflush_r+0x5e>
 8005f92:	686c      	ldr	r4, [r5, #4]
 8005f94:	220c      	movs	r2, #12
 8005f96:	5ea3      	ldrsh	r3, [r4, r2]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d0ed      	beq.n	8005f78 <_fflush_r+0xc>
 8005f9c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005f9e:	07d2      	lsls	r2, r2, #31
 8005fa0:	d404      	bmi.n	8005fac <_fflush_r+0x40>
 8005fa2:	059b      	lsls	r3, r3, #22
 8005fa4:	d402      	bmi.n	8005fac <_fflush_r+0x40>
 8005fa6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005fa8:	f000 f923 	bl	80061f2 <__retarget_lock_acquire_recursive>
 8005fac:	0028      	movs	r0, r5
 8005fae:	0021      	movs	r1, r4
 8005fb0:	f7ff ff50 	bl	8005e54 <__sflush_r>
 8005fb4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005fb6:	0005      	movs	r5, r0
 8005fb8:	07db      	lsls	r3, r3, #31
 8005fba:	d4de      	bmi.n	8005f7a <_fflush_r+0xe>
 8005fbc:	89a3      	ldrh	r3, [r4, #12]
 8005fbe:	059b      	lsls	r3, r3, #22
 8005fc0:	d4db      	bmi.n	8005f7a <_fflush_r+0xe>
 8005fc2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005fc4:	f000 f916 	bl	80061f4 <__retarget_lock_release_recursive>
 8005fc8:	e7d7      	b.n	8005f7a <_fflush_r+0xe>
 8005fca:	4b06      	ldr	r3, [pc, #24]	; (8005fe4 <_fflush_r+0x78>)
 8005fcc:	429c      	cmp	r4, r3
 8005fce:	d101      	bne.n	8005fd4 <_fflush_r+0x68>
 8005fd0:	68ac      	ldr	r4, [r5, #8]
 8005fd2:	e7df      	b.n	8005f94 <_fflush_r+0x28>
 8005fd4:	4b04      	ldr	r3, [pc, #16]	; (8005fe8 <_fflush_r+0x7c>)
 8005fd6:	429c      	cmp	r4, r3
 8005fd8:	d1dc      	bne.n	8005f94 <_fflush_r+0x28>
 8005fda:	68ec      	ldr	r4, [r5, #12]
 8005fdc:	e7da      	b.n	8005f94 <_fflush_r+0x28>
 8005fde:	46c0      	nop			; (mov r8, r8)
 8005fe0:	08006968 	.word	0x08006968
 8005fe4:	08006988 	.word	0x08006988
 8005fe8:	08006948 	.word	0x08006948

08005fec <std>:
 8005fec:	2300      	movs	r3, #0
 8005fee:	b510      	push	{r4, lr}
 8005ff0:	0004      	movs	r4, r0
 8005ff2:	6003      	str	r3, [r0, #0]
 8005ff4:	6043      	str	r3, [r0, #4]
 8005ff6:	6083      	str	r3, [r0, #8]
 8005ff8:	8181      	strh	r1, [r0, #12]
 8005ffa:	6643      	str	r3, [r0, #100]	; 0x64
 8005ffc:	0019      	movs	r1, r3
 8005ffe:	81c2      	strh	r2, [r0, #14]
 8006000:	6103      	str	r3, [r0, #16]
 8006002:	6143      	str	r3, [r0, #20]
 8006004:	6183      	str	r3, [r0, #24]
 8006006:	2208      	movs	r2, #8
 8006008:	305c      	adds	r0, #92	; 0x5c
 800600a:	f7fe ff8f 	bl	8004f2c <memset>
 800600e:	4b05      	ldr	r3, [pc, #20]	; (8006024 <std+0x38>)
 8006010:	6224      	str	r4, [r4, #32]
 8006012:	6263      	str	r3, [r4, #36]	; 0x24
 8006014:	4b04      	ldr	r3, [pc, #16]	; (8006028 <std+0x3c>)
 8006016:	62a3      	str	r3, [r4, #40]	; 0x28
 8006018:	4b04      	ldr	r3, [pc, #16]	; (800602c <std+0x40>)
 800601a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800601c:	4b04      	ldr	r3, [pc, #16]	; (8006030 <std+0x44>)
 800601e:	6323      	str	r3, [r4, #48]	; 0x30
 8006020:	bd10      	pop	{r4, pc}
 8006022:	46c0      	nop			; (mov r8, r8)
 8006024:	08006411 	.word	0x08006411
 8006028:	08006439 	.word	0x08006439
 800602c:	08006471 	.word	0x08006471
 8006030:	0800649d 	.word	0x0800649d

08006034 <_cleanup_r>:
 8006034:	b510      	push	{r4, lr}
 8006036:	4902      	ldr	r1, [pc, #8]	; (8006040 <_cleanup_r+0xc>)
 8006038:	f000 f8ba 	bl	80061b0 <_fwalk_reent>
 800603c:	bd10      	pop	{r4, pc}
 800603e:	46c0      	nop			; (mov r8, r8)
 8006040:	08005f6d 	.word	0x08005f6d

08006044 <__sfmoreglue>:
 8006044:	b570      	push	{r4, r5, r6, lr}
 8006046:	2568      	movs	r5, #104	; 0x68
 8006048:	1e4a      	subs	r2, r1, #1
 800604a:	4355      	muls	r5, r2
 800604c:	000e      	movs	r6, r1
 800604e:	0029      	movs	r1, r5
 8006050:	3174      	adds	r1, #116	; 0x74
 8006052:	f7fe ffdf 	bl	8005014 <_malloc_r>
 8006056:	1e04      	subs	r4, r0, #0
 8006058:	d008      	beq.n	800606c <__sfmoreglue+0x28>
 800605a:	2100      	movs	r1, #0
 800605c:	002a      	movs	r2, r5
 800605e:	6001      	str	r1, [r0, #0]
 8006060:	6046      	str	r6, [r0, #4]
 8006062:	300c      	adds	r0, #12
 8006064:	60a0      	str	r0, [r4, #8]
 8006066:	3268      	adds	r2, #104	; 0x68
 8006068:	f7fe ff60 	bl	8004f2c <memset>
 800606c:	0020      	movs	r0, r4
 800606e:	bd70      	pop	{r4, r5, r6, pc}

08006070 <__sfp_lock_acquire>:
 8006070:	b510      	push	{r4, lr}
 8006072:	4802      	ldr	r0, [pc, #8]	; (800607c <__sfp_lock_acquire+0xc>)
 8006074:	f000 f8bd 	bl	80061f2 <__retarget_lock_acquire_recursive>
 8006078:	bd10      	pop	{r4, pc}
 800607a:	46c0      	nop			; (mov r8, r8)
 800607c:	200003d1 	.word	0x200003d1

08006080 <__sfp_lock_release>:
 8006080:	b510      	push	{r4, lr}
 8006082:	4802      	ldr	r0, [pc, #8]	; (800608c <__sfp_lock_release+0xc>)
 8006084:	f000 f8b6 	bl	80061f4 <__retarget_lock_release_recursive>
 8006088:	bd10      	pop	{r4, pc}
 800608a:	46c0      	nop			; (mov r8, r8)
 800608c:	200003d1 	.word	0x200003d1

08006090 <__sinit_lock_acquire>:
 8006090:	b510      	push	{r4, lr}
 8006092:	4802      	ldr	r0, [pc, #8]	; (800609c <__sinit_lock_acquire+0xc>)
 8006094:	f000 f8ad 	bl	80061f2 <__retarget_lock_acquire_recursive>
 8006098:	bd10      	pop	{r4, pc}
 800609a:	46c0      	nop			; (mov r8, r8)
 800609c:	200003d2 	.word	0x200003d2

080060a0 <__sinit_lock_release>:
 80060a0:	b510      	push	{r4, lr}
 80060a2:	4802      	ldr	r0, [pc, #8]	; (80060ac <__sinit_lock_release+0xc>)
 80060a4:	f000 f8a6 	bl	80061f4 <__retarget_lock_release_recursive>
 80060a8:	bd10      	pop	{r4, pc}
 80060aa:	46c0      	nop			; (mov r8, r8)
 80060ac:	200003d2 	.word	0x200003d2

080060b0 <__sinit>:
 80060b0:	b513      	push	{r0, r1, r4, lr}
 80060b2:	0004      	movs	r4, r0
 80060b4:	f7ff ffec 	bl	8006090 <__sinit_lock_acquire>
 80060b8:	69a3      	ldr	r3, [r4, #24]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d002      	beq.n	80060c4 <__sinit+0x14>
 80060be:	f7ff ffef 	bl	80060a0 <__sinit_lock_release>
 80060c2:	bd13      	pop	{r0, r1, r4, pc}
 80060c4:	64a3      	str	r3, [r4, #72]	; 0x48
 80060c6:	64e3      	str	r3, [r4, #76]	; 0x4c
 80060c8:	6523      	str	r3, [r4, #80]	; 0x50
 80060ca:	4b13      	ldr	r3, [pc, #76]	; (8006118 <__sinit+0x68>)
 80060cc:	4a13      	ldr	r2, [pc, #76]	; (800611c <__sinit+0x6c>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	62a2      	str	r2, [r4, #40]	; 0x28
 80060d2:	9301      	str	r3, [sp, #4]
 80060d4:	42a3      	cmp	r3, r4
 80060d6:	d101      	bne.n	80060dc <__sinit+0x2c>
 80060d8:	2301      	movs	r3, #1
 80060da:	61a3      	str	r3, [r4, #24]
 80060dc:	0020      	movs	r0, r4
 80060de:	f000 f81f 	bl	8006120 <__sfp>
 80060e2:	6060      	str	r0, [r4, #4]
 80060e4:	0020      	movs	r0, r4
 80060e6:	f000 f81b 	bl	8006120 <__sfp>
 80060ea:	60a0      	str	r0, [r4, #8]
 80060ec:	0020      	movs	r0, r4
 80060ee:	f000 f817 	bl	8006120 <__sfp>
 80060f2:	2200      	movs	r2, #0
 80060f4:	2104      	movs	r1, #4
 80060f6:	60e0      	str	r0, [r4, #12]
 80060f8:	6860      	ldr	r0, [r4, #4]
 80060fa:	f7ff ff77 	bl	8005fec <std>
 80060fe:	2201      	movs	r2, #1
 8006100:	2109      	movs	r1, #9
 8006102:	68a0      	ldr	r0, [r4, #8]
 8006104:	f7ff ff72 	bl	8005fec <std>
 8006108:	2202      	movs	r2, #2
 800610a:	2112      	movs	r1, #18
 800610c:	68e0      	ldr	r0, [r4, #12]
 800610e:	f7ff ff6d 	bl	8005fec <std>
 8006112:	2301      	movs	r3, #1
 8006114:	61a3      	str	r3, [r4, #24]
 8006116:	e7d2      	b.n	80060be <__sinit+0xe>
 8006118:	08006760 	.word	0x08006760
 800611c:	08006035 	.word	0x08006035

08006120 <__sfp>:
 8006120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006122:	0007      	movs	r7, r0
 8006124:	f7ff ffa4 	bl	8006070 <__sfp_lock_acquire>
 8006128:	4b1f      	ldr	r3, [pc, #124]	; (80061a8 <__sfp+0x88>)
 800612a:	681e      	ldr	r6, [r3, #0]
 800612c:	69b3      	ldr	r3, [r6, #24]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d102      	bne.n	8006138 <__sfp+0x18>
 8006132:	0030      	movs	r0, r6
 8006134:	f7ff ffbc 	bl	80060b0 <__sinit>
 8006138:	3648      	adds	r6, #72	; 0x48
 800613a:	68b4      	ldr	r4, [r6, #8]
 800613c:	6873      	ldr	r3, [r6, #4]
 800613e:	3b01      	subs	r3, #1
 8006140:	d504      	bpl.n	800614c <__sfp+0x2c>
 8006142:	6833      	ldr	r3, [r6, #0]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d022      	beq.n	800618e <__sfp+0x6e>
 8006148:	6836      	ldr	r6, [r6, #0]
 800614a:	e7f6      	b.n	800613a <__sfp+0x1a>
 800614c:	220c      	movs	r2, #12
 800614e:	5ea5      	ldrsh	r5, [r4, r2]
 8006150:	2d00      	cmp	r5, #0
 8006152:	d11a      	bne.n	800618a <__sfp+0x6a>
 8006154:	0020      	movs	r0, r4
 8006156:	4b15      	ldr	r3, [pc, #84]	; (80061ac <__sfp+0x8c>)
 8006158:	3058      	adds	r0, #88	; 0x58
 800615a:	60e3      	str	r3, [r4, #12]
 800615c:	6665      	str	r5, [r4, #100]	; 0x64
 800615e:	f000 f847 	bl	80061f0 <__retarget_lock_init_recursive>
 8006162:	f7ff ff8d 	bl	8006080 <__sfp_lock_release>
 8006166:	0020      	movs	r0, r4
 8006168:	2208      	movs	r2, #8
 800616a:	0029      	movs	r1, r5
 800616c:	6025      	str	r5, [r4, #0]
 800616e:	60a5      	str	r5, [r4, #8]
 8006170:	6065      	str	r5, [r4, #4]
 8006172:	6125      	str	r5, [r4, #16]
 8006174:	6165      	str	r5, [r4, #20]
 8006176:	61a5      	str	r5, [r4, #24]
 8006178:	305c      	adds	r0, #92	; 0x5c
 800617a:	f7fe fed7 	bl	8004f2c <memset>
 800617e:	6365      	str	r5, [r4, #52]	; 0x34
 8006180:	63a5      	str	r5, [r4, #56]	; 0x38
 8006182:	64a5      	str	r5, [r4, #72]	; 0x48
 8006184:	64e5      	str	r5, [r4, #76]	; 0x4c
 8006186:	0020      	movs	r0, r4
 8006188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800618a:	3468      	adds	r4, #104	; 0x68
 800618c:	e7d7      	b.n	800613e <__sfp+0x1e>
 800618e:	2104      	movs	r1, #4
 8006190:	0038      	movs	r0, r7
 8006192:	f7ff ff57 	bl	8006044 <__sfmoreglue>
 8006196:	1e04      	subs	r4, r0, #0
 8006198:	6030      	str	r0, [r6, #0]
 800619a:	d1d5      	bne.n	8006148 <__sfp+0x28>
 800619c:	f7ff ff70 	bl	8006080 <__sfp_lock_release>
 80061a0:	230c      	movs	r3, #12
 80061a2:	603b      	str	r3, [r7, #0]
 80061a4:	e7ef      	b.n	8006186 <__sfp+0x66>
 80061a6:	46c0      	nop			; (mov r8, r8)
 80061a8:	08006760 	.word	0x08006760
 80061ac:	ffff0001 	.word	0xffff0001

080061b0 <_fwalk_reent>:
 80061b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80061b2:	0004      	movs	r4, r0
 80061b4:	0006      	movs	r6, r0
 80061b6:	2700      	movs	r7, #0
 80061b8:	9101      	str	r1, [sp, #4]
 80061ba:	3448      	adds	r4, #72	; 0x48
 80061bc:	6863      	ldr	r3, [r4, #4]
 80061be:	68a5      	ldr	r5, [r4, #8]
 80061c0:	9300      	str	r3, [sp, #0]
 80061c2:	9b00      	ldr	r3, [sp, #0]
 80061c4:	3b01      	subs	r3, #1
 80061c6:	9300      	str	r3, [sp, #0]
 80061c8:	d504      	bpl.n	80061d4 <_fwalk_reent+0x24>
 80061ca:	6824      	ldr	r4, [r4, #0]
 80061cc:	2c00      	cmp	r4, #0
 80061ce:	d1f5      	bne.n	80061bc <_fwalk_reent+0xc>
 80061d0:	0038      	movs	r0, r7
 80061d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80061d4:	89ab      	ldrh	r3, [r5, #12]
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d908      	bls.n	80061ec <_fwalk_reent+0x3c>
 80061da:	220e      	movs	r2, #14
 80061dc:	5eab      	ldrsh	r3, [r5, r2]
 80061de:	3301      	adds	r3, #1
 80061e0:	d004      	beq.n	80061ec <_fwalk_reent+0x3c>
 80061e2:	0029      	movs	r1, r5
 80061e4:	0030      	movs	r0, r6
 80061e6:	9b01      	ldr	r3, [sp, #4]
 80061e8:	4798      	blx	r3
 80061ea:	4307      	orrs	r7, r0
 80061ec:	3568      	adds	r5, #104	; 0x68
 80061ee:	e7e8      	b.n	80061c2 <_fwalk_reent+0x12>

080061f0 <__retarget_lock_init_recursive>:
 80061f0:	4770      	bx	lr

080061f2 <__retarget_lock_acquire_recursive>:
 80061f2:	4770      	bx	lr

080061f4 <__retarget_lock_release_recursive>:
 80061f4:	4770      	bx	lr
	...

080061f8 <__swhatbuf_r>:
 80061f8:	b570      	push	{r4, r5, r6, lr}
 80061fa:	000e      	movs	r6, r1
 80061fc:	001d      	movs	r5, r3
 80061fe:	230e      	movs	r3, #14
 8006200:	5ec9      	ldrsh	r1, [r1, r3]
 8006202:	0014      	movs	r4, r2
 8006204:	b096      	sub	sp, #88	; 0x58
 8006206:	2900      	cmp	r1, #0
 8006208:	da08      	bge.n	800621c <__swhatbuf_r+0x24>
 800620a:	220c      	movs	r2, #12
 800620c:	5eb3      	ldrsh	r3, [r6, r2]
 800620e:	2200      	movs	r2, #0
 8006210:	602a      	str	r2, [r5, #0]
 8006212:	061b      	lsls	r3, r3, #24
 8006214:	d411      	bmi.n	800623a <__swhatbuf_r+0x42>
 8006216:	2380      	movs	r3, #128	; 0x80
 8006218:	00db      	lsls	r3, r3, #3
 800621a:	e00f      	b.n	800623c <__swhatbuf_r+0x44>
 800621c:	466a      	mov	r2, sp
 800621e:	f000 f969 	bl	80064f4 <_fstat_r>
 8006222:	2800      	cmp	r0, #0
 8006224:	dbf1      	blt.n	800620a <__swhatbuf_r+0x12>
 8006226:	23f0      	movs	r3, #240	; 0xf0
 8006228:	9901      	ldr	r1, [sp, #4]
 800622a:	021b      	lsls	r3, r3, #8
 800622c:	4019      	ands	r1, r3
 800622e:	4b05      	ldr	r3, [pc, #20]	; (8006244 <__swhatbuf_r+0x4c>)
 8006230:	18c9      	adds	r1, r1, r3
 8006232:	424b      	negs	r3, r1
 8006234:	4159      	adcs	r1, r3
 8006236:	6029      	str	r1, [r5, #0]
 8006238:	e7ed      	b.n	8006216 <__swhatbuf_r+0x1e>
 800623a:	2340      	movs	r3, #64	; 0x40
 800623c:	2000      	movs	r0, #0
 800623e:	6023      	str	r3, [r4, #0]
 8006240:	b016      	add	sp, #88	; 0x58
 8006242:	bd70      	pop	{r4, r5, r6, pc}
 8006244:	ffffe000 	.word	0xffffe000

08006248 <__smakebuf_r>:
 8006248:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800624a:	2602      	movs	r6, #2
 800624c:	898b      	ldrh	r3, [r1, #12]
 800624e:	0005      	movs	r5, r0
 8006250:	000c      	movs	r4, r1
 8006252:	4233      	tst	r3, r6
 8006254:	d006      	beq.n	8006264 <__smakebuf_r+0x1c>
 8006256:	0023      	movs	r3, r4
 8006258:	3347      	adds	r3, #71	; 0x47
 800625a:	6023      	str	r3, [r4, #0]
 800625c:	6123      	str	r3, [r4, #16]
 800625e:	2301      	movs	r3, #1
 8006260:	6163      	str	r3, [r4, #20]
 8006262:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8006264:	466a      	mov	r2, sp
 8006266:	ab01      	add	r3, sp, #4
 8006268:	f7ff ffc6 	bl	80061f8 <__swhatbuf_r>
 800626c:	9900      	ldr	r1, [sp, #0]
 800626e:	0007      	movs	r7, r0
 8006270:	0028      	movs	r0, r5
 8006272:	f7fe fecf 	bl	8005014 <_malloc_r>
 8006276:	2800      	cmp	r0, #0
 8006278:	d108      	bne.n	800628c <__smakebuf_r+0x44>
 800627a:	220c      	movs	r2, #12
 800627c:	5ea3      	ldrsh	r3, [r4, r2]
 800627e:	059a      	lsls	r2, r3, #22
 8006280:	d4ef      	bmi.n	8006262 <__smakebuf_r+0x1a>
 8006282:	2203      	movs	r2, #3
 8006284:	4393      	bics	r3, r2
 8006286:	431e      	orrs	r6, r3
 8006288:	81a6      	strh	r6, [r4, #12]
 800628a:	e7e4      	b.n	8006256 <__smakebuf_r+0xe>
 800628c:	4b0f      	ldr	r3, [pc, #60]	; (80062cc <__smakebuf_r+0x84>)
 800628e:	62ab      	str	r3, [r5, #40]	; 0x28
 8006290:	2380      	movs	r3, #128	; 0x80
 8006292:	89a2      	ldrh	r2, [r4, #12]
 8006294:	6020      	str	r0, [r4, #0]
 8006296:	4313      	orrs	r3, r2
 8006298:	81a3      	strh	r3, [r4, #12]
 800629a:	9b00      	ldr	r3, [sp, #0]
 800629c:	6120      	str	r0, [r4, #16]
 800629e:	6163      	str	r3, [r4, #20]
 80062a0:	9b01      	ldr	r3, [sp, #4]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d00d      	beq.n	80062c2 <__smakebuf_r+0x7a>
 80062a6:	0028      	movs	r0, r5
 80062a8:	230e      	movs	r3, #14
 80062aa:	5ee1      	ldrsh	r1, [r4, r3]
 80062ac:	f000 f934 	bl	8006518 <_isatty_r>
 80062b0:	2800      	cmp	r0, #0
 80062b2:	d006      	beq.n	80062c2 <__smakebuf_r+0x7a>
 80062b4:	2203      	movs	r2, #3
 80062b6:	89a3      	ldrh	r3, [r4, #12]
 80062b8:	4393      	bics	r3, r2
 80062ba:	001a      	movs	r2, r3
 80062bc:	2301      	movs	r3, #1
 80062be:	4313      	orrs	r3, r2
 80062c0:	81a3      	strh	r3, [r4, #12]
 80062c2:	89a0      	ldrh	r0, [r4, #12]
 80062c4:	4307      	orrs	r7, r0
 80062c6:	81a7      	strh	r7, [r4, #12]
 80062c8:	e7cb      	b.n	8006262 <__smakebuf_r+0x1a>
 80062ca:	46c0      	nop			; (mov r8, r8)
 80062cc:	08006035 	.word	0x08006035

080062d0 <memchr>:
 80062d0:	b2c9      	uxtb	r1, r1
 80062d2:	1882      	adds	r2, r0, r2
 80062d4:	4290      	cmp	r0, r2
 80062d6:	d101      	bne.n	80062dc <memchr+0xc>
 80062d8:	2000      	movs	r0, #0
 80062da:	4770      	bx	lr
 80062dc:	7803      	ldrb	r3, [r0, #0]
 80062de:	428b      	cmp	r3, r1
 80062e0:	d0fb      	beq.n	80062da <memchr+0xa>
 80062e2:	3001      	adds	r0, #1
 80062e4:	e7f6      	b.n	80062d4 <memchr+0x4>

080062e6 <memcpy>:
 80062e6:	2300      	movs	r3, #0
 80062e8:	b510      	push	{r4, lr}
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d100      	bne.n	80062f0 <memcpy+0xa>
 80062ee:	bd10      	pop	{r4, pc}
 80062f0:	5ccc      	ldrb	r4, [r1, r3]
 80062f2:	54c4      	strb	r4, [r0, r3]
 80062f4:	3301      	adds	r3, #1
 80062f6:	e7f8      	b.n	80062ea <memcpy+0x4>

080062f8 <memmove>:
 80062f8:	b510      	push	{r4, lr}
 80062fa:	4288      	cmp	r0, r1
 80062fc:	d902      	bls.n	8006304 <memmove+0xc>
 80062fe:	188b      	adds	r3, r1, r2
 8006300:	4298      	cmp	r0, r3
 8006302:	d303      	bcc.n	800630c <memmove+0x14>
 8006304:	2300      	movs	r3, #0
 8006306:	e007      	b.n	8006318 <memmove+0x20>
 8006308:	5c8b      	ldrb	r3, [r1, r2]
 800630a:	5483      	strb	r3, [r0, r2]
 800630c:	3a01      	subs	r2, #1
 800630e:	d2fb      	bcs.n	8006308 <memmove+0x10>
 8006310:	bd10      	pop	{r4, pc}
 8006312:	5ccc      	ldrb	r4, [r1, r3]
 8006314:	54c4      	strb	r4, [r0, r3]
 8006316:	3301      	adds	r3, #1
 8006318:	429a      	cmp	r2, r3
 800631a:	d1fa      	bne.n	8006312 <memmove+0x1a>
 800631c:	e7f8      	b.n	8006310 <memmove+0x18>

0800631e <_realloc_r>:
 800631e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006320:	0007      	movs	r7, r0
 8006322:	000e      	movs	r6, r1
 8006324:	0014      	movs	r4, r2
 8006326:	2900      	cmp	r1, #0
 8006328:	d105      	bne.n	8006336 <_realloc_r+0x18>
 800632a:	0011      	movs	r1, r2
 800632c:	f7fe fe72 	bl	8005014 <_malloc_r>
 8006330:	0005      	movs	r5, r0
 8006332:	0028      	movs	r0, r5
 8006334:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006336:	2a00      	cmp	r2, #0
 8006338:	d103      	bne.n	8006342 <_realloc_r+0x24>
 800633a:	f7fe fdff 	bl	8004f3c <_free_r>
 800633e:	0025      	movs	r5, r4
 8006340:	e7f7      	b.n	8006332 <_realloc_r+0x14>
 8006342:	f000 f90f 	bl	8006564 <_malloc_usable_size_r>
 8006346:	9001      	str	r0, [sp, #4]
 8006348:	4284      	cmp	r4, r0
 800634a:	d803      	bhi.n	8006354 <_realloc_r+0x36>
 800634c:	0035      	movs	r5, r6
 800634e:	0843      	lsrs	r3, r0, #1
 8006350:	42a3      	cmp	r3, r4
 8006352:	d3ee      	bcc.n	8006332 <_realloc_r+0x14>
 8006354:	0021      	movs	r1, r4
 8006356:	0038      	movs	r0, r7
 8006358:	f7fe fe5c 	bl	8005014 <_malloc_r>
 800635c:	1e05      	subs	r5, r0, #0
 800635e:	d0e8      	beq.n	8006332 <_realloc_r+0x14>
 8006360:	9b01      	ldr	r3, [sp, #4]
 8006362:	0022      	movs	r2, r4
 8006364:	429c      	cmp	r4, r3
 8006366:	d900      	bls.n	800636a <_realloc_r+0x4c>
 8006368:	001a      	movs	r2, r3
 800636a:	0031      	movs	r1, r6
 800636c:	0028      	movs	r0, r5
 800636e:	f7ff ffba 	bl	80062e6 <memcpy>
 8006372:	0031      	movs	r1, r6
 8006374:	0038      	movs	r0, r7
 8006376:	f7fe fde1 	bl	8004f3c <_free_r>
 800637a:	e7da      	b.n	8006332 <_realloc_r+0x14>

0800637c <_raise_r>:
 800637c:	b570      	push	{r4, r5, r6, lr}
 800637e:	0004      	movs	r4, r0
 8006380:	000d      	movs	r5, r1
 8006382:	291f      	cmp	r1, #31
 8006384:	d904      	bls.n	8006390 <_raise_r+0x14>
 8006386:	2316      	movs	r3, #22
 8006388:	6003      	str	r3, [r0, #0]
 800638a:	2001      	movs	r0, #1
 800638c:	4240      	negs	r0, r0
 800638e:	bd70      	pop	{r4, r5, r6, pc}
 8006390:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006392:	2b00      	cmp	r3, #0
 8006394:	d004      	beq.n	80063a0 <_raise_r+0x24>
 8006396:	008a      	lsls	r2, r1, #2
 8006398:	189b      	adds	r3, r3, r2
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	2a00      	cmp	r2, #0
 800639e:	d108      	bne.n	80063b2 <_raise_r+0x36>
 80063a0:	0020      	movs	r0, r4
 80063a2:	f000 f831 	bl	8006408 <_getpid_r>
 80063a6:	002a      	movs	r2, r5
 80063a8:	0001      	movs	r1, r0
 80063aa:	0020      	movs	r0, r4
 80063ac:	f000 f81a 	bl	80063e4 <_kill_r>
 80063b0:	e7ed      	b.n	800638e <_raise_r+0x12>
 80063b2:	2000      	movs	r0, #0
 80063b4:	2a01      	cmp	r2, #1
 80063b6:	d0ea      	beq.n	800638e <_raise_r+0x12>
 80063b8:	1c51      	adds	r1, r2, #1
 80063ba:	d103      	bne.n	80063c4 <_raise_r+0x48>
 80063bc:	2316      	movs	r3, #22
 80063be:	3001      	adds	r0, #1
 80063c0:	6023      	str	r3, [r4, #0]
 80063c2:	e7e4      	b.n	800638e <_raise_r+0x12>
 80063c4:	2400      	movs	r4, #0
 80063c6:	0028      	movs	r0, r5
 80063c8:	601c      	str	r4, [r3, #0]
 80063ca:	4790      	blx	r2
 80063cc:	0020      	movs	r0, r4
 80063ce:	e7de      	b.n	800638e <_raise_r+0x12>

080063d0 <raise>:
 80063d0:	b510      	push	{r4, lr}
 80063d2:	4b03      	ldr	r3, [pc, #12]	; (80063e0 <raise+0x10>)
 80063d4:	0001      	movs	r1, r0
 80063d6:	6818      	ldr	r0, [r3, #0]
 80063d8:	f7ff ffd0 	bl	800637c <_raise_r>
 80063dc:	bd10      	pop	{r4, pc}
 80063de:	46c0      	nop			; (mov r8, r8)
 80063e0:	20000070 	.word	0x20000070

080063e4 <_kill_r>:
 80063e4:	2300      	movs	r3, #0
 80063e6:	b570      	push	{r4, r5, r6, lr}
 80063e8:	4d06      	ldr	r5, [pc, #24]	; (8006404 <_kill_r+0x20>)
 80063ea:	0004      	movs	r4, r0
 80063ec:	0008      	movs	r0, r1
 80063ee:	0011      	movs	r1, r2
 80063f0:	602b      	str	r3, [r5, #0]
 80063f2:	f7fa fe59 	bl	80010a8 <_kill>
 80063f6:	1c43      	adds	r3, r0, #1
 80063f8:	d103      	bne.n	8006402 <_kill_r+0x1e>
 80063fa:	682b      	ldr	r3, [r5, #0]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d000      	beq.n	8006402 <_kill_r+0x1e>
 8006400:	6023      	str	r3, [r4, #0]
 8006402:	bd70      	pop	{r4, r5, r6, pc}
 8006404:	200003cc 	.word	0x200003cc

08006408 <_getpid_r>:
 8006408:	b510      	push	{r4, lr}
 800640a:	f7fa fe47 	bl	800109c <_getpid>
 800640e:	bd10      	pop	{r4, pc}

08006410 <__sread>:
 8006410:	b570      	push	{r4, r5, r6, lr}
 8006412:	000c      	movs	r4, r1
 8006414:	250e      	movs	r5, #14
 8006416:	5f49      	ldrsh	r1, [r1, r5]
 8006418:	f000 f8ac 	bl	8006574 <_read_r>
 800641c:	2800      	cmp	r0, #0
 800641e:	db03      	blt.n	8006428 <__sread+0x18>
 8006420:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006422:	181b      	adds	r3, r3, r0
 8006424:	6563      	str	r3, [r4, #84]	; 0x54
 8006426:	bd70      	pop	{r4, r5, r6, pc}
 8006428:	89a3      	ldrh	r3, [r4, #12]
 800642a:	4a02      	ldr	r2, [pc, #8]	; (8006434 <__sread+0x24>)
 800642c:	4013      	ands	r3, r2
 800642e:	81a3      	strh	r3, [r4, #12]
 8006430:	e7f9      	b.n	8006426 <__sread+0x16>
 8006432:	46c0      	nop			; (mov r8, r8)
 8006434:	ffffefff 	.word	0xffffefff

08006438 <__swrite>:
 8006438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800643a:	001f      	movs	r7, r3
 800643c:	898b      	ldrh	r3, [r1, #12]
 800643e:	0005      	movs	r5, r0
 8006440:	000c      	movs	r4, r1
 8006442:	0016      	movs	r6, r2
 8006444:	05db      	lsls	r3, r3, #23
 8006446:	d505      	bpl.n	8006454 <__swrite+0x1c>
 8006448:	230e      	movs	r3, #14
 800644a:	5ec9      	ldrsh	r1, [r1, r3]
 800644c:	2200      	movs	r2, #0
 800644e:	2302      	movs	r3, #2
 8006450:	f000 f874 	bl	800653c <_lseek_r>
 8006454:	89a3      	ldrh	r3, [r4, #12]
 8006456:	4a05      	ldr	r2, [pc, #20]	; (800646c <__swrite+0x34>)
 8006458:	0028      	movs	r0, r5
 800645a:	4013      	ands	r3, r2
 800645c:	81a3      	strh	r3, [r4, #12]
 800645e:	0032      	movs	r2, r6
 8006460:	230e      	movs	r3, #14
 8006462:	5ee1      	ldrsh	r1, [r4, r3]
 8006464:	003b      	movs	r3, r7
 8006466:	f000 f81f 	bl	80064a8 <_write_r>
 800646a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800646c:	ffffefff 	.word	0xffffefff

08006470 <__sseek>:
 8006470:	b570      	push	{r4, r5, r6, lr}
 8006472:	000c      	movs	r4, r1
 8006474:	250e      	movs	r5, #14
 8006476:	5f49      	ldrsh	r1, [r1, r5]
 8006478:	f000 f860 	bl	800653c <_lseek_r>
 800647c:	89a3      	ldrh	r3, [r4, #12]
 800647e:	1c42      	adds	r2, r0, #1
 8006480:	d103      	bne.n	800648a <__sseek+0x1a>
 8006482:	4a05      	ldr	r2, [pc, #20]	; (8006498 <__sseek+0x28>)
 8006484:	4013      	ands	r3, r2
 8006486:	81a3      	strh	r3, [r4, #12]
 8006488:	bd70      	pop	{r4, r5, r6, pc}
 800648a:	2280      	movs	r2, #128	; 0x80
 800648c:	0152      	lsls	r2, r2, #5
 800648e:	4313      	orrs	r3, r2
 8006490:	81a3      	strh	r3, [r4, #12]
 8006492:	6560      	str	r0, [r4, #84]	; 0x54
 8006494:	e7f8      	b.n	8006488 <__sseek+0x18>
 8006496:	46c0      	nop			; (mov r8, r8)
 8006498:	ffffefff 	.word	0xffffefff

0800649c <__sclose>:
 800649c:	b510      	push	{r4, lr}
 800649e:	230e      	movs	r3, #14
 80064a0:	5ec9      	ldrsh	r1, [r1, r3]
 80064a2:	f000 f815 	bl	80064d0 <_close_r>
 80064a6:	bd10      	pop	{r4, pc}

080064a8 <_write_r>:
 80064a8:	b570      	push	{r4, r5, r6, lr}
 80064aa:	0004      	movs	r4, r0
 80064ac:	0008      	movs	r0, r1
 80064ae:	0011      	movs	r1, r2
 80064b0:	001a      	movs	r2, r3
 80064b2:	2300      	movs	r3, #0
 80064b4:	4d05      	ldr	r5, [pc, #20]	; (80064cc <_write_r+0x24>)
 80064b6:	602b      	str	r3, [r5, #0]
 80064b8:	f7fa fe2f 	bl	800111a <_write>
 80064bc:	1c43      	adds	r3, r0, #1
 80064be:	d103      	bne.n	80064c8 <_write_r+0x20>
 80064c0:	682b      	ldr	r3, [r5, #0]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d000      	beq.n	80064c8 <_write_r+0x20>
 80064c6:	6023      	str	r3, [r4, #0]
 80064c8:	bd70      	pop	{r4, r5, r6, pc}
 80064ca:	46c0      	nop			; (mov r8, r8)
 80064cc:	200003cc 	.word	0x200003cc

080064d0 <_close_r>:
 80064d0:	2300      	movs	r3, #0
 80064d2:	b570      	push	{r4, r5, r6, lr}
 80064d4:	4d06      	ldr	r5, [pc, #24]	; (80064f0 <_close_r+0x20>)
 80064d6:	0004      	movs	r4, r0
 80064d8:	0008      	movs	r0, r1
 80064da:	602b      	str	r3, [r5, #0]
 80064dc:	f7fa fe39 	bl	8001152 <_close>
 80064e0:	1c43      	adds	r3, r0, #1
 80064e2:	d103      	bne.n	80064ec <_close_r+0x1c>
 80064e4:	682b      	ldr	r3, [r5, #0]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d000      	beq.n	80064ec <_close_r+0x1c>
 80064ea:	6023      	str	r3, [r4, #0]
 80064ec:	bd70      	pop	{r4, r5, r6, pc}
 80064ee:	46c0      	nop			; (mov r8, r8)
 80064f0:	200003cc 	.word	0x200003cc

080064f4 <_fstat_r>:
 80064f4:	2300      	movs	r3, #0
 80064f6:	b570      	push	{r4, r5, r6, lr}
 80064f8:	4d06      	ldr	r5, [pc, #24]	; (8006514 <_fstat_r+0x20>)
 80064fa:	0004      	movs	r4, r0
 80064fc:	0008      	movs	r0, r1
 80064fe:	0011      	movs	r1, r2
 8006500:	602b      	str	r3, [r5, #0]
 8006502:	f7fa fe30 	bl	8001166 <_fstat>
 8006506:	1c43      	adds	r3, r0, #1
 8006508:	d103      	bne.n	8006512 <_fstat_r+0x1e>
 800650a:	682b      	ldr	r3, [r5, #0]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d000      	beq.n	8006512 <_fstat_r+0x1e>
 8006510:	6023      	str	r3, [r4, #0]
 8006512:	bd70      	pop	{r4, r5, r6, pc}
 8006514:	200003cc 	.word	0x200003cc

08006518 <_isatty_r>:
 8006518:	2300      	movs	r3, #0
 800651a:	b570      	push	{r4, r5, r6, lr}
 800651c:	4d06      	ldr	r5, [pc, #24]	; (8006538 <_isatty_r+0x20>)
 800651e:	0004      	movs	r4, r0
 8006520:	0008      	movs	r0, r1
 8006522:	602b      	str	r3, [r5, #0]
 8006524:	f7fa fe2d 	bl	8001182 <_isatty>
 8006528:	1c43      	adds	r3, r0, #1
 800652a:	d103      	bne.n	8006534 <_isatty_r+0x1c>
 800652c:	682b      	ldr	r3, [r5, #0]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d000      	beq.n	8006534 <_isatty_r+0x1c>
 8006532:	6023      	str	r3, [r4, #0]
 8006534:	bd70      	pop	{r4, r5, r6, pc}
 8006536:	46c0      	nop			; (mov r8, r8)
 8006538:	200003cc 	.word	0x200003cc

0800653c <_lseek_r>:
 800653c:	b570      	push	{r4, r5, r6, lr}
 800653e:	0004      	movs	r4, r0
 8006540:	0008      	movs	r0, r1
 8006542:	0011      	movs	r1, r2
 8006544:	001a      	movs	r2, r3
 8006546:	2300      	movs	r3, #0
 8006548:	4d05      	ldr	r5, [pc, #20]	; (8006560 <_lseek_r+0x24>)
 800654a:	602b      	str	r3, [r5, #0]
 800654c:	f7fa fe22 	bl	8001194 <_lseek>
 8006550:	1c43      	adds	r3, r0, #1
 8006552:	d103      	bne.n	800655c <_lseek_r+0x20>
 8006554:	682b      	ldr	r3, [r5, #0]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d000      	beq.n	800655c <_lseek_r+0x20>
 800655a:	6023      	str	r3, [r4, #0]
 800655c:	bd70      	pop	{r4, r5, r6, pc}
 800655e:	46c0      	nop			; (mov r8, r8)
 8006560:	200003cc 	.word	0x200003cc

08006564 <_malloc_usable_size_r>:
 8006564:	1f0b      	subs	r3, r1, #4
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	1f18      	subs	r0, r3, #4
 800656a:	2b00      	cmp	r3, #0
 800656c:	da01      	bge.n	8006572 <_malloc_usable_size_r+0xe>
 800656e:	580b      	ldr	r3, [r1, r0]
 8006570:	18c0      	adds	r0, r0, r3
 8006572:	4770      	bx	lr

08006574 <_read_r>:
 8006574:	b570      	push	{r4, r5, r6, lr}
 8006576:	0004      	movs	r4, r0
 8006578:	0008      	movs	r0, r1
 800657a:	0011      	movs	r1, r2
 800657c:	001a      	movs	r2, r3
 800657e:	2300      	movs	r3, #0
 8006580:	4d05      	ldr	r5, [pc, #20]	; (8006598 <_read_r+0x24>)
 8006582:	602b      	str	r3, [r5, #0]
 8006584:	f7fa fdac 	bl	80010e0 <_read>
 8006588:	1c43      	adds	r3, r0, #1
 800658a:	d103      	bne.n	8006594 <_read_r+0x20>
 800658c:	682b      	ldr	r3, [r5, #0]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d000      	beq.n	8006594 <_read_r+0x20>
 8006592:	6023      	str	r3, [r4, #0]
 8006594:	bd70      	pop	{r4, r5, r6, pc}
 8006596:	46c0      	nop			; (mov r8, r8)
 8006598:	200003cc 	.word	0x200003cc

0800659c <_init>:
 800659c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800659e:	46c0      	nop			; (mov r8, r8)
 80065a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065a2:	bc08      	pop	{r3}
 80065a4:	469e      	mov	lr, r3
 80065a6:	4770      	bx	lr

080065a8 <_fini>:
 80065a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065aa:	46c0      	nop			; (mov r8, r8)
 80065ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065ae:	bc08      	pop	{r3}
 80065b0:	469e      	mov	lr, r3
 80065b2:	4770      	bx	lr
